{
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | Marmos Demo",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | Marmos Demo",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | Marmos Demo",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  },
  "juptune/juptune/core/ds/Overview.html": {
    "href": "juptune/juptune/core/ds/Overview.html",
    "title": "Module - juptune.core.ds | Marmos Demo",
    "keywords": "Module - juptune.core.ds"
  },
  "juptune/juptune/core/ds/alloc/Overview.html": {
    "href": "juptune/juptune/core/ds/alloc/Overview.html",
    "title": "Module - juptune.core.ds.alloc | Marmos Demo",
    "keywords": "Module - juptune.core.ds.alloc Structs Name Description Malloc"
  },
  "juptune/juptune/core/ds/alloc/Structs/Malloc.html": {
    "href": "juptune/juptune/core/ds/alloc/Structs/Malloc.html",
    "title": "Struct - Malloc | Marmos Demo",
    "keywords": "Struct - Malloc Module juptune.core.ds.alloc public struct Malloc { // alias CtorParams = <todo: marmos support pending>; // __enumMember IsCopyable; } Aliases Name Description CtorParams Variables Name Description IsCopyable"
  },
  "juptune/juptune/core/ds/array/ArrayBase/Functions/capacity.html": {
    "href": "juptune/juptune/core/ds/array/ArrayBase/Functions/capacity.html",
    "title": "Overloads for - capacity | Marmos Demo",
    "keywords": "Overloads for - capacity Module juptune.core.ds.array Parent ArrayBase capacity() size_t capacity( )"
  },
  "juptune/juptune/core/ds/array/ArrayBase/Functions/dtorValues.html": {
    "href": "juptune/juptune/core/ds/array/ArrayBase/Functions/dtorValues.html",
    "title": "Overloads for - dtorValues | Marmos Demo",
    "keywords": "Overloads for - dtorValues Module juptune.core.ds.array Parent ArrayBase dtorValues(start, end) void dtorValues( size_t start, size_t end )"
  },
  "juptune/juptune/core/ds/array/ArrayBase/Functions/length.html": {
    "href": "juptune/juptune/core/ds/array/ArrayBase/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module juptune.core.ds.array Parent ArrayBase length() size_t length( ) length(l) void length( size_t l )"
  },
  "juptune/juptune/core/ds/array/ArrayBase/Functions/opIndex.html": {
    "href": "juptune/juptune/core/ds/array/ArrayBase/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module juptune.core.ds.array Parent ArrayBase opIndex() <bug: unknown> opIndex( ) opIndex(index) ValueT opIndex( size_t index ) opIndex(slice) <bug: unknown> opIndex( Slice slice )"
  },
  "juptune/juptune/core/ds/array/ArrayBase/Functions/ptr.html": {
    "href": "juptune/juptune/core/ds/array/ArrayBase/Functions/ptr.html",
    "title": "Overloads for - ptr | Marmos Demo",
    "keywords": "Overloads for - ptr Module juptune.core.ds.array Parent ArrayBase ptr() <bug: unknown> ptr( )"
  },
  "juptune/juptune/core/ds/array/ArrayBase/Functions/put.html": {
    "href": "juptune/juptune/core/ds/array/ArrayBase/Functions/put.html",
    "title": "Overloads for - put | Marmos Demo",
    "keywords": "Overloads for - put Module juptune.core.ds.array Parent ArrayBase put(array) void put( <bug: unknown> array )"
  },
  "juptune/juptune/core/ds/array/ArrayBase/Functions/remove.html": {
    "href": "juptune/juptune/core/ds/array/ArrayBase/Functions/remove.html",
    "title": "Overloads for - remove | Marmos Demo",
    "keywords": "Overloads for - remove Module juptune.core.ds.array Parent ArrayBase remove(index) ValueT remove( size_t index )"
  },
  "juptune/juptune/core/ds/array/ArrayBase/Functions/reserve.html": {
    "href": "juptune/juptune/core/ds/array/ArrayBase/Functions/reserve.html",
    "title": "Overloads for - reserve | Marmos Demo",
    "keywords": "Overloads for - reserve Module juptune.core.ds.array Parent ArrayBase reserve(amount) void reserve( size_t amount )"
  },
  "juptune/juptune/core/ds/array/ArrayBase/Functions/slice.html": {
    "href": "juptune/juptune/core/ds/array/ArrayBase/Functions/slice.html",
    "title": "Overloads for - slice | Marmos Demo",
    "keywords": "Overloads for - slice Module juptune.core.ds.array Parent ArrayBase slice() <bug: unknown> slice( )"
  },
  "juptune/juptune/core/ds/array/ArrayBase/Functions/toHash.html": {
    "href": "juptune/juptune/core/ds/array/ArrayBase/Functions/toHash.html",
    "title": "Overloads for - toHash | Marmos Demo",
    "keywords": "Overloads for - toHash Module juptune.core.ds.array Parent ArrayBase toHash() uint toHash( )"
  },
  "juptune/juptune/core/ds/array/Overview.html": {
    "href": "juptune/juptune/core/ds/array/Overview.html",
    "title": "Module - juptune.core.ds.array | Marmos Demo",
    "keywords": "Module - juptune.core.ds.array Aliases Name Description Array ArrayBaseDefault ArrayBaseNonShrinkDefault ArrayNonShrink Structs Name Description ArrayBase"
  },
  "juptune/juptune/core/ds/array/Structs/ArrayBase.html": {
    "href": "juptune/juptune/core/ds/array/Structs/ArrayBase.html",
    "title": "Struct - ArrayBase | Marmos Demo",
    "keywords": "Struct - ArrayBase Module juptune.core.ds.array public struct ArrayBase { // alias opDollar = <todo: marmos support pending>; // alias range = <todo: marmos support pending>; // alias ValueT = <todo: marmos support pending>; // size_t capacity( ) ; // void dtorValues( size_t start, size_t end ) ; // size_t length( ) ; // void length( size_t l ) ; // <bug: unknown> opIndex( ) ; // ValueT opIndex( size_t index ) ; // <bug: unknown> opIndex( Slice slice ) ; // <bug: unknown> ptr( ) ; // void put( <bug: unknown> array ) ; // ValueT remove( size_t index ) ; // void reserve( size_t amount ) ; // <bug: unknown> slice( ) ; // uint toHash( ) ; } Aliases Name Description opDollar range ValueT Functions Name Description capacity dtorValues length opIndex ptr put remove reserve slice toHash"
  },
  "juptune/juptune/core/ds/block/MemoryBlockAllocation/Functions/blockCount.html": {
    "href": "juptune/juptune/core/ds/block/MemoryBlockAllocation/Functions/blockCount.html",
    "title": "Overloads for - blockCount | Marmos Demo",
    "keywords": "Overloads for - blockCount Module juptune.core.ds.block Parent MemoryBlockAllocation blockCount() size_t blockCount( ) Returns The number of blocks in the allocation."
  },
  "juptune/juptune/core/ds/block/MemoryBlockAllocation/Functions/free.html": {
    "href": "juptune/juptune/core/ds/block/MemoryBlockAllocation/Functions/free.html",
    "title": "Overloads for - free | Marmos Demo",
    "keywords": "Overloads for - free Module juptune.core.ds.block Parent MemoryBlockAllocation free() void free( ) Frees the memory blocks back to its parent pool. Notes This function is weakly safe as it assumes that the parent pool is still valid."
  },
  "juptune/juptune/core/ds/block/MemoryBlockAllocation/Functions/head.html": {
    "href": "juptune/juptune/core/ds/block/MemoryBlockAllocation/Functions/head.html",
    "title": "Overloads for - head | Marmos Demo",
    "keywords": "Overloads for - head Module juptune.core.ds.block Parent MemoryBlockAllocation head() <bug: unknown> head( )"
  },
  "juptune/juptune/core/ds/block/MemoryBlockAllocation/Functions/powerOfTwo.html": {
    "href": "juptune/juptune/core/ds/block/MemoryBlockAllocation/Functions/powerOfTwo.html",
    "title": "Overloads for - powerOfTwo | Marmos Demo",
    "keywords": "Overloads for - powerOfTwo Module juptune.core.ds.block Parent MemoryBlockAllocation powerOfTwo() size_t powerOfTwo( ) Returns The power of two size of each block. e.g. 8 = 256 bytes, 12 = 4096 bytes."
  },
  "juptune/juptune/core/ds/block/MemoryBlockAllocation/Functions/tail.html": {
    "href": "juptune/juptune/core/ds/block/MemoryBlockAllocation/Functions/tail.html",
    "title": "Overloads for - tail | Marmos Demo",
    "keywords": "Overloads for - tail Module juptune.core.ds.block Parent MemoryBlockAllocation tail() <bug: unknown> tail( )"
  },
  "juptune/juptune/core/ds/block/MemoryBlockAllocation/Functions/totalBytes.html": {
    "href": "juptune/juptune/core/ds/block/MemoryBlockAllocation/Functions/totalBytes.html",
    "title": "Overloads for - totalBytes | Marmos Demo",
    "keywords": "Overloads for - totalBytes Module juptune.core.ds.block Parent MemoryBlockAllocation totalBytes() size_t totalBytes( ) Returns The sum of bytes across all allocated memory blocks."
  },
  "juptune/juptune/core/ds/block/MemoryBlockPool/Functions/addFreeBlock.html": {
    "href": "juptune/juptune/core/ds/block/MemoryBlockPool/Functions/addFreeBlock.html",
    "title": "Overloads for - addFreeBlock | Marmos Demo",
    "keywords": "Overloads for - addFreeBlock Module juptune.core.ds.block Parent MemoryBlockPool addFreeBlock(powerOfTwo, block) void addFreeBlock( size_t powerOfTwo, <bug: unknown> block )"
  },
  "juptune/juptune/core/ds/block/MemoryBlockPool/Functions/allocate.html": {
    "href": "juptune/juptune/core/ds/block/MemoryBlockPool/Functions/allocate.html",
    "title": "Overloads for - allocate | Marmos Demo",
    "keywords": "Overloads for - allocate Module juptune.core.ds.block Parent MemoryBlockPool allocate(powerOfTwo, blockCount, allocation) Result allocate( size_t powerOfTwo, size_t blockCount, MemoryBlockAllocation allocation ) Allocates a certain amount of blocks from the pool, at a specific power of two size. Notes Despite the name, this function doesn't actually allocate any memory from the system, but instead pulls from preallocated memory. In order to preallocate memory, use preallocateBlocks beforehand. There's loose protection against buggy double allocations and frees, but it's not perfect. This function does not attempt to clamp the powerOfTwo parameter to the nearest valid value. If this value is out of range, an assert will fail. Please use MIN_BLOCK_POWER and MAX_BLOCK_POWER to clamp the value and handle user input error cases. Performance Where n is the blockCount parameter, on success this function is always O(n). On failure, this function is at best O(1) if there are no free blocks, and at worst O(n-1) if there are free blocks. The latter case could be made O(1) by storing a free block count in each bucket, but I'm too lazy to do that right now. The main time loss culprit on each iteration is likely either the underlying branch for the while loop, or the repeated gapped memory access. So in otherwords, negligible at the expected small n values. Params powerOfTwo size_t The power of two size of each block. e.g. 8 = 256 bytes, 12 = 4096 bytes. blockCount size_t The number of blocks to allocate. allocation MemoryBlockAllocation The resulting allocation. Throws MemoryBlockPool.Errors.notEnoughBlocks if there are not enough free blocks to satisfy the request. Returns Result.noError if the allocation was successful. See Also MemoryBlockAllocation , MemoryBlockPool.preallocateBlocks"
  },
  "juptune/juptune/core/ds/block/MemoryBlockPool/Functions/bucketByPower.html": {
    "href": "juptune/juptune/core/ds/block/MemoryBlockPool/Functions/bucketByPower.html",
    "title": "Overloads for - bucketByPower | Marmos Demo",
    "keywords": "Overloads for - bucketByPower Module juptune.core.ds.block Parent MemoryBlockPool bucketByPower(power) <bug: unknown> bucketByPower( size_t power )"
  },
  "juptune/juptune/core/ds/block/MemoryBlockPool/Functions/calculateAllocationOffsets.html": {
    "href": "juptune/juptune/core/ds/block/MemoryBlockPool/Functions/calculateAllocationOffsets.html",
    "title": "Overloads for - calculateAllocationOffsets | Marmos Demo",
    "keywords": "Overloads for - calculateAllocationOffsets Module juptune.core.ds.block Parent MemoryBlockPool calculateAllocationOffsets(powerOfTwo, blockCount) AllocationOffsets calculateAllocationOffsets( size_t powerOfTwo, size_t blockCount ) static"
  },
  "juptune/juptune/core/ds/block/MemoryBlockPool/Functions/preallocateBlocks.html": {
    "href": "juptune/juptune/core/ds/block/MemoryBlockPool/Functions/preallocateBlocks.html",
    "title": "Overloads for - preallocateBlocks | Marmos Demo",
    "keywords": "Overloads for - preallocateBlocks Module juptune.core.ds.block Parent MemoryBlockPool preallocateBlocks(powerOfTwo, blockCount) Result preallocateBlocks( size_t powerOfTwo, size_t blockCount ) Preallocates a certain amount of blocks from the system, at a specific power of two size. Notes This function does not attempt to clamp the powerOfTwo parameter to the nearest valid value. If this value is out of range, an assert will fail. Please use MIN_BLOCK_POWER and MAX_BLOCK_POWER to clamp the value and handle user input error cases. Performance Performance for this function is a little difficult to simplify, but it's roughly O(n) where n is the blockCount parameter. The logic within this function scales at O(n), however the underlying calloc call depends on the libc/malloc-subsitute library that gets linked. Params powerOfTwo size_t The power of two size of each block. e.g. 8 = 256 bytes, 12 = 4096 bytes. blockCount size_t The number of blocks to allocate. Throws MemoryBlockPool.Errors.outOfMemory if there is not enough system memory to satisfy the request. Returns Result.noError if the allocation was successful. See Also MemoryBlockPool.allocate"
  },
  "juptune/juptune/core/ds/block/MemoryBlockPoolAllocator/Functions/allocate.html": {
    "href": "juptune/juptune/core/ds/block/MemoryBlockPoolAllocator/Functions/allocate.html",
    "title": "Overloads for - allocate | Marmos Demo",
    "keywords": "Overloads for - allocate Module juptune.core.ds.block Parent MemoryBlockPoolAllocator allocate(powerOfTwo, blockCount, allocation) Result allocate( size_t powerOfTwo, size_t blockCount, MemoryBlockAllocation allocation ) This is mainly a wrapper that ties together MemoryBlockPool.allocate and MemoryBlockPool.preallocateBlocks . So please see those functions for the bulk of information. This function will automatically preallocate blocks if the underlying pool returns notEnoughBlocks on allocation, but only up to the maxBlockCount specified in this config for the given power of two. Behaviour Allocate blockCount blocks for powerOfTwo . If the underlying pool returns notEnoughBlocks , then preallocate blocks for powerOfTwo up to maxBlockCount at a step of blocksPerAllocation specified within the allocator's config for the given power of two. If preallocOnFailure fails, then give up, otherwise recursively call this function again. Issue - Impossible allocations Currently there isn't really any short circuit path for detecting an impossible allocation. For example if you have a max block count of 16 but allocate 32 blocks, then this function will just keep allocating blocks until it hits the max block count, then fail. Issue - Slow, large preallocations This is particularly an issue with the default config as it only allocates 16 blocks at a time for each power of two (currently). So if you want 1024 blocks of 256 bytes, then this function will preallocate 16 blocks of 256 bytes over and over and over until it finally reaches 1024 blocks. Ultimately this comes down to right-sizing your config for your application. Throws Anything that MemoryBlockPool.preallocateBlocks can throw. Anything that MemoryBlockPool.allocate can throw. notEnoughBlocks is only thrown if the maxBlockCount has been reached, otherwise it's handled by this function. Params powerOfTwo size_t The power of two to allocate for. blockCount size_t The number of blocks to allocate. allocation MemoryBlockAllocation The allocation that was made. Returns Result.noError if the allocation succeeded."
  },
  "juptune/juptune/core/ds/block/MemoryBlockPoolAllocatorConfig/Functions/withPowerConfig.html": {
    "href": "juptune/juptune/core/ds/block/MemoryBlockPoolAllocatorConfig/Functions/withPowerConfig.html",
    "title": "Overloads for - withPowerConfig | Marmos Demo",
    "keywords": "Overloads for - withPowerConfig Module juptune.core.ds.block Parent MemoryBlockPoolAllocatorConfig withPowerConfig(powerOfTwo, config) MemoryBlockPoolAllocatorConfig withPowerConfig( size_t powerOfTwo, PowerOfTwo config )"
  },
  "juptune/juptune/core/ds/block/Overview.html": {
    "href": "juptune/juptune/core/ds/block/Overview.html",
    "title": "Module - juptune.core.ds.block | Marmos Demo",
    "keywords": "Module - juptune.core.ds.block Structs Name Description MemoryBlock MemoryBlockAllocation An allocation of blocks from a MemoryBlockPool . All blocks in the allocation are guaranteed to be same size. MemoryBlockPool A pool used to manage blocks of memory of varying sizes. MemoryBlockPoolAllocator This is a convenience wrapper around MemoryBlockPool that will handle preallocating blocks for you on allocation failure. It's intended as a more configurable, plug-and-play interface to MemoryBlockPool with more wider reaching concerns. MemoryBlockPoolAllocatorConfig"
  },
  "juptune/juptune/core/ds/block/Structs/MemoryBlock.html": {
    "href": "juptune/juptune/core/ds/block/Structs/MemoryBlock.html",
    "title": "Struct - MemoryBlock | Marmos Demo",
    "keywords": "Struct - MemoryBlock Module juptune.core.ds.block public struct MemoryBlock { // <bug: unknown> block; // bool isAllocated; // <bug: unknown> next; } Variables Name Description block isAllocated next"
  },
  "juptune/juptune/core/ds/block/Structs/MemoryBlockAllocation.html": {
    "href": "juptune/juptune/core/ds/block/Structs/MemoryBlockAllocation.html",
    "title": "Struct - MemoryBlockAllocation | Marmos Demo",
    "keywords": "Struct - MemoryBlockAllocation Module juptune.core.ds.block public struct MemoryBlockAllocation { // size_t blockCount( ) ; // Frees the memory blocks back to its parent pool. void free( ) ; // <bug: unknown> head( ) ; // size_t powerOfTwo( ) ; // <bug: unknown> tail( ) ; // size_t totalBytes( ) ; } About An allocation of blocks from a MemoryBlockPool . All blocks in the allocation are guaranteed to be same size. Functions Name Description blockCount free Frees the memory blocks back to its parent pool. head powerOfTwo tail totalBytes"
  },
  "juptune/juptune/core/ds/block/Structs/MemoryBlockPool.html": {
    "href": "juptune/juptune/core/ds/block/Structs/MemoryBlockPool.html",
    "title": "Struct - MemoryBlockPool | Marmos Demo",
    "keywords": "Struct - MemoryBlockPool Module juptune.core.ds.block public struct MemoryBlockPool { // void addFreeBlock( size_t powerOfTwo, <bug: unknown> block ) ; // Allocates a certain amount of blocks from the pool, at a specific power of two size. Result allocate( size_t powerOfTwo, size_t blockCount, MemoryBlockAllocation allocation ) ; // <bug: unknown> bucketByPower( size_t power ) ; // AllocationOffsets calculateAllocationOffsets( size_t powerOfTwo, size_t blockCount ) static; // Preallocates a certain amount of blocks from the system, at a specific power of two size. Result preallocateBlocks( size_t powerOfTwo, size_t blockCount ) ; // __enumMember BLOCK_BUCKETS; // Maximum block size, in power of two __enumMember MAX_BLOCK_POWER; // Maximum block size, in bytes __enumMember MAX_BLOCK_SIZE; // Minimum block size, in power of two __enumMember MIN_BLOCK_POWER; // Minimum block size, in bytes __enumMember MIN_BLOCK_SIZE; } About A pool used to manage blocks of memory of varying sizes. Notes This pool is not thread safe. It is not safe to move this pool once any memory has been allocated from it. This pool is not garbage collected. Once this pool's dtor is called, all memory allocated by this pool is freed. This also means that any allocations will become unsafe to use after the pool's dtor is called. Additionally memory blocks are not made aware to the GC, so please do not store GC pointers into the blocks. This pool is weakly safe in the sense that the user's management of memory is sane, and also trusted in the sense that calculations within the pool are correct. Block sizes are powers of two, and are in the range [256, 1024 **1024 ** 4] inclusive. Usage First you must preallocate blocks into the pool using preallocateBlocks . You can then allocate blocks from the pool using allocate , and free the blocks by calling .free or .__xdtor on the resulting allocation object. Due to the nature of the pool's memory model, it may be more efficient to allocate a larger number of blocks at once rather than allocating them one at a time. Currently there's not really any way to free data once preallocated beyond calling the destructor but this of course frees the entire set of data. This is a TODO since it hurts my brain when thinking about the overall flow of a program. Memory model \"Preallocation\" of blocks simply means that the pool will allocate a large chunk of memory from the system, where the size is dependent on the amount of blocks requested, and then split that memory up to form the resulting memory blocks. Each preallocation contains blocks for a single power of two. The layout of the memory is as follows, where the top is the start of the allocation: [AllocationMetadata (internal struct)] [n MemoryBlocks (internal struct)] [n*(1 << powerOfTwo) bytes] The AllocationMetadata struct is used to form a linked list of preallocation so that the pool can free all of its data when it is destroyed. The MemoryBlock struct is used to form a linked list of free blocks; store the underlying ubyte slice from the preallocation, and other misc internal metadata. The n*(1 << powerOfTwo) bytes is the unstructured chunk of memory that is split equally amongst each MemoryBlock . This is where your user data lives. Additionally this pool only contains a linked list of free blocks, and does not keep track of allocated blocks. Free block lists are stored within a static array of buckets, where each bucket represents a power of two, for easy and fast lookup. Functions Name Description addFreeBlock allocate Allocates a certain amount of blocks from the pool, at a specific power of two size. bucketByPower calculateAllocationOffsets preallocateBlocks Preallocates a certain amount of blocks from the system, at a specific power of two size. Variables Name Description BLOCK_BUCKETS MAX_BLOCK_POWER Maximum block size, in power of two MAX_BLOCK_SIZE Maximum block size, in bytes MIN_BLOCK_POWER Minimum block size, in power of two MIN_BLOCK_SIZE Minimum block size, in bytes"
  },
  "juptune/juptune/core/ds/block/Structs/MemoryBlockPoolAllocator.html": {
    "href": "juptune/juptune/core/ds/block/Structs/MemoryBlockPoolAllocator.html",
    "title": "Struct - MemoryBlockPoolAllocator | Marmos Demo",
    "keywords": "Struct - MemoryBlockPoolAllocator Module juptune.core.ds.block public struct MemoryBlockPoolAllocator { // This is mainly a wrapper that ties together `MemoryBlockPool.allocate` and `MemoryBlockPool.preallocateBlocks` . So please see those functions for the bulk of information. Result allocate( size_t powerOfTwo, size_t blockCount, MemoryBlockAllocation allocation ) ; } About This is a convenience wrapper around MemoryBlockPool that will handle preallocating blocks for you on allocation failure. It's intended as a more configurable, plug-and-play interface to MemoryBlockPool with more wider reaching concerns. This struct does not contain any important state itself, so can be copied around freely. Its total lifetime is directly tied to the lifetime of the underlying pool, so please be careful... This struct does not contain a destructor, so memory is only freed once the underlying pool is destroyed. This struct does not prevent other MemoryBlockPoolAllocator s from being created for the same pool, so please ensure that all created allocators contain the same configuration to avoid unexpected surprises in allocation behaviour. Functions Name Description allocate This is mainly a wrapper that ties together MemoryBlockPool.allocate and MemoryBlockPool.preallocateBlocks . So please see those functions for the bulk of information."
  },
  "juptune/juptune/core/ds/block/Structs/MemoryBlockPoolAllocatorConfig.html": {
    "href": "juptune/juptune/core/ds/block/Structs/MemoryBlockPoolAllocatorConfig.html",
    "title": "Struct - MemoryBlockPoolAllocatorConfig | Marmos Demo",
    "keywords": "Struct - MemoryBlockPoolAllocatorConfig Module juptune.core.ds.block public struct MemoryBlockPoolAllocatorConfig { // MemoryBlockPoolAllocatorConfig withPowerConfig( size_t powerOfTwo, PowerOfTwo config ) ; // <bug: unknown> powerConfig; } Functions Name Description withPowerConfig Variables Name Description powerConfig"
  },
  "juptune/juptune/core/ds/hashmap/Overview.html": {
    "href": "juptune/juptune/core/ds/hashmap/Overview.html",
    "title": "Module - juptune.core.ds.hashmap | Marmos Demo",
    "keywords": "Module - juptune.core.ds.hashmap Aliases Name Description HashMap RobinHoodHashMap RobinHoodHashMapDefault Structs Name Description RobinHoodHashMapBase"
  },
  "juptune/juptune/core/ds/hashmap/RobinHoodHashMapBase/Functions/byKeyValue.html": {
    "href": "juptune/juptune/core/ds/hashmap/RobinHoodHashMapBase/Functions/byKeyValue.html",
    "title": "Overloads for - byKeyValue | Marmos Demo",
    "keywords": "Overloads for - byKeyValue Module juptune.core.ds.hashmap Parent RobinHoodHashMapBase byKeyValue() <bug: unknown> byKeyValue( ) auto"
  },
  "juptune/juptune/core/ds/hashmap/RobinHoodHashMapBase/Functions/get.html": {
    "href": "juptune/juptune/core/ds/hashmap/RobinHoodHashMapBase/Functions/get.html",
    "title": "Overloads for - get | Marmos Demo",
    "keywords": "Overloads for - get Module juptune.core.ds.hashmap Parent RobinHoodHashMapBase get(key, default_) ValueT get( KeyT key, ValueT default_ )"
  },
  "juptune/juptune/core/ds/hashmap/RobinHoodHashMapBase/Functions/getPtr.html": {
    "href": "juptune/juptune/core/ds/hashmap/RobinHoodHashMapBase/Functions/getPtr.html",
    "title": "Overloads for - getPtr | Marmos Demo",
    "keywords": "Overloads for - getPtr Module juptune.core.ds.hashmap Parent RobinHoodHashMapBase getPtr(key) <bug: unknown> getPtr( KeyT key )"
  },
  "juptune/juptune/core/ds/hashmap/RobinHoodHashMapBase/Functions/length.html": {
    "href": "juptune/juptune/core/ds/hashmap/RobinHoodHashMapBase/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module juptune.core.ds.hashmap Parent RobinHoodHashMapBase length() size_t length( )"
  },
  "juptune/juptune/core/ds/hashmap/RobinHoodHashMapBase/Functions/moveToNewMap.html": {
    "href": "juptune/juptune/core/ds/hashmap/RobinHoodHashMapBase/Functions/moveToNewMap.html",
    "title": "Overloads for - moveToNewMap | Marmos Demo",
    "keywords": "Overloads for - moveToNewMap Module juptune.core.ds.hashmap Parent RobinHoodHashMapBase moveToNewMap(newMapSize) bool moveToNewMap( size_t newMapSize )"
  },
  "juptune/juptune/core/ds/hashmap/RobinHoodHashMapBase/Functions/opIndex.html": {
    "href": "juptune/juptune/core/ds/hashmap/RobinHoodHashMapBase/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module juptune.core.ds.hashmap Parent RobinHoodHashMapBase opIndex(key) ValueT opIndex( KeyT key )"
  },
  "juptune/juptune/core/ds/hashmap/RobinHoodHashMapBase/Functions/opIndexAssign.html": {
    "href": "juptune/juptune/core/ds/hashmap/RobinHoodHashMapBase/Functions/opIndexAssign.html",
    "title": "Overloads for - opIndexAssign | Marmos Demo",
    "keywords": "Overloads for - opIndexAssign Module juptune.core.ds.hashmap Parent RobinHoodHashMapBase opIndexAssign(value, key) void opIndexAssign( ValueT value, KeyT key )"
  },
  "juptune/juptune/core/ds/hashmap/RobinHoodHashMapBase/Functions/remove.html": {
    "href": "juptune/juptune/core/ds/hashmap/RobinHoodHashMapBase/Functions/remove.html",
    "title": "Overloads for - remove | Marmos Demo",
    "keywords": "Overloads for - remove Module juptune.core.ds.hashmap Parent RobinHoodHashMapBase remove(key, default_) ValueT remove( KeyT key, ValueT default_ )"
  },
  "juptune/juptune/core/ds/hashmap/RobinHoodHashMapBase/Functions/tryGet.html": {
    "href": "juptune/juptune/core/ds/hashmap/RobinHoodHashMapBase/Functions/tryGet.html",
    "title": "Overloads for - tryGet | Marmos Demo",
    "keywords": "Overloads for - tryGet Module juptune.core.ds.hashmap Parent RobinHoodHashMapBase tryGet(key, wasFound) ValueT tryGet( KeyT key, bool wasFound )"
  },
  "juptune/juptune/core/ds/hashmap/RobinHoodHashMapBase/Functions/tryRemove.html": {
    "href": "juptune/juptune/core/ds/hashmap/RobinHoodHashMapBase/Functions/tryRemove.html",
    "title": "Overloads for - tryRemove | Marmos Demo",
    "keywords": "Overloads for - tryRemove Module juptune.core.ds.hashmap Parent RobinHoodHashMapBase tryRemove(key, wasFound) ValueT tryRemove( KeyT key, bool wasFound )"
  },
  "juptune/juptune/core/ds/hashmap/Structs/RobinHoodHashMapBase.html": {
    "href": "juptune/juptune/core/ds/hashmap/Structs/RobinHoodHashMapBase.html",
    "title": "Struct - RobinHoodHashMapBase | Marmos Demo",
    "keywords": "Struct - RobinHoodHashMapBase Module juptune.core.ds.hashmap public struct RobinHoodHashMapBase { // alias KeyT = <todo: marmos support pending>; // alias ValueT = <todo: marmos support pending>; // <bug: unknown> byKeyValue( ) auto; // ValueT get( KeyT key, ValueT default_ ) ; // <bug: unknown> getPtr( KeyT key ) ; // size_t length( ) ; // bool moveToNewMap( size_t newMapSize ) ; // ValueT opIndex( KeyT key ) ; // void opIndexAssign( ValueT value, KeyT key ) ; // ValueT remove( KeyT key, ValueT default_ ) ; // ValueT tryGet( KeyT key, bool wasFound ) ; // ValueT tryRemove( KeyT key, bool wasFound ) ; } Aliases Name Description KeyT ValueT Functions Name Description byKeyValue get getPtr length moveToNewMap opIndex opIndexAssign remove tryGet tryRemove"
  },
  "juptune/juptune/core/ds/string/Overview.html": {
    "href": "juptune/juptune/core/ds/string/Overview.html",
    "title": "Module - juptune.core.ds.string | Marmos Demo",
    "keywords": "Module - juptune.core.ds.string Structs Name Description String Variables Name Description UseSSO"
  },
  "juptune/juptune/core/ds/string/String/Functions/disposeBigStringIfExists.html": {
    "href": "juptune/juptune/core/ds/string/String/Functions/disposeBigStringIfExists.html",
    "title": "Overloads for - disposeBigStringIfExists | Marmos Demo",
    "keywords": "Overloads for - disposeBigStringIfExists Module juptune.core.ds.string Parent String disposeBigStringIfExists() void disposeBigStringIfExists( )"
  },
  "juptune/juptune/core/ds/string/String/Functions/growBigStringIfNeeded.html": {
    "href": "juptune/juptune/core/ds/string/String/Functions/growBigStringIfNeeded.html",
    "title": "Overloads for - growBigStringIfNeeded | Marmos Demo",
    "keywords": "Overloads for - growBigStringIfNeeded Module juptune.core.ds.string Parent String growBigStringIfNeeded(newSize) void growBigStringIfNeeded( size_t newSize )"
  },
  "juptune/juptune/core/ds/string/String/Functions/isCompletelyEmpty.html": {
    "href": "juptune/juptune/core/ds/string/String/Functions/isCompletelyEmpty.html",
    "title": "Overloads for - isCompletelyEmpty | Marmos Demo",
    "keywords": "Overloads for - isCompletelyEmpty Module juptune.core.ds.string Parent String isCompletelyEmpty() bool isCompletelyEmpty( )"
  },
  "juptune/juptune/core/ds/string/String/Functions/isSmall.html": {
    "href": "juptune/juptune/core/ds/string/String/Functions/isSmall.html",
    "title": "Overloads for - isSmall | Marmos Demo",
    "keywords": "Overloads for - isSmall Module juptune.core.ds.string Parent String isSmall() bool isSmall( )"
  },
  "juptune/juptune/core/ds/string/String/Functions/length.html": {
    "href": "juptune/juptune/core/ds/string/String/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module juptune.core.ds.string Parent String length() size_t length( ) length(newLen) void length( size_t newLen )"
  },
  "juptune/juptune/core/ds/string/String/Functions/moveToBigString.html": {
    "href": "juptune/juptune/core/ds/string/String/Functions/moveToBigString.html",
    "title": "Overloads for - moveToBigString | Marmos Demo",
    "keywords": "Overloads for - moveToBigString Module juptune.core.ds.string Parent String moveToBigString() void moveToBigString( )"
  },
  "juptune/juptune/core/ds/string/String/Functions/opAssign.html": {
    "href": "juptune/juptune/core/ds/string/String/Functions/opAssign.html",
    "title": "Overloads for - opAssign | Marmos Demo",
    "keywords": "Overloads for - opAssign Module juptune.core.ds.string Parent String opAssign(str) void opAssign( <bug: unknown> str ) opAssign(_) void opAssign( <bug: unknown> _ )"
  },
  "juptune/juptune/core/ds/string/String/Functions/opDollar.html": {
    "href": "juptune/juptune/core/ds/string/String/Functions/opDollar.html",
    "title": "Overloads for - opDollar | Marmos Demo",
    "keywords": "Overloads for - opDollar Module juptune.core.ds.string Parent String opDollar() size_t opDollar( )"
  },
  "juptune/juptune/core/ds/string/String/Functions/opEquals.html": {
    "href": "juptune/juptune/core/ds/string/String/Functions/opEquals.html",
    "title": "Overloads for - opEquals | Marmos Demo",
    "keywords": "Overloads for - opEquals Module juptune.core.ds.string Parent String opEquals(other) bool opEquals( <bug: unknown> other ) opEquals(_) bool opEquals( <bug: unknown> _ )"
  },
  "juptune/juptune/core/ds/string/String/Functions/opIndex.html": {
    "href": "juptune/juptune/core/ds/string/String/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module juptune.core.ds.string Parent String opIndex() <bug: unknown> opIndex( ) opIndex(index) char opIndex( size_t index )"
  },
  "juptune/juptune/core/ds/string/String/Functions/opIndexAssign.html": {
    "href": "juptune/juptune/core/ds/string/String/Functions/opIndexAssign.html",
    "title": "Overloads for - opIndexAssign | Marmos Demo",
    "keywords": "Overloads for - opIndexAssign Module juptune.core.ds.string Parent String opIndexAssign(v, index) void opIndexAssign( char v, size_t index )"
  },
  "juptune/juptune/core/ds/string/String/Functions/opSlice.html": {
    "href": "juptune/juptune/core/ds/string/String/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module juptune.core.ds.string Parent String opSlice(start, end) <bug: unknown> opSlice( size_t start, size_t end )"
  },
  "juptune/juptune/core/ds/string/String/Functions/opSliceAssign.html": {
    "href": "juptune/juptune/core/ds/string/String/Functions/opSliceAssign.html",
    "title": "Overloads for - opSliceAssign | Marmos Demo",
    "keywords": "Overloads for - opSliceAssign Module juptune.core.ds.string Parent String opSliceAssign(v, start, end) void opSliceAssign( char v, size_t start, size_t end ) opSliceAssign(str, start, end) void opSliceAssign( <bug: unknown> str, size_t start, size_t end )"
  },
  "juptune/juptune/core/ds/string/String/Functions/ptr.html": {
    "href": "juptune/juptune/core/ds/string/String/Functions/ptr.html",
    "title": "Overloads for - ptr | Marmos Demo",
    "keywords": "Overloads for - ptr Module juptune.core.ds.string Parent String ptr() <bug: unknown> ptr( )"
  },
  "juptune/juptune/core/ds/string/String/Functions/put.html": {
    "href": "juptune/juptune/core/ds/string/String/Functions/put.html",
    "title": "Overloads for - put | Marmos Demo",
    "keywords": "Overloads for - put Module juptune.core.ds.string Parent String put(chars) void put( <bug: unknown> chars ) put(ch) void put( char ch )"
  },
  "juptune/juptune/core/ds/string/String/Functions/range.html": {
    "href": "juptune/juptune/core/ds/string/String/Functions/range.html",
    "title": "Overloads for - range | Marmos Demo",
    "keywords": "Overloads for - range Module juptune.core.ds.string Parent String range() <bug: unknown> range( )"
  },
  "juptune/juptune/core/ds/string/String/Functions/setBigString.html": {
    "href": "juptune/juptune/core/ds/string/String/Functions/setBigString.html",
    "title": "Overloads for - setBigString | Marmos Demo",
    "keywords": "Overloads for - setBigString Module juptune.core.ds.string Parent String setBigString(chars) void setBigString( <bug: unknown> chars )"
  },
  "juptune/juptune/core/ds/string/String/Functions/setSmallString.html": {
    "href": "juptune/juptune/core/ds/string/String/Functions/setSmallString.html",
    "title": "Overloads for - setSmallString | Marmos Demo",
    "keywords": "Overloads for - setSmallString Module juptune.core.ds.string Parent String setSmallString(chars) void setSmallString( <bug: unknown> chars )"
  },
  "juptune/juptune/core/ds/string/String/Functions/slice.html": {
    "href": "juptune/juptune/core/ds/string/String/Functions/slice.html",
    "title": "Overloads for - slice | Marmos Demo",
    "keywords": "Overloads for - slice Module juptune.core.ds.string Parent String slice() <bug: unknown> slice( )"
  },
  "juptune/juptune/core/ds/string/String/Functions/toHash.html": {
    "href": "juptune/juptune/core/ds/string/String/Functions/toHash.html",
    "title": "Overloads for - toHash | Marmos Demo",
    "keywords": "Overloads for - toHash Module juptune.core.ds.string Parent String toHash() uint toHash( )"
  },
  "juptune/juptune/core/ds/string/Structs/String.html": {
    "href": "juptune/juptune/core/ds/string/Structs/String.html",
    "title": "Struct - String | Marmos Demo",
    "keywords": "Struct - String Module juptune.core.ds.string public struct String { // void disposeBigStringIfExists( ) ; // void growBigStringIfNeeded( size_t newSize ) ; // bool isCompletelyEmpty( ) ; // bool isSmall( ) ; // size_t length( ) ; // void length( size_t newLen ) ; // void moveToBigString( ) ; // void opAssign( <bug: unknown> str ) ; // void opAssign( <bug: unknown> _ ) ; // size_t opDollar( ) ; // bool opEquals( <bug: unknown> other ) ; // bool opEquals( <bug: unknown> _ ) ; // <bug: unknown> opIndex( ) ; // char opIndex( size_t index ) ; // void opIndexAssign( char v, size_t index ) ; // <bug: unknown> opSlice( size_t start, size_t end ) ; // void opSliceAssign( char v, size_t start, size_t end ) ; // void opSliceAssign( <bug: unknown> str, size_t start, size_t end ) ; // <bug: unknown> ptr( ) ; // void put( <bug: unknown> chars ) ; // void put( char ch ) ; // <bug: unknown> range( ) ; // void setBigString( <bug: unknown> chars ) ; // void setSmallString( <bug: unknown> chars ) ; // <bug: unknown> slice( ) ; // uint toHash( ) ; } Functions Name Description disposeBigStringIfExists growBigStringIfNeeded isCompletelyEmpty isSmall length moveToBigString opAssign opDollar opEquals opIndex opIndexAssign opSlice opSliceAssign ptr put range setBigString setSmallString slice toHash"
  },
  "juptune/juptune/core/ds/string2/Overview.html": {
    "href": "juptune/juptune/core/ds/string2/Overview.html",
    "title": "Module - juptune.core.ds.string2 | Marmos Demo",
    "keywords": "Module - juptune.core.ds.string2 Structs Name Description String2 An immutable string implemenetation with small string optimization, focused on making it safe and efficient to pass around a string by value by trading off the ability to mutate the string."
  },
  "juptune/juptune/core/ds/string2/String2/Functions/isBig.html": {
    "href": "juptune/juptune/core/ds/string2/String2/Functions/isBig.html",
    "title": "Overloads for - isBig | Marmos Demo",
    "keywords": "Overloads for - isBig Module juptune.core.ds.string2 Parent String2 isBig() bool isBig( )"
  },
  "juptune/juptune/core/ds/string2/String2/Functions/length.html": {
    "href": "juptune/juptune/core/ds/string2/String2/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module juptune.core.ds.string2 Parent String2 length() size_t length( ) The length of the string."
  },
  "juptune/juptune/core/ds/string2/String2/Functions/markBig.html": {
    "href": "juptune/juptune/core/ds/string2/String2/Functions/markBig.html",
    "title": "Overloads for - markBig | Marmos Demo",
    "keywords": "Overloads for - markBig Module juptune.core.ds.string2 Parent String2 markBig() void markBig( )"
  },
  "juptune/juptune/core/ds/string2/String2/Functions/moveToBigString.html": {
    "href": "juptune/juptune/core/ds/string2/String2/Functions/moveToBigString.html",
    "title": "Overloads for - moveToBigString | Marmos Demo",
    "keywords": "Overloads for - moveToBigString Module juptune.core.ds.string2 Parent String2 moveToBigString() void moveToBigString( )"
  },
  "juptune/juptune/core/ds/string2/String2/Functions/opEquals.html": {
    "href": "juptune/juptune/core/ds/string2/String2/Functions/opEquals.html",
    "title": "Overloads for - opEquals | Marmos Demo",
    "keywords": "Overloads for - opEquals Module juptune.core.ds.string2 Parent String2 opEquals(rhs) bool opEquals( <bug: unknown> rhs ) Basic equality operator for common string types, including char[] , and String2 . opEquals(rhs) bool opEquals( String2 rhs ) ditto. opEquals(rhs) bool opEquals( String2 rhs ) ditto."
  },
  "juptune/juptune/core/ds/string2/String2/Functions/opIndex.html": {
    "href": "juptune/juptune/core/ds/string2/String2/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module juptune.core.ds.string2 Parent String2 opIndex(slice) String2 opIndex( OpSlice slice ) opIndex(index) char opIndex( size_t index ) Simple [] operator to access the character at the given index."
  },
  "juptune/juptune/core/ds/string2/String2/Functions/opSlice.html": {
    "href": "juptune/juptune/core/ds/string2/String2/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module juptune.core.ds.string2 Parent String2 opSlice(start, end) OpSlice opSlice( size_t start, size_t end )"
  },
  "juptune/juptune/core/ds/string2/String2/Functions/range.html": {
    "href": "juptune/juptune/core/ds/string2/String2/Functions/range.html",
    "title": "Overloads for - range | Marmos Demo",
    "keywords": "Overloads for - range Module juptune.core.ds.string2 Parent String2 range() <bug: unknown> range( ) auto Provides an input range over the string's characters. Notes This is a lot safer to use than .slice when using range algorithms, as this range will keep the payload alive until the range is destroyed. This function will promote the string to become a \"Big\" string if it wasn't already. Returns An input range over the string's characters."
  },
  "juptune/juptune/core/ds/string2/String2/Functions/setupBigString.html": {
    "href": "juptune/juptune/core/ds/string2/String2/Functions/setupBigString.html",
    "title": "Overloads for - setupBigString | Marmos Demo",
    "keywords": "Overloads for - setupBigString Module juptune.core.ds.string2 Parent String2 setupBigString(str) void setupBigString( <bug: unknown> str )"
  },
  "juptune/juptune/core/ds/string2/String2/Functions/setupSmallString.html": {
    "href": "juptune/juptune/core/ds/string2/String2/Functions/setupSmallString.html",
    "title": "Overloads for - setupSmallString | Marmos Demo",
    "keywords": "Overloads for - setupSmallString Module juptune.core.ds.string2 Parent String2 setupSmallString(str) void setupSmallString( <bug: unknown> str )"
  },
  "juptune/juptune/core/ds/string2/String2/Functions/slice.html": {
    "href": "juptune/juptune/core/ds/string2/String2/Functions/slice.html",
    "title": "Overloads for - slice | Marmos Demo",
    "keywords": "Overloads for - slice Module juptune.core.ds.string2 Parent String2 slice() <bug: unknown> slice( ) Provides access to the raw slice of the string, which will always be on the heap. Notes This function may return a null slice if the string is empty. This function will promote the string to become a \"Big\" string if it wasn't already. This means that it may allocate memory on the heap. This function is best used when you're certain that the returned slice will not escape and is short lived, as the underlying payload may be released once the parent String2 goes out of scope. This function is safer than sliceMaybeFromStack as it will always return a slice to the heap. Returns A slice to the string's memory. See_Also String2.sliceMaybeFromStack , String2.access ."
  },
  "juptune/juptune/core/ds/string2/String2/Functions/sliceMaybeFromStack.html": {
    "href": "juptune/juptune/core/ds/string2/String2/Functions/sliceMaybeFromStack.html",
    "title": "Overloads for - sliceMaybeFromStack | Marmos Demo",
    "keywords": "Overloads for - sliceMaybeFromStack Module juptune.core.ds.string2 Parent String2 sliceMaybeFromStack() <bug: unknown> sliceMaybeFromStack( ) Provides access to the raw slice of the string, which may be on the stack or heap, depending on if Small String Optimisation is in use. Notes This function will never return a null slice, you should check if the slice's length is 0 instead. This function is best used when you're certain that the returned slice will not escape and is short lived, as the underlying payload may be released once the parent String2 goes out of scope. Please never pass the slice to a native C function, as the risk of stack corruption is too high. Returns A slice to the string's memory. See_Also String2.slice , String2.access"
  },
  "juptune/juptune/core/ds/string2/String2/Functions/toHash.html": {
    "href": "juptune/juptune/core/ds/string2/String2/Functions/toHash.html",
    "title": "Overloads for - toHash | Marmos Demo",
    "keywords": "Overloads for - toHash Module juptune.core.ds.string2 Parent String2 toHash() uint toHash( ) Hashes the contents of the string using MurmurHash3."
  },
  "juptune/juptune/core/ds/string2/Structs/String2.html": {
    "href": "juptune/juptune/core/ds/string2/Structs/String2.html",
    "title": "Struct - String2 | Marmos Demo",
    "keywords": "Struct - String2 Module juptune.core.ds.string2 public struct String2 { // alias opDollar = <todo: marmos support pending>; // bool isBig( ) ; // The length of the string. size_t length( ) ; // void markBig( ) ; // void moveToBigString( ) ; // Basic equality operator for common string types, including `char[]` , and `String2` . bool opEquals( <bug: unknown> rhs ) ; // ditto. bool opEquals( String2 rhs ) ; // ditto. bool opEquals( String2 rhs ) ; // String2 opIndex( OpSlice slice ) ; // Simple [] operator to access the character at the given index. char opIndex( size_t index ) ; // OpSlice opSlice( size_t start, size_t end ) ; // Provides an input range over the string's characters. <bug: unknown> range( ) auto; // void setupBigString( <bug: unknown> str ) ; // void setupSmallString( <bug: unknown> str ) ; // Provides access to the raw slice of the string, which will always be on the heap. <bug: unknown> slice( ) ; // Provides access to the raw slice of the string, which may be on the stack or heap, depending on if Small String Optimisation is in use. <bug: unknown> sliceMaybeFromStack( ) ; // Hashes the contents of the string using MurmurHash3. uint toHash( ) ; // __enumMember SSO_OVERHEAD_BYTES; } About An immutable string implemenetation with small string optimization, focused on making it safe and efficient to pass around a string by value by trading off the ability to mutate the string. This struct is not** thread safe. Design This struct will apply small string optimization (SSO) to store small strings in the struct itself, and will allocate memory for larger strings (or under specific conditions). The SSO length will be ((void*).sizeof 3) - 1, which is 23 bytes on x86_64 for example. This struct contains a ref counted payload, which is shared amongst copies of this struct. This is to make it very easy to pass the struct around without worrying about allocations. This struct will never expose a mutable slice to the underlying memory, as it is assumed thet the string has already been fully constructed. While this struct does provide a concat operation, it will always create a copy of the string, and thus is very inefficient for large strings. This is by design, use Array!char instead. To help avoid the need to provide direct access to the underlying slice (and risking escape), this struct attempts to provide enough operator overloads to make it easy to work with, for things like \"String2 == char[]\" operations. Additionally there are 3 different ways to access the underlying slice, depending on use case and safety concerns: (String2.slice, String2.sliceMaybeFromStack , String2.access ), as well as a safer but more limited way via the String2.range function. In the rare instances you need to pass the slice to a native C function, please note that the underlying memory is null terminated (but not subslices of the payload). Performance Not yet measured to any reasonable degree, however logically it should be much more efficient than the previous implementation which would do a full copy on every struct copy, and had gaping memory safety holes. Safety The assumption is that any operation self contained within the struct's code is @safe, and any operation that requires the underlying slice to be exposed is to be explicitly marked as @trusted by the caller. This struct is only safe to move as long as there's no living slices to the string's SSO buffer. Aliases Name Description _opCat _opCatAssign opDollar Functions Name Description isBig length The length of the string. markBig moveToBigString opEquals Basic equality operator for common string types, including char[] , and String2 . opIndex opSlice range Provides an input range over the string's characters. setupBigString setupSmallString slice Provides access to the raw slice of the string, which will always be on the heap. sliceMaybeFromStack Provides access to the raw slice of the string, which may be on the stack or heap, depending on if Small String Optimisation is in use. toHash Hashes the contents of the string using MurmurHash3. Variables Name Description SSO_OVERHEAD_BYTES"
  },
  "juptune/juptune/core/internal/linux/Functions/linuxErrorAsResult.html": {
    "href": "juptune/juptune/core/internal/linux/Functions/linuxErrorAsResult.html",
    "title": "Overloads for - linuxErrorAsResult | Marmos Demo",
    "keywords": "Overloads for - linuxErrorAsResult Module juptune.core.internal.linux linuxErrorAsResult(staticMessage, errnum) Result linuxErrorAsResult( string staticMessage, int errnum ) Converts a errno value into a Result . Params staticMessage string A static message used to provide context to the user. errnum int The errno value. If this is negative, then it is converted to its absolute value. Throws Always a LinuxError . Returns A Result containing a LinuxError . See_Also LinuxError"
  },
  "juptune/juptune/core/internal/linux/Functions/linuxResetSignalHandler.html": {
    "href": "juptune/juptune/core/internal/linux/Functions/linuxResetSignalHandler.html",
    "title": "Overloads for - linuxResetSignalHandler | Marmos Demo",
    "keywords": "Overloads for - linuxResetSignalHandler Module juptune.core.internal.linux linuxResetSignalHandler() void linuxResetSignalHandler( )"
  },
  "juptune/juptune/core/internal/linux/Functions/linuxSetSignalHandler.html": {
    "href": "juptune/juptune/core/internal/linux/Functions/linuxSetSignalHandler.html",
    "title": "Overloads for - linuxSetSignalHandler | Marmos Demo",
    "keywords": "Overloads for - linuxSetSignalHandler Module juptune.core.internal.linux linuxSetSignalHandler(handler) void linuxSetSignalHandler( SignalHandler handler )"
  },
  "juptune/juptune/core/internal/linux/Overview.html": {
    "href": "juptune/juptune/core/internal/linux/Overview.html",
    "title": "Module - juptune.core.internal.linux | Marmos Demo",
    "keywords": "Module - juptune.core.internal.linux Aliases Name Description SignalHandler Structs Name Description LinuxKernal Functions Name Description linuxErrorAsResult Converts a errno value into a Result . linuxResetSignalHandler linuxSetSignalHandler Variables Name Description g_linuxKernal LINUX_ERROR_BUFFER_SIZE"
  },
  "juptune/juptune/core/internal/linux/Structs/LinuxKernal.html": {
    "href": "juptune/juptune/core/internal/linux/Structs/LinuxKernal.html",
    "title": "Struct - LinuxKernal | Marmos Demo",
    "keywords": "Struct - LinuxKernal Module juptune.core.internal.linux public struct LinuxKernal { // int major; // int minor; // int patch; } Variables Name Description major minor patch"
  },
  "juptune/juptune/core/util/Overview.html": {
    "href": "juptune/juptune/core/util/Overview.html",
    "title": "Module - juptune.core.util | Marmos Demo",
    "keywords": "Module - juptune.core.util"
  },
  "juptune/juptune/core/util/ansi/AnsiColour/Functions/asEightBit.html": {
    "href": "juptune/juptune/core/util/ansi/AnsiColour/Functions/asEightBit.html",
    "title": "Overloads for - asEightBit | Marmos Demo",
    "keywords": "Overloads for - asEightBit Module juptune.core.util.ansi Parent AnsiColour asEightBit() ubyte asEightBit( ) Assertions This colour's type must be AnsiColourType.eightBit Returns This AnsiColour as a ubyte . CTORS AND PROPERTIES"
  },
  "juptune/juptune/core/util/ansi/AnsiColour/Functions/asFourBit.html": {
    "href": "juptune/juptune/core/util/ansi/AnsiColour/Functions/asFourBit.html",
    "title": "Overloads for - asFourBit | Marmos Demo",
    "keywords": "Overloads for - asFourBit Module juptune.core.util.ansi Parent AnsiColour asFourBit() Ansi4BitColour asFourBit( ) Assertions This colour's type must be AnsiColourType.fourBit Returns This AnsiColour as an Ansi4BitColour . CTORS AND PROPERTIES"
  },
  "juptune/juptune/core/util/ansi/AnsiColour/Functions/asRgb.html": {
    "href": "juptune/juptune/core/util/ansi/AnsiColour/Functions/asRgb.html",
    "title": "Overloads for - asRgb | Marmos Demo",
    "keywords": "Overloads for - asRgb Module juptune.core.util.ansi Parent AnsiColour asRgb() AnsiRgbColour asRgb( ) Assertions This colour's type must be AnsiColourType.rgb Returns This AnsiColour as an AnsiRgbColour . CTORS AND PROPERTIES"
  },
  "juptune/juptune/core/util/ansi/AnsiColour/Functions/isBg.html": {
    "href": "juptune/juptune/core/util/ansi/AnsiColour/Functions/isBg.html",
    "title": "Overloads for - isBg | Marmos Demo",
    "keywords": "Overloads for - isBg Module juptune.core.util.ansi Parent AnsiColour isBg() IsBgColour isBg( ) Returns: Whether this AnsiColour is for a background or not (it affects the output!). CTORS AND PROPERTIES isBg(bg) void isBg( IsBgColour bg ) ditto CTORS AND PROPERTIES isBg(bg) void isBg( bool bg ) ditto CTORS AND PROPERTIES"
  },
  "juptune/juptune/core/util/ansi/AnsiColour/Functions/toSequence.html": {
    "href": "juptune/juptune/core/util/ansi/AnsiColour/Functions/toSequence.html",
    "title": "Overloads for - toSequence | Marmos Demo",
    "keywords": "Overloads for - toSequence Module juptune.core.util.ansi Parent AnsiColour toSequence(buffer) <bug: unknown> toSequence( <bug: unknown> buffer ) OUTPUT Creates an ANSI SGR command that either sets the foreground, or the background (isBg) to the colour stored inside of this AnsiColour . Please note that the CSI (ANSI_CSI/\\033[) and the SGR marker (ANSI_COLOUR_END/m) are not included in this output. Notes Any characters inside of buffer that are not covered by the returned slice, are left unmodified. If this colour hasn't been initialised or assigned a value, then the returned value is simply null . Params buffer <bug: unknown> The statically allocated buffer used to store the result of this function. Returns A slice into buffer that contains the output of this function."
  },
  "juptune/juptune/core/util/ansi/AnsiColour/Functions/type.html": {
    "href": "juptune/juptune/core/util/ansi/AnsiColour/Functions/type.html",
    "title": "Overloads for - type | Marmos Demo",
    "keywords": "Overloads for - type Module juptune.core.util.ansi Parent AnsiColour type() AnsiColourType type( ) Returns: The AnsiColourType of this AnsiColour . CTORS AND PROPERTIES"
  },
  "juptune/juptune/core/util/ansi/AnsiSectionRange/Functions/empty.html": {
    "href": "juptune/juptune/core/util/ansi/AnsiSectionRange/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module juptune.core.util.ansi Parent AnsiSectionRange empty() bool empty( )"
  },
  "juptune/juptune/core/util/ansi/AnsiSectionRange/Functions/front.html": {
    "href": "juptune/juptune/core/util/ansi/AnsiSectionRange/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module juptune.core.util.ansi Parent AnsiSectionRange front() AnsiSection front( )"
  },
  "juptune/juptune/core/util/ansi/AnsiSectionRange/Functions/isValidAnsiChar.html": {
    "href": "juptune/juptune/core/util/ansi/AnsiSectionRange/Functions/isValidAnsiChar.html",
    "title": "Overloads for - isValidAnsiChar | Marmos Demo",
    "keywords": "Overloads for - isValidAnsiChar Module juptune.core.util.ansi Parent AnsiSectionRange isValidAnsiChar(ch) bool isValidAnsiChar( char ch )"
  },
  "juptune/juptune/core/util/ansi/AnsiSectionRange/Functions/popFront.html": {
    "href": "juptune/juptune/core/util/ansi/AnsiSectionRange/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module juptune.core.util.ansi Parent AnsiSectionRange popFront() void popFront( )"
  },
  "juptune/juptune/core/util/ansi/AnsiSectionRange/Functions/readSequence.html": {
    "href": "juptune/juptune/core/util/ansi/AnsiSectionRange/Functions/readSequence.html",
    "title": "Overloads for - readSequence | Marmos Demo",
    "keywords": "Overloads for - readSequence Module juptune.core.util.ansi Parent AnsiSectionRange readSequence() void readSequence( )"
  },
  "juptune/juptune/core/util/ansi/AnsiSectionRange/Functions/readText.html": {
    "href": "juptune/juptune/core/util/ansi/AnsiSectionRange/Functions/readText.html",
    "title": "Overloads for - readText | Marmos Demo",
    "keywords": "Overloads for - readText Module juptune.core.util.ansi Parent AnsiSectionRange readText() void readText( )"
  },
  "juptune/juptune/core/util/ansi/AnsiStyle/Functions/bold.html": {
    "href": "juptune/juptune/core/util/ansi/AnsiStyle/Functions/bold.html",
    "title": "Overloads for - bold | Marmos Demo",
    "keywords": "Overloads for - bold Module juptune.core.util.ansi Parent AnsiStyle bold(enable) AnsiStyle bold( bool enable ) SETTERS bold() bool bold( ) GETTERS"
  },
  "juptune/juptune/core/util/ansi/AnsiStyle/Functions/dim.html": {
    "href": "juptune/juptune/core/util/ansi/AnsiStyle/Functions/dim.html",
    "title": "Overloads for - dim | Marmos Demo",
    "keywords": "Overloads for - dim Module juptune.core.util.ansi Parent AnsiStyle dim(enable) AnsiStyle dim( bool enable ) SETTERS dim() bool dim( ) GETTERS"
  },
  "juptune/juptune/core/util/ansi/AnsiStyle/Functions/fastBlink.html": {
    "href": "juptune/juptune/core/util/ansi/AnsiStyle/Functions/fastBlink.html",
    "title": "Overloads for - fastBlink | Marmos Demo",
    "keywords": "Overloads for - fastBlink Module juptune.core.util.ansi Parent AnsiStyle fastBlink(enable) AnsiStyle fastBlink( bool enable ) SETTERS fastBlink() bool fastBlink( ) GETTERS"
  },
  "juptune/juptune/core/util/ansi/AnsiStyle/Functions/get.html": {
    "href": "juptune/juptune/core/util/ansi/AnsiStyle/Functions/get.html",
    "title": "Overloads for - get | Marmos Demo",
    "keywords": "Overloads for - get Module juptune.core.util.ansi Parent AnsiStyle get(style) bool get( AnsiSgrStyle style ) Get the status of a certain styling option. Params style AnsiSgrStyle The styling option to get. Returns true if the styling option is enabled, false otherwise. GETTERS"
  },
  "juptune/juptune/core/util/ansi/AnsiStyle/Functions/getSgrBit.html": {
    "href": "juptune/juptune/core/util/ansi/AnsiStyle/Functions/getSgrBit.html",
    "title": "Overloads for - getSgrBit | Marmos Demo",
    "keywords": "Overloads for - getSgrBit Module juptune.core.util.ansi Parent AnsiStyle getSgrBit(style) bool getSgrBit( AnsiSgrStyle style )"
  },
  "juptune/juptune/core/util/ansi/AnsiStyle/Functions/invert.html": {
    "href": "juptune/juptune/core/util/ansi/AnsiStyle/Functions/invert.html",
    "title": "Overloads for - invert | Marmos Demo",
    "keywords": "Overloads for - invert Module juptune.core.util.ansi Parent AnsiStyle invert(enable) AnsiStyle invert( bool enable ) SETTERS invert() bool invert( ) GETTERS"
  },
  "juptune/juptune/core/util/ansi/AnsiStyle/Functions/italic.html": {
    "href": "juptune/juptune/core/util/ansi/AnsiStyle/Functions/italic.html",
    "title": "Overloads for - italic | Marmos Demo",
    "keywords": "Overloads for - italic Module juptune.core.util.ansi Parent AnsiStyle italic(enable) AnsiStyle italic( bool enable ) SETTERS italic() bool italic( ) GETTERS"
  },
  "juptune/juptune/core/util/ansi/AnsiStyle/Functions/reset.html": {
    "href": "juptune/juptune/core/util/ansi/AnsiStyle/Functions/reset.html",
    "title": "Overloads for - reset | Marmos Demo",
    "keywords": "Overloads for - reset Module juptune.core.util.ansi Parent AnsiStyle reset() AnsiStyle reset( ) Removes all styling from this AnsiStyle . SETTERS"
  },
  "juptune/juptune/core/util/ansi/AnsiStyle/Functions/set.html": {
    "href": "juptune/juptune/core/util/ansi/AnsiStyle/Functions/set.html",
    "title": "Overloads for - set | Marmos Demo",
    "keywords": "Overloads for - set Module juptune.core.util.ansi Parent AnsiStyle set(style, enable) AnsiStyle set( AnsiSgrStyle style, bool enable ) Enables/Disables a certain styling option. Params style AnsiSgrStyle The styling option to enable/disable. enable bool If true, enable the option. If false, disable it. Returns this for chaining. SETTERS"
  },
  "juptune/juptune/core/util/ansi/AnsiStyle/Functions/sgrToBit.html": {
    "href": "juptune/juptune/core/util/ansi/AnsiStyle/Functions/sgrToBit.html",
    "title": "Overloads for - sgrToBit | Marmos Demo",
    "keywords": "Overloads for - sgrToBit Module juptune.core.util.ansi Parent AnsiStyle sgrToBit(style) int sgrToBit( AnsiSgrStyle style )"
  },
  "juptune/juptune/core/util/ansi/AnsiStyle/Functions/slowBlink.html": {
    "href": "juptune/juptune/core/util/ansi/AnsiStyle/Functions/slowBlink.html",
    "title": "Overloads for - slowBlink | Marmos Demo",
    "keywords": "Overloads for - slowBlink Module juptune.core.util.ansi Parent AnsiStyle slowBlink(enable) AnsiStyle slowBlink( bool enable ) SETTERS slowBlink() bool slowBlink( ) GETTERS"
  },
  "juptune/juptune/core/util/ansi/AnsiStyle/Functions/strike.html": {
    "href": "juptune/juptune/core/util/ansi/AnsiStyle/Functions/strike.html",
    "title": "Overloads for - strike | Marmos Demo",
    "keywords": "Overloads for - strike Module juptune.core.util.ansi Parent AnsiStyle strike(enable) AnsiStyle strike( bool enable ) SETTERS strike() bool strike( ) GETTERS"
  },
  "juptune/juptune/core/util/ansi/AnsiStyle/Functions/toSequence.html": {
    "href": "juptune/juptune/core/util/ansi/AnsiStyle/Functions/toSequence.html",
    "title": "Overloads for - toSequence | Marmos Demo",
    "keywords": "Overloads for - toSequence Module juptune.core.util.ansi Parent AnsiStyle toSequence(buffer) <bug: unknown> toSequence( <bug: unknown> buffer ) OUTPUT Creates an ANSI SGR command that enables all of the desired styling options, while leaving all of the other options unchanged. Please note that the CSI (ANSI_CSI/\\033[) and the SGR marker (ANSI_COLOUR_END/m) are not included in this output. Notes Any characters inside of buffer that are not covered by the returned slice, are left unmodified. If this colour hasn't been initialised or assigned a value, then the returned value is simply null . Params buffer <bug: unknown> The statically allocated buffer used to store the result of this function. Returns A slice into buffer that contains the output of this function."
  },
  "juptune/juptune/core/util/ansi/AnsiStyle/Functions/underline.html": {
    "href": "juptune/juptune/core/util/ansi/AnsiStyle/Functions/underline.html",
    "title": "Overloads for - underline | Marmos Demo",
    "keywords": "Overloads for - underline Module juptune.core.util.ansi Parent AnsiStyle underline(enable) AnsiStyle underline( bool enable ) SETTERS underline() bool underline( ) GETTERS"
  },
  "juptune/juptune/core/util/ansi/AnsiStyleSet/Functions/bg.html": {
    "href": "juptune/juptune/core/util/ansi/AnsiStyleSet/Functions/bg.html",
    "title": "Overloads for - bg | Marmos Demo",
    "keywords": "Overloads for - bg Module juptune.core.util.ansi Parent AnsiStyleSet bg(colour) AnsiStyleSet bg( AnsiColour colour ) SETTERS bg(colour) AnsiStyleSet bg( Ansi4BitColour colour ) SETTERS bg(colour) AnsiStyleSet bg( Ansi8BitColour colour ) SETTERS bg(colour) AnsiStyleSet bg( AnsiRgbColour colour ) SETTERS bg() AnsiColour bg( ) GETTERS"
  },
  "juptune/juptune/core/util/ansi/AnsiStyleSet/Functions/fg.html": {
    "href": "juptune/juptune/core/util/ansi/AnsiStyleSet/Functions/fg.html",
    "title": "Overloads for - fg | Marmos Demo",
    "keywords": "Overloads for - fg Module juptune.core.util.ansi Parent AnsiStyleSet fg(colour) AnsiStyleSet fg( AnsiColour colour ) SETTERS fg(colour) AnsiStyleSet fg( Ansi4BitColour colour ) SETTERS fg(colour) AnsiStyleSet fg( Ansi8BitColour colour ) SETTERS fg(colour) AnsiStyleSet fg( AnsiRgbColour colour ) SETTERS fg() AnsiColour fg( ) GETTERS"
  },
  "juptune/juptune/core/util/ansi/AnsiStyleSet/Functions/style.html": {
    "href": "juptune/juptune/core/util/ansi/AnsiStyleSet/Functions/style.html",
    "title": "Overloads for - style | Marmos Demo",
    "keywords": "Overloads for - style Module juptune.core.util.ansi Parent AnsiStyleSet style(style) AnsiStyleSet style( AnsiStyle style ) SETTERS style() AnsiStyle style( ) GETTERS"
  },
  "juptune/juptune/core/util/ansi/AnsiStyleSet/Functions/toSequence.html": {
    "href": "juptune/juptune/core/util/ansi/AnsiStyleSet/Functions/toSequence.html",
    "title": "Overloads for - toSequence | Marmos Demo",
    "keywords": "Overloads for - toSequence Module juptune.core.util.ansi Parent AnsiStyleSet toSequence(buffer) <bug: unknown> toSequence( <bug: unknown> buffer ) OUTPUT Creates an ANSI SGR command that sets the foreground colour, sets the background colour, and enables all of the desired styling options, while leaving all of the other options unchanged. Please note that the CSI (ANSI_CSI/\\033[) and the SGR marker (ANSI_COLOUR_END/m) are not included in this output. Notes Any characters inside of buffer that are not covered by the returned slice, are left unmodified. If this colour hasn't been initialised or assigned a value, then the returned value is simply null . Params buffer <bug: unknown> The statically allocated buffer used to store the result of this function. Returns A slice into buffer that contains the output of this function."
  },
  "juptune/juptune/core/util/ansi/AnsiTextLite/Functions/bg.html": {
    "href": "juptune/juptune/core/util/ansi/AnsiTextLite/Functions/bg.html",
    "title": "Overloads for - bg | Marmos Demo",
    "keywords": "Overloads for - bg Module juptune.core.util.ansi Parent AnsiTextLite bg(colour) AnsiTextLite bg( AnsiColour colour ) SETTERS bg(colour) AnsiTextLite bg( Ansi4BitColour colour ) SETTERS bg(colour) AnsiTextLite bg( Ansi8BitColour colour ) SETTERS bg(colour) AnsiTextLite bg( AnsiRgbColour colour ) SETTERS bg() AnsiColour bg( ) GETTERS"
  },
  "juptune/juptune/core/util/ansi/AnsiTextLite/Functions/fg.html": {
    "href": "juptune/juptune/core/util/ansi/AnsiTextLite/Functions/fg.html",
    "title": "Overloads for - fg | Marmos Demo",
    "keywords": "Overloads for - fg Module juptune.core.util.ansi Parent AnsiTextLite fg(colour) AnsiTextLite fg( AnsiColour colour ) SETTERS fg(colour) AnsiTextLite fg( Ansi4BitColour colour ) SETTERS fg(colour) AnsiTextLite fg( Ansi8BitColour colour ) SETTERS fg(colour) AnsiTextLite fg( AnsiRgbColour colour ) SETTERS fg() AnsiColour fg( ) GETTERS"
  },
  "juptune/juptune/core/util/ansi/AnsiTextLite/Functions/style.html": {
    "href": "juptune/juptune/core/util/ansi/AnsiTextLite/Functions/style.html",
    "title": "Overloads for - style | Marmos Demo",
    "keywords": "Overloads for - style Module juptune.core.util.ansi Parent AnsiTextLite style(style) AnsiTextLite style( AnsiStyle style ) SETTERS style() AnsiStyle style( ) GETTERS"
  },
  "juptune/juptune/core/util/ansi/AnsiTextLite/Functions/toFullEndSequence.html": {
    "href": "juptune/juptune/core/util/ansi/AnsiTextLite/Functions/toFullEndSequence.html",
    "title": "Overloads for - toFullEndSequence | Marmos Demo",
    "keywords": "Overloads for - toFullEndSequence Module juptune.core.util.ansi Parent AnsiTextLite toFullEndSequence() <bug: unknown> toFullEndSequence( ) Returns The end ANSI sequence for AnsiTextLite , which is simply a statically allocated version of the ANSI_COLOUR_RESET constant."
  },
  "juptune/juptune/core/util/ansi/AnsiTextLite/Functions/toFullStartSequence.html": {
    "href": "juptune/juptune/core/util/ansi/AnsiTextLite/Functions/toFullStartSequence.html",
    "title": "Overloads for - toFullStartSequence | Marmos Demo",
    "keywords": "Overloads for - toFullStartSequence Module juptune.core.util.ansi Parent AnsiTextLite toFullStartSequence(buffer) <bug: unknown> toFullStartSequence( <bug: unknown> buffer ) Populates the given buffer with the full ANSI sequence needed to enable the styling defined within this AnsiTextLite Unlike the usual toSequence functions, this function includes the ANSI_CSI and ANSI_COLOUR_END markers, meaning the output from this function is ready to be printed as-is. Do note that this function doesn't insert a null-terminator, so if you're using anything based on C strings, you need to insert that yourself. Notes Any parts of the buffer that are not populated by this function are left untouched. Params buffer <bug: unknown> The buffer to populate. Returns The slice of buffer that has been populated."
  },
  "juptune/juptune/core/util/ansi/AnsiTextLite/Functions/toRange.html": {
    "href": "juptune/juptune/core/util/ansi/AnsiTextLite/Functions/toRange.html",
    "title": "Overloads for - toRange | Marmos Demo",
    "keywords": "Overloads for - toRange Module juptune.core.util.ansi Parent AnsiTextLite toRange() <bug: unknown> toRange( ) auto Provides a range that returns, in this order: The start sequence (.toFullStartSequence); the output text (.text), and finally the end sequence (.toFullEndSequence). This range is $(B weakly-safe) as it $(B returns slices to stack memory) so please ensure that $(B any returned slices don't outlive the origin range object). Please also note that non of the returned slices contain null terminators. Returns An Input Range that returns all the slices required to correctly display this AnsiTextLite onto a console."
  },
  "juptune/juptune/core/util/ansi/AnsiTextLite/Functions/toString.html": {
    "href": "juptune/juptune/core/util/ansi/AnsiTextLite/Functions/toString.html",
    "title": "Overloads for - toString | Marmos Demo",
    "keywords": "Overloads for - toString Module juptune.core.util.ansi Parent AnsiTextLite toString(sink) void toString( <bug: unknown> sink ) The sink-based version of toString , which doesn't allocate by itself unless the sink decides to allocate. Params sink <bug: unknown> The sink to output into. See_Also toSink for a templatised version of this function which can infer attributes, and supports any form of Output Range instead of just a delegate."
  },
  "juptune/juptune/core/util/ansi/Functions/ansi.html": {
    "href": "juptune/juptune/core/util/ansi/Functions/ansi.html",
    "title": "Overloads for - ansi | Marmos Demo",
    "keywords": "Overloads for - ansi Module juptune.core.util.ansi ansi(text) AnsiTextLite ansi( <bug: unknown> text ) PUBLIC HELPERS Creates an AnsiTextLite from the given text . This function is mostly used when using the fluent UFCS chaining pattern. Params text <bug: unknown> The text to use. Returns An AnsiTextLite from the given text . CONSTANTS"
  },
  "juptune/juptune/core/util/ansi/Functions/ansiAsSections.html": {
    "href": "juptune/juptune/core/util/ansi/Functions/ansiAsSections.html",
    "title": "Overloads for - ansiAsSections | Marmos Demo",
    "keywords": "Overloads for - ansiAsSections Module juptune.core.util.ansi ansiAsSections(slice) AnsiSectionRange ansiAsSections( <bug: unknown> slice ) Constructs an AnsiSectionRange from the given slice . CONSTANTS"
  },
  "juptune/juptune/core/util/ansi/Functions/ansiExecuteSgrSequence.html": {
    "href": "juptune/juptune/core/util/ansi/Functions/ansiExecuteSgrSequence.html",
    "title": "Overloads for - ansiExecuteSgrSequence | Marmos Demo",
    "keywords": "Overloads for - ansiExecuteSgrSequence Module juptune.core.util.ansi ansiExecuteSgrSequence(input, style, charsRead) string ansiExecuteSgrSequence( <bug: unknown> input, AnsiStyleSet style, size_t charsRead ) READING/PARSING Executes the SGR sequence found in input , and populates the passed in style based on the command sequence. Anything directly provided by this library is supported. The previous state of style is preserved unless specifically untoggled/reset via the command sequence (e.g. ESC[0m to reset everything). If an error occurs during execution of the sequence, the given style is left completely unmodified. Params input <bug: unknown> The slice containing the command sequence. The first character should be the start (ANSI_CSI) character of the sequence (\\033), and characters will continue to be read until the command sequence has been finished. Any characters after the command sequence are left unread. style AnsiStyleSet A reference to an AnsiStyleSet to populate. As mentioned, this function will only untoggle styling, or reset the style if the command sequence specifies. This value is left unmodified if an error is encountered. charsRead size_t This value will be set to the amount of chars read from the given input , so the caller knows where to continue reading from (if applicable). This value is populated on both error and success. Returns Either null on success, or a string describing the error that was encountered. CONSTANTS"
  },
  "juptune/juptune/core/util/ansi/Functions/calculate.html": {
    "href": "juptune/juptune/core/util/ansi/Functions/calculate.html",
    "title": "Overloads for - calculate | Marmos Demo",
    "keywords": "Overloads for - calculate Module juptune.core.util.ansi calculate() size_t calculate( ) CONSTANTS"
  },
  "juptune/juptune/core/util/ansi/Functions/numToStrBase10.html": {
    "href": "juptune/juptune/core/util/ansi/Functions/numToStrBase10.html",
    "title": "Overloads for - numToStrBase10 | Marmos Demo",
    "keywords": "Overloads for - numToStrBase10 Module juptune.core.util.ansi numToStrBase10(buffer, num) <bug: unknown> numToStrBase10( <bug: unknown> buffer, NumT num ) PRIVATE HELPERS CONSTANTS"
  },
  "juptune/juptune/core/util/ansi/Functions/numberOfChars.html": {
    "href": "juptune/juptune/core/util/ansi/Functions/numberOfChars.html",
    "title": "Overloads for - numberOfChars | Marmos Demo",
    "keywords": "Overloads for - numberOfChars Module juptune.core.util.ansi numberOfChars(num) size_t numberOfChars( int num ) CONSTANTS"
  },
  "juptune/juptune/core/util/ansi/Functions/strToNum.html": {
    "href": "juptune/juptune/core/util/ansi/Functions/strToNum.html",
    "title": "Overloads for - strToNum | Marmos Demo",
    "keywords": "Overloads for - strToNum Module juptune.core.util.ansi strToNum(slice) NumT strToNum( <bug: unknown> slice ) CONSTANTS"
  },
  "juptune/juptune/core/util/ansi/Overview.html": {
    "href": "juptune/juptune/core/util/ansi/Overview.html",
    "title": "Module - juptune.core.util.ansi | Marmos Demo",
    "keywords": "Module - juptune.core.util.ansi About Utilities for writing and reading ANSI styled text. Aliases Name Description Ansi8BitColour An 8-bit ANSI colour - an index into the terminal's colour palette. AnsiOnly Used by certain functions to determine if they should only output an ANSI sequence, or output their entire sequence + data. IsBgColour Used to determine if an AnsiColour is a background or foreground colour. Structs Name Description AnsiColour Contains any type of ANSI colour and provides the ability to create a valid SGR command to set the foreground/background. AnsiRgbColour Contains a 3-byte, RGB colour. AnsiSection The resulting object from AnsiSectionRange , describes whether a slice of text is an ANSI sequence or not. AnsiSectionRange An input range of AnsiSection s that splits a piece of text up into ANSI sequence and plain text sections. AnsiStyle Contains any number of styling options from AnsiStyleSgr , and provides the ability to generate an ANSI SGR command to apply all of the selected styling options. AnsiStyleSet DATA WITH COLOUR TYPES AnsiTextLite A lightweight alternative to AnsiText which only supports a singular coloured string, at the cost of removing most of the other complexity & dynamic allocation needs of AnsiText . Functions Name Description ansi PUBLIC HELPERS ansiAsSections Constructs an AnsiSectionRange from the given slice . ansiExecuteSgrSequence READING/PARSING calculate CONSTANTS numberOfChars CONSTANTS numToStrBase10 PRIVATE HELPERS strToNum CONSTANTS Variables Name Description ANSI_COLOUR_END The character used to denote that the sequence is an SGR sequence. ANSI_COLOUR_RESET The sequence used to reset all styling. ANSI_CSI The string that starts an ANSI command sequence. ANSI_FG_TO_BG_INCREMENT The amount to increment an Ansi4BitColour by in order to access the background version of the colour. ANSI_SEPARATOR The character that delimits ANSI parameters. BetterC CONSTANTS getMaxSgrStyleCharCount CONSTANTS"
  },
  "juptune/juptune/core/util/ansi/Structs/AnsiColour.html": {
    "href": "juptune/juptune/core/util/ansi/Structs/AnsiColour.html",
    "title": "Struct - AnsiColour | Marmos Demo",
    "keywords": "Struct - AnsiColour Module juptune.core.util.ansi public struct AnsiColour { // ubyte asEightBit( ) ; // Ansi4BitColour asFourBit( ) ; // AnsiRgbColour asRgb( ) ; // Returns: Whether this `AnsiColour` is for a background or not (it affects the output!). IsBgColour isBg( ) ; // ditto void isBg( IsBgColour bg ) ; // ditto void isBg( bool bg ) ; // OUTPUT <bug: unknown> toSequence( <bug: unknown> buffer ) ; // Returns: The `AnsiColourType` of this `AnsiColour` . AnsiColourType type( ) ; // static immutable __enumMember BG_MARKER; // A variant of `.init` that is used for background colours. static immutable __enumMember bgInit; // static immutable __enumMember EIGHT_BIT_MARKER; // static immutable __enumMember FG_MARKER; // The maximum amount of characters any singular `AnsiColour` sequence may use. __enumMember MAX_CHARS_NEEDED; // static immutable __enumMember RGB_MARKER; } About Contains any type of ANSI colour and provides the ability to create a valid SGR command to set the foreground/background. This struct overloads opAssign allowing easy assignment from Ansi4BitColour , Ansi8BitColour , AnsiRgbColour , and any user-defined type that satisfies isUserDefinedRgbType . CONSTANTS Functions Name Description asEightBit asFourBit asRgb isBg Returns: Whether this AnsiColour is for a background or not (it affects the output!). toSequence OUTPUT type Returns: The AnsiColourType of this AnsiColour . Variables Name Description BG_MARKER bgInit A variant of .init that is used for background colours. EIGHT_BIT_MARKER FG_MARKER MAX_CHARS_NEEDED The maximum amount of characters any singular AnsiColour sequence may use. RGB_MARKER"
  },
  "juptune/juptune/core/util/ansi/Structs/AnsiRgbColour.html": {
    "href": "juptune/juptune/core/util/ansi/Structs/AnsiRgbColour.html",
    "title": "Struct - AnsiRgbColour | Marmos Demo",
    "keywords": "Struct - AnsiRgbColour Module juptune.core.util.ansi public struct AnsiRgbColour { // The blue component. ubyte b; // The RGB components as an array. <bug: unknown> components; // The green component. ubyte g; // The red component. ubyte r; } About Contains a 3-byte, RGB colour. CONSTANTS Variables Name Description b The blue component. components The RGB components as an array. g The green component. r The red component."
  },
  "juptune/juptune/core/util/ansi/Structs/AnsiSection.html": {
    "href": "juptune/juptune/core/util/ansi/Structs/AnsiSection.html",
    "title": "Struct - AnsiSection | Marmos Demo",
    "keywords": "Struct - AnsiSection Module juptune.core.util.ansi public struct AnsiSection { // `true` if the slice is an ANSI sequence, `false` if it's just text. bool isAnsiSequence; // The slice of text that this section consists of. <bug: unknown> slice; } About The resulting object from AnsiSectionRange , describes whether a slice of text is an ANSI sequence or not. CONSTANTS Variables Name Description isAnsiSequence true if the slice is an ANSI sequence, false if it's just text. slice The slice of text that this section consists of."
  },
  "juptune/juptune/core/util/ansi/Structs/AnsiSectionRange.html": {
    "href": "juptune/juptune/core/util/ansi/Structs/AnsiSectionRange.html",
    "title": "Struct - AnsiSectionRange | Marmos Demo",
    "keywords": "Struct - AnsiSectionRange Module juptune.core.util.ansi public struct AnsiSectionRange { // bool empty( ) ; // AnsiSection front( ) ; // bool isValidAnsiChar( char ch ) ; // void popFront( ) ; // void readSequence( ) ; // void readText( ) ; } About An input range of AnsiSection s that splits a piece of text up into ANSI sequence and plain text sections. For example, the text \"\\033[37mABC\\033[0m\" has three sections: [ANSI \"\\033[37m\", TEXT \"ABC\", ANSI \"\\033[0m\"]. CONSTANTS Functions Name Description empty front isValidAnsiChar popFront readSequence readText"
  },
  "juptune/juptune/core/util/ansi/Structs/AnsiStyle.html": {
    "href": "juptune/juptune/core/util/ansi/Structs/AnsiStyle.html",
    "title": "Struct - AnsiStyle | Marmos Demo",
    "keywords": "Struct - AnsiStyle Module juptune.core.util.ansi public struct AnsiStyle { // SETTERS AnsiStyle bold( bool enable ) ; // GETTERS bool bold( ) ; // SETTERS AnsiStyle dim( bool enable ) ; // GETTERS bool dim( ) ; // SETTERS AnsiStyle fastBlink( bool enable ) ; // GETTERS bool fastBlink( ) ; // Get the status of a certain styling option. bool get( AnsiSgrStyle style ) ; // bool getSgrBit( AnsiSgrStyle style ) ; // SETTERS AnsiStyle invert( bool enable ) ; // GETTERS bool invert( ) ; // SETTERS AnsiStyle italic( bool enable ) ; // GETTERS bool italic( ) ; // Removes all styling from this `AnsiStyle` . AnsiStyle reset( ) ; // Enables/Disables a certain styling option. AnsiStyle set( AnsiSgrStyle style, bool enable ) ; // int sgrToBit( AnsiSgrStyle style ) ; // SETTERS AnsiStyle slowBlink( bool enable ) ; // GETTERS bool slowBlink( ) ; // SETTERS AnsiStyle strike( bool enable ) ; // GETTERS bool strike( ) ; // OUTPUT <bug: unknown> toSequence( <bug: unknown> buffer ) ; // SETTERS AnsiStyle underline( bool enable ) ; // GETTERS bool underline( ) ; // The maximum amount of characters any singular `AnsiStyle` sequence may use. __enumMember MAX_CHARS_NEEDED; } About Contains any number of styling options from AnsiStyleSgr , and provides the ability to generate an ANSI SGR command to apply all of the selected styling options. CONSTANTS Functions Name Description bold SETTERS dim SETTERS fastBlink SETTERS get Get the status of a certain styling option. getSgrBit invert SETTERS italic SETTERS reset Removes all styling from this AnsiStyle . set Enables/Disables a certain styling option. sgrToBit slowBlink SETTERS strike SETTERS toSequence OUTPUT underline SETTERS Variables Name Description MAX_CHARS_NEEDED The maximum amount of characters any singular AnsiStyle sequence may use."
  },
  "juptune/juptune/core/util/ansi/Structs/AnsiStyleSet.html": {
    "href": "juptune/juptune/core/util/ansi/Structs/AnsiStyleSet.html",
    "title": "Struct - AnsiStyleSet | Marmos Demo",
    "keywords": "Struct - AnsiStyleSet Module juptune.core.util.ansi public struct AnsiStyleSet { // SETTERS AnsiStyleSet bg( AnsiColour colour ) ; // SETTERS AnsiStyleSet bg( Ansi4BitColour colour ) ; // SETTERS AnsiStyleSet bg( Ansi8BitColour colour ) ; // SETTERS AnsiStyleSet bg( AnsiRgbColour colour ) ; // GETTERS AnsiColour bg( ) ; // SETTERS AnsiStyleSet fg( AnsiColour colour ) ; // SETTERS AnsiStyleSet fg( Ansi4BitColour colour ) ; // SETTERS AnsiStyleSet fg( Ansi8BitColour colour ) ; // SETTERS AnsiStyleSet fg( AnsiRgbColour colour ) ; // GETTERS AnsiColour fg( ) ; // SETTERS AnsiStyleSet style( AnsiStyle style ) ; // GETTERS AnsiStyle style( ) ; // OUTPUT Creates an ANSI SGR command that sets the foreground colour, sets the background colour, and enables all of the desired styling options, while leaving all of the other options unchanged. <bug: unknown> toSequence( <bug: unknown> buffer ) ; // The maximum amount of characters any singular `AnsiStyle` sequence may use. __enumMember MAX_CHARS_NEEDED; } About DATA WITH COLOUR TYPES Contains an AnsiColour for the foreground, an AnsiColour for the background, and an AnsiStyle for additional styling, and provides the ability to create an ANSI SGR command to set the foreground, background, and overall styling of the terminal. A.k.a This is just a container over two AnsiColour s and an AnsiStyle . CONSTANTS Functions Name Description bg SETTERS fg SETTERS style SETTERS toSequence OUTPUT Creates an ANSI SGR command that sets the foreground colour, sets the background colour, and enables all of the desired styling options, while leaving all of the other options unchanged. Variables Name Description MAX_CHARS_NEEDED The maximum amount of characters any singular AnsiStyle sequence may use."
  },
  "juptune/juptune/core/util/ansi/Structs/AnsiTextLite.html": {
    "href": "juptune/juptune/core/util/ansi/Structs/AnsiTextLite.html",
    "title": "Struct - AnsiTextLite | Marmos Demo",
    "keywords": "Struct - AnsiTextLite Module juptune.core.util.ansi public struct AnsiTextLite { // SETTERS AnsiTextLite bg( AnsiColour colour ) ; // SETTERS AnsiTextLite bg( Ansi4BitColour colour ) ; // SETTERS AnsiTextLite bg( Ansi8BitColour colour ) ; // SETTERS AnsiTextLite bg( AnsiRgbColour colour ) ; // GETTERS AnsiColour bg( ) ; // SETTERS AnsiTextLite fg( AnsiColour colour ) ; // SETTERS AnsiTextLite fg( Ansi4BitColour colour ) ; // SETTERS AnsiTextLite fg( Ansi8BitColour colour ) ; // SETTERS AnsiTextLite fg( AnsiRgbColour colour ) ; // GETTERS AnsiColour fg( ) ; // SETTERS AnsiTextLite style( AnsiStyle style ) ; // GETTERS AnsiStyle style( ) ; // <bug: unknown> toFullEndSequence( ) ; // Populates the given buffer with the full ANSI sequence needed to enable the styling defined within this `AnsiTextLite` <bug: unknown> toFullStartSequence( <bug: unknown> buffer ) ; // Provides a range that returns, in this order: The start sequence (`.toFullStartSequence`); the output text (`.text`), and finally the end sequence (`.toFullEndSequence`). <bug: unknown> toRange( ) auto; // The sink-based version of `toString` , which doesn't allocate by itself unless the `sink` decides to allocate. void toString( <bug: unknown> sink ) ; // The maximum amount of chars required by the start sequence of an `AnsiTextLite` (`toFullStartSequence`). __enumMember MAX_CHARS_NEEDED; // The styling to apply to the text. AnsiStyleSet styleSet; // The text to output. <bug: unknown> text; } About A lightweight alternative to AnsiText which only supports a singular coloured string, at the cost of removing most of the other complexity & dynamic allocation needs of AnsiText . If you only need to style your string in one certain way, or want to avoid AnsiText altogether, then this struct is the way to go. Usage_(Manually) First, retrieve and the ANSI styling sequence via AnsiTextLite.toFullStartSequence and output it. Second, output AnsiTextLite.text . Finally, and optionally, retrieve the ANSI reset sequence via AnsiTextLite.toFullEndSequence and output it. Usage_(Range) Call AnsiTextLite.toRange to get the range, please read its documentation as it is important (it'll return slices to stack-allocated memory). See_Also ansi for fluent creation of an AnsiTextLite . This struct's unittest for an example of usage. CONSTANTS Functions Name Description bg SETTERS fg SETTERS style SETTERS toFullEndSequence toFullStartSequence Populates the given buffer with the full ANSI sequence needed to enable the styling defined within this AnsiTextLite toRange Provides a range that returns, in this order: The start sequence (.toFullStartSequence); the output text (.text), and finally the end sequence (.toFullEndSequence). toString The sink-based version of toString , which doesn't allocate by itself unless the sink decides to allocate. Variables Name Description MAX_CHARS_NEEDED The maximum amount of chars required by the start sequence of an AnsiTextLite (toFullStartSequence). styleSet The styling to apply to the text. text The text to output."
  },
  "juptune/juptune/core/util/conv/Functions/arrayToString.html": {
    "href": "juptune/juptune/core/util/conv/Functions/arrayToString.html",
    "title": "Overloads for - arrayToString | Marmos Demo",
    "keywords": "Overloads for - arrayToString Module juptune.core.util.conv arrayToString(array, output) void arrayToString( ArrayT array, OutputT output )"
  },
  "juptune/juptune/core/util/conv/Functions/enumToString.html": {
    "href": "juptune/juptune/core/util/conv/Functions/enumToString.html",
    "title": "Overloads for - enumToString | Marmos Demo",
    "keywords": "Overloads for - enumToString Module juptune.core.util.conv enumToString(value) string enumToString( EnumT value )"
  },
  "juptune/juptune/core/util/conv/Functions/fromBase10.html": {
    "href": "juptune/juptune/core/util/conv/Functions/fromBase10.html",
    "title": "Overloads for - fromBase10 | Marmos Demo",
    "keywords": "Overloads for - fromBase10 Module juptune.core.util.conv fromBase10(str, error) NumT fromBase10( <bug: unknown> str, string error )"
  },
  "juptune/juptune/core/util/conv/Functions/fromBase16.html": {
    "href": "juptune/juptune/core/util/conv/Functions/fromBase16.html",
    "title": "Overloads for - fromBase16 | Marmos Demo",
    "keywords": "Overloads for - fromBase16 Module juptune.core.util.conv fromBase16(str, error) NumT fromBase16( <bug: unknown> str, string error )"
  },
  "juptune/juptune/core/util/conv/Functions/pointerToString.html": {
    "href": "juptune/juptune/core/util/conv/Functions/pointerToString.html",
    "title": "Overloads for - pointerToString | Marmos Demo",
    "keywords": "Overloads for - pointerToString Module juptune.core.util.conv pointerToString(pointer, output) void pointerToString( <bug: unknown> pointer, OutputT output )"
  },
  "juptune/juptune/core/util/conv/Functions/structToString.html": {
    "href": "juptune/juptune/core/util/conv/Functions/structToString.html",
    "title": "Overloads for - structToString | Marmos Demo",
    "keywords": "Overloads for - structToString Module juptune.core.util.conv structToString(value, output) void structToString( StructT value, OutputT output )"
  },
  "juptune/juptune/core/util/conv/Functions/to.html": {
    "href": "juptune/juptune/core/util/conv/Functions/to.html",
    "title": "Overloads for - to | Marmos Demo",
    "keywords": "Overloads for - to Module juptune.core.util.conv to(value) String to( ValueT value ) to(value, result) bool to( ValueT value, Result result ) to(value, result, base) NumT to( ValueT value, Result result, size_t base ) to(value, output, base) Result to( ValueT value, NumT output, size_t base )"
  },
  "juptune/juptune/core/util/conv/Functions/toBase10.html": {
    "href": "juptune/juptune/core/util/conv/Functions/toBase10.html",
    "title": "Overloads for - toBase10 | Marmos Demo",
    "keywords": "Overloads for - toBase10 Module juptune.core.util.conv toBase10(num) String toBase10( NumT num ) toBase10(num_, buffer) <bug: unknown> toBase10( NumT num_, IntToCharBuffer buffer )"
  },
  "juptune/juptune/core/util/conv/Functions/toBase16.html": {
    "href": "juptune/juptune/core/util/conv/Functions/toBase16.html",
    "title": "Overloads for - toBase16 | Marmos Demo",
    "keywords": "Overloads for - toBase16 Module juptune.core.util.conv toBase16(num) String toBase16( NumT num ) toBase16(num_, buffer) <bug: unknown> toBase16( NumT num_, IntToHexCharBuffer buffer )"
  },
  "juptune/juptune/core/util/conv/Functions/toStringSink.html": {
    "href": "juptune/juptune/core/util/conv/Functions/toStringSink.html",
    "title": "Overloads for - toStringSink | Marmos Demo",
    "keywords": "Overloads for - toStringSink Module juptune.core.util.conv toStringSink(value, range, base) void toStringSink( ValueT value, OutputRangeT range, size_t base )"
  },
  "juptune/juptune/core/util/conv/Overview.html": {
    "href": "juptune/juptune/core/util/conv/Overview.html",
    "title": "Module - juptune.core.util.conv | Marmos Demo",
    "keywords": "Module - juptune.core.util.conv Aliases Name Description IntToCharBuffer IntToHexCharBuffer Functions Name Description arrayToString enumToString fromBase10 fromBase16 pointerToString structToString to toBase10 toBase16 toStringSink Variables Name Description BASE10_CHARS BASE16_CHARS BASE16_MAP MAX_SIZE_T_HEX_STRING_LEN MAX_SIZE_T_STRING_LEN"
  },
  "juptune/juptune/core/util/maths/Functions/checkedAdd.html": {
    "href": "juptune/juptune/core/util/maths/Functions/checkedAdd.html",
    "title": "Overloads for - checkedAdd | Marmos Demo",
    "keywords": "Overloads for - checkedAdd Module juptune.core.util.maths checkedAdd(a, b, result) Result checkedAdd( T a, T b, T result )"
  },
  "juptune/juptune/core/util/maths/Overview.html": {
    "href": "juptune/juptune/core/util/maths/Overview.html",
    "title": "Module - juptune.core.util.maths | Marmos Demo",
    "keywords": "Module - juptune.core.util.maths Functions Name Description checkedAdd"
  },
  "juptune/juptune/core/util/result/Functions/resultAssert.html": {
    "href": "juptune/juptune/core/util/result/Functions/resultAssert.html",
    "title": "Overloads for - resultAssert | Marmos Demo",
    "keywords": "Overloads for - resultAssert Module juptune.core.util.result resultAssert(result) void resultAssert( Result result )"
  },
  "juptune/juptune/core/util/result/Functions/then.html": {
    "href": "juptune/juptune/core/util/result/Functions/then.html",
    "title": "Overloads for - then | Marmos Demo",
    "keywords": "Overloads for - then Module juptune.core.util.result then(_this) Result then( Result _this )"
  },
  "juptune/juptune/core/util/result/Overview.html": {
    "href": "juptune/juptune/core/util/result/Overview.html",
    "title": "Module - juptune.core.util.result | Marmos Demo",
    "keywords": "Module - juptune.core.util.result Aliases Name Description InheritResults Structs Name Description Result Functions Name Description resultAssert then"
  },
  "juptune/juptune/core/util/result/Result/Functions/isError.html": {
    "href": "juptune/juptune/core/util/result/Result/Functions/isError.html",
    "title": "Overloads for - isError | Marmos Demo",
    "keywords": "Overloads for - isError Module juptune.core.util.result Parent Result isError() bool isError( )"
  },
  "juptune/juptune/core/util/result/Result/Functions/noError.html": {
    "href": "juptune/juptune/core/util/result/Result/Functions/noError.html",
    "title": "Overloads for - noError | Marmos Demo",
    "keywords": "Overloads for - noError Module juptune.core.util.result Parent Result noError() Result noError( ) static"
  },
  "juptune/juptune/core/util/result/Structs/Result.html": {
    "href": "juptune/juptune/core/util/result/Structs/Result.html",
    "title": "Struct - Result | Marmos Demo",
    "keywords": "Struct - Result Module juptune.core.util.result public struct Result { // bool isError( ) ; // Result noError( ) static; // String2 context; // string error; // int errorCode; // string errorType; // string file; // string function_; // size_t line; // string module_; } Functions Name Description isError noError Variables Name Description context error errorCode errorType file function_ line module_"
  },
  "juptune/juptune/core/util/statemachine/Overview.html": {
    "href": "juptune/juptune/core/util/statemachine/Overview.html",
    "title": "Module - juptune.core.util.statemachine | Marmos Demo",
    "keywords": "Module - juptune.core.util.statemachine Structs Name Description StateMachineStatic StateTransition StateTransitionTable"
  },
  "juptune/juptune/core/util/statemachine/StateMachineStatic/Functions/current.html": {
    "href": "juptune/juptune/core/util/statemachine/StateMachineStatic/Functions/current.html",
    "title": "Overloads for - current | Marmos Demo",
    "keywords": "Overloads for - current Module juptune.core.util.statemachine Parent StateMachineStatic current() StateEnum current( )"
  },
  "juptune/juptune/core/util/statemachine/StateMachineStatic/Functions/forceState.html": {
    "href": "juptune/juptune/core/util/statemachine/StateMachineStatic/Functions/forceState.html",
    "title": "Overloads for - forceState | Marmos Demo",
    "keywords": "Overloads for - forceState Module juptune.core.util.statemachine Parent StateMachineStatic forceState(state) void forceState( StateEnum state )"
  },
  "juptune/juptune/core/util/statemachine/StateMachineStatic/Functions/isIn.html": {
    "href": "juptune/juptune/core/util/statemachine/StateMachineStatic/Functions/isIn.html",
    "title": "Overloads for - isIn | Marmos Demo",
    "keywords": "Overloads for - isIn Module juptune.core.util.statemachine Parent StateMachineStatic isIn(state) bool isIn( StateEnum state )"
  },
  "juptune/juptune/core/util/statemachine/StateMachineStatic/Functions/mustBeIn.html": {
    "href": "juptune/juptune/core/util/statemachine/StateMachineStatic/Functions/mustBeIn.html",
    "title": "Overloads for - mustBeIn | Marmos Demo",
    "keywords": "Overloads for - mustBeIn Module juptune.core.util.statemachine Parent StateMachineStatic mustBeIn(state) bool mustBeIn( StateEnum state )"
  },
  "juptune/juptune/core/util/statemachine/StateTransition/Functions/isAllowedSafe.html": {
    "href": "juptune/juptune/core/util/statemachine/StateTransition/Functions/isAllowedSafe.html",
    "title": "Overloads for - isAllowedSafe | Marmos Demo",
    "keywords": "Overloads for - isAllowedSafe Module juptune.core.util.statemachine Parent StateTransition isAllowedSafe(context) bool isAllowedSafe( TransitionContext context )"
  },
  "juptune/juptune/core/util/statemachine/Structs/StateMachineStatic.html": {
    "href": "juptune/juptune/core/util/statemachine/Structs/StateMachineStatic.html",
    "title": "Struct - StateMachineStatic | Marmos Demo",
    "keywords": "Struct - StateMachineStatic Module juptune.core.util.statemachine public struct StateMachineStatic { // alias Table = <todo: marmos support pending>; // alias Transition = <todo: marmos support pending>; // StateEnum current( ) ; // void forceState( StateEnum state ) ; // bool isIn( StateEnum state ) ; // bool mustBeIn( StateEnum state ) ; // StateEnum state; } Aliases Name Description Table Transition Functions Name Description current forceState isIn mustBeIn Variables Name Description state"
  },
  "juptune/juptune/core/util/statemachine/Structs/StateTransition.html": {
    "href": "juptune/juptune/core/util/statemachine/Structs/StateTransition.html",
    "title": "Struct - StateTransition | Marmos Demo",
    "keywords": "Struct - StateTransition Module juptune.core.util.statemachine public struct StateTransition { // alias IsAllowed = <todo: marmos support pending>; // bool isAllowedSafe( TransitionContext context ) ; // StateEnum from; // IsAllowed isAllowed; // StateEnum to; } Aliases Name Description IsAllowed Functions Name Description isAllowedSafe Variables Name Description from isAllowed to"
  },
  "juptune/juptune/core/util/statemachine/Structs/StateTransitionTable.html": {
    "href": "juptune/juptune/core/util/statemachine/Structs/StateTransitionTable.html",
    "title": "Struct - StateTransitionTable | Marmos Demo",
    "keywords": "Struct - StateTransitionTable Module juptune.core.util.statemachine public struct StateTransitionTable { }"
  },
  "juptune/juptune/core/util/utf/Overview.html": {
    "href": "juptune/juptune/core/util/utf/Overview.html",
    "title": "Module - juptune.core.util.utf | Marmos Demo",
    "keywords": "Module - juptune.core.util.utf"
  },
  "juptune/juptune/crypto/Overview.html": {
    "href": "juptune/juptune/crypto/Overview.html",
    "title": "Module - juptune.crypto | Marmos Demo",
    "keywords": "Module - juptune.crypto"
  },
  "juptune/juptune/crypto/aead/AeadEncryptionContext/Functions/decrypt.html": {
    "href": "juptune/juptune/crypto/aead/AeadEncryptionContext/Functions/decrypt.html",
    "title": "Overloads for - decrypt | Marmos Demo",
    "keywords": "Overloads for - decrypt Module juptune.crypto.aead Parent AeadEncryptionContext decrypt(cipherText, additionalData, outPlainText, outPlainTextSlice) Result decrypt( <bug: unknown> cipherText, <bug: unknown> additionalData, SecureMemory outPlainText, SecureMemory outPlainTextSlice ) Decrypts the given cipherText into the outPlainText buffer, using the given additionalData to calculate the authentication tag, and returns a slice outPlainText which contains the final decrypted plaintext. Assertions cipherText must be at least AeadAlgorithmT.ABYTES in length. Where ABYTES is typically the length of the authentication tag. outPlainText must be at least cipherText.length - AeadAlgorithmT.ABYTES in length. Notes This is a \"combined\" AEAD decryption, where the authentication tag is assumed to be appended to the ciphertext. Params cipherText <bug: unknown> The ciphertext to decrypt. additionalData <bug: unknown> The additional data to use when calculating the authentication tag. outPlainText SecureMemory The buffer to store the decrypted plaintext in. outPlainTextSlice SecureMemory The slice of outPlainText that contains the decrypted plaintext. Throws Anything that AeadAlgorithmT.decrypt throws. Returns A Result that indicates if the decryption was successful or not."
  },
  "juptune/juptune/crypto/aead/AeadEncryptionContext/Functions/encrypt.html": {
    "href": "juptune/juptune/crypto/aead/AeadEncryptionContext/Functions/encrypt.html",
    "title": "Overloads for - encrypt | Marmos Demo",
    "keywords": "Overloads for - encrypt Module juptune.crypto.aead Parent AeadEncryptionContext encrypt(plaintext, additionalData, outCipherText, outCipherTextSlice) Result encrypt( SecureMemory plaintext, <bug: unknown> additionalData, <bug: unknown> outCipherText, <bug: unknown> outCipherTextSlice ) Encrypts the given plaintext into the outCipherText buffer, using the given additionalData to calculate the authentication tag, and returns a slice outCipherText which contains the final encrypted ciphertext + authentication tag. Assertions plaintext must not be empty, it makes no sense to encrypt an empty buffer. outCipherText must be at least plaintext.length + AeadAlgorithmT.ABYTES in length. Where ABYTES is typically the length of the authentication tag. Notes This is a \"combined\" AEAD encryption, where the authentication tag is appended to the ciphertext. You can retrieve the tag by taking the last AeadAlgorithmT.ABYTES bytes of outCipherTextSlice . Params plaintext SecureMemory The plaintext to encrypt. additionalData <bug: unknown> The additional data to use when calculating the authentication tag. outCipherText <bug: unknown> The buffer to store the encrypted ciphertext + authentication tag in. outCipherTextSlice <bug: unknown> The slice of outCipherText that contains the encrypted ciphertext + authentication tag. Throws Anything that AeadAlgorithmT.encrypt throws. Returns A Result that indicates if the encryption was successful or not."
  },
  "juptune/juptune/crypto/aead/Overview.html": {
    "href": "juptune/juptune/crypto/aead/Overview.html",
    "title": "Module - juptune.crypto.aead | Marmos Demo",
    "keywords": "Module - juptune.crypto.aead Aliases Name Description AeadChacha20Poly1305 AeadIetfChacha20Poly1305 ALL_AEAD_ALGORITHMS Structs Name Description AeadEncryptionContext Provides a generic interface for AEAD encryption and decryption. SodiumAead"
  },
  "juptune/juptune/crypto/aead/SodiumAead/Functions/decrypt.html": {
    "href": "juptune/juptune/crypto/aead/SodiumAead/Functions/decrypt.html",
    "title": "Overloads for - decrypt | Marmos Demo",
    "keywords": "Overloads for - decrypt Module juptune.crypto.aead Parent SodiumAead decrypt(m, c, ad, n, k, outSlice) Result decrypt( <bug: unknown> m, <bug: unknown> c, <bug: unknown> ad, SecureMemory n, SecureMemory k, <bug: unknown> outSlice )"
  },
  "juptune/juptune/crypto/aead/SodiumAead/Functions/encrypt.html": {
    "href": "juptune/juptune/crypto/aead/SodiumAead/Functions/encrypt.html",
    "title": "Overloads for - encrypt | Marmos Demo",
    "keywords": "Overloads for - encrypt Module juptune.crypto.aead Parent SodiumAead encrypt(c, m, ad, n, k, outC) Result encrypt( <bug: unknown> c, <bug: unknown> m, <bug: unknown> ad, SecureMemory n, SecureMemory k, <bug: unknown> outC )"
  },
  "juptune/juptune/crypto/aead/SodiumAead/Functions/initNonce.html": {
    "href": "juptune/juptune/crypto/aead/SodiumAead/Functions/initNonce.html",
    "title": "Overloads for - initNonce | Marmos Demo",
    "keywords": "Overloads for - initNonce Module juptune.crypto.aead Parent SodiumAead initNonce(nonce) void initNonce( SecureMemory nonce )"
  },
  "juptune/juptune/crypto/aead/SodiumAead/Functions/nextNonce.html": {
    "href": "juptune/juptune/crypto/aead/SodiumAead/Functions/nextNonce.html",
    "title": "Overloads for - nextNonce | Marmos Demo",
    "keywords": "Overloads for - nextNonce Module juptune.crypto.aead Parent SodiumAead nextNonce(nonce) void nextNonce( SecureMemory nonce )"
  },
  "juptune/juptune/crypto/aead/Structs/AeadEncryptionContext.html": {
    "href": "juptune/juptune/crypto/aead/Structs/AeadEncryptionContext.html",
    "title": "Struct - AeadEncryptionContext | Marmos Demo",
    "keywords": "Struct - AeadEncryptionContext Module juptune.crypto.aead public struct AeadEncryptionContext { // Decrypts the given `cipherText` into the `outPlainText` buffer, using the given `additionalData` to calculate the authentication tag, and returns a slice `outPlainText` which contains the final decrypted plaintext. Result decrypt( <bug: unknown> cipherText, <bug: unknown> additionalData, SecureMemory outPlainText, SecureMemory outPlainTextSlice ) ; // Encrypts the given `plaintext` into the `outCipherText` buffer, using the given `additionalData` to calculate the authentication tag, and returns a slice `outCipherText` which contains the final encrypted ciphertext + authentication tag. Result encrypt( SecureMemory plaintext, <bug: unknown> additionalData, <bug: unknown> outCipherText, <bug: unknown> outCipherTextSlice ) ; } About Provides a generic interface for AEAD encryption and decryption. To understand what AeadAlgorithmT is, see the AeadIetfChacha20Poly1305 struct as an example. This struct makes extensive use of the SecureMemory struct to help encourage secure storage of sensitive memory. This struct is weakly safe as there are certain behaviours and access patterns that are not possible to prevent at compile time. Functions Name Description decrypt Decrypts the given cipherText into the outPlainText buffer, using the given additionalData to calculate the authentication tag, and returns a slice outPlainText which contains the final decrypted plaintext. encrypt Encrypts the given plaintext into the outCipherText buffer, using the given additionalData to calculate the authentication tag, and returns a slice outCipherText which contains the final encrypted ciphertext + authentication tag."
  },
  "juptune/juptune/crypto/aead/Structs/SodiumAead.html": {
    "href": "juptune/juptune/crypto/aead/Structs/SodiumAead.html",
    "title": "Struct - SodiumAead | Marmos Demo",
    "keywords": "Struct - SodiumAead Module juptune.crypto.aead public struct SodiumAead { // alias EncryptionContext = <todo: marmos support pending>; // Result decrypt( <bug: unknown> m, <bug: unknown> c, <bug: unknown> ad, SecureMemory n, SecureMemory k, <bug: unknown> outSlice ) ; // Result encrypt( <bug: unknown> c, <bug: unknown> m, <bug: unknown> ad, SecureMemory n, SecureMemory k, <bug: unknown> outC ) ; // void initNonce( SecureMemory nonce ) ; // void nextNonce( SecureMemory nonce ) ; // __enumMember ABYTES; // __enumMember KEY_LENGTH; // __enumMember NONCE_LENGTH; } Aliases Name Description EncryptionContext Functions Name Description decrypt encrypt initNonce nextNonce Variables Name Description ABYTES KEY_LENGTH NONCE_LENGTH"
  },
  "juptune/juptune/crypto/memory/Overview.html": {
    "href": "juptune/juptune/crypto/memory/Overview.html",
    "title": "Module - juptune.crypto.memory | Marmos Demo",
    "keywords": "Module - juptune.crypto.memory Structs Name Description SecureMemory Memory for sensitive data - hardened using OS memory protection mechanisms, as well as providing constant-time operations to help mitigate timing attacks."
  },
  "juptune/juptune/crypto/memory/SecureMemory/Functions/access.html": {
    "href": "juptune/juptune/crypto/memory/SecureMemory/Functions/access.html",
    "title": "Overloads for - access | Marmos Demo",
    "keywords": "Overloads for - access Module juptune.crypto.memory Parent SecureMemory access(func) void access( <bug: unknown> func ) Provides a safe(ish) way to access the underlying user memory. Notes This wrapper function is used to help enforce the scope attribute. You'll probably have to mark your delegate @trusted , just be wary this prevents scope from being checked by the compiler. D's compiler is god awful when it comes to error messages, so you may want to store func inside a variable first to see what's going wrong with it. Params func <bug: unknown> The delegate to call. access(func) void access( <bug: unknown> func ) ditto"
  },
  "juptune/juptune/crypto/memory/SecureMemory/Functions/allocate.html": {
    "href": "juptune/juptune/crypto/memory/SecureMemory/Functions/allocate.html",
    "title": "Overloads for - allocate | Marmos Demo",
    "keywords": "Overloads for - allocate Module juptune.crypto.memory Parent SecureMemory allocate(memory, length) Result allocate( SecureMemory memory, size_t length ) static Allocates a new SecureMemory struct, with the given length. Notes Please see the struct documentation for more information on the memory layout. A length of 0 is valid, though not really recommended. Params memory SecureMemory The SecureMemory struct to allocate. length size_t The length of the user memory to allocate. Throws If any of the syscalls fail, a Result will be thrown with the OS error code + message. Returns Result.noError on success, or an error otherwise."
  },
  "juptune/juptune/crypto/memory/SecureMemory/Functions/constantTimeCompare.html": {
    "href": "juptune/juptune/crypto/memory/SecureMemory/Functions/constantTimeCompare.html",
    "title": "Overloads for - constantTimeCompare | Marmos Demo",
    "keywords": "Overloads for - constantTimeCompare Module juptune.crypto.memory Parent SecureMemory constantTimeCompare(other) bool constantTimeCompare( <bug: unknown> other ) Compares this memory to another memory in constant time for the given length of this memory. Assertions other must have the same length as this memory. There is no valid usecase for comparing secure memory of different lengths. Notes You should always use this function if other contains sensitive data. Failure to do so opens you up to timing attacks. Params other <bug: unknown> The memory to compare to. Returns true if the memory is equal, false otherwise. constantTimeCompare(other) bool constantTimeCompare( SecureMemory other ) ditto."
  },
  "juptune/juptune/crypto/memory/SecureMemory/Functions/length.html": {
    "href": "juptune/juptune/crypto/memory/SecureMemory/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module juptune.crypto.memory Parent SecureMemory length() size_t length( )"
  },
  "juptune/juptune/crypto/memory/SecureMemory/Functions/unsafeSlice.html": {
    "href": "juptune/juptune/crypto/memory/SecureMemory/Functions/unsafeSlice.html",
    "title": "Overloads for - unsafeSlice | Marmos Demo",
    "keywords": "Overloads for - unsafeSlice Module juptune.crypto.memory Parent SecureMemory unsafeSlice() <bug: unknown> unsafeSlice( ) Unless you realllllly need this, just use access or constantTimeCompare instead."
  },
  "juptune/juptune/crypto/memory/Structs/SecureMemory.html": {
    "href": "juptune/juptune/crypto/memory/Structs/SecureMemory.html",
    "title": "Struct - SecureMemory | Marmos Demo",
    "keywords": "Struct - SecureMemory Module juptune.crypto.memory public struct SecureMemory { // Sets the memory to no access. alias makeNoAccess = <todo: marmos support pending>; // Sets the memory to read-only. alias makeReadOnly = <todo: marmos support pending>; // Sets the memory to read/write. alias makeReadWrite = <todo: marmos support pending>; // Sets the memory to write-only. alias makeWriteOnly = <todo: marmos support pending>; // Provides a safe(ish) way to access the underlying user memory. void access( <bug: unknown> func ) ; // ditto void access( <bug: unknown> func ) ; // Allocates a new SecureMemory struct, with the given length. Result allocate( SecureMemory memory, size_t length ) static; // Compares this memory to another memory in constant time for the given length of this memory. bool constantTimeCompare( <bug: unknown> other ) ; // ditto. bool constantTimeCompare( SecureMemory other ) ; // size_t length( ) ; // Unless you realllllly need this, just use `access` or `constantTimeCompare` instead. <bug: unknown> unsafeSlice( ) ; // __enumMember CANARY_VALUE; } About Memory for sensitive data - hardened using OS memory protection mechanisms, as well as providing constant-time operations to help mitigate timing attacks. Performance Please note that this struct has to make a lot of syscalls, and is therefore pretty slow compared to general-purpose memory, especially due to mmap and munmap. You should only use this for secret data, and potentially setup something like an object pool to reuse the memory if you need to do a lot of operations on it, as even deallocation is slow. Kind reminder to never let performance get in the way of security - benchmark results matter a lot less than security results. Technical This struct directly uses mmap and munmap for memory allocation and deallocation. The user memory range is locked in RAM using mlock, so that it probably won't be swapped; it is also marked as MADV_DONTDUMP, so that it probably won't be dumped to disk e.g. by a core dump. More minorly, the memory is also marked as MADV_WIPEONFORK, so that it is wiped on fork, in case you use fork() + Juptune for some reason (which isn't supported anyway, btw) Given a desired length of 1024 bytes, and a page size of 4096 bytes: - Two guard pages are allocated, one before the user memory, and one after the user memory. - A page for the user memory is allocated. (1024 < 4096) The memory layout is as follows: ======================================== = Guard Page (1 page) = ======================================== = User Memory (enough pages as needed) = ======================================== = Guard Page (1 page) = ======================================== The guard pages are guard pages - they will crash on access. The user memory is a set of (by default) read/write pages. The slice returned to the user ends at the very last page, so that any overflow will be caught by the guard page. The start of the user memory therefore is unused by the user. This is filled with a canary value of 0xCC, which is checked on deallocation to ensure that no data has underflowed out of the user memory. The guard page at the end is... also a guard page - it will crash on access. Aliases Name Description makeNoAccess Sets the memory to no access. makeReadOnly Sets the memory to read-only. makeReadWrite Sets the memory to read/write. makeWriteOnly Sets the memory to write-only. Functions Name Description access Provides a safe(ish) way to access the underlying user memory. allocate Allocates a new SecureMemory struct, with the given length. constantTimeCompare Compares this memory to another memory in constant time for the given length of this memory. length unsafeSlice Unless you realllllly need this, just use access or constantTimeCompare instead. Variables Name Description CANARY_VALUE"
  },
  "juptune/juptune/crypto/rng/Functions/cryptoFillBuffer.html": {
    "href": "juptune/juptune/crypto/rng/Functions/cryptoFillBuffer.html",
    "title": "Overloads for - cryptoFillBuffer | Marmos Demo",
    "keywords": "Overloads for - cryptoFillBuffer Module juptune.crypto.rng cryptoFillBuffer(buffer) void cryptoFillBuffer( <bug: unknown> buffer )"
  },
  "juptune/juptune/crypto/rng/Overview.html": {
    "href": "juptune/juptune/crypto/rng/Overview.html",
    "title": "Module - juptune.crypto.rng | Marmos Demo",
    "keywords": "Module - juptune.crypto.rng Functions Name Description cryptoFillBuffer"
  },
  "juptune/juptune/data/Overview.html": {
    "href": "juptune/juptune/data/Overview.html",
    "title": "Module - juptune.data | Marmos Demo",
    "keywords": "Module - juptune.data"
  },
  "juptune/juptune/data/base/Base64Alphabet/Functions/charToSextet.html": {
    "href": "juptune/juptune/data/base/Base64Alphabet/Functions/charToSextet.html",
    "title": "Overloads for - charToSextet | Marmos Demo",
    "keywords": "Overloads for - charToSextet Module juptune.data.base Parent Base64Alphabet charToSextet(c) uint charToSextet( char c )"
  },
  "juptune/juptune/data/base/Base64Alphabet/Functions/sextetToChar.html": {
    "href": "juptune/juptune/data/base/Base64Alphabet/Functions/sextetToChar.html",
    "title": "Overloads for - sextetToChar | Marmos Demo",
    "keywords": "Overloads for - sextetToChar Module juptune.data.base Parent Base64Alphabet sextetToChar(sextet) char sextetToChar( uint sextet )"
  },
  "juptune/juptune/data/base/Base64Decoder/Functions/decodeGroup.html": {
    "href": "juptune/juptune/data/base/Base64Decoder/Functions/decodeGroup.html",
    "title": "Overloads for - decodeGroup | Marmos Demo",
    "keywords": "Overloads for - decodeGroup Module juptune.data.base Parent Base64Decoder decodeGroup(group) Result decodeGroup( <bug: unknown> group )"
  },
  "juptune/juptune/data/base/Base64Encoder/Functions/encodeGroup.html": {
    "href": "juptune/juptune/data/base/Base64Encoder/Functions/encodeGroup.html",
    "title": "Overloads for - encodeGroup | Marmos Demo",
    "keywords": "Overloads for - encodeGroup Module juptune.data.base Parent Base64Encoder encodeGroup(group) <bug: unknown> encodeGroup( <bug: unknown> group )"
  },
  "juptune/juptune/data/base/Overview.html": {
    "href": "juptune/juptune/data/base/Overview.html",
    "title": "Module - juptune.data.base | Marmos Demo",
    "keywords": "Module - juptune.data.base Aliases Name Description Base64AllowLines Used with an Alphabet to describe whether line breaks are supported. Base64Rfc2045Alphabet Base64Rfc4648Alphabet Base64Rfc4648UrlAlphabet Structs Name Description Base64Alphabet Describes a base64 alphabet. You may want to use the aliases instead of using this directly. Base64Decoder Base64Encoder Variables Name Description g_base64BaseAlphabet INVALID_BASE64"
  },
  "juptune/juptune/data/base/Structs/Base64Alphabet.html": {
    "href": "juptune/juptune/data/base/Structs/Base64Alphabet.html",
    "title": "Struct - Base64Alphabet | Marmos Demo",
    "keywords": "Struct - Base64Alphabet Module juptune.data.base public struct Base64Alphabet { // uint charToSextet( char c ) ; // char sextetToChar( uint sextet ) ; // __enumMember AllowLines; // immutable __enumMember LineBreak; // __enumMember MaxLineLength; // __enumMember Pad1; // immutable __enumMember Pad2; // __enumMember Padding; // __enumMember Zero; } About Describes a base64 alphabet. You may want to use the aliases instead of using this directly. Pretty much all base64 alphabets are the same beyond the 62nd and 63rd characters, and the padding character, so those are the only ones that are configurable. Functions Name Description charToSextet sextetToChar Variables Name Description AllowLines LineBreak MaxLineLength Pad1 Pad2 Padding Zero"
  },
  "juptune/juptune/data/base/Structs/Base64Decoder.html": {
    "href": "juptune/juptune/data/base/Structs/Base64Decoder.html",
    "title": "Struct - Base64Decoder | Marmos Demo",
    "keywords": "Struct - Base64Decoder Module juptune.data.base public struct Base64Decoder { // alias Machine = <todo: marmos support pending>; // alias StateMachine = <todo: marmos support pending>; // Result decodeGroup( <bug: unknown> group ) ; } Aliases Name Description Machine StateMachine Functions Name Description decodeGroup"
  },
  "juptune/juptune/data/base/Structs/Base64Encoder.html": {
    "href": "juptune/juptune/data/base/Structs/Base64Encoder.html",
    "title": "Struct - Base64Encoder | Marmos Demo",
    "keywords": "Struct - Base64Encoder Module juptune.data.base public struct Base64Encoder { // <bug: unknown> encodeGroup( <bug: unknown> group ) ; } Functions Name Description encodeGroup"
  },
  "juptune/juptune/event/Overview.html": {
    "href": "juptune/juptune/event/Overview.html",
    "title": "Module - juptune.event | Marmos Demo",
    "keywords": "Module - juptune.event"
  },
  "juptune/juptune/event/fiber/FiberAllocator/Functions/allocateBlock.html": {
    "href": "juptune/juptune/event/fiber/FiberAllocator/Functions/allocateBlock.html",
    "title": "Overloads for - allocateBlock | Marmos Demo",
    "keywords": "Overloads for - allocateBlock Module juptune.event.fiber Parent FiberAllocator allocateBlock(block) Result allocateBlock( <bug: unknown> block )"
  },
  "juptune/juptune/event/fiber/FiberAllocator/Functions/allocatedFiberCount.html": {
    "href": "juptune/juptune/event/fiber/FiberAllocator/Functions/allocatedFiberCount.html",
    "title": "Overloads for - allocatedFiberCount | Marmos Demo",
    "keywords": "Overloads for - allocatedFiberCount Module juptune.event.fiber Parent FiberAllocator allocatedFiberCount() size_t allocatedFiberCount( )"
  },
  "juptune/juptune/event/fiber/FiberAllocator/Functions/freeBlock.html": {
    "href": "juptune/juptune/event/fiber/FiberAllocator/Functions/freeBlock.html",
    "title": "Overloads for - freeBlock | Marmos Demo",
    "keywords": "Overloads for - freeBlock Module juptune.event.fiber Parent FiberAllocator freeBlock(block) void freeBlock( <bug: unknown> block )"
  },
  "juptune/juptune/event/fiber/FiberAllocator/Functions/freeFiber.html": {
    "href": "juptune/juptune/event/fiber/FiberAllocator/Functions/freeFiber.html",
    "title": "Overloads for - freeFiber | Marmos Demo",
    "keywords": "Overloads for - freeFiber Module juptune.event.fiber Parent FiberAllocator freeFiber(fiber) void freeFiber( <bug: unknown> fiber )"
  },
  "juptune/juptune/event/fiber/FiberAllocator/Functions/makeWall.html": {
    "href": "juptune/juptune/event/fiber/FiberAllocator/Functions/makeWall.html",
    "title": "Overloads for - makeWall | Marmos Demo",
    "keywords": "Overloads for - makeWall Module juptune.event.fiber Parent FiberAllocator makeWall(blockCount, fiberStackBytes, wall) Result makeWall( size_t blockCount, size_t fiberStackBytes, <bug: unknown> wall )"
  },
  "juptune/juptune/event/fiber/FiberAllocatorConfig/Functions/shouldZeroOutBlocksOnFree.html": {
    "href": "juptune/juptune/event/fiber/FiberAllocatorConfig/Functions/shouldZeroOutBlocksOnFree.html",
    "title": "Overloads for - shouldZeroOutBlocksOnFree | Marmos Demo",
    "keywords": "Overloads for - shouldZeroOutBlocksOnFree Module juptune.event.fiber Parent FiberAllocatorConfig shouldZeroOutBlocksOnFree(flag) FiberAllocatorConfig shouldZeroOutBlocksOnFree( bool flag )"
  },
  "juptune/juptune/event/fiber/FiberAllocatorConfig/Functions/withBlockStackSize.html": {
    "href": "juptune/juptune/event/fiber/FiberAllocatorConfig/Functions/withBlockStackSize.html",
    "title": "Overloads for - withBlockStackSize | Marmos Demo",
    "keywords": "Overloads for - withBlockStackSize Module juptune.event.fiber Parent FiberAllocatorConfig withBlockStackSize(bytes) FiberAllocatorConfig withBlockStackSize( size_t bytes )"
  },
  "juptune/juptune/event/fiber/FiberAllocatorConfig/Functions/withBlocksPerWall.html": {
    "href": "juptune/juptune/event/fiber/FiberAllocatorConfig/Functions/withBlocksPerWall.html",
    "title": "Overloads for - withBlocksPerWall | Marmos Demo",
    "keywords": "Overloads for - withBlocksPerWall Module juptune.event.fiber Parent FiberAllocatorConfig withBlocksPerWall(count) FiberAllocatorConfig withBlocksPerWall( size_t count )"
  },
  "juptune/juptune/event/fiber/Functions/alignTo.html": {
    "href": "juptune/juptune/event/fiber/Functions/alignTo.html",
    "title": "Overloads for - alignTo | Marmos Demo",
    "keywords": "Overloads for - alignTo Module juptune.event.fiber alignTo(value, boundary) T alignTo( T value, T boundary )"
  },
  "juptune/juptune/event/fiber/Functions/juptuneFiberGetRoot.html": {
    "href": "juptune/juptune/event/fiber/Functions/juptuneFiberGetRoot.html",
    "title": "Overloads for - juptuneFiberGetRoot | Marmos Demo",
    "keywords": "Overloads for - juptuneFiberGetRoot Module juptune.event.fiber juptuneFiberGetRoot() <bug: unknown> juptuneFiberGetRoot( )"
  },
  "juptune/juptune/event/fiber/Functions/juptuneFiberGetThis.html": {
    "href": "juptune/juptune/event/fiber/Functions/juptuneFiberGetThis.html",
    "title": "Overloads for - juptuneFiberGetThis | Marmos Demo",
    "keywords": "Overloads for - juptuneFiberGetThis Module juptune.event.fiber juptuneFiberGetThis() <bug: unknown> juptuneFiberGetThis( )"
  },
  "juptune/juptune/event/fiber/Functions/juptuneFiberMain.html": {
    "href": "juptune/juptune/event/fiber/Functions/juptuneFiberMain.html",
    "title": "Overloads for - juptuneFiberMain | Marmos Demo",
    "keywords": "Overloads for - juptuneFiberMain Module juptune.event.fiber juptuneFiberMain() noreturn juptuneFiberMain( )"
  },
  "juptune/juptune/event/fiber/Functions/juptuneFiberOnEnd.html": {
    "href": "juptune/juptune/event/fiber/Functions/juptuneFiberOnEnd.html",
    "title": "Overloads for - juptuneFiberOnEnd | Marmos Demo",
    "keywords": "Overloads for - juptuneFiberOnEnd Module juptune.event.fiber juptuneFiberOnEnd(fiber) void juptuneFiberOnEnd( <bug: unknown> fiber )"
  },
  "juptune/juptune/event/fiber/Functions/juptuneFiberSwap.html": {
    "href": "juptune/juptune/event/fiber/Functions/juptuneFiberSwap.html",
    "title": "Overloads for - juptuneFiberSwap | Marmos Demo",
    "keywords": "Overloads for - juptuneFiberSwap Module juptune.event.fiber juptuneFiberSwap(to) void juptuneFiberSwap( <bug: unknown> to )"
  },
  "juptune/juptune/event/fiber/Functions/juptuneFiberThreadInit.html": {
    "href": "juptune/juptune/event/fiber/Functions/juptuneFiberThreadInit.html",
    "title": "Overloads for - juptuneFiberThreadInit | Marmos Demo",
    "keywords": "Overloads for - juptuneFiberThreadInit Module juptune.event.fiber juptuneFiberThreadInit() void juptuneFiberThreadInit( )"
  },
  "juptune/juptune/event/fiber/Functions/juptuneSwapFiberAsm.html": {
    "href": "juptune/juptune/event/fiber/Functions/juptuneSwapFiberAsm.html",
    "title": "Overloads for - juptuneSwapFiberAsm | Marmos Demo",
    "keywords": "Overloads for - juptuneSwapFiberAsm Module juptune.event.fiber juptuneSwapFiberAsm(from, to) void juptuneSwapFiberAsm( <bug: unknown> from, <bug: unknown> to )"
  },
  "juptune/juptune/event/fiber/JuptuneFiber/Functions/isInWaitingState.html": {
    "href": "juptune/juptune/event/fiber/JuptuneFiber/Functions/isInWaitingState.html",
    "title": "Overloads for - isInWaitingState | Marmos Demo",
    "keywords": "Overloads for - isInWaitingState Module juptune.event.fiber Parent JuptuneFiber isInWaitingState() bool isInWaitingState( )"
  },
  "juptune/juptune/event/fiber/JuptuneRawFiber/Functions/setTopOfStack.html": {
    "href": "juptune/juptune/event/fiber/JuptuneRawFiber/Functions/setTopOfStack.html",
    "title": "Overloads for - setTopOfStack | Marmos Demo",
    "keywords": "Overloads for - setTopOfStack Module juptune.event.fiber Parent JuptuneRawFiber setTopOfStack(top) void setTopOfStack( <bug: unknown> top )"
  },
  "juptune/juptune/event/fiber/Overview.html": {
    "href": "juptune/juptune/event/fiber/Overview.html",
    "title": "Module - juptune.event.fiber | Marmos Demo",
    "keywords": "Module - juptune.event.fiber Structs Name Description FiberAllocator FiberAllocatorConfig Configuration for a FiberAllocator . JuptuneFiber JuptuneRawFiber Functions Name Description alignTo juptuneFiberGetRoot juptuneFiberGetThis juptuneFiberMain juptuneFiberOnEnd juptuneFiberSwap juptuneFiberThreadInit juptuneSwapFiberAsm Variables Name Description g_currentFiberInThread g_threadRootFiber"
  },
  "juptune/juptune/event/fiber/Structs/FiberAllocator.html": {
    "href": "juptune/juptune/event/fiber/Structs/FiberAllocator.html",
    "title": "Struct - FiberAllocator | Marmos Demo",
    "keywords": "Struct - FiberAllocator Module juptune.event.fiber public struct FiberAllocator { // Result allocateBlock( <bug: unknown> block ) ; // size_t allocatedFiberCount( ) ; // void freeBlock( <bug: unknown> block ) ; // void freeFiber( <bug: unknown> fiber ) ; // Result makeWall( size_t blockCount, size_t fiberStackBytes, <bug: unknown> wall ) ; // __enumMember POSIX_MIN_STACK_SIZE; } Functions Name Description allocateBlock allocatedFiberCount freeBlock freeFiber makeWall Variables Name Description POSIX_MIN_STACK_SIZE"
  },
  "juptune/juptune/event/fiber/Structs/FiberAllocatorConfig.html": {
    "href": "juptune/juptune/event/fiber/Structs/FiberAllocatorConfig.html",
    "title": "Struct - FiberAllocatorConfig | Marmos Demo",
    "keywords": "Struct - FiberAllocatorConfig Module juptune.event.fiber public struct FiberAllocatorConfig { // FiberAllocatorConfig shouldZeroOutBlocksOnFree( bool flag ) ; // FiberAllocatorConfig withBlocksPerWall( size_t count ) ; // FiberAllocatorConfig withBlockStackSize( size_t bytes ) ; // How many blocks to allocate at one time, per wall. size_t blocksPerWall; // The minimum amount of bytes to allocate for each blocks' stack. size_t blockStackSize; // Whether to zero-out the stack memory of a block during deallocation bool zeroBlocksOnFree; } About Configuration for a FiberAllocator . Functions Name Description shouldZeroOutBlocksOnFree withBlocksPerWall withBlockStackSize Variables Name Description blocksPerWall How many blocks to allocate at one time, per wall. blockStackSize The minimum amount of bytes to allocate for each blocks' stack. zeroBlocksOnFree Whether to zero-out the stack memory of a block during deallocation"
  },
  "juptune/juptune/event/fiber/Structs/JuptuneFiber.html": {
    "href": "juptune/juptune/event/fiber/Structs/JuptuneFiber.html",
    "title": "Struct - JuptuneFiber | Marmos Demo",
    "keywords": "Struct - JuptuneFiber Module juptune.event.fiber public struct JuptuneFiber { // alias EntryPointGC = <todo: marmos support pending>; // alias EntryPointNoGC = <todo: marmos support pending>; // bool isInWaitingState( ) ; // <bug: unknown> block; // <bug: unknown> contextDtor; // <bug: unknown> contextPtr; // TypeInfo contextType; // EntryPointGC entryPointGC; // EntryPointNoGC entryPointNoGC; // Nullable!(IoUringCompletion) lastCqe; // JuptuneRawFiber rawFiber; // State state; } Aliases Name Description EntryPointGC EntryPointNoGC Functions Name Description isInWaitingState Variables Name Description block contextDtor contextPtr contextType entryPointGC entryPointNoGC lastCqe rawFiber state"
  },
  "juptune/juptune/event/fiber/Structs/JuptuneRawFiber.html": {
    "href": "juptune/juptune/event/fiber/Structs/JuptuneRawFiber.html",
    "title": "Struct - JuptuneRawFiber | Marmos Demo",
    "keywords": "Struct - JuptuneRawFiber Module juptune.event.fiber public struct JuptuneRawFiber { // void setTopOfStack( <bug: unknown> top ) ; // <bug: unknown> r12; // <bug: unknown> r13; // <bug: unknown> r14; // <bug: unknown> r15; // <bug: unknown> rbp; // <bug: unknown> rbx; // <bug: unknown> ret; // <bug: unknown> rsp; // <bug: unknown> stack; } Functions Name Description setTopOfStack Variables Name Description r12 r13 r14 r15 rbp rbx ret rsp stack"
  },
  "juptune/juptune/event/io/Functions/getPosixResult.html": {
    "href": "juptune/juptune/event/io/Functions/getPosixResult.html",
    "title": "Overloads for - getPosixResult | Marmos Demo",
    "keywords": "Overloads for - getPosixResult Module juptune.event.io getPosixResult(errorMessage, errno) Result getPosixResult( string errorMessage, int errno )"
  },
  "juptune/juptune/event/io/Functions/inet_aton.html": {
    "href": "juptune/juptune/event/io/Functions/inet_aton.html",
    "title": "Overloads for - inet_aton | Marmos Demo",
    "keywords": "Overloads for - inet_aton Module juptune.event.io inet_aton(__anonymous, __anonymous) int inet_aton( <bug: unknown> __anonymous, <bug: unknown> __anonymous )"
  },
  "juptune/juptune/event/io/Functions/wrapIOResult.html": {
    "href": "juptune/juptune/event/io/Functions/wrapIOResult.html",
    "title": "Overloads for - wrapIOResult | Marmos Demo",
    "keywords": "Overloads for - wrapIOResult Module juptune.event.io wrapIOResult(result) void wrapIOResult( Result result )"
  },
  "juptune/juptune/event/io/GenericIoDriver/Functions/put.html": {
    "href": "juptune/juptune/event/io/GenericIoDriver/Functions/put.html",
    "title": "Overloads for - put | Marmos Demo",
    "keywords": "Overloads for - put Module juptune.event.io Parent GenericIoDriver put(buffer, timeout) Result put( <bug: unknown> buffer, Duration timeout ) Writes an entire buffer. This is a high level helper around the send function. Params buffer <bug: unknown> The buffer to write. Throws Any error that the platform's underlying send command returns. (e.g. LinuxError on Linux) Returns A Result"
  },
  "juptune/juptune/event/io/IpAddress/Functions/asIpv4.html": {
    "href": "juptune/juptune/event/io/IpAddress/Functions/asIpv4.html",
    "title": "Overloads for - asIpv4 | Marmos Demo",
    "keywords": "Overloads for - asIpv4 Module juptune.event.io Parent IpAddress asIpv4() uint asIpv4( ) The raw IPv4 address in network order. Throws Asserts that the Kind to already be Kind.ipv4 Returns The raw IPv4 address in network order."
  },
  "juptune/juptune/event/io/IpAddress/Functions/asIpv6.html": {
    "href": "juptune/juptune/event/io/IpAddress/Functions/asIpv6.html",
    "title": "Overloads for - asIpv6 | Marmos Demo",
    "keywords": "Overloads for - asIpv6 Module juptune.event.io Parent IpAddress asIpv6() <bug: unknown> asIpv6( ) The raw IPv6 address in network order. This property expects the Kind to already be Kind.ipv6 , if you'd like to perform a conversion please use toIpv6 instead. Throws Asserts that the Kind to already be Kind.ipv6 Returns The raw IPv6 address in network order."
  },
  "juptune/juptune/event/io/IpAddress/Functions/asSocketAddr.html": {
    "href": "juptune/juptune/event/io/IpAddress/Functions/asSocketAddr.html",
    "title": "Overloads for - asSocketAddr | Marmos Demo",
    "keywords": "Overloads for - asSocketAddr Module juptune.event.io Parent IpAddress asSocketAddr(used, usedLength, ipv4, ipv6) void asSocketAddr( <bug: unknown> used, size_t usedLength, sockaddr_in ipv4, sockaddr_in6 ipv6 )"
  },
  "juptune/juptune/event/io/IpAddress/Functions/kind.html": {
    "href": "juptune/juptune/event/io/IpAddress/Functions/kind.html",
    "title": "Overloads for - kind | Marmos Demo",
    "keywords": "Overloads for - kind Module juptune.event.io Parent IpAddress kind() Kind kind( ) Returns The Kind of IP stored."
  },
  "juptune/juptune/event/io/IpAddress/Functions/mustParse.html": {
    "href": "juptune/juptune/event/io/IpAddress/Functions/mustParse.html",
    "title": "Overloads for - mustParse | Marmos Demo",
    "keywords": "Overloads for - mustParse Module juptune.event.io Parent IpAddress mustParse(address, defaultPort) IpAddress mustParse( <bug: unknown> address, ushort defaultPort ) static"
  },
  "juptune/juptune/event/io/IpAddress/Functions/parse.html": {
    "href": "juptune/juptune/event/io/IpAddress/Functions/parse.html",
    "title": "Overloads for - parse | Marmos Demo",
    "keywords": "Overloads for - parse Module juptune.event.io Parent IpAddress parse(ip, address, defaultPort) Result parse( IpAddress ip, <bug: unknown> address, ushort defaultPort ) static Parses an IPv4 or IPv6 address string into an IpAddress object. Addresses can either be a raw address, or a raw address with a port in the IP version's standard form. Implementation Note: Currently this function uses inet_aton and inet_pton for the raw address parsing. Params ip IpAddress The IpAddress to store the result in. address <bug: unknown> The address string to parse. defaultPort ushort The port to give ip if address does not specify one. Throws IpAddress.Error.invalidAddress if address could not be parsed. Returns A Result"
  },
  "juptune/juptune/event/io/IpAddress/Functions/toIpv6.html": {
    "href": "juptune/juptune/event/io/IpAddress/Functions/toIpv6.html",
    "title": "Overloads for - toIpv6 | Marmos Demo",
    "keywords": "Overloads for - toIpv6 Module juptune.event.io Parent IpAddress toIpv6() IpAddress toIpv6( ) Converts the current address into an IPv6 address. For IPv4 addresses: If the address is 127.0.0.1 then it is converted into ::1 For IPv4 addresses: If the address is 0.0.0.0 then it is converted into : Returns A new IpAddress containing an IPv6 address."
  },
  "juptune/juptune/event/io/IpAddress/Functions/withPort.html": {
    "href": "juptune/juptune/event/io/IpAddress/Functions/withPort.html",
    "title": "Overloads for - withPort | Marmos Demo",
    "keywords": "Overloads for - withPort Module juptune.event.io Parent IpAddress withPort(port) IpAddress withPort( ushort port ) Creates a copy of this IpAddress with the given port. Params port ushort The port to set. Returns A copy of this IpAddress with the given port."
  },
  "juptune/juptune/event/io/Overview.html": {
    "href": "juptune/juptune/event/io/Overview.html",
    "title": "Module - juptune.event.io | Marmos Demo",
    "keywords": "Module - juptune.event.io Aliases Name Description PlatformGenericIoDriver TcpSocket An alias to the platform's default tcp socket implementation. Structs Name Description GenericIoDriver Provides generic IO functionality. IpAddress Non-IO helper structs PosixGenericIoDriver PosixTcpSocket Implementations Functions Name Description getPosixResult inet_aton wrapIOResult"
  },
  "juptune/juptune/event/io/PosixGenericIoDriver/Functions/close.html": {
    "href": "juptune/juptune/event/io/PosixGenericIoDriver/Functions/close.html",
    "title": "Overloads for - close | Marmos Demo",
    "keywords": "Overloads for - close Module juptune.event.io Parent PosixGenericIoDriver close() Result close( )"
  },
  "juptune/juptune/event/io/PosixGenericIoDriver/Functions/isOpen.html": {
    "href": "juptune/juptune/event/io/PosixGenericIoDriver/Functions/isOpen.html",
    "title": "Overloads for - isOpen | Marmos Demo",
    "keywords": "Overloads for - isOpen Module juptune.event.io Parent PosixGenericIoDriver isOpen() bool isOpen( )"
  },
  "juptune/juptune/event/io/PosixGenericIoDriver/Functions/readv.html": {
    "href": "juptune/juptune/event/io/PosixGenericIoDriver/Functions/readv.html",
    "title": "Overloads for - readv | Marmos Demo",
    "keywords": "Overloads for - readv Module juptune.event.io Parent PosixGenericIoDriver readv(buffers, bytesRead, timeout) Result readv( MemoryBlockAllocation buffers, size_t bytesRead, Duration timeout ) readv(buffers, bytesRead, timeout) Result readv( <bug: unknown> buffers, size_t bytesRead, Duration timeout )"
  },
  "juptune/juptune/event/io/PosixGenericIoDriver/Functions/recieve.html": {
    "href": "juptune/juptune/event/io/PosixGenericIoDriver/Functions/recieve.html",
    "title": "Overloads for - recieve | Marmos Demo",
    "keywords": "Overloads for - recieve Module juptune.event.io Parent PosixGenericIoDriver recieve(buffer, sliceWithData, timeout) Result recieve( <bug: unknown> buffer, <bug: unknown> sliceWithData, Duration timeout )"
  },
  "juptune/juptune/event/io/PosixGenericIoDriver/Functions/send.html": {
    "href": "juptune/juptune/event/io/PosixGenericIoDriver/Functions/send.html",
    "title": "Overloads for - send | Marmos Demo",
    "keywords": "Overloads for - send Module juptune.event.io Parent PosixGenericIoDriver send(buffer, bytesSent, timeout) Result send( <bug: unknown> buffer, size_t bytesSent, Duration timeout )"
  },
  "juptune/juptune/event/io/PosixGenericIoDriver/Functions/wrap.html": {
    "href": "juptune/juptune/event/io/PosixGenericIoDriver/Functions/wrap.html",
    "title": "Overloads for - wrap | Marmos Demo",
    "keywords": "Overloads for - wrap Module juptune.event.io Parent PosixGenericIoDriver wrap(fd) void wrap( int fd )"
  },
  "juptune/juptune/event/io/PosixGenericIoDriver/Functions/writev.html": {
    "href": "juptune/juptune/event/io/PosixGenericIoDriver/Functions/writev.html",
    "title": "Overloads for - writev | Marmos Demo",
    "keywords": "Overloads for - writev Module juptune.event.io Parent PosixGenericIoDriver writev(buffers, bytesRead, timeout) Result writev( MemoryBlockAllocation buffers, size_t bytesRead, Duration timeout ) writev(buffers, bytesRead, timeout) Result writev( <bug: unknown> buffers, size_t bytesRead, Duration timeout )"
  },
  "juptune/juptune/event/io/PosixTcpSocket/Functions/accept.html": {
    "href": "juptune/juptune/event/io/PosixTcpSocket/Functions/accept.html",
    "title": "Overloads for - accept | Marmos Demo",
    "keywords": "Overloads for - accept Module juptune.event.io Parent PosixTcpSocket accept(client) Result accept( TcpSocket client ) Accepts a client socket from a listening server socket. The client's ip address will be populated. Params client TcpSocket The resulting client. Throws Asserts that open has been called first. Anything thrown by juptuneEventLoopSubmitEvent . Returns A Result"
  },
  "juptune/juptune/event/io/PosixTcpSocket/Functions/connect.html": {
    "href": "juptune/juptune/event/io/PosixTcpSocket/Functions/connect.html",
    "title": "Overloads for - connect | Marmos Demo",
    "keywords": "Overloads for - connect Module juptune.event.io Parent PosixTcpSocket connect(address, lookupWasPerformed, defaultPort) Result connect( <bug: unknown> address, bool lookupWasPerformed, ushort defaultPort ) Connects to the target address. This overload is for convenience as it will call IpAddress.parse on address . This overload, if parsing of address fails, will attempt a DNS lookup to find the IP address instead. Params address <bug: unknown> The address to parse/lookup, and attempt to connect to. lookupWasPerformed bool Set to true if address wasn't a valid IP Address, and so triggered a DNS lookup. defaultPort ushort The default port used to connect to the address, if address does not specify one. Throws Asserts that open has been called first. Anything thrown by IpAddress.parse . Anything thrown by the main overload. Returns A Result connect(address) Result connect( IpAddress address ) Connects to the target address. The address is converted into an IPv6 address before the connection is attempted. Params address IpAddress The address to attempt to connect to. Throws Asserts that open has been called first. Any LinuxError thrown by libc's connect syscall. Returns A Result"
  },
  "juptune/juptune/event/io/PosixTcpSocket/Functions/ip.html": {
    "href": "juptune/juptune/event/io/PosixTcpSocket/Functions/ip.html",
    "title": "Overloads for - ip | Marmos Demo",
    "keywords": "Overloads for - ip Module juptune.event.io Parent PosixTcpSocket ip() IpAddress ip( ) The IP address of this socket. Note that this can sometimes be IpAddress.init , even for open sockets. Returns This socket's IpAddress ."
  },
  "juptune/juptune/event/io/PosixTcpSocket/Functions/listen.html": {
    "href": "juptune/juptune/event/io/PosixTcpSocket/Functions/listen.html",
    "title": "Overloads for - listen | Marmos Demo",
    "keywords": "Overloads for - listen Module juptune.event.io Parent PosixTcpSocket listen(address, backlog, defaultPort) Result listen( <bug: unknown> address, uint backlog, ushort defaultPort ) Binds the socket to an address, and begins listening for connections. This overload is for convenience, as it will call IpAddress.parse on the given address . Params address <bug: unknown> The IP address string to parse, and listen for connections on. backlog uint The suggested size of the accept backlog. defaultPort ushort The port to listen to if address doesn't contain one. Throws Asserts that open has been called first. Anything thrown by IpAddress.parse . Anything thrown by the main overload. Returns A Result listen(address, backlog) Result listen( IpAddress address, uint backlog ) Binds the socket to an address, and begins listening for connections. Note that address will be converted into an IPv6 address before listening starts. Note that io_uring currently doesn't provide a listen or bind command, so the syscalls are immediately made. Params address IpAddress The address to listen for connections on. backlog uint The suggested size of the accept backlog. Throws Asserts that open has been called first. Any LinuxError thrown by libc's bind . Any LinuxError thrown by libc's listen . Anything thrown by yield . Returns A Result"
  },
  "juptune/juptune/event/io/PosixTcpSocket/Functions/makePair.html": {
    "href": "juptune/juptune/event/io/PosixTcpSocket/Functions/makePair.html",
    "title": "Overloads for - makePair | Marmos Demo",
    "keywords": "Overloads for - makePair Module juptune.event.io Parent PosixTcpSocket makePair(sockets) Result makePair( <bug: unknown> sockets ) static"
  },
  "juptune/juptune/event/io/PosixTcpSocket/Functions/open.html": {
    "href": "juptune/juptune/event/io/PosixTcpSocket/Functions/open.html",
    "title": "Overloads for - open | Marmos Demo",
    "keywords": "Overloads for - open Module juptune.event.io Parent PosixTcpSocket open() Result open( ) Creates the underlying socket. The following options are enabled: REUSEPORT ; REUSEADDR ; KEEPALIVE . The socket is created a dual-stack IPv4-IPv6 socket. Throws Asserts that the socket isn't already open. Any LinuxError reported by the socket syscall. Anything thrown by yield . Returns A Result"
  },
  "juptune/juptune/event/io/Structs/GenericIoDriver.html": {
    "href": "juptune/juptune/event/io/Structs/GenericIoDriver.html",
    "title": "Struct - GenericIoDriver | Marmos Demo",
    "keywords": "Struct - GenericIoDriver Module juptune.event.io public struct GenericIoDriver { // Continues to read data into a buffer until no bytes are left to read. alias readAll = <todo: marmos support pending>; // Continues to read data into a buffer until no bytes are left to read. alias readAllGC = <todo: marmos support pending>; // Writes an entire buffer. Result put( <bug: unknown> buffer, Duration timeout ) ; } About Provides generic IO functionality. All platform-specific IO drivers will provide an alias this to this struct, so that all drivers have the same facilities for writing and reading. Aliases Name Description readAll Continues to read data into a buffer until no bytes are left to read. readAllGC Continues to read data into a buffer until no bytes are left to read. Functions Name Description put Writes an entire buffer."
  },
  "juptune/juptune/event/io/Structs/IpAddress.html": {
    "href": "juptune/juptune/event/io/Structs/IpAddress.html",
    "title": "Struct - IpAddress | Marmos Demo",
    "keywords": "Struct - IpAddress Module juptune.event.io public struct IpAddress { // The raw IPv4 address in network order. uint asIpv4( ) ; // The raw IPv6 address in network order. <bug: unknown> asIpv6( ) ; // void asSocketAddr( <bug: unknown> used, size_t usedLength, sockaddr_in ipv4, sockaddr_in6 ipv6 ) ; // Kind kind( ) ; // IpAddress mustParse( <bug: unknown> address, ushort defaultPort ) static; // Parses an IPv4 or IPv6 address string into an `IpAddress` object. Result parse( IpAddress ip, <bug: unknown> address, ushort defaultPort ) static; // Converts the current address into an IPv6 address. IpAddress toIpv6( ) ; // Creates a copy of this `IpAddress` with the given port. IpAddress withPort( ushort port ) ; // The port represented by the IP address. A value of 0 can mean either \"explicit 0\" or \"no port was provided\". ushort port; } About Non-IO helper structs Describe and IP address. Supports IPv4 and IPv6. Functions Name Description asIpv4 The raw IPv4 address in network order. asIpv6 The raw IPv6 address in network order. asSocketAddr kind mustParse parse Parses an IPv4 or IPv6 address string into an IpAddress object. toIpv6 Converts the current address into an IPv6 address. withPort Creates a copy of this IpAddress with the given port. Variables Name Description port The port represented by the IP address. A value of 0 can mean either \"explicit 0\" or \"no port was provided\"."
  },
  "juptune/juptune/event/io/Structs/PosixGenericIoDriver.html": {
    "href": "juptune/juptune/event/io/Structs/PosixGenericIoDriver.html",
    "title": "Struct - PosixGenericIoDriver | Marmos Demo",
    "keywords": "Struct - PosixGenericIoDriver Module juptune.event.io public struct PosixGenericIoDriver { // Result close( ) ; // bool isOpen( ) ; // Result readv( MemoryBlockAllocation buffers, size_t bytesRead, Duration timeout ) ; // Result readv( <bug: unknown> buffers, size_t bytesRead, Duration timeout ) ; // Result recieve( <bug: unknown> buffer, <bug: unknown> sliceWithData, Duration timeout ) ; // Result send( <bug: unknown> buffer, size_t bytesSent, Duration timeout ) ; // void wrap( int fd ) ; // Result writev( MemoryBlockAllocation buffers, size_t bytesRead, Duration timeout ) ; // Result writev( <bug: unknown> buffers, size_t bytesRead, Duration timeout ) ; // int fd; // __enumMember IOVEC_STATIC_SIZE; } Functions Name Description close isOpen readv recieve send wrap writev Variables Name Description fd IOVEC_STATIC_SIZE"
  },
  "juptune/juptune/event/io/Structs/PosixTcpSocket.html": {
    "href": "juptune/juptune/event/io/Structs/PosixTcpSocket.html",
    "title": "Struct - PosixTcpSocket | Marmos Demo",
    "keywords": "Struct - PosixTcpSocket Module juptune.event.io public struct PosixTcpSocket { // Accepts a client socket from a listening server socket. Result accept( TcpSocket client ) ; // Connects to the target address. Result connect( <bug: unknown> address, bool lookupWasPerformed, ushort defaultPort ) ; // Connects to the target address. Result connect( IpAddress address ) ; // The IP address of this socket. IpAddress ip( ) ; // Binds the socket to an address, and begins listening for connections. Result listen( <bug: unknown> address, uint backlog, ushort defaultPort ) ; // Binds the socket to an address, and begins listening for connections. Result listen( IpAddress address, uint backlog ) ; // Result makePair( <bug: unknown> sockets ) static; // Creates the underlying socket. Result open( ) ; } About Implementations A TcpSocket implementation that uses the standard POSIX socket functions for when io_uring doesn't provide a native opcode. When a function has to use a standard POSIX function instead of io_uring, it may block the thread. As with all IO Driver implementations, this struct inherits GenericIoDriver for common IO functions. See_Also GenericIoDriver Functions Name Description accept Accepts a client socket from a listening server socket. connect Connects to the target address. ip The IP address of this socket. listen Binds the socket to an address, and begins listening for connections. makePair open Creates the underlying socket."
  },
  "juptune/juptune/event/iouring/Functions/io_uring_enter.html": {
    "href": "juptune/juptune/event/iouring/Functions/io_uring_enter.html",
    "title": "Overloads for - io_uring_enter | Marmos Demo",
    "keywords": "Overloads for - io_uring_enter Module juptune.event.iouring io_uring_enter(fd, to_submit, min_complete, flags, sig) int io_uring_enter( int fd, uint to_submit, uint min_complete, uint flags, <bug: unknown> sig )"
  },
  "juptune/juptune/event/iouring/Functions/io_uring_register.html": {
    "href": "juptune/juptune/event/iouring/Functions/io_uring_register.html",
    "title": "Overloads for - io_uring_register | Marmos Demo",
    "keywords": "Overloads for - io_uring_register Module juptune.event.iouring io_uring_register(fd, opcode, arg, nr_args) int io_uring_register( int fd, uint opcode, <bug: unknown> arg, uint nr_args )"
  },
  "juptune/juptune/event/iouring/Functions/io_uring_setup.html": {
    "href": "juptune/juptune/event/iouring/Functions/io_uring_setup.html",
    "title": "Overloads for - io_uring_setup | Marmos Demo",
    "keywords": "Overloads for - io_uring_setup Module juptune.event.iouring io_uring_setup(entries, params) int io_uring_setup( uint entries, <bug: unknown> params )"
  },
  "juptune/juptune/event/iouring/IoUringConfig/Functions/withDriver.html": {
    "href": "juptune/juptune/event/iouring/IoUringConfig/Functions/withDriver.html",
    "title": "Overloads for - withDriver | Marmos Demo",
    "keywords": "Overloads for - withDriver Module juptune.event.iouring Parent IoUringConfig withDriver(driver) IoUringConfig withDriver( IoUringDriver driver )"
  },
  "juptune/juptune/event/iouring/IoUringConfig/Functions/withSqeEntryCount.html": {
    "href": "juptune/juptune/event/iouring/IoUringConfig/Functions/withSqeEntryCount.html",
    "title": "Overloads for - withSqeEntryCount | Marmos Demo",
    "keywords": "Overloads for - withSqeEntryCount Module juptune.event.iouring Parent IoUringConfig withSqeEntryCount(count) IoUringConfig withSqeEntryCount( uint count )"
  },
  "juptune/juptune/event/iouring/IoUringEmulatedPosixDriver/Functions/enter.html": {
    "href": "juptune/juptune/event/iouring/IoUringEmulatedPosixDriver/Functions/enter.html",
    "title": "Overloads for - enter | Marmos Demo",
    "keywords": "Overloads for - enter Module juptune.event.iouring Parent IoUringEmulatedPosixDriver enter(minCompletes) void enter( uint minCompletes )"
  },
  "juptune/juptune/event/iouring/IoUringEmulatedPosixDriver/Functions/initDriver.html": {
    "href": "juptune/juptune/event/iouring/IoUringEmulatedPosixDriver/Functions/initDriver.html",
    "title": "Overloads for - initDriver | Marmos Demo",
    "keywords": "Overloads for - initDriver Module juptune.event.iouring Parent IoUringEmulatedPosixDriver initDriver(config) Result initDriver( IoUringConfig config )"
  },
  "juptune/juptune/event/iouring/IoUringEmulatedPosixDriver/Functions/processCompletions.html": {
    "href": "juptune/juptune/event/iouring/IoUringEmulatedPosixDriver/Functions/processCompletions.html",
    "title": "Overloads for - processCompletions | Marmos Demo",
    "keywords": "Overloads for - processCompletions Module juptune.event.iouring Parent IoUringEmulatedPosixDriver processCompletions(handler) void processCompletions( <bug: unknown> handler )"
  },
  "juptune/juptune/event/iouring/IoUringEmulatedPosixDriver/Functions/uninitDriver.html": {
    "href": "juptune/juptune/event/iouring/IoUringEmulatedPosixDriver/Functions/uninitDriver.html",
    "title": "Overloads for - uninitDriver | Marmos Demo",
    "keywords": "Overloads for - uninitDriver Module juptune.event.iouring Parent IoUringEmulatedPosixDriver uninitDriver() void uninitDriver( )"
  },
  "juptune/juptune/event/iouring/IoUringNativeLinuxDriver/Functions/allocateNextSqe.html": {
    "href": "juptune/juptune/event/iouring/IoUringNativeLinuxDriver/Functions/allocateNextSqe.html",
    "title": "Overloads for - allocateNextSqe | Marmos Demo",
    "keywords": "Overloads for - allocateNextSqe Module juptune.event.iouring Parent IoUringNativeLinuxDriver allocateNextSqe() uint allocateNextSqe( )"
  },
  "juptune/juptune/event/iouring/IoUringNativeLinuxDriver/Functions/enableFeatures.html": {
    "href": "juptune/juptune/event/iouring/IoUringNativeLinuxDriver/Functions/enableFeatures.html",
    "title": "Overloads for - enableFeatures | Marmos Demo",
    "keywords": "Overloads for - enableFeatures Module juptune.event.iouring Parent IoUringNativeLinuxDriver enableFeatures() void enableFeatures( )"
  },
  "juptune/juptune/event/iouring/IoUringNativeLinuxDriver/Functions/enter.html": {
    "href": "juptune/juptune/event/iouring/IoUringNativeLinuxDriver/Functions/enter.html",
    "title": "Overloads for - enter | Marmos Demo",
    "keywords": "Overloads for - enter Module juptune.event.iouring Parent IoUringNativeLinuxDriver enter(minCompletes) void enter( uint minCompletes )"
  },
  "juptune/juptune/event/iouring/IoUringNativeLinuxDriver/Functions/freeSqe.html": {
    "href": "juptune/juptune/event/iouring/IoUringNativeLinuxDriver/Functions/freeSqe.html",
    "title": "Overloads for - freeSqe | Marmos Demo",
    "keywords": "Overloads for - freeSqe Module juptune.event.iouring Parent IoUringNativeLinuxDriver freeSqe(index) void freeSqe( uint index )"
  },
  "juptune/juptune/event/iouring/IoUringNativeLinuxDriver/Functions/initDriver.html": {
    "href": "juptune/juptune/event/iouring/IoUringNativeLinuxDriver/Functions/initDriver.html",
    "title": "Overloads for - initDriver | Marmos Demo",
    "keywords": "Overloads for - initDriver Module juptune.event.iouring Parent IoUringNativeLinuxDriver initDriver(config) Result initDriver( IoUringConfig config )"
  },
  "juptune/juptune/event/iouring/IoUringNativeLinuxDriver/Functions/processCompletions.html": {
    "href": "juptune/juptune/event/iouring/IoUringNativeLinuxDriver/Functions/processCompletions.html",
    "title": "Overloads for - processCompletions | Marmos Demo",
    "keywords": "Overloads for - processCompletions Module juptune.event.iouring Parent IoUringNativeLinuxDriver processCompletions(handler) void processCompletions( <bug: unknown> handler )"
  },
  "juptune/juptune/event/iouring/IoUringNativeLinuxDriver/Functions/uninitDriver.html": {
    "href": "juptune/juptune/event/iouring/IoUringNativeLinuxDriver/Functions/uninitDriver.html",
    "title": "Overloads for - uninitDriver | Marmos Demo",
    "keywords": "Overloads for - uninitDriver Module juptune.event.iouring Parent IoUringNativeLinuxDriver uninitDriver() void uninitDriver( )"
  },
  "juptune/juptune/event/iouring/Overview.html": {
    "href": "juptune/juptune/event/iouring/Overview.html",
    "title": "Module - juptune.event.iouring | Marmos Demo",
    "keywords": "Module - juptune.event.iouring Aliases Name Description FileDescriptor IoUringEmulatedDriver IoUringNativeDriver SubmitQueueIsFull A flag used to specify whether the submit queue is too full to submit anything else onto. Structs Name Description IoUring IoUringAccept Linux accept syscall IoUringClose Linux close syscall IoUringCompletion Describes a completion event. IoUringConfig Configuration for the io_uring driver IoUringEmulatedPosixDriver IoUringLinkTimeout IoUringNativeLinuxDriver IoUringNop Performs no operation. Mostly useful just for testing, or I guess forcing the fiber into a waiting state. IoUringReadv Linux readv syscall IoUringRecv Linux recv syscall IoUringSend Linux send syscall IoUringSendZeroCopy Linux sendzc syscall IoUringTimeoutUserData IoUringWritev Linux writev syscall MapBuffer MapField MapFlag timespec64 Functions Name Description io_uring_enter io_uring_register io_uring_setup"
  },
  "juptune/juptune/event/iouring/Structs/IoUring.html": {
    "href": "juptune/juptune/event/iouring/Structs/IoUring.html",
    "title": "Struct - IoUring | Marmos Demo",
    "keywords": "Struct - IoUring Module juptune.event.iouring public struct IoUring { // IoUringDriver driver; // Drivers drivers; } Variables Name Description driver drivers"
  },
  "juptune/juptune/event/iouring/Structs/IoUringAccept.html": {
    "href": "juptune/juptune/event/iouring/Structs/IoUringAccept.html",
    "title": "Struct - IoUringAccept | Marmos Demo",
    "keywords": "Struct - IoUringAccept Module juptune.event.iouring public struct IoUringAccept { // <bug: unknown> addr; // <bug: unknown> addrlen; // FileDescriptor fd; } About Linux accept syscall Variables Name Description addr addrlen fd"
  },
  "juptune/juptune/event/iouring/Structs/IoUringClose.html": {
    "href": "juptune/juptune/event/iouring/Structs/IoUringClose.html",
    "title": "Struct - IoUringClose | Marmos Demo",
    "keywords": "Struct - IoUringClose Module juptune.event.iouring public struct IoUringClose { // FileDescriptor fd; } About Linux close syscall Variables Name Description fd"
  },
  "juptune/juptune/event/iouring/Structs/IoUringCompletion.html": {
    "href": "juptune/juptune/event/iouring/Structs/IoUringCompletion.html",
    "title": "Struct - IoUringCompletion | Marmos Demo",
    "keywords": "Struct - IoUringCompletion Module juptune.event.iouring public struct IoUringCompletion { // Any additional flags relevant to the command. uint flags; // A static completion who's intention is to be used when you have to accept a CQE, but don't really care about its result. static IoUringCompletion ignore; // Ignore for now: still debating whether this is a good idea or not. JuptuneFlags juptuneFlags; // The result of the command int result; // The user data from the source SQE <bug: unknown> userData; } About Describes a completion event. Variables Name Description flags Any additional flags relevant to the command. ignore A static completion who's intention is to be used when you have to accept a CQE, but don't really care about its result. juptuneFlags Ignore for now: still debating whether this is a good idea or not. result The result of the command userData The user data from the source SQE"
  },
  "juptune/juptune/event/iouring/Structs/IoUringConfig.html": {
    "href": "juptune/juptune/event/iouring/Structs/IoUringConfig.html",
    "title": "Struct - IoUringConfig | Marmos Demo",
    "keywords": "Struct - IoUringConfig Module juptune.event.iouring public struct IoUringConfig { // IoUringConfig withDriver( IoUringDriver driver ) ; // IoUringConfig withSqeEntryCount( uint count ) ; // Which driver to use. IoUringDriver driver; // How many SQEs to create. Note that for the Linux-native drive, 4096 is the max. uint sqeEntryCount; } About Configuration for the io_uring driver This configuration is tailored for the native Linux io_uring driver, as that's the main target. Functions Name Description withDriver withSqeEntryCount Variables Name Description driver Which driver to use. sqeEntryCount How many SQEs to create. Note that for the Linux-native drive, 4096 is the max."
  },
  "juptune/juptune/event/iouring/Structs/IoUringEmulatedPosixDriver.html": {
    "href": "juptune/juptune/event/iouring/Structs/IoUringEmulatedPosixDriver.html",
    "title": "Struct - IoUringEmulatedPosixDriver | Marmos Demo",
    "keywords": "Struct - IoUringEmulatedPosixDriver Module juptune.event.iouring public struct IoUringEmulatedPosixDriver { // void enter( uint minCompletes ) ; // Result initDriver( IoUringConfig config ) ; // void processCompletions( <bug: unknown> handler ) ; // void uninitDriver( ) ; } Functions Name Description enter initDriver processCompletions uninitDriver"
  },
  "juptune/juptune/event/iouring/Structs/IoUringLinkTimeout.html": {
    "href": "juptune/juptune/event/iouring/Structs/IoUringLinkTimeout.html",
    "title": "Struct - IoUringLinkTimeout | Marmos Demo",
    "keywords": "Struct - IoUringLinkTimeout Module juptune.event.iouring public struct IoUringLinkTimeout { // <bug: unknown> timeout; } Variables Name Description timeout"
  },
  "juptune/juptune/event/iouring/Structs/IoUringNativeLinuxDriver.html": {
    "href": "juptune/juptune/event/iouring/Structs/IoUringNativeLinuxDriver.html",
    "title": "Struct - IoUringNativeLinuxDriver | Marmos Demo",
    "keywords": "Struct - IoUringNativeLinuxDriver Module juptune.event.iouring public struct IoUringNativeLinuxDriver { // uint allocateNextSqe( ) ; // void enableFeatures( ) ; // void enter( uint minCompletes ) ; // void freeSqe( uint index ) ; // Result initDriver( IoUringConfig config ) ; // void processCompletions( <bug: unknown> handler ) ; // void uninitDriver( ) ; // IoUringConfig config; // <bug: unknown> cqeSlice; // <bug: unknown> cqPtr; // int ioUringFd; // io_uring_params ioUringParams; // uint pendingSubmits; // <bug: unknown> sqeIndexSlice; // <bug: unknown> sqeInUseMasks; // <bug: unknown> sqeSlice; // <bug: unknown> sqPtr; // <bug: unknown> timeoutUserData; } Aliases Name Description _submitImplTest _submitTest _submitTimeoutTest Functions Name Description allocateNextSqe enableFeatures enter freeSqe initDriver processCompletions uninitDriver Variables Name Description config cqeSlice cqPtr ioUringFd ioUringParams pendingSubmits sqeIndexSlice sqeInUseMasks sqeSlice sqPtr timeoutUserData"
  },
  "juptune/juptune/event/iouring/Structs/IoUringNop.html": {
    "href": "juptune/juptune/event/iouring/Structs/IoUringNop.html",
    "title": "Struct - IoUringNop | Marmos Demo",
    "keywords": "Struct - IoUringNop Module juptune.event.iouring public struct IoUringNop { } About Performs no operation. Mostly useful just for testing, or I guess forcing the fiber into a waiting state."
  },
  "juptune/juptune/event/iouring/Structs/IoUringReadv.html": {
    "href": "juptune/juptune/event/iouring/Structs/IoUringReadv.html",
    "title": "Struct - IoUringReadv | Marmos Demo",
    "keywords": "Struct - IoUringReadv Module juptune.event.iouring public struct IoUringReadv { // FileDescriptor fd; // <bug: unknown> iovecs; } About Linux readv syscall Variables Name Description fd iovecs"
  },
  "juptune/juptune/event/iouring/Structs/IoUringRecv.html": {
    "href": "juptune/juptune/event/iouring/Structs/IoUringRecv.html",
    "title": "Struct - IoUringRecv | Marmos Demo",
    "keywords": "Struct - IoUringRecv Module juptune.event.iouring public struct IoUringRecv { // <bug: unknown> buffer; // FileDescriptor fd; } About Linux recv syscall Variables Name Description buffer fd"
  },
  "juptune/juptune/event/iouring/Structs/IoUringSend.html": {
    "href": "juptune/juptune/event/iouring/Structs/IoUringSend.html",
    "title": "Struct - IoUringSend | Marmos Demo",
    "keywords": "Struct - IoUringSend Module juptune.event.iouring public struct IoUringSend { // <bug: unknown> buffer; // FileDescriptor fd; } About Linux send syscall Variables Name Description buffer fd"
  },
  "juptune/juptune/event/iouring/Structs/IoUringSendZeroCopy.html": {
    "href": "juptune/juptune/event/iouring/Structs/IoUringSendZeroCopy.html",
    "title": "Struct - IoUringSendZeroCopy | Marmos Demo",
    "keywords": "Struct - IoUringSendZeroCopy Module juptune.event.iouring public struct IoUringSendZeroCopy { // <bug: unknown> buffer; // FileDescriptor fd; } About Linux sendzc syscall Variables Name Description buffer fd"
  },
  "juptune/juptune/event/iouring/Structs/IoUringTimeoutUserData.html": {
    "href": "juptune/juptune/event/iouring/Structs/IoUringTimeoutUserData.html",
    "title": "Struct - IoUringTimeoutUserData | Marmos Demo",
    "keywords": "Struct - IoUringTimeoutUserData Module juptune.event.iouring public struct IoUringTimeoutUserData { // timespec64 timeout; } Variables Name Description timeout"
  },
  "juptune/juptune/event/iouring/Structs/IoUringWritev.html": {
    "href": "juptune/juptune/event/iouring/Structs/IoUringWritev.html",
    "title": "Struct - IoUringWritev | Marmos Demo",
    "keywords": "Struct - IoUringWritev Module juptune.event.iouring public struct IoUringWritev { // FileDescriptor fd; // <bug: unknown> iovecs; } About Linux writev syscall Variables Name Description fd iovecs"
  },
  "juptune/juptune/event/iouring/Structs/MapBuffer.html": {
    "href": "juptune/juptune/event/iouring/Structs/MapBuffer.html",
    "title": "Struct - MapBuffer | Marmos Demo",
    "keywords": "Struct - MapBuffer Module juptune.event.iouring public struct MapBuffer { }"
  },
  "juptune/juptune/event/iouring/Structs/MapField.html": {
    "href": "juptune/juptune/event/iouring/Structs/MapField.html",
    "title": "Struct - MapField | Marmos Demo",
    "keywords": "Struct - MapField Module juptune.event.iouring public struct MapField { // string sqeFieldName; } Variables Name Description sqeFieldName"
  },
  "juptune/juptune/event/iouring/Structs/MapFlag.html": {
    "href": "juptune/juptune/event/iouring/Structs/MapFlag.html",
    "title": "Struct - MapFlag | Marmos Demo",
    "keywords": "Struct - MapFlag Module juptune.event.iouring public struct MapFlag { // uint mask; // string sqeFieldName; } Variables Name Description mask sqeFieldName"
  },
  "juptune/juptune/event/iouring/Structs/timespec64.html": {
    "href": "juptune/juptune/event/iouring/Structs/timespec64.html",
    "title": "Struct - timespec64 | Marmos Demo",
    "keywords": "Struct - timespec64 Module juptune.event.iouring public struct timespec64 { // c_long tv_nsec; // c_long tv_sec; } Variables Name Description tv_nsec tv_sec"
  },
  "juptune/juptune/event/loop/CancelToken/Functions/cancel.html": {
    "href": "juptune/juptune/event/loop/CancelToken/Functions/cancel.html",
    "title": "Overloads for - cancel | Marmos Demo",
    "keywords": "Overloads for - cancel Module juptune.event.loop Parent CancelToken cancel() void cancel( )"
  },
  "juptune/juptune/event/loop/CancelToken/Functions/isCancelled.html": {
    "href": "juptune/juptune/event/loop/CancelToken/Functions/isCancelled.html",
    "title": "Overloads for - isCancelled | Marmos Demo",
    "keywords": "Overloads for - isCancelled Module juptune.event.loop Parent CancelToken isCancelled() bool isCancelled( )"
  },
  "juptune/juptune/event/loop/EventLoop/Functions/addGCThread.html": {
    "href": "juptune/juptune/event/loop/EventLoop/Functions/addGCThread.html",
    "title": "Overloads for - addGCThread | Marmos Demo",
    "keywords": "Overloads for - addGCThread Module juptune.event.loop Parent EventLoop addGCThread(initialFiber) void addGCThread( JuptuneFiber initialFiber ) Creates a new thread. The thread is started immediately. The thread is managed by the DRuntime, so it can be paused by the GC. However this means you are free to use the GC within this thread, and are not restricted to @nogc fibers. Please refer to the repo's documentation for any further info, as it's a bit too cumbersome for a source code comment. Params initialFiber JuptuneFiber The initial fiber to run within the thread."
  },
  "juptune/juptune/event/loop/EventLoop/Functions/addNoGCThread.html": {
    "href": "juptune/juptune/event/loop/EventLoop/Functions/addNoGCThread.html",
    "title": "Overloads for - addNoGCThread | Marmos Demo",
    "keywords": "Overloads for - addNoGCThread Module juptune.event.loop Parent EventLoop addNoGCThread(initialFiber) void addNoGCThread( JuptuneFiber initialFiber ) Creates a new thread that is specifically for @nogc code. The thread is started immediately. The thread is not managed by the DRuntime, so it is free from being paused by the GC. However please note that this means pointers into GC memory should never be present in the thread, as the GC does not scan any of the memory used by the thread. You are also limited to @nogc fibers. Attempting to start an @gc fiber will fail an assert. Please refer to the repo's documentation for any further info, as it's a bit too cumbersome for a source code comment. Params initialFiber JuptuneFiber The initial fiber to run within the thread."
  },
  "juptune/juptune/event/loop/EventLoop/Functions/cancelAllThreads.html": {
    "href": "juptune/juptune/event/loop/EventLoop/Functions/cancelAllThreads.html",
    "title": "Overloads for - cancelAllThreads | Marmos Demo",
    "keywords": "Overloads for - cancelAllThreads Module juptune.event.loop Parent EventLoop cancelAllThreads() void cancelAllThreads( ) Cancels all active threads. See_Also juptuneEventLoopCancelThread for information on what canceling entails."
  },
  "juptune/juptune/event/loop/EventLoop/Functions/join.html": {
    "href": "juptune/juptune/event/loop/EventLoop/Functions/join.html",
    "title": "Overloads for - join | Marmos Demo",
    "keywords": "Overloads for - join Module juptune.event.loop Parent EventLoop join() void join( ) Blocks the current thread until all threads have finished. It should go without saying since this function isn't shared , but this function is not thread-safe. Throws If an @gc thread for some reason throws an uncaught exception, an assert will fail. This shouldn't happen unless you somehow bypass the fact that fibers are nothrow ."
  },
  "juptune/juptune/event/loop/EventLoopConfig/Functions/withFiberAllocatorConfig.html": {
    "href": "juptune/juptune/event/loop/EventLoopConfig/Functions/withFiberAllocatorConfig.html",
    "title": "Overloads for - withFiberAllocatorConfig | Marmos Demo",
    "keywords": "Overloads for - withFiberAllocatorConfig Module juptune.event.loop Parent EventLoopConfig withFiberAllocatorConfig(conf) EventLoopConfig withFiberAllocatorConfig( FiberAllocatorConfig conf )"
  },
  "juptune/juptune/event/loop/EventLoopConfig/Functions/withIoUringConfig.html": {
    "href": "juptune/juptune/event/loop/EventLoopConfig/Functions/withIoUringConfig.html",
    "title": "Overloads for - withIoUringConfig | Marmos Demo",
    "keywords": "Overloads for - withIoUringConfig Module juptune.event.loop Parent EventLoopConfig withIoUringConfig(conf) EventLoopConfig withIoUringConfig( IoUringConfig conf )"
  },
  "juptune/juptune/event/loop/EventLoopConfig/Functions/withSigtermHandler.html": {
    "href": "juptune/juptune/event/loop/EventLoopConfig/Functions/withSigtermHandler.html",
    "title": "Overloads for - withSigtermHandler | Marmos Demo",
    "keywords": "Overloads for - withSigtermHandler Module juptune.event.loop Parent EventLoopConfig withSigtermHandler(value) EventLoopConfig withSigtermHandler( bool value )"
  },
  "juptune/juptune/event/loop/Functions/async.html": {
    "href": "juptune/juptune/event/loop/Functions/async.html",
    "title": "Overloads for - async | Marmos Demo",
    "keywords": "Overloads for - async Module juptune.event.loop async(func, config) Result async( JuptuneFiber func, AsyncConfig config ) Creates an async fiber, and schedules it to run on the next event loop tick. Async fibers are fibers that run on the current event loop thread, and so are safe to make use of thread local storage and other thread local techniques. This overload doesn't create a user context. Params func JuptuneFiber The function to call into once the fiber is started. config AsyncConfig The configuration used for launching the fiber. Throws (For the @gc overload) Asserts that this event loop thread is a GC thread. Anything that FiberAllocator.allocateFiber throws. async(func, config) Result async( JuptuneFiber func, AsyncConfig config ) ditto async(func, context, setter, config) Result async( JuptuneFiber func, ContextT context, <bug: unknown> setter, AsyncConfig config ) Creates an async fiber, and schedules it to run on the next event loop tick. Async fibers are fibers that run on the current event loop thread, and so are safe to make use of thread local storage and other thread local techniques. This overload creates a user context, allowing you to make additional data available to the fiber. As a technical side note: the user context is stored at the very top of the fiber's stack which shouldn't cause issues. The setter function is responsible for setting up the user context memory to best reflect the given context . Please see asyncDefaultSetter and asyncMoveSetter to see what your options are. The user context will have its __xdtor called when the fiber finishes. The user context can be accessed by the fiber by calling juptuneEventLoopGetContext . D doesn't really have a way to prevent you from passing through a stack point as user context. Do such a thing at your own risk. Params func JuptuneFiber The function to call into once the fiber is started. context ContextT The user context. setter <bug: unknown> The function used to setup the user context in its shared memory location. config AsyncConfig The configuration used for launching the fiber. Throws (For the @gc overload) Asserts that this event loop thread is a GC thread. Anything that FiberAllocator.allocateFiber throws. See_Also juptuneEventLoopGetContext , asyncDefaultSetter , asyncMoveSetter async(func, context, setter, config) Result async( JuptuneFiber func, ContextT context, <bug: unknown> setter, AsyncConfig config ) ditto"
  },
  "juptune/juptune/event/loop/Functions/asyncDefaultSetter.html": {
    "href": "juptune/juptune/event/loop/Functions/asyncDefaultSetter.html",
    "title": "Overloads for - asyncDefaultSetter | Marmos Demo",
    "keywords": "Overloads for - asyncDefaultSetter Module juptune.event.loop asyncDefaultSetter(a, b) void asyncDefaultSetter( ContextT a, ContextT b ) The default setter. Simply tries to do b = a . Throws Asserts that ContextT is a copyable type."
  },
  "juptune/juptune/event/loop/Functions/asyncMoveSetter.html": {
    "href": "juptune/juptune/event/loop/Functions/asyncMoveSetter.html",
    "title": "Overloads for - asyncMoveSetter | Marmos Demo",
    "keywords": "Overloads for - asyncMoveSetter Module juptune.event.loop asyncMoveSetter(a, b) void asyncMoveSetter( ContextT a, ContextT b ) A setter that uses std.algorithm.move to perform a move operation into the user context's shared memory location. This is best to use for types that are non-copyable, e.g. TcpSocket . This, being a move operation, will of course mean your source input will be reverted to .init without having its dtor called. Please note that as with any move operation, be very careful if your context contains an internal pointer."
  },
  "juptune/juptune/event/loop/Functions/asyncNoContextImpl.html": {
    "href": "juptune/juptune/event/loop/Functions/asyncNoContextImpl.html",
    "title": "Overloads for - asyncNoContextImpl | Marmos Demo",
    "keywords": "Overloads for - asyncNoContextImpl Module juptune.event.loop asyncNoContextImpl(func, config) Result asyncNoContextImpl( EntryPointT func, AsyncConfig config )"
  },
  "juptune/juptune/event/loop/Functions/asyncWithContextImpl.html": {
    "href": "juptune/juptune/event/loop/Functions/asyncWithContextImpl.html",
    "title": "Overloads for - asyncWithContextImpl | Marmos Demo",
    "keywords": "Overloads for - asyncWithContextImpl Module juptune.event.loop asyncWithContextImpl(func, context, setter, config) Result asyncWithContextImpl( EntryPointT func, ContextT context, <bug: unknown> setter, AsyncConfig config )"
  },
  "juptune/juptune/event/loop/Functions/juptuneEventLoopCancelAllThreads.html": {
    "href": "juptune/juptune/event/loop/Functions/juptuneEventLoopCancelAllThreads.html",
    "title": "Overloads for - juptuneEventLoopCancelAllThreads | Marmos Demo",
    "keywords": "Overloads for - juptuneEventLoopCancelAllThreads Module juptune.event.loop juptuneEventLoopCancelAllThreads() void juptuneEventLoopCancelAllThreads( ) Cancels all threads in the event loop. Please see juptuneEventLoopCancelThread for more specifics on what canceling a thread entails. See_Also juptuneEventLoopCancelThread , juptuneEventLoopIsthreadCanceled , yield"
  },
  "juptune/juptune/event/loop/Functions/juptuneEventLoopCancelThread.html": {
    "href": "juptune/juptune/event/loop/Functions/juptuneEventLoopCancelThread.html",
    "title": "Overloads for - juptuneEventLoopCancelThread | Marmos Demo",
    "keywords": "Overloads for - juptuneEventLoopCancelThread Module juptune.event.loop juptuneEventLoopCancelThread() void juptuneEventLoopCancelThread( ) Cancels the current event loop thread. More specifically, canceling a thread means that juptuneEventLoopIsThreadCanceled will now return true , and it will also cause functions like yield to start returning a Result that contains an error. Canceling is intended for when the thread needs to gracefully shutdown ASAP. Application code should currently refrain from attempting to perform any action that generates an io_uring event, as it may be dropped or completely ignored. The exact behaviour of canceling threads is in a bit of development limbo right now, so try to not make too many assumptions on what you're allowed to do. I hope to properly refine this over time into something more exact. See_Also juptuneEventLoopCancelAllThreads , juptuneEventLoopIsthreadCanceled , yield"
  },
  "juptune/juptune/event/loop/Functions/juptuneEventLoopGetContext.html": {
    "href": "juptune/juptune/event/loop/Functions/juptuneEventLoopGetContext.html",
    "title": "Overloads for - juptuneEventLoopGetContext | Marmos Demo",
    "keywords": "Overloads for - juptuneEventLoopGetContext Module juptune.event.loop juptuneEventLoopGetContext() <bug: unknown> juptuneEventLoopGetContext( ) Accesses the current fibers's user context. When you use the contextful async overload it creates a user context in the fiber. This function is how you access the user context. This function is type safe as it uses TypeInfo to enforce the user context is the type you expect it to be. Currently I consider it a bug for there to be a mismatch, as it makes no sense to me to optionally support a user context, so this is enforced with an assert . Throws Asserts that ContextT is the same type that was passed into the async function. Asserts that a user context exists for this fiber. Returns A pointer to the user context."
  },
  "juptune/juptune/event/loop/Functions/juptuneEventLoopGetLastCompletion.html": {
    "href": "juptune/juptune/event/loop/Functions/juptuneEventLoopGetLastCompletion.html",
    "title": "Overloads for - juptuneEventLoopGetLastCompletion | Marmos Demo",
    "keywords": "Overloads for - juptuneEventLoopGetLastCompletion Module juptune.event.loop juptuneEventLoopGetLastCompletion() IoUringCompletion juptuneEventLoopGetLastCompletion( )"
  },
  "juptune/juptune/event/loop/Functions/juptuneEventLoopGetStats.html": {
    "href": "juptune/juptune/event/loop/Functions/juptuneEventLoopGetStats.html",
    "title": "Overloads for - juptuneEventLoopGetStats | Marmos Demo",
    "keywords": "Overloads for - juptuneEventLoopGetStats Module juptune.event.loop juptuneEventLoopGetStats() <bug: unknown> juptuneEventLoopGetStats( ) Accesses the current event loop's EventLoopThreadStats . This is a pointer to the live underlying data, so will always be up to date. Returns A pointer to the event loop's EventLoopThreadStats ."
  },
  "juptune/juptune/event/loop/Functions/juptuneEventLoopIsThreadCanceled.html": {
    "href": "juptune/juptune/event/loop/Functions/juptuneEventLoopIsThreadCanceled.html",
    "title": "Overloads for - juptuneEventLoopIsThreadCanceled | Marmos Demo",
    "keywords": "Overloads for - juptuneEventLoopIsThreadCanceled Module juptune.event.loop juptuneEventLoopIsThreadCanceled() bool juptuneEventLoopIsThreadCanceled( ) Determines if the current thread has been canceled. It's best practice to write your code in a way that supports gracefully exiting, especially when explicitly requested from a thread being canceled. There's some mechanisms in place to encourage this, such as yield -like functions returning an error-containing Result when a thread is canceled, however sometimes manually checking the state of the thread's cancel status is desirable. Returns true if the thread has been canceled, false otherwise."
  },
  "juptune/juptune/event/loop/Functions/juptuneEventLoopSubmitEvent.html": {
    "href": "juptune/juptune/event/loop/Functions/juptuneEventLoopSubmitEvent.html",
    "title": "Overloads for - juptuneEventLoopSubmitEvent | Marmos Demo",
    "keywords": "Overloads for - juptuneEventLoopSubmitEvent Module juptune.event.loop juptuneEventLoopSubmitEvent(command, cqe, config) Result juptuneEventLoopSubmitEvent( Command command, IoUringCompletion cqe, SubmitEventConfig config ) Submits an event to be processed asynchronously. Note that the Command type should be any of the IoUringXXX structs found in juptune.event.iouring , for example IoUringAccept . By default the fiber will be suspended until a completion is generated. If you disable yielding via SubmitEventConfig.yieldUntilComplete then the fiber will continue directly after calling this function, however there is currently no mechanism to observe the completion, or if a completion is even generated. You can use IoUringCompletion.ignore for the cqe parameter if you disable yielding, or if you don't care about the completion at all. You can specify a timeout via SubmitEventConfig.timeout . If the timeout is exceeded then the operation will attempt to be canceled, likely causing an error result to be returned. This can be detected by calling Result.isError(LinuxError.cancelled) on the returned result object. Definitely a lot of work left around this area, but for now this should be useable. Generally most users don't need to actually use this function, as it should be wrapped inside a more high-level struct, such as TcpSocket . This function will continously yield, regardless of configuration, if the submission queue is too full. Params command Command The command to submit to io_uring cqe IoUringCompletion The resulting completion. This is only set if the fiber waits for completion. config SubmitEventConfig The configuration for submitting the event. Throws Anything that yield throws."
  },
  "juptune/juptune/event/loop/Functions/juptuneLoopThreadAsyncYield.html": {
    "href": "juptune/juptune/event/loop/Functions/juptuneLoopThreadAsyncYield.html",
    "title": "Overloads for - juptuneLoopThreadAsyncYield | Marmos Demo",
    "keywords": "Overloads for - juptuneLoopThreadAsyncYield Module juptune.event.loop juptuneLoopThreadAsyncYield() void juptuneLoopThreadAsyncYield( )"
  },
  "juptune/juptune/event/loop/Functions/juptuneLoopThreadGetFiberCount.html": {
    "href": "juptune/juptune/event/loop/Functions/juptuneLoopThreadGetFiberCount.html",
    "title": "Overloads for - juptuneLoopThreadGetFiberCount | Marmos Demo",
    "keywords": "Overloads for - juptuneLoopThreadGetFiberCount Module juptune.event.loop juptuneLoopThreadGetFiberCount() size_t juptuneLoopThreadGetFiberCount( )"
  },
  "juptune/juptune/event/loop/Functions/juptuneLoopThreadGetThis.html": {
    "href": "juptune/juptune/event/loop/Functions/juptuneLoopThreadGetThis.html",
    "title": "Overloads for - juptuneLoopThreadGetThis | Marmos Demo",
    "keywords": "Overloads for - juptuneLoopThreadGetThis Module juptune.event.loop juptuneLoopThreadGetThis() <bug: unknown> juptuneLoopThreadGetThis( )"
  },
  "juptune/juptune/event/loop/Functions/loopThreadMain.html": {
    "href": "juptune/juptune/event/loop/Functions/loopThreadMain.html",
    "title": "Overloads for - loopThreadMain | Marmos Demo",
    "keywords": "Overloads for - loopThreadMain Module juptune.event.loop loopThreadMain(loopThread) void loopThreadMain( <bug: unknown> loopThread )"
  },
  "juptune/juptune/event/loop/Functions/loopThreadOnAfterFiberSwap.html": {
    "href": "juptune/juptune/event/loop/Functions/loopThreadOnAfterFiberSwap.html",
    "title": "Overloads for - loopThreadOnAfterFiberSwap | Marmos Demo",
    "keywords": "Overloads for - loopThreadOnAfterFiberSwap Module juptune.event.loop loopThreadOnAfterFiberSwap(fiber) void loopThreadOnAfterFiberSwap( <bug: unknown> fiber )"
  },
  "juptune/juptune/event/loop/Functions/yield.html": {
    "href": "juptune/juptune/event/loop/Functions/yield.html",
    "title": "Overloads for - yield | Marmos Demo",
    "keywords": "Overloads for - yield Module juptune.event.loop yield() Result yield( ) Manually yields the current fiber so that other fibers can be ran. Since yielded fibers aren't waiting for IO to complete, the event loop thread will not sleep while there are manually yielded fibers waiting to be woken up. This means that the event loop thread will keep spinning its CPU usage. If you need/want to delay execution of the fiber then please use the (not currently implemented!) yieldSleep function instead. This will allow the event loop thread to sleep, easing CPU usage. Throws JuptuneEventLoopError.threadWasCanceled if the thread has been canceled. This is not an actual error, but is simply used as a mechanism to encourage you to write code that can gracefully exit instead of relying on .resultAssert Returns A Result"
  },
  "juptune/juptune/event/loop/Overview.html": {
    "href": "juptune/juptune/event/loop/Overview.html",
    "title": "Module - juptune.event.loop | Marmos Demo",
    "keywords": "Module - juptune.event.loop Aliases Name Description YieldUntilCompletion See yield Structs Name Description AsyncConfig Configuration for creating an async fiber CancelToken EventLoop Event loop EventLoopConfig Configuration for an EventLoop EventLoopThreadStats A simple struct used to track certain stats of the EventLoop. LoopThread SubmitEventConfig Configuration for submitting an event Functions Name Description async Creates an async fiber, and schedules it to run on the next event loop tick. asyncDefaultSetter The default setter. Simply tries to do b = a . asyncMoveSetter A setter that uses std.algorithm.move to perform a move operation into the user context's shared memory location. asyncNoContextImpl asyncWithContextImpl juptuneEventLoopCancelAllThreads Cancels all threads in the event loop. juptuneEventLoopCancelThread Cancels the current event loop thread. juptuneEventLoopGetContext Accesses the current fibers's user context. juptuneEventLoopGetLastCompletion juptuneEventLoopGetStats Accesses the current event loop's EventLoopThreadStats . juptuneEventLoopIsThreadCanceled Determines if the current thread has been canceled. juptuneEventLoopSubmitEvent Submits an event to be processed asynchronously. juptuneLoopThreadAsyncYield juptuneLoopThreadGetFiberCount juptuneLoopThreadGetThis loopThreadMain loopThreadOnAfterFiberSwap yield Manually yields the current fiber so that other fibers can be ran. Variables Name Description g_thisLoopThread Event thread USER_DATA_IGNORE Configuration"
  },
  "juptune/juptune/event/loop/Structs/AsyncConfig.html": {
    "href": "juptune/juptune/event/loop/Structs/AsyncConfig.html",
    "title": "Struct - AsyncConfig | Marmos Demo",
    "keywords": "Struct - AsyncConfig Module juptune.event.loop public struct AsyncConfig { } About Configuration for creating an async fiber"
  },
  "juptune/juptune/event/loop/Structs/CancelToken.html": {
    "href": "juptune/juptune/event/loop/Structs/CancelToken.html",
    "title": "Struct - CancelToken | Marmos Demo",
    "keywords": "Struct - CancelToken Module juptune.event.loop public struct CancelToken { // void cancel( ) ; // bool isCancelled( ) ; } Functions Name Description cancel isCancelled"
  },
  "juptune/juptune/event/loop/Structs/EventLoop.html": {
    "href": "juptune/juptune/event/loop/Structs/EventLoop.html",
    "title": "Struct - EventLoop | Marmos Demo",
    "keywords": "Struct - EventLoop Module juptune.event.loop public struct EventLoop { // Creates a new thread. void addGCThread( JuptuneFiber initialFiber ) ; // Creates a new thread that is specifically for @nogc code. void addNoGCThread( JuptuneFiber initialFiber ) ; // Cancels all active threads. void cancelAllThreads( ) ; // Blocks the current thread until all threads have finished. void join( ) ; // __gshared bool g_sigtermLock; } About Event loop Provides an EventLoop. Please see the repo's documentation for more information about the event loop and how it works. Multiple event loops may exist per thread. Functions Name Description addGCThread Creates a new thread. addNoGCThread Creates a new thread that is specifically for @nogc code. cancelAllThreads Cancels all active threads. join Blocks the current thread until all threads have finished. Variables Name Description g_sigtermLock"
  },
  "juptune/juptune/event/loop/Structs/EventLoopConfig.html": {
    "href": "juptune/juptune/event/loop/Structs/EventLoopConfig.html",
    "title": "Struct - EventLoopConfig | Marmos Demo",
    "keywords": "Struct - EventLoopConfig Module juptune.event.loop public struct EventLoopConfig { // EventLoopConfig withFiberAllocatorConfig( FiberAllocatorConfig conf ) ; // EventLoopConfig withIoUringConfig( IoUringConfig conf ) ; // EventLoopConfig withSigtermHandler( bool value ) ; // Configuration for the EventLoop's fiber allocator. FiberAllocatorConfig fiberAllocator; // bool handleSigterm; // Configuration for the EventLoop's io_uring driver. IoUringConfig ioUring; } About Configuration for an EventLoop Functions Name Description withFiberAllocatorConfig withIoUringConfig withSigtermHandler Variables Name Description fiberAllocator Configuration for the EventLoop's fiber allocator. handleSigterm ioUring Configuration for the EventLoop's io_uring driver."
  },
  "juptune/juptune/event/loop/Structs/EventLoopThreadStats.html": {
    "href": "juptune/juptune/event/loop/Structs/EventLoopThreadStats.html",
    "title": "Struct - EventLoopThreadStats | Marmos Demo",
    "keywords": "Struct - EventLoopThreadStats Module juptune.event.loop public struct EventLoopThreadStats { // How many CQEs have caused a fiber to wake up in total ulong cqeAwokeFiber; // How many CQEs have been ignored (e.g because their user data is USER_DATA_IGNORE) in total ulong cqeIgnored; // How many CQEs have been generated in total ulong cqeTotal; // How many fibers are actively waiting for an io_uring CQE to wake them up ulong fibersWaitingOnIo; } About A simple struct used to track certain stats of the EventLoop. Variables Name Description cqeAwokeFiber How many CQEs have caused a fiber to wake up in total cqeIgnored How many CQEs have been ignored (e.g because their user data is USER_DATA_IGNORE) in total cqeTotal How many CQEs have been generated in total fibersWaitingOnIo How many fibers are actively waiting for an io_uring CQE to wake them up"
  },
  "juptune/juptune/event/loop/Structs/LoopThread.html": {
    "href": "juptune/juptune/event/loop/Structs/LoopThread.html",
    "title": "Struct - LoopThread | Marmos Demo",
    "keywords": "Struct - LoopThread Module juptune.event.loop public struct LoopThread { // shared CancelToken cancelToken; // FiberAllocator fiberAllocator; // JuptuneFiber gcEntry; // Thread gcThread; // IoUring ioUring; // bool isGCThread; // shared <bug: unknown> loop; // JuptuneFiber lowLevelEntry; // ThreadID lowLevelThread; // EventLoopThreadStats stats; // ArrayNonShrink!(JuptuneFiber*) yieldedFibers; } Variables Name Description cancelToken fiberAllocator gcEntry gcThread ioUring isGCThread loop lowLevelEntry lowLevelThread stats yieldedFibers"
  },
  "juptune/juptune/event/loop/Structs/SubmitEventConfig.html": {
    "href": "juptune/juptune/event/loop/Structs/SubmitEventConfig.html",
    "title": "Struct - SubmitEventConfig | Marmos Demo",
    "keywords": "Struct - SubmitEventConfig Module juptune.event.loop public struct SubmitEventConfig { // SubmitEventConfig shouldYieldUntilCompletion( bool value ) ; // SubmitEventConfig withTimeout( Duration value ) ; // The timeout for the event. Duration timeout; // Whether the fiber should yield until a CQE is generated YieldUntilCompletion yieldUntilComplete; } About Configuration for submitting an event Functions Name Description shouldYieldUntilCompletion withTimeout Variables Name Description timeout The timeout for the event. yieldUntilComplete Whether the fiber should yield until a CQE is generated"
  },
  "juptune/juptune/event/loop/SubmitEventConfig/Functions/shouldYieldUntilCompletion.html": {
    "href": "juptune/juptune/event/loop/SubmitEventConfig/Functions/shouldYieldUntilCompletion.html",
    "title": "Overloads for - shouldYieldUntilCompletion | Marmos Demo",
    "keywords": "Overloads for - shouldYieldUntilCompletion Module juptune.event.loop Parent SubmitEventConfig shouldYieldUntilCompletion(value) SubmitEventConfig shouldYieldUntilCompletion( bool value )"
  },
  "juptune/juptune/event/loop/SubmitEventConfig/Functions/withTimeout.html": {
    "href": "juptune/juptune/event/loop/SubmitEventConfig/Functions/withTimeout.html",
    "title": "Overloads for - withTimeout | Marmos Demo",
    "keywords": "Overloads for - withTimeout Module juptune.event.loop Parent SubmitEventConfig withTimeout(value) SubmitEventConfig withTimeout( Duration value )"
  },
  "juptune/juptune/http/Overview.html": {
    "href": "juptune/juptune/http/Overview.html",
    "title": "Module - juptune.http | Marmos Demo",
    "keywords": "Module - juptune.http"
  },
  "juptune/juptune/http/client/Classes/HttpClientAdapter.html": {
    "href": "juptune/juptune/http/client/Classes/HttpClientAdapter.html",
    "title": "Class - HttpClientAdapter | Marmos Demo",
    "keywords": "Class - HttpClientAdapter Module juptune.http.client public class HttpClientAdapter { // Result close( ) ; // Result connect( IpAddress ip ) ; // bool isConnected( ) ; // Result request( HttpRequest request, HttpResponse response ) ; // HttpClientVersion selectedVersion( ) ; // Result streamRequest( HttpRequest request, HttpResponse response, HttpClient bodyPutter, HttpClient bodyReader ) ; } About An adapter around HttpClient that allows it to be used as an IHttpClient . Please see the documentation for HttpClient . Functions Name Description close connect isConnected request selectedVersion streamRequest"
  },
  "juptune/juptune/http/client/Functions/collectRequest.html": {
    "href": "juptune/juptune/http/client/Functions/collectRequest.html",
    "title": "Overloads for - collectRequest | Marmos Demo",
    "keywords": "Overloads for - collectRequest Module juptune.http.client collectRequest(writer, reader) HttpRequest collectRequest( Http1Writer writer, Http1Reader reader )"
  },
  "juptune/juptune/http/client/Http1ClientImpl/Functions/close.html": {
    "href": "juptune/juptune/http/client/Http1ClientImpl/Functions/close.html",
    "title": "Overloads for - close | Marmos Demo",
    "keywords": "Overloads for - close Module juptune.http.client Parent Http1ClientImpl close() Result close( )"
  },
  "juptune/juptune/http/client/Http1ClientImpl/Functions/readBody.html": {
    "href": "juptune/juptune/http/client/Http1ClientImpl/Functions/readBody.html",
    "title": "Overloads for - readBody | Marmos Demo",
    "keywords": "Overloads for - readBody Module juptune.http.client Parent Http1ClientImpl readBody(response) Result readBody( HttpResponse response )"
  },
  "juptune/juptune/http/client/Http1ClientImpl/Functions/readHead.html": {
    "href": "juptune/juptune/http/client/Http1ClientImpl/Functions/readHead.html",
    "title": "Overloads for - readHead | Marmos Demo",
    "keywords": "Overloads for - readHead Module juptune.http.client Parent Http1ClientImpl readHead(response, readConfig) Result readHead( HttpResponse response, Http1ReadResponseConfig readConfig )"
  },
  "juptune/juptune/http/client/Http1ClientImpl/Functions/readTrailers.html": {
    "href": "juptune/juptune/http/client/Http1ClientImpl/Functions/readTrailers.html",
    "title": "Overloads for - readTrailers | Marmos Demo",
    "keywords": "Overloads for - readTrailers Module juptune.http.client Parent Http1ClientImpl readTrailers(response, closeConnection) Result readTrailers( HttpResponse response, bool closeConnection )"
  },
  "juptune/juptune/http/client/Http1ClientImpl/Functions/request.html": {
    "href": "juptune/juptune/http/client/Http1ClientImpl/Functions/request.html",
    "title": "Overloads for - request | Marmos Demo",
    "keywords": "Overloads for - request Module juptune.http.client Parent Http1ClientImpl request(request, response, defaultHost, closeConnection) Result request( HttpRequest request, HttpResponse response, String2 defaultHost, bool closeConnection )"
  },
  "juptune/juptune/http/client/Http1ClientImpl/Functions/sendBody.html": {
    "href": "juptune/juptune/http/client/Http1ClientImpl/Functions/sendBody.html",
    "title": "Overloads for - sendBody | Marmos Demo",
    "keywords": "Overloads for - sendBody Module juptune.http.client Parent Http1ClientImpl sendBody(request, closeConnection) Result sendBody( HttpRequest request, bool closeConnection )"
  },
  "juptune/juptune/http/client/Http1ClientImpl/Functions/sendHead.html": {
    "href": "juptune/juptune/http/client/Http1ClientImpl/Functions/sendHead.html",
    "title": "Overloads for - sendHead | Marmos Demo",
    "keywords": "Overloads for - sendHead Module juptune.http.client Parent Http1ClientImpl sendHead(request, defaultHost) Result sendHead( HttpRequest request, String2 defaultHost )"
  },
  "juptune/juptune/http/client/HttpClient/Functions/close.html": {
    "href": "juptune/juptune/http/client/HttpClient/Functions/close.html",
    "title": "Overloads for - close | Marmos Demo",
    "keywords": "Overloads for - close Module juptune.http.client Parent HttpClient close() Result close( ) Closes the connection to the server. Assertions The client must be connected. Throws Anything that TcpSocket.close can throw. Returns A Result indicating whether the connection was closed successfully or not."
  },
  "juptune/juptune/http/client/HttpClient/Functions/connect.html": {
    "href": "juptune/juptune/http/client/HttpClient/Functions/connect.html",
    "title": "Overloads for - connect | Marmos Demo",
    "keywords": "Overloads for - connect Module juptune.http.client Parent HttpClient connect(ip, host) Result connect( IpAddress ip, <bug: unknown> host ) Connects this client to the given IP address. Assertions The client must not already be connected. Params ip IpAddress The IP address to connect to. host <bug: unknown> The hostname to use for the Host header. If this is null, then the IP address will be used. Throws Anything that TcpSocket.connect can throw. Returns A Result indicating whether the connection was successful or not."
  },
  "juptune/juptune/http/client/HttpClient/Functions/isConnected.html": {
    "href": "juptune/juptune/http/client/HttpClient/Functions/isConnected.html",
    "title": "Overloads for - isConnected | Marmos Demo",
    "keywords": "Overloads for - isConnected Module juptune.http.client Parent HttpClient isConnected() bool isConnected( ) Returns whether this client is connected to a server."
  },
  "juptune/juptune/http/client/HttpClient/Functions/request.html": {
    "href": "juptune/juptune/http/client/HttpClient/Functions/request.html",
    "title": "Overloads for - request | Marmos Demo",
    "keywords": "Overloads for - request Module juptune.http.client Parent HttpClient request(request, response) Result request( HttpRequest request, HttpResponse response ) Sends a request to the server and returns the response. This is the 'Simple' way to send a request, and is the easiest to use. Notes This function will automatically add the Host header if it is not already present. If the request has a body and does not have a Content-Length or Transfer-Encoding header, then this function will automatically add a Transfer-Encoding: chunked header. If the request does not have a Host header, then this function will automatically add one using the host provided by the relevant connect function that was used. The client will gracefully close the connection in normal circumstances such as the Connection: close header being present. The state of the response parameter is undefined if this function returns an error. This function will automatically close the connection if an error occurs. Assertions The client must be connected. Params request HttpRequest The request to send. response HttpResponse The response to fill in. This will contain the entire response, including the body. Throws Anything that TcpSocket.send or TcpSocket.receive can throw. If using HTTP1, anything that Http1Writer or Http1Reader can throw (Http1Error). Returns A Result indicating whether the request was successful or not."
  },
  "juptune/juptune/http/client/HttpClient/Functions/selectedVersion.html": {
    "href": "juptune/juptune/http/client/HttpClient/Functions/selectedVersion.html",
    "title": "Overloads for - selectedVersion | Marmos Demo",
    "keywords": "Overloads for - selectedVersion Module juptune.http.client Parent HttpClient selectedVersion() HttpClientVersion selectedVersion( ) Returns the version of HTTP that this client is using."
  },
  "juptune/juptune/http/client/HttpClient/Functions/streamRequest.html": {
    "href": "juptune/juptune/http/client/HttpClient/Functions/streamRequest.html",
    "title": "Overloads for - streamRequest | Marmos Demo",
    "keywords": "Overloads for - streamRequest Module juptune.http.client Parent HttpClient streamRequest(request, response, bodyPutter, bodyReader) Result streamRequest( HttpRequest request, HttpResponse response, StreamRequestFunc bodyPutter, StreamResponseFunc bodyReader ) Streams a request to the server and streams the response. This is the 'Streamed' way to send a request, and is the most flexible to use. Notes The response parameter will only contain the status line, headers, and trailers (on return), and will not contain the body unless the user's callback puts it there. The request parameter is used to provide the method, path, and headers, but the body is always ignored. The D compiler is really bad with error messages, so you may need to store bodyPutter and bodyReader in a variable before passing them to this function just to get a useful error message. e.g. scope HttpClient.StreamRequestFunc putter = (...) @trusted @nogc {...} This function will automatically add the Host header if it is not already present. If the request has a body and does not have a Content-Length or Transfer-Encoding header, then this function will automatically add a Transfer-Encoding: chunked header. If the request does not have a Host header, then this function will automatically add one using the host provided by the relevant connect function that was used. The client will gracefully close the connection in normal circumstances such as the Connection: close header being present. The state of the response parameter is undefined if this function returns an error. This function will automatically close the connection if an error occurs. Assertions The client must be connected. Params request HttpRequest The request to send. Only the method, path, and headers are used. response HttpResponse The response to fill in. This will contain the status line, headers, and trailers. bodyPutter StreamRequestFunc A callback that will be called to stream the request body. bodyReader StreamResponseFunc A callback that will be called to stream the response body. Throws Anything that TcpSocket.send or TcpSocket.receive can throw. If using HTTP1, anything that Http1Writer or Http1Reader can throw (Http1Error). Anything the user returns from bodyPutter or bodyReader . Returns A Result indicating whether the request was successful or not."
  },
  "juptune/juptune/http/client/HttpClient/Functions/streamRequestGC.html": {
    "href": "juptune/juptune/http/client/HttpClient/Functions/streamRequestGC.html",
    "title": "Overloads for - streamRequestGC | Marmos Demo",
    "keywords": "Overloads for - streamRequestGC Module juptune.http.client Parent HttpClient streamRequestGC(request, response, bodyPutter, bodyReader) Result streamRequestGC( HttpRequest request, HttpResponse response, StreamRequestFuncGC bodyPutter, StreamResponseFuncGC bodyReader ) ditto"
  },
  "juptune/juptune/http/client/HttpClient/Functions/wrapPairedSocket.html": {
    "href": "juptune/juptune/http/client/HttpClient/Functions/wrapPairedSocket.html",
    "title": "Overloads for - wrapPairedSocket | Marmos Demo",
    "keywords": "Overloads for - wrapPairedSocket Module juptune.http.client Parent HttpClient wrapPairedSocket(client, socket, config) void wrapPairedSocket( HttpClient client, TcpSocket socket, HttpClientConfig config ) static"
  },
  "juptune/juptune/http/client/HttpClientAdapter/Functions/close.html": {
    "href": "juptune/juptune/http/client/HttpClientAdapter/Functions/close.html",
    "title": "Overloads for - close | Marmos Demo",
    "keywords": "Overloads for - close Module juptune.http.client Parent HttpClientAdapter close() Result close( )"
  },
  "juptune/juptune/http/client/HttpClientAdapter/Functions/connect.html": {
    "href": "juptune/juptune/http/client/HttpClientAdapter/Functions/connect.html",
    "title": "Overloads for - connect | Marmos Demo",
    "keywords": "Overloads for - connect Module juptune.http.client Parent HttpClientAdapter connect(ip) Result connect( IpAddress ip )"
  },
  "juptune/juptune/http/client/HttpClientAdapter/Functions/isConnected.html": {
    "href": "juptune/juptune/http/client/HttpClientAdapter/Functions/isConnected.html",
    "title": "Overloads for - isConnected | Marmos Demo",
    "keywords": "Overloads for - isConnected Module juptune.http.client Parent HttpClientAdapter isConnected() bool isConnected( )"
  },
  "juptune/juptune/http/client/HttpClientAdapter/Functions/request.html": {
    "href": "juptune/juptune/http/client/HttpClientAdapter/Functions/request.html",
    "title": "Overloads for - request | Marmos Demo",
    "keywords": "Overloads for - request Module juptune.http.client Parent HttpClientAdapter request(request, response) Result request( HttpRequest request, HttpResponse response )"
  },
  "juptune/juptune/http/client/HttpClientAdapter/Functions/selectedVersion.html": {
    "href": "juptune/juptune/http/client/HttpClientAdapter/Functions/selectedVersion.html",
    "title": "Overloads for - selectedVersion | Marmos Demo",
    "keywords": "Overloads for - selectedVersion Module juptune.http.client Parent HttpClientAdapter selectedVersion() HttpClientVersion selectedVersion( )"
  },
  "juptune/juptune/http/client/HttpClientAdapter/Functions/streamRequest.html": {
    "href": "juptune/juptune/http/client/HttpClientAdapter/Functions/streamRequest.html",
    "title": "Overloads for - streamRequest | Marmos Demo",
    "keywords": "Overloads for - streamRequest Module juptune.http.client Parent HttpClientAdapter streamRequest(request, response, bodyPutter, bodyReader) Result streamRequest( HttpRequest request, HttpResponse response, HttpClient bodyPutter, HttpClient bodyReader )"
  },
  "juptune/juptune/http/client/HttpClientConfig/Functions/withHttp1Config.html": {
    "href": "juptune/juptune/http/client/HttpClientConfig/Functions/withHttp1Config.html",
    "title": "Overloads for - withHttp1Config | Marmos Demo",
    "keywords": "Overloads for - withHttp1Config Module juptune.http.client Parent HttpClientConfig withHttp1Config(v) HttpClientConfig withHttp1Config( Http1Config v )"
  },
  "juptune/juptune/http/client/HttpClientConfig/Functions/withHttpVersion.html": {
    "href": "juptune/juptune/http/client/HttpClientConfig/Functions/withHttpVersion.html",
    "title": "Overloads for - withHttpVersion | Marmos Demo",
    "keywords": "Overloads for - withHttpVersion Module juptune.http.client Parent HttpClientConfig withHttpVersion(v) HttpClientConfig withHttpVersion( HttpClientVersion v )"
  },
  "juptune/juptune/http/client/HttpClientConfig/Functions/withReadBufferSize.html": {
    "href": "juptune/juptune/http/client/HttpClientConfig/Functions/withReadBufferSize.html",
    "title": "Overloads for - withReadBufferSize | Marmos Demo",
    "keywords": "Overloads for - withReadBufferSize Module juptune.http.client Parent HttpClientConfig withReadBufferSize(v) HttpClientConfig withReadBufferSize( size_t v )"
  },
  "juptune/juptune/http/client/HttpClientConfig/Functions/withWriteBufferSize.html": {
    "href": "juptune/juptune/http/client/HttpClientConfig/Functions/withWriteBufferSize.html",
    "title": "Overloads for - withWriteBufferSize | Marmos Demo",
    "keywords": "Overloads for - withWriteBufferSize Module juptune.http.client Parent HttpClientConfig withWriteBufferSize(v) HttpClientConfig withWriteBufferSize( size_t v )"
  },
  "juptune/juptune/http/client/Overview.html": {
    "href": "juptune/juptune/http/client/Overview.html",
    "title": "Module - juptune.http.client | Marmos Demo",
    "keywords": "Module - juptune.http.client Classes Name Description HttpClientAdapter An adapter around HttpClient that allows it to be used as an IHttpClient . Structs Name Description Http1ClientImpl HttpClient A medium-level HTTP client, designed to be a good balance between ease of use, flexibility, and performance. HttpClientConfig Configuration for a HttpClient . Functions Name Description collectRequest"
  },
  "juptune/juptune/http/client/Structs/Http1ClientImpl.html": {
    "href": "juptune/juptune/http/client/Structs/Http1ClientImpl.html",
    "title": "Struct - Http1ClientImpl | Marmos Demo",
    "keywords": "Struct - Http1ClientImpl Module juptune.http.client public struct Http1ClientImpl { // Result close( ) ; // Result readBody( HttpResponse response ) ; // Result readHead( HttpResponse response, Http1ReadResponseConfig readConfig ) ; // Result readTrailers( HttpResponse response, bool closeConnection ) ; // Result request( HttpRequest request, HttpResponse response, String2 defaultHost, bool closeConnection ) ; // Result sendBody( HttpRequest request, bool closeConnection ) ; // Result sendHead( HttpRequest request, String2 defaultHost ) ; // Http1Reader reader; // Http1Writer writer; } Functions Name Description close readBody readHead readTrailers request sendBody sendHead Variables Name Description reader writer"
  },
  "juptune/juptune/http/client/Structs/HttpClient.html": {
    "href": "juptune/juptune/http/client/Structs/HttpClient.html",
    "title": "Struct - HttpClient | Marmos Demo",
    "keywords": "Struct - HttpClient Module juptune.http.client public struct HttpClient { // A function provided by `HttpClient` which can be used to push data into the request body. alias PutBodyFunc = <todo: marmos support pending>; // ditto alias PutBodyFuncGC = <todo: marmos support pending>; // A function provided by the user which is used to stream an entire request body. alias StreamRequestFunc = <todo: marmos support pending>; // ditto alias StreamRequestFuncGC = <todo: marmos support pending>; // A function provided by `HttpClient` which can be used to stream read data from the response body. alias StreamResponseFunc = <todo: marmos support pending>; // ditto alias StreamResponseFuncGC = <todo: marmos support pending>; // Closes the connection to the server. Result close( ) ; // Connects this client to the given IP address. Result connect( IpAddress ip, <bug: unknown> host ) ; // Returns whether this client is connected to a server. bool isConnected( ) ; // Sends a request to the server and returns the response. Result request( HttpRequest request, HttpResponse response ) ; // Returns the version of HTTP that this client is using. HttpClientVersion selectedVersion( ) ; // Streams a request to the server and streams the response. Result streamRequest( HttpRequest request, HttpResponse response, StreamRequestFunc bodyPutter, StreamResponseFunc bodyReader ) ; // ditto Result streamRequestGC( HttpRequest request, HttpResponse response, StreamRequestFuncGC bodyPutter, StreamResponseFuncGC bodyReader ) ; // void wrapPairedSocket( HttpClient client, TcpSocket socket, HttpClientConfig config ) static; } About A medium-level HTTP client, designed to be a good balance between ease of use, flexibility, and performance. This client attempts to cater to both the @nogc and GC worlds, and as such has a few different named overloads for its functions. It has two different ways to send a request currently: A 'Simple' way, and a 'Streamed' way. Simple This is the easiest way to send a request, but isn't the most suitable for all situations, especially sending/receiving large amounts of data. This method is used by calling the request function with a pre-built HttpRequest containing the entire request. Please consult the documentation for HttpRequest and request for more info. Streamed This is the most flexible way to send a request beyond using the low-level primitives directly, but is more complex to use. This is the recommended way to send/receive large amounts of data. This method is used by calling the streamRequest function which provides a callback-based pattern for sending/receiving data. Please consult the documentation for streamRequest for more info. Aliases Name Description PutBodyFunc A function provided by HttpClient which can be used to push data into the request body. PutBodyFuncGC ditto StreamRequestFunc A function provided by the user which is used to stream an entire request body. StreamRequestFuncGC ditto StreamResponseFunc A function provided by HttpClient which can be used to stream read data from the response body. StreamResponseFuncGC ditto Functions Name Description close Closes the connection to the server. connect Connects this client to the given IP address. isConnected Returns whether this client is connected to a server. request Sends a request to the server and returns the response. selectedVersion Returns the version of HTTP that this client is using. streamRequest Streams a request to the server and streams the response. streamRequestGC ditto wrapPairedSocket"
  },
  "juptune/juptune/http/client/Structs/HttpClientConfig.html": {
    "href": "juptune/juptune/http/client/Structs/HttpClientConfig.html",
    "title": "Struct - HttpClientConfig | Marmos Demo",
    "keywords": "Struct - HttpClientConfig Module juptune.http.client public struct HttpClientConfig { // HttpClientConfig withHttp1Config( Http1Config v ) ; // HttpClientConfig withHttpVersion( HttpClientVersion v ) ; // HttpClientConfig withReadBufferSize( size_t v ) ; // HttpClientConfig withWriteBufferSize( size_t v ) ; // Configuration for HTTP/1.1 - this defaults to a 30 second timeout for both reading and writing. Http1Config http1; // Which version of HTTP to use when connecting to a server. HttpClientVersion httpVersion; // The size of the read buffer to use. size_t readBufferSize; // The size of the write buffer to use. size_t writeBufferSize; } About Configuration for a HttpClient . Functions Name Description withHttp1Config withHttpVersion withReadBufferSize withWriteBufferSize Variables Name Description http1 Configuration for HTTP/1.1 - this defaults to a 30 second timeout for both reading and writing. httpVersion Which version of HTTP to use when connecting to a server. readBufferSize The size of the read buffer to use. writeBufferSize The size of the write buffer to use."
  },
  "juptune/juptune/http/common/HttpHeader/Functions/name.html": {
    "href": "juptune/juptune/http/common/HttpHeader/Functions/name.html",
    "title": "Overloads for - name | Marmos Demo",
    "keywords": "Overloads for - name Module juptune.http.common Parent HttpHeader name() String2 name( ) The name of the header."
  },
  "juptune/juptune/http/common/HttpHeader/Functions/value.html": {
    "href": "juptune/juptune/http/common/HttpHeader/Functions/value.html",
    "title": "Overloads for - value | Marmos Demo",
    "keywords": "Overloads for - value Module juptune.http.common Parent HttpHeader value() String2 value( ) The value of the header."
  },
  "juptune/juptune/http/common/HttpRequest/Functions/method.html": {
    "href": "juptune/juptune/http/common/HttpRequest/Functions/method.html",
    "title": "Overloads for - method | Marmos Demo",
    "keywords": "Overloads for - method Module juptune.http.common Parent HttpRequest method() String2 method( ) The method of the request."
  },
  "juptune/juptune/http/common/HttpRequest/Functions/path.html": {
    "href": "juptune/juptune/http/common/HttpRequest/Functions/path.html",
    "title": "Overloads for - path | Marmos Demo",
    "keywords": "Overloads for - path Module juptune.http.common Parent HttpRequest path() String2 path( ) The path of the request."
  },
  "juptune/juptune/http/common/HttpResponse/Functions/reason.html": {
    "href": "juptune/juptune/http/common/HttpResponse/Functions/reason.html",
    "title": "Overloads for - reason | Marmos Demo",
    "keywords": "Overloads for - reason Module juptune.http.common Parent HttpResponse reason() String2 reason( ) The status of the response."
  },
  "juptune/juptune/http/common/HttpResponse/Functions/status.html": {
    "href": "juptune/juptune/http/common/HttpResponse/Functions/status.html",
    "title": "Overloads for - status | Marmos Demo",
    "keywords": "Overloads for - status Module juptune.http.common Parent HttpResponse status() uint status( ) The reason of the response."
  },
  "juptune/juptune/http/common/HttpResponse/Functions/withStatus.html": {
    "href": "juptune/juptune/http/common/HttpResponse/Functions/withStatus.html",
    "title": "Overloads for - withStatus | Marmos Demo",
    "keywords": "Overloads for - withStatus Module juptune.http.common Parent HttpResponse withStatus(status) void withStatus( uint status ) Sets the status of the response. Params status uint The status to set the response to."
  },
  "juptune/juptune/http/common/Overview.html": {
    "href": "juptune/juptune/http/common/Overview.html",
    "title": "Module - juptune.http.common | Marmos Demo",
    "keywords": "Module - juptune.http.common Structs Name Description HttpHeader Represents a single HTTP header. HttpRequest Represents a HTTP request with a method; headers; and a body. HttpResponse Represents a HTTP response with a status code + reason; headers; a body, and trailers."
  },
  "juptune/juptune/http/common/Structs/HttpHeader.html": {
    "href": "juptune/juptune/http/common/Structs/HttpHeader.html",
    "title": "Struct - HttpHeader | Marmos Demo",
    "keywords": "Struct - HttpHeader Module juptune.http.common public struct HttpHeader { // The name of the header. String2 name( ) ; // The value of the header. String2 value( ) ; } About Represents a single HTTP header. Functions Name Description name The name of the header. value The value of the header."
  },
  "juptune/juptune/http/common/Structs/HttpRequest.html": {
    "href": "juptune/juptune/http/common/Structs/HttpRequest.html",
    "title": "Struct - HttpRequest | Marmos Demo",
    "keywords": "Struct - HttpRequest Module juptune.http.common public struct HttpRequest { // The method of the request. String2 method( ) ; // The path of the request. String2 path( ) ; } About Represents a HTTP request with a method; headers; and a body. Functions Name Description method The method of the request. path The path of the request."
  },
  "juptune/juptune/http/common/Structs/HttpResponse.html": {
    "href": "juptune/juptune/http/common/Structs/HttpResponse.html",
    "title": "Struct - HttpResponse | Marmos Demo",
    "keywords": "Struct - HttpResponse Module juptune.http.common public struct HttpResponse { // The status of the response. String2 reason( ) ; // The reason of the response. uint status( ) ; // Sets the status of the response. void withStatus( uint status ) ; } About Represents a HTTP response with a status code + reason; headers; a body, and trailers. Functions Name Description reason The status of the response. status The reason of the response. withStatus Sets the status of the response."
  },
  "juptune/juptune/http/tls13/Overview.html": {
    "href": "juptune/juptune/http/tls13/Overview.html",
    "title": "Module - juptune.http.tls13 | Marmos Demo",
    "keywords": "Module - juptune.http.tls13"
  },
  "juptune/juptune/http/uri/Functions/uriAuthorityLookahead.html": {
    "href": "juptune/juptune/http/uri/Functions/uriAuthorityLookahead.html",
    "title": "Overloads for - uriAuthorityLookahead | Marmos Demo",
    "keywords": "Overloads for - uriAuthorityLookahead Module juptune.http.uri uriAuthorityLookahead(chars, hints) void uriAuthorityLookahead( <bug: unknown> chars, UriParseHints hints ) Looks ahead in the URI to determine whether the authority component has a user info and/or port component. Notes O(n) worst case. Terminate on first character that terminates the authority component. Sets the UriParseHints.authorityHasUserInfo and UriParseHints.authorityHasPort hints where appropriate. IPv6 style addresses are handled correctly."
  },
  "juptune/juptune/http/uri/Functions/uriDecoder.html": {
    "href": "juptune/juptune/http/uri/Functions/uriDecoder.html",
    "title": "Overloads for - uriDecoder | Marmos Demo",
    "keywords": "Overloads for - uriDecoder Module juptune.http.uri uriDecoder(input) UriDecoder uriDecoder( <bug: unknown> input ) Functional style wrapper around UriDecoder ."
  },
  "juptune/juptune/http/uri/Functions/uriParseAuthority.html": {
    "href": "juptune/juptune/http/uri/Functions/uriParseAuthority.html",
    "title": "Overloads for - uriParseAuthority | Marmos Demo",
    "keywords": "Overloads for - uriParseAuthority Module juptune.http.uri uriParseAuthority(chars, userInfo, host, hostAsIp, port, next, hints, rules) Result uriParseAuthority( <bug: unknown> chars, <bug: unknown> userInfo, <bug: unknown> host, Nullable!(IpAddress) hostAsIp, Nullable!(ushort) port, <bug: unknown> next, UriParseHints hints, UriParseRules rules ) Parses the authority of a URI. Valid Formats isAbsolute when UriParseHints.isAbsolute is set -> //authority/path?query#fragment, e.g. \"//authority/some/path?some=query#some-fragment\" isNetworkReference when UriParseHints.isAbsolute is not set -> //authority/path?query#fragment, e.g. \"//authority/some/path?some=query#some-fragment\" isUriSuffix when UriParseHints.isAbsolute is not set and when the input is not a network reference -> host/path?query#fragment, e.g. \"localhost/some/path?some=query#some-fragment\" empty, yet successful result when none of the above can be determined, the entire input string is returned in next and the function returns Result.noError . -> e.g. /some/absolute/path percentEncodedUserInfo mixes with any of the above -> user%40info@host/path?query#fragment, e.g. \"user%40info@localhost/some/path?some=query#some-fragment\" percentEncodedHost mixes with any of the above -> ho%20st/path?query#fragment, e.g. \"ho%20st/some/path?some=query#some-fragment\" (The following hints are capable of being mixed and matched. Listing all permutations is not useful.) authorityHasUserInfo -> user:info@host/path?query#fragment, e.g. \"user:info@localhost/some/path?some=query#some-fragment\" authorityHasPort -> host:port/path?query#fragment, e.g. \"localhost:8080/some/path?some=query#some-fragment\" authorityHostIsIpv6 -> [::1]/path?query#fragment, e.g. \"[::1]/some/path?some=query#some-fragment\" authorityHostIsIpv4 -> 0.0.0.0/path?query#fragment, e.g. \"127.0.0.1/some/path?some=query#some-fragment\" authorityHostIsDomain -> localhost/path?query#fragment, e.g. \"localhost/some/path?some=query#some-fragment\" -> abc.com/path?query#fragment, e.g. \"abc.com/some/path?some=query#some-fragment\" -> 0.0.0.0.abc.com/path?query#fragment, e.g. \"127.0.0.1.domain/some/path?some=query#some-fragment\" Notes Given the string \"//user:info@localhost:8080/abc\", the userInfo parameter will be set to \"user:info\", the host parameter will be set to \"localhost\", the port parameter will be set to 8080, and the next parameter will be set to \"/abc\". The output of all out parameters is undefined if the function returns an error. If the host is intended to be an IPv4 address, but is for some reason invalid, it will be interpreted as a domain name instead without an error being generated. If the host is an IP address, then the hostAsIp parameter will be set to the parsed IP address. Additionally if there is a port, then the port field within the IpAddress struct will also be set. While percent encoding is validated, it is not decoded. Params chars <bug: unknown> The input string to parse userInfo <bug: unknown> The slice of chars that contains the user info, if one exists host <bug: unknown> The slice of chars that contains the host hostAsIp Nullable!(IpAddress) The IPv4 or IPv6 address of the host, if one exists port Nullable!(ushort) The port of the host, if one exists next <bug: unknown> The slice of chars that contains the next component of the URI hints UriParseHints A set of hints, set by this parser, that can be used to determine the structure of the URI rules UriParseRules A set of rules that can be used to control the behaviour of the URI parser Throws UriError.authorityRequired if the URI is absolute (has a scheme), but has no authority component. UriError.authorityUserInfoIsInvalid if the user info exists, but is invalid. UriError.authorityPortIsInvalid if the port exists, but is invalid. UriError.authorityHostIsInvalid if the host exists, but is invalid. Returns A Result indicating whether the parsing was successful or not."
  },
  "juptune/juptune/http/uri/Functions/uriParseAuthorityHost.html": {
    "href": "juptune/juptune/http/uri/Functions/uriParseAuthorityHost.html",
    "title": "Overloads for - uriParseAuthorityHost | Marmos Demo",
    "keywords": "Overloads for - uriParseAuthorityHost Module juptune.http.uri uriParseAuthorityHost(chars, cursor, host, hostAsIp, hints) Result uriParseAuthorityHost( <bug: unknown> chars, size_t cursor, <bug: unknown> host, Nullable!(IpAddress) hostAsIp, UriParseHints hints ) Provides parsing logic for uriParseAuthority , not really intended for direct use, but is made available for edge cases users may have."
  },
  "juptune/juptune/http/uri/Functions/uriParseAuthorityHostAsIpv4OrDomain.html": {
    "href": "juptune/juptune/http/uri/Functions/uriParseAuthorityHostAsIpv4OrDomain.html",
    "title": "Overloads for - uriParseAuthorityHostAsIpv4OrDomain | Marmos Demo",
    "keywords": "Overloads for - uriParseAuthorityHostAsIpv4OrDomain Module juptune.http.uri uriParseAuthorityHostAsIpv4OrDomain(chars, cursor, host, hostAsIp, hints) Result uriParseAuthorityHostAsIpv4OrDomain( <bug: unknown> chars, size_t cursor, <bug: unknown> host, Nullable!(IpAddress) hostAsIp, UriParseHints hints ) Provides parsing logic for uriParseAuthority , not really intended for direct use, but is made available for edge cases users may have."
  },
  "juptune/juptune/http/uri/Functions/uriParseAuthorityHostAsIpv6.html": {
    "href": "juptune/juptune/http/uri/Functions/uriParseAuthorityHostAsIpv6.html",
    "title": "Overloads for - uriParseAuthorityHostAsIpv6 | Marmos Demo",
    "keywords": "Overloads for - uriParseAuthorityHostAsIpv6 Module juptune.http.uri uriParseAuthorityHostAsIpv6(chars, cursor, host, hostAsIp, hints) Result uriParseAuthorityHostAsIpv6( <bug: unknown> chars, size_t cursor, <bug: unknown> host, Nullable!(IpAddress) hostAsIp, UriParseHints hints ) Provides parsing logic for uriParseAuthority , not really intended for direct use, but is made available for edge cases users may have."
  },
  "juptune/juptune/http/uri/Functions/uriParseAuthorityPort.html": {
    "href": "juptune/juptune/http/uri/Functions/uriParseAuthorityPort.html",
    "title": "Overloads for - uriParseAuthorityPort | Marmos Demo",
    "keywords": "Overloads for - uriParseAuthorityPort Module juptune.http.uri uriParseAuthorityPort(chars, cursor, port, hints) Result uriParseAuthorityPort( <bug: unknown> chars, size_t cursor, ushort port, UriParseHints hints ) Provides parsing logic for uriParseAuthority , not really intended for direct use, but is made available for edge cases users may have."
  },
  "juptune/juptune/http/uri/Functions/uriParseAuthorityUserInfo.html": {
    "href": "juptune/juptune/http/uri/Functions/uriParseAuthorityUserInfo.html",
    "title": "Overloads for - uriParseAuthorityUserInfo | Marmos Demo",
    "keywords": "Overloads for - uriParseAuthorityUserInfo Module juptune.http.uri uriParseAuthorityUserInfo(chars, cursor, userInfo, hints) Result uriParseAuthorityUserInfo( <bug: unknown> chars, size_t cursor, <bug: unknown> userInfo, UriParseHints hints ) Provides parsing logic for uriParseAuthority , not really intended for direct use, but is made available for edge cases users may have."
  },
  "juptune/juptune/http/uri/Functions/uriParseFragment.html": {
    "href": "juptune/juptune/http/uri/Functions/uriParseFragment.html",
    "title": "Overloads for - uriParseFragment | Marmos Demo",
    "keywords": "Overloads for - uriParseFragment Module juptune.http.uri uriParseFragment(chars, fragment, next, hints) Result uriParseFragment( <bug: unknown> chars, <bug: unknown> fragment, <bug: unknown> next, UriParseHints hints ) Parses the fragment of a URI. Valid Formats fragmentIsEmpty -> percentEncodedFragment -> #frag%20ment, e.g. \"#some%20fragment\" !fragmentIsEmpty -> #fragment, e.g. \"#some-fragment\" Notes Given the string \"#some-fragment\", the fragment parameter will be set to \"some-fragment\", and the next parameter will be set to the empty string. The output of all out parameters is undefined if the function returns an error. While percent encoding is validated, it is not decoded. Params chars <bug: unknown> The input string to parse fragment <bug: unknown> The slice of chars that contains the fragment next <bug: unknown> The slice of chars that contains the next component of the URI hints UriParseHints A set of hints, set by this parser, that can be used to determine the structure of the URI Throws UriError.fragmentIsInvalid if the fragment contains an invalid character UriError.fragmentIsInvalid if the fragment contains an invalid percent encoded character UriError.fragmentIsInvalid if the first character is not '#' Returns A Result indicating whether the parsing was successful or not."
  },
  "juptune/juptune/http/uri/Functions/uriParseNoCopy.html": {
    "href": "juptune/juptune/http/uri/Functions/uriParseNoCopy.html",
    "title": "Overloads for - uriParseNoCopy | Marmos Demo",
    "keywords": "Overloads for - uriParseNoCopy Module juptune.http.uri uriParseNoCopy(input, uri, rules) Result uriParseNoCopy( <bug: unknown> input, ScopeUri uri, UriParseRules rules ) Higher level Uri parsing functions Parses a URI from a string into a ScopeUri , which specifically does not contain any copy of the input data, but instead slices from the original input slice. This means the returned ScopeUri is only valid for as long as the input slice is valid and unmodified. This function is intended to be used when the caller wants to avoid copying the input data, and is willing to accept the limitations and risks of a ScopeUri . Please report any non-compliance with RFC 3986 as a bug. Valid Formats isAbsolute -> scheme://user:info@host:port/path?query#fragment, e.g. \"http://user:info@localhost:8080/some/path?some=query#some-fragment\" isNetworkReference -> //user:info@host:port/path?query#fragment, e.g. \"//user:info@localhost:8080/some/path?some=query#some-fragment\" !isAbsolute && !isNetworkReference && pathIsAbsolute -> /path?query#fragment, e.g. \"/some/path?some=query#some-fragment\" pathIsRootless only if UriParseRules.allowUriSuffix IS NOT set. -> path?query#fragment, e.g. \"some/path?some=query#some-fragment\" isUriSuffix only the host component is supported within the authority - port and user info are not supported due to their colons causing the URI to be seen as an absolute URI, which will likely generate an error. only if UriParseRules.allowUriSuffix IS set. -> host/path?query#fragment, e.g. \"localhost/some/path?some=query#some-fragment\" Please see the individual, lower level parsing functions for the exact details of each component. Notes The output of all out parameters is undefined if the function returns an error. This parser will attempt to heuristically determine whether the start of the URI is a scheme or an authority. Please note that errors in a scheme may manifest as an error in the authority component. If it's not clear, you can use uri.hints to determine the exact structure of the URI. Params input <bug: unknown> The input string to parse uri ScopeUri The ScopeUri to write the parsed URI to rules UriParseRules A set of rules that can be used to control the behaviour of the URI parser Throws Anything that uriParseScheme , uriParseAuthority , uriParsePath , uriParseQuery , or uriParseFragment can throw. Returns A Result indicating whether the parsing was successful or not."
  },
  "juptune/juptune/http/uri/Functions/uriParsePath.html": {
    "href": "juptune/juptune/http/uri/Functions/uriParsePath.html",
    "title": "Overloads for - uriParsePath | Marmos Demo",
    "keywords": "Overloads for - uriParsePath Module juptune.http.uri uriParsePath(chars, path, next, hints) Result uriParsePath( <bug: unknown> chars, <bug: unknown> path, <bug: unknown> next, UriParseHints hints ) Parses the path of a URI. Valid Formats pathIsAbsolute -> /path?query#fragment, e.g. \"/some/path?some=query#some-fragment\" pathIsRootless -> path?query#fragment, e.g. \"some/path?some=query#some-fragment\" pathIsEmpty -> ?query#fragment, e.g. \"?some=query#some-fragment\" pathHasStartColon mixes with pathIsAbsolute -> /pa:th?query#fragment, e.g. \"/some:path/yada/yada?some=query#some-fragment\" percentEncodedPath mixes with pathIsAbsolute and pathIsRootless -> pa%20th?query#fragment, e.g. \"some%20path/yada/yada?some=query#some-fragment\" Notes Given the string \"/some/path/?some=query#some-fragment\", the path parameter will be set to \"/some/path/\", and the next parameter will be set to \"?some=query#some-fragment\". The output of all out parameters is undefined if the function returns an error. While percent encoding is validated, it is not decoded. Params chars <bug: unknown> The input string to parse path <bug: unknown> The slice of chars that contains the path next <bug: unknown> The slice of chars that contains the next component of the URI hints UriParseHints A set of hints, set by this parser, that can be used to determine the structure of the URI Throws UriError.pathIsInvalid if the path is absolute and starts with \"//\" UriError.pathIsInvalid if the path is rootless and contains a ':' in the first segment UriError.pathIsInvalid if the path contains an invalid character UriError.pathIsInvalid if the path contains an invalid percent encoded character Returns A Result indicating whether the parsing was successful or not."
  },
  "juptune/juptune/http/uri/Functions/uriParseQuery.html": {
    "href": "juptune/juptune/http/uri/Functions/uriParseQuery.html",
    "title": "Overloads for - uriParseQuery | Marmos Demo",
    "keywords": "Overloads for - uriParseQuery Module juptune.http.uri uriParseQuery(chars, query, next, hints) Result uriParseQuery( <bug: unknown> chars, <bug: unknown> query, <bug: unknown> next, UriParseHints hints ) Parses the query of a URI. Valid Formats queryIsEmpty -> percentEncodedQuery -> ?que%20ry#fragment, e.g. \"?some%20query#some-fragment\" !queryIsEmpty -> ?query#fragment, e.g. \"?some=query#some-fragment\" Notes Given the string \"?some=query#some-fragment\", the query parameter will be set to \"some=query\", and the next parameter will be set to \"#some-fragment\". The output of all out parameters is undefined if the function returns an error. While percent encoding is validated, it is not decoded. Params chars <bug: unknown> The input string to parse query <bug: unknown> The slice of chars that contains the query next <bug: unknown> The slice of chars that contains the next component of the URI hints UriParseHints A set of hints, set by this parser, that can be used to determine the structure of the URI Throws UriError.queryIsInvalid if the query contains an invalid character UriError.queryIsInvalid if the query contains an invalid percent encoded character UriError.queryIsInvalid if the first character is not '?' Returns A Result indicating whether the parsing was successful or not."
  },
  "juptune/juptune/http/uri/Functions/uriParseScheme.html": {
    "href": "juptune/juptune/http/uri/Functions/uriParseScheme.html",
    "title": "Overloads for - uriParseScheme | Marmos Demo",
    "keywords": "Overloads for - uriParseScheme Module juptune.http.uri uriParseScheme(chars, scheme, next, hints) Result uriParseScheme( <bug: unknown> chars, <bug: unknown> scheme, <bug: unknown> next, UriParseHints hints ) \"Low level\" Uri parsing functions Parses the scheme of a URI. Notes Given the string \"https://abc.com\", the scheme parameter will be set to \"https\" and the next parameter will be set to \"//abc.com\". The colon is dropped. The output of all out parameters is undefined if the function returns an error. The hint UriParseHints.isAbsolute is always set. Params chars <bug: unknown> The input string to parse scheme <bug: unknown> The slice of chars that contains the scheme next <bug: unknown> The slice of chars that contains the next component of the URI hints UriParseHints A set of hints, set by this parser, that can be used to determine the structure of the URI Throws UriError.schemeIsInvalid if the scheme does not start with an alpha character UriError.schemeIsInvalid if the scheme is empty UriError.schemeIsInvalid if the scheme contains an invalid character after the first UriError.schemeIsInvalid if chars does not contain a ':' to terminate the scheme Returns A Result indicating whether the parsing was successful or not."
  },
  "juptune/juptune/http/uri/Overview.html": {
    "href": "juptune/juptune/http/uri/Overview.html",
    "title": "Module - juptune.http.uri | Marmos Demo",
    "keywords": "Module - juptune.http.uri Structs Name Description ScopeUri A fairly featureless POD struct that represents a URI that specifically does not own the data it points to. UriDecoder Helpers Functions Name Description uriAuthorityLookahead Looks ahead in the URI to determine whether the authority component has a user info and/or port component. uriDecoder Functional style wrapper around UriDecoder . uriParseAuthority Parses the authority of a URI. uriParseAuthorityHost Provides parsing logic for uriParseAuthority , not really intended for direct use, but is made available for edge cases users may have. uriParseAuthorityHostAsIpv4OrDomain Provides parsing logic for uriParseAuthority , not really intended for direct use, but is made available for edge cases users may have. uriParseAuthorityHostAsIpv6 Provides parsing logic for uriParseAuthority , not really intended for direct use, but is made available for edge cases users may have. uriParseAuthorityPort Provides parsing logic for uriParseAuthority , not really intended for direct use, but is made available for edge cases users may have. uriParseAuthorityUserInfo Provides parsing logic for uriParseAuthority , not really intended for direct use, but is made available for edge cases users may have. uriParseFragment Parses the fragment of a URI. uriParseNoCopy Higher level Uri parsing functions uriParsePath Parses the path of a URI. uriParseQuery Parses the query of a URI. uriParseScheme \"Low level\" Uri parsing functions Variables Name Description g_rfc3986CharType"
  },
  "juptune/juptune/http/uri/ScopeUri/Functions/mustReconstruct.html": {
    "href": "juptune/juptune/http/uri/ScopeUri/Functions/mustReconstruct.html",
    "title": "Overloads for - mustReconstruct | Marmos Demo",
    "keywords": "Overloads for - mustReconstruct Module juptune.http.uri Parent ScopeUri mustReconstruct() void mustReconstruct( )"
  },
  "juptune/juptune/http/uri/ScopeUri/Functions/reconstruct.html": {
    "href": "juptune/juptune/http/uri/ScopeUri/Functions/reconstruct.html",
    "title": "Overloads for - reconstruct | Marmos Demo",
    "keywords": "Overloads for - reconstruct Module juptune.http.uri Parent ScopeUri reconstruct(result) Result reconstruct( Array!(char) result ) Reconstructs the URI from the data it points to, and validates that the reconstructed URI matches the original URI. Notes In debug builds the error returned will contain additional information about the mismatch. If an error is thrown, the result parameter will still contain the reconstructed URI, but it is up to the user whether to risk using it or not. Params result Array!(char) The string to write the reconstructed URI to Throws Anything that uriParseNoCopy can throw. UriError.none if the reconstructed URI does not match the original URI. Since this error is technically a programmer bug it doesn't have a dedicated error code. Because URIs are heavily influenced by user input it was decided that this function should handle the error gracefully instead of asserting, just to prevent any potential denial of service. Returns A Result indicating whether the reconstruction was successful or not."
  },
  "juptune/juptune/http/uri/Structs/ScopeUri.html": {
    "href": "juptune/juptune/http/uri/Structs/ScopeUri.html",
    "title": "Struct - ScopeUri | Marmos Demo",
    "keywords": "Struct - ScopeUri Module juptune.http.uri public struct ScopeUri { // void mustReconstruct( ) ; // Reconstructs the URI from the data it points to, and validates that the reconstructed URI matches the original URI. Result reconstruct( Array!(char) result ) ; // The fragment of the URI, e.g. \"#some-fragment\", if one exists <bug: unknown> fragment; // A bitmask of hints that can be used to determine the structure of the URI UriParseHints hints; // The host of the URI, e.g. \"localhost\", if one exists <bug: unknown> host; // The host of the URI as an IP address, if one exists. Nullable!(IpAddress) hostAsIp; // The path of the URI, e.g. \"/some/path\", if one exists <bug: unknown> path; // The port of the URI, if one exists. Nullable!(ushort) port; // The query of the URI, e.g. \"?some=query\", if one exists <bug: unknown> query; // The scheme of the URI, e.g. \"http\", if one exists <bug: unknown> scheme; // The user info of the URI, e.g. \"user:info\", if one exists <bug: unknown> userInfo; } About A fairly featureless POD struct that represents a URI that specifically does not own the data it points to. This means this struct is only valid for as long as the data it points to is valid, but it has other interesting implications such as using data from multiple non-contigous memory blocks if suitable. Functions Name Description mustReconstruct reconstruct Reconstructs the URI from the data it points to, and validates that the reconstructed URI matches the original URI. Variables Name Description fragment The fragment of the URI, e.g. \"#some-fragment\", if one exists hints A bitmask of hints that can be used to determine the structure of the URI host The host of the URI, e.g. \"localhost\", if one exists hostAsIp The host of the URI as an IP address, if one exists. path The path of the URI, e.g. \"/some/path\", if one exists port The port of the URI, if one exists. query The query of the URI, e.g. \"?some=query\", if one exists scheme The scheme of the URI, e.g. \"http\", if one exists userInfo The user info of the URI, e.g. \"user:info\", if one exists"
  },
  "juptune/juptune/http/uri/Structs/UriDecoder.html": {
    "href": "juptune/juptune/http/uri/Structs/UriDecoder.html",
    "title": "Struct - UriDecoder | Marmos Demo",
    "keywords": "Struct - UriDecoder Module juptune.http.uri public struct UriDecoder { // bool empty( ) ; // char front( ) ; // void popFront( ) ; } About Helpers An input range that iterates over the characters of a URI, replacing any percent encoded characters with their decoded values. Notes This range assumes the input string has been validated/parsed already, so makes no attempt to validate anything besides the percent encoded characters. This also means that the range will not throw any errors, and will instead assert if it encounters an invalid percent encoded character. See_Also uriDecoder Functions Name Description empty front popFront"
  },
  "juptune/juptune/http/uri/UriDecoder/Functions/empty.html": {
    "href": "juptune/juptune/http/uri/UriDecoder/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module juptune.http.uri Parent UriDecoder empty() bool empty( )"
  },
  "juptune/juptune/http/uri/UriDecoder/Functions/front.html": {
    "href": "juptune/juptune/http/uri/UriDecoder/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module juptune.http.uri Parent UriDecoder front() char front( )"
  },
  "juptune/juptune/http/uri/UriDecoder/Functions/popFront.html": {
    "href": "juptune/juptune/http/uri/UriDecoder/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module juptune.http.uri Parent UriDecoder popFront() void popFront( )"
  },
  "juptune/juptune/http/v1/Functions/http1CanonicalHeaderNameInPlace.html": {
    "href": "juptune/juptune/http/v1/Functions/http1CanonicalHeaderNameInPlace.html",
    "title": "Overloads for - http1CanonicalHeaderNameInPlace | Marmos Demo",
    "keywords": "Overloads for - http1CanonicalHeaderNameInPlace Module juptune.http.v1 http1CanonicalHeaderNameInPlace(headerName) bool http1CanonicalHeaderNameInPlace( <bug: unknown> headerName ) Helper functions Normalises a header name in-place. More specifically this converts the header name to lowercase, while also checking that the header name is valid. Notes If normalisation fails, the header name will be left in a half-modified state. Params headerName <bug: unknown> The header name to normalise. Returns true if the header name was valid, false otherwise."
  },
  "juptune/juptune/http/v1/Functions/http1IsPathValidForMethod.html": {
    "href": "juptune/juptune/http/v1/Functions/http1IsPathValidForMethod.html",
    "title": "Overloads for - http1IsPathValidForMethod | Marmos Demo",
    "keywords": "Overloads for - http1IsPathValidForMethod Module juptune.http.v1 http1IsPathValidForMethod(method, path, isProxyRequest) bool http1IsPathValidForMethod( <bug: unknown> method, <bug: unknown> path, bool isProxyRequest ) Checks whether the given path is valid for the given method, taking into account whether the request is being proxied or not. Notes HttpWriter and HttpReader already perform path validation, however keeping this logic private doesn't provide much benefit, so it's been made public. This check should match the speficiation of Section 3.2 in RFC9112. The overload that takes a UriParseHints is provided for performance reasons, as it allows the caller to avoid parsing the path twice. It is unable to handle OPTIONS * however as '*' is not a valid RFC 3986 URI so a trivial check must be manually performed beforehand. Additionally another overload is provided that returns the parsed URI with hints, as it is likely that the caller will need to parse the URI anyway. Params method <bug: unknown> The method to check the path against. path <bug: unknown> The path to check. isProxyRequest bool Whether the request is being proxied or not. Returns true if the path is valid for the given method, false otherwise. http1IsPathValidForMethod(method, path, uri, isProxyRequest) bool http1IsPathValidForMethod( <bug: unknown> method, <bug: unknown> path, ScopeUri uri, bool isProxyRequest ) ditto. http1IsPathValidForMethod(method, hints, isProxyRequest) bool http1IsPathValidForMethod( <bug: unknown> method, UriParseHints hints, bool isProxyRequest ) ditto"
  },
  "juptune/juptune/http/v1/Functions/isHttp1HeaderValue.html": {
    "href": "juptune/juptune/http/v1/Functions/isHttp1HeaderValue.html",
    "title": "Overloads for - isHttp1HeaderValue | Marmos Demo",
    "keywords": "Overloads for - isHttp1HeaderValue Module juptune.http.v1 isHttp1HeaderValue(value) bool isHttp1HeaderValue( <bug: unknown> value ) Checks if a string is a valid HTTP header value as defined by RFC 9110. Not the most useful function for user code, but there's no reason to not have it be public. Notes An empty string is not considered a valid header value. Params value <bug: unknown> The header value to check. Returns true if the header value is valid, false otherwise."
  },
  "juptune/juptune/http/v1/Functions/isHttp1Reason.html": {
    "href": "juptune/juptune/http/v1/Functions/isHttp1Reason.html",
    "title": "Overloads for - isHttp1Reason | Marmos Demo",
    "keywords": "Overloads for - isHttp1Reason Module juptune.http.v1 isHttp1Reason(value) bool isHttp1Reason( <bug: unknown> value ) Checks if a string is a valid HTTP status line reason as defined by RFC 9110. Not the most useful function for user code, but there's no reason to not have it be public. Notes An empty string is not considered a valid value. Params value <bug: unknown> The value to check. Returns true if the value is valid, false otherwise."
  },
  "juptune/juptune/http/v1/Functions/isHttp1Token.html": {
    "href": "juptune/juptune/http/v1/Functions/isHttp1Token.html",
    "title": "Overloads for - isHttp1Token | Marmos Demo",
    "keywords": "Overloads for - isHttp1Token Module juptune.http.v1 isHttp1Token(token) bool isHttp1Token( <bug: unknown> token ) Checks if a string is a valid HTTP 'token' as defined by RFC 9110. Not the most useful function for user code, but there's no reason to not have it be public. Notes An empty string is not considered a valid token. Params token <bug: unknown> The token to check. Returns true if the token is valid, false otherwise."
  },
  "juptune/juptune/http/v1/Functions/makePath.html": {
    "href": "juptune/juptune/http/v1/Functions/makePath.html",
    "title": "Overloads for - makePath | Marmos Demo",
    "keywords": "Overloads for - makePath Module juptune.http.v1 makePath(path, query, fragment) ScopeUri makePath( string path, string query, string fragment ) Unit tests"
  },
  "juptune/juptune/http/v1/Http1BodyChunk/Functions/access.html": {
    "href": "juptune/juptune/http/v1/Http1BodyChunk/Functions/access.html",
    "title": "Overloads for - access | Marmos Demo",
    "keywords": "Overloads for - access Module juptune.http.v1 Parent Http1BodyChunk access(func) void access( <bug: unknown> func ) Accesses the body chunk data. access(func) void access( <bug: unknown> func ) ditto."
  },
  "juptune/juptune/http/v1/Http1BodyChunk/Functions/hasDataLeft.html": {
    "href": "juptune/juptune/http/v1/Http1BodyChunk/Functions/hasDataLeft.html",
    "title": "Overloads for - hasDataLeft | Marmos Demo",
    "keywords": "Overloads for - hasDataLeft Module juptune.http.v1 Parent Http1BodyChunk hasDataLeft() bool hasDataLeft( ) Determines if there's more data left to read from the body. Notes Due to how the reader is implemented, if the body uses chunked transfer-encoding this will return true and an empty data slice will be provided which marks the end of the chunked data body, and only the next read will produce a false result. Returns true if there's more data left to read, false otherwise."
  },
  "juptune/juptune/http/v1/Http1Config/Functions/withMaxReadAttempts.html": {
    "href": "juptune/juptune/http/v1/Http1Config/Functions/withMaxReadAttempts.html",
    "title": "Overloads for - withMaxReadAttempts | Marmos Demo",
    "keywords": "Overloads for - withMaxReadAttempts Module juptune.http.v1 Parent Http1Config withMaxReadAttempts(v) Http1Config withMaxReadAttempts( size_t v )"
  },
  "juptune/juptune/http/v1/Http1Config/Functions/withReadTimeout.html": {
    "href": "juptune/juptune/http/v1/Http1Config/Functions/withReadTimeout.html",
    "title": "Overloads for - withReadTimeout | Marmos Demo",
    "keywords": "Overloads for - withReadTimeout Module juptune.http.v1 Parent Http1Config withReadTimeout(v) Http1Config withReadTimeout( Duration v )"
  },
  "juptune/juptune/http/v1/Http1Config/Functions/withWriteTimeout.html": {
    "href": "juptune/juptune/http/v1/Http1Config/Functions/withWriteTimeout.html",
    "title": "Overloads for - withWriteTimeout | Marmos Demo",
    "keywords": "Overloads for - withWriteTimeout Module juptune.http.v1 Parent Http1Config withWriteTimeout(v) Http1Config withWriteTimeout( Duration v )"
  },
  "juptune/juptune/http/v1/Http1Header/Functions/access.html": {
    "href": "juptune/juptune/http/v1/Http1Header/Functions/access.html",
    "title": "Overloads for - access | Marmos Demo",
    "keywords": "Overloads for - access Module juptune.http.v1 Parent Http1Header access(func) void access( <bug: unknown> func ) Accesses the header data. access(func) void access( <bug: unknown> func ) ditto."
  },
  "juptune/juptune/http/v1/Http1ReadResponseConfig/Functions/withIsBodyless.html": {
    "href": "juptune/juptune/http/v1/Http1ReadResponseConfig/Functions/withIsBodyless.html",
    "title": "Overloads for - withIsBodyless | Marmos Demo",
    "keywords": "Overloads for - withIsBodyless Module juptune.http.v1 Parent Http1ReadResponseConfig withIsBodyless(v) Http1ReadResponseConfig withIsBodyless( bool v )"
  },
  "juptune/juptune/http/v1/Http1ReaderBase/Functions/fetchData.html": {
    "href": "juptune/juptune/http/v1/Http1ReaderBase/Functions/fetchData.html",
    "title": "Overloads for - fetchData | Marmos Demo",
    "keywords": "Overloads for - fetchData Module juptune.http.v1 Parent Http1ReaderBase fetchData(bytesFetched, savedCursor) Result fetchData( size_t bytesFetched, size_t savedCursor )"
  },
  "juptune/juptune/http/v1/Http1ReaderBase/Functions/finishMessage.html": {
    "href": "juptune/juptune/http/v1/Http1ReaderBase/Functions/finishMessage.html",
    "title": "Overloads for - finishMessage | Marmos Demo",
    "keywords": "Overloads for - finishMessage Module juptune.http.v1 Parent Http1ReaderBase finishMessage(summary) Result finishMessage( Http1MessageSummary summary ) Acknowledges that the message has been fully read, and returns the summary of the message. State This function must be called when the reader is in the finalise state. After this function is called, the reader will be in the startLine state. Params summary Http1MessageSummary Stores the message summary. Throws Currently, nothing. This may change in the future if finishing a message requires I/O operations. Returns A Result describing if an error ocurred. Any Http1Error will contain a valid HTTP error response that can be sent to the client as-is."
  },
  "juptune/juptune/http/v1/Http1ReaderBase/Functions/processHeader.html": {
    "href": "juptune/juptune/http/v1/Http1ReaderBase/Functions/processHeader.html",
    "title": "Overloads for - processHeader | Marmos Demo",
    "keywords": "Overloads for - processHeader Module juptune.http.v1 Parent Http1ReaderBase processHeader(header) Result processHeader( Http1Header header )"
  },
  "juptune/juptune/http/v1/Http1ReaderBase/Functions/readBody.html": {
    "href": "juptune/juptune/http/v1/Http1ReaderBase/Functions/readBody.html",
    "title": "Overloads for - readBody | Marmos Demo",
    "keywords": "Overloads for - readBody Module juptune.http.v1 Parent Http1ReaderBase readBody(bodyChunk) Result readBody( Http1BodyChunk bodyChunk ) Reads a single chunk of body data. State This function must be called when the reader is in the body state. [Requests Only] After this function is called, the reader will be in the body state if there's more data to read, or the finalise state if there's no more data to read. [Responses Only] After this function is called, the reader will be in the body state if there's more data to read, or the maybeEndOfTrailers state if there's no more data to read. Notes This is intended to be a helper function used to read body data in a unified way, regardless of the body encoding for those that do not need nor care about having encoding-specific logic. Currently lower-level access to the body data is not provided, but will be in the future. This function makes use of the user buffer to determine the maximum amount of bytes that can be stored at once. In the future an overload that allows the user to provide a separate buffer will be provided. If the body is chunked, then the reader will automatically handle the chunking. If the body is chunked, a small quirk is that the reader will return an empty data slice when the \"empty marker\" chunk is reached, and only the next read will return false for hasDataLeft . In order to simplify the user code, the reader will always transition responses to the maybeEndOfTrailers state, even if the response is not using chunked transfer-encoding. Params bodyChunk Http1BodyChunk Stores the body chunk data. Throws If an error occurs, the reader will be in an invalid state and should not be used again. Anything the underlying I/O functions can throw. See juptune.event.io.IoError . Http1Error.badBodyChunk if the body is chunked and the client sent an invalid chunk. Http1Error.badBodyChunkSize if the body is chunked and the client sent an invalid chunk size. Http1Error.badTransport if it is determined that the transport layer is in a bad state, or if the sender appears to be malicious/poorly coded. Returns A Result describing if an error ocurred. Any Http1Error will contain a valid HTTP error response that can be sent to the client as-is."
  },
  "juptune/juptune/http/v1/Http1ReaderBase/Functions/readBodyBytes.html": {
    "href": "juptune/juptune/http/v1/Http1ReaderBase/Functions/readBodyBytes.html",
    "title": "Overloads for - readBodyBytes | Marmos Demo",
    "keywords": "Overloads for - readBodyBytes Module juptune.http.v1 Parent Http1ReaderBase readBodyBytes(chunk) Result readBodyBytes( Http1BodyChunk chunk )"
  },
  "juptune/juptune/http/v1/Http1ReaderBase/Functions/readBodyChunked.html": {
    "href": "juptune/juptune/http/v1/Http1ReaderBase/Functions/readBodyChunked.html",
    "title": "Overloads for - readBodyChunked | Marmos Demo",
    "keywords": "Overloads for - readBodyChunked Module juptune.http.v1 Parent Http1ReaderBase readBodyChunked(chunk) Result readBodyChunked( Http1BodyChunk chunk )"
  },
  "juptune/juptune/http/v1/Http1ReaderBase/Functions/readBodyContentLength.html": {
    "href": "juptune/juptune/http/v1/Http1ReaderBase/Functions/readBodyContentLength.html",
    "title": "Overloads for - readBodyContentLength | Marmos Demo",
    "keywords": "Overloads for - readBodyContentLength Module juptune.http.v1 Parent Http1ReaderBase readBodyContentLength(chunk) Result readBodyContentLength( Http1BodyChunk chunk )"
  },
  "juptune/juptune/http/v1/Http1ReaderBase/Functions/readChunkSize.html": {
    "href": "juptune/juptune/http/v1/Http1ReaderBase/Functions/readChunkSize.html",
    "title": "Overloads for - readChunkSize | Marmos Demo",
    "keywords": "Overloads for - readChunkSize Module juptune.http.v1 Parent Http1ReaderBase readChunkSize(chunkSize, chunkExtension) Result readChunkSize( size_t chunkSize, <bug: unknown> chunkExtension )"
  },
  "juptune/juptune/http/v1/Http1ReaderBase/Functions/readRequestLine.html": {
    "href": "juptune/juptune/http/v1/Http1ReaderBase/Functions/readRequestLine.html",
    "title": "Overloads for - readRequestLine | Marmos Demo",
    "keywords": "Overloads for - readRequestLine Module juptune.http.v1 Parent Http1ReaderBase readRequestLine(requestLine) Result readRequestLine( Http1RequestLine requestLine ) Reads the entire request line. This will configure the reader to be a request parser for the remainder of this message, until finishMessage is called. State This function must be called when the reader is in the startLine state. After this function is called, the reader will be in the maybeEndOfHeaders state. Params requestLine Http1RequestLine Stores the request line data. Throws If an error occurs, the reader will be in an invalid state and should not be used again. Anything the underlying I/O functions can throw. See juptune.event.io.IoError . Http1Error.dataExceedsBuffer if the request line is larger than the provided buffer. Http1Error.badRequestMethod if the request method is missing or invalid. Http1Error.badRequestPath if the request path is missing or invalid. Http1Error.badRequestVersion if the request version is missing, invalid, or specifies an unsupported version. Http1Error.badTransport if it is determined that the transport layer is in a bad state, or if the sender appears to be malicious/poorly coded. Returns A Result describing if an error ocurred. Any Http1Error will contain a valid HTTP error response that can be sent to the client as-is."
  },
  "juptune/juptune/http/v1/Http1ReaderBase/Functions/readResponseLine.html": {
    "href": "juptune/juptune/http/v1/Http1ReaderBase/Functions/readResponseLine.html",
    "title": "Overloads for - readResponseLine | Marmos Demo",
    "keywords": "Overloads for - readResponseLine Module juptune.http.v1 Parent Http1ReaderBase readResponseLine(responseLine, responseConfig) Result readResponseLine( Http1ResponseLine responseLine, Http1ReadResponseConfig responseConfig ) Reads the entire response line. This will configure the reader to be a response parser for the remainder of this message, until finishMessage is called. State This function must be called when the reader is in the startLine state. After this function is called, the reader will be in the maybeEndOfHeaders state. Notes Under certain circumstances (such as config.isBodyless being true ) the reader will act as if the response has no body, regardless of whatever the headers may suggest. You must still call readBody to follow the correct state transitions. Params responseLine Http1ResponseLine Stores the response line data. config <parameter not found> The configuration for reading in this response. Throws If an error occurs, the reader will be in an invalid state and should not be used again. Anything the underlying I/O functions can throw. See juptune.event.io.IoError . Http1Error.dataExceedsBuffer if the response line is larger than the provided buffer. Http1Error.badResponseVersion if the response version is missing, invalid, or specifies an unsupported version. Http1Error.badResponseCode if the response code is missing or invalid. Http1Error.badResponseReason if the response reason phrase is missing or invalid. Http1Error.badTransport if it is determined that the transport layer is in a bad state, or if the sender appears to be malicious/poorly coded. Returns A Result describing if an error ocurred. Any Http1Error will contain a valid HTTP error response"
  },
  "juptune/juptune/http/v1/Http1RequestLine/Functions/access.html": {
    "href": "juptune/juptune/http/v1/Http1RequestLine/Functions/access.html",
    "title": "Overloads for - access | Marmos Demo",
    "keywords": "Overloads for - access Module juptune.http.v1 Parent Http1RequestLine access(func) void access( <bug: unknown> func ) Accesses the request line data. access(func) void access( <bug: unknown> func ) ditto."
  },
  "juptune/juptune/http/v1/Http1ResponseLine/Functions/access.html": {
    "href": "juptune/juptune/http/v1/Http1ResponseLine/Functions/access.html",
    "title": "Overloads for - access | Marmos Demo",
    "keywords": "Overloads for - access Module juptune.http.v1 Parent Http1ResponseLine access(func) void access( <bug: unknown> func ) Accesses the response line data. access(func) void access( <bug: unknown> func ) ditto."
  },
  "juptune/juptune/http/v1/Http1WriterBase/Functions/bufferHeaderName.html": {
    "href": "juptune/juptune/http/v1/Http1WriterBase/Functions/bufferHeaderName.html",
    "title": "Overloads for - bufferHeaderName | Marmos Demo",
    "keywords": "Overloads for - bufferHeaderName Module juptune.http.v1 Parent Http1WriterBase bufferHeaderName(name, buffered) Result bufferHeaderName( <bug: unknown> name, <bug: unknown> buffered )"
  },
  "juptune/juptune/http/v1/Http1WriterBase/Functions/bufferedWrite.html": {
    "href": "juptune/juptune/http/v1/Http1WriterBase/Functions/bufferedWrite.html",
    "title": "Overloads for - bufferedWrite | Marmos Demo",
    "keywords": "Overloads for - bufferedWrite Module juptune.http.v1 Parent Http1WriterBase bufferedWrite(data) Result bufferedWrite( <bug: unknown> data )"
  },
  "juptune/juptune/http/v1/Http1WriterBase/Functions/finishBody.html": {
    "href": "juptune/juptune/http/v1/Http1WriterBase/Functions/finishBody.html",
    "title": "Overloads for - finishBody | Marmos Demo",
    "keywords": "Overloads for - finishBody Module juptune.http.v1 Parent Http1WriterBase finishBody() Result finishBody( ) Finishes the body. State The writer must be in the body state. [Requests Only] The writer will be in the finalise state after this function is called. [Responses Only] The writer will be in the trailers state after this function is called. Throws If an error occurs, the writer will be in an invalid state and should not be used again. Anything the underlying I/O functions can throw. See juptune.event.io.IoError . Http1Error.badTransport if the writer is using \"content-length\" for this message and the amount of data sent in the body is not equal to the amount of data specified by \"content-length\". Returns A Result describing if an error ocurred. Any Http1Error will contain a valid HTTP error response."
  },
  "juptune/juptune/http/v1/Http1WriterBase/Functions/finishMessage.html": {
    "href": "juptune/juptune/http/v1/Http1WriterBase/Functions/finishMessage.html",
    "title": "Overloads for - finishMessage | Marmos Demo",
    "keywords": "Overloads for - finishMessage Module juptune.http.v1 Parent Http1WriterBase finishMessage(summary) Result finishMessage( Http1MessageSummary summary ) Acknowledges that the entire HTTP message has been written, and returns a summary State The writer must be in the finalise state. The writer will be in the startLine state after this function is called. The writer will no longer be in request/response mode after this function is called. Notes This will always perform a flush. Params summary Http1MessageSummary The summary of the message. Throws If an error occurs, the writer will be in an invalid state and should not be used again. Anything the underlying I/O functions can throw. See juptune.event.io.IoError . Returns A Result describing if an error ocurred. Any Http1Error will contain a valid HTTP error response."
  },
  "juptune/juptune/http/v1/Http1WriterBase/Functions/flush.html": {
    "href": "juptune/juptune/http/v1/Http1WriterBase/Functions/flush.html",
    "title": "Overloads for - flush | Marmos Demo",
    "keywords": "Overloads for - flush Module juptune.http.v1 Parent Http1WriterBase flush() Result flush( )"
  },
  "juptune/juptune/http/v1/Http1WriterBase/Functions/processHeader.html": {
    "href": "juptune/juptune/http/v1/Http1WriterBase/Functions/processHeader.html",
    "title": "Overloads for - processHeader | Marmos Demo",
    "keywords": "Overloads for - processHeader Module juptune.http.v1 Parent Http1WriterBase processHeader(name, value) Result processHeader( <bug: unknown> name, <bug: unknown> value )"
  },
  "juptune/juptune/http/v1/Http1WriterBase/Functions/putBody.html": {
    "href": "juptune/juptune/http/v1/Http1WriterBase/Functions/putBody.html",
    "title": "Overloads for - putBody | Marmos Demo",
    "keywords": "Overloads for - putBody Module juptune.http.v1 Parent Http1WriterBase putBody(data) Result putBody( <bug: unknown> data ) Writes body data. State The writer must be in the body state. The writer will be in the body state after this function is called. Notes If the body encoding is BodyEncoding.hasContentLength then the writer will automatically keep track of how much data has been written, and will return an error if the user attempts to write more data than the content-length header specified. If the body encoding is BodyEncoding.isChunked then the writer will instead use a chunked encoded body, allowing the user to write as much data as they want. Currently the ability to write chunk extensions is not supported. Params data <bug: unknown> The data to write. Throws If an error occurs, the writer will be in an invalid state and should not be used again. Anything the underlying I/O functions can throw. See juptune.event.io.IoError . Http1Error.badTransport if the writer is using \"content-length\" for this message and the length of data will exceed the amount of data allowed by \"conent-length\". Http1Error.badTransport if the writer cannot determine how to encode the body."
  },
  "juptune/juptune/http/v1/Http1WriterBase/Functions/putBodyChunked.html": {
    "href": "juptune/juptune/http/v1/Http1WriterBase/Functions/putBodyChunked.html",
    "title": "Overloads for - putBodyChunked | Marmos Demo",
    "keywords": "Overloads for - putBodyChunked Module juptune.http.v1 Parent Http1WriterBase putBodyChunked(data) Result putBodyChunked( <bug: unknown> data )"
  },
  "juptune/juptune/http/v1/Http1WriterBase/Functions/putBodyContentLength.html": {
    "href": "juptune/juptune/http/v1/Http1WriterBase/Functions/putBodyContentLength.html",
    "title": "Overloads for - putBodyContentLength | Marmos Demo",
    "keywords": "Overloads for - putBodyContentLength Module juptune.http.v1 Parent Http1WriterBase putBodyContentLength(data) Result putBodyContentLength( <bug: unknown> data )"
  },
  "juptune/juptune/http/v1/Http1WriterBase/Functions/putRequestLine.html": {
    "href": "juptune/juptune/http/v1/Http1WriterBase/Functions/putRequestLine.html",
    "title": "Overloads for - putRequestLine | Marmos Demo",
    "keywords": "Overloads for - putRequestLine Module juptune.http.v1 Parent Http1WriterBase putRequestLine(method, path, httpVersion) Result putRequestLine( <bug: unknown> method, <bug: unknown> path, Http1Version httpVersion ) Writes an entire request line. This will configure this writer to be a request writer for the remainder of the message, until finishMessage is called. State The writer must be in the startLine state. The writer will be in the headers state after this function is called. Params method <bug: unknown> The method to use. path <bug: unknown> The path to use. httpVersion Http1Version The HTTP version to use. Throws If an error occurs, the writer will be in an invalid state and should not be used again. Anything the underlying I/O functions can throw. See juptune.event.io.IoError . Http1Error.badRequestMethod if the method is invalid. Http1Error.badRequestPath if the path is invalid. See http1IsPathValidForMethod . Http1Error.badRequestVersion if the HTTP version is invalid. Returns A Result describing if an error ocurred. Any Http1Error will contain a valid HTTP error response."
  },
  "juptune/juptune/http/v1/Http1WriterBase/Functions/putResponseLine.html": {
    "href": "juptune/juptune/http/v1/Http1WriterBase/Functions/putResponseLine.html",
    "title": "Overloads for - putResponseLine | Marmos Demo",
    "keywords": "Overloads for - putResponseLine Module juptune.http.v1 Parent Http1WriterBase putResponseLine(httpVersion, statusCode, reason) Result putResponseLine( Http1Version httpVersion, uint statusCode, <bug: unknown> reason ) Writes an entire response line. This will configure this writer to be a response writer for the remainder of the message, until finishMessage is called. State The writer must be in the startLine state. The writer will be in the headers state after this function is called. Params httpVersion Http1Version The HTTP version to use. statusCode uint The status code to use. reason <bug: unknown> The reason to use. Throws If an error occurs, the writer will be in an invalid state and should not be used again. Anything the underlying I/O functions can throw. See juptune.event.io.IoError . Http1Error.badRequestVersion if the HTTP version is invalid. Http1Error.badRequestReason if the reason is empty or invalid. Returns A Result describing if an error ocurred. Any Http1Error will contain a valid HTTP error response."
  },
  "juptune/juptune/http/v1/Http1WriterBase/Functions/putResultResponse.html": {
    "href": "juptune/juptune/http/v1/Http1WriterBase/Functions/putResultResponse.html",
    "title": "Overloads for - putResultResponse | Marmos Demo",
    "keywords": "Overloads for - putResultResponse Module juptune.http.v1 Parent Http1WriterBase putResultResponse(result) Result putResultResponse( Result result ) Writes the HTTP message stored within the provided result to the socket. State The writer must be in the startLine state. It will still be in the startLine state after this function is called. Assertions The provided result must be an Http1Error result. Notes This function assumes that the result was created by a Http1Reader or a Http1Writer , as these types ensure that the error response is a valid HTTP message. Technically there is nothing stopping the user from homebrewing their own Http1Error result, but this is not recommended. Params result Result The result to write. Throws If an error occurs, the writer will be in an invalid state and should not be used again. Anything the underlying I/O functions can throw. See juptune.event.io.IoError . Returns A Result describing if an error ocurred. Any Http1Error will contain a valid HTTP error response."
  },
  "juptune/juptune/http/v1/Overview.html": {
    "href": "juptune/juptune/http/v1/Overview.html",
    "title": "Module - juptune.http.v1 | Marmos Demo",
    "keywords": "Module - juptune.http.v1 Aliases Name Description Http1Reader Http1 over an insecure TCP socket. Http1Writer Http1 over an insecure TCP socket. Structs Name Description Http1BodyChunk Contains the contents of a body chunk. Http1Config Configuration for the Http1Reader and Http1Writer. Http1Header Contains the contents of a header. Http1MessageSummary Provides the overall summary of a request/response. Http1PinnedSlice A RAII struct that represents a slice of the Http1Reader's buffer that is pinned for user processing. Http1ReaderBase A low-level reader for the HTTP/1.0 and HTTP/1.1 protocols, operating directly on a socket. Http1ReadResponseConfig Configuration for reading a response. Http1RequestLine Contains the contents of a request line. Http1ResponseLine Contains the contents of a response line. Http1WriterBase A low-level writer for the HTTP/1.0 and HTTP/1.1 protocols. Functions Name Description http1CanonicalHeaderNameInPlace Helper functions http1IsPathValidForMethod Checks whether the given path is valid for the given method, taking into account whether the request is being proxied or not. isHttp1HeaderValue Checks if a string is a valid HTTP header value as defined by RFC 9110. isHttp1Reason Checks if a string is a valid HTTP status line reason as defined by RFC 9110. isHttp1Token Checks if a string is a valid HTTP 'token' as defined by RFC 9110. makePath Unit tests Variables Name Description g_headerNormaliseTable g_rfc9110CharType INVALID_HEADER_CHAR response"
  },
  "juptune/juptune/http/v1/Structs/Http1BodyChunk.html": {
    "href": "juptune/juptune/http/v1/Structs/Http1BodyChunk.html",
    "title": "Struct - Http1BodyChunk | Marmos Demo",
    "keywords": "Struct - Http1BodyChunk Module juptune.http.v1 public struct Http1BodyChunk { // Accesses the body chunk data. void access( <bug: unknown> func ) ; // ditto. void access( <bug: unknown> func ) ; // Determines if there's more data left to read from the body. bool hasDataLeft( ) ; // <bug: unknown> data; // bool dataLeft; // Http1PinnedSlice entireChunk; // <bug: unknown> extensionLine; } About Contains the contents of a body chunk. Notes This struct contains a pinned slice of the Http1Reader's buffer, so after processing the body chunk, the user code must release the slice by destroying the struct (e.g. setting it to .init , letting it go out of scope, etc.) In order to make it as clear as possible that data from this struct must not** be escaped, the access method is provided which enforces via the type system that string data is not escaped. You are not provided an entire chunk at once, but rather a slice of the chunk which is determined by either the size of the buffer, the size of the chunk, or the size of the data recieved by the incoming TCP packet. Functions Name Description access Accesses the body chunk data. hasDataLeft Determines if there's more data left to read from the body. Variables Name Description data dataLeft entireChunk extensionLine"
  },
  "juptune/juptune/http/v1/Structs/Http1Config.html": {
    "href": "juptune/juptune/http/v1/Structs/Http1Config.html",
    "title": "Struct - Http1Config | Marmos Demo",
    "keywords": "Struct - Http1Config Module juptune.http.v1 public struct Http1Config { // Http1Config withMaxReadAttempts( size_t v ) ; // Http1Config withReadTimeout( Duration v ) ; // Http1Config withWriteTimeout( Duration v ) ; // The maximum number of times the reader will attempt to read data from the socket before giving up and returning an error (in certain circumstances). size_t maxReadAttempts; // The default timeout for reading data Duration readTimeout; // The default timeout for writing data Duration writeTimeout; } About Configuration for the Http1Reader and Http1Writer. The main reason the config is combined is for simplicity, as the reader and writer are intended to be used together, and thus it makes sense to have a single config struct. This is especially apparent for higher level APIs that may not display the distinction between the reader and writer, and thus would benefit from a unified configuration object. Functions Name Description withMaxReadAttempts withReadTimeout withWriteTimeout Variables Name Description maxReadAttempts The maximum number of times the reader will attempt to read data from the socket before giving up and returning an error (in certain circumstances). readTimeout The default timeout for reading data writeTimeout The default timeout for writing data"
  },
  "juptune/juptune/http/v1/Structs/Http1Header.html": {
    "href": "juptune/juptune/http/v1/Structs/Http1Header.html",
    "title": "Struct - Http1Header | Marmos Demo",
    "keywords": "Struct - Http1Header Module juptune.http.v1 public struct Http1Header { // Accesses the header data. void access( <bug: unknown> func ) ; // ditto. void access( <bug: unknown> func ) ; // Http1PinnedSlice entireLine; // <bug: unknown> name; // <bug: unknown> value; } About Contains the contents of a header. Notes This struct contains a pinned slice of the Http1Reader's buffer, so after processing the header, the user code must release the slice by destroying the struct (e.g. setting it to .init , letting it go out of scope, etc.) In order to make it as clear as possible that data from this struct must not** be escaped, the access method is provided which enforces via the type system that string data is not escaped. Functions Name Description access Accesses the header data. Variables Name Description entireLine name value"
  },
  "juptune/juptune/http/v1/Structs/Http1MessageSummary.html": {
    "href": "juptune/juptune/http/v1/Structs/Http1MessageSummary.html",
    "title": "Struct - Http1MessageSummary | Marmos Demo",
    "keywords": "Struct - Http1MessageSummary Module juptune.http.v1 public struct Http1MessageSummary { // Represents the HTTP-level connection status. This is either determined by the version of the request, or by the `connection` header if one exists. bool connectionClosed; } About Provides the overall summary of a request/response. Variables Name Description connectionClosed Represents the HTTP-level connection status. This is either determined by the version of the request, or by the connection header if one exists."
  },
  "juptune/juptune/http/v1/Structs/Http1PinnedSlice.html": {
    "href": "juptune/juptune/http/v1/Structs/Http1PinnedSlice.html",
    "title": "Struct - Http1PinnedSlice | Marmos Demo",
    "keywords": "Struct - Http1PinnedSlice Module juptune.http.v1 public struct Http1PinnedSlice { } About A RAII struct that represents a slice of the Http1Reader's buffer that is pinned for user processing. Any active instance of this struct will prevent the Http1Reader from fetching more data into the buffer, and will prevent the Http1Reader from moving the buffer's contents around. This is to ensure that the user code can safely access the buffer without sudden changes to the buffer's contents."
  },
  "juptune/juptune/http/v1/Structs/Http1ReadResponseConfig.html": {
    "href": "juptune/juptune/http/v1/Structs/Http1ReadResponseConfig.html",
    "title": "Struct - Http1ReadResponseConfig | Marmos Demo",
    "keywords": "Struct - Http1ReadResponseConfig Module juptune.http.v1 public struct Http1ReadResponseConfig { // Http1ReadResponseConfig withIsBodyless( bool v ) ; // If set to true, then the response will be forced to be interpreted as a bodyless response, regardless of what the headers say. bool isBodyless; } About Configuration for reading a response. This is neccessary as the reader does not have context of the overall state of the request/response pipeline, so certain things must be configured by the user code. Functions Name Description withIsBodyless Variables Name Description isBodyless If set to true, then the response will be forced to be interpreted as a bodyless response, regardless of what the headers say."
  },
  "juptune/juptune/http/v1/Structs/Http1ReaderBase.html": {
    "href": "juptune/juptune/http/v1/Structs/Http1ReaderBase.html",
    "title": "Struct - Http1ReaderBase | Marmos Demo",
    "keywords": "Struct - Http1ReaderBase Module juptune.http.v1 public struct Http1ReaderBase { // Checks if the headers have ended. alias checkEndOfHeaders = <todo: marmos support pending>; // ditto. alias checkEndOfTrailers = <todo: marmos support pending>; // alias Machine = <todo: marmos support pending>; // Reads a single header. alias readHeader = <todo: marmos support pending>; // Ditto. alias readTrailer = <todo: marmos support pending>; // alias StateMachine = <todo: marmos support pending>; // Result fetchData( size_t bytesFetched, size_t savedCursor ) ; // Acknowledges that the message has been fully read, and returns the summary of the message. Result finishMessage( Http1MessageSummary summary ) ; // Result processHeader( Http1Header header ) ; // Reads a single chunk of body data. Result readBody( Http1BodyChunk bodyChunk ) ; // Result readBodyBytes( Http1BodyChunk chunk ) ; // Result readBodyChunked( Http1BodyChunk chunk ) ; // Result readBodyContentLength( Http1BodyChunk chunk ) ; // Result readChunkSize( size_t chunkSize, <bug: unknown> chunkExtension ) ; // Reads the entire request line. This will configure the reader to be a request parser for the remainder of this message, until `finishMessage` is called. Result readRequestLine( Http1RequestLine requestLine ) ; // Reads the entire response line. This will configure the reader to be a response parser for the remainder of this message, until `finishMessage` is called. Result readResponseLine( Http1ResponseLine responseLine, Http1ReadResponseConfig responseConfig ) ; } About A low-level reader for the HTTP/1.0 and HTTP/1.1 protocols, operating directly on a socket. Performance No explicit effort has been made to optimise this reader for performance, but it should be reasonably fast. No benchmarks have been done yet. Correctness, safety, and readability have been the main priorities. This is not to say that optimisations will not be made in the future, but they are not a priority at the moment. Memory wise the reader does not directly allocate heap memory as it uses user-provided buffers, however the kernal syscalls used for I/O can of course do whatever they want. Buffer The reader operates directly on a buffer provided by the user and does not directly allocate any memory. For status lines, the buffer must be able to hold the entire status line. For headers, the buffer must be able to hold the entire line for each singular header, however it does not need to be large enough to store the entire set of headers. For bodies using chunked transfer-encoding, the buffer must be able to hold the entire chunk size and extension line. For the actual body data the buffer is used to determine the maximum amount of bytes that can be stored before the user is forced to process the data, to make way for the rest of the chunk. For bodies using content-length, the buffer is used to determine the maximum amount of bytes that can be stored before the user is forced to process the data, to make way for the rest of the body. Due to the general reuse of this buffer, returned data structures will often be \"pinned\", which means that the user code must process the data and then release the pin by destroying the returned data structure, prior to this reader fetching any more data from the socket. Flow This reader is a low-level, state-machine API, and thus requires quite a lot involvement from the user code, as well as a magical incantation of calls to properly parse requests and responses. Any read function that returns a result will contain a valid HTTP response message that can be sent to the client as-is, if the result is an error. This is to allow the user code to quickly send an error response to the client without having to do any extra work. This struct contains plenty of checks to ensure that the user code is not doing any illegal state transitions, and will also try its best to protect the user from themself in terms of memory safety. RequestFlow 1.1. Call `readRequestLine` to read the request line. Process the request line and destroy the returned Http1RequestLine struct before continuing. 1.1. While checkEndOfHeaders returns false : Call readHeader to read a header. Process the header and destroy the returned Http1Header struct before continuing. 1.1. While readBody 's return value's hasDataLeft is true : Process the body chunk and destroy the returned Http1BodyChunk struct before continuing. 1.1. Call finishMessage to finish the request, and if the Http1MessageSummary.connectionClosed is false , loop back to step 1 (if applicable), otherwise cease using this reader and socket for communication. ResponseFlow Responses are slightly different as in some cases it requires external context from a previous request/response as well as the fact responses can contain trailers for chunked bodies, thus requiring an extra processing stage. 1.1. Call `readResponseLine` to read the response line. If the response is for a HEAD request, please ensure you set config.isBodyless to true for correct handling. Process the response line and destroy the returned Http1ResponseLine struct before continuing. 1.1. While checkEndOfHeaders returns false : Call readHeader to read a header. Process the header and destroy the returned Http1Header struct before continuing. 1.1. While readBody 's return value's hasDataLeft is true : Process the body chunk and destroy the returned Http1BodyChunk struct before continuing. 1.1. While checkEndOfTrailers returns false : Call readTrailer to read a trailer. Process the trailer and destroy the returned Http1Header struct before continuing. 1.1. Call finishMessage to finish the response, and if the Http1MessageSummary.connectionClosed is false , loop back to step 1 (if applicable), otherwise cease using this reader and socket for communication. Notes Currently reading body data requires the use of the provided user buffer, but in the future a separate set of functions will be provided that will allow the user to provide a separate buffer specifically for body data. Currently the reader does not provide a way to use gather/scatter I/O, but this is planned for the future, at least for body data. This reader will never close the socket as it does not \"own\" the socket resource, it is up to the user to handle this. No side effects beyond reading data from the socket will occur. You should ensure that messages are read in their entirety before responding to the client, as application errors are not the same as protocol errors, so the rest of the messages within the HTTP pipeline may be valid and should still be processed. Security The reader internally makes use of a type-system-based state machine to help ensure that bad state transitions can't occur. See Http1Config.maxReadAttempts for a description of a potential DoS vector. Issues The reader is currently in a very early state, and is not yet ready for production use. The current API is especially volatile and has no stability guarantees, as quite a lot of functionality is still missing or not yet exposed. The reader currently does not support any form of compression. The reader is not very extenstively tested. Specific security concerns haven't been investigated or addressed yet. The reader's currently priority is to handle the most common cases, and not to be a fully compliant for a while. Specific differences between HTTP/1.0 and HTTP/1.1 are not fully implemented yet. HTTP/1.1 has been the main focus so far. And of course there's all the other stuff I haven't thought of yet, such as more esoteric features and use cases. Aliases Name Description checkEndOfHeaders Checks if the headers have ended. checkEndOfTrailers ditto. Machine readHeader Reads a single header. readTrailer Ditto. StateMachine Functions Name Description fetchData finishMessage Acknowledges that the message has been fully read, and returns the summary of the message. processHeader readBody Reads a single chunk of body data. readBodyBytes readBodyChunked readBodyContentLength readChunkSize readRequestLine Reads the entire request line. This will configure the reader to be a request parser for the remainder of this message, until finishMessage is called. readResponseLine Reads the entire response line. This will configure the reader to be a response parser for the remainder of this message, until finishMessage is called."
  },
  "juptune/juptune/http/v1/Structs/Http1RequestLine.html": {
    "href": "juptune/juptune/http/v1/Structs/Http1RequestLine.html",
    "title": "Struct - Http1RequestLine | Marmos Demo",
    "keywords": "Struct - Http1RequestLine Module juptune.http.v1 public struct Http1RequestLine { // Accesses the request line data. void access( <bug: unknown> func ) ; // ditto. void access( <bug: unknown> func ) ; // Http1PinnedSlice entireLine; // The http version of the request line Http1Version httpVersion; // <bug: unknown> method; // ScopeUri path; } About Contains the contents of a request line. Notes This struct contains a pinned slice of the Http1Reader's buffer, so after processing the request line, the user code must release the slice by destroying the struct (e.g. setting it to .init , letting it go out of scope, etc.) In order to make it as clear as possible that data from this struct must not** be escaped, the access method is provided which enforces via the type system that string data is not escaped. Functions Name Description access Accesses the request line data. Variables Name Description entireLine httpVersion The http version of the request line method path"
  },
  "juptune/juptune/http/v1/Structs/Http1ResponseLine.html": {
    "href": "juptune/juptune/http/v1/Structs/Http1ResponseLine.html",
    "title": "Struct - Http1ResponseLine | Marmos Demo",
    "keywords": "Struct - Http1ResponseLine Module juptune.http.v1 public struct Http1ResponseLine { // Accesses the response line data. void access( <bug: unknown> func ) ; // ditto. void access( <bug: unknown> func ) ; // Http1PinnedSlice entireLine; // The http version of the response line Http1Version httpVersion; // <bug: unknown> reasonPhrase; // The status code of the response uint statusCode; } About Contains the contents of a response line. Notes This struct contains a pinned slice of the Http1Reader's buffer, so after processing the response line, the user code must release the slice by destroying the struct (e.g. setting it to .init , letting it go out of scope, etc.) In order to make it as clear as possible that data from this struct must not** be escaped, the access method is provided which enforces via the type system that string data is not escaped. Functions Name Description access Accesses the response line data. Variables Name Description entireLine httpVersion The http version of the response line reasonPhrase statusCode The status code of the response"
  },
  "juptune/juptune/http/v1/Structs/Http1WriterBase.html": {
    "href": "juptune/juptune/http/v1/Structs/Http1WriterBase.html",
    "title": "Struct - Http1WriterBase | Marmos Demo",
    "keywords": "Struct - Http1WriterBase Module juptune.http.v1 public struct Http1WriterBase { // Finishes the headers. alias finishHeaders = <todo: marmos support pending>; // Ditto. alias finishTrailers = <todo: marmos support pending>; // alias Machine = <todo: marmos support pending>; // Writes a single header. alias putHeader = <todo: marmos support pending>; // Ditto. alias putTrailer = <todo: marmos support pending>; // alias StateMachine = <todo: marmos support pending>; // Result bufferedWrite( <bug: unknown> data ) ; // Result bufferHeaderName( <bug: unknown> name, <bug: unknown> buffered ) ; // Finishes the body. Result finishBody( ) ; // Acknowledges that the entire HTTP message has been written, and returns a summary Result finishMessage( Http1MessageSummary summary ) ; // Result flush( ) ; // Result processHeader( <bug: unknown> name, <bug: unknown> value ) ; // Writes body data. Result putBody( <bug: unknown> data ) ; // Result putBodyChunked( <bug: unknown> data ) ; // Result putBodyContentLength( <bug: unknown> data ) ; // Writes an entire request line. This will configure this writer to be a request writer for the remainder of the message, until `finishMessage` is called. Result putRequestLine( <bug: unknown> method, <bug: unknown> path, Http1Version httpVersion ) ; // Writes an entire response line. This will configure this writer to be a response writer for the remainder of the message, until `finishMessage` is called. Result putResponseLine( Http1Version httpVersion, uint statusCode, <bug: unknown> reason ) ; // Writes the HTTP message stored within the provided `result` to the socket. Result putResultResponse( Result result ) ; } About A low-level writer for the HTTP/1.0 and HTTP/1.1 protocols. Performance No explicit effort has been made to optimise this writer for performance, but it should be reasonably fast. Memory wise the writer does not directly allocate heap memory as it uses the user-provided buffer, however the I/O calls can of course do whatever they want. If the writer would have to perform more than 1 flush due to the data being larger than the buffer, then the writer will perform two flushes at most - one for the currently buffered data, and one for the entire remaining data (without needing to buffer the remaining data directly). Buffer The writer operates directly on a buffer provided by the user. The size of the buffer dictates how many bytes can be stored before a flush is forced. Certain actions, such as calling finishMessage , will also force a flush. Generally the idea of the buffer is to reduce the amount of I/O calls, more than anything else. Flow The writer is a low-level, state-machine API, and thus requires quite a lot of involvement from the user as well as a magical incantation of calls to create fully valid HTTP messages. Similar to the Http1Reader any HttpError result will contain a valid HTTP response, however it's not really useful due to the fact these errors will almost always occur mid-message, making it impossible to relay the information to the client. Generally, if a protocol error is encountered simply close the connection. RequestFlow 1.1. Call `putRequestLine` to write the request line. 1.1. Call `putHeader` to write any headers. If you plan to write a body, you must either write a content-length header, or write a transfer-encoding: chunked header. 1.1. Call finishHeaders to finish the headers. 1.1. Call putBody to write any body data, if any. 1.1. Call finishBody to finish the body. 1.1. Call finishMessage to finish the message. ResponseFlow The response flow is very similar to the request flow except we need to account for being able to write trailer headers. 1.1. Call `putResponseLine` to write the response line. 1.1. Call `putHeader` to write any headers. If you plan to write a body, you must either write a content-length header, or write a transfer-encoding: chunked header. 1.1. Call finishHeaders to finish the headers. 1.1. Call putBody to write any body data, if any. 1.1. Call finishBody to finish the body. 1.1. If the transfer-encoding: chunked header was written: Call putTrailer to write any trailer headers, if any. 1.1. Call finishTrailer to finish the trailer headers. You must do this regardless of if you wrote/can use trailers. 1.1. Call finishMessage to finish the message. Notes The writer currently does not support scattered writes. The writer will never close the socket as it does not have ownership of it. Security The writer internally makes use of a type-system-based state machine to make it more difficult to perform a bad state transition. No other specific security issues are addressed beyond ensuring that the data written is valid according to RFC 9110 & 9112 Issues The writer is currently in an early state, and is not yet ready for production. The current API is not stable, and may change in the future. The writer does not natively perform compression. The writer is not very extensively tested yet. Specific differences between HTTP/1.0 and HTTP/1.1 are not fully implemented, as HTTP/1.1 has been the main focus. Aliases Name Description finishHeaders Finishes the headers. finishTrailers Ditto. Machine putHeader Writes a single header. putTrailer Ditto. StateMachine Functions Name Description bufferedWrite bufferHeaderName finishBody Finishes the body. finishMessage Acknowledges that the entire HTTP message has been written, and returns a summary flush processHeader putBody Writes body data. putBodyChunked putBodyContentLength putRequestLine Writes an entire request line. This will configure this writer to be a request writer for the remainder of the message, until finishMessage is called. putResponseLine Writes an entire response line. This will configure this writer to be a response writer for the remainder of the message, until finishMessage is called. putResultResponse Writes the HTTP message stored within the provided result to the socket."
  },
  "phobos/etc/c/curl/Functions/curl_easy_cleanup.html": {
    "href": "phobos/etc/c/curl/Functions/curl_easy_cleanup.html",
    "title": "Overloads for - curl_easy_cleanup | Marmos Demo",
    "keywords": "Overloads for - curl_easy_cleanup Module etc.c.curl curl_easy_cleanup(curl) void curl_easy_cleanup( <bug: unknown> curl )"
  },
  "phobos/etc/c/curl/Functions/curl_easy_duphandle.html": {
    "href": "phobos/etc/c/curl/Functions/curl_easy_duphandle.html",
    "title": "Overloads for - curl_easy_duphandle | Marmos Demo",
    "keywords": "Overloads for - curl_easy_duphandle Module etc.c.curl curl_easy_duphandle(curl) <bug: unknown> curl_easy_duphandle( <bug: unknown> curl ) Name: curl_easy_duphandle() Description Creates a new curl session handle with the same options set for the handle passed in. Duplicating a handle could only be a matter of cloning data and options, internal state info and things like persistant connections cannot be transfered. It is useful in multithreaded applications when you can run curl_easy_duphandle() for each new thread to avoid a series of identical curl_easy_setopt() invokes in every thread."
  },
  "phobos/etc/c/curl/Functions/curl_easy_escape.html": {
    "href": "phobos/etc/c/curl/Functions/curl_easy_escape.html",
    "title": "Overloads for - curl_easy_escape | Marmos Demo",
    "keywords": "Overloads for - curl_easy_escape Module etc.c.curl curl_easy_escape(handle, string, length) <bug: unknown> curl_easy_escape( <bug: unknown> handle, <bug: unknown> string, int length ) Name: curl_easy_escape() Description Escapes URL strings (converts all letters consider illegal in URLs to their %XX versions). This function returns a new allocated string or NULL if an error occurred."
  },
  "phobos/etc/c/curl/Functions/curl_easy_getinfo.html": {
    "href": "phobos/etc/c/curl/Functions/curl_easy_getinfo.html",
    "title": "Overloads for - curl_easy_getinfo | Marmos Demo",
    "keywords": "Overloads for - curl_easy_getinfo Module etc.c.curl curl_easy_getinfo(curl, info) CURLcode curl_easy_getinfo( <bug: unknown> curl, CURLINFO info ) Name: curl_easy_getinfo() Description Request internal information from the curl session with this function. The third argument MUST be a pointer to a long, a pointer to a char or a pointer to a double (as the documentation describes elsewhere). The data pointed to will be filled in accordingly and can be relied upon only if the function returns CURLE_OK. This function is intended to get used AFTER a performed transfer, all results from this function are undefined until the transfer is completed."
  },
  "phobos/etc/c/curl/Functions/curl_easy_init.html": {
    "href": "phobos/etc/c/curl/Functions/curl_easy_init.html",
    "title": "Overloads for - curl_easy_init | Marmos Demo",
    "keywords": "Overloads for - curl_easy_init Module etc.c.curl curl_easy_init() <bug: unknown> curl_easy_init( )"
  },
  "phobos/etc/c/curl/Functions/curl_easy_pause.html": {
    "href": "phobos/etc/c/curl/Functions/curl_easy_pause.html",
    "title": "Overloads for - curl_easy_pause | Marmos Demo",
    "keywords": "Overloads for - curl_easy_pause Module etc.c.curl curl_easy_pause(handle, bitmask) CURLcode curl_easy_pause( <bug: unknown> handle, int bitmask ) Name: curl_easy_pause() Description The curl_easy_pause function pauses or unpauses transfers. Select the new state by setting the bitmask, use the convenience defines below."
  },
  "phobos/etc/c/curl/Functions/curl_easy_perform.html": {
    "href": "phobos/etc/c/curl/Functions/curl_easy_perform.html",
    "title": "Overloads for - curl_easy_perform | Marmos Demo",
    "keywords": "Overloads for - curl_easy_perform Module etc.c.curl curl_easy_perform(curl) CURLcode curl_easy_perform( <bug: unknown> curl )"
  },
  "phobos/etc/c/curl/Functions/curl_easy_recv.html": {
    "href": "phobos/etc/c/curl/Functions/curl_easy_recv.html",
    "title": "Overloads for - curl_easy_recv | Marmos Demo",
    "keywords": "Overloads for - curl_easy_recv Module etc.c.curl curl_easy_recv(curl, buffer, buflen, n) CURLcode curl_easy_recv( <bug: unknown> curl, <bug: unknown> buffer, size_t buflen, <bug: unknown> n ) Name: curl_easy_recv() Description Receives data from the connected socket. Use after successful curl_easy_perform() with CURLOPT_CONNECT_ONLY option."
  },
  "phobos/etc/c/curl/Functions/curl_easy_reset.html": {
    "href": "phobos/etc/c/curl/Functions/curl_easy_reset.html",
    "title": "Overloads for - curl_easy_reset | Marmos Demo",
    "keywords": "Overloads for - curl_easy_reset Module etc.c.curl curl_easy_reset(curl) void curl_easy_reset( <bug: unknown> curl ) Name: curl_easy_reset() Description Re-initializes a CURL handle to the default values. This puts back the handle to the same state as it was in when it was just created. It does keep: live connections, the Session ID cache, the DNS cache and the cookies."
  },
  "phobos/etc/c/curl/Functions/curl_easy_send.html": {
    "href": "phobos/etc/c/curl/Functions/curl_easy_send.html",
    "title": "Overloads for - curl_easy_send | Marmos Demo",
    "keywords": "Overloads for - curl_easy_send Module etc.c.curl curl_easy_send(curl, buffer, buflen, n) CURLcode curl_easy_send( <bug: unknown> curl, <bug: unknown> buffer, size_t buflen, <bug: unknown> n ) Name: curl_easy_send() Description Sends data over the connected socket. Use after successful curl_easy_perform() with CURLOPT_CONNECT_ONLY option."
  },
  "phobos/etc/c/curl/Functions/curl_easy_setopt.html": {
    "href": "phobos/etc/c/curl/Functions/curl_easy_setopt.html",
    "title": "Overloads for - curl_easy_setopt | Marmos Demo",
    "keywords": "Overloads for - curl_easy_setopt Module etc.c.curl curl_easy_setopt(curl, option) CURLcode curl_easy_setopt( <bug: unknown> curl, CURLoption option )"
  },
  "phobos/etc/c/curl/Functions/curl_easy_strerror.html": {
    "href": "phobos/etc/c/curl/Functions/curl_easy_strerror.html",
    "title": "Overloads for - curl_easy_strerror | Marmos Demo",
    "keywords": "Overloads for - curl_easy_strerror Module etc.c.curl curl_easy_strerror(__anonymous) <bug: unknown> curl_easy_strerror( CURLcode __anonymous ) Name: curl_easy_strerror() Description The curl_easy_strerror function may be used to turn a CURLcode value into the equivalent human readable error string. This is useful for printing meaningful error messages."
  },
  "phobos/etc/c/curl/Functions/curl_easy_unescape.html": {
    "href": "phobos/etc/c/curl/Functions/curl_easy_unescape.html",
    "title": "Overloads for - curl_easy_unescape | Marmos Demo",
    "keywords": "Overloads for - curl_easy_unescape Module etc.c.curl curl_easy_unescape(handle, string, length, outlength) <bug: unknown> curl_easy_unescape( <bug: unknown> handle, <bug: unknown> string, int length, <bug: unknown> outlength ) Name: curl_easy_unescape() Description Unescapes URL encoding in strings (converts all %XX codes to their 8bit versions). This function returns a new allocated string or NULL if an error occurred. Conversion Note: On non-ASCII platforms the ASCII %XX codes are converted into the host encoding."
  },
  "phobos/etc/c/curl/Functions/curl_escape.html": {
    "href": "phobos/etc/c/curl/Functions/curl_escape.html",
    "title": "Overloads for - curl_escape | Marmos Demo",
    "keywords": "Overloads for - curl_escape Module etc.c.curl curl_escape(string, length) <bug: unknown> curl_escape( <bug: unknown> string, int length )"
  },
  "phobos/etc/c/curl/Functions/curl_formadd.html": {
    "href": "phobos/etc/c/curl/Functions/curl_formadd.html",
    "title": "Overloads for - curl_formadd | Marmos Demo",
    "keywords": "Overloads for - curl_formadd Module etc.c.curl curl_formadd(httppost, last_post) CURLFORMcode curl_formadd( <bug: unknown> httppost, <bug: unknown> last_post ) Name: curl_formadd() Description Pretty advanced function for building multi-part formposts. Each invoke adds one part that together construct a full post. Then use CURLOPT_HTTPPOST to send it off to libcurl."
  },
  "phobos/etc/c/curl/Functions/curl_formfree.html": {
    "href": "phobos/etc/c/curl/Functions/curl_formfree.html",
    "title": "Overloads for - curl_formfree | Marmos Demo",
    "keywords": "Overloads for - curl_formfree Module etc.c.curl curl_formfree(form) void curl_formfree( <bug: unknown> form ) Name: curl_formfree() Description Free a multipart formpost previously built with curl_formadd()."
  },
  "phobos/etc/c/curl/Functions/curl_formget.html": {
    "href": "phobos/etc/c/curl/Functions/curl_formget.html",
    "title": "Overloads for - curl_formget | Marmos Demo",
    "keywords": "Overloads for - curl_formget Module etc.c.curl curl_formget(form, arg, append) int curl_formget( <bug: unknown> form, <bug: unknown> arg, curl_formget_callback append ) Name: curl_formget() Description Serialize a curl_httppost struct built with curl_formadd(). Accepts a void pointer as second argument which will be passed to the curl_formget_callback function. Returns 0 on success."
  },
  "phobos/etc/c/curl/Functions/curl_free.html": {
    "href": "phobos/etc/c/curl/Functions/curl_free.html",
    "title": "Overloads for - curl_free | Marmos Demo",
    "keywords": "Overloads for - curl_free Module etc.c.curl curl_free(p) void curl_free( <bug: unknown> p ) Name: curl_free() Description Provided for de-allocation in the same translation unit that did the allocation. Added in libcurl 7.10"
  },
  "phobos/etc/c/curl/Functions/curl_getdate.html": {
    "href": "phobos/etc/c/curl/Functions/curl_getdate.html",
    "title": "Overloads for - curl_getdate | Marmos Demo",
    "keywords": "Overloads for - curl_getdate Module etc.c.curl curl_getdate(p, unused) time_t curl_getdate( <bug: unknown> p, <bug: unknown> unused ) Name: curl_getdate() Description Returns the time, in seconds since 1 Jan 1970 of the time string given in the first argument. The time argument in the second parameter is unused and should be set to NULL. linked-list structure for the CURLOPT_QUOTE option (and other)"
  },
  "phobos/etc/c/curl/Functions/curl_getenv.html": {
    "href": "phobos/etc/c/curl/Functions/curl_getenv.html",
    "title": "Overloads for - curl_getenv | Marmos Demo",
    "keywords": "Overloads for - curl_getenv Module etc.c.curl curl_getenv(variable) <bug: unknown> curl_getenv( <bug: unknown> variable ) Name: curl_getenv() Description Returns a malloc()'ed string that MUST be curl_free()ed after usage is complete. DEPRECATED - see lib/README.curlx"
  },
  "phobos/etc/c/curl/Functions/curl_global_cleanup.html": {
    "href": "phobos/etc/c/curl/Functions/curl_global_cleanup.html",
    "title": "Overloads for - curl_global_cleanup | Marmos Demo",
    "keywords": "Overloads for - curl_global_cleanup Module etc.c.curl curl_global_cleanup() void curl_global_cleanup( ) Name: curl_global_cleanup() Description curl_global_cleanup() should be invoked exactly once for each application that uses libcurl"
  },
  "phobos/etc/c/curl/Functions/curl_global_init.html": {
    "href": "phobos/etc/c/curl/Functions/curl_global_init.html",
    "title": "Overloads for - curl_global_init | Marmos Demo",
    "keywords": "Overloads for - curl_global_init Module etc.c.curl curl_global_init(flags) CURLcode curl_global_init( c_long flags ) Name: curl_global_init() Description curl_global_init() should be invoked exactly once for each application that uses libcurl and before any call of other libcurl functions. This function is not thread-safe!"
  },
  "phobos/etc/c/curl/Functions/curl_global_init_mem.html": {
    "href": "phobos/etc/c/curl/Functions/curl_global_init_mem.html",
    "title": "Overloads for - curl_global_init_mem | Marmos Demo",
    "keywords": "Overloads for - curl_global_init_mem Module etc.c.curl curl_global_init_mem(flags, m, f, r, s, c) CURLcode curl_global_init_mem( c_long flags, curl_malloc_callback m, curl_free_callback f, curl_realloc_callback r, curl_strdup_callback s, curl_calloc_callback c ) Name: curl_global_init_mem() Description curl_global_init() or curl_global_init_mem() should be invoked exactly once for each application that uses libcurl. This function can be used to initialize libcurl and set user defined memory management callback functions. Users can implement memory management routines to check for memory leaks, check for mis-use of the curl library etc. User registered callback routines with be invoked by this library instead of the system memory management routines like malloc, free etc."
  },
  "phobos/etc/c/curl/Functions/curl_multi_add_handle.html": {
    "href": "phobos/etc/c/curl/Functions/curl_multi_add_handle.html",
    "title": "Overloads for - curl_multi_add_handle | Marmos Demo",
    "keywords": "Overloads for - curl_multi_add_handle Module etc.c.curl curl_multi_add_handle(multi_handle, curl_handle) CURLMcode curl_multi_add_handle( <bug: unknown> multi_handle, <bug: unknown> curl_handle ) Name: curl_multi_add_handle() Desc: add a standard curl handle to the multi stack Returns: CURLMcode type, general multi error code."
  },
  "phobos/etc/c/curl/Functions/curl_multi_assign.html": {
    "href": "phobos/etc/c/curl/Functions/curl_multi_assign.html",
    "title": "Overloads for - curl_multi_assign | Marmos Demo",
    "keywords": "Overloads for - curl_multi_assign Module etc.c.curl curl_multi_assign(multi_handle, sockfd, sockp) CURLMcode curl_multi_assign( <bug: unknown> multi_handle, curl_socket_t sockfd, <bug: unknown> sockp ) Name: curl_multi_assign() Desc: This function sets an association in the multi handle between the given socket and a private pointer of the application. This is (only) useful for curl_multi_socket uses. Returns: CURLM error code."
  },
  "phobos/etc/c/curl/Functions/curl_multi_cleanup.html": {
    "href": "phobos/etc/c/curl/Functions/curl_multi_cleanup.html",
    "title": "Overloads for - curl_multi_cleanup | Marmos Demo",
    "keywords": "Overloads for - curl_multi_cleanup Module etc.c.curl curl_multi_cleanup(multi_handle) CURLMcode curl_multi_cleanup( <bug: unknown> multi_handle ) Name: curl_multi_cleanup() Desc: Cleans up and removes a whole multi stack. It does not free or touch any individual easy handles in any way. We need to define in what state those handles will be if this function is called in the middle of a transfer. Returns: CURLMcode type, general multi error code."
  },
  "phobos/etc/c/curl/Functions/curl_multi_fdset.html": {
    "href": "phobos/etc/c/curl/Functions/curl_multi_fdset.html",
    "title": "Overloads for - curl_multi_fdset | Marmos Demo",
    "keywords": "Overloads for - curl_multi_fdset Module etc.c.curl curl_multi_fdset(multi_handle, read_fd_set, write_fd_set, exc_fd_set, max_fd) CURLMcode curl_multi_fdset( <bug: unknown> multi_handle, <bug: unknown> read_fd_set, <bug: unknown> write_fd_set, <bug: unknown> exc_fd_set, <bug: unknown> max_fd )"
  },
  "phobos/etc/c/curl/Functions/curl_multi_info_read.html": {
    "href": "phobos/etc/c/curl/Functions/curl_multi_info_read.html",
    "title": "Overloads for - curl_multi_info_read | Marmos Demo",
    "keywords": "Overloads for - curl_multi_info_read Module etc.c.curl curl_multi_info_read(multi_handle, msgs_in_queue) <bug: unknown> curl_multi_info_read( <bug: unknown> multi_handle, <bug: unknown> msgs_in_queue ) Name: curl_multi_info_read() Desc: Ask the multi handle if there's any messages/informationals from the individual transfers. Messages include informationals such as error code from the transfer or just the fact that a transfer is completed. More details on these should be written down as well. Repeated calls to this function will return a new struct each time, until a special \"end of msgs\" struct is returned as a signal that there is no more to get at this point. The data the returned pointer points to will not survive calling curl_multi_cleanup(). The 'CURLMsg' struct is meant to be very simple and only contain very basic informations. If more involved information is wanted, we will provide the particular \"transfer handle\" in that struct and that should/could/would be used in subsequent curl_easy_getinfo() calls (or similar). The point being that we must never expose complex structs to applications, as then we'll undoubtably get backwards compatibility problems in the future. Returns: A pointer to a filled-in struct, or NULL if it failed or ran out of structs. It also writes the number of messages left in the queue (after this read) in the integer the second argument points to."
  },
  "phobos/etc/c/curl/Functions/curl_multi_init.html": {
    "href": "phobos/etc/c/curl/Functions/curl_multi_init.html",
    "title": "Overloads for - curl_multi_init | Marmos Demo",
    "keywords": "Overloads for - curl_multi_init Module etc.c.curl curl_multi_init() <bug: unknown> curl_multi_init( ) Name: curl_multi_init() Desc: inititalize multi-style curl usage Returns: a new CURLM handle to use in all 'curl_multi' functions."
  },
  "phobos/etc/c/curl/Functions/curl_multi_perform.html": {
    "href": "phobos/etc/c/curl/Functions/curl_multi_perform.html",
    "title": "Overloads for - curl_multi_perform | Marmos Demo",
    "keywords": "Overloads for - curl_multi_perform Module etc.c.curl curl_multi_perform(multi_handle, running_handles) CURLMcode curl_multi_perform( <bug: unknown> multi_handle, <bug: unknown> running_handles ) Name: curl_multi_perform() Desc: When the app thinks there's data available for curl it calls this function to read/write whatever there is right now. This returns as soon as the reads and writes are done. This function does not require that there actually is data available for reading or that data can be written, it can be called just in case. It returns the number of handles that still transfer data in the second argument's integer-pointer. Returns: CURLMcode type, general multi error code. NOTE that this only returns errors etc regarding the whole multi stack. There might still have occurred problems on invidual transfers even when this returns OK."
  },
  "phobos/etc/c/curl/Functions/curl_multi_remove_handle.html": {
    "href": "phobos/etc/c/curl/Functions/curl_multi_remove_handle.html",
    "title": "Overloads for - curl_multi_remove_handle | Marmos Demo",
    "keywords": "Overloads for - curl_multi_remove_handle Module etc.c.curl curl_multi_remove_handle(multi_handle, curl_handle) CURLMcode curl_multi_remove_handle( <bug: unknown> multi_handle, <bug: unknown> curl_handle ) Name: curl_multi_remove_handle() Desc: removes a curl handle from the multi stack again Returns: CURLMcode type, general multi error code."
  },
  "phobos/etc/c/curl/Functions/curl_multi_setopt.html": {
    "href": "phobos/etc/c/curl/Functions/curl_multi_setopt.html",
    "title": "Overloads for - curl_multi_setopt | Marmos Demo",
    "keywords": "Overloads for - curl_multi_setopt Module etc.c.curl curl_multi_setopt(multi_handle, option) CURLMcode curl_multi_setopt( <bug: unknown> multi_handle, CURLMoption option ) Name: curl_multi_setopt() Desc: Sets options for the multi handle. Returns: CURLM error code."
  },
  "phobos/etc/c/curl/Functions/curl_multi_socket.html": {
    "href": "phobos/etc/c/curl/Functions/curl_multi_socket.html",
    "title": "Overloads for - curl_multi_socket | Marmos Demo",
    "keywords": "Overloads for - curl_multi_socket Module etc.c.curl curl_multi_socket(multi_handle, s, running_handles) CURLMcode curl_multi_socket( <bug: unknown> multi_handle, curl_socket_t s, <bug: unknown> running_handles ) ditto Name: curl_multi_timer_callback Desc: Called by libcurl whenever the library detects a change in the maximum number of milliseconds the app is allowed to wait before curl_multi_socket() or curl_multi_perform() must be called (to allow libcurl's timed events to take place). Returns: The callback should return zero."
  },
  "phobos/etc/c/curl/Functions/curl_multi_socket_action.html": {
    "href": "phobos/etc/c/curl/Functions/curl_multi_socket_action.html",
    "title": "Overloads for - curl_multi_socket_action | Marmos Demo",
    "keywords": "Overloads for - curl_multi_socket_action Module etc.c.curl curl_multi_socket_action(multi_handle, s, ev_bitmask, running_handles) CURLMcode curl_multi_socket_action( <bug: unknown> multi_handle, curl_socket_t s, int ev_bitmask, <bug: unknown> running_handles ) ditto Name: curl_multi_timer_callback Desc: Called by libcurl whenever the library detects a change in the maximum number of milliseconds the app is allowed to wait before curl_multi_socket() or curl_multi_perform() must be called (to allow libcurl's timed events to take place). Returns: The callback should return zero."
  },
  "phobos/etc/c/curl/Functions/curl_multi_socket_all.html": {
    "href": "phobos/etc/c/curl/Functions/curl_multi_socket_all.html",
    "title": "Overloads for - curl_multi_socket_all | Marmos Demo",
    "keywords": "Overloads for - curl_multi_socket_all Module etc.c.curl curl_multi_socket_all(multi_handle, running_handles) CURLMcode curl_multi_socket_all( <bug: unknown> multi_handle, <bug: unknown> running_handles ) ditto Name: curl_multi_timer_callback Desc: Called by libcurl whenever the library detects a change in the maximum number of milliseconds the app is allowed to wait before curl_multi_socket() or curl_multi_perform() must be called (to allow libcurl's timed events to take place). Returns: The callback should return zero."
  },
  "phobos/etc/c/curl/Functions/curl_multi_strerror.html": {
    "href": "phobos/etc/c/curl/Functions/curl_multi_strerror.html",
    "title": "Overloads for - curl_multi_strerror | Marmos Demo",
    "keywords": "Overloads for - curl_multi_strerror Module etc.c.curl curl_multi_strerror(__anonymous) <bug: unknown> curl_multi_strerror( CURLMcode __anonymous ) Name: curl_multi_strerror() Desc: The curl_multi_strerror function may be used to turn a CURLMcode value into the equivalent human readable error string. This is useful for printing meaningful error messages. Returns: A pointer to a zero-terminated error message."
  },
  "phobos/etc/c/curl/Functions/curl_multi_timeout.html": {
    "href": "phobos/etc/c/curl/Functions/curl_multi_timeout.html",
    "title": "Overloads for - curl_multi_timeout | Marmos Demo",
    "keywords": "Overloads for - curl_multi_timeout Module etc.c.curl curl_multi_timeout(multi_handle, milliseconds) CURLMcode curl_multi_timeout( <bug: unknown> multi_handle, <bug: unknown> milliseconds ) This macro below was added in 7.16.3 to push users who recompile to use the new curl_multi_socket_action() instead of the old curl_multi_socket() Name: curl_multi_timeout() Desc: Returns the maximum number of milliseconds the app is allowed to wait before curl_multi_socket() or curl_multi_perform() must be called (to allow libcurl's timed events to take place). Returns: CURLM error code."
  },
  "phobos/etc/c/curl/Functions/curl_share_cleanup.html": {
    "href": "phobos/etc/c/curl/Functions/curl_share_cleanup.html",
    "title": "Overloads for - curl_share_cleanup | Marmos Demo",
    "keywords": "Overloads for - curl_share_cleanup Module etc.c.curl curl_share_cleanup(__anonymous) CURLSHcode curl_share_cleanup( <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/curl/Functions/curl_share_init.html": {
    "href": "phobos/etc/c/curl/Functions/curl_share_init.html",
    "title": "Overloads for - curl_share_init | Marmos Demo",
    "keywords": "Overloads for - curl_share_init Module etc.c.curl curl_share_init() <bug: unknown> curl_share_init( )"
  },
  "phobos/etc/c/curl/Functions/curl_share_setopt.html": {
    "href": "phobos/etc/c/curl/Functions/curl_share_setopt.html",
    "title": "Overloads for - curl_share_setopt | Marmos Demo",
    "keywords": "Overloads for - curl_share_setopt Module etc.c.curl curl_share_setopt(__anonymous, option) CURLSHcode curl_share_setopt( <bug: unknown> __anonymous, CURLSHoption option )"
  },
  "phobos/etc/c/curl/Functions/curl_share_strerror.html": {
    "href": "phobos/etc/c/curl/Functions/curl_share_strerror.html",
    "title": "Overloads for - curl_share_strerror | Marmos Demo",
    "keywords": "Overloads for - curl_share_strerror Module etc.c.curl curl_share_strerror(__anonymous) <bug: unknown> curl_share_strerror( CURLSHcode __anonymous ) Name: curl_share_strerror() Description The curl_share_strerror function may be used to turn a CURLSHcode value into the equivalent human readable error string. This is useful for printing meaningful error messages."
  },
  "phobos/etc/c/curl/Functions/curl_slist_append.html": {
    "href": "phobos/etc/c/curl/Functions/curl_slist_append.html",
    "title": "Overloads for - curl_slist_append | Marmos Demo",
    "keywords": "Overloads for - curl_slist_append Module etc.c.curl curl_slist_append(__anonymous, __anonymous) <bug: unknown> curl_slist_append( <bug: unknown> __anonymous, <bug: unknown> __anonymous ) Name: curl_slist_append() Description Appends a string to a linked list. If no list exists, it will be created first. Returns the new list, after appending. linked-list structure for the CURLOPT_QUOTE option (and other)"
  },
  "phobos/etc/c/curl/Functions/curl_slist_free_all.html": {
    "href": "phobos/etc/c/curl/Functions/curl_slist_free_all.html",
    "title": "Overloads for - curl_slist_free_all | Marmos Demo",
    "keywords": "Overloads for - curl_slist_free_all Module etc.c.curl curl_slist_free_all(__anonymous) void curl_slist_free_all( <bug: unknown> __anonymous ) Name: curl_slist_free_all() Description free a previously built curl_slist. linked-list structure for the CURLOPT_QUOTE option (and other)"
  },
  "phobos/etc/c/curl/Functions/curl_strequal.html": {
    "href": "phobos/etc/c/curl/Functions/curl_strequal.html",
    "title": "Overloads for - curl_strequal | Marmos Demo",
    "keywords": "Overloads for - curl_strequal Module etc.c.curl curl_strequal(s1, s2) int curl_strequal( <bug: unknown> s1, <bug: unknown> s2 ) curl_strequal() and curl_strnequal() are subject for removal in a future libcurl, see lib/README.curlx for details"
  },
  "phobos/etc/c/curl/Functions/curl_strnequal.html": {
    "href": "phobos/etc/c/curl/Functions/curl_strnequal.html",
    "title": "Overloads for - curl_strnequal | Marmos Demo",
    "keywords": "Overloads for - curl_strnequal Module etc.c.curl curl_strnequal(s1, s2, n) int curl_strnequal( <bug: unknown> s1, <bug: unknown> s2, size_t n ) ditto curl_strequal() and curl_strnequal() are subject for removal in a future libcurl, see lib/README.curlx for details"
  },
  "phobos/etc/c/curl/Functions/curl_unescape.html": {
    "href": "phobos/etc/c/curl/Functions/curl_unescape.html",
    "title": "Overloads for - curl_unescape | Marmos Demo",
    "keywords": "Overloads for - curl_unescape Module etc.c.curl curl_unescape(string, length) <bug: unknown> curl_unescape( <bug: unknown> string, int length ) the previous version"
  },
  "phobos/etc/c/curl/Functions/curl_version.html": {
    "href": "phobos/etc/c/curl/Functions/curl_version.html",
    "title": "Overloads for - curl_version | Marmos Demo",
    "keywords": "Overloads for - curl_version Module etc.c.curl curl_version() <bug: unknown> curl_version( ) Name: curl_version() Description Returns a static ascii string of the libcurl version."
  },
  "phobos/etc/c/curl/Functions/curl_version_info.html": {
    "href": "phobos/etc/c/curl/Functions/curl_version_info.html",
    "title": "Overloads for - curl_version_info | Marmos Demo",
    "keywords": "Overloads for - curl_version_info Module etc.c.curl curl_version_info(__anonymous) <bug: unknown> curl_version_info( CURLversion __anonymous ) Name: curl_version_info() Description This function returns a pointer to a static copy of the version info struct. See above."
  },
  "phobos/etc/c/curl/Overview.html": {
    "href": "phobos/etc/c/curl/Overview.html",
    "title": "Module - etc.c.curl | Marmos Demo",
    "keywords": "Module - etc.c.curl About This is an interface to the libcurl library. Converted to D from curl headers by $(LINK2 http://www.digitalmars.com/d/2.0/htod.html, htod) and cleaned up by Jonas Drewsen (jdrewsen) Windows x86 note A DMD compatible libcurl static library can be downloaded from the dlang.org $(LINK2 http://dlang.org/download.html, download page). Copyright (C) 1998 - 2010, Daniel Stenberg, <daniel@haxx.se&gt;, et al. This software is licensed as described in the file COPYING, which you should have received as part of this distribution. The terms are also available at $(LINK http://curl.haxx.se/docs/copyright.html). You may opt to use, copy, modify, merge, publish, distribute and/or sell copies of the Software, and permit persons to whom the Software is furnished to do so, under the terms of the COPYING file. This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. Aliases Name Description CURL curl_calloc_callback ditto curl_chunk_bgn_callback if splitting of data transfer is enabled, this callback is called before download of an individual chunk started. Note that parameter \"remains\" works only for FTP wildcard downloading (for now), otherwise is not used curl_chunk_end_callback If splitting of data transfer is enabled this callback is called after download of an individual chunk finished. Note! After this callback was set then it have to be called FOR ALL chunks. Even if downloading of this chunk was skipped in CHUNK_BGN_FUNC. This is the reason why we don't need \"transfer_info\" parameter in this callback and we are not interested in \"remains\" parameter too. curl_closepolicy curl_conv_callback This prototype applies to all conversion callbacks curl_debug_callback curl_fnmatch_callback callback type for wildcard downloading pattern matching. If the string matches the pattern, return CURL_FNMATCHFUNC_MATCH value, etc. curl_formget_callback callback function for curl_formget() The void arg pointer will be the one passed as second argument to curl_formget(). The character buffer passed to it must not be freed. Should return the buffer length passed to it as the argument \"len\" on success. curl_free_callback ditto curl_ftpauth curl_ftpccc curl_ftpcreatedir curl_ftpmethod curl_infotype curl_ioctl_callback curl_lock_access curl_lock_data curl_lock_function curl_malloc_callback The following typedef's are signatures of malloc, free, realloc, strdup and calloc respectively. Function pointers of these types can be passed to the curl_global_init_mem() function to set user defined memory management callback routines. curl_multi_timer_callback private callback pointer curl_off_t Data type definition of curl_off_t. curl_opensocket_callback curl_progress_callback curl_proxytype curl_read_callback curl_realloc_callback ditto curl_seek_callback curl_socket_callback private socket pointer curl_socket_t jdrewsen - Get socket alias from std.socket CURL_SOCKET_TIMEOUT curl_sockopt_callback curl_sshkeycallback curl_ssl_ctx_callback actually an OpenSSL SSL_CTX curl_strdup_callback ditto curl_TimeCond curl_unlock_function curl_usessl curl_version_info_data curl_write_callback CURLcode curlfiletype CURLFORMcode CURLformoption CURLINFO curliocmd curlioerr CURLM CURLMcode CURLMoption CURLMSG CURLoption CURLSH CURLSHcode CURLSHoption curlsocktype CURLversion fd_set Name: curl_multi_fdset() FUNCTIONPOINT ditto LONG name is uppercase CURLOPT_\\((LT)name\\)(GT), type is one of the defined CURLOPTTYPE_\\((LT)type\\)(GT) number is unique identifier OBJECTPOINT ditto OFF_T ditto Structs Name Description curl_certinfo info about the certificate chain, only for OpenSSL builds. Asked for with CURLOPT_CERTINFO / CURLINFO_CERTINFO curl_fileinfo Content of this structure depends on information which is known and is achievable (e.g. by FTP LIST parsing). Please see the url_easy_setopt(3) man page for callbacks returning this structure -- some fields are mandatory, some others are optional. The FLAG field has special meaning. curl_forms structure to be used as parameter for CURLFORM_ARRAY curl_httppost curl_khkey curl_slist linked-list structure for the CURLOPT_QUOTE option (and other) curl_sockaddr addrlen was a socklen_t type before 7.18.0 but it turned really ugly and painful on the systems that lack this type CURLMsg Functions Name Description curl_easy_cleanup curl_easy_duphandle Name: curl_easy_duphandle() curl_easy_escape Name: curl_easy_escape() curl_easy_getinfo Name: curl_easy_getinfo() curl_easy_init curl_easy_pause Name: curl_easy_pause() curl_easy_perform curl_easy_recv Name: curl_easy_recv() curl_easy_reset Name: curl_easy_reset() curl_easy_send Name: curl_easy_send() curl_easy_setopt curl_easy_strerror Name: curl_easy_strerror() curl_easy_unescape Name: curl_easy_unescape() curl_escape curl_formadd Name: curl_formadd() curl_formfree Name: curl_formfree() curl_formget Name: curl_formget() curl_free Name: curl_free() curl_getdate Name: curl_getdate() curl_getenv Name: curl_getenv() curl_global_cleanup Name: curl_global_cleanup() curl_global_init Name: curl_global_init() curl_global_init_mem Name: curl_global_init_mem() curl_multi_add_handle Name: curl_multi_add_handle() curl_multi_assign Name: curl_multi_assign() curl_multi_cleanup Name: curl_multi_cleanup() curl_multi_fdset curl_multi_info_read Name: curl_multi_info_read() curl_multi_init Name: curl_multi_init() curl_multi_perform Name: curl_multi_perform() curl_multi_remove_handle Name: curl_multi_remove_handle() curl_multi_setopt Name: curl_multi_setopt() curl_multi_socket ditto curl_multi_socket_action ditto curl_multi_socket_all ditto curl_multi_strerror Name: curl_multi_strerror() curl_multi_timeout This macro below was added in 7.16.3 to push users who recompile to use the new curl_multi_socket_action() instead of the old curl_multi_socket() curl_share_cleanup curl_share_init curl_share_setopt curl_share_strerror Name: curl_share_strerror() curl_slist_append Name: curl_slist_append() curl_slist_free_all Name: curl_slist_free_all() curl_strequal curl_strequal() and curl_strnequal() are subject for removal in a future libcurl, see lib/README.curlx for details curl_strnequal ditto curl_unescape the previous version curl_version Name: curl_version() curl_version_info Name: curl_version_info() Variables Name Description CURL_ERROR_SIZE CURL_MAX_HTTP_HEADER The only reason to have a max limit for this is to avoid the risk of a bad server feeding libcurl with a never-ending header that will cause reallocs infinitely CURL_MAX_WRITE_SIZE Tests have proven that 20K is a very bad buffer size for uploads on Windows, while 16K for some odd reason performed a lot better. We do the ifndef check to allow this value to easier be changed at build time for those who feel adventurous. The practical minimum is about 400 bytes since libcurl uses a buffer of this size as a scratch area (unrelated to network send operations). CURL_SOCKET_BAD jdrewsen - Would like to get socket error constant from std.socket by it is private atm. CURL_SOCKET_BAD CURL_WRITEFUNC_PAUSE This is a magic return code for the write callback that, when returned, will signal libcurl to pause receiving on the current transfer. CURLINFO_DOUBLE CURLINFO_HTTP_CODE CURLINFO_RESPONSE_CODE is the new name for the option previously known as CURLINFO_HTTP_CODE CURLINFO_LONG CURLINFO_MASK CURLINFO_SLIST CURLINFO_STRING CURLINFO_TYPEMASK CURLM_CALL_MULTI_SOCKET just to make code nicer when using curl_multi_socket() you can now check for CURLM_CALL_MULTI_SOCKET too in the same style it works for curl_multi_perform() and CURLM_CALL_MULTI_PERFORM CURLOPT_HEADERDATA ditto CURLOPT_READDATA ditto CURLOPT_RTSPHEADER ditto CURLOPT_SERVER_RESPONSE_TIMEOUT CURLOPT_WRITEDATA three convenient \"aliases\" that follow the name scheme better CURLOPTTYPE_FUNCTIONPOINT ditto CURLOPTTYPE_LONG long may be 32 or 64 bits, but we should never depend on anything else but 32 CURLOPTTYPE_OBJECTPOINT ditto CURLOPTTYPE_OFF_T ditto CURLVERSION_NOW The 'CURLVERSION_NOW' is the symbolic name meant to be used by basically all programs ever that want to get version information. It is meant to be a built-in version number for what kind of struct the caller expects. If the struct ever changes, we redefine the NOW to another enum from above. HTTPPOST_BUFFER upload file from buffer HTTPPOST_CALLBACK upload file contents by using the regular read callback to get the data and pass the given pointer as custom pointer HTTPPOST_FILENAME specified content is a file name HTTPPOST_PTRBUFFER upload file from pointer contents HTTPPOST_PTRCONTENTS contents is only stored pointer do not free in formfree HTTPPOST_PTRNAME name is only stored pointer do not free in formfree HTTPPOST_READFILE specified content is a file name LIBCURL_COPYRIGHT This is the global package copyright LIBCURL_TIMESTAMP This is the date and time when the full source package was created. The timestamp is not stored in git, as the timestamp is properly set in the tarballs by the maketgz script. LIBCURL_VERSION This is the version number of the libcurl package from which this header file origins: LIBCURL_VERSION_MAJOR The numeric version number is also available \"in parts\" by using these constants LIBCURL_VERSION_MINOR ditto LIBCURL_VERSION_NUM This is the numeric version of the libcurl version number, meant for easier parsing and comparions by programs. The LIBCURL_VERSION_NUM define will always follow this syntax: LIBCURL_VERSION_PATCH ditto"
  },
  "phobos/etc/c/curl/Structs/CURLMsg.html": {
    "href": "phobos/etc/c/curl/Structs/CURLMsg.html",
    "title": "Struct - CURLMsg | Marmos Demo",
    "keywords": "Struct - CURLMsg Module etc.c.curl public struct CURLMsg { // _N31 data; // the handle it concerns <bug: unknown> easy_handle; // what this message means CURLMSG msg; } Variables Name Description data easy_handle the handle it concerns msg what this message means"
  },
  "phobos/etc/c/curl/Structs/curl_certinfo.html": {
    "href": "phobos/etc/c/curl/Structs/curl_certinfo.html",
    "title": "Struct - curl_certinfo | Marmos Demo",
    "keywords": "Struct - curl_certinfo Module etc.c.curl public struct curl_certinfo { // for each index in this array, there's a linked list with textual information in the format \"name: value\" <bug: unknown> certinfo; // number of certificates with information int num_of_certs; } About info about the certificate chain, only for OpenSSL builds. Asked for with CURLOPT_CERTINFO / CURLINFO_CERTINFO linked-list structure for the CURLOPT_QUOTE option (and other) Variables Name Description certinfo for each index in this array, there's a linked list with textual information in the format \"name: value\" num_of_certs number of certificates with information"
  },
  "phobos/etc/c/curl/Structs/curl_fileinfo.html": {
    "href": "phobos/etc/c/curl/Structs/curl_fileinfo.html",
    "title": "Struct - curl_fileinfo | Marmos Demo",
    "keywords": "Struct - curl_fileinfo Module etc.c.curl public struct curl_fileinfo { // <bug: unknown> b_data; // size_t b_size; // size_t b_used; // <bug: unknown> filename; // curlfiletype filetype; // uint flags; // int gid; // c_long hardlinks; // uint perm; // curl_off_t size; // _N2 strings; // time_t time; // int uid; } About Content of this structure depends on information which is known and is achievable (e.g. by FTP LIST parsing). Please see the url_easy_setopt(3) man page for callbacks returning this structure -- some fields are mandatory, some others are optional. The FLAG field has special meaning. Variables Name Description b_data b_size b_used filename filetype flags gid hardlinks perm size strings time uid"
  },
  "phobos/etc/c/curl/Structs/curl_forms.html": {
    "href": "phobos/etc/c/curl/Structs/curl_forms.html",
    "title": "Struct - curl_forms | Marmos Demo",
    "keywords": "Struct - curl_forms Module etc.c.curl public struct curl_forms { // CURLformoption option; // <bug: unknown> value; } About structure to be used as parameter for CURLFORM_ARRAY Variables Name Description option value"
  },
  "phobos/etc/c/curl/Structs/curl_httppost.html": {
    "href": "phobos/etc/c/curl/Structs/curl_httppost.html",
    "title": "Struct - curl_httppost | Marmos Demo",
    "keywords": "Struct - curl_httppost Module etc.c.curl public struct curl_httppost { // pointer to allocated buffer contents <bug: unknown> buffer; // length of buffer field c_long bufferlength; // list of extra headers for this form <bug: unknown> contentheader; // pointer to allocated data contents <bug: unknown> contents; // length of contents field c_long contentslength; // Content-Type <bug: unknown> contenttype; // as defined below c_long flags; // if one field name has more than one file, this link should link to following files <bug: unknown> more; // pointer to allocated name <bug: unknown> name; // length of name length c_long namelength; // next entry in the list <bug: unknown> next; // The file name to show. If not set, the actual file name will be used (if this is a file part) <bug: unknown> showfilename; // custom pointer used for HTTPPOST_CALLBACK posts <bug: unknown> userp; } Variables Name Description buffer pointer to allocated buffer contents bufferlength length of buffer field contentheader list of extra headers for this form contents pointer to allocated data contents contentslength length of contents field contenttype Content-Type flags as defined below more if one field name has more than one file, this link should link to following files name pointer to allocated name namelength length of name length next next entry in the list showfilename The file name to show. If not set, the actual file name will be used (if this is a file part) userp custom pointer used for HTTPPOST_CALLBACK posts"
  },
  "phobos/etc/c/curl/Structs/curl_khkey.html": {
    "href": "phobos/etc/c/curl/Structs/curl_khkey.html",
    "title": "Struct - curl_khkey | Marmos Demo",
    "keywords": "Struct - curl_khkey Module etc.c.curl public struct curl_khkey { // points to a zero-terminated string encoded with base64 if len is zero, otherwise to the \"raw\" data <bug: unknown> key; // CurlKHType keytype; // size_t len; } Variables Name Description key points to a zero-terminated string encoded with base64 if len is zero, otherwise to the \"raw\" data keytype len"
  },
  "phobos/etc/c/curl/Structs/curl_slist.html": {
    "href": "phobos/etc/c/curl/Structs/curl_slist.html",
    "title": "Struct - curl_slist | Marmos Demo",
    "keywords": "Struct - curl_slist Module etc.c.curl public struct curl_slist { // <bug: unknown> data; // <bug: unknown> next; } About linked-list structure for the CURLOPT_QUOTE option (and other) Variables Name Description data next"
  },
  "phobos/etc/c/curl/Structs/curl_sockaddr.html": {
    "href": "phobos/etc/c/curl/Structs/curl_sockaddr.html",
    "title": "Struct - curl_sockaddr | Marmos Demo",
    "keywords": "Struct - curl_sockaddr Module etc.c.curl public struct curl_sockaddr { // sockaddr addr; // addrlen was a socklen_t type before 7.18.0 but it turned really ugly and painful on the systems that lack this type uint addrlen; // int family; // int protocol; // int socktype; } About addrlen was a socklen_t type before 7.18.0 but it turned really ugly and painful on the systems that lack this type Variables Name Description addr addrlen addrlen was a socklen_t type before 7.18.0 but it turned really ugly and painful on the systems that lack this type family protocol socktype"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLAllocConnect.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLAllocConnect.html",
    "title": "Overloads for - SQLAllocConnect | Marmos Demo",
    "keywords": "Overloads for - SQLAllocConnect Module etc.c.odbc.sql SQLAllocConnect(__anonymous, __anonymous) SQLRETURN SQLAllocConnect( SQLHENV __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLAllocEnv.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLAllocEnv.html",
    "title": "Overloads for - SQLAllocEnv | Marmos Demo",
    "keywords": "Overloads for - SQLAllocEnv Module etc.c.odbc.sql SQLAllocEnv(__anonymous) SQLRETURN SQLAllocEnv( <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLAllocHandle.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLAllocHandle.html",
    "title": "Overloads for - SQLAllocHandle | Marmos Demo",
    "keywords": "Overloads for - SQLAllocHandle Module etc.c.odbc.sql SQLAllocHandle(__anonymous, __anonymous, __anonymous) SQLRETURN SQLAllocHandle( SQLSMALLINT __anonymous, SQLHANDLE __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLAllocStmt.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLAllocStmt.html",
    "title": "Overloads for - SQLAllocStmt | Marmos Demo",
    "keywords": "Overloads for - SQLAllocStmt Module etc.c.odbc.sql SQLAllocStmt(__anonymous, __anonymous) SQLRETURN SQLAllocStmt( SQLHDBC __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLBindCol.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLBindCol.html",
    "title": "Overloads for - SQLBindCol | Marmos Demo",
    "keywords": "Overloads for - SQLBindCol Module etc.c.odbc.sql SQLBindCol(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLBindCol( SQLHSTMT __anonymous, SQLUSMALLINT __anonymous, SQLSMALLINT __anonymous, SQLPOINTER __anonymous, SQLLEN __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLBindParam.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLBindParam.html",
    "title": "Overloads for - SQLBindParam | Marmos Demo",
    "keywords": "Overloads for - SQLBindParam Module etc.c.odbc.sql SQLBindParam(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLBindParam( SQLHSTMT __anonymous, SQLUSMALLINT __anonymous, SQLSMALLINT __anonymous, SQLSMALLINT __anonymous, SQLULEN __anonymous, SQLSMALLINT __anonymous, SQLPOINTER __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLCancel.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLCancel.html",
    "title": "Overloads for - SQLCancel | Marmos Demo",
    "keywords": "Overloads for - SQLCancel Module etc.c.odbc.sql SQLCancel(__anonymous) SQLRETURN SQLCancel( SQLHSTMT __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLCloseCursor.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLCloseCursor.html",
    "title": "Overloads for - SQLCloseCursor | Marmos Demo",
    "keywords": "Overloads for - SQLCloseCursor Module etc.c.odbc.sql SQLCloseCursor(__anonymous) SQLRETURN SQLCloseCursor( SQLHSTMT __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLColAttribute.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLColAttribute.html",
    "title": "Overloads for - SQLColAttribute | Marmos Demo",
    "keywords": "Overloads for - SQLColAttribute Module etc.c.odbc.sql SQLColAttribute(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLColAttribute( SQLHSTMT __anonymous, SQLUSMALLINT __anonymous, SQLUSMALLINT __anonymous, SQLPOINTER __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLPOINTER __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLColumns.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLColumns.html",
    "title": "Overloads for - SQLColumns | Marmos Demo",
    "keywords": "Overloads for - SQLColumns Module etc.c.odbc.sql SQLColumns(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLColumns( SQLHSTMT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLConnect.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLConnect.html",
    "title": "Overloads for - SQLConnect | Marmos Demo",
    "keywords": "Overloads for - SQLConnect Module etc.c.odbc.sql SQLConnect(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLConnect( SQLHDBC __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLCopyDesc.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLCopyDesc.html",
    "title": "Overloads for - SQLCopyDesc | Marmos Demo",
    "keywords": "Overloads for - SQLCopyDesc Module etc.c.odbc.sql SQLCopyDesc(__anonymous, __anonymous) SQLRETURN SQLCopyDesc( SQLHDESC __anonymous, SQLHDESC __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLDataSources.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLDataSources.html",
    "title": "Overloads for - SQLDataSources | Marmos Demo",
    "keywords": "Overloads for - SQLDataSources Module etc.c.odbc.sql SQLDataSources(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLDataSources( SQLHENV __anonymous, SQLUSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLDescribeCol.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLDescribeCol.html",
    "title": "Overloads for - SQLDescribeCol | Marmos Demo",
    "keywords": "Overloads for - SQLDescribeCol Module etc.c.odbc.sql SQLDescribeCol(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLDescribeCol( SQLHSTMT __anonymous, SQLUSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLDisconnect.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLDisconnect.html",
    "title": "Overloads for - SQLDisconnect | Marmos Demo",
    "keywords": "Overloads for - SQLDisconnect Module etc.c.odbc.sql SQLDisconnect(__anonymous) SQLRETURN SQLDisconnect( SQLHDBC __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLEndTran.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLEndTran.html",
    "title": "Overloads for - SQLEndTran | Marmos Demo",
    "keywords": "Overloads for - SQLEndTran Module etc.c.odbc.sql SQLEndTran(__anonymous, __anonymous, __anonymous) SQLRETURN SQLEndTran( SQLSMALLINT __anonymous, SQLHANDLE __anonymous, SQLSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLError.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLError.html",
    "title": "Overloads for - SQLError | Marmos Demo",
    "keywords": "Overloads for - SQLError Module etc.c.odbc.sql SQLError(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLError( SQLHENV __anonymous, SQLHDBC __anonymous, SQLHSTMT __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLExecDirect.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLExecDirect.html",
    "title": "Overloads for - SQLExecDirect | Marmos Demo",
    "keywords": "Overloads for - SQLExecDirect Module etc.c.odbc.sql SQLExecDirect(__anonymous, __anonymous, __anonymous) SQLRETURN SQLExecDirect( SQLHSTMT __anonymous, <bug: unknown> __anonymous, SQLINTEGER __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLExecute.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLExecute.html",
    "title": "Overloads for - SQLExecute | Marmos Demo",
    "keywords": "Overloads for - SQLExecute Module etc.c.odbc.sql SQLExecute(__anonymous) SQLRETURN SQLExecute( SQLHSTMT __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLFetch.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLFetch.html",
    "title": "Overloads for - SQLFetch | Marmos Demo",
    "keywords": "Overloads for - SQLFetch Module etc.c.odbc.sql SQLFetch(__anonymous) SQLRETURN SQLFetch( SQLHSTMT __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLFetchScroll.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLFetchScroll.html",
    "title": "Overloads for - SQLFetchScroll | Marmos Demo",
    "keywords": "Overloads for - SQLFetchScroll Module etc.c.odbc.sql SQLFetchScroll(__anonymous, __anonymous, __anonymous) SQLRETURN SQLFetchScroll( SQLHSTMT __anonymous, SQLSMALLINT __anonymous, SQLROWOFFSET __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLFreeConnect.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLFreeConnect.html",
    "title": "Overloads for - SQLFreeConnect | Marmos Demo",
    "keywords": "Overloads for - SQLFreeConnect Module etc.c.odbc.sql SQLFreeConnect(__anonymous) SQLRETURN SQLFreeConnect( SQLHDBC __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLFreeEnv.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLFreeEnv.html",
    "title": "Overloads for - SQLFreeEnv | Marmos Demo",
    "keywords": "Overloads for - SQLFreeEnv Module etc.c.odbc.sql SQLFreeEnv(__anonymous) SQLRETURN SQLFreeEnv( SQLHENV __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLFreeHandle.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLFreeHandle.html",
    "title": "Overloads for - SQLFreeHandle | Marmos Demo",
    "keywords": "Overloads for - SQLFreeHandle Module etc.c.odbc.sql SQLFreeHandle(__anonymous, __anonymous) SQLRETURN SQLFreeHandle( SQLSMALLINT __anonymous, SQLHANDLE __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLFreeStmt.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLFreeStmt.html",
    "title": "Overloads for - SQLFreeStmt | Marmos Demo",
    "keywords": "Overloads for - SQLFreeStmt Module etc.c.odbc.sql SQLFreeStmt(__anonymous, __anonymous) SQLRETURN SQLFreeStmt( SQLHSTMT __anonymous, SQLUSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLGetConnectAttr.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLGetConnectAttr.html",
    "title": "Overloads for - SQLGetConnectAttr | Marmos Demo",
    "keywords": "Overloads for - SQLGetConnectAttr Module etc.c.odbc.sql SQLGetConnectAttr(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLGetConnectAttr( SQLHDBC __anonymous, SQLINTEGER __anonymous, SQLPOINTER __anonymous, SQLINTEGER __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLGetConnectOption.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLGetConnectOption.html",
    "title": "Overloads for - SQLGetConnectOption | Marmos Demo",
    "keywords": "Overloads for - SQLGetConnectOption Module etc.c.odbc.sql SQLGetConnectOption(__anonymous, __anonymous, __anonymous) SQLRETURN SQLGetConnectOption( SQLHDBC __anonymous, SQLUSMALLINT __anonymous, SQLPOINTER __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLGetCursorName.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLGetCursorName.html",
    "title": "Overloads for - SQLGetCursorName | Marmos Demo",
    "keywords": "Overloads for - SQLGetCursorName Module etc.c.odbc.sql SQLGetCursorName(__anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLGetCursorName( SQLHSTMT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLGetData.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLGetData.html",
    "title": "Overloads for - SQLGetData | Marmos Demo",
    "keywords": "Overloads for - SQLGetData Module etc.c.odbc.sql SQLGetData(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLGetData( SQLHSTMT __anonymous, SQLUSMALLINT __anonymous, SQLSMALLINT __anonymous, SQLPOINTER __anonymous, SQLLEN __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLGetDescField.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLGetDescField.html",
    "title": "Overloads for - SQLGetDescField | Marmos Demo",
    "keywords": "Overloads for - SQLGetDescField Module etc.c.odbc.sql SQLGetDescField(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLGetDescField( SQLHDESC __anonymous, SQLSMALLINT __anonymous, SQLSMALLINT __anonymous, SQLPOINTER __anonymous, SQLINTEGER __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLGetDescRec.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLGetDescRec.html",
    "title": "Overloads for - SQLGetDescRec | Marmos Demo",
    "keywords": "Overloads for - SQLGetDescRec Module etc.c.odbc.sql SQLGetDescRec(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLGetDescRec( SQLHDESC __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLGetDiagField.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLGetDiagField.html",
    "title": "Overloads for - SQLGetDiagField | Marmos Demo",
    "keywords": "Overloads for - SQLGetDiagField Module etc.c.odbc.sql SQLGetDiagField(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLGetDiagField( SQLSMALLINT __anonymous, SQLHANDLE __anonymous, SQLSMALLINT __anonymous, SQLSMALLINT __anonymous, SQLPOINTER __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLGetDiagRec.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLGetDiagRec.html",
    "title": "Overloads for - SQLGetDiagRec | Marmos Demo",
    "keywords": "Overloads for - SQLGetDiagRec Module etc.c.odbc.sql SQLGetDiagRec(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLGetDiagRec( SQLSMALLINT __anonymous, SQLHANDLE __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLGetEnvAttr.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLGetEnvAttr.html",
    "title": "Overloads for - SQLGetEnvAttr | Marmos Demo",
    "keywords": "Overloads for - SQLGetEnvAttr Module etc.c.odbc.sql SQLGetEnvAttr(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLGetEnvAttr( SQLHENV __anonymous, SQLINTEGER __anonymous, SQLPOINTER __anonymous, SQLINTEGER __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLGetFunctions.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLGetFunctions.html",
    "title": "Overloads for - SQLGetFunctions | Marmos Demo",
    "keywords": "Overloads for - SQLGetFunctions Module etc.c.odbc.sql SQLGetFunctions(__anonymous, __anonymous, __anonymous) SQLRETURN SQLGetFunctions( SQLHDBC __anonymous, SQLUSMALLINT __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLGetInfo.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLGetInfo.html",
    "title": "Overloads for - SQLGetInfo | Marmos Demo",
    "keywords": "Overloads for - SQLGetInfo Module etc.c.odbc.sql SQLGetInfo(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLGetInfo( SQLHDBC __anonymous, SQLUSMALLINT __anonymous, SQLPOINTER __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLGetStmtAttr.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLGetStmtAttr.html",
    "title": "Overloads for - SQLGetStmtAttr | Marmos Demo",
    "keywords": "Overloads for - SQLGetStmtAttr Module etc.c.odbc.sql SQLGetStmtAttr(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLGetStmtAttr( SQLHSTMT __anonymous, SQLINTEGER __anonymous, SQLPOINTER __anonymous, SQLINTEGER __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLGetStmtOption.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLGetStmtOption.html",
    "title": "Overloads for - SQLGetStmtOption | Marmos Demo",
    "keywords": "Overloads for - SQLGetStmtOption Module etc.c.odbc.sql SQLGetStmtOption(__anonymous, __anonymous, __anonymous) SQLRETURN SQLGetStmtOption( SQLHSTMT __anonymous, SQLUSMALLINT __anonymous, SQLPOINTER __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLGetTypeInfo.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLGetTypeInfo.html",
    "title": "Overloads for - SQLGetTypeInfo | Marmos Demo",
    "keywords": "Overloads for - SQLGetTypeInfo Module etc.c.odbc.sql SQLGetTypeInfo(__anonymous, __anonymous) SQLRETURN SQLGetTypeInfo( SQLHSTMT __anonymous, SQLSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLNumResultCols.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLNumResultCols.html",
    "title": "Overloads for - SQLNumResultCols | Marmos Demo",
    "keywords": "Overloads for - SQLNumResultCols Module etc.c.odbc.sql SQLNumResultCols(__anonymous, __anonymous) SQLRETURN SQLNumResultCols( SQLHSTMT __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLParamData.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLParamData.html",
    "title": "Overloads for - SQLParamData | Marmos Demo",
    "keywords": "Overloads for - SQLParamData Module etc.c.odbc.sql SQLParamData(__anonymous, __anonymous) SQLRETURN SQLParamData( SQLHSTMT __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLPrepare.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLPrepare.html",
    "title": "Overloads for - SQLPrepare | Marmos Demo",
    "keywords": "Overloads for - SQLPrepare Module etc.c.odbc.sql SQLPrepare(__anonymous, __anonymous, __anonymous) SQLRETURN SQLPrepare( SQLHSTMT __anonymous, <bug: unknown> __anonymous, SQLINTEGER __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLPutData.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLPutData.html",
    "title": "Overloads for - SQLPutData | Marmos Demo",
    "keywords": "Overloads for - SQLPutData Module etc.c.odbc.sql SQLPutData(__anonymous, __anonymous, __anonymous) SQLRETURN SQLPutData( SQLHSTMT __anonymous, SQLPOINTER __anonymous, SQLLEN __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLRowCount.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLRowCount.html",
    "title": "Overloads for - SQLRowCount | Marmos Demo",
    "keywords": "Overloads for - SQLRowCount Module etc.c.odbc.sql SQLRowCount(__anonymous, __anonymous) SQLRETURN SQLRowCount( SQLHSTMT __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLSetConnectAttr.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLSetConnectAttr.html",
    "title": "Overloads for - SQLSetConnectAttr | Marmos Demo",
    "keywords": "Overloads for - SQLSetConnectAttr Module etc.c.odbc.sql SQLSetConnectAttr(__anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLSetConnectAttr( SQLHDBC __anonymous, SQLINTEGER __anonymous, SQLPOINTER __anonymous, SQLINTEGER __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLSetConnectOption.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLSetConnectOption.html",
    "title": "Overloads for - SQLSetConnectOption | Marmos Demo",
    "keywords": "Overloads for - SQLSetConnectOption Module etc.c.odbc.sql SQLSetConnectOption(__anonymous, __anonymous, __anonymous) SQLRETURN SQLSetConnectOption( SQLHDBC __anonymous, SQLUSMALLINT __anonymous, SQLULEN __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLSetCursorName.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLSetCursorName.html",
    "title": "Overloads for - SQLSetCursorName | Marmos Demo",
    "keywords": "Overloads for - SQLSetCursorName Module etc.c.odbc.sql SQLSetCursorName(__anonymous, __anonymous, __anonymous) SQLRETURN SQLSetCursorName( SQLHSTMT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLSetDescField.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLSetDescField.html",
    "title": "Overloads for - SQLSetDescField | Marmos Demo",
    "keywords": "Overloads for - SQLSetDescField Module etc.c.odbc.sql SQLSetDescField(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLSetDescField( SQLHDESC __anonymous, SQLSMALLINT __anonymous, SQLSMALLINT __anonymous, SQLPOINTER __anonymous, SQLINTEGER __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLSetDescRec.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLSetDescRec.html",
    "title": "Overloads for - SQLSetDescRec | Marmos Demo",
    "keywords": "Overloads for - SQLSetDescRec Module etc.c.odbc.sql SQLSetDescRec(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLSetDescRec( SQLHDESC __anonymous, SQLSMALLINT __anonymous, SQLSMALLINT __anonymous, SQLSMALLINT __anonymous, SQLLEN __anonymous, SQLSMALLINT __anonymous, SQLSMALLINT __anonymous, SQLPOINTER __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLSetEnvAttr.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLSetEnvAttr.html",
    "title": "Overloads for - SQLSetEnvAttr | Marmos Demo",
    "keywords": "Overloads for - SQLSetEnvAttr Module etc.c.odbc.sql SQLSetEnvAttr(__anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLSetEnvAttr( SQLHENV __anonymous, SQLINTEGER __anonymous, SQLPOINTER __anonymous, SQLINTEGER __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLSetParam.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLSetParam.html",
    "title": "Overloads for - SQLSetParam | Marmos Demo",
    "keywords": "Overloads for - SQLSetParam Module etc.c.odbc.sql SQLSetParam(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLSetParam( SQLHSTMT __anonymous, SQLUSMALLINT __anonymous, SQLSMALLINT __anonymous, SQLSMALLINT __anonymous, SQLULEN __anonymous, SQLSMALLINT __anonymous, SQLPOINTER __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLSetStmtAttr.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLSetStmtAttr.html",
    "title": "Overloads for - SQLSetStmtAttr | Marmos Demo",
    "keywords": "Overloads for - SQLSetStmtAttr Module etc.c.odbc.sql SQLSetStmtAttr(__anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLSetStmtAttr( SQLHSTMT __anonymous, SQLINTEGER __anonymous, SQLPOINTER __anonymous, SQLINTEGER __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLSetStmtOption.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLSetStmtOption.html",
    "title": "Overloads for - SQLSetStmtOption | Marmos Demo",
    "keywords": "Overloads for - SQLSetStmtOption Module etc.c.odbc.sql SQLSetStmtOption(__anonymous, __anonymous, __anonymous) SQLRETURN SQLSetStmtOption( SQLHSTMT __anonymous, SQLUSMALLINT __anonymous, SQLROWCOUNT __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLSpecialColumns.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLSpecialColumns.html",
    "title": "Overloads for - SQLSpecialColumns | Marmos Demo",
    "keywords": "Overloads for - SQLSpecialColumns Module etc.c.odbc.sql SQLSpecialColumns(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLSpecialColumns( SQLHSTMT __anonymous, SQLUSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, SQLUSMALLINT __anonymous, SQLUSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLStatistics.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLStatistics.html",
    "title": "Overloads for - SQLStatistics | Marmos Demo",
    "keywords": "Overloads for - SQLStatistics Module etc.c.odbc.sql SQLStatistics(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLStatistics( SQLHSTMT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, SQLUSMALLINT __anonymous, SQLUSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLTables.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLTables.html",
    "title": "Overloads for - SQLTables | Marmos Demo",
    "keywords": "Overloads for - SQLTables Module etc.c.odbc.sql SQLTables(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLTables( SQLHSTMT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Functions/SQLTransact.html": {
    "href": "phobos/etc/c/odbc/sql/Functions/SQLTransact.html",
    "title": "Overloads for - SQLTransact | Marmos Demo",
    "keywords": "Overloads for - SQLTransact Module etc.c.odbc.sql SQLTransact(__anonymous, __anonymous, __anonymous) SQLRETURN SQLTransact( SQLHENV __anonymous, SQLHDBC __anonymous, SQLUSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sql/Overview.html": {
    "href": "phobos/etc/c/odbc/sql/Overview.html",
    "title": "Module - etc.c.odbc.sql | Marmos Demo",
    "keywords": "Module - etc.c.odbc.sql About Windows API header module Translated from MinGW Windows headers License: $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0) Source: $(PHOBOSSRC etc/c/odbc/_sql.d) Declarations for interfacing with the ODBC library. See_Also: $(LINK2 https://docs.microsoft.com/en-us/sql/odbc/reference/syntax/odbc-api-reference, ODBC API Reference on MSDN) Functions Name Description SQLAllocConnect SQLAllocEnv SQLAllocHandle SQLAllocStmt SQLBindCol SQLBindParam SQLCancel SQLCloseCursor SQLColAttribute SQLColumns SQLConnect SQLCopyDesc SQLDataSources SQLDescribeCol SQLDisconnect SQLEndTran SQLError SQLExecDirect SQLExecute SQLFetch SQLFetchScroll SQLFreeConnect SQLFreeEnv SQLFreeHandle SQLFreeStmt SQLGetConnectAttr SQLGetConnectOption SQLGetCursorName SQLGetData SQLGetDescField SQLGetDescRec SQLGetDiagField SQLGetDiagRec SQLGetEnvAttr SQLGetFunctions SQLGetInfo SQLGetStmtAttr SQLGetStmtOption SQLGetTypeInfo SQLNumResultCols SQLParamData SQLPrepare SQLPutData SQLRowCount SQLSetConnectAttr SQLSetConnectOption SQLSetCursorName SQLSetDescField SQLSetDescRec SQLSetEnvAttr SQLSetParam SQLSetStmtAttr SQLSetStmtOption SQLSpecialColumns SQLStatistics SQLTables SQLTransact Variables Name Description ODBCVER SQL_ACCESSIBLE_PROCEDURES SQL_ACCESSIBLE_TABLES SQL_ALL_TYPES SQL_ALTER_TABLE SQL_AM_CONNECTION SQL_AM_NONE SQL_AM_STATEMENT SQL_API_SQLALLOCCONNECT SQL_API_SQLALLOCENV SQL_API_SQLALLOCHANDLE SQL_API_SQLALLOCSTMT SQL_API_SQLBINDCOL SQL_API_SQLBINDPARAM SQL_API_SQLCANCEL SQL_API_SQLCLOSECURSOR SQL_API_SQLCOLATTRIBUTE SQL_API_SQLCOLUMNS SQL_API_SQLCONNECT SQL_API_SQLCOPYDESC SQL_API_SQLDATASOURCES SQL_API_SQLDESCRIBECOL SQL_API_SQLDISCONNECT SQL_API_SQLENDTRAN SQL_API_SQLERROR SQL_API_SQLEXECDIRECT SQL_API_SQLEXECUTE SQL_API_SQLFETCH SQL_API_SQLFETCHSCROLL SQL_API_SQLFREECONNECT SQL_API_SQLFREEENV SQL_API_SQLFREEHANDLE SQL_API_SQLFREESTMT SQL_API_SQLGETCONNECTATTR SQL_API_SQLGETCONNECTOPTION SQL_API_SQLGETCURSORNAME SQL_API_SQLGETDATA SQL_API_SQLGETDESCFIELD SQL_API_SQLGETDESCREC SQL_API_SQLGETDIAGFIELD SQL_API_SQLGETDIAGREC SQL_API_SQLGETENVATTR SQL_API_SQLGETFUNCTIONS SQL_API_SQLGETINFO SQL_API_SQLGETSTMTATTR SQL_API_SQLGETSTMTOPTION SQL_API_SQLGETTYPEINFO SQL_API_SQLNUMRESULTCOLS SQL_API_SQLPARAMDATA SQL_API_SQLPREPARE SQL_API_SQLPUTDATA SQL_API_SQLROWCOUNT SQL_API_SQLSETCONNECTATTR SQL_API_SQLSETCONNECTOPTION SQL_API_SQLSETCURSORNAME SQL_API_SQLSETDESCFIELD SQL_API_SQLSETDESCREC SQL_API_SQLSETENVATTR SQL_API_SQLSETPARAM SQL_API_SQLSETSTMTATTR SQL_API_SQLSETSTMTOPTION SQL_API_SQLSPECIALCOLUMNS SQL_API_SQLSTATISTICS SQL_API_SQLTABLES SQL_API_SQLTRANSACT SQL_ARD_TYPE SQL_AT_ADD_COLUMN SQL_AT_ADD_CONSTRAINT SQL_AT_DROP_COLUMN SQL_ATTR_APP_PARAM_DESC SQL_ATTR_APP_ROW_DESC SQL_ATTR_AUTO_IPD SQL_ATTR_CURSOR_SCROLLABLE SQL_ATTR_CURSOR_SENSITIVITY SQL_ATTR_IMP_PARAM_DESC SQL_ATTR_IMP_ROW_DESC SQL_ATTR_METADATA_ID SQL_ATTR_OUTPUT_NTS SQL_CATALOG_NAME SQL_CB_CLOSE SQL_CB_DELETE SQL_CB_PRESERVE SQL_CHAR SQL_CLOSE SQL_CODE_DATE SQL_CODE_TIME SQL_CODE_TIMESTAMP SQL_COLLATION_SEQ SQL_COMMIT SQL_CURSOR_COMMIT_BEHAVIOR SQL_CURSOR_SENSITIVITY SQL_DATA_AT_EXEC SQL_DATA_SOURCE_NAME SQL_DATA_SOURCE_READ_ONLY SQL_DATE_LEN SQL_DATETIME SQL_DBMS_NAME SQL_DBMS_VER SQL_DECIMAL SQL_DEFAULT SQL_DEFAULT_TXN_ISOLATION SQL_DESC_ALLOC_AUTO SQL_DESC_ALLOC_TYPE SQL_DESC_ALLOC_USER SQL_DESC_COUNT SQL_DESC_DATA_PTR SQL_DESC_DATETIME_INTERVAL_CODE SQL_DESC_INDICATOR_PTR SQL_DESC_LENGTH SQL_DESC_NAME SQL_DESC_NULLABLE SQL_DESC_OCTET_LENGTH SQL_DESC_OCTET_LENGTH_PTR SQL_DESC_PRECISION SQL_DESC_SCALE SQL_DESC_TYPE SQL_DESC_UNNAMED SQL_DESCRIBE_PARAMETER SQL_DIAG_ALTER_DOMAIN SQL_DIAG_ALTER_TABLE SQL_DIAG_CALL SQL_DIAG_CLASS_ORIGIN SQL_DIAG_CONNECTION_NAME SQL_DIAG_CREATE_ASSERTION SQL_DIAG_CREATE_CHARACTER_SET SQL_DIAG_CREATE_COLLATION SQL_DIAG_CREATE_DOMAIN SQL_DIAG_CREATE_INDEX SQL_DIAG_CREATE_SCHEMA SQL_DIAG_CREATE_TABLE SQL_DIAG_CREATE_TRANSLATION SQL_DIAG_CREATE_VIEW SQL_DIAG_DELETE_WHERE SQL_DIAG_DROP_ASSERTION SQL_DIAG_DROP_CHARACTER_SET SQL_DIAG_DROP_COLLATION SQL_DIAG_DROP_DOMAIN SQL_DIAG_DROP_INDEX SQL_DIAG_DROP_SCHEMA SQL_DIAG_DROP_TABLE SQL_DIAG_DROP_TRANSLATION SQL_DIAG_DROP_VIEW SQL_DIAG_DYNAMIC_DELETE_CURSOR SQL_DIAG_DYNAMIC_FUNCTION SQL_DIAG_DYNAMIC_FUNCTION_CODE SQL_DIAG_DYNAMIC_UPDATE_CURSOR SQL_DIAG_GRANT SQL_DIAG_INSERT SQL_DIAG_MESSAGE_TEXT SQL_DIAG_NATIVE SQL_DIAG_NUMBER SQL_DIAG_RETURNCODE SQL_DIAG_REVOKE SQL_DIAG_ROW_COUNT SQL_DIAG_SELECT_CURSOR SQL_DIAG_SERVER_NAME SQL_DIAG_SQLSTATE SQL_DIAG_SUBCLASS_ORIGIN SQL_DIAG_UNKNOWN_STATEMENT SQL_DIAG_UPDATE_WHERE SQL_DOUBLE SQL_DROP SQL_ERROR SQL_FALSE SQL_FD_FETCH_ABSOLUTE SQL_FD_FETCH_FIRST SQL_FD_FETCH_LAST SQL_FD_FETCH_NEXT SQL_FD_FETCH_PRIOR SQL_FD_FETCH_RELATIVE SQL_FETCH_ABSOLUTE SQL_FETCH_DIRECTION SQL_FETCH_FIRST SQL_FETCH_LAST SQL_FETCH_NEXT SQL_FETCH_PRIOR SQL_FETCH_RELATIVE SQL_FLOAT SQL_GD_ANY_COLUMN SQL_GD_ANY_ORDER SQL_GETDATA_EXTENSIONS SQL_HANDLE_DBC SQL_HANDLE_DESC SQL_HANDLE_ENV SQL_HANDLE_STMT SQL_IC_LOWER SQL_IC_MIXED SQL_IC_SENSITIVE SQL_IC_UPPER SQL_IDENTIFIER_CASE SQL_IDENTIFIER_QUOTE_CHAR SQL_INDEX_ALL SQL_INDEX_CLUSTERED SQL_INDEX_HASHED SQL_INDEX_OTHER SQL_INDEX_UNIQUE SQL_INSENSITIVE SQL_INTEGER SQL_INTEGRITY SQL_INVALID_HANDLE SQL_MAX_CATALOG_NAME_LEN SQL_MAX_COLUMN_NAME_LEN SQL_MAX_COLUMNS_IN_GROUP_BY SQL_MAX_COLUMNS_IN_INDEX SQL_MAX_COLUMNS_IN_ORDER_BY SQL_MAX_COLUMNS_IN_SELECT SQL_MAX_COLUMNS_IN_TABLE SQL_MAX_CONCURRENT_ACTIVITIES SQL_MAX_CURSOR_NAME_LEN SQL_MAX_DRIVER_CONNECTIONS SQL_MAX_IDENTIFIER_LEN SQL_MAX_INDEX_SIZE SQL_MAX_MESSAGE_LENGTH SQL_MAX_ROW_SIZE SQL_MAX_SCHEMA_NAME_LEN SQL_MAX_STATEMENT_LEN SQL_MAX_TABLE_NAME_LEN SQL_MAX_TABLES_IN_SELECT SQL_MAX_USER_NAME_LEN SQL_MAXIMUM_CATALOG_NAME_LENGTH SQL_MAXIMUM_COLUMN_NAME_LENGTH SQL_MAXIMUM_COLUMNS_IN_GROUP_BY SQL_MAXIMUM_COLUMNS_IN_INDEX SQL_MAXIMUM_COLUMNS_IN_ORDER_BY SQL_MAXIMUM_COLUMNS_IN_SELECT SQL_MAXIMUM_CONCURRENT_ACTIVITIES SQL_MAXIMUM_CURSOR_NAME_LENGTH SQL_MAXIMUM_DRIVER_CONNECTIONS SQL_MAXIMUM_IDENTIFIER_LENGTH SQL_MAXIMUM_INDEX_SIZE SQL_MAXIMUM_ROW_SIZE SQL_MAXIMUM_SCHEMA_NAME_LENGTH SQL_MAXIMUM_STATEMENT_LENGTH SQL_MAXIMUM_TABLES_IN_SELECT SQL_MAXIMUM_USER_NAME_LENGTH SQL_NAMED SQL_NC_HIGH SQL_NC_LOW SQL_NEED_DATA SQL_NO_DATA SQL_NO_NULLS SQL_NONSCROLLABLE SQL_NTS SQL_NTSL SQL_NULL_COLLATION SQL_NULL_DATA SQL_NULL_HANDLE SQL_NULL_HDBC SQL_NULL_HDESC SQL_NULL_HENV SQL_NULL_HSTMT SQL_NULLABLE SQL_NULLABLE_UNKNOWN SQL_NUMERIC SQL_OJ_ALL_COMPARISON_OPS SQL_OJ_CAPABILITIES SQL_OJ_FULL SQL_OJ_INNER SQL_OJ_LEFT SQL_OJ_NESTED SQL_OJ_NOT_ORDERED SQL_OJ_RIGHT SQL_ORDER_BY_COLUMNS_IN_SELECT SQL_OUTER_JOIN_CAPABILITIES SQL_PC_NON_PSEUDO SQL_PC_PSEUDO SQL_PC_UNKNOWN SQL_PRED_BASIC SQL_PRED_CHAR SQL_PRED_NONE SQL_REAL SQL_RESET_PARAMS SQL_ROLLBACK SQL_ROW_IDENTIFIER SQL_SCCO_LOCK SQL_SCCO_OPT_ROWVER SQL_SCCO_OPT_VALUES SQL_SCCO_READ_ONLY SQL_SCOPE_CURROW SQL_SCOPE_SESSION SQL_SCOPE_TRANSACTION SQL_SCROLL_CONCURRENCY SQL_SCROLLABLE SQL_SEARCH_PATTERN_ESCAPE SQL_SENSITIVE SQL_SERVER_NAME SQL_SMALLINT SQL_SPECIAL_CHARACTERS SQL_STILL_EXECUTING SQL_SUCCESS SQL_SUCCESS_WITH_INFO SQL_TC_ALL SQL_TC_DDL_COMMIT SQL_TC_DDL_IGNORE SQL_TC_DML SQL_TC_NONE SQL_TIME_LEN SQL_TIMESTAMP_LEN SQL_TRANSACTION_CAPABLE SQL_TRANSACTION_ISOLATION_OPTION SQL_TRANSACTION_READ_COMMITTED SQL_TRANSACTION_READ_UNCOMMITTED SQL_TRANSACTION_REPEATABLE_READ SQL_TRANSACTION_SERIALIZABLE SQL_TRUE SQL_TXN_CAPABLE SQL_TXN_ISOLATION_OPTION SQL_TXN_READ_COMMITTED SQL_TXN_READ_UNCOMMITTED SQL_TXN_REPEATABLE_READ SQL_TXN_SERIALIZABLE SQL_TYPE_DATE SQL_TYPE_TIME SQL_TYPE_TIMESTAMP SQL_UNBIND SQL_UNKNOWN_TYPE SQL_UNNAMED SQL_UNSPECIFIED SQL_USER_NAME SQL_VARCHAR SQL_XOPEN_CLI_YEAR"
  },
  "phobos/etc/c/odbc/sqlext/Functions/ODBCGetTryWaitValue.html": {
    "href": "phobos/etc/c/odbc/sqlext/Functions/ODBCGetTryWaitValue.html",
    "title": "Overloads for - ODBCGetTryWaitValue | Marmos Demo",
    "keywords": "Overloads for - ODBCGetTryWaitValue Module etc.c.odbc.sqlext ODBCGetTryWaitValue() DWORD ODBCGetTryWaitValue( )"
  },
  "phobos/etc/c/odbc/sqlext/Functions/ODBCSetTryWaitValue.html": {
    "href": "phobos/etc/c/odbc/sqlext/Functions/ODBCSetTryWaitValue.html",
    "title": "Overloads for - ODBCSetTryWaitValue | Marmos Demo",
    "keywords": "Overloads for - ODBCSetTryWaitValue Module etc.c.odbc.sqlext ODBCSetTryWaitValue(__anonymous) BOOL ODBCSetTryWaitValue( DWORD __anonymous )"
  },
  "phobos/etc/c/odbc/sqlext/Functions/SQLAllocHandleStd.html": {
    "href": "phobos/etc/c/odbc/sqlext/Functions/SQLAllocHandleStd.html",
    "title": "Overloads for - SQLAllocHandleStd | Marmos Demo",
    "keywords": "Overloads for - SQLAllocHandleStd Module etc.c.odbc.sqlext SQLAllocHandleStd(__anonymous, __anonymous, __anonymous) SQLRETURN SQLAllocHandleStd( SQLSMALLINT __anonymous, SQLHANDLE __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sqlext/Functions/SQLBindParameter.html": {
    "href": "phobos/etc/c/odbc/sqlext/Functions/SQLBindParameter.html",
    "title": "Overloads for - SQLBindParameter | Marmos Demo",
    "keywords": "Overloads for - SQLBindParameter Module etc.c.odbc.sqlext SQLBindParameter(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLBindParameter( SQLHSTMT __anonymous, SQLUSMALLINT __anonymous, SQLSMALLINT __anonymous, SQLSMALLINT __anonymous, SQLSMALLINT __anonymous, SQLULEN __anonymous, SQLSMALLINT __anonymous, SQLPOINTER __anonymous, SQLLEN __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sqlext/Functions/SQLBrowseConnect.html": {
    "href": "phobos/etc/c/odbc/sqlext/Functions/SQLBrowseConnect.html",
    "title": "Overloads for - SQLBrowseConnect | Marmos Demo",
    "keywords": "Overloads for - SQLBrowseConnect Module etc.c.odbc.sqlext SQLBrowseConnect(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLBrowseConnect( SQLHDBC __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sqlext/Functions/SQLBulkOperations.html": {
    "href": "phobos/etc/c/odbc/sqlext/Functions/SQLBulkOperations.html",
    "title": "Overloads for - SQLBulkOperations | Marmos Demo",
    "keywords": "Overloads for - SQLBulkOperations Module etc.c.odbc.sqlext SQLBulkOperations(__anonymous, __anonymous) SQLRETURN SQLBulkOperations( SQLHSTMT __anonymous, SQLSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sqlext/Functions/SQLColAttributes.html": {
    "href": "phobos/etc/c/odbc/sqlext/Functions/SQLColAttributes.html",
    "title": "Overloads for - SQLColAttributes | Marmos Demo",
    "keywords": "Overloads for - SQLColAttributes Module etc.c.odbc.sqlext SQLColAttributes(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLColAttributes( SQLHSTMT __anonymous, SQLUSMALLINT __anonymous, SQLUSMALLINT __anonymous, SQLPOINTER __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sqlext/Functions/SQLColumnPrivileges.html": {
    "href": "phobos/etc/c/odbc/sqlext/Functions/SQLColumnPrivileges.html",
    "title": "Overloads for - SQLColumnPrivileges | Marmos Demo",
    "keywords": "Overloads for - SQLColumnPrivileges Module etc.c.odbc.sqlext SQLColumnPrivileges(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLColumnPrivileges( SQLHSTMT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sqlext/Functions/SQLDescribeParam.html": {
    "href": "phobos/etc/c/odbc/sqlext/Functions/SQLDescribeParam.html",
    "title": "Overloads for - SQLDescribeParam | Marmos Demo",
    "keywords": "Overloads for - SQLDescribeParam Module etc.c.odbc.sqlext SQLDescribeParam(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLDescribeParam( SQLHSTMT __anonymous, SQLUSMALLINT __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sqlext/Functions/SQLDriverConnect.html": {
    "href": "phobos/etc/c/odbc/sqlext/Functions/SQLDriverConnect.html",
    "title": "Overloads for - SQLDriverConnect | Marmos Demo",
    "keywords": "Overloads for - SQLDriverConnect Module etc.c.odbc.sqlext SQLDriverConnect(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLDriverConnect( SQLHDBC __anonymous, SQLHWND __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLUSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sqlext/Functions/SQLDrivers.html": {
    "href": "phobos/etc/c/odbc/sqlext/Functions/SQLDrivers.html",
    "title": "Overloads for - SQLDrivers | Marmos Demo",
    "keywords": "Overloads for - SQLDrivers Module etc.c.odbc.sqlext SQLDrivers(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLDrivers( SQLHENV __anonymous, SQLUSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sqlext/Functions/SQLExtendedFetch.html": {
    "href": "phobos/etc/c/odbc/sqlext/Functions/SQLExtendedFetch.html",
    "title": "Overloads for - SQLExtendedFetch | Marmos Demo",
    "keywords": "Overloads for - SQLExtendedFetch Module etc.c.odbc.sqlext SQLExtendedFetch(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLExtendedFetch( SQLHSTMT __anonymous, SQLUSMALLINT __anonymous, SQLINTEGER __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sqlext/Functions/SQLForeignKeys.html": {
    "href": "phobos/etc/c/odbc/sqlext/Functions/SQLForeignKeys.html",
    "title": "Overloads for - SQLForeignKeys | Marmos Demo",
    "keywords": "Overloads for - SQLForeignKeys Module etc.c.odbc.sqlext SQLForeignKeys(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLForeignKeys( SQLHSTMT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sqlext/Functions/SQLMoreResults.html": {
    "href": "phobos/etc/c/odbc/sqlext/Functions/SQLMoreResults.html",
    "title": "Overloads for - SQLMoreResults | Marmos Demo",
    "keywords": "Overloads for - SQLMoreResults Module etc.c.odbc.sqlext SQLMoreResults(__anonymous) SQLRETURN SQLMoreResults( SQLHSTMT __anonymous )"
  },
  "phobos/etc/c/odbc/sqlext/Functions/SQLNativeSql.html": {
    "href": "phobos/etc/c/odbc/sqlext/Functions/SQLNativeSql.html",
    "title": "Overloads for - SQLNativeSql | Marmos Demo",
    "keywords": "Overloads for - SQLNativeSql Module etc.c.odbc.sqlext SQLNativeSql(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLNativeSql( SQLHDBC __anonymous, <bug: unknown> __anonymous, SQLINTEGER __anonymous, <bug: unknown> __anonymous, SQLINTEGER __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sqlext/Functions/SQLNumParams.html": {
    "href": "phobos/etc/c/odbc/sqlext/Functions/SQLNumParams.html",
    "title": "Overloads for - SQLNumParams | Marmos Demo",
    "keywords": "Overloads for - SQLNumParams Module etc.c.odbc.sqlext SQLNumParams(__anonymous, __anonymous) SQLRETURN SQLNumParams( SQLHSTMT __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sqlext/Functions/SQLParamOptions.html": {
    "href": "phobos/etc/c/odbc/sqlext/Functions/SQLParamOptions.html",
    "title": "Overloads for - SQLParamOptions | Marmos Demo",
    "keywords": "Overloads for - SQLParamOptions Module etc.c.odbc.sqlext SQLParamOptions(__anonymous, __anonymous, __anonymous) SQLRETURN SQLParamOptions( SQLHSTMT __anonymous, SQLUINTEGER __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sqlext/Functions/SQLPrimaryKeys.html": {
    "href": "phobos/etc/c/odbc/sqlext/Functions/SQLPrimaryKeys.html",
    "title": "Overloads for - SQLPrimaryKeys | Marmos Demo",
    "keywords": "Overloads for - SQLPrimaryKeys Module etc.c.odbc.sqlext SQLPrimaryKeys(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLPrimaryKeys( SQLHSTMT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sqlext/Functions/SQLProcedureColumns.html": {
    "href": "phobos/etc/c/odbc/sqlext/Functions/SQLProcedureColumns.html",
    "title": "Overloads for - SQLProcedureColumns | Marmos Demo",
    "keywords": "Overloads for - SQLProcedureColumns Module etc.c.odbc.sqlext SQLProcedureColumns(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLProcedureColumns( SQLHSTMT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sqlext/Functions/SQLProcedures.html": {
    "href": "phobos/etc/c/odbc/sqlext/Functions/SQLProcedures.html",
    "title": "Overloads for - SQLProcedures | Marmos Demo",
    "keywords": "Overloads for - SQLProcedures Module etc.c.odbc.sqlext SQLProcedures(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLProcedures( SQLHSTMT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sqlext/Functions/SQLSetPos.html": {
    "href": "phobos/etc/c/odbc/sqlext/Functions/SQLSetPos.html",
    "title": "Overloads for - SQLSetPos | Marmos Demo",
    "keywords": "Overloads for - SQLSetPos Module etc.c.odbc.sqlext SQLSetPos(__anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLSetPos( SQLHSTMT __anonymous, SQLUSMALLINT __anonymous, SQLUSMALLINT __anonymous, SQLUSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sqlext/Functions/SQLSetScrollOptions.html": {
    "href": "phobos/etc/c/odbc/sqlext/Functions/SQLSetScrollOptions.html",
    "title": "Overloads for - SQLSetScrollOptions | Marmos Demo",
    "keywords": "Overloads for - SQLSetScrollOptions Module etc.c.odbc.sqlext SQLSetScrollOptions(__anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLSetScrollOptions( SQLHSTMT __anonymous, SQLUSMALLINT __anonymous, SQLLEN __anonymous, SQLUSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sqlext/Functions/SQLTablePrivileges.html": {
    "href": "phobos/etc/c/odbc/sqlext/Functions/SQLTablePrivileges.html",
    "title": "Overloads for - SQLTablePrivileges | Marmos Demo",
    "keywords": "Overloads for - SQLTablePrivileges Module etc.c.odbc.sqlext SQLTablePrivileges(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLTablePrivileges( SQLHSTMT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sqlext/Functions/TraceCloseLogFile.html": {
    "href": "phobos/etc/c/odbc/sqlext/Functions/TraceCloseLogFile.html",
    "title": "Overloads for - TraceCloseLogFile | Marmos Demo",
    "keywords": "Overloads for - TraceCloseLogFile Module etc.c.odbc.sqlext TraceCloseLogFile() RETCODE TraceCloseLogFile( )"
  },
  "phobos/etc/c/odbc/sqlext/Functions/TraceOpenLogFile.html": {
    "href": "phobos/etc/c/odbc/sqlext/Functions/TraceOpenLogFile.html",
    "title": "Overloads for - TraceOpenLogFile | Marmos Demo",
    "keywords": "Overloads for - TraceOpenLogFile Module etc.c.odbc.sqlext TraceOpenLogFile(__anonymous, __anonymous, __anonymous) RETCODE TraceOpenLogFile( LPWSTR __anonymous, LPWSTR __anonymous, DWORD __anonymous )"
  },
  "phobos/etc/c/odbc/sqlext/Functions/TraceReturn.html": {
    "href": "phobos/etc/c/odbc/sqlext/Functions/TraceReturn.html",
    "title": "Overloads for - TraceReturn | Marmos Demo",
    "keywords": "Overloads for - TraceReturn Module etc.c.odbc.sqlext TraceReturn(__anonymous, __anonymous) VOID TraceReturn( RETCODE __anonymous, RETCODE __anonymous )"
  },
  "phobos/etc/c/odbc/sqlext/Functions/TraceVersion.html": {
    "href": "phobos/etc/c/odbc/sqlext/Functions/TraceVersion.html",
    "title": "Overloads for - TraceVersion | Marmos Demo",
    "keywords": "Overloads for - TraceVersion Module etc.c.odbc.sqlext TraceVersion() DWORD TraceVersion( )"
  },
  "phobos/etc/c/odbc/sqlext/Overview.html": {
    "href": "phobos/etc/c/odbc/sqlext/Overview.html",
    "title": "Module - etc.c.odbc.sqlext | Marmos Demo",
    "keywords": "Module - etc.c.odbc.sqlext About Windows API header module Translated from MinGW Windows headers License: $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0) Source: $(PHOBOSSRC etc/c/odbc/_sqlext.d) See_Also: $(LINK2 https://docs.microsoft.com/en-us/sql/odbc/reference/syntax/odbc-api-reference, ODBC API Reference on MSDN) Functions Name Description ODBCGetTryWaitValue ODBCSetTryWaitValue SQLAllocHandleStd SQLBindParameter SQLBrowseConnect SQLBulkOperations SQLColAttributes SQLColumnPrivileges SQLDescribeParam SQLDriverConnect SQLDrivers SQLExtendedFetch SQLForeignKeys SQLMoreResults SQLNativeSql SQLNumParams SQLParamOptions SQLPrimaryKeys SQLProcedureColumns SQLProcedures SQLSetPos SQLSetScrollOptions SQLTablePrivileges TraceCloseLogFile TraceOpenLogFile TraceReturn TraceVersion Variables Name Description SQL_AA_FALSE SQL_AA_TRUE SQL_ACCESS_MODE SQL_ACTIVE_CONNECTIONS SQL_ACTIVE_ENVIRONMENTS SQL_ACTIVE_STATEMENTS SQL_AD_ADD_CONSTRAINT_DEFERRABLE SQL_AD_ADD_CONSTRAINT_INITIALLY_DEFERRED SQL_AD_ADD_CONSTRAINT_INITIALLY_IMMEDIATE SQL_AD_ADD_CONSTRAINT_NON_DEFERRABLE SQL_AD_ADD_DOMAIN_CONSTRAINT SQL_AD_ADD_DOMAIN_DEFAULT SQL_AD_CONSTRAINT_NAME_DEFINITION SQL_AD_DROP_DOMAIN_CONSTRAINT SQL_AD_DROP_DOMAIN_DEFAULT SQL_ADD SQL_AF_ALL SQL_AF_AVG SQL_AF_COUNT SQL_AF_DISTINCT SQL_AF_MAX SQL_AF_MIN SQL_AF_SUM SQL_AGGREGATE_FUNCTIONS SQL_ALL_CATALOGS SQL_ALL_EXCEPT_LIKE SQL_ALL_SCHEMAS SQL_ALL_TABLE_TYPES SQL_ALTER_DOMAIN SQL_AM_CONNECTION SQL_AM_NONE SQL_AM_STATEMENT SQL_API_ALL_FUNCTIONS SQL_API_LOADBYORDINAL SQL_API_ODBC3_ALL_FUNCTIONS SQL_API_ODBC3_ALL_FUNCTIONS_SIZE SQL_API_SQLALLOCHANDLESTD SQL_API_SQLBINDPARAMETER SQL_API_SQLBROWSECONNECT SQL_API_SQLBULKOPERATIONS SQL_API_SQLCOLATTRIBUTES SQL_API_SQLCOLUMNPRIVILEGES SQL_API_SQLDESCRIBEPARAM SQL_API_SQLDRIVERCONNECT SQL_API_SQLDRIVERS SQL_API_SQLEXTENDEDFETCH SQL_API_SQLFOREIGNKEYS SQL_API_SQLMORERESULTS SQL_API_SQLNATIVESQL SQL_API_SQLNUMPARAMS SQL_API_SQLPARAMOPTIONS SQL_API_SQLPRIMARYKEYS SQL_API_SQLPROCEDURECOLUMNS SQL_API_SQLPROCEDURES SQL_API_SQLSETPOS SQL_API_SQLSETSCROLLOPTIONS SQL_API_SQLTABLEPRIVILEGES SQL_ASYNC_ENABLE SQL_ASYNC_ENABLE_DEFAULT SQL_ASYNC_ENABLE_OFF SQL_ASYNC_ENABLE_ON SQL_ASYNC_MODE SQL_AT_ADD_COLUMN_COLLATION SQL_AT_ADD_COLUMN_DEFAULT SQL_AT_ADD_COLUMN_SINGLE SQL_AT_ADD_TABLE_CONSTRAINT SQL_AT_CONSTRAINT_DEFERRABLE SQL_AT_CONSTRAINT_INITIALLY_DEFERRED SQL_AT_CONSTRAINT_INITIALLY_IMMEDIATE SQL_AT_CONSTRAINT_NAME_DEFINITION SQL_AT_CONSTRAINT_NON_DEFERRABLE SQL_AT_DROP_COLUMN_CASCADE SQL_AT_DROP_COLUMN_DEFAULT SQL_AT_DROP_COLUMN_RESTRICT SQL_AT_DROP_TABLE_CONSTRAINT_CASCADE SQL_AT_DROP_TABLE_CONSTRAINT_RESTRICT SQL_AT_SET_COLUMN_DEFAULT SQL_ATTR_ACCESS_MODE SQL_ATTR_ANSI_APP SQL_ATTR_ASYNC_ENABLE SQL_ATTR_AUTOCOMMIT SQL_ATTR_CONCURRENCY SQL_ATTR_CONNECTION_DEAD SQL_ATTR_CONNECTION_POOLING SQL_ATTR_CONNECTION_TIMEOUT SQL_ATTR_CP_MATCH SQL_ATTR_CURRENT_CATALOG SQL_ATTR_CURSOR_TYPE SQL_ATTR_DISCONNECT_BEHAVIOR SQL_ATTR_ENABLE_AUTO_IPD SQL_ATTR_ENLIST_IN_DTC SQL_ATTR_ENLIST_IN_XA SQL_ATTR_FETCH_BOOKMARK_PTR SQL_ATTR_KEYSET_SIZE SQL_ATTR_LOGIN_TIMEOUT SQL_ATTR_MAX_LENGTH SQL_ATTR_MAX_ROWS SQL_ATTR_NOSCAN SQL_ATTR_ODBC_CURSORS SQL_ATTR_ODBC_VERSION SQL_ATTR_PACKET_SIZE SQL_ATTR_PARAM_BIND_OFFSET_PTR SQL_ATTR_PARAM_BIND_TYPE SQL_ATTR_PARAM_OPERATION_PTR SQL_ATTR_PARAM_STATUS_PTR SQL_ATTR_PARAMS_PROCESSED_PTR SQL_ATTR_PARAMSET_SIZE SQL_ATTR_QUERY_TIMEOUT SQL_ATTR_QUIET_MODE SQL_ATTR_READONLY SQL_ATTR_READWRITE_UNKNOWN SQL_ATTR_RETRIEVE_DATA SQL_ATTR_ROW_ARRAY_SIZE SQL_ATTR_ROW_BIND_OFFSET_PTR SQL_ATTR_ROW_BIND_TYPE SQL_ATTR_ROW_NUMBER SQL_ATTR_ROW_OPERATION_PTR SQL_ATTR_ROW_STATUS_PTR SQL_ATTR_ROWS_FETCHED_PTR SQL_ATTR_SIMULATE_CURSOR SQL_ATTR_TRACE SQL_ATTR_TRACEFILE SQL_ATTR_TRANSLATE_LIB SQL_ATTR_TRANSLATE_OPTION SQL_ATTR_TXN_ISOLATION SQL_ATTR_USE_BOOKMARKS SQL_ATTR_WRITE SQL_AUTOCOMMIT SQL_AUTOCOMMIT_DEFAULT SQL_AUTOCOMMIT_OFF SQL_AUTOCOMMIT_ON SQL_BATCH_ROW_COUNT SQL_BATCH_SUPPORT SQL_BEST_ROWID SQL_BIGINT SQL_BINARY SQL_BIND_BY_COLUMN SQL_BIND_TYPE SQL_BIND_TYPE_DEFAULT SQL_BIT SQL_BOOKMARK_PERSISTENCE SQL_BP_CLOSE SQL_BP_DELETE SQL_BP_DROP SQL_BP_OTHER_HSTMT SQL_BP_SCROLL SQL_BP_TRANSACTION SQL_BP_UPDATE SQL_BRC_EXPLICIT SQL_BRC_PROCEDURES SQL_BRC_ROLLED_UP SQL_BS_ROW_COUNT_EXPLICIT SQL_BS_ROW_COUNT_PROC SQL_BS_SELECT_EXPLICIT SQL_BS_SELECT_PROC SQL_C_BINARY SQL_C_BIT SQL_C_BOOKMARK SQL_C_CHAR SQL_C_DATE SQL_C_DEFAULT SQL_C_DOUBLE SQL_C_FLOAT SQL_C_GUID SQL_C_INTERVAL_DAY SQL_C_INTERVAL_DAY_TO_HOUR SQL_C_INTERVAL_DAY_TO_MINUTE SQL_C_INTERVAL_DAY_TO_SECOND SQL_C_INTERVAL_HOUR SQL_C_INTERVAL_HOUR_TO_MINUTE SQL_C_INTERVAL_HOUR_TO_SECOND SQL_C_INTERVAL_MINUTE SQL_C_INTERVAL_MINUTE_TO_SECOND SQL_C_INTERVAL_MONTH SQL_C_INTERVAL_SECOND SQL_C_INTERVAL_YEAR SQL_C_INTERVAL_YEAR_TO_MONTH SQL_C_LONG SQL_C_NUMERIC SQL_C_SBIGINT SQL_C_SHORT SQL_C_SLONG SQL_C_SSHORT SQL_C_STINYINT SQL_C_TIME SQL_C_TIMESTAMP SQL_C_TINYINT SQL_C_TYPE_DATE SQL_C_TYPE_TIME SQL_C_TYPE_TIMESTAMP SQL_C_UBIGINT SQL_C_ULONG SQL_C_USHORT SQL_C_UTINYINT SQL_C_VARBOOKMARK SQL_CA_CONSTRAINT_DEFERRABLE SQL_CA_CONSTRAINT_INITIALLY_DEFERRED SQL_CA_CONSTRAINT_INITIALLY_IMMEDIATE SQL_CA_CONSTRAINT_NON_DEFERRABLE SQL_CA_CREATE_ASSERTION SQL_CA1_ABSOLUTE SQL_CA1_BOOKMARK SQL_CA1_BULK_ADD SQL_CA1_BULK_DELETE_BY_BOOKMARK SQL_CA1_BULK_FETCH_BY_BOOKMARK SQL_CA1_BULK_UPDATE_BY_BOOKMARK SQL_CA1_LOCK_EXCLUSIVE SQL_CA1_LOCK_NO_CHANGE SQL_CA1_LOCK_UNLOCK SQL_CA1_NEXT SQL_CA1_POS_DELETE SQL_CA1_POS_POSITION SQL_CA1_POS_REFRESH SQL_CA1_POS_UPDATE SQL_CA1_POSITIONED_DELETE SQL_CA1_POSITIONED_UPDATE SQL_CA1_RELATIVE SQL_CA1_SELECT_FOR_UPDATE SQL_CA2_CRC_APPROXIMATE SQL_CA2_CRC_EXACT SQL_CA2_LOCK_CONCURRENCY SQL_CA2_MAX_ROWS_AFFECTS_ALL SQL_CA2_MAX_ROWS_CATALOG SQL_CA2_MAX_ROWS_DELETE SQL_CA2_MAX_ROWS_INSERT SQL_CA2_MAX_ROWS_SELECT SQL_CA2_MAX_ROWS_UPDATE SQL_CA2_OPT_ROWVER_CONCURRENCY SQL_CA2_OPT_VALUES_CONCURRENCY SQL_CA2_READ_ONLY_CONCURRENCY SQL_CA2_SENSITIVITY_ADDITIONS SQL_CA2_SENSITIVITY_DELETIONS SQL_CA2_SENSITIVITY_UPDATES SQL_CA2_SIMULATE_NON_UNIQUE SQL_CA2_SIMULATE_TRY_UNIQUE SQL_CA2_SIMULATE_UNIQUE SQL_CASCADE SQL_CATALOG_LOCATION SQL_CATALOG_NAME_SEPARATOR SQL_CATALOG_TERM SQL_CATALOG_USAGE SQL_CB_NON_NULL SQL_CB_NULL SQL_CC_CLOSE SQL_CC_DELETE SQL_CC_PRESERVE SQL_CCOL_CREATE_COLLATION SQL_CCS_COLLATE_CLAUSE SQL_CCS_CREATE_CHARACTER_SET SQL_CCS_LIMITED_COLLATION SQL_CD_FALSE SQL_CD_TRUE SQL_CDO_COLLATION SQL_CDO_CONSTRAINT SQL_CDO_CONSTRAINT_DEFERRABLE SQL_CDO_CONSTRAINT_INITIALLY_DEFERRED SQL_CDO_CONSTRAINT_INITIALLY_IMMEDIATE SQL_CDO_CONSTRAINT_NAME_DEFINITION SQL_CDO_CONSTRAINT_NON_DEFERRABLE SQL_CDO_CREATE_DOMAIN SQL_CDO_DEFAULT SQL_CL_END SQL_CL_START SQL_CN_ANY SQL_CN_DIFFERENT SQL_CN_NONE SQL_COL_PRED_BASIC SQL_COL_PRED_CHAR SQL_COLATT_OPT_MAX SQL_COLATT_OPT_MIN SQL_COLUMN_ALIAS SQL_COLUMN_AUTO_INCREMENT SQL_COLUMN_CASE_SENSITIVE SQL_COLUMN_COUNT SQL_COLUMN_DISPLAY_SIZE SQL_COLUMN_DRIVER_START SQL_COLUMN_IGNORE SQL_COLUMN_LABEL SQL_COLUMN_LENGTH SQL_COLUMN_MONEY SQL_COLUMN_NAME SQL_COLUMN_NULLABLE SQL_COLUMN_NUMBER_UNKNOWN SQL_COLUMN_OWNER_NAME SQL_COLUMN_PRECISION SQL_COLUMN_QUALIFIER_NAME SQL_COLUMN_SCALE SQL_COLUMN_SEARCHABLE SQL_COLUMN_TABLE_NAME SQL_COLUMN_TYPE SQL_COLUMN_TYPE_NAME SQL_COLUMN_UNSIGNED SQL_COLUMN_UPDATABLE SQL_CONCAT_NULL_BEHAVIOR SQL_CONCUR_DEFAULT SQL_CONCUR_LOCK SQL_CONCUR_READ_ONLY SQL_CONCUR_ROWVER SQL_CONCUR_TIMESTAMP SQL_CONCUR_VALUES SQL_CONCURRENCY SQL_CONN_OPT_MAX SQL_CONN_OPT_MIN SQL_CONNECT_OPT_DRVR_START SQL_CONVERT_BIGINT SQL_CONVERT_BINARY SQL_CONVERT_BIT SQL_CONVERT_CHAR SQL_CONVERT_DATE SQL_CONVERT_DECIMAL SQL_CONVERT_DOUBLE SQL_CONVERT_FLOAT SQL_CONVERT_FUNCTIONS SQL_CONVERT_GUID SQL_CONVERT_INTEGER SQL_CONVERT_INTERVAL_DAY_TIME SQL_CONVERT_INTERVAL_YEAR_MONTH SQL_CONVERT_LONGVARBINARY SQL_CONVERT_LONGVARCHAR SQL_CONVERT_NUMERIC SQL_CONVERT_REAL SQL_CONVERT_SMALLINT SQL_CONVERT_TIME SQL_CONVERT_TIMESTAMP SQL_CONVERT_TINYINT SQL_CONVERT_VARBINARY SQL_CONVERT_VARCHAR SQL_CONVERT_WCHAR SQL_CONVERT_WLONGVARCHAR SQL_CONVERT_WVARCHAR SQL_CORRELATION_NAME SQL_CP_DEFAULT SQL_CP_MATCH_DEFAULT SQL_CP_OFF SQL_CP_ONE_PER_DRIVER SQL_CP_ONE_PER_HENV SQL_CP_RELAXED_MATCH SQL_CP_STRICT_MATCH SQL_CR_CLOSE SQL_CR_DELETE SQL_CR_PRESERVE SQL_CREATE_ASSERTION SQL_CREATE_CHARACTER_SET SQL_CREATE_COLLATION SQL_CREATE_DOMAIN SQL_CREATE_SCHEMA SQL_CREATE_TABLE SQL_CREATE_TRANSLATION SQL_CREATE_VIEW SQL_CS_AUTHORIZATION SQL_CS_CREATE_SCHEMA SQL_CS_DEFAULT_CHARACTER_SET SQL_CT_COLUMN_COLLATION SQL_CT_COLUMN_CONSTRAINT SQL_CT_COLUMN_DEFAULT SQL_CT_COMMIT_DELETE SQL_CT_COMMIT_PRESERVE SQL_CT_CONSTRAINT_DEFERRABLE SQL_CT_CONSTRAINT_INITIALLY_DEFERRED SQL_CT_CONSTRAINT_INITIALLY_IMMEDIATE SQL_CT_CONSTRAINT_NAME_DEFINITION SQL_CT_CONSTRAINT_NON_DEFERRABLE SQL_CT_CREATE_TABLE SQL_CT_GLOBAL_TEMPORARY SQL_CT_LOCAL_TEMPORARY SQL_CT_TABLE_CONSTRAINT SQL_CTR_CREATE_TRANSLATION SQL_CU_DML_STATEMENTS SQL_CU_INDEX_DEFINITION SQL_CU_PRIVILEGE_DEFINITION SQL_CU_PROCEDURE_INVOCATION SQL_CU_TABLE_DEFINITION SQL_CURRENT_QUALIFIER SQL_CURSOR_DYNAMIC SQL_CURSOR_FORWARD_ONLY SQL_CURSOR_KEYSET_DRIVEN SQL_CURSOR_ROLLBACK_BEHAVIOR SQL_CURSOR_STATIC SQL_CURSOR_TYPE SQL_CURSOR_TYPE_DEFAULT SQL_CV_CASCADED SQL_CV_CHECK_OPTION SQL_CV_CREATE_VIEW SQL_CV_LOCAL SQL_CVT_BIGINT SQL_CVT_BINARY SQL_CVT_BIT SQL_CVT_CHAR SQL_CVT_DATE SQL_CVT_DECIMAL SQL_CVT_DOUBLE SQL_CVT_FLOAT SQL_CVT_GUID SQL_CVT_INTEGER SQL_CVT_INTERVAL_DAY_TIME SQL_CVT_INTERVAL_YEAR_MONTH SQL_CVT_LONGVARBINARY SQL_CVT_LONGVARCHAR SQL_CVT_NUMERIC SQL_CVT_REAL SQL_CVT_SMALLINT SQL_CVT_TIME SQL_CVT_TIMESTAMP SQL_CVT_TINYINT SQL_CVT_VARBINARY SQL_CVT_VARCHAR SQL_CVT_WCHAR SQL_CVT_WLONGVARCHAR SQL_CVT_WVARCHAR SQL_DA_DROP_ASSERTION SQL_DATABASE_NAME SQL_DATE SQL_DATETIME_LITERALS SQL_DB_DEFAULT SQL_DB_DISCONNECT SQL_DB_RETURN_TO_POOL SQL_DC_DROP_COLLATION SQL_DCS_DROP_CHARACTER_SET SQL_DD_CASCADE SQL_DD_DROP_DOMAIN SQL_DD_RESTRICT SQL_DDL_INDEX SQL_DEFAULT_PARAM SQL_DELETE SQL_DELETE_BY_BOOKMARK SQL_DESC_ARRAY_SIZE SQL_DESC_ARRAY_STATUS_PTR SQL_DESC_AUTO_UNIQUE_VALUE SQL_DESC_BASE_COLUMN_NAME SQL_DESC_BASE_TABLE_NAME SQL_DESC_BIND_OFFSET_PTR SQL_DESC_BIND_TYPE SQL_DESC_CASE_SENSITIVE SQL_DESC_CATALOG_NAME SQL_DESC_CONCISE_TYPE SQL_DESC_DATETIME_INTERVAL_PRECISION SQL_DESC_DISPLAY_SIZE SQL_DESC_FIXED_PREC_SCALE SQL_DESC_LABEL SQL_DESC_LITERAL_PREFIX SQL_DESC_LITERAL_SUFFIX SQL_DESC_LOCAL_TYPE_NAME SQL_DESC_MAXIMUM_SCALE SQL_DESC_MINIMUM_SCALE SQL_DESC_NUM_PREC_RADIX SQL_DESC_PARAMETER_TYPE SQL_DESC_ROWS_PROCESSED_PTR SQL_DESC_ROWVER SQL_DESC_SCHEMA_NAME SQL_DESC_SEARCHABLE SQL_DESC_TABLE_NAME SQL_DESC_TYPE_NAME SQL_DESC_UNSIGNED SQL_DESC_UPDATABLE SQL_DI_CREATE_INDEX SQL_DI_DROP_INDEX SQL_DIAG_COLUMN_NUMBER SQL_DIAG_CURSOR_ROW_COUNT SQL_DIAG_ROW_NUMBER SQL_DL_SQL92_DATE SQL_DL_SQL92_INTERVAL_DAY SQL_DL_SQL92_INTERVAL_DAY_TO_HOUR SQL_DL_SQL92_INTERVAL_DAY_TO_MINUTE SQL_DL_SQL92_INTERVAL_DAY_TO_SECOND SQL_DL_SQL92_INTERVAL_HOUR SQL_DL_SQL92_INTERVAL_HOUR_TO_MINUTE SQL_DL_SQL92_INTERVAL_HOUR_TO_SECOND SQL_DL_SQL92_INTERVAL_MINUTE SQL_DL_SQL92_INTERVAL_MINUTE_TO_SECOND SQL_DL_SQL92_INTERVAL_MONTH SQL_DL_SQL92_INTERVAL_SECOND SQL_DL_SQL92_INTERVAL_YEAR SQL_DL_SQL92_INTERVAL_YEAR_TO_MONTH SQL_DL_SQL92_TIME SQL_DL_SQL92_TIMESTAMP SQL_DM_VER SQL_DRIVER_COMPLETE SQL_DRIVER_COMPLETE_REQUIRED SQL_DRIVER_HDBC SQL_DRIVER_HDESC SQL_DRIVER_HENV SQL_DRIVER_HLIB SQL_DRIVER_HSTMT SQL_DRIVER_NAME SQL_DRIVER_NOPROMPT SQL_DRIVER_ODBC_VER SQL_DRIVER_PROMPT SQL_DRIVER_VER SQL_DROP_ASSERTION SQL_DROP_CHARACTER_SET SQL_DROP_COLLATION SQL_DROP_DOMAIN SQL_DROP_SCHEMA SQL_DROP_TABLE SQL_DROP_TRANSLATION SQL_DROP_VIEW SQL_DS_CASCADE SQL_DS_DROP_SCHEMA SQL_DS_RESTRICT SQL_DT_CASCADE SQL_DT_DROP_TABLE SQL_DT_RESTRICT SQL_DTC_DONE SQL_DTC_ENLIST_EXPENSIVE SQL_DTC_TRANSITION_COST SQL_DTC_UNENLIST_EXPENSIVE SQL_DTR_DROP_TRANSLATION SQL_DV_CASCADE SQL_DV_DROP_VIEW SQL_DV_RESTRICT SQL_DYNAMIC_CURSOR_ATTRIBUTES1 SQL_DYNAMIC_CURSOR_ATTRIBUTES2 SQL_ENSURE SQL_ENTIRE_ROWSET SQL_EXPRESSIONS_IN_ORDERBY SQL_EXT_API_LAST SQL_EXT_API_START SQL_FD_FETCH_BOOKMARK SQL_FD_FETCH_PREV SQL_FD_FETCH_RESUME SQL_FETCH_BOOKMARK SQL_FETCH_BY_BOOKMARK SQL_FETCH_FIRST_SYSTEM SQL_FETCH_FIRST_USER SQL_FETCH_PREV SQL_FETCH_RESUME SQL_FILE_CATALOG SQL_FILE_NOT_SUPPORTED SQL_FILE_QUALIFIER SQL_FILE_TABLE SQL_FILE_USAGE SQL_FN_CVT_CAST SQL_FN_CVT_CONVERT SQL_FN_NUM_ABS SQL_FN_NUM_ACOS SQL_FN_NUM_ASIN SQL_FN_NUM_ATAN SQL_FN_NUM_ATAN2 SQL_FN_NUM_CEILING SQL_FN_NUM_COS SQL_FN_NUM_COT SQL_FN_NUM_DEGREES SQL_FN_NUM_EXP SQL_FN_NUM_FLOOR SQL_FN_NUM_LOG SQL_FN_NUM_LOG10 SQL_FN_NUM_MOD SQL_FN_NUM_PI SQL_FN_NUM_POWER SQL_FN_NUM_RADIANS SQL_FN_NUM_RAND SQL_FN_NUM_ROUND SQL_FN_NUM_SIGN SQL_FN_NUM_SIN SQL_FN_NUM_SQRT SQL_FN_NUM_TAN SQL_FN_NUM_TRUNCATE SQL_FN_STR_ASCII SQL_FN_STR_BIT_LENGTH SQL_FN_STR_CHAR SQL_FN_STR_CHAR_LENGTH SQL_FN_STR_CHARACTER_LENGTH SQL_FN_STR_CONCAT SQL_FN_STR_DIFFERENCE SQL_FN_STR_INSERT SQL_FN_STR_LCASE SQL_FN_STR_LEFT SQL_FN_STR_LENGTH SQL_FN_STR_LOCATE SQL_FN_STR_LOCATE_2 SQL_FN_STR_LTRIM SQL_FN_STR_OCTET_LENGTH SQL_FN_STR_POSITION SQL_FN_STR_REPEAT SQL_FN_STR_REPLACE SQL_FN_STR_RIGHT SQL_FN_STR_RTRIM SQL_FN_STR_SOUNDEX SQL_FN_STR_SPACE SQL_FN_STR_SUBSTRING SQL_FN_STR_UCASE SQL_FN_SYS_DBNAME SQL_FN_SYS_IFNULL SQL_FN_SYS_USERNAME SQL_FN_TD_CURDATE SQL_FN_TD_CURRENT_DATE SQL_FN_TD_CURRENT_TIME SQL_FN_TD_CURRENT_TIMESTAMP SQL_FN_TD_CURTIME SQL_FN_TD_DAYNAME SQL_FN_TD_DAYOFMONTH SQL_FN_TD_DAYOFWEEK SQL_FN_TD_DAYOFYEAR SQL_FN_TD_EXTRACT SQL_FN_TD_HOUR SQL_FN_TD_MINUTE SQL_FN_TD_MONTH SQL_FN_TD_MONTHNAME SQL_FN_TD_NOW SQL_FN_TD_QUARTER SQL_FN_TD_SECOND SQL_FN_TD_TIMESTAMPADD SQL_FN_TD_TIMESTAMPDIFF SQL_FN_TD_WEEK SQL_FN_TD_YEAR SQL_FN_TSI_DAY SQL_FN_TSI_FRAC_SECOND SQL_FN_TSI_HOUR SQL_FN_TSI_MINUTE SQL_FN_TSI_MONTH SQL_FN_TSI_QUARTER SQL_FN_TSI_SECOND SQL_FN_TSI_WEEK SQL_FN_TSI_YEAR SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES1 SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES2 SQL_GB_COLLATE SQL_GB_GROUP_BY_CONTAINS_SELECT SQL_GB_GROUP_BY_EQUALS_SELECT SQL_GB_NO_RELATION SQL_GB_NOT_SUPPORTED SQL_GD_BLOCK SQL_GD_BOUND SQL_GET_BOOKMARK SQL_GROUP_BY SQL_GUID SQL_HANDLE_SENV SQL_IGNORE SQL_IK_ALL SQL_IK_ASC SQL_IK_DESC SQL_IK_NONE SQL_INDEX_KEYWORDS SQL_INFO_DRIVER_START SQL_INFO_FIRST SQL_INFO_LAST SQL_INFO_SCHEMA_VIEWS SQL_INITIALLY_DEFERRED SQL_INITIALLY_IMMEDIATE SQL_INSERT_STATEMENT SQL_INTERVAL SQL_INTERVAL_DAY SQL_INTERVAL_DAY_TO_HOUR SQL_INTERVAL_DAY_TO_MINUTE SQL_INTERVAL_DAY_TO_SECOND SQL_INTERVAL_HOUR SQL_INTERVAL_HOUR_TO_MINUTE SQL_INTERVAL_HOUR_TO_SECOND SQL_INTERVAL_MINUTE SQL_INTERVAL_MINUTE_TO_SECOND SQL_INTERVAL_MONTH SQL_INTERVAL_SECOND SQL_INTERVAL_YEAR SQL_INTERVAL_YEAR_TO_MONTH SQL_IS_INSERT_LITERALS SQL_IS_INSERT_SEARCHED SQL_IS_INTEGER SQL_IS_POINTER SQL_IS_SELECT_INTO SQL_IS_SMALLINT SQL_IS_UINTEGER SQL_IS_USMALLINT SQL_ISV_ASSERTIONS SQL_ISV_CHARACTER_SETS SQL_ISV_CHECK_CONSTRAINTS SQL_ISV_COLLATIONS SQL_ISV_COLUMN_DOMAIN_USAGE SQL_ISV_COLUMN_PRIVILEGES SQL_ISV_COLUMNS SQL_ISV_CONSTRAINT_COLUMN_USAGE SQL_ISV_CONSTRAINT_TABLE_USAGE SQL_ISV_DOMAIN_CONSTRAINTS SQL_ISV_DOMAINS SQL_ISV_KEY_COLUMN_USAGE SQL_ISV_REFERENTIAL_CONSTRAINTS SQL_ISV_SCHEMATA SQL_ISV_SQL_LANGUAGES SQL_ISV_TABLE_CONSTRAINTS SQL_ISV_TABLE_PRIVILEGES SQL_ISV_TABLES SQL_ISV_TRANSLATIONS SQL_ISV_USAGE_PRIVILEGES SQL_ISV_VIEW_COLUMN_USAGE SQL_ISV_VIEW_TABLE_USAGE SQL_ISV_VIEWS SQL_KEYSET_CURSOR_ATTRIBUTES1 SQL_KEYSET_CURSOR_ATTRIBUTES2 SQL_KEYSET_SIZE SQL_KEYSET_SIZE_DEFAULT SQL_KEYWORDS SQL_LCK_EXCLUSIVE SQL_LCK_NO_CHANGE SQL_LCK_UNLOCK SQL_LEN_BINARY_ATTR_OFFSET SQL_LEN_DATA_AT_EXEC_OFFSET SQL_LIKE_ESCAPE_CLAUSE SQL_LIKE_ONLY SQL_LOCK_EXCLUSIVE SQL_LOCK_NO_CHANGE SQL_LOCK_TYPES SQL_LOCK_UNLOCK SQL_LOGIN_TIMEOUT SQL_LOGIN_TIMEOUT_DEFAULT SQL_LONGVARBINARY SQL_LONGVARCHAR SQL_MAX_ASYNC_CONCURRENT_STATEMENTS SQL_MAX_BINARY_LITERAL_LEN SQL_MAX_CHAR_LITERAL_LEN SQL_MAX_DSN_LENGTH SQL_MAX_LENGTH SQL_MAX_LENGTH_DEFAULT SQL_MAX_OPTION_STRING_LENGTH SQL_MAX_OWNER_NAME_LEN SQL_MAX_PROCEDURE_NAME_LEN SQL_MAX_QUALIFIER_NAME_LEN SQL_MAX_ROW_SIZE_INCLUDES_LONG SQL_MAX_ROWS SQL_MAX_ROWS_DEFAULT SQL_MODE_DEFAULT SQL_MODE_READ_ONLY SQL_MODE_READ_WRITE SQL_MULT_RESULT_SETS SQL_MULTIPLE_ACTIVE_TXN SQL_NC_END SQL_NC_START SQL_NEED_LONG_DATA_LEN SQL_NNC_NON_NULL SQL_NNC_NULL SQL_NO_ACTION SQL_NO_COLUMN_NUMBER SQL_NO_DATA_FOUND SQL_NO_ROW_NUMBER SQL_NO_TOTAL SQL_NON_NULLABLE_COLUMNS SQL_NOSCAN SQL_NOSCAN_DEFAULT SQL_NOSCAN_OFF SQL_NOSCAN_ON SQL_NOT_DEFERRABLE SQL_NUM_EXTENSIONS SQL_NUM_FUNCTIONS SQL_NUMERIC_FUNCTIONS SQL_OAC_LEVEL1 SQL_OAC_LEVEL2 SQL_OAC_NONE SQL_ODBC_API_CONFORMANCE SQL_ODBC_CURSORS SQL_ODBC_INTERFACE_CONFORMANCE SQL_ODBC_KEYWORDS SQL_ODBC_SAG_CLI_CONFORMANCE SQL_ODBC_SQL_CONFORMANCE SQL_ODBC_SQL_OPT_IEF SQL_ODBC_VER SQL_OJ_CAPABILITIES SQL_OPT_TRACE SQL_OPT_TRACE_DEFAULT SQL_OPT_TRACE_FILE_DEFAULT SQL_OPT_TRACE_OFF SQL_OPT_TRACE_ON SQL_OPT_TRACEFILE SQL_OSC_CORE SQL_OSC_EXTENDED SQL_OSC_MINIMUM SQL_OSCC_COMPLIANT SQL_OSCC_NOT_COMPLIANT SQL_OU_DML_STATEMENTS SQL_OU_INDEX_DEFINITION SQL_OU_PRIVILEGE_DEFINITION SQL_OU_PROCEDURE_INVOCATION SQL_OU_TABLE_DEFINITION SQL_OUTER_JOINS SQL_OWNER_TERM SQL_OWNER_USAGE SQL_PACKET_SIZE SQL_PARAM_ARRAY_ROW_COUNTS SQL_PARAM_ARRAY_SELECTS SQL_PARAM_BIND_BY_COLUMN SQL_PARAM_BIND_TYPE_DEFAULT SQL_PARAM_DIAG_UNAVAILABLE SQL_PARAM_ERROR SQL_PARAM_IGNORE SQL_PARAM_INPUT SQL_PARAM_INPUT_OUTPUT SQL_PARAM_OUTPUT SQL_PARAM_PROCEED SQL_PARAM_SUCCESS SQL_PARAM_SUCCESS_WITH_INFO SQL_PARAM_TYPE_DEFAULT SQL_PARAM_TYPE_UNKNOWN SQL_PARAM_UNUSED SQL_PARC_BATCH SQL_PARC_NO_BATCH SQL_PAS_BATCH SQL_PAS_NO_BATCH SQL_PAS_NO_SELECT SQL_PC_NOT_PSEUDO SQL_POS_ADD SQL_POS_DELETE SQL_POS_OPERATIONS SQL_POS_POSITION SQL_POS_REFRESH SQL_POS_UPDATE SQL_POSITION SQL_POSITIONED_STATEMENTS SQL_PRED_SEARCHABLE SQL_PROCEDURE_TERM SQL_PROCEDURES SQL_PS_POSITIONED_DELETE SQL_PS_POSITIONED_UPDATE SQL_PS_SELECT_FOR_UPDATE SQL_PT_FUNCTION SQL_PT_PROCEDURE SQL_PT_UNKNOWN SQL_QL_END SQL_QL_START SQL_QU_DML_STATEMENTS SQL_QU_INDEX_DEFINITION SQL_QU_PRIVILEGE_DEFINITION SQL_QU_PROCEDURE_INVOCATION SQL_QU_TABLE_DEFINITION SQL_QUALIFIER_LOCATION SQL_QUALIFIER_NAME_SEPARATOR SQL_QUALIFIER_TERM SQL_QUALIFIER_USAGE SQL_QUERY_TIMEOUT SQL_QUERY_TIMEOUT_DEFAULT SQL_QUICK SQL_QUIET_MODE SQL_QUOTED_IDENTIFIER_CASE SQL_RD_DEFAULT SQL_RD_OFF SQL_RD_ON SQL_REFRESH SQL_RESTRICT SQL_RESULT_COL SQL_RETRIEVE_DATA SQL_RETURN_VALUE SQL_ROW_ADDED SQL_ROW_DELETED SQL_ROW_ERROR SQL_ROW_IGNORE SQL_ROW_NOROW SQL_ROW_NUMBER SQL_ROW_NUMBER_UNKNOWN SQL_ROW_PROCEED SQL_ROW_SUCCESS SQL_ROW_SUCCESS_WITH_INFO SQL_ROW_UPDATED SQL_ROW_UPDATES SQL_ROWSET_SIZE SQL_ROWSET_SIZE_DEFAULT SQL_ROWVER SQL_SC_FIPS127_2_TRANSITIONAL SQL_SC_NON_UNIQUE SQL_SC_SQL92_ENTRY SQL_SC_SQL92_FULL SQL_SC_SQL92_INTERMEDIATE SQL_SC_TRY_UNIQUE SQL_SC_UNIQUE SQL_SCC_ISO92_CLI SQL_SCC_XOPEN_CLI_VERSION1 SQL_SCCO_OPT_TIMESTAMP SQL_SCHEMA_TERM SQL_SCHEMA_USAGE SQL_SCROLL_DYNAMIC SQL_SCROLL_FORWARD_ONLY SQL_SCROLL_KEYSET_DRIVEN SQL_SCROLL_OPTIONS SQL_SCROLL_STATIC SQL_SDF_CURRENT_DATE SQL_SDF_CURRENT_TIME SQL_SDF_CURRENT_TIMESTAMP SQL_SEARCHABLE SQL_SET_DEFAULT SQL_SET_NULL SQL_SETPARAM_VALUE_MAX SQL_SETPOS_MAX_LOCK_VALUE SQL_SETPOS_MAX_OPTION_VALUE SQL_SFKD_CASCADE SQL_SFKD_NO_ACTION SQL_SFKD_SET_DEFAULT SQL_SFKD_SET_NULL SQL_SFKU_CASCADE SQL_SFKU_NO_ACTION SQL_SFKU_SET_DEFAULT SQL_SFKU_SET_NULL SQL_SG_DELETE_TABLE SQL_SG_INSERT_COLUMN SQL_SG_INSERT_TABLE SQL_SG_REFERENCES_COLUMN SQL_SG_REFERENCES_TABLE SQL_SG_SELECT_TABLE SQL_SG_UPDATE_COLUMN SQL_SG_UPDATE_TABLE SQL_SG_USAGE_ON_CHARACTER_SET SQL_SG_USAGE_ON_COLLATION SQL_SG_USAGE_ON_DOMAIN SQL_SG_USAGE_ON_TRANSLATION SQL_SG_WITH_GRANT_OPTION SQL_SIGNED_OFFSET SQL_SIMULATE_CURSOR SQL_SNVF_BIT_LENGTH SQL_SNVF_CHAR_LENGTH SQL_SNVF_CHARACTER_LENGTH SQL_SNVF_EXTRACT SQL_SNVF_OCTET_LENGTH SQL_SNVF_POSITION SQL_SO_DYNAMIC SQL_SO_FORWARD_ONLY SQL_SO_KEYSET_DRIVEN SQL_SO_MIXED SQL_SO_STATIC SQL_SP_BETWEEN SQL_SP_COMPARISON SQL_SP_EXISTS SQL_SP_IN SQL_SP_ISNOTNULL SQL_SP_ISNULL SQL_SP_LIKE SQL_SP_MATCH_FULL SQL_SP_MATCH_PARTIAL SQL_SP_MATCH_UNIQUE_FULL SQL_SP_MATCH_UNIQUE_PARTIAL SQL_SP_OVERLAPS SQL_SP_QUANTIFIED_COMPARISON SQL_SP_UNIQUE SQL_SPEC_MAJOR SQL_SPEC_MINOR SQL_SPEC_STRING SQL_SQ_COMPARISON SQL_SQ_CORRELATED_SUBQUERIES SQL_SQ_EXISTS SQL_SQ_IN SQL_SQ_QUANTIFIED SQL_SQL_CONFORMANCE SQL_SQL92_DATETIME_FUNCTIONS SQL_SQL92_FOREIGN_KEY_DELETE_RULE SQL_SQL92_FOREIGN_KEY_UPDATE_RULE SQL_SQL92_GRANT SQL_SQL92_NUMERIC_VALUE_FUNCTIONS SQL_SQL92_PREDICATES SQL_SQL92_RELATIONAL_JOIN_OPERATORS SQL_SQL92_REVOKE SQL_SQL92_ROW_VALUE_CONSTRUCTOR SQL_SQL92_STRING_FUNCTIONS SQL_SQL92_VALUE_EXPRESSIONS SQL_SQLSTATE_SIZE SQL_SR_CASCADE SQL_SR_DELETE_TABLE SQL_SR_GRANT_OPTION_FOR SQL_SR_INSERT_COLUMN SQL_SR_INSERT_TABLE SQL_SR_REFERENCES_COLUMN SQL_SR_REFERENCES_TABLE SQL_SR_RESTRICT SQL_SR_SELECT_TABLE SQL_SR_UPDATE_COLUMN SQL_SR_UPDATE_TABLE SQL_SR_USAGE_ON_CHARACTER_SET SQL_SR_USAGE_ON_COLLATION SQL_SR_USAGE_ON_DOMAIN SQL_SR_USAGE_ON_TRANSLATION SQL_SRJO_CORRESPONDING_CLAUSE SQL_SRJO_CROSS_JOIN SQL_SRJO_EXCEPT_JOIN SQL_SRJO_FULL_OUTER_JOIN SQL_SRJO_INNER_JOIN SQL_SRJO_INTERSECT_JOIN SQL_SRJO_LEFT_OUTER_JOIN SQL_SRJO_NATURAL_JOIN SQL_SRJO_RIGHT_OUTER_JOIN SQL_SRJO_UNION_JOIN SQL_SRVC_DEFAULT SQL_SRVC_NULL SQL_SRVC_ROW_SUBQUERY SQL_SRVC_VALUE_EXPRESSION SQL_SS_ADDITIONS SQL_SS_DELETIONS SQL_SS_UPDATES SQL_SSF_CONVERT SQL_SSF_LOWER SQL_SSF_SUBSTRING SQL_SSF_TRANSLATE SQL_SSF_TRIM_BOTH SQL_SSF_TRIM_LEADING SQL_SSF_TRIM_TRAILING SQL_SSF_UPPER SQL_STANDARD_CLI_CONFORMANCE SQL_STATIC_CURSOR_ATTRIBUTES1 SQL_STATIC_CURSOR_ATTRIBUTES2 SQL_STATIC_SENSITIVITY SQL_STMT_OPT_MAX SQL_STMT_OPT_MIN SQL_STRING_FUNCTIONS SQL_SU_DML_STATEMENTS SQL_SU_INDEX_DEFINITION SQL_SU_PRIVILEGE_DEFINITION SQL_SU_PROCEDURE_INVOCATION SQL_SU_TABLE_DEFINITION SQL_SUBQUERIES SQL_SVE_CASE SQL_SVE_CAST SQL_SVE_COALESCE SQL_SVE_NULLIF SQL_SYSTEM_FUNCTIONS SQL_TABLE_STAT SQL_TABLE_TERM SQL_TIME SQL_TIMEDATE_ADD_INTERVALS SQL_TIMEDATE_DIFF_INTERVALS SQL_TIMEDATE_FUNCTIONS SQL_TIMESTAMP SQL_TINYINT SQL_TRANSLATE_DLL SQL_TRANSLATE_OPTION SQL_TXN_ISOLATION SQL_TXN_VERSIONING SQL_TYPE_DRIVER_END SQL_TYPE_DRIVER_START SQL_TYPE_MAX SQL_TYPE_MIN SQL_TYPE_NULL SQL_U_UNION SQL_U_UNION_ALL SQL_UB_DEFAULT SQL_UB_FIXED SQL_UB_OFF SQL_UB_ON SQL_UB_VARIABLE SQL_UNION SQL_UNION_STATEMENT SQL_UNSEARCHABLE SQL_UNSIGNED_OFFSET SQL_UPDATE SQL_UPDATE_BY_BOOKMARK SQL_US_UNION SQL_US_UNION_ALL SQL_USE_BOOKMARKS SQL_VARBINARY TRACE_ON TRACE_VERSION"
  },
  "phobos/etc/c/odbc/sqltypes/Overview.html": {
    "href": "phobos/etc/c/odbc/sqltypes/Overview.html",
    "title": "Module - etc.c.odbc.sqltypes | Marmos Demo",
    "keywords": "Module - etc.c.odbc.sqltypes About Windows API header module Translated from MinGW Windows headers License: $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0) Source: $(PHOBOSSRC etc/c/odbc/_sqltypes.d) Declarations for interfacing with the ODBC library. See_Also: $(LINK2 https://docs.microsoft.com/en-us/sql/odbc/reference/syntax/odbc-api-reference, ODBC API Reference on MSDN) Aliases Name Description BOOKMARK HDBC HENV HSTMT LDOUBLE ODBCINT64 PTR RETCODE SCHAR SDOUBLE SDWORD SFLOAT SLONG SQL_DATE_STRUCT SQL_TIME_STRUCT SQL_TIMESTAMP_STRUCT SQLBIGINT SQLCHAR SQLDATE SQLDECIMAL SQLDOUBLE SQLFLOAT SQLGUID SQLHANDLE SQLHDBC SQLHDESC SQLHENV SQLHSTMT SQLHWND SQLINTEGER SQLLEN SQLNUMERIC SQLPOINTER SQLREAL SQLRETURN SQLROWCOUNT SQLROWOFFSET SQLSCHAR SQLSETPOSIROW SQLSMALLINT SQLTCHAR SQLTIME SQLTIMESTAMP SQLTRANSID SQLUBIGINT SQLUINTEGER SQLULEN SQLUSMALLINT SQLVARCHAR SQLWCHAR SSHORT SWORD UDWORD UWORD Structs Name Description DATE_STRUCT SQL_DAY_SECOND_STRUCT SQL_INTERVAL_STRUCT SQL_NUMERIC_STRUCT SQL_YEAR_MONTH_STRUCT TIME_STRUCT TIMESTAMP_STRUCT Variables Name Description SQL_MAX_NUMERIC_LEN"
  },
  "phobos/etc/c/odbc/sqltypes/Structs/DATE_STRUCT.html": {
    "href": "phobos/etc/c/odbc/sqltypes/Structs/DATE_STRUCT.html",
    "title": "Struct - DATE_STRUCT | Marmos Demo",
    "keywords": "Struct - DATE_STRUCT Module etc.c.odbc.sqltypes public struct DATE_STRUCT { // SQLUSMALLINT day; // SQLUSMALLINT month; // SQLSMALLINT year; } Variables Name Description day month year"
  },
  "phobos/etc/c/odbc/sqltypes/Structs/SQL_DAY_SECOND_STRUCT.html": {
    "href": "phobos/etc/c/odbc/sqltypes/Structs/SQL_DAY_SECOND_STRUCT.html",
    "title": "Struct - SQL_DAY_SECOND_STRUCT | Marmos Demo",
    "keywords": "Struct - SQL_DAY_SECOND_STRUCT Module etc.c.odbc.sqltypes public struct SQL_DAY_SECOND_STRUCT { // SQLUINTEGER day; // SQLUINTEGER fraction; // SQLUINTEGER hour; // SQLUINTEGER minute; // SQLUINTEGER second; } Variables Name Description day fraction hour minute second"
  },
  "phobos/etc/c/odbc/sqltypes/Structs/SQL_INTERVAL_STRUCT.html": {
    "href": "phobos/etc/c/odbc/sqltypes/Structs/SQL_INTERVAL_STRUCT.html",
    "title": "Struct - SQL_INTERVAL_STRUCT | Marmos Demo",
    "keywords": "Struct - SQL_INTERVAL_STRUCT Module etc.c.odbc.sqltypes public struct SQL_INTERVAL_STRUCT { // SQLSMALLINT interval_sign; // SQLINTERVAL interval_type; // _intval intval; } Variables Name Description interval_sign interval_type intval"
  },
  "phobos/etc/c/odbc/sqltypes/Structs/SQL_NUMERIC_STRUCT.html": {
    "href": "phobos/etc/c/odbc/sqltypes/Structs/SQL_NUMERIC_STRUCT.html",
    "title": "Struct - SQL_NUMERIC_STRUCT | Marmos Demo",
    "keywords": "Struct - SQL_NUMERIC_STRUCT Module etc.c.odbc.sqltypes public struct SQL_NUMERIC_STRUCT { // SQLCHAR precision; // SQLSCHAR scale; // SQLCHAR sign; // <bug: unknown> val; } Variables Name Description precision scale sign val"
  },
  "phobos/etc/c/odbc/sqltypes/Structs/SQL_YEAR_MONTH_STRUCT.html": {
    "href": "phobos/etc/c/odbc/sqltypes/Structs/SQL_YEAR_MONTH_STRUCT.html",
    "title": "Struct - SQL_YEAR_MONTH_STRUCT | Marmos Demo",
    "keywords": "Struct - SQL_YEAR_MONTH_STRUCT Module etc.c.odbc.sqltypes public struct SQL_YEAR_MONTH_STRUCT { // SQLUINTEGER month; // SQLUINTEGER year; } Variables Name Description month year"
  },
  "phobos/etc/c/odbc/sqltypes/Structs/TIMESTAMP_STRUCT.html": {
    "href": "phobos/etc/c/odbc/sqltypes/Structs/TIMESTAMP_STRUCT.html",
    "title": "Struct - TIMESTAMP_STRUCT | Marmos Demo",
    "keywords": "Struct - TIMESTAMP_STRUCT Module etc.c.odbc.sqltypes public struct TIMESTAMP_STRUCT { // SQLUSMALLINT day; // SQLUINTEGER fraction; // SQLUSMALLINT hour; // SQLUSMALLINT minute; // SQLUSMALLINT month; // SQLUSMALLINT second; // SQLSMALLINT year; } Variables Name Description day fraction hour minute month second year"
  },
  "phobos/etc/c/odbc/sqltypes/Structs/TIME_STRUCT.html": {
    "href": "phobos/etc/c/odbc/sqltypes/Structs/TIME_STRUCT.html",
    "title": "Struct - TIME_STRUCT | Marmos Demo",
    "keywords": "Struct - TIME_STRUCT Module etc.c.odbc.sqltypes public struct TIME_STRUCT { // SQLUSMALLINT hour; // SQLUSMALLINT minute; // SQLUSMALLINT second; } Variables Name Description hour minute second"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLBrowseConnectA.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLBrowseConnectA.html",
    "title": "Overloads for - SQLBrowseConnectA | Marmos Demo",
    "keywords": "Overloads for - SQLBrowseConnectA Module etc.c.odbc.sqlucode SQLBrowseConnectA(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLBrowseConnectA( SQLHDBC __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLBrowseConnectW.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLBrowseConnectW.html",
    "title": "Overloads for - SQLBrowseConnectW | Marmos Demo",
    "keywords": "Overloads for - SQLBrowseConnectW Module etc.c.odbc.sqlucode SQLBrowseConnectW(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLBrowseConnectW( SQLHDBC __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLColAttributeA.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLColAttributeA.html",
    "title": "Overloads for - SQLColAttributeA | Marmos Demo",
    "keywords": "Overloads for - SQLColAttributeA Module etc.c.odbc.sqlucode SQLColAttributeA(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLColAttributeA( SQLHSTMT __anonymous, SQLSMALLINT __anonymous, SQLSMALLINT __anonymous, SQLPOINTER __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLPOINTER __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLColAttributeW.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLColAttributeW.html",
    "title": "Overloads for - SQLColAttributeW | Marmos Demo",
    "keywords": "Overloads for - SQLColAttributeW Module etc.c.odbc.sqlucode SQLColAttributeW(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLColAttributeW( SQLHSTMT __anonymous, SQLUSMALLINT __anonymous, SQLUSMALLINT __anonymous, SQLPOINTER __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLPOINTER __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLColAttributesA.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLColAttributesA.html",
    "title": "Overloads for - SQLColAttributesA | Marmos Demo",
    "keywords": "Overloads for - SQLColAttributesA Module etc.c.odbc.sqlucode SQLColAttributesA(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLColAttributesA( SQLHSTMT __anonymous, SQLUSMALLINT __anonymous, SQLUSMALLINT __anonymous, SQLPOINTER __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLColAttributesW.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLColAttributesW.html",
    "title": "Overloads for - SQLColAttributesW | Marmos Demo",
    "keywords": "Overloads for - SQLColAttributesW Module etc.c.odbc.sqlucode SQLColAttributesW(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLColAttributesW( SQLHSTMT __anonymous, SQLUSMALLINT __anonymous, SQLUSMALLINT __anonymous, SQLPOINTER __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLColumnPrivilegesA.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLColumnPrivilegesA.html",
    "title": "Overloads for - SQLColumnPrivilegesA | Marmos Demo",
    "keywords": "Overloads for - SQLColumnPrivilegesA Module etc.c.odbc.sqlucode SQLColumnPrivilegesA(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLColumnPrivilegesA( SQLHSTMT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLColumnPrivilegesW.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLColumnPrivilegesW.html",
    "title": "Overloads for - SQLColumnPrivilegesW | Marmos Demo",
    "keywords": "Overloads for - SQLColumnPrivilegesW Module etc.c.odbc.sqlucode SQLColumnPrivilegesW(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLColumnPrivilegesW( SQLHSTMT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLColumnsA.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLColumnsA.html",
    "title": "Overloads for - SQLColumnsA | Marmos Demo",
    "keywords": "Overloads for - SQLColumnsA Module etc.c.odbc.sqlucode SQLColumnsA(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLColumnsA( SQLHSTMT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLColumnsW.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLColumnsW.html",
    "title": "Overloads for - SQLColumnsW | Marmos Demo",
    "keywords": "Overloads for - SQLColumnsW Module etc.c.odbc.sqlucode SQLColumnsW(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLColumnsW( SQLHSTMT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLConnectA.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLConnectA.html",
    "title": "Overloads for - SQLConnectA | Marmos Demo",
    "keywords": "Overloads for - SQLConnectA Module etc.c.odbc.sqlucode SQLConnectA(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLConnectA( SQLHDBC __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLConnectW.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLConnectW.html",
    "title": "Overloads for - SQLConnectW | Marmos Demo",
    "keywords": "Overloads for - SQLConnectW Module etc.c.odbc.sqlucode SQLConnectW(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLConnectW( SQLHDBC __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLDataSourcesA.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLDataSourcesA.html",
    "title": "Overloads for - SQLDataSourcesA | Marmos Demo",
    "keywords": "Overloads for - SQLDataSourcesA Module etc.c.odbc.sqlucode SQLDataSourcesA(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLDataSourcesA( SQLHENV __anonymous, SQLUSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLDataSourcesW.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLDataSourcesW.html",
    "title": "Overloads for - SQLDataSourcesW | Marmos Demo",
    "keywords": "Overloads for - SQLDataSourcesW Module etc.c.odbc.sqlucode SQLDataSourcesW(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLDataSourcesW( SQLHENV __anonymous, SQLUSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLDescribeColA.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLDescribeColA.html",
    "title": "Overloads for - SQLDescribeColA | Marmos Demo",
    "keywords": "Overloads for - SQLDescribeColA Module etc.c.odbc.sqlucode SQLDescribeColA(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLDescribeColA( SQLHSTMT __anonymous, SQLUSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLDescribeColW.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLDescribeColW.html",
    "title": "Overloads for - SQLDescribeColW | Marmos Demo",
    "keywords": "Overloads for - SQLDescribeColW Module etc.c.odbc.sqlucode SQLDescribeColW(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLDescribeColW( SQLHSTMT __anonymous, SQLUSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLDriverConnectA.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLDriverConnectA.html",
    "title": "Overloads for - SQLDriverConnectA | Marmos Demo",
    "keywords": "Overloads for - SQLDriverConnectA Module etc.c.odbc.sqlucode SQLDriverConnectA(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLDriverConnectA( SQLHDBC __anonymous, SQLHWND __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLUSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLDriverConnectW.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLDriverConnectW.html",
    "title": "Overloads for - SQLDriverConnectW | Marmos Demo",
    "keywords": "Overloads for - SQLDriverConnectW Module etc.c.odbc.sqlucode SQLDriverConnectW(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLDriverConnectW( SQLHDBC __anonymous, SQLHWND __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLUSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLDriversA.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLDriversA.html",
    "title": "Overloads for - SQLDriversA | Marmos Demo",
    "keywords": "Overloads for - SQLDriversA Module etc.c.odbc.sqlucode SQLDriversA(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLDriversA( SQLHENV __anonymous, SQLUSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLDriversW.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLDriversW.html",
    "title": "Overloads for - SQLDriversW | Marmos Demo",
    "keywords": "Overloads for - SQLDriversW Module etc.c.odbc.sqlucode SQLDriversW(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLDriversW( SQLHENV __anonymous, SQLUSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLErrorA.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLErrorA.html",
    "title": "Overloads for - SQLErrorA | Marmos Demo",
    "keywords": "Overloads for - SQLErrorA Module etc.c.odbc.sqlucode SQLErrorA(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLErrorA( SQLHENV __anonymous, SQLHDBC __anonymous, SQLHSTMT __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLErrorW.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLErrorW.html",
    "title": "Overloads for - SQLErrorW | Marmos Demo",
    "keywords": "Overloads for - SQLErrorW Module etc.c.odbc.sqlucode SQLErrorW(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLErrorW( SQLHENV __anonymous, SQLHDBC __anonymous, SQLHSTMT __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLExecDirectA.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLExecDirectA.html",
    "title": "Overloads for - SQLExecDirectA | Marmos Demo",
    "keywords": "Overloads for - SQLExecDirectA Module etc.c.odbc.sqlucode SQLExecDirectA(__anonymous, __anonymous, __anonymous) SQLRETURN SQLExecDirectA( SQLHSTMT __anonymous, <bug: unknown> __anonymous, SQLINTEGER __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLExecDirectW.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLExecDirectW.html",
    "title": "Overloads for - SQLExecDirectW | Marmos Demo",
    "keywords": "Overloads for - SQLExecDirectW Module etc.c.odbc.sqlucode SQLExecDirectW(__anonymous, __anonymous, __anonymous) SQLRETURN SQLExecDirectW( SQLHSTMT __anonymous, <bug: unknown> __anonymous, SQLINTEGER __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLForeignKeysA.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLForeignKeysA.html",
    "title": "Overloads for - SQLForeignKeysA | Marmos Demo",
    "keywords": "Overloads for - SQLForeignKeysA Module etc.c.odbc.sqlucode SQLForeignKeysA(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLForeignKeysA( SQLHSTMT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLForeignKeysW.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLForeignKeysW.html",
    "title": "Overloads for - SQLForeignKeysW | Marmos Demo",
    "keywords": "Overloads for - SQLForeignKeysW Module etc.c.odbc.sqlucode SQLForeignKeysW(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLForeignKeysW( SQLHSTMT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLGetConnectAttrA.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLGetConnectAttrA.html",
    "title": "Overloads for - SQLGetConnectAttrA | Marmos Demo",
    "keywords": "Overloads for - SQLGetConnectAttrA Module etc.c.odbc.sqlucode SQLGetConnectAttrA(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLGetConnectAttrA( SQLHDBC __anonymous, SQLINTEGER __anonymous, SQLPOINTER __anonymous, SQLINTEGER __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLGetConnectAttrW.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLGetConnectAttrW.html",
    "title": "Overloads for - SQLGetConnectAttrW | Marmos Demo",
    "keywords": "Overloads for - SQLGetConnectAttrW Module etc.c.odbc.sqlucode SQLGetConnectAttrW(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLGetConnectAttrW( SQLHDBC __anonymous, SQLINTEGER __anonymous, SQLPOINTER __anonymous, SQLINTEGER __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLGetConnectOptionA.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLGetConnectOptionA.html",
    "title": "Overloads for - SQLGetConnectOptionA | Marmos Demo",
    "keywords": "Overloads for - SQLGetConnectOptionA Module etc.c.odbc.sqlucode SQLGetConnectOptionA(__anonymous, __anonymous, __anonymous) SQLRETURN SQLGetConnectOptionA( SQLHDBC __anonymous, SQLUSMALLINT __anonymous, SQLPOINTER __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLGetConnectOptionW.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLGetConnectOptionW.html",
    "title": "Overloads for - SQLGetConnectOptionW | Marmos Demo",
    "keywords": "Overloads for - SQLGetConnectOptionW Module etc.c.odbc.sqlucode SQLGetConnectOptionW(__anonymous, __anonymous, __anonymous) SQLRETURN SQLGetConnectOptionW( SQLHDBC __anonymous, SQLUSMALLINT __anonymous, SQLPOINTER __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLGetCursorNameA.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLGetCursorNameA.html",
    "title": "Overloads for - SQLGetCursorNameA | Marmos Demo",
    "keywords": "Overloads for - SQLGetCursorNameA Module etc.c.odbc.sqlucode SQLGetCursorNameA(__anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLGetCursorNameA( SQLHSTMT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLGetCursorNameW.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLGetCursorNameW.html",
    "title": "Overloads for - SQLGetCursorNameW | Marmos Demo",
    "keywords": "Overloads for - SQLGetCursorNameW Module etc.c.odbc.sqlucode SQLGetCursorNameW(__anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLGetCursorNameW( SQLHSTMT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLGetDescFieldA.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLGetDescFieldA.html",
    "title": "Overloads for - SQLGetDescFieldA | Marmos Demo",
    "keywords": "Overloads for - SQLGetDescFieldA Module etc.c.odbc.sqlucode SQLGetDescFieldA(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLGetDescFieldA( SQLHDESC __anonymous, SQLSMALLINT __anonymous, SQLSMALLINT __anonymous, SQLPOINTER __anonymous, SQLINTEGER __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLGetDescFieldW.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLGetDescFieldW.html",
    "title": "Overloads for - SQLGetDescFieldW | Marmos Demo",
    "keywords": "Overloads for - SQLGetDescFieldW Module etc.c.odbc.sqlucode SQLGetDescFieldW(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLGetDescFieldW( SQLHDESC __anonymous, SQLSMALLINT __anonymous, SQLSMALLINT __anonymous, SQLPOINTER __anonymous, SQLINTEGER __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLGetDescRecA.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLGetDescRecA.html",
    "title": "Overloads for - SQLGetDescRecA | Marmos Demo",
    "keywords": "Overloads for - SQLGetDescRecA Module etc.c.odbc.sqlucode SQLGetDescRecA(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLGetDescRecA( SQLHDESC __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLGetDescRecW.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLGetDescRecW.html",
    "title": "Overloads for - SQLGetDescRecW | Marmos Demo",
    "keywords": "Overloads for - SQLGetDescRecW Module etc.c.odbc.sqlucode SQLGetDescRecW(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLGetDescRecW( SQLHDESC __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLGetDiagFieldA.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLGetDiagFieldA.html",
    "title": "Overloads for - SQLGetDiagFieldA | Marmos Demo",
    "keywords": "Overloads for - SQLGetDiagFieldA Module etc.c.odbc.sqlucode SQLGetDiagFieldA(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLGetDiagFieldA( SQLSMALLINT __anonymous, SQLHANDLE __anonymous, SQLSMALLINT __anonymous, SQLSMALLINT __anonymous, SQLPOINTER __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLGetDiagFieldW.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLGetDiagFieldW.html",
    "title": "Overloads for - SQLGetDiagFieldW | Marmos Demo",
    "keywords": "Overloads for - SQLGetDiagFieldW Module etc.c.odbc.sqlucode SQLGetDiagFieldW(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLGetDiagFieldW( SQLSMALLINT __anonymous, SQLHANDLE __anonymous, SQLSMALLINT __anonymous, SQLSMALLINT __anonymous, SQLPOINTER __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLGetDiagRecA.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLGetDiagRecA.html",
    "title": "Overloads for - SQLGetDiagRecA | Marmos Demo",
    "keywords": "Overloads for - SQLGetDiagRecA Module etc.c.odbc.sqlucode SQLGetDiagRecA(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLGetDiagRecA( SQLSMALLINT __anonymous, SQLHANDLE __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLGetDiagRecW.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLGetDiagRecW.html",
    "title": "Overloads for - SQLGetDiagRecW | Marmos Demo",
    "keywords": "Overloads for - SQLGetDiagRecW Module etc.c.odbc.sqlucode SQLGetDiagRecW(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLGetDiagRecW( SQLSMALLINT __anonymous, SQLHANDLE __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLGetInfoA.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLGetInfoA.html",
    "title": "Overloads for - SQLGetInfoA | Marmos Demo",
    "keywords": "Overloads for - SQLGetInfoA Module etc.c.odbc.sqlucode SQLGetInfoA(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLGetInfoA( SQLHDBC __anonymous, SQLUSMALLINT __anonymous, SQLPOINTER __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLGetInfoW.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLGetInfoW.html",
    "title": "Overloads for - SQLGetInfoW | Marmos Demo",
    "keywords": "Overloads for - SQLGetInfoW Module etc.c.odbc.sqlucode SQLGetInfoW(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLGetInfoW( SQLHDBC __anonymous, SQLUSMALLINT __anonymous, SQLPOINTER __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLGetStmtAttrA.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLGetStmtAttrA.html",
    "title": "Overloads for - SQLGetStmtAttrA | Marmos Demo",
    "keywords": "Overloads for - SQLGetStmtAttrA Module etc.c.odbc.sqlucode SQLGetStmtAttrA(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLGetStmtAttrA( SQLHSTMT __anonymous, SQLINTEGER __anonymous, SQLPOINTER __anonymous, SQLINTEGER __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLGetStmtAttrW.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLGetStmtAttrW.html",
    "title": "Overloads for - SQLGetStmtAttrW | Marmos Demo",
    "keywords": "Overloads for - SQLGetStmtAttrW Module etc.c.odbc.sqlucode SQLGetStmtAttrW(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLGetStmtAttrW( SQLHSTMT __anonymous, SQLINTEGER __anonymous, SQLPOINTER __anonymous, SQLINTEGER __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLGetTypeInfoA.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLGetTypeInfoA.html",
    "title": "Overloads for - SQLGetTypeInfoA | Marmos Demo",
    "keywords": "Overloads for - SQLGetTypeInfoA Module etc.c.odbc.sqlucode SQLGetTypeInfoA(__anonymous, __anonymous) SQLRETURN SQLGetTypeInfoA( SQLHSTMT __anonymous, SQLSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLGetTypeInfoW.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLGetTypeInfoW.html",
    "title": "Overloads for - SQLGetTypeInfoW | Marmos Demo",
    "keywords": "Overloads for - SQLGetTypeInfoW Module etc.c.odbc.sqlucode SQLGetTypeInfoW(__anonymous, __anonymous) SQLRETURN SQLGetTypeInfoW( SQLHSTMT __anonymous, SQLSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLNativeSqlA.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLNativeSqlA.html",
    "title": "Overloads for - SQLNativeSqlA | Marmos Demo",
    "keywords": "Overloads for - SQLNativeSqlA Module etc.c.odbc.sqlucode SQLNativeSqlA(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLNativeSqlA( SQLHDBC __anonymous, <bug: unknown> __anonymous, SQLINTEGER __anonymous, <bug: unknown> __anonymous, SQLINTEGER __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLNativeSqlW.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLNativeSqlW.html",
    "title": "Overloads for - SQLNativeSqlW | Marmos Demo",
    "keywords": "Overloads for - SQLNativeSqlW Module etc.c.odbc.sqlucode SQLNativeSqlW(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLNativeSqlW( SQLHDBC __anonymous, <bug: unknown> __anonymous, SQLINTEGER __anonymous, <bug: unknown> __anonymous, SQLINTEGER __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLPrepareA.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLPrepareA.html",
    "title": "Overloads for - SQLPrepareA | Marmos Demo",
    "keywords": "Overloads for - SQLPrepareA Module etc.c.odbc.sqlucode SQLPrepareA(__anonymous, __anonymous, __anonymous) SQLRETURN SQLPrepareA( SQLHSTMT __anonymous, <bug: unknown> __anonymous, SQLINTEGER __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLPrepareW.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLPrepareW.html",
    "title": "Overloads for - SQLPrepareW | Marmos Demo",
    "keywords": "Overloads for - SQLPrepareW Module etc.c.odbc.sqlucode SQLPrepareW(__anonymous, __anonymous, __anonymous) SQLRETURN SQLPrepareW( SQLHSTMT __anonymous, <bug: unknown> __anonymous, SQLINTEGER __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLPrimaryKeysA.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLPrimaryKeysA.html",
    "title": "Overloads for - SQLPrimaryKeysA | Marmos Demo",
    "keywords": "Overloads for - SQLPrimaryKeysA Module etc.c.odbc.sqlucode SQLPrimaryKeysA(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLPrimaryKeysA( SQLHSTMT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLPrimaryKeysW.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLPrimaryKeysW.html",
    "title": "Overloads for - SQLPrimaryKeysW | Marmos Demo",
    "keywords": "Overloads for - SQLPrimaryKeysW Module etc.c.odbc.sqlucode SQLPrimaryKeysW(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLPrimaryKeysW( SQLHSTMT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLProcedureColumnsA.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLProcedureColumnsA.html",
    "title": "Overloads for - SQLProcedureColumnsA | Marmos Demo",
    "keywords": "Overloads for - SQLProcedureColumnsA Module etc.c.odbc.sqlucode SQLProcedureColumnsA(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLProcedureColumnsA( SQLHSTMT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLProcedureColumnsW.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLProcedureColumnsW.html",
    "title": "Overloads for - SQLProcedureColumnsW | Marmos Demo",
    "keywords": "Overloads for - SQLProcedureColumnsW Module etc.c.odbc.sqlucode SQLProcedureColumnsW(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLProcedureColumnsW( SQLHSTMT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLProceduresA.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLProceduresA.html",
    "title": "Overloads for - SQLProceduresA | Marmos Demo",
    "keywords": "Overloads for - SQLProceduresA Module etc.c.odbc.sqlucode SQLProceduresA(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLProceduresA( SQLHSTMT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLProceduresW.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLProceduresW.html",
    "title": "Overloads for - SQLProceduresW | Marmos Demo",
    "keywords": "Overloads for - SQLProceduresW Module etc.c.odbc.sqlucode SQLProceduresW(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLProceduresW( SQLHSTMT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLSetConnectAttrA.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLSetConnectAttrA.html",
    "title": "Overloads for - SQLSetConnectAttrA | Marmos Demo",
    "keywords": "Overloads for - SQLSetConnectAttrA Module etc.c.odbc.sqlucode SQLSetConnectAttrA(__anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLSetConnectAttrA( SQLHDBC __anonymous, SQLINTEGER __anonymous, SQLPOINTER __anonymous, SQLINTEGER __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLSetConnectAttrW.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLSetConnectAttrW.html",
    "title": "Overloads for - SQLSetConnectAttrW | Marmos Demo",
    "keywords": "Overloads for - SQLSetConnectAttrW Module etc.c.odbc.sqlucode SQLSetConnectAttrW(__anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLSetConnectAttrW( SQLHDBC __anonymous, SQLINTEGER __anonymous, SQLPOINTER __anonymous, SQLINTEGER __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLSetConnectOptionA.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLSetConnectOptionA.html",
    "title": "Overloads for - SQLSetConnectOptionA | Marmos Demo",
    "keywords": "Overloads for - SQLSetConnectOptionA Module etc.c.odbc.sqlucode SQLSetConnectOptionA(__anonymous, __anonymous, __anonymous) SQLRETURN SQLSetConnectOptionA( SQLHDBC __anonymous, SQLUSMALLINT __anonymous, SQLULEN __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLSetConnectOptionW.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLSetConnectOptionW.html",
    "title": "Overloads for - SQLSetConnectOptionW | Marmos Demo",
    "keywords": "Overloads for - SQLSetConnectOptionW Module etc.c.odbc.sqlucode SQLSetConnectOptionW(__anonymous, __anonymous, __anonymous) SQLRETURN SQLSetConnectOptionW( SQLHDBC __anonymous, SQLUSMALLINT __anonymous, SQLULEN __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLSetCursorNameA.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLSetCursorNameA.html",
    "title": "Overloads for - SQLSetCursorNameA | Marmos Demo",
    "keywords": "Overloads for - SQLSetCursorNameA Module etc.c.odbc.sqlucode SQLSetCursorNameA(__anonymous, __anonymous, __anonymous) SQLRETURN SQLSetCursorNameA( SQLHSTMT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLSetCursorNameW.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLSetCursorNameW.html",
    "title": "Overloads for - SQLSetCursorNameW | Marmos Demo",
    "keywords": "Overloads for - SQLSetCursorNameW Module etc.c.odbc.sqlucode SQLSetCursorNameW(__anonymous, __anonymous, __anonymous) SQLRETURN SQLSetCursorNameW( SQLHSTMT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLSetDescFieldA.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLSetDescFieldA.html",
    "title": "Overloads for - SQLSetDescFieldA | Marmos Demo",
    "keywords": "Overloads for - SQLSetDescFieldA Module etc.c.odbc.sqlucode SQLSetDescFieldA(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLSetDescFieldA( SQLHDESC __anonymous, SQLSMALLINT __anonymous, SQLSMALLINT __anonymous, SQLPOINTER __anonymous, SQLINTEGER __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLSetDescFieldW.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLSetDescFieldW.html",
    "title": "Overloads for - SQLSetDescFieldW | Marmos Demo",
    "keywords": "Overloads for - SQLSetDescFieldW Module etc.c.odbc.sqlucode SQLSetDescFieldW(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLSetDescFieldW( SQLHDESC __anonymous, SQLSMALLINT __anonymous, SQLSMALLINT __anonymous, SQLPOINTER __anonymous, SQLINTEGER __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLSetStmtAttrA.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLSetStmtAttrA.html",
    "title": "Overloads for - SQLSetStmtAttrA | Marmos Demo",
    "keywords": "Overloads for - SQLSetStmtAttrA Module etc.c.odbc.sqlucode SQLSetStmtAttrA(__anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLSetStmtAttrA( SQLHSTMT __anonymous, SQLINTEGER __anonymous, SQLPOINTER __anonymous, SQLINTEGER __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLSetStmtAttrW.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLSetStmtAttrW.html",
    "title": "Overloads for - SQLSetStmtAttrW | Marmos Demo",
    "keywords": "Overloads for - SQLSetStmtAttrW Module etc.c.odbc.sqlucode SQLSetStmtAttrW(__anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLSetStmtAttrW( SQLHSTMT __anonymous, SQLINTEGER __anonymous, SQLPOINTER __anonymous, SQLINTEGER __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLSpecialColumnsA.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLSpecialColumnsA.html",
    "title": "Overloads for - SQLSpecialColumnsA | Marmos Demo",
    "keywords": "Overloads for - SQLSpecialColumnsA Module etc.c.odbc.sqlucode SQLSpecialColumnsA(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLSpecialColumnsA( SQLHSTMT __anonymous, SQLUSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, SQLUSMALLINT __anonymous, SQLUSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLSpecialColumnsW.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLSpecialColumnsW.html",
    "title": "Overloads for - SQLSpecialColumnsW | Marmos Demo",
    "keywords": "Overloads for - SQLSpecialColumnsW Module etc.c.odbc.sqlucode SQLSpecialColumnsW(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLSpecialColumnsW( SQLHSTMT __anonymous, SQLUSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, SQLUSMALLINT __anonymous, SQLUSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLStatisticsA.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLStatisticsA.html",
    "title": "Overloads for - SQLStatisticsA | Marmos Demo",
    "keywords": "Overloads for - SQLStatisticsA Module etc.c.odbc.sqlucode SQLStatisticsA(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLStatisticsA( SQLHSTMT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, SQLUSMALLINT __anonymous, SQLUSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLStatisticsW.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLStatisticsW.html",
    "title": "Overloads for - SQLStatisticsW | Marmos Demo",
    "keywords": "Overloads for - SQLStatisticsW Module etc.c.odbc.sqlucode SQLStatisticsW(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLStatisticsW( SQLHSTMT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, SQLUSMALLINT __anonymous, SQLUSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLTablePrivilegesA.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLTablePrivilegesA.html",
    "title": "Overloads for - SQLTablePrivilegesA | Marmos Demo",
    "keywords": "Overloads for - SQLTablePrivilegesA Module etc.c.odbc.sqlucode SQLTablePrivilegesA(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLTablePrivilegesA( SQLHSTMT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLTablePrivilegesW.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLTablePrivilegesW.html",
    "title": "Overloads for - SQLTablePrivilegesW | Marmos Demo",
    "keywords": "Overloads for - SQLTablePrivilegesW Module etc.c.odbc.sqlucode SQLTablePrivilegesW(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLTablePrivilegesW( SQLHSTMT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLTablesA.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLTablesA.html",
    "title": "Overloads for - SQLTablesA | Marmos Demo",
    "keywords": "Overloads for - SQLTablesA Module etc.c.odbc.sqlucode SQLTablesA(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLTablesA( SQLHSTMT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Functions/SQLTablesW.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Functions/SQLTablesW.html",
    "title": "Overloads for - SQLTablesW | Marmos Demo",
    "keywords": "Overloads for - SQLTablesW Module etc.c.odbc.sqlucode SQLTablesW(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) SQLRETURN SQLTablesW( SQLHSTMT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous, <bug: unknown> __anonymous, SQLSMALLINT __anonymous )"
  },
  "phobos/etc/c/odbc/sqlucode/Overview.html": {
    "href": "phobos/etc/c/odbc/sqlucode/Overview.html",
    "title": "Module - etc.c.odbc.sqlucode | Marmos Demo",
    "keywords": "Module - etc.c.odbc.sqlucode About Windows API header module Translated from MinGW Windows headers License: $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0) Source: $(PHOBOSSRC etc/c/odbc/_sqlucode.d) Declarations for interfacing with the ODBC library. See_Also: $(LINK2 https://docs.microsoft.com/en-us/sql/odbc/reference/syntax/odbc-api-reference, ODBC API Reference on MSDN) Aliases Name Description SQLBrowseConnect SQLColAttribute SQLColAttributes SQLColumnPrivileges SQLColumns SQLConnect SQLDataSources SQLDescribeCol SQLDriverConnect SQLDrivers SQLError SQLExecDirect SQLForeignKeys SQLGetConnectAttr SQLGetConnectOption SQLGetCursorName SQLGetDescField SQLGetDescRec SQLGetDiagField SQLGetDiagRec SQLGetInfo SQLGetStmtAttr SQLGetTypeInfo SQLNativeSql SQLPrepare SQLPrimaryKeys SQLProcedureColumns SQLProcedures SQLSetConnectAttr SQLSetConnectOption SQLSetCursorName SQLSetDescField SQLSetStmtAttr SQLSpecialColumns SQLStatistics SQLTablePrivileges SQLTables Functions Name Description SQLBrowseConnectA SQLBrowseConnectW SQLColAttributeA SQLColAttributesA SQLColAttributesW SQLColAttributeW SQLColumnPrivilegesA SQLColumnPrivilegesW SQLColumnsA SQLColumnsW SQLConnectA SQLConnectW SQLDataSourcesA SQLDataSourcesW SQLDescribeColA SQLDescribeColW SQLDriverConnectA SQLDriverConnectW SQLDriversA SQLDriversW SQLErrorA SQLErrorW SQLExecDirectA SQLExecDirectW SQLForeignKeysA SQLForeignKeysW SQLGetConnectAttrA SQLGetConnectAttrW SQLGetConnectOptionA SQLGetConnectOptionW SQLGetCursorNameA SQLGetCursorNameW SQLGetDescFieldA SQLGetDescFieldW SQLGetDescRecA SQLGetDescRecW SQLGetDiagFieldA SQLGetDiagFieldW SQLGetDiagRecA SQLGetDiagRecW SQLGetInfoA SQLGetInfoW SQLGetStmtAttrA SQLGetStmtAttrW SQLGetTypeInfoA SQLGetTypeInfoW SQLNativeSqlA SQLNativeSqlW SQLPrepareA SQLPrepareW SQLPrimaryKeysA SQLPrimaryKeysW SQLProcedureColumnsA SQLProcedureColumnsW SQLProceduresA SQLProceduresW SQLSetConnectAttrA SQLSetConnectAttrW SQLSetConnectOptionA SQLSetConnectOptionW SQLSetCursorNameA SQLSetCursorNameW SQLSetDescFieldA SQLSetDescFieldW SQLSetStmtAttrA SQLSetStmtAttrW SQLSpecialColumnsA SQLSpecialColumnsW SQLStatisticsA SQLStatisticsW SQLTablePrivilegesA SQLTablePrivilegesW SQLTablesA SQLTablesW Variables Name Description SQL_C_TCHAR SQL_C_WCHAR SQL_SQLSTATE_SIZEW SQL_UNICODE SQL_UNICODE_CHAR SQL_UNICODE_LONGVARCHAR SQL_UNICODE_VARCHAR SQL_WCHAR SQL_WLONGVARCHAR SQL_WVARCHAR"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_activate_cerod.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_activate_cerod.html",
    "title": "Overloads for - sqlite3_activate_cerod | Marmos Demo",
    "keywords": "Overloads for - sqlite3_activate_cerod Module etc.c.sqlite3 sqlite3_activate_cerod(zPassPhrase) void sqlite3_activate_cerod( <bug: unknown> zPassPhrase ) Specify the activation key for a CEROD database. Unless activated, none of the CEROD routines will work."
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_aggregate_context.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_aggregate_context.html",
    "title": "Overloads for - sqlite3_aggregate_context | Marmos Demo",
    "keywords": "Overloads for - sqlite3_aggregate_context Module etc.c.sqlite3 sqlite3_aggregate_context(__anonymous, nBytes) <bug: unknown> sqlite3_aggregate_context( <bug: unknown> __anonymous, int nBytes ) CAPI3REF: Obtain Aggregate Function Context"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_aggregate_count.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_aggregate_count.html",
    "title": "Overloads for - sqlite3_aggregate_count | Marmos Demo",
    "keywords": "Overloads for - sqlite3_aggregate_count Module etc.c.sqlite3 sqlite3_aggregate_count(__anonymous) int sqlite3_aggregate_count( <bug: unknown> __anonymous ) deprecated CAPI3REF: Deprecated Functions"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_auto_extension.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_auto_extension.html",
    "title": "Overloads for - sqlite3_auto_extension | Marmos Demo",
    "keywords": "Overloads for - sqlite3_auto_extension Module etc.c.sqlite3 sqlite3_auto_extension(xEntryPoint) int sqlite3_auto_extension( <bug: unknown> xEntryPoint ) CAPI3REF: Automatically Load Statically Linked Extensions"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_backup_finish.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_backup_finish.html",
    "title": "Overloads for - sqlite3_backup_finish | Marmos Demo",
    "keywords": "Overloads for - sqlite3_backup_finish Module etc.c.sqlite3 sqlite3_backup_finish(p) int sqlite3_backup_finish( <bug: unknown> p ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_backup_init.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_backup_init.html",
    "title": "Overloads for - sqlite3_backup_init | Marmos Demo",
    "keywords": "Overloads for - sqlite3_backup_init Module etc.c.sqlite3 sqlite3_backup_init(pDest, zDestName, pSource, zSourceName) <bug: unknown> sqlite3_backup_init( <bug: unknown> pDest, <bug: unknown> zDestName, <bug: unknown> pSource, <bug: unknown> zSourceName ) CAPI3REF: Online Backup API."
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_backup_pagecount.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_backup_pagecount.html",
    "title": "Overloads for - sqlite3_backup_pagecount | Marmos Demo",
    "keywords": "Overloads for - sqlite3_backup_pagecount Module etc.c.sqlite3 sqlite3_backup_pagecount(p) int sqlite3_backup_pagecount( <bug: unknown> p ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_backup_remaining.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_backup_remaining.html",
    "title": "Overloads for - sqlite3_backup_remaining | Marmos Demo",
    "keywords": "Overloads for - sqlite3_backup_remaining Module etc.c.sqlite3 sqlite3_backup_remaining(p) int sqlite3_backup_remaining( <bug: unknown> p ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_backup_step.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_backup_step.html",
    "title": "Overloads for - sqlite3_backup_step | Marmos Demo",
    "keywords": "Overloads for - sqlite3_backup_step Module etc.c.sqlite3 sqlite3_backup_step(p, nPage) int sqlite3_backup_step( <bug: unknown> p, int nPage ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_bind_blob.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_bind_blob.html",
    "title": "Overloads for - sqlite3_bind_blob | Marmos Demo",
    "keywords": "Overloads for - sqlite3_bind_blob Module etc.c.sqlite3 sqlite3_bind_blob(__anonymous, __anonymous, __anonymous, n, __anonymous) int sqlite3_bind_blob( <bug: unknown> __anonymous, int __anonymous, <bug: unknown> __anonymous, int n, <bug: unknown> __anonymous ) CAPI3REF: Binding Values To Prepared Statements"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_bind_blob64.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_bind_blob64.html",
    "title": "Overloads for - sqlite3_bind_blob64 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_bind_blob64 Module etc.c.sqlite3 sqlite3_bind_blob64(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous) int sqlite3_bind_blob64( <bug: unknown> __anonymous, int __anonymous, <bug: unknown> __anonymous, sqlite3_uint64 __anonymous, <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_bind_double.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_bind_double.html",
    "title": "Overloads for - sqlite3_bind_double | Marmos Demo",
    "keywords": "Overloads for - sqlite3_bind_double Module etc.c.sqlite3 sqlite3_bind_double(__anonymous, __anonymous, __anonymous) int sqlite3_bind_double( <bug: unknown> __anonymous, int __anonymous, double __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_bind_int.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_bind_int.html",
    "title": "Overloads for - sqlite3_bind_int | Marmos Demo",
    "keywords": "Overloads for - sqlite3_bind_int Module etc.c.sqlite3 sqlite3_bind_int(__anonymous, __anonymous, __anonymous) int sqlite3_bind_int( <bug: unknown> __anonymous, int __anonymous, int __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_bind_int64.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_bind_int64.html",
    "title": "Overloads for - sqlite3_bind_int64 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_bind_int64 Module etc.c.sqlite3 sqlite3_bind_int64(__anonymous, __anonymous, __anonymous) int sqlite3_bind_int64( <bug: unknown> __anonymous, int __anonymous, sqlite3_int64 __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_bind_null.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_bind_null.html",
    "title": "Overloads for - sqlite3_bind_null | Marmos Demo",
    "keywords": "Overloads for - sqlite3_bind_null Module etc.c.sqlite3 sqlite3_bind_null(__anonymous, __anonymous) int sqlite3_bind_null( <bug: unknown> __anonymous, int __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_bind_parameter_count.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_bind_parameter_count.html",
    "title": "Overloads for - sqlite3_bind_parameter_count | Marmos Demo",
    "keywords": "Overloads for - sqlite3_bind_parameter_count Module etc.c.sqlite3 sqlite3_bind_parameter_count(__anonymous) int sqlite3_bind_parameter_count( <bug: unknown> __anonymous ) CAPI3REF: Number Of SQL Parameters"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_bind_parameter_index.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_bind_parameter_index.html",
    "title": "Overloads for - sqlite3_bind_parameter_index | Marmos Demo",
    "keywords": "Overloads for - sqlite3_bind_parameter_index Module etc.c.sqlite3 sqlite3_bind_parameter_index(__anonymous, zName) int sqlite3_bind_parameter_index( <bug: unknown> __anonymous, <bug: unknown> zName ) CAPI3REF: Index Of A Parameter With A Given Name"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_bind_parameter_name.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_bind_parameter_name.html",
    "title": "Overloads for - sqlite3_bind_parameter_name | Marmos Demo",
    "keywords": "Overloads for - sqlite3_bind_parameter_name Module etc.c.sqlite3 sqlite3_bind_parameter_name(__anonymous, __anonymous) <bug: unknown> sqlite3_bind_parameter_name( <bug: unknown> __anonymous, int __anonymous ) CAPI3REF: Name Of A Host Parameter"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_bind_text.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_bind_text.html",
    "title": "Overloads for - sqlite3_bind_text | Marmos Demo",
    "keywords": "Overloads for - sqlite3_bind_text Module etc.c.sqlite3 sqlite3_bind_text(__anonymous, __anonymous, __anonymous, n, __anonymous) int sqlite3_bind_text( <bug: unknown> __anonymous, int __anonymous, <bug: unknown> __anonymous, int n, <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_bind_text16.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_bind_text16.html",
    "title": "Overloads for - sqlite3_bind_text16 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_bind_text16 Module etc.c.sqlite3 sqlite3_bind_text16(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous) int sqlite3_bind_text16( <bug: unknown> __anonymous, int __anonymous, <bug: unknown> __anonymous, int __anonymous, <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_bind_text64.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_bind_text64.html",
    "title": "Overloads for - sqlite3_bind_text64 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_bind_text64 Module etc.c.sqlite3 sqlite3_bind_text64(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, encoding) int sqlite3_bind_text64( <bug: unknown> __anonymous, int __anonymous, <bug: unknown> __anonymous, sqlite3_uint64 __anonymous, <bug: unknown> __anonymous, ubyte encoding ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_bind_value.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_bind_value.html",
    "title": "Overloads for - sqlite3_bind_value | Marmos Demo",
    "keywords": "Overloads for - sqlite3_bind_value Module etc.c.sqlite3 sqlite3_bind_value(__anonymous, __anonymous, __anonymous) int sqlite3_bind_value( <bug: unknown> __anonymous, int __anonymous, <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_bind_zeroblob.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_bind_zeroblob.html",
    "title": "Overloads for - sqlite3_bind_zeroblob | Marmos Demo",
    "keywords": "Overloads for - sqlite3_bind_zeroblob Module etc.c.sqlite3 sqlite3_bind_zeroblob(__anonymous, __anonymous, n) int sqlite3_bind_zeroblob( <bug: unknown> __anonymous, int __anonymous, int n ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_bind_zeroblob64.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_bind_zeroblob64.html",
    "title": "Overloads for - sqlite3_bind_zeroblob64 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_bind_zeroblob64 Module etc.c.sqlite3 sqlite3_bind_zeroblob64(__anonymous, __anonymous, n) int sqlite3_bind_zeroblob64( <bug: unknown> __anonymous, int __anonymous, sqlite3_uint64 n ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_blob_bytes.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_blob_bytes.html",
    "title": "Overloads for - sqlite3_blob_bytes | Marmos Demo",
    "keywords": "Overloads for - sqlite3_blob_bytes Module etc.c.sqlite3 sqlite3_blob_bytes(__anonymous) int sqlite3_blob_bytes( <bug: unknown> __anonymous ) CAPI3REF: Return The Size Of An Open BLOB"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_blob_close.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_blob_close.html",
    "title": "Overloads for - sqlite3_blob_close | Marmos Demo",
    "keywords": "Overloads for - sqlite3_blob_close Module etc.c.sqlite3 sqlite3_blob_close(__anonymous) int sqlite3_blob_close( <bug: unknown> __anonymous ) CAPI3REF: Close A BLOB Handle"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_blob_open.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_blob_open.html",
    "title": "Overloads for - sqlite3_blob_open | Marmos Demo",
    "keywords": "Overloads for - sqlite3_blob_open Module etc.c.sqlite3 sqlite3_blob_open(__anonymous, zDb, zTable, zColumn, iRow, flags, ppBlob) int sqlite3_blob_open( <bug: unknown> __anonymous, <bug: unknown> zDb, <bug: unknown> zTable, <bug: unknown> zColumn, sqlite3_int64 iRow, int flags, <bug: unknown> ppBlob ) CAPI3REF: Open A BLOB For Incremental I/O"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_blob_read.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_blob_read.html",
    "title": "Overloads for - sqlite3_blob_read | Marmos Demo",
    "keywords": "Overloads for - sqlite3_blob_read Module etc.c.sqlite3 sqlite3_blob_read(__anonymous, Z, N, iOffset) int sqlite3_blob_read( <bug: unknown> __anonymous, <bug: unknown> Z, int N, int iOffset ) CAPI3REF: Read Data From A BLOB Incrementally"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_blob_reopen.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_blob_reopen.html",
    "title": "Overloads for - sqlite3_blob_reopen | Marmos Demo",
    "keywords": "Overloads for - sqlite3_blob_reopen Module etc.c.sqlite3 sqlite3_blob_reopen(__anonymous, __anonymous) int sqlite3_blob_reopen( <bug: unknown> __anonymous, sqlite3_int64 __anonymous ) CAPI3REF: Move a BLOB Handle to a New Row"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_blob_write.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_blob_write.html",
    "title": "Overloads for - sqlite3_blob_write | Marmos Demo",
    "keywords": "Overloads for - sqlite3_blob_write Module etc.c.sqlite3 sqlite3_blob_write(__anonymous, z, n, iOffset) int sqlite3_blob_write( <bug: unknown> __anonymous, <bug: unknown> z, int n, int iOffset ) CAPI3REF: Write Data Into A BLOB Incrementally"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_busy_handler.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_busy_handler.html",
    "title": "Overloads for - sqlite3_busy_handler | Marmos Demo",
    "keywords": "Overloads for - sqlite3_busy_handler Module etc.c.sqlite3 sqlite3_busy_handler(__anonymous, __anonymous, __anonymous) int sqlite3_busy_handler( <bug: unknown> __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous ) CAPI3REF: Register A Callback To Handle SQLITE_BUSY Errors"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_busy_timeout.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_busy_timeout.html",
    "title": "Overloads for - sqlite3_busy_timeout | Marmos Demo",
    "keywords": "Overloads for - sqlite3_busy_timeout Module etc.c.sqlite3 sqlite3_busy_timeout(__anonymous, ms) int sqlite3_busy_timeout( <bug: unknown> __anonymous, int ms ) CAPI3REF: Set A Busy Timeout"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_cancel_auto_extension.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_cancel_auto_extension.html",
    "title": "Overloads for - sqlite3_cancel_auto_extension | Marmos Demo",
    "keywords": "Overloads for - sqlite3_cancel_auto_extension Module etc.c.sqlite3 sqlite3_cancel_auto_extension(xEntryPoint) int sqlite3_cancel_auto_extension( <bug: unknown> xEntryPoint ) CAPI3REF: Cancel Automatic Extension Loading"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_changes.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_changes.html",
    "title": "Overloads for - sqlite3_changes | Marmos Demo",
    "keywords": "Overloads for - sqlite3_changes Module etc.c.sqlite3 sqlite3_changes(__anonymous) int sqlite3_changes( <bug: unknown> __anonymous ) CAPI3REF: Count The Number Of Rows Modified"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_clear_bindings.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_clear_bindings.html",
    "title": "Overloads for - sqlite3_clear_bindings | Marmos Demo",
    "keywords": "Overloads for - sqlite3_clear_bindings Module etc.c.sqlite3 sqlite3_clear_bindings(__anonymous) int sqlite3_clear_bindings( <bug: unknown> __anonymous ) CAPI3REF: Reset All Bindings On A Prepared Statement"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_close.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_close.html",
    "title": "Overloads for - sqlite3_close | Marmos Demo",
    "keywords": "Overloads for - sqlite3_close Module etc.c.sqlite3 sqlite3_close(__anonymous) int sqlite3_close( <bug: unknown> __anonymous ) CAPI3REF: Closing A Database Connection"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_close_v2.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_close_v2.html",
    "title": "Overloads for - sqlite3_close_v2 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_close_v2 Module etc.c.sqlite3 sqlite3_close_v2(__anonymous) int sqlite3_close_v2( <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_collation_needed.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_collation_needed.html",
    "title": "Overloads for - sqlite3_collation_needed | Marmos Demo",
    "keywords": "Overloads for - sqlite3_collation_needed Module etc.c.sqlite3 sqlite3_collation_needed(__anonymous, __anonymous, __anonymous) int sqlite3_collation_needed( <bug: unknown> __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous ) CAPI3REF: Collation Needed Callbacks"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_collation_needed16.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_collation_needed16.html",
    "title": "Overloads for - sqlite3_collation_needed16 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_collation_needed16 Module etc.c.sqlite3 sqlite3_collation_needed16(__anonymous, __anonymous, __anonymous) int sqlite3_collation_needed16( <bug: unknown> __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_column_blob.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_column_blob.html",
    "title": "Overloads for - sqlite3_column_blob | Marmos Demo",
    "keywords": "Overloads for - sqlite3_column_blob Module etc.c.sqlite3 sqlite3_column_blob(__anonymous, iCol) <bug: unknown> sqlite3_column_blob( <bug: unknown> __anonymous, int iCol ) CAPI3REF: Result Values From A Query"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_column_bytes.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_column_bytes.html",
    "title": "Overloads for - sqlite3_column_bytes | Marmos Demo",
    "keywords": "Overloads for - sqlite3_column_bytes Module etc.c.sqlite3 sqlite3_column_bytes(__anonymous, iCol) int sqlite3_column_bytes( <bug: unknown> __anonymous, int iCol ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_column_bytes16.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_column_bytes16.html",
    "title": "Overloads for - sqlite3_column_bytes16 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_column_bytes16 Module etc.c.sqlite3 sqlite3_column_bytes16(__anonymous, iCol) int sqlite3_column_bytes16( <bug: unknown> __anonymous, int iCol ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_column_count.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_column_count.html",
    "title": "Overloads for - sqlite3_column_count | Marmos Demo",
    "keywords": "Overloads for - sqlite3_column_count Module etc.c.sqlite3 sqlite3_column_count(pStmt) int sqlite3_column_count( <bug: unknown> pStmt ) CAPI3REF: Number Of Columns In A Result Set"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_column_database_name.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_column_database_name.html",
    "title": "Overloads for - sqlite3_column_database_name | Marmos Demo",
    "keywords": "Overloads for - sqlite3_column_database_name Module etc.c.sqlite3 sqlite3_column_database_name(__anonymous, __anonymous) <bug: unknown> sqlite3_column_database_name( <bug: unknown> __anonymous, int __anonymous ) CAPI3REF: Source Of Data In A Query Result"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_column_database_name16.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_column_database_name16.html",
    "title": "Overloads for - sqlite3_column_database_name16 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_column_database_name16 Module etc.c.sqlite3 sqlite3_column_database_name16(__anonymous, __anonymous) <bug: unknown> sqlite3_column_database_name16( <bug: unknown> __anonymous, int __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_column_decltype.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_column_decltype.html",
    "title": "Overloads for - sqlite3_column_decltype | Marmos Demo",
    "keywords": "Overloads for - sqlite3_column_decltype Module etc.c.sqlite3 sqlite3_column_decltype(__anonymous, __anonymous) <bug: unknown> sqlite3_column_decltype( <bug: unknown> __anonymous, int __anonymous ) CAPI3REF: Declared Datatype Of A Query Result"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_column_decltype16.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_column_decltype16.html",
    "title": "Overloads for - sqlite3_column_decltype16 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_column_decltype16 Module etc.c.sqlite3 sqlite3_column_decltype16(__anonymous, __anonymous) <bug: unknown> sqlite3_column_decltype16( <bug: unknown> __anonymous, int __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_column_double.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_column_double.html",
    "title": "Overloads for - sqlite3_column_double | Marmos Demo",
    "keywords": "Overloads for - sqlite3_column_double Module etc.c.sqlite3 sqlite3_column_double(__anonymous, iCol) double sqlite3_column_double( <bug: unknown> __anonymous, int iCol ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_column_int.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_column_int.html",
    "title": "Overloads for - sqlite3_column_int | Marmos Demo",
    "keywords": "Overloads for - sqlite3_column_int Module etc.c.sqlite3 sqlite3_column_int(__anonymous, iCol) int sqlite3_column_int( <bug: unknown> __anonymous, int iCol ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_column_int64.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_column_int64.html",
    "title": "Overloads for - sqlite3_column_int64 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_column_int64 Module etc.c.sqlite3 sqlite3_column_int64(__anonymous, iCol) sqlite3_int64 sqlite3_column_int64( <bug: unknown> __anonymous, int iCol ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_column_name.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_column_name.html",
    "title": "Overloads for - sqlite3_column_name | Marmos Demo",
    "keywords": "Overloads for - sqlite3_column_name Module etc.c.sqlite3 sqlite3_column_name(__anonymous, N) <bug: unknown> sqlite3_column_name( <bug: unknown> __anonymous, int N ) CAPI3REF: Column Names In A Result Set"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_column_name16.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_column_name16.html",
    "title": "Overloads for - sqlite3_column_name16 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_column_name16 Module etc.c.sqlite3 sqlite3_column_name16(__anonymous, N) <bug: unknown> sqlite3_column_name16( <bug: unknown> __anonymous, int N ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_column_origin_name.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_column_origin_name.html",
    "title": "Overloads for - sqlite3_column_origin_name | Marmos Demo",
    "keywords": "Overloads for - sqlite3_column_origin_name Module etc.c.sqlite3 sqlite3_column_origin_name(__anonymous, __anonymous) <bug: unknown> sqlite3_column_origin_name( <bug: unknown> __anonymous, int __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_column_origin_name16.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_column_origin_name16.html",
    "title": "Overloads for - sqlite3_column_origin_name16 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_column_origin_name16 Module etc.c.sqlite3 sqlite3_column_origin_name16(__anonymous, __anonymous) <bug: unknown> sqlite3_column_origin_name16( <bug: unknown> __anonymous, int __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_column_table_name.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_column_table_name.html",
    "title": "Overloads for - sqlite3_column_table_name | Marmos Demo",
    "keywords": "Overloads for - sqlite3_column_table_name Module etc.c.sqlite3 sqlite3_column_table_name(__anonymous, __anonymous) <bug: unknown> sqlite3_column_table_name( <bug: unknown> __anonymous, int __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_column_table_name16.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_column_table_name16.html",
    "title": "Overloads for - sqlite3_column_table_name16 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_column_table_name16 Module etc.c.sqlite3 sqlite3_column_table_name16(__anonymous, __anonymous) <bug: unknown> sqlite3_column_table_name16( <bug: unknown> __anonymous, int __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_column_text.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_column_text.html",
    "title": "Overloads for - sqlite3_column_text | Marmos Demo",
    "keywords": "Overloads for - sqlite3_column_text Module etc.c.sqlite3 sqlite3_column_text(__anonymous, iCol) <bug: unknown> sqlite3_column_text( <bug: unknown> __anonymous, int iCol ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_column_text16.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_column_text16.html",
    "title": "Overloads for - sqlite3_column_text16 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_column_text16 Module etc.c.sqlite3 sqlite3_column_text16(__anonymous, iCol) <bug: unknown> sqlite3_column_text16( <bug: unknown> __anonymous, int iCol ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_column_type.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_column_type.html",
    "title": "Overloads for - sqlite3_column_type | Marmos Demo",
    "keywords": "Overloads for - sqlite3_column_type Module etc.c.sqlite3 sqlite3_column_type(__anonymous, iCol) int sqlite3_column_type( <bug: unknown> __anonymous, int iCol ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_column_value.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_column_value.html",
    "title": "Overloads for - sqlite3_column_value | Marmos Demo",
    "keywords": "Overloads for - sqlite3_column_value Module etc.c.sqlite3 sqlite3_column_value(__anonymous, iCol) <bug: unknown> sqlite3_column_value( <bug: unknown> __anonymous, int iCol ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_commit_hook.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_commit_hook.html",
    "title": "Overloads for - sqlite3_commit_hook | Marmos Demo",
    "keywords": "Overloads for - sqlite3_commit_hook Module etc.c.sqlite3 sqlite3_commit_hook(__anonymous, __anonymous, __anonymous) <bug: unknown> sqlite3_commit_hook( <bug: unknown> __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous ) CAPI3REF: Commit And Rollback Notification Callbacks"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_compileoption_get.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_compileoption_get.html",
    "title": "Overloads for - sqlite3_compileoption_get | Marmos Demo",
    "keywords": "Overloads for - sqlite3_compileoption_get Module etc.c.sqlite3 sqlite3_compileoption_get(N) <bug: unknown> sqlite3_compileoption_get( int N ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_compileoption_used.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_compileoption_used.html",
    "title": "Overloads for - sqlite3_compileoption_used | Marmos Demo",
    "keywords": "Overloads for - sqlite3_compileoption_used Module etc.c.sqlite3 sqlite3_compileoption_used(zOptName) int sqlite3_compileoption_used( <bug: unknown> zOptName ) CAPI3REF: Run-Time Library Compilation Options Diagnostics"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_complete.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_complete.html",
    "title": "Overloads for - sqlite3_complete | Marmos Demo",
    "keywords": "Overloads for - sqlite3_complete Module etc.c.sqlite3 sqlite3_complete(sql) int sqlite3_complete( <bug: unknown> sql ) CAPI3REF: Determine If An SQL Statement Is Complete"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_complete16.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_complete16.html",
    "title": "Overloads for - sqlite3_complete16 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_complete16 Module etc.c.sqlite3 sqlite3_complete16(sql) int sqlite3_complete16( <bug: unknown> sql ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_config.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_config.html",
    "title": "Overloads for - sqlite3_config | Marmos Demo",
    "keywords": "Overloads for - sqlite3_config Module etc.c.sqlite3 sqlite3_config(__anonymous) int sqlite3_config( int __anonymous ) CAPI3REF: Configuring The SQLite Library"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_context_db_handle.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_context_db_handle.html",
    "title": "Overloads for - sqlite3_context_db_handle | Marmos Demo",
    "keywords": "Overloads for - sqlite3_context_db_handle Module etc.c.sqlite3 sqlite3_context_db_handle(__anonymous) <bug: unknown> sqlite3_context_db_handle( <bug: unknown> __anonymous ) CAPI3REF: Database Connection For Functions"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_create_collation.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_create_collation.html",
    "title": "Overloads for - sqlite3_create_collation | Marmos Demo",
    "keywords": "Overloads for - sqlite3_create_collation Module etc.c.sqlite3 sqlite3_create_collation(__anonymous, zName, eTextRep, pArg, xCompare) int sqlite3_create_collation( <bug: unknown> __anonymous, <bug: unknown> zName, int eTextRep, <bug: unknown> pArg, <bug: unknown> xCompare ) CAPI3REF: Define New Collating Sequences"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_create_collation16.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_create_collation16.html",
    "title": "Overloads for - sqlite3_create_collation16 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_create_collation16 Module etc.c.sqlite3 sqlite3_create_collation16(__anonymous, zName, eTextRep, pArg, xCompare) int sqlite3_create_collation16( <bug: unknown> __anonymous, <bug: unknown> zName, int eTextRep, <bug: unknown> pArg, <bug: unknown> xCompare ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_create_collation_v2.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_create_collation_v2.html",
    "title": "Overloads for - sqlite3_create_collation_v2 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_create_collation_v2 Module etc.c.sqlite3 sqlite3_create_collation_v2(__anonymous, zName, eTextRep, pArg, xCompare, xDestroy) int sqlite3_create_collation_v2( <bug: unknown> __anonymous, <bug: unknown> zName, int eTextRep, <bug: unknown> pArg, <bug: unknown> xCompare, <bug: unknown> xDestroy ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_create_filename.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_create_filename.html",
    "title": "Overloads for - sqlite3_create_filename | Marmos Demo",
    "keywords": "Overloads for - sqlite3_create_filename Module etc.c.sqlite3 sqlite3_create_filename(zDatabase, zJournal, zWal, nParam, azParam) <bug: unknown> sqlite3_create_filename( <bug: unknown> zDatabase, <bug: unknown> zJournal, <bug: unknown> zWal, int nParam, <bug: unknown> azParam )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_create_function.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_create_function.html",
    "title": "Overloads for - sqlite3_create_function | Marmos Demo",
    "keywords": "Overloads for - sqlite3_create_function Module etc.c.sqlite3 sqlite3_create_function(db, zFunctionName, nArg, eTextRep, pApp, xFunc, xStep, xFinal) int sqlite3_create_function( <bug: unknown> db, <bug: unknown> zFunctionName, int nArg, int eTextRep, <bug: unknown> pApp, <bug: unknown> xFunc, <bug: unknown> xStep, <bug: unknown> xFinal ) CAPI3REF: Create Or Redefine SQL Functions"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_create_function16.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_create_function16.html",
    "title": "Overloads for - sqlite3_create_function16 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_create_function16 Module etc.c.sqlite3 sqlite3_create_function16(db, zFunctionName, nArg, eTextRep, pApp, xFunc, xStep, xFinal) int sqlite3_create_function16( <bug: unknown> db, <bug: unknown> zFunctionName, int nArg, int eTextRep, <bug: unknown> pApp, <bug: unknown> xFunc, <bug: unknown> xStep, <bug: unknown> xFinal ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_create_function_v2.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_create_function_v2.html",
    "title": "Overloads for - sqlite3_create_function_v2 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_create_function_v2 Module etc.c.sqlite3 sqlite3_create_function_v2(db, zFunctionName, nArg, eTextRep, pApp, xFunc, xStep, xFinal, xDestroy) int sqlite3_create_function_v2( <bug: unknown> db, <bug: unknown> zFunctionName, int nArg, int eTextRep, <bug: unknown> pApp, <bug: unknown> xFunc, <bug: unknown> xStep, <bug: unknown> xFinal, <bug: unknown> xDestroy ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_create_module.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_create_module.html",
    "title": "Overloads for - sqlite3_create_module | Marmos Demo",
    "keywords": "Overloads for - sqlite3_create_module Module etc.c.sqlite3 sqlite3_create_module(db, zName, p, pClientData) int sqlite3_create_module( <bug: unknown> db, <bug: unknown> zName, <bug: unknown> p, <bug: unknown> pClientData ) CAPI3REF: Register A Virtual Table Implementation"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_create_module_v2.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_create_module_v2.html",
    "title": "Overloads for - sqlite3_create_module_v2 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_create_module_v2 Module etc.c.sqlite3 sqlite3_create_module_v2(db, zName, p, pClientData, xDestroy) int sqlite3_create_module_v2( <bug: unknown> db, <bug: unknown> zName, <bug: unknown> p, <bug: unknown> pClientData, <bug: unknown> xDestroy ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_create_window_function.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_create_window_function.html",
    "title": "Overloads for - sqlite3_create_window_function | Marmos Demo",
    "keywords": "Overloads for - sqlite3_create_window_function Module etc.c.sqlite3 sqlite3_create_window_function(db, zFunctionName, nArg, eTextRep, pApp, xStep, xFinal, xValue, xInverse, xDestroy) int sqlite3_create_window_function( <bug: unknown> db, <bug: unknown> zFunctionName, int nArg, int eTextRep, <bug: unknown> pApp, <bug: unknown> xStep, <bug: unknown> xFinal, <bug: unknown> xValue, <bug: unknown> xInverse, <bug: unknown> xDestroy ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_data_count.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_data_count.html",
    "title": "Overloads for - sqlite3_data_count | Marmos Demo",
    "keywords": "Overloads for - sqlite3_data_count Module etc.c.sqlite3 sqlite3_data_count(pStmt) int sqlite3_data_count( <bug: unknown> pStmt ) CAPI3REF: Number of columns in a result set"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_database_file_object.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_database_file_object.html",
    "title": "Overloads for - sqlite3_database_file_object | Marmos Demo",
    "keywords": "Overloads for - sqlite3_database_file_object Module etc.c.sqlite3 sqlite3_database_file_object(__anonymous) <bug: unknown> sqlite3_database_file_object( <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_db_cacheflush.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_db_cacheflush.html",
    "title": "Overloads for - sqlite3_db_cacheflush | Marmos Demo",
    "keywords": "Overloads for - sqlite3_db_cacheflush Module etc.c.sqlite3 sqlite3_db_cacheflush(__anonymous) int sqlite3_db_cacheflush( <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_db_config.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_db_config.html",
    "title": "Overloads for - sqlite3_db_config | Marmos Demo",
    "keywords": "Overloads for - sqlite3_db_config Module etc.c.sqlite3 sqlite3_db_config(__anonymous, op) int sqlite3_db_config( <bug: unknown> __anonymous, int op ) CAPI3REF: Configure database connections"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_db_filename.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_db_filename.html",
    "title": "Overloads for - sqlite3_db_filename | Marmos Demo",
    "keywords": "Overloads for - sqlite3_db_filename Module etc.c.sqlite3 sqlite3_db_filename(db, zDbName) <bug: unknown> sqlite3_db_filename( <bug: unknown> db, <bug: unknown> zDbName ) CAPI3REF: Return The Filename For A Database Connection"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_db_handle.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_db_handle.html",
    "title": "Overloads for - sqlite3_db_handle | Marmos Demo",
    "keywords": "Overloads for - sqlite3_db_handle Module etc.c.sqlite3 sqlite3_db_handle(__anonymous) <bug: unknown> sqlite3_db_handle( <bug: unknown> __anonymous ) CAPI3REF: Find The Database Handle Of A Prepared Statement"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_db_mutex.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_db_mutex.html",
    "title": "Overloads for - sqlite3_db_mutex | Marmos Demo",
    "keywords": "Overloads for - sqlite3_db_mutex Module etc.c.sqlite3 sqlite3_db_mutex(__anonymous) <bug: unknown> sqlite3_db_mutex( <bug: unknown> __anonymous ) CAPI3REF: Retrieve the mutex for a database connection"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_db_readonly.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_db_readonly.html",
    "title": "Overloads for - sqlite3_db_readonly | Marmos Demo",
    "keywords": "Overloads for - sqlite3_db_readonly Module etc.c.sqlite3 sqlite3_db_readonly(db, zDbName) int sqlite3_db_readonly( <bug: unknown> db, <bug: unknown> zDbName ) CAPI3REF: Determine if a database is read-only"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_db_release_memory.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_db_release_memory.html",
    "title": "Overloads for - sqlite3_db_release_memory | Marmos Demo",
    "keywords": "Overloads for - sqlite3_db_release_memory Module etc.c.sqlite3 sqlite3_db_release_memory(__anonymous) int sqlite3_db_release_memory( <bug: unknown> __anonymous ) CAPI3REF: Free Memory Used By A Database Connection"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_db_status.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_db_status.html",
    "title": "Overloads for - sqlite3_db_status | Marmos Demo",
    "keywords": "Overloads for - sqlite3_db_status Module etc.c.sqlite3 sqlite3_db_status(__anonymous, op, pCur, pHiwtr, resetFlg) int sqlite3_db_status( <bug: unknown> __anonymous, int op, <bug: unknown> pCur, <bug: unknown> pHiwtr, int resetFlg ) CAPI3REF: Database Connection Status"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_declare_vtab.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_declare_vtab.html",
    "title": "Overloads for - sqlite3_declare_vtab | Marmos Demo",
    "keywords": "Overloads for - sqlite3_declare_vtab Module etc.c.sqlite3 sqlite3_declare_vtab(__anonymous, zSQL) int sqlite3_declare_vtab( <bug: unknown> __anonymous, <bug: unknown> zSQL ) CAPI3REF: Declare The Schema Of A Virtual Table"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_deserialize.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_deserialize.html",
    "title": "Overloads for - sqlite3_deserialize | Marmos Demo",
    "keywords": "Overloads for - sqlite3_deserialize Module etc.c.sqlite3 sqlite3_deserialize(db, zSchema, pData, szDb, szBuf, mFlags) int sqlite3_deserialize( <bug: unknown> db, <bug: unknown> zSchema, <bug: unknown> pData, sqlite3_int64 szDb, sqlite3_int64 szBuf, uint mFlags )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_drop_modules.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_drop_modules.html",
    "title": "Overloads for - sqlite3_drop_modules | Marmos Demo",
    "keywords": "Overloads for - sqlite3_drop_modules Module etc.c.sqlite3 sqlite3_drop_modules(db, azKeep) int sqlite3_drop_modules( <bug: unknown> db, <bug: unknown> azKeep ) CAPI3REF: Remove Unnecessary Virtual Table Implementations"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_enable_load_extension.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_enable_load_extension.html",
    "title": "Overloads for - sqlite3_enable_load_extension | Marmos Demo",
    "keywords": "Overloads for - sqlite3_enable_load_extension Module etc.c.sqlite3 sqlite3_enable_load_extension(db, onoff) int sqlite3_enable_load_extension( <bug: unknown> db, int onoff ) CAPI3REF: Enable Or Disable Extension Loading"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_enable_shared_cache.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_enable_shared_cache.html",
    "title": "Overloads for - sqlite3_enable_shared_cache | Marmos Demo",
    "keywords": "Overloads for - sqlite3_enable_shared_cache Module etc.c.sqlite3 sqlite3_enable_shared_cache(__anonymous) int sqlite3_enable_shared_cache( int __anonymous ) CAPI3REF: Enable Or Disable Shared Pager Cache"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_errcode.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_errcode.html",
    "title": "Overloads for - sqlite3_errcode | Marmos Demo",
    "keywords": "Overloads for - sqlite3_errcode Module etc.c.sqlite3 sqlite3_errcode(db) int sqlite3_errcode( <bug: unknown> db ) CAPI3REF: Error Codes And Messages"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_errmsg.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_errmsg.html",
    "title": "Overloads for - sqlite3_errmsg | Marmos Demo",
    "keywords": "Overloads for - sqlite3_errmsg Module etc.c.sqlite3 sqlite3_errmsg(__anonymous) <bug: unknown> sqlite3_errmsg( <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_errmsg16.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_errmsg16.html",
    "title": "Overloads for - sqlite3_errmsg16 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_errmsg16 Module etc.c.sqlite3 sqlite3_errmsg16(__anonymous) <bug: unknown> sqlite3_errmsg16( <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_errstr.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_errstr.html",
    "title": "Overloads for - sqlite3_errstr | Marmos Demo",
    "keywords": "Overloads for - sqlite3_errstr Module etc.c.sqlite3 sqlite3_errstr(__anonymous) <bug: unknown> sqlite3_errstr( int __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_exec.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_exec.html",
    "title": "Overloads for - sqlite3_exec | Marmos Demo",
    "keywords": "Overloads for - sqlite3_exec Module etc.c.sqlite3 sqlite3_exec(__anonymous, sql, callback, __anonymous, errmsg) int sqlite3_exec( <bug: unknown> __anonymous, <bug: unknown> sql, <bug: unknown> callback, <bug: unknown> __anonymous, <bug: unknown> errmsg ) CAPI3REF: One-Step Query Execution Interface"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_expanded_sql.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_expanded_sql.html",
    "title": "Overloads for - sqlite3_expanded_sql | Marmos Demo",
    "keywords": "Overloads for - sqlite3_expanded_sql Module etc.c.sqlite3 sqlite3_expanded_sql(pStmt) <bug: unknown> sqlite3_expanded_sql( <bug: unknown> pStmt ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_expired.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_expired.html",
    "title": "Overloads for - sqlite3_expired | Marmos Demo",
    "keywords": "Overloads for - sqlite3_expired Module etc.c.sqlite3 sqlite3_expired(__anonymous) int sqlite3_expired( <bug: unknown> __anonymous ) deprecated"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_extended_errcode.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_extended_errcode.html",
    "title": "Overloads for - sqlite3_extended_errcode | Marmos Demo",
    "keywords": "Overloads for - sqlite3_extended_errcode Module etc.c.sqlite3 sqlite3_extended_errcode(db) int sqlite3_extended_errcode( <bug: unknown> db ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_extended_result_codes.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_extended_result_codes.html",
    "title": "Overloads for - sqlite3_extended_result_codes | Marmos Demo",
    "keywords": "Overloads for - sqlite3_extended_result_codes Module etc.c.sqlite3 sqlite3_extended_result_codes(__anonymous, onoff) int sqlite3_extended_result_codes( <bug: unknown> __anonymous, int onoff ) CAPI3REF: Enable Or Disable Extended Result Codes"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_file_control.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_file_control.html",
    "title": "Overloads for - sqlite3_file_control | Marmos Demo",
    "keywords": "Overloads for - sqlite3_file_control Module etc.c.sqlite3 sqlite3_file_control(__anonymous, zDbName, op, __anonymous) int sqlite3_file_control( <bug: unknown> __anonymous, <bug: unknown> zDbName, int op, <bug: unknown> __anonymous ) CAPI3REF: Low-Level Control Of Database Files"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_filename_database.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_filename_database.html",
    "title": "Overloads for - sqlite3_filename_database | Marmos Demo",
    "keywords": "Overloads for - sqlite3_filename_database Module etc.c.sqlite3 sqlite3_filename_database(__anonymous) <bug: unknown> sqlite3_filename_database( <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_filename_journal.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_filename_journal.html",
    "title": "Overloads for - sqlite3_filename_journal | Marmos Demo",
    "keywords": "Overloads for - sqlite3_filename_journal Module etc.c.sqlite3 sqlite3_filename_journal(__anonymous) <bug: unknown> sqlite3_filename_journal( <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_filename_wal.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_filename_wal.html",
    "title": "Overloads for - sqlite3_filename_wal | Marmos Demo",
    "keywords": "Overloads for - sqlite3_filename_wal Module etc.c.sqlite3 sqlite3_filename_wal(__anonymous) <bug: unknown> sqlite3_filename_wal( <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_finalize.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_finalize.html",
    "title": "Overloads for - sqlite3_finalize | Marmos Demo",
    "keywords": "Overloads for - sqlite3_finalize Module etc.c.sqlite3 sqlite3_finalize(pStmt) int sqlite3_finalize( <bug: unknown> pStmt ) CAPI3REF: Destroy A Prepared Statement Object"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_free.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_free.html",
    "title": "Overloads for - sqlite3_free | Marmos Demo",
    "keywords": "Overloads for - sqlite3_free Module etc.c.sqlite3 sqlite3_free(__anonymous) void sqlite3_free( <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_free_filename.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_free_filename.html",
    "title": "Overloads for - sqlite3_free_filename | Marmos Demo",
    "keywords": "Overloads for - sqlite3_free_filename Module etc.c.sqlite3 sqlite3_free_filename(__anonymous) void sqlite3_free_filename( <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_free_table.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_free_table.html",
    "title": "Overloads for - sqlite3_free_table | Marmos Demo",
    "keywords": "Overloads for - sqlite3_free_table Module etc.c.sqlite3 sqlite3_free_table(result) void sqlite3_free_table( <bug: unknown> result )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_get_autocommit.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_get_autocommit.html",
    "title": "Overloads for - sqlite3_get_autocommit | Marmos Demo",
    "keywords": "Overloads for - sqlite3_get_autocommit Module etc.c.sqlite3 sqlite3_get_autocommit(__anonymous) int sqlite3_get_autocommit( <bug: unknown> __anonymous ) CAPI3REF: Test For Auto-Commit Mode"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_get_auxdata.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_get_auxdata.html",
    "title": "Overloads for - sqlite3_get_auxdata | Marmos Demo",
    "keywords": "Overloads for - sqlite3_get_auxdata Module etc.c.sqlite3 sqlite3_get_auxdata(__anonymous, N) <bug: unknown> sqlite3_get_auxdata( <bug: unknown> __anonymous, int N ) CAPI3REF: Function Auxiliary Data"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_get_table.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_get_table.html",
    "title": "Overloads for - sqlite3_get_table | Marmos Demo",
    "keywords": "Overloads for - sqlite3_get_table Module etc.c.sqlite3 sqlite3_get_table(db, zSql, pazResult, pnRow, pnColumn, pzErrmsg) int sqlite3_get_table( <bug: unknown> db, <bug: unknown> zSql, <bug: unknown> pazResult, <bug: unknown> pnRow, <bug: unknown> pnColumn, <bug: unknown> pzErrmsg ) CAPI3REF: Convenience Routines For Running Queries"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_global_recover.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_global_recover.html",
    "title": "Overloads for - sqlite3_global_recover | Marmos Demo",
    "keywords": "Overloads for - sqlite3_global_recover Module etc.c.sqlite3 sqlite3_global_recover() int sqlite3_global_recover( ) deprecated"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_hard_heap_limit64.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_hard_heap_limit64.html",
    "title": "Overloads for - sqlite3_hard_heap_limit64 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_hard_heap_limit64 Module etc.c.sqlite3 sqlite3_hard_heap_limit64(N) sqlite3_int64 sqlite3_hard_heap_limit64( sqlite3_int64 N )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_initialize.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_initialize.html",
    "title": "Overloads for - sqlite3_initialize | Marmos Demo",
    "keywords": "Overloads for - sqlite3_initialize Module etc.c.sqlite3 sqlite3_initialize() int sqlite3_initialize( ) CAPI3REF: Initialize The SQLite Library"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_interrupt.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_interrupt.html",
    "title": "Overloads for - sqlite3_interrupt | Marmos Demo",
    "keywords": "Overloads for - sqlite3_interrupt Module etc.c.sqlite3 sqlite3_interrupt(__anonymous) void sqlite3_interrupt( <bug: unknown> __anonymous ) CAPI3REF: Interrupt A Long-Running Query"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_keyword_check.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_keyword_check.html",
    "title": "Overloads for - sqlite3_keyword_check | Marmos Demo",
    "keywords": "Overloads for - sqlite3_keyword_check Module etc.c.sqlite3 sqlite3_keyword_check(__anonymous, __anonymous) int sqlite3_keyword_check( <bug: unknown> __anonymous, int __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_keyword_count.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_keyword_count.html",
    "title": "Overloads for - sqlite3_keyword_count | Marmos Demo",
    "keywords": "Overloads for - sqlite3_keyword_count Module etc.c.sqlite3 sqlite3_keyword_count() int sqlite3_keyword_count( ) CAPI3REF: SQL Keyword Checking"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_keyword_name.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_keyword_name.html",
    "title": "Overloads for - sqlite3_keyword_name | Marmos Demo",
    "keywords": "Overloads for - sqlite3_keyword_name Module etc.c.sqlite3 sqlite3_keyword_name(__anonymous, __anonymous, __anonymous) int sqlite3_keyword_name( int __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_last_insert_rowid.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_last_insert_rowid.html",
    "title": "Overloads for - sqlite3_last_insert_rowid | Marmos Demo",
    "keywords": "Overloads for - sqlite3_last_insert_rowid Module etc.c.sqlite3 sqlite3_last_insert_rowid(__anonymous) sqlite3_int64 sqlite3_last_insert_rowid( <bug: unknown> __anonymous ) CAPI3REF: Last Insert Rowid"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_libversion.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_libversion.html",
    "title": "Overloads for - sqlite3_libversion | Marmos Demo",
    "keywords": "Overloads for - sqlite3_libversion Module etc.c.sqlite3 sqlite3_libversion() <bug: unknown> sqlite3_libversion( ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_libversion_number.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_libversion_number.html",
    "title": "Overloads for - sqlite3_libversion_number | Marmos Demo",
    "keywords": "Overloads for - sqlite3_libversion_number Module etc.c.sqlite3 sqlite3_libversion_number() int sqlite3_libversion_number( ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_limit.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_limit.html",
    "title": "Overloads for - sqlite3_limit | Marmos Demo",
    "keywords": "Overloads for - sqlite3_limit Module etc.c.sqlite3 sqlite3_limit(__anonymous, id, newVal) int sqlite3_limit( <bug: unknown> __anonymous, int id, int newVal ) CAPI3REF: Run-time Limits"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_load_extension.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_load_extension.html",
    "title": "Overloads for - sqlite3_load_extension | Marmos Demo",
    "keywords": "Overloads for - sqlite3_load_extension Module etc.c.sqlite3 sqlite3_load_extension(db, zFile, zProc, pzErrMsg) int sqlite3_load_extension( <bug: unknown> db, <bug: unknown> zFile, <bug: unknown> zProc, <bug: unknown> pzErrMsg ) CAPI3REF: Load An Extension"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_log.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_log.html",
    "title": "Overloads for - sqlite3_log | Marmos Demo",
    "keywords": "Overloads for - sqlite3_log Module etc.c.sqlite3 sqlite3_log(iErrCode, zFormat) void sqlite3_log( int iErrCode, <bug: unknown> zFormat ) CAPI3REF: Error Logging Interface"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_malloc.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_malloc.html",
    "title": "Overloads for - sqlite3_malloc | Marmos Demo",
    "keywords": "Overloads for - sqlite3_malloc Module etc.c.sqlite3 sqlite3_malloc(__anonymous) <bug: unknown> sqlite3_malloc( int __anonymous ) CAPI3REF: Memory Allocation Subsystem"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_malloc64.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_malloc64.html",
    "title": "Overloads for - sqlite3_malloc64 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_malloc64 Module etc.c.sqlite3 sqlite3_malloc64(__anonymous) <bug: unknown> sqlite3_malloc64( sqlite3_uint64 __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_memory_alarm.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_memory_alarm.html",
    "title": "Overloads for - sqlite3_memory_alarm | Marmos Demo",
    "keywords": "Overloads for - sqlite3_memory_alarm Module etc.c.sqlite3 sqlite3_memory_alarm(__anonymous, __anonymous, __anonymous) int sqlite3_memory_alarm( <bug: unknown> __anonymous, <bug: unknown> __anonymous, sqlite3_int64 __anonymous ) deprecated"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_memory_highwater.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_memory_highwater.html",
    "title": "Overloads for - sqlite3_memory_highwater | Marmos Demo",
    "keywords": "Overloads for - sqlite3_memory_highwater Module etc.c.sqlite3 sqlite3_memory_highwater(resetFlag) sqlite3_int64 sqlite3_memory_highwater( int resetFlag )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_memory_used.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_memory_used.html",
    "title": "Overloads for - sqlite3_memory_used | Marmos Demo",
    "keywords": "Overloads for - sqlite3_memory_used Module etc.c.sqlite3 sqlite3_memory_used() sqlite3_int64 sqlite3_memory_used( ) CAPI3REF: Memory Allocator Statistics"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_mprintf.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_mprintf.html",
    "title": "Overloads for - sqlite3_mprintf | Marmos Demo",
    "keywords": "Overloads for - sqlite3_mprintf Module etc.c.sqlite3 sqlite3_mprintf(__anonymous) <bug: unknown> sqlite3_mprintf( <bug: unknown> __anonymous ) CAPI3REF: Formatted String Printing Functions"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_msize.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_msize.html",
    "title": "Overloads for - sqlite3_msize | Marmos Demo",
    "keywords": "Overloads for - sqlite3_msize Module etc.c.sqlite3 sqlite3_msize(__anonymous) sqlite3_uint64 sqlite3_msize( <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_mutex_alloc.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_mutex_alloc.html",
    "title": "Overloads for - sqlite3_mutex_alloc | Marmos Demo",
    "keywords": "Overloads for - sqlite3_mutex_alloc Module etc.c.sqlite3 sqlite3_mutex_alloc(__anonymous) <bug: unknown> sqlite3_mutex_alloc( int __anonymous ) CAPI3REF: Mutexes"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_mutex_enter.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_mutex_enter.html",
    "title": "Overloads for - sqlite3_mutex_enter | Marmos Demo",
    "keywords": "Overloads for - sqlite3_mutex_enter Module etc.c.sqlite3 sqlite3_mutex_enter(__anonymous) void sqlite3_mutex_enter( <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_mutex_free.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_mutex_free.html",
    "title": "Overloads for - sqlite3_mutex_free | Marmos Demo",
    "keywords": "Overloads for - sqlite3_mutex_free Module etc.c.sqlite3 sqlite3_mutex_free(__anonymous) void sqlite3_mutex_free( <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_mutex_held.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_mutex_held.html",
    "title": "Overloads for - sqlite3_mutex_held | Marmos Demo",
    "keywords": "Overloads for - sqlite3_mutex_held Module etc.c.sqlite3 sqlite3_mutex_held(__anonymous) int sqlite3_mutex_held( <bug: unknown> __anonymous ) CAPI3REF: Mutex Verification Routines"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_mutex_leave.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_mutex_leave.html",
    "title": "Overloads for - sqlite3_mutex_leave | Marmos Demo",
    "keywords": "Overloads for - sqlite3_mutex_leave Module etc.c.sqlite3 sqlite3_mutex_leave(__anonymous) void sqlite3_mutex_leave( <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_mutex_notheld.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_mutex_notheld.html",
    "title": "Overloads for - sqlite3_mutex_notheld | Marmos Demo",
    "keywords": "Overloads for - sqlite3_mutex_notheld Module etc.c.sqlite3 sqlite3_mutex_notheld(__anonymous) int sqlite3_mutex_notheld( <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_mutex_try.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_mutex_try.html",
    "title": "Overloads for - sqlite3_mutex_try | Marmos Demo",
    "keywords": "Overloads for - sqlite3_mutex_try Module etc.c.sqlite3 sqlite3_mutex_try(__anonymous) int sqlite3_mutex_try( <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_next_stmt.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_next_stmt.html",
    "title": "Overloads for - sqlite3_next_stmt | Marmos Demo",
    "keywords": "Overloads for - sqlite3_next_stmt Module etc.c.sqlite3 sqlite3_next_stmt(pDb, pStmt) <bug: unknown> sqlite3_next_stmt( <bug: unknown> pDb, <bug: unknown> pStmt )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_normalized_sql.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_normalized_sql.html",
    "title": "Overloads for - sqlite3_normalized_sql | Marmos Demo",
    "keywords": "Overloads for - sqlite3_normalized_sql Module etc.c.sqlite3 sqlite3_normalized_sql(pStmt) <bug: unknown> sqlite3_normalized_sql( <bug: unknown> pStmt )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_open.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_open.html",
    "title": "Overloads for - sqlite3_open | Marmos Demo",
    "keywords": "Overloads for - sqlite3_open Module etc.c.sqlite3 sqlite3_open(filename, ppDb) int sqlite3_open( <bug: unknown> filename, <bug: unknown> ppDb ) CAPI3REF: Opening A New Database Connection"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_open16.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_open16.html",
    "title": "Overloads for - sqlite3_open16 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_open16 Module etc.c.sqlite3 sqlite3_open16(filename, ppDb) int sqlite3_open16( <bug: unknown> filename, <bug: unknown> ppDb ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_open_v2.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_open_v2.html",
    "title": "Overloads for - sqlite3_open_v2 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_open_v2 Module etc.c.sqlite3 sqlite3_open_v2(filename, ppDb, flags, zVfs) int sqlite3_open_v2( <bug: unknown> filename, <bug: unknown> ppDb, int flags, <bug: unknown> zVfs ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_os_end.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_os_end.html",
    "title": "Overloads for - sqlite3_os_end | Marmos Demo",
    "keywords": "Overloads for - sqlite3_os_end Module etc.c.sqlite3 sqlite3_os_end() int sqlite3_os_end( ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_os_init.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_os_init.html",
    "title": "Overloads for - sqlite3_os_init | Marmos Demo",
    "keywords": "Overloads for - sqlite3_os_init Module etc.c.sqlite3 sqlite3_os_init() int sqlite3_os_init( ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_overload_function.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_overload_function.html",
    "title": "Overloads for - sqlite3_overload_function | Marmos Demo",
    "keywords": "Overloads for - sqlite3_overload_function Module etc.c.sqlite3 sqlite3_overload_function(__anonymous, zFuncName, nArg) int sqlite3_overload_function( <bug: unknown> __anonymous, <bug: unknown> zFuncName, int nArg ) CAPI3REF: Overload A Function For A Virtual Table"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_prepare.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_prepare.html",
    "title": "Overloads for - sqlite3_prepare | Marmos Demo",
    "keywords": "Overloads for - sqlite3_prepare Module etc.c.sqlite3 sqlite3_prepare(db, zSql, nByte, ppStmt, pzTail) int sqlite3_prepare( <bug: unknown> db, <bug: unknown> zSql, int nByte, <bug: unknown> ppStmt, <bug: unknown> pzTail ) CAPI3REF: Compiling An SQL Statement"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_prepare16.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_prepare16.html",
    "title": "Overloads for - sqlite3_prepare16 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_prepare16 Module etc.c.sqlite3 sqlite3_prepare16(db, zSql, nByte, ppStmt, pzTail) int sqlite3_prepare16( <bug: unknown> db, <bug: unknown> zSql, int nByte, <bug: unknown> ppStmt, <bug: unknown> pzTail ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_prepare16_v2.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_prepare16_v2.html",
    "title": "Overloads for - sqlite3_prepare16_v2 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_prepare16_v2 Module etc.c.sqlite3 sqlite3_prepare16_v2(db, zSql, nByte, ppStmt, pzTail) int sqlite3_prepare16_v2( <bug: unknown> db, <bug: unknown> zSql, int nByte, <bug: unknown> ppStmt, <bug: unknown> pzTail ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_prepare16_v3.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_prepare16_v3.html",
    "title": "Overloads for - sqlite3_prepare16_v3 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_prepare16_v3 Module etc.c.sqlite3 sqlite3_prepare16_v3(db, zSql, nByte, prepFlags, ppStmt, pzTail) int sqlite3_prepare16_v3( <bug: unknown> db, <bug: unknown> zSql, int nByte, uint prepFlags, <bug: unknown> ppStmt, <bug: unknown> pzTail ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_prepare_v2.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_prepare_v2.html",
    "title": "Overloads for - sqlite3_prepare_v2 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_prepare_v2 Module etc.c.sqlite3 sqlite3_prepare_v2(db, zSql, nByte, ppStmt, pzTail) int sqlite3_prepare_v2( <bug: unknown> db, <bug: unknown> zSql, int nByte, <bug: unknown> ppStmt, <bug: unknown> pzTail ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_prepare_v3.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_prepare_v3.html",
    "title": "Overloads for - sqlite3_prepare_v3 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_prepare_v3 Module etc.c.sqlite3 sqlite3_prepare_v3(db, zSql, nByte, prepFlags, ppStmt, pzTail) int sqlite3_prepare_v3( <bug: unknown> db, <bug: unknown> zSql, int nByte, uint prepFlags, <bug: unknown> ppStmt, <bug: unknown> pzTail ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_preupdate_count.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_preupdate_count.html",
    "title": "Overloads for - sqlite3_preupdate_count | Marmos Demo",
    "keywords": "Overloads for - sqlite3_preupdate_count Module etc.c.sqlite3 sqlite3_preupdate_count(__anonymous) int sqlite3_preupdate_count( <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_preupdate_depth.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_preupdate_depth.html",
    "title": "Overloads for - sqlite3_preupdate_depth | Marmos Demo",
    "keywords": "Overloads for - sqlite3_preupdate_depth Module etc.c.sqlite3 sqlite3_preupdate_depth(__anonymous) int sqlite3_preupdate_depth( <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_preupdate_hook.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_preupdate_hook.html",
    "title": "Overloads for - sqlite3_preupdate_hook | Marmos Demo",
    "keywords": "Overloads for - sqlite3_preupdate_hook Module etc.c.sqlite3 sqlite3_preupdate_hook(db, xPreUpdate, __anonymous) <bug: unknown> sqlite3_preupdate_hook( <bug: unknown> db, <bug: unknown> xPreUpdate, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_preupdate_new.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_preupdate_new.html",
    "title": "Overloads for - sqlite3_preupdate_new | Marmos Demo",
    "keywords": "Overloads for - sqlite3_preupdate_new Module etc.c.sqlite3 sqlite3_preupdate_new(__anonymous, __anonymous, __anonymous) int sqlite3_preupdate_new( <bug: unknown> __anonymous, int __anonymous, <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_preupdate_old.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_preupdate_old.html",
    "title": "Overloads for - sqlite3_preupdate_old | Marmos Demo",
    "keywords": "Overloads for - sqlite3_preupdate_old Module etc.c.sqlite3 sqlite3_preupdate_old(__anonymous, __anonymous, __anonymous) int sqlite3_preupdate_old( <bug: unknown> __anonymous, int __anonymous, <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_profile.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_profile.html",
    "title": "Overloads for - sqlite3_profile | Marmos Demo",
    "keywords": "Overloads for - sqlite3_profile Module etc.c.sqlite3 sqlite3_profile(__anonymous, xProfile, __anonymous) <bug: unknown> sqlite3_profile( <bug: unknown> __anonymous, <bug: unknown> xProfile, <bug: unknown> __anonymous ) deprecated Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_progress_handler.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_progress_handler.html",
    "title": "Overloads for - sqlite3_progress_handler | Marmos Demo",
    "keywords": "Overloads for - sqlite3_progress_handler Module etc.c.sqlite3 sqlite3_progress_handler(__anonymous, __anonymous, __anonymous, __anonymous) void sqlite3_progress_handler( <bug: unknown> __anonymous, int __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous ) CAPI3REF: Query Progress Callbacks"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_randomness.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_randomness.html",
    "title": "Overloads for - sqlite3_randomness | Marmos Demo",
    "keywords": "Overloads for - sqlite3_randomness Module etc.c.sqlite3 sqlite3_randomness(N, P) void sqlite3_randomness( int N, <bug: unknown> P ) CAPI3REF: Pseudo-Random Number Generator"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_realloc.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_realloc.html",
    "title": "Overloads for - sqlite3_realloc | Marmos Demo",
    "keywords": "Overloads for - sqlite3_realloc Module etc.c.sqlite3 sqlite3_realloc(__anonymous, __anonymous) <bug: unknown> sqlite3_realloc( <bug: unknown> __anonymous, int __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_realloc64.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_realloc64.html",
    "title": "Overloads for - sqlite3_realloc64 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_realloc64 Module etc.c.sqlite3 sqlite3_realloc64(__anonymous, __anonymous) <bug: unknown> sqlite3_realloc64( <bug: unknown> __anonymous, sqlite3_uint64 __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_release_memory.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_release_memory.html",
    "title": "Overloads for - sqlite3_release_memory | Marmos Demo",
    "keywords": "Overloads for - sqlite3_release_memory Module etc.c.sqlite3 sqlite3_release_memory(__anonymous) int sqlite3_release_memory( int __anonymous ) CAPI3REF: Attempt To Free Heap Memory"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_reset.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_reset.html",
    "title": "Overloads for - sqlite3_reset | Marmos Demo",
    "keywords": "Overloads for - sqlite3_reset Module etc.c.sqlite3 sqlite3_reset(pStmt) int sqlite3_reset( <bug: unknown> pStmt ) CAPI3REF: Reset A Prepared Statement Object"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_reset_auto_extension.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_reset_auto_extension.html",
    "title": "Overloads for - sqlite3_reset_auto_extension | Marmos Demo",
    "keywords": "Overloads for - sqlite3_reset_auto_extension Module etc.c.sqlite3 sqlite3_reset_auto_extension() void sqlite3_reset_auto_extension( ) CAPI3REF: Reset Automatic Extension Loading"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_result_blob.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_result_blob.html",
    "title": "Overloads for - sqlite3_result_blob | Marmos Demo",
    "keywords": "Overloads for - sqlite3_result_blob Module etc.c.sqlite3 sqlite3_result_blob(__anonymous, __anonymous, __anonymous, __anonymous) void sqlite3_result_blob( <bug: unknown> __anonymous, <bug: unknown> __anonymous, int __anonymous, <bug: unknown> __anonymous ) CAPI3REF: Setting The Result Of An SQL Function"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_result_blob64.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_result_blob64.html",
    "title": "Overloads for - sqlite3_result_blob64 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_result_blob64 Module etc.c.sqlite3 sqlite3_result_blob64(__anonymous, __anonymous, __anonymous, __anonymous) void sqlite3_result_blob64( <bug: unknown> __anonymous, <bug: unknown> __anonymous, sqlite3_uint64 __anonymous, <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_result_double.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_result_double.html",
    "title": "Overloads for - sqlite3_result_double | Marmos Demo",
    "keywords": "Overloads for - sqlite3_result_double Module etc.c.sqlite3 sqlite3_result_double(__anonymous, __anonymous) void sqlite3_result_double( <bug: unknown> __anonymous, double __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_result_error.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_result_error.html",
    "title": "Overloads for - sqlite3_result_error | Marmos Demo",
    "keywords": "Overloads for - sqlite3_result_error Module etc.c.sqlite3 sqlite3_result_error(__anonymous, __anonymous, __anonymous) void sqlite3_result_error( <bug: unknown> __anonymous, <bug: unknown> __anonymous, int __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_result_error16.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_result_error16.html",
    "title": "Overloads for - sqlite3_result_error16 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_result_error16 Module etc.c.sqlite3 sqlite3_result_error16(__anonymous, __anonymous, __anonymous) void sqlite3_result_error16( <bug: unknown> __anonymous, <bug: unknown> __anonymous, int __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_result_error_code.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_result_error_code.html",
    "title": "Overloads for - sqlite3_result_error_code | Marmos Demo",
    "keywords": "Overloads for - sqlite3_result_error_code Module etc.c.sqlite3 sqlite3_result_error_code(__anonymous, __anonymous) void sqlite3_result_error_code( <bug: unknown> __anonymous, int __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_result_error_nomem.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_result_error_nomem.html",
    "title": "Overloads for - sqlite3_result_error_nomem | Marmos Demo",
    "keywords": "Overloads for - sqlite3_result_error_nomem Module etc.c.sqlite3 sqlite3_result_error_nomem(__anonymous) void sqlite3_result_error_nomem( <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_result_error_toobig.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_result_error_toobig.html",
    "title": "Overloads for - sqlite3_result_error_toobig | Marmos Demo",
    "keywords": "Overloads for - sqlite3_result_error_toobig Module etc.c.sqlite3 sqlite3_result_error_toobig(__anonymous) void sqlite3_result_error_toobig( <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_result_int.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_result_int.html",
    "title": "Overloads for - sqlite3_result_int | Marmos Demo",
    "keywords": "Overloads for - sqlite3_result_int Module etc.c.sqlite3 sqlite3_result_int(__anonymous, __anonymous) void sqlite3_result_int( <bug: unknown> __anonymous, int __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_result_int64.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_result_int64.html",
    "title": "Overloads for - sqlite3_result_int64 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_result_int64 Module etc.c.sqlite3 sqlite3_result_int64(__anonymous, __anonymous) void sqlite3_result_int64( <bug: unknown> __anonymous, sqlite3_int64 __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_result_null.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_result_null.html",
    "title": "Overloads for - sqlite3_result_null | Marmos Demo",
    "keywords": "Overloads for - sqlite3_result_null Module etc.c.sqlite3 sqlite3_result_null(__anonymous) void sqlite3_result_null( <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_result_subtype.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_result_subtype.html",
    "title": "Overloads for - sqlite3_result_subtype | Marmos Demo",
    "keywords": "Overloads for - sqlite3_result_subtype Module etc.c.sqlite3 sqlite3_result_subtype(__anonymous, __anonymous) void sqlite3_result_subtype( <bug: unknown> __anonymous, uint __anonymous )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_result_text.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_result_text.html",
    "title": "Overloads for - sqlite3_result_text | Marmos Demo",
    "keywords": "Overloads for - sqlite3_result_text Module etc.c.sqlite3 sqlite3_result_text(__anonymous, __anonymous, __anonymous, __anonymous) void sqlite3_result_text( <bug: unknown> __anonymous, <bug: unknown> __anonymous, int __anonymous, <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_result_text16.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_result_text16.html",
    "title": "Overloads for - sqlite3_result_text16 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_result_text16 Module etc.c.sqlite3 sqlite3_result_text16(__anonymous, __anonymous, __anonymous, __anonymous) void sqlite3_result_text16( <bug: unknown> __anonymous, <bug: unknown> __anonymous, int __anonymous, <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_result_text16be.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_result_text16be.html",
    "title": "Overloads for - sqlite3_result_text16be | Marmos Demo",
    "keywords": "Overloads for - sqlite3_result_text16be Module etc.c.sqlite3 sqlite3_result_text16be(__anonymous, __anonymous, __anonymous, __anonymous) void sqlite3_result_text16be( <bug: unknown> __anonymous, <bug: unknown> __anonymous, int __anonymous, <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_result_text16le.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_result_text16le.html",
    "title": "Overloads for - sqlite3_result_text16le | Marmos Demo",
    "keywords": "Overloads for - sqlite3_result_text16le Module etc.c.sqlite3 sqlite3_result_text16le(__anonymous, __anonymous, __anonymous, __anonymous) void sqlite3_result_text16le( <bug: unknown> __anonymous, <bug: unknown> __anonymous, int __anonymous, <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_result_text64.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_result_text64.html",
    "title": "Overloads for - sqlite3_result_text64 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_result_text64 Module etc.c.sqlite3 sqlite3_result_text64(__anonymous, __anonymous, __anonymous, __anonymous, encoding) void sqlite3_result_text64( <bug: unknown> __anonymous, <bug: unknown> __anonymous, sqlite3_uint64 __anonymous, <bug: unknown> __anonymous, ubyte encoding ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_result_value.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_result_value.html",
    "title": "Overloads for - sqlite3_result_value | Marmos Demo",
    "keywords": "Overloads for - sqlite3_result_value Module etc.c.sqlite3 sqlite3_result_value(__anonymous, __anonymous) void sqlite3_result_value( <bug: unknown> __anonymous, <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_result_zeroblob.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_result_zeroblob.html",
    "title": "Overloads for - sqlite3_result_zeroblob | Marmos Demo",
    "keywords": "Overloads for - sqlite3_result_zeroblob Module etc.c.sqlite3 sqlite3_result_zeroblob(__anonymous, n) void sqlite3_result_zeroblob( <bug: unknown> __anonymous, int n ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_result_zeroblob64.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_result_zeroblob64.html",
    "title": "Overloads for - sqlite3_result_zeroblob64 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_result_zeroblob64 Module etc.c.sqlite3 sqlite3_result_zeroblob64(__anonymous, n) int sqlite3_result_zeroblob64( <bug: unknown> __anonymous, sqlite3_uint64 n ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_rollback_hook.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_rollback_hook.html",
    "title": "Overloads for - sqlite3_rollback_hook | Marmos Demo",
    "keywords": "Overloads for - sqlite3_rollback_hook Module etc.c.sqlite3 sqlite3_rollback_hook(__anonymous, __anonymous, __anonymous) <bug: unknown> sqlite3_rollback_hook( <bug: unknown> __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_rtree_geometry_callback.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_rtree_geometry_callback.html",
    "title": "Overloads for - sqlite3_rtree_geometry_callback | Marmos Demo",
    "keywords": "Overloads for - sqlite3_rtree_geometry_callback Module etc.c.sqlite3 sqlite3_rtree_geometry_callback(db, zGeom, xGeom, pContext) int sqlite3_rtree_geometry_callback( <bug: unknown> db, <bug: unknown> zGeom, <bug: unknown> xGeom, <bug: unknown> pContext ) Register a geometry callback named zGeom that can be used as part of an R-Tree geometry query as follows: SELECT ... FROM \\((LT)rtree\\)(GT) WHERE \\((LT)rtree col\\)(GT) MATCH $zGeom(... params ...)"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_rtree_query_callback.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_rtree_query_callback.html",
    "title": "Overloads for - sqlite3_rtree_query_callback | Marmos Demo",
    "keywords": "Overloads for - sqlite3_rtree_query_callback Module etc.c.sqlite3 sqlite3_rtree_query_callback(db, zQueryFunc, xQueryFunc, pContext, xDestructor) int sqlite3_rtree_query_callback( <bug: unknown> db, <bug: unknown> zQueryFunc, <bug: unknown> xQueryFunc, <bug: unknown> pContext, <bug: unknown> xDestructor )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_serialize.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_serialize.html",
    "title": "Overloads for - sqlite3_serialize | Marmos Demo",
    "keywords": "Overloads for - sqlite3_serialize Module etc.c.sqlite3 sqlite3_serialize(db, zSchema, piSize, mFlags) <bug: unknown> sqlite3_serialize( <bug: unknown> db, <bug: unknown> zSchema, <bug: unknown> piSize, uint mFlags )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_set_authorizer.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_set_authorizer.html",
    "title": "Overloads for - sqlite3_set_authorizer | Marmos Demo",
    "keywords": "Overloads for - sqlite3_set_authorizer Module etc.c.sqlite3 sqlite3_set_authorizer(__anonymous, xAuth, pUserData) int sqlite3_set_authorizer( <bug: unknown> __anonymous, <bug: unknown> xAuth, <bug: unknown> pUserData ) CAPI3REF: Compile-Time Authorization Callbacks"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_set_auxdata.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_set_auxdata.html",
    "title": "Overloads for - sqlite3_set_auxdata | Marmos Demo",
    "keywords": "Overloads for - sqlite3_set_auxdata Module etc.c.sqlite3 sqlite3_set_auxdata(__anonymous, N, __anonymous, __anonymous) void sqlite3_set_auxdata( <bug: unknown> __anonymous, int N, <bug: unknown> __anonymous, <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_set_last_insert_rowid.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_set_last_insert_rowid.html",
    "title": "Overloads for - sqlite3_set_last_insert_rowid | Marmos Demo",
    "keywords": "Overloads for - sqlite3_set_last_insert_rowid Module etc.c.sqlite3 sqlite3_set_last_insert_rowid(__anonymous, __anonymous) void sqlite3_set_last_insert_rowid( <bug: unknown> __anonymous, sqlite3_int64 __anonymous ) CAPI3REF: Set the Last Insert Rowid value"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_shutdown.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_shutdown.html",
    "title": "Overloads for - sqlite3_shutdown | Marmos Demo",
    "keywords": "Overloads for - sqlite3_shutdown Module etc.c.sqlite3 sqlite3_shutdown() int sqlite3_shutdown( ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_sleep.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_sleep.html",
    "title": "Overloads for - sqlite3_sleep | Marmos Demo",
    "keywords": "Overloads for - sqlite3_sleep Module etc.c.sqlite3 sqlite3_sleep(__anonymous) int sqlite3_sleep( int __anonymous ) CAPI3REF: Suspend Execution For A Short Time"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_snapshot_cmp.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_snapshot_cmp.html",
    "title": "Overloads for - sqlite3_snapshot_cmp | Marmos Demo",
    "keywords": "Overloads for - sqlite3_snapshot_cmp Module etc.c.sqlite3 sqlite3_snapshot_cmp(p1, p2) int sqlite3_snapshot_cmp( <bug: unknown> p1, <bug: unknown> p2 )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_snapshot_free.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_snapshot_free.html",
    "title": "Overloads for - sqlite3_snapshot_free | Marmos Demo",
    "keywords": "Overloads for - sqlite3_snapshot_free Module etc.c.sqlite3 sqlite3_snapshot_free(__anonymous) void sqlite3_snapshot_free( <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_snapshot_get.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_snapshot_get.html",
    "title": "Overloads for - sqlite3_snapshot_get | Marmos Demo",
    "keywords": "Overloads for - sqlite3_snapshot_get Module etc.c.sqlite3 sqlite3_snapshot_get(db, zSchema, ppSnapshot) int sqlite3_snapshot_get( <bug: unknown> db, <bug: unknown> zSchema, <bug: unknown> ppSnapshot )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_snapshot_open.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_snapshot_open.html",
    "title": "Overloads for - sqlite3_snapshot_open | Marmos Demo",
    "keywords": "Overloads for - sqlite3_snapshot_open Module etc.c.sqlite3 sqlite3_snapshot_open(db, zSchema, pSnapshot) int sqlite3_snapshot_open( <bug: unknown> db, <bug: unknown> zSchema, <bug: unknown> pSnapshot )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_snapshot_recover.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_snapshot_recover.html",
    "title": "Overloads for - sqlite3_snapshot_recover | Marmos Demo",
    "keywords": "Overloads for - sqlite3_snapshot_recover Module etc.c.sqlite3 sqlite3_snapshot_recover(db, zDb) int sqlite3_snapshot_recover( <bug: unknown> db, <bug: unknown> zDb )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_snprintf.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_snprintf.html",
    "title": "Overloads for - sqlite3_snprintf | Marmos Demo",
    "keywords": "Overloads for - sqlite3_snprintf Module etc.c.sqlite3 sqlite3_snprintf(__anonymous, __anonymous, __anonymous) <bug: unknown> sqlite3_snprintf( int __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_soft_heap_limit.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_soft_heap_limit.html",
    "title": "Overloads for - sqlite3_soft_heap_limit | Marmos Demo",
    "keywords": "Overloads for - sqlite3_soft_heap_limit Module etc.c.sqlite3 sqlite3_soft_heap_limit(N) void sqlite3_soft_heap_limit( int N ) deprecated CAPI3REF: Deprecated Soft Heap Limit Interface"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_soft_heap_limit64.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_soft_heap_limit64.html",
    "title": "Overloads for - sqlite3_soft_heap_limit64 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_soft_heap_limit64 Module etc.c.sqlite3 sqlite3_soft_heap_limit64(N) sqlite3_int64 sqlite3_soft_heap_limit64( sqlite3_int64 N )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_sourceid.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_sourceid.html",
    "title": "Overloads for - sqlite3_sourceid | Marmos Demo",
    "keywords": "Overloads for - sqlite3_sourceid Module etc.c.sqlite3 sqlite3_sourceid() <bug: unknown> sqlite3_sourceid( ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_sql.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_sql.html",
    "title": "Overloads for - sqlite3_sql | Marmos Demo",
    "keywords": "Overloads for - sqlite3_sql Module etc.c.sqlite3 sqlite3_sql(pStmt) <bug: unknown> sqlite3_sql( <bug: unknown> pStmt ) CAPI3REF: Retrieving Statement SQL"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_status.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_status.html",
    "title": "Overloads for - sqlite3_status | Marmos Demo",
    "keywords": "Overloads for - sqlite3_status Module etc.c.sqlite3 sqlite3_status(op, pCurrent, pHighwater, resetFlag) int sqlite3_status( int op, <bug: unknown> pCurrent, <bug: unknown> pHighwater, int resetFlag ) CAPI3REF: SQLite Runtime Status"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_status64.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_status64.html",
    "title": "Overloads for - sqlite3_status64 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_status64 Module etc.c.sqlite3 sqlite3_status64(op, pCurrent, pHighwater, resetFlag) int sqlite3_status64( int op, <bug: unknown> pCurrent, <bug: unknown> pHighwater, int resetFlag ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_step.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_step.html",
    "title": "Overloads for - sqlite3_step | Marmos Demo",
    "keywords": "Overloads for - sqlite3_step Module etc.c.sqlite3 sqlite3_step(__anonymous) int sqlite3_step( <bug: unknown> __anonymous ) CAPI3REF: Evaluate An SQL Statement"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_stmt_busy.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_stmt_busy.html",
    "title": "Overloads for - sqlite3_stmt_busy | Marmos Demo",
    "keywords": "Overloads for - sqlite3_stmt_busy Module etc.c.sqlite3 sqlite3_stmt_busy(__anonymous) int sqlite3_stmt_busy( <bug: unknown> __anonymous ) CAPI3REF: Determine If A Prepared Statement Has Been Reset"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_stmt_isexplain.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_stmt_isexplain.html",
    "title": "Overloads for - sqlite3_stmt_isexplain | Marmos Demo",
    "keywords": "Overloads for - sqlite3_stmt_isexplain Module etc.c.sqlite3 sqlite3_stmt_isexplain(pStmt) int sqlite3_stmt_isexplain( <bug: unknown> pStmt )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_stmt_readonly.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_stmt_readonly.html",
    "title": "Overloads for - sqlite3_stmt_readonly | Marmos Demo",
    "keywords": "Overloads for - sqlite3_stmt_readonly Module etc.c.sqlite3 sqlite3_stmt_readonly(pStmt) int sqlite3_stmt_readonly( <bug: unknown> pStmt )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_stmt_scanstatus.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_stmt_scanstatus.html",
    "title": "Overloads for - sqlite3_stmt_scanstatus | Marmos Demo",
    "keywords": "Overloads for - sqlite3_stmt_scanstatus Module etc.c.sqlite3 sqlite3_stmt_scanstatus(pStmt, idx, iScanStatusOp, pOut) int sqlite3_stmt_scanstatus( <bug: unknown> pStmt, int idx, int iScanStatusOp, <bug: unknown> pOut )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_stmt_scanstatus_reset.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_stmt_scanstatus_reset.html",
    "title": "Overloads for - sqlite3_stmt_scanstatus_reset | Marmos Demo",
    "keywords": "Overloads for - sqlite3_stmt_scanstatus_reset Module etc.c.sqlite3 sqlite3_stmt_scanstatus_reset(__anonymous) void sqlite3_stmt_scanstatus_reset( <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_stmt_status.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_stmt_status.html",
    "title": "Overloads for - sqlite3_stmt_status | Marmos Demo",
    "keywords": "Overloads for - sqlite3_stmt_status Module etc.c.sqlite3 sqlite3_stmt_status(__anonymous, op, resetFlg) int sqlite3_stmt_status( <bug: unknown> __anonymous, int op, int resetFlg ) CAPI3REF: Prepared Statement Status"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_str_append.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_str_append.html",
    "title": "Overloads for - sqlite3_str_append | Marmos Demo",
    "keywords": "Overloads for - sqlite3_str_append Module etc.c.sqlite3 sqlite3_str_append(__anonymous, zIn, N) void sqlite3_str_append( <bug: unknown> __anonymous, <bug: unknown> zIn, int N ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_str_appendall.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_str_appendall.html",
    "title": "Overloads for - sqlite3_str_appendall | Marmos Demo",
    "keywords": "Overloads for - sqlite3_str_appendall Module etc.c.sqlite3 sqlite3_str_appendall(__anonymous, zIn) void sqlite3_str_appendall( <bug: unknown> __anonymous, <bug: unknown> zIn ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_str_appendchar.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_str_appendchar.html",
    "title": "Overloads for - sqlite3_str_appendchar | Marmos Demo",
    "keywords": "Overloads for - sqlite3_str_appendchar Module etc.c.sqlite3 sqlite3_str_appendchar(__anonymous, N, C) void sqlite3_str_appendchar( <bug: unknown> __anonymous, int N, char C ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_str_appendf.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_str_appendf.html",
    "title": "Overloads for - sqlite3_str_appendf | Marmos Demo",
    "keywords": "Overloads for - sqlite3_str_appendf Module etc.c.sqlite3 sqlite3_str_appendf(__anonymous, zFormat) void sqlite3_str_appendf( <bug: unknown> __anonymous, <bug: unknown> zFormat ) CAPI3REF: Add Content To A Dynamic String"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_str_errcode.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_str_errcode.html",
    "title": "Overloads for - sqlite3_str_errcode | Marmos Demo",
    "keywords": "Overloads for - sqlite3_str_errcode Module etc.c.sqlite3 sqlite3_str_errcode(__anonymous) int sqlite3_str_errcode( <bug: unknown> __anonymous ) CAPI3REF: Status Of A Dynamic String"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_str_finish.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_str_finish.html",
    "title": "Overloads for - sqlite3_str_finish | Marmos Demo",
    "keywords": "Overloads for - sqlite3_str_finish Module etc.c.sqlite3 sqlite3_str_finish(__anonymous) <bug: unknown> sqlite3_str_finish( <bug: unknown> __anonymous ) CAPI3REF: Finalize A Dynamic String"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_str_length.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_str_length.html",
    "title": "Overloads for - sqlite3_str_length | Marmos Demo",
    "keywords": "Overloads for - sqlite3_str_length Module etc.c.sqlite3 sqlite3_str_length(__anonymous) int sqlite3_str_length( <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_str_new.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_str_new.html",
    "title": "Overloads for - sqlite3_str_new | Marmos Demo",
    "keywords": "Overloads for - sqlite3_str_new Module etc.c.sqlite3 sqlite3_str_new(__anonymous) <bug: unknown> sqlite3_str_new( <bug: unknown> __anonymous ) CAPI3REF: Create A New Dynamic String Object"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_str_reset.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_str_reset.html",
    "title": "Overloads for - sqlite3_str_reset | Marmos Demo",
    "keywords": "Overloads for - sqlite3_str_reset Module etc.c.sqlite3 sqlite3_str_reset(__anonymous) void sqlite3_str_reset( <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_str_value.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_str_value.html",
    "title": "Overloads for - sqlite3_str_value | Marmos Demo",
    "keywords": "Overloads for - sqlite3_str_value Module etc.c.sqlite3 sqlite3_str_value(__anonymous) <bug: unknown> sqlite3_str_value( <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_str_vappendf.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_str_vappendf.html",
    "title": "Overloads for - sqlite3_str_vappendf | Marmos Demo",
    "keywords": "Overloads for - sqlite3_str_vappendf Module etc.c.sqlite3 sqlite3_str_vappendf(__anonymous, zFormat, __anonymous) void sqlite3_str_vappendf( <bug: unknown> __anonymous, <bug: unknown> zFormat, va_list __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_strglob.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_strglob.html",
    "title": "Overloads for - sqlite3_strglob | Marmos Demo",
    "keywords": "Overloads for - sqlite3_strglob Module etc.c.sqlite3 sqlite3_strglob(zGlob, zStr) int sqlite3_strglob( <bug: unknown> zGlob, <bug: unknown> zStr )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_stricmp.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_stricmp.html",
    "title": "Overloads for - sqlite3_stricmp | Marmos Demo",
    "keywords": "Overloads for - sqlite3_stricmp Module etc.c.sqlite3 sqlite3_stricmp(__anonymous, __anonymous) int sqlite3_stricmp( <bug: unknown> __anonymous, <bug: unknown> __anonymous ) CAPI3REF: String Comparison"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_strlike.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_strlike.html",
    "title": "Overloads for - sqlite3_strlike | Marmos Demo",
    "keywords": "Overloads for - sqlite3_strlike Module etc.c.sqlite3 sqlite3_strlike(zGlob, zStr, cEsc) int sqlite3_strlike( <bug: unknown> zGlob, <bug: unknown> zStr, uint cEsc )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_strnicmp.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_strnicmp.html",
    "title": "Overloads for - sqlite3_strnicmp | Marmos Demo",
    "keywords": "Overloads for - sqlite3_strnicmp Module etc.c.sqlite3 sqlite3_strnicmp(__anonymous, __anonymous, __anonymous) int sqlite3_strnicmp( <bug: unknown> __anonymous, <bug: unknown> __anonymous, int __anonymous )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_table_column_metadata.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_table_column_metadata.html",
    "title": "Overloads for - sqlite3_table_column_metadata | Marmos Demo",
    "keywords": "Overloads for - sqlite3_table_column_metadata Module etc.c.sqlite3 sqlite3_table_column_metadata(db, zDbName, zTableName, zColumnName, pzDataType, pzCollSeq, pNotNull, pPrimaryKey, pAutoinc) int sqlite3_table_column_metadata( <bug: unknown> db, <bug: unknown> zDbName, <bug: unknown> zTableName, <bug: unknown> zColumnName, <bug: unknown> pzDataType, <bug: unknown> pzCollSeq, <bug: unknown> pNotNull, <bug: unknown> pPrimaryKey, <bug: unknown> pAutoinc ) CAPI3REF: Extract Metadata About A Column Of A Table"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_test_control.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_test_control.html",
    "title": "Overloads for - sqlite3_test_control | Marmos Demo",
    "keywords": "Overloads for - sqlite3_test_control Module etc.c.sqlite3 sqlite3_test_control(op) int sqlite3_test_control( int op ) CAPI3REF: Testing Interface"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_thread_cleanup.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_thread_cleanup.html",
    "title": "Overloads for - sqlite3_thread_cleanup | Marmos Demo",
    "keywords": "Overloads for - sqlite3_thread_cleanup Module etc.c.sqlite3 sqlite3_thread_cleanup() void sqlite3_thread_cleanup( ) deprecated"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_threadsafe.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_threadsafe.html",
    "title": "Overloads for - sqlite3_threadsafe | Marmos Demo",
    "keywords": "Overloads for - sqlite3_threadsafe Module etc.c.sqlite3 sqlite3_threadsafe() int sqlite3_threadsafe( ) CAPI3REF: Test To See If The Library Is Threadsafe"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_total_changes.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_total_changes.html",
    "title": "Overloads for - sqlite3_total_changes | Marmos Demo",
    "keywords": "Overloads for - sqlite3_total_changes Module etc.c.sqlite3 sqlite3_total_changes(__anonymous) int sqlite3_total_changes( <bug: unknown> __anonymous ) CAPI3REF: Total Number Of Rows Modified"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_trace.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_trace.html",
    "title": "Overloads for - sqlite3_trace | Marmos Demo",
    "keywords": "Overloads for - sqlite3_trace Module etc.c.sqlite3 sqlite3_trace(__anonymous, xTrace, __anonymous) <bug: unknown> sqlite3_trace( <bug: unknown> __anonymous, <bug: unknown> xTrace, <bug: unknown> __anonymous ) deprecated CAPI3REF: Tracing And Profiling Functions"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_trace_v2.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_trace_v2.html",
    "title": "Overloads for - sqlite3_trace_v2 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_trace_v2 Module etc.c.sqlite3 sqlite3_trace_v2(__anonymous, uMask, xCallback, pCtx) int sqlite3_trace_v2( <bug: unknown> __anonymous, uint uMask, <bug: unknown> xCallback, <bug: unknown> pCtx ) CAPI3REF: SQL Trace Hook"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_transfer_bindings.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_transfer_bindings.html",
    "title": "Overloads for - sqlite3_transfer_bindings | Marmos Demo",
    "keywords": "Overloads for - sqlite3_transfer_bindings Module etc.c.sqlite3 sqlite3_transfer_bindings(__anonymous, __anonymous) int sqlite3_transfer_bindings( <bug: unknown> __anonymous, <bug: unknown> __anonymous ) deprecated"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_unlock_notify.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_unlock_notify.html",
    "title": "Overloads for - sqlite3_unlock_notify | Marmos Demo",
    "keywords": "Overloads for - sqlite3_unlock_notify Module etc.c.sqlite3 sqlite3_unlock_notify(pBlocked, xNotify, pNotifyArg) int sqlite3_unlock_notify( <bug: unknown> pBlocked, <bug: unknown> xNotify, <bug: unknown> pNotifyArg ) CAPI3REF: Unlock Notification"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_update_hook.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_update_hook.html",
    "title": "Overloads for - sqlite3_update_hook | Marmos Demo",
    "keywords": "Overloads for - sqlite3_update_hook Module etc.c.sqlite3 sqlite3_update_hook(__anonymous, __anonymous, __anonymous) <bug: unknown> sqlite3_update_hook( <bug: unknown> __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous ) CAPI3REF: Data Change Notification Callbacks"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_uri_boolean.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_uri_boolean.html",
    "title": "Overloads for - sqlite3_uri_boolean | Marmos Demo",
    "keywords": "Overloads for - sqlite3_uri_boolean Module etc.c.sqlite3 sqlite3_uri_boolean(zFile, zParam, bDefault) int sqlite3_uri_boolean( <bug: unknown> zFile, <bug: unknown> zParam, int bDefault ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_uri_int64.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_uri_int64.html",
    "title": "Overloads for - sqlite3_uri_int64 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_uri_int64 Module etc.c.sqlite3 sqlite3_uri_int64(__anonymous, __anonymous, __anonymous) sqlite3_int64 sqlite3_uri_int64( <bug: unknown> __anonymous, <bug: unknown> __anonymous, sqlite3_int64 __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_uri_key.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_uri_key.html",
    "title": "Overloads for - sqlite3_uri_key | Marmos Demo",
    "keywords": "Overloads for - sqlite3_uri_key Module etc.c.sqlite3 sqlite3_uri_key(zFilename, N) <bug: unknown> sqlite3_uri_key( <bug: unknown> zFilename, int N ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_uri_parameter.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_uri_parameter.html",
    "title": "Overloads for - sqlite3_uri_parameter | Marmos Demo",
    "keywords": "Overloads for - sqlite3_uri_parameter Module etc.c.sqlite3 sqlite3_uri_parameter(zFilename, zParam) <bug: unknown> sqlite3_uri_parameter( <bug: unknown> zFilename, <bug: unknown> zParam )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_user_data.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_user_data.html",
    "title": "Overloads for - sqlite3_user_data | Marmos Demo",
    "keywords": "Overloads for - sqlite3_user_data Module etc.c.sqlite3 sqlite3_user_data(__anonymous) <bug: unknown> sqlite3_user_data( <bug: unknown> __anonymous ) CAPI3REF: User Data For Functions"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_value_blob.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_value_blob.html",
    "title": "Overloads for - sqlite3_value_blob | Marmos Demo",
    "keywords": "Overloads for - sqlite3_value_blob Module etc.c.sqlite3 sqlite3_value_blob(__anonymous) <bug: unknown> sqlite3_value_blob( <bug: unknown> __anonymous ) CAPI3REF: Obtaining SQL Function Parameter Values"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_value_bytes.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_value_bytes.html",
    "title": "Overloads for - sqlite3_value_bytes | Marmos Demo",
    "keywords": "Overloads for - sqlite3_value_bytes Module etc.c.sqlite3 sqlite3_value_bytes(__anonymous) int sqlite3_value_bytes( <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_value_bytes16.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_value_bytes16.html",
    "title": "Overloads for - sqlite3_value_bytes16 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_value_bytes16 Module etc.c.sqlite3 sqlite3_value_bytes16(__anonymous) int sqlite3_value_bytes16( <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_value_double.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_value_double.html",
    "title": "Overloads for - sqlite3_value_double | Marmos Demo",
    "keywords": "Overloads for - sqlite3_value_double Module etc.c.sqlite3 sqlite3_value_double(__anonymous) double sqlite3_value_double( <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_value_dup.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_value_dup.html",
    "title": "Overloads for - sqlite3_value_dup | Marmos Demo",
    "keywords": "Overloads for - sqlite3_value_dup Module etc.c.sqlite3 sqlite3_value_dup(__anonymous) <bug: unknown> sqlite3_value_dup( <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_value_free.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_value_free.html",
    "title": "Overloads for - sqlite3_value_free | Marmos Demo",
    "keywords": "Overloads for - sqlite3_value_free Module etc.c.sqlite3 sqlite3_value_free(__anonymous) void sqlite3_value_free( <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_value_frombind.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_value_frombind.html",
    "title": "Overloads for - sqlite3_value_frombind | Marmos Demo",
    "keywords": "Overloads for - sqlite3_value_frombind Module etc.c.sqlite3 sqlite3_value_frombind(__anonymous) int sqlite3_value_frombind( <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_value_int.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_value_int.html",
    "title": "Overloads for - sqlite3_value_int | Marmos Demo",
    "keywords": "Overloads for - sqlite3_value_int Module etc.c.sqlite3 sqlite3_value_int(__anonymous) int sqlite3_value_int( <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_value_int64.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_value_int64.html",
    "title": "Overloads for - sqlite3_value_int64 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_value_int64 Module etc.c.sqlite3 sqlite3_value_int64(__anonymous) sqlite3_int64 sqlite3_value_int64( <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_value_nochange.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_value_nochange.html",
    "title": "Overloads for - sqlite3_value_nochange | Marmos Demo",
    "keywords": "Overloads for - sqlite3_value_nochange Module etc.c.sqlite3 sqlite3_value_nochange(__anonymous) int sqlite3_value_nochange( <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_value_numeric_type.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_value_numeric_type.html",
    "title": "Overloads for - sqlite3_value_numeric_type | Marmos Demo",
    "keywords": "Overloads for - sqlite3_value_numeric_type Module etc.c.sqlite3 sqlite3_value_numeric_type(__anonymous) int sqlite3_value_numeric_type( <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_value_subtype.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_value_subtype.html",
    "title": "Overloads for - sqlite3_value_subtype | Marmos Demo",
    "keywords": "Overloads for - sqlite3_value_subtype Module etc.c.sqlite3 sqlite3_value_subtype(__anonymous) uint sqlite3_value_subtype( <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_value_text.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_value_text.html",
    "title": "Overloads for - sqlite3_value_text | Marmos Demo",
    "keywords": "Overloads for - sqlite3_value_text Module etc.c.sqlite3 sqlite3_value_text(__anonymous) <bug: unknown> sqlite3_value_text( <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_value_text16.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_value_text16.html",
    "title": "Overloads for - sqlite3_value_text16 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_value_text16 Module etc.c.sqlite3 sqlite3_value_text16(__anonymous) <bug: unknown> sqlite3_value_text16( <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_value_text16be.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_value_text16be.html",
    "title": "Overloads for - sqlite3_value_text16be | Marmos Demo",
    "keywords": "Overloads for - sqlite3_value_text16be Module etc.c.sqlite3 sqlite3_value_text16be(__anonymous) <bug: unknown> sqlite3_value_text16be( <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_value_text16le.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_value_text16le.html",
    "title": "Overloads for - sqlite3_value_text16le | Marmos Demo",
    "keywords": "Overloads for - sqlite3_value_text16le Module etc.c.sqlite3 sqlite3_value_text16le(__anonymous) <bug: unknown> sqlite3_value_text16le( <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_value_type.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_value_type.html",
    "title": "Overloads for - sqlite3_value_type | Marmos Demo",
    "keywords": "Overloads for - sqlite3_value_type Module etc.c.sqlite3 sqlite3_value_type(__anonymous) int sqlite3_value_type( <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_vfs_find.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_vfs_find.html",
    "title": "Overloads for - sqlite3_vfs_find | Marmos Demo",
    "keywords": "Overloads for - sqlite3_vfs_find Module etc.c.sqlite3 sqlite3_vfs_find(zVfsName) <bug: unknown> sqlite3_vfs_find( <bug: unknown> zVfsName ) CAPI3REF: Virtual File System Objects"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_vfs_register.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_vfs_register.html",
    "title": "Overloads for - sqlite3_vfs_register | Marmos Demo",
    "keywords": "Overloads for - sqlite3_vfs_register Module etc.c.sqlite3 sqlite3_vfs_register(__anonymous, makeDflt) int sqlite3_vfs_register( <bug: unknown> __anonymous, int makeDflt ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_vfs_unregister.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_vfs_unregister.html",
    "title": "Overloads for - sqlite3_vfs_unregister | Marmos Demo",
    "keywords": "Overloads for - sqlite3_vfs_unregister Module etc.c.sqlite3 sqlite3_vfs_unregister(__anonymous) int sqlite3_vfs_unregister( <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_vmprintf.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_vmprintf.html",
    "title": "Overloads for - sqlite3_vmprintf | Marmos Demo",
    "keywords": "Overloads for - sqlite3_vmprintf Module etc.c.sqlite3 sqlite3_vmprintf(__anonymous, __anonymous) <bug: unknown> sqlite3_vmprintf( <bug: unknown> __anonymous, va_list __anonymous )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_vsnprintf.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_vsnprintf.html",
    "title": "Overloads for - sqlite3_vsnprintf | Marmos Demo",
    "keywords": "Overloads for - sqlite3_vsnprintf Module etc.c.sqlite3 sqlite3_vsnprintf(__anonymous, __anonymous, __anonymous, __anonymous) <bug: unknown> sqlite3_vsnprintf( int __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous, va_list __anonymous )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_vtab_collation.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_vtab_collation.html",
    "title": "Overloads for - sqlite3_vtab_collation | Marmos Demo",
    "keywords": "Overloads for - sqlite3_vtab_collation Module etc.c.sqlite3 sqlite3_vtab_collation(__anonymous, __anonymous) <bug: unknown> sqlite3_vtab_collation( <bug: unknown> __anonymous, int __anonymous )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_vtab_config.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_vtab_config.html",
    "title": "Overloads for - sqlite3_vtab_config | Marmos Demo",
    "keywords": "Overloads for - sqlite3_vtab_config Module etc.c.sqlite3 sqlite3_vtab_config(__anonymous, op) int sqlite3_vtab_config( <bug: unknown> __anonymous, int op )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_vtab_nochange.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_vtab_nochange.html",
    "title": "Overloads for - sqlite3_vtab_nochange | Marmos Demo",
    "keywords": "Overloads for - sqlite3_vtab_nochange Module etc.c.sqlite3 sqlite3_vtab_nochange(__anonymous) int sqlite3_vtab_nochange( <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_vtab_on_conflict.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_vtab_on_conflict.html",
    "title": "Overloads for - sqlite3_vtab_on_conflict | Marmos Demo",
    "keywords": "Overloads for - sqlite3_vtab_on_conflict Module etc.c.sqlite3 sqlite3_vtab_on_conflict(__anonymous) int sqlite3_vtab_on_conflict( <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_wal_autocheckpoint.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_wal_autocheckpoint.html",
    "title": "Overloads for - sqlite3_wal_autocheckpoint | Marmos Demo",
    "keywords": "Overloads for - sqlite3_wal_autocheckpoint Module etc.c.sqlite3 sqlite3_wal_autocheckpoint(db, N) int sqlite3_wal_autocheckpoint( <bug: unknown> db, int N ) CAPI3REF: Configure an auto-checkpoint"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_wal_checkpoint.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_wal_checkpoint.html",
    "title": "Overloads for - sqlite3_wal_checkpoint | Marmos Demo",
    "keywords": "Overloads for - sqlite3_wal_checkpoint Module etc.c.sqlite3 sqlite3_wal_checkpoint(db, zDb) int sqlite3_wal_checkpoint( <bug: unknown> db, <bug: unknown> zDb ) CAPI3REF: Checkpoint a database"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_wal_checkpoint_v2.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_wal_checkpoint_v2.html",
    "title": "Overloads for - sqlite3_wal_checkpoint_v2 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_wal_checkpoint_v2 Module etc.c.sqlite3 sqlite3_wal_checkpoint_v2(db, zDb, eMode, pnLog, pnCkpt) int sqlite3_wal_checkpoint_v2( <bug: unknown> db, <bug: unknown> zDb, int eMode, <bug: unknown> pnLog, <bug: unknown> pnCkpt ) CAPI3REF: Checkpoint a database"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_wal_hook.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_wal_hook.html",
    "title": "Overloads for - sqlite3_wal_hook | Marmos Demo",
    "keywords": "Overloads for - sqlite3_wal_hook Module etc.c.sqlite3 sqlite3_wal_hook(__anonymous, __anonymous, __anonymous) <bug: unknown> sqlite3_wal_hook( <bug: unknown> __anonymous, <bug: unknown> __anonymous, <bug: unknown> __anonymous ) CAPI3REF: Write-Ahead Log Commit Hook"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_win32_set_directory.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_win32_set_directory.html",
    "title": "Overloads for - sqlite3_win32_set_directory | Marmos Demo",
    "keywords": "Overloads for - sqlite3_win32_set_directory Module etc.c.sqlite3 sqlite3_win32_set_directory(type, zValue) int sqlite3_win32_set_directory( c_ulong type, <bug: unknown> zValue ) CAPI3REF: Win32 Specific Interface"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_win32_set_directory16.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_win32_set_directory16.html",
    "title": "Overloads for - sqlite3_win32_set_directory16 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_win32_set_directory16 Module etc.c.sqlite3 sqlite3_win32_set_directory16(type, zValue) int sqlite3_win32_set_directory16( c_ulong type, <bug: unknown> zValue ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3_win32_set_directory8.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3_win32_set_directory8.html",
    "title": "Overloads for - sqlite3_win32_set_directory8 | Marmos Demo",
    "keywords": "Overloads for - sqlite3_win32_set_directory8 Module etc.c.sqlite3 sqlite3_win32_set_directory8(type, zValue) int sqlite3_win32_set_directory8( c_ulong type, <bug: unknown> zValue ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3changegroup_add.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3changegroup_add.html",
    "title": "Overloads for - sqlite3changegroup_add | Marmos Demo",
    "keywords": "Overloads for - sqlite3changegroup_add Module etc.c.sqlite3 sqlite3changegroup_add(__anonymous, nData, pData) int sqlite3changegroup_add( <bug: unknown> __anonymous, int nData, <bug: unknown> pData )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3changegroup_add_strm.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3changegroup_add_strm.html",
    "title": "Overloads for - sqlite3changegroup_add_strm | Marmos Demo",
    "keywords": "Overloads for - sqlite3changegroup_add_strm Module etc.c.sqlite3 sqlite3changegroup_add_strm(__anonymous, xInput, pIn) int sqlite3changegroup_add_strm( <bug: unknown> __anonymous, <bug: unknown> xInput, <bug: unknown> pIn ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3changegroup_delete.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3changegroup_delete.html",
    "title": "Overloads for - sqlite3changegroup_delete | Marmos Demo",
    "keywords": "Overloads for - sqlite3changegroup_delete Module etc.c.sqlite3 sqlite3changegroup_delete(__anonymous) void sqlite3changegroup_delete( <bug: unknown> __anonymous )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3changegroup_new.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3changegroup_new.html",
    "title": "Overloads for - sqlite3changegroup_new | Marmos Demo",
    "keywords": "Overloads for - sqlite3changegroup_new Module etc.c.sqlite3 sqlite3changegroup_new(pp) int sqlite3changegroup_new( <bug: unknown> pp )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3changegroup_output.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3changegroup_output.html",
    "title": "Overloads for - sqlite3changegroup_output | Marmos Demo",
    "keywords": "Overloads for - sqlite3changegroup_output Module etc.c.sqlite3 sqlite3changegroup_output(__anonymous, pnData, ppData) int sqlite3changegroup_output( <bug: unknown> __anonymous, <bug: unknown> pnData, <bug: unknown> ppData )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3changegroup_output_strm.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3changegroup_output_strm.html",
    "title": "Overloads for - sqlite3changegroup_output_strm | Marmos Demo",
    "keywords": "Overloads for - sqlite3changegroup_output_strm Module etc.c.sqlite3 sqlite3changegroup_output_strm(__anonymous, xOutput, pOut) int sqlite3changegroup_output_strm( <bug: unknown> __anonymous, <bug: unknown> xOutput, <bug: unknown> pOut ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3changeset_apply.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3changeset_apply.html",
    "title": "Overloads for - sqlite3changeset_apply | Marmos Demo",
    "keywords": "Overloads for - sqlite3changeset_apply Module etc.c.sqlite3 sqlite3changeset_apply(db, nChangeset, pChangeset, xFilter, xConflict, pCtx) int sqlite3changeset_apply( <bug: unknown> db, int nChangeset, <bug: unknown> pChangeset, <bug: unknown> xFilter, <bug: unknown> xConflict, <bug: unknown> pCtx )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3changeset_apply_strm.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3changeset_apply_strm.html",
    "title": "Overloads for - sqlite3changeset_apply_strm | Marmos Demo",
    "keywords": "Overloads for - sqlite3changeset_apply_strm Module etc.c.sqlite3 sqlite3changeset_apply_strm(db, xInput, pIn, xFilter, xConflict, pCtx) int sqlite3changeset_apply_strm( <bug: unknown> db, <bug: unknown> xInput, <bug: unknown> pIn, <bug: unknown> xFilter, <bug: unknown> xConflict, <bug: unknown> pCtx )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3changeset_apply_v2.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3changeset_apply_v2.html",
    "title": "Overloads for - sqlite3changeset_apply_v2 | Marmos Demo",
    "keywords": "Overloads for - sqlite3changeset_apply_v2 Module etc.c.sqlite3 sqlite3changeset_apply_v2(db, nChangeset, pChangeset, xFilter, xConflict, pCtx, ppRebase, pnRebase, flags) int sqlite3changeset_apply_v2( <bug: unknown> db, int nChangeset, <bug: unknown> pChangeset, <bug: unknown> xFilter, <bug: unknown> xConflict, <bug: unknown> pCtx, <bug: unknown> ppRebase, <bug: unknown> pnRebase, int flags ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3changeset_apply_v2_strm.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3changeset_apply_v2_strm.html",
    "title": "Overloads for - sqlite3changeset_apply_v2_strm | Marmos Demo",
    "keywords": "Overloads for - sqlite3changeset_apply_v2_strm Module etc.c.sqlite3 sqlite3changeset_apply_v2_strm(db, xInput, pIn, xFilter, xConflict, pCtx, ppRebase, pnRebase, flags) int sqlite3changeset_apply_v2_strm( <bug: unknown> db, <bug: unknown> xInput, <bug: unknown> pIn, <bug: unknown> xFilter, <bug: unknown> xConflict, <bug: unknown> pCtx, <bug: unknown> ppRebase, <bug: unknown> pnRebase, int flags ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3changeset_concat.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3changeset_concat.html",
    "title": "Overloads for - sqlite3changeset_concat | Marmos Demo",
    "keywords": "Overloads for - sqlite3changeset_concat Module etc.c.sqlite3 sqlite3changeset_concat(nA, pA, nB, pB, pnOut, ppOut) int sqlite3changeset_concat( int nA, <bug: unknown> pA, int nB, <bug: unknown> pB, <bug: unknown> pnOut, <bug: unknown> ppOut )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3changeset_concat_strm.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3changeset_concat_strm.html",
    "title": "Overloads for - sqlite3changeset_concat_strm | Marmos Demo",
    "keywords": "Overloads for - sqlite3changeset_concat_strm Module etc.c.sqlite3 sqlite3changeset_concat_strm(xInputA, pInA, xInputB, pInB, xOutput, pOut) int sqlite3changeset_concat_strm( <bug: unknown> xInputA, <bug: unknown> pInA, <bug: unknown> xInputB, <bug: unknown> pInB, <bug: unknown> xOutput, <bug: unknown> pOut ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3changeset_conflict.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3changeset_conflict.html",
    "title": "Overloads for - sqlite3changeset_conflict | Marmos Demo",
    "keywords": "Overloads for - sqlite3changeset_conflict Module etc.c.sqlite3 sqlite3changeset_conflict(pIter, iVal, ppValue) int sqlite3changeset_conflict( <bug: unknown> pIter, int iVal, <bug: unknown> ppValue )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3changeset_finalize.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3changeset_finalize.html",
    "title": "Overloads for - sqlite3changeset_finalize | Marmos Demo",
    "keywords": "Overloads for - sqlite3changeset_finalize Module etc.c.sqlite3 sqlite3changeset_finalize(pIter) int sqlite3changeset_finalize( <bug: unknown> pIter )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3changeset_fk_conflicts.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3changeset_fk_conflicts.html",
    "title": "Overloads for - sqlite3changeset_fk_conflicts | Marmos Demo",
    "keywords": "Overloads for - sqlite3changeset_fk_conflicts Module etc.c.sqlite3 sqlite3changeset_fk_conflicts(pIter, pnOut) int sqlite3changeset_fk_conflicts( <bug: unknown> pIter, <bug: unknown> pnOut )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3changeset_invert.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3changeset_invert.html",
    "title": "Overloads for - sqlite3changeset_invert | Marmos Demo",
    "keywords": "Overloads for - sqlite3changeset_invert Module etc.c.sqlite3 sqlite3changeset_invert(nIn, pIn, pnOut, ppOut) int sqlite3changeset_invert( int nIn, <bug: unknown> pIn, <bug: unknown> pnOut, <bug: unknown> ppOut )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3changeset_invert_strm.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3changeset_invert_strm.html",
    "title": "Overloads for - sqlite3changeset_invert_strm | Marmos Demo",
    "keywords": "Overloads for - sqlite3changeset_invert_strm Module etc.c.sqlite3 sqlite3changeset_invert_strm(xInput, pIn, xOutput, pOut) int sqlite3changeset_invert_strm( <bug: unknown> xInput, <bug: unknown> pIn, <bug: unknown> xOutput, <bug: unknown> pOut ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3changeset_new.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3changeset_new.html",
    "title": "Overloads for - sqlite3changeset_new | Marmos Demo",
    "keywords": "Overloads for - sqlite3changeset_new Module etc.c.sqlite3 sqlite3changeset_new(pIter, iVal, ppValue) int sqlite3changeset_new( <bug: unknown> pIter, int iVal, <bug: unknown> ppValue )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3changeset_next.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3changeset_next.html",
    "title": "Overloads for - sqlite3changeset_next | Marmos Demo",
    "keywords": "Overloads for - sqlite3changeset_next Module etc.c.sqlite3 sqlite3changeset_next(pIter) int sqlite3changeset_next( <bug: unknown> pIter )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3changeset_old.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3changeset_old.html",
    "title": "Overloads for - sqlite3changeset_old | Marmos Demo",
    "keywords": "Overloads for - sqlite3changeset_old Module etc.c.sqlite3 sqlite3changeset_old(pIter, iVal, ppValue) int sqlite3changeset_old( <bug: unknown> pIter, int iVal, <bug: unknown> ppValue )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3changeset_op.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3changeset_op.html",
    "title": "Overloads for - sqlite3changeset_op | Marmos Demo",
    "keywords": "Overloads for - sqlite3changeset_op Module etc.c.sqlite3 sqlite3changeset_op(pIter, pzTab, pnCol, pOp, pbIndirect) int sqlite3changeset_op( <bug: unknown> pIter, <bug: unknown> pzTab, <bug: unknown> pnCol, <bug: unknown> pOp, <bug: unknown> pbIndirect )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3changeset_pk.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3changeset_pk.html",
    "title": "Overloads for - sqlite3changeset_pk | Marmos Demo",
    "keywords": "Overloads for - sqlite3changeset_pk Module etc.c.sqlite3 sqlite3changeset_pk(pIter, pabPK, pnCol) int sqlite3changeset_pk( <bug: unknown> pIter, <bug: unknown> pabPK, <bug: unknown> pnCol )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3changeset_start.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3changeset_start.html",
    "title": "Overloads for - sqlite3changeset_start | Marmos Demo",
    "keywords": "Overloads for - sqlite3changeset_start Module etc.c.sqlite3 sqlite3changeset_start(pp, nChangeset, pChangeset) int sqlite3changeset_start( <bug: unknown> pp, int nChangeset, <bug: unknown> pChangeset )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3changeset_start_strm.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3changeset_start_strm.html",
    "title": "Overloads for - sqlite3changeset_start_strm | Marmos Demo",
    "keywords": "Overloads for - sqlite3changeset_start_strm Module etc.c.sqlite3 sqlite3changeset_start_strm(pp, xInput, pIn) int sqlite3changeset_start_strm( <bug: unknown> pp, <bug: unknown> xInput, <bug: unknown> pIn ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3changeset_start_v2.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3changeset_start_v2.html",
    "title": "Overloads for - sqlite3changeset_start_v2 | Marmos Demo",
    "keywords": "Overloads for - sqlite3changeset_start_v2 Module etc.c.sqlite3 sqlite3changeset_start_v2(pp, nChangeset, pChangeset, flags) int sqlite3changeset_start_v2( <bug: unknown> pp, int nChangeset, <bug: unknown> pChangeset, int flags ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3changeset_start_v2_strm.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3changeset_start_v2_strm.html",
    "title": "Overloads for - sqlite3changeset_start_v2_strm | Marmos Demo",
    "keywords": "Overloads for - sqlite3changeset_start_v2_strm Module etc.c.sqlite3 sqlite3changeset_start_v2_strm(pp, xInput, pIn, flags) int sqlite3changeset_start_v2_strm( <bug: unknown> pp, <bug: unknown> xInput, <bug: unknown> pIn, int flags ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3rebaser_configure.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3rebaser_configure.html",
    "title": "Overloads for - sqlite3rebaser_configure | Marmos Demo",
    "keywords": "Overloads for - sqlite3rebaser_configure Module etc.c.sqlite3 sqlite3rebaser_configure(__anonymous, nRebase, pRebase) int sqlite3rebaser_configure( <bug: unknown> __anonymous, int nRebase, <bug: unknown> pRebase )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3rebaser_create.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3rebaser_create.html",
    "title": "Overloads for - sqlite3rebaser_create | Marmos Demo",
    "keywords": "Overloads for - sqlite3rebaser_create Module etc.c.sqlite3 sqlite3rebaser_create(ppNew) int sqlite3rebaser_create( <bug: unknown> ppNew )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3rebaser_delete.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3rebaser_delete.html",
    "title": "Overloads for - sqlite3rebaser_delete | Marmos Demo",
    "keywords": "Overloads for - sqlite3rebaser_delete Module etc.c.sqlite3 sqlite3rebaser_delete(p) void sqlite3rebaser_delete( <bug: unknown> p )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3rebaser_rebase.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3rebaser_rebase.html",
    "title": "Overloads for - sqlite3rebaser_rebase | Marmos Demo",
    "keywords": "Overloads for - sqlite3rebaser_rebase Module etc.c.sqlite3 sqlite3rebaser_rebase(__anonymous, nIn, pIn, pnOut, ppOut) int sqlite3rebaser_rebase( <bug: unknown> __anonymous, int nIn, <bug: unknown> pIn, <bug: unknown> pnOut, <bug: unknown> ppOut )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3rebaser_rebase_strm.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3rebaser_rebase_strm.html",
    "title": "Overloads for - sqlite3rebaser_rebase_strm | Marmos Demo",
    "keywords": "Overloads for - sqlite3rebaser_rebase_strm Module etc.c.sqlite3 sqlite3rebaser_rebase_strm(pRebaser, xInput, pIn, xOutput, pOut) int sqlite3rebaser_rebase_strm( <bug: unknown> pRebaser, <bug: unknown> xInput, <bug: unknown> pIn, <bug: unknown> xOutput, <bug: unknown> pOut ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3session_attach.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3session_attach.html",
    "title": "Overloads for - sqlite3session_attach | Marmos Demo",
    "keywords": "Overloads for - sqlite3session_attach Module etc.c.sqlite3 sqlite3session_attach(pSession, zTab) int sqlite3session_attach( <bug: unknown> pSession, <bug: unknown> zTab )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3session_changeset.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3session_changeset.html",
    "title": "Overloads for - sqlite3session_changeset | Marmos Demo",
    "keywords": "Overloads for - sqlite3session_changeset Module etc.c.sqlite3 sqlite3session_changeset(pSession, pnChangeset, ppChangeset) int sqlite3session_changeset( <bug: unknown> pSession, <bug: unknown> pnChangeset, <bug: unknown> ppChangeset )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3session_changeset_strm.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3session_changeset_strm.html",
    "title": "Overloads for - sqlite3session_changeset_strm | Marmos Demo",
    "keywords": "Overloads for - sqlite3session_changeset_strm Module etc.c.sqlite3 sqlite3session_changeset_strm(pSession, xOutput, pOut) int sqlite3session_changeset_strm( <bug: unknown> pSession, <bug: unknown> xOutput, <bug: unknown> pOut ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3session_config.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3session_config.html",
    "title": "Overloads for - sqlite3session_config | Marmos Demo",
    "keywords": "Overloads for - sqlite3session_config Module etc.c.sqlite3 sqlite3session_config(op, pArg) int sqlite3session_config( int op, <bug: unknown> pArg )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3session_create.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3session_create.html",
    "title": "Overloads for - sqlite3session_create | Marmos Demo",
    "keywords": "Overloads for - sqlite3session_create Module etc.c.sqlite3 sqlite3session_create(db, zDb, ppSession) int sqlite3session_create( <bug: unknown> db, <bug: unknown> zDb, <bug: unknown> ppSession )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3session_delete.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3session_delete.html",
    "title": "Overloads for - sqlite3session_delete | Marmos Demo",
    "keywords": "Overloads for - sqlite3session_delete Module etc.c.sqlite3 sqlite3session_delete(pSession) void sqlite3session_delete( <bug: unknown> pSession )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3session_diff.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3session_diff.html",
    "title": "Overloads for - sqlite3session_diff | Marmos Demo",
    "keywords": "Overloads for - sqlite3session_diff Module etc.c.sqlite3 sqlite3session_diff(pSession, zFromDb, zTbl, pzErrMsg) int sqlite3session_diff( <bug: unknown> pSession, <bug: unknown> zFromDb, <bug: unknown> zTbl, <bug: unknown> pzErrMsg )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3session_enable.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3session_enable.html",
    "title": "Overloads for - sqlite3session_enable | Marmos Demo",
    "keywords": "Overloads for - sqlite3session_enable Module etc.c.sqlite3 sqlite3session_enable(pSession, bEnable) int sqlite3session_enable( <bug: unknown> pSession, int bEnable )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3session_indirect.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3session_indirect.html",
    "title": "Overloads for - sqlite3session_indirect | Marmos Demo",
    "keywords": "Overloads for - sqlite3session_indirect Module etc.c.sqlite3 sqlite3session_indirect(pSession, bIndirect) int sqlite3session_indirect( <bug: unknown> pSession, int bIndirect )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3session_isempty.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3session_isempty.html",
    "title": "Overloads for - sqlite3session_isempty | Marmos Demo",
    "keywords": "Overloads for - sqlite3session_isempty Module etc.c.sqlite3 sqlite3session_isempty(pSession) int sqlite3session_isempty( <bug: unknown> pSession )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3session_patchset.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3session_patchset.html",
    "title": "Overloads for - sqlite3session_patchset | Marmos Demo",
    "keywords": "Overloads for - sqlite3session_patchset Module etc.c.sqlite3 sqlite3session_patchset(pSession, pnPatchset, ppPatchset) int sqlite3session_patchset( <bug: unknown> pSession, <bug: unknown> pnPatchset, <bug: unknown> ppPatchset )"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3session_patchset_strm.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3session_patchset_strm.html",
    "title": "Overloads for - sqlite3session_patchset_strm | Marmos Demo",
    "keywords": "Overloads for - sqlite3session_patchset_strm Module etc.c.sqlite3 sqlite3session_patchset_strm(pSession, xOutput, pOut) int sqlite3session_patchset_strm( <bug: unknown> pSession, <bug: unknown> xOutput, <bug: unknown> pOut ) Ditto"
  },
  "phobos/etc/c/sqlite3/Functions/sqlite3session_table_filter.html": {
    "href": "phobos/etc/c/sqlite3/Functions/sqlite3session_table_filter.html",
    "title": "Overloads for - sqlite3session_table_filter | Marmos Demo",
    "keywords": "Overloads for - sqlite3session_table_filter Module etc.c.sqlite3 sqlite3session_table_filter(pSession, xFilter, pCtx) void sqlite3session_table_filter( <bug: unknown> pSession, <bug: unknown> xFilter, <bug: unknown> pCtx )"
  },
  "phobos/etc/c/sqlite3/Overview.html": {
    "href": "phobos/etc/c/sqlite3/Overview.html",
    "title": "Module - etc.c.sqlite3 | Marmos Demo",
    "keywords": "Module - etc.c.sqlite3 Aliases Name Description fts5_extension_function Ditto mapFunction The interface to the virtual-table mechanism is currently considered to be experimental. The interface might change in incompatible ways. If this is a problem for you, do not use the interface at this time. SQLITE_GET_LOCKPROXYFILE SQLITE_LAST_ERRNO SQLITE_MUTEX_STATIC_MASTER SQLITE_OPEN_MASTER_JOURNAL VFS only SQLITE_SET_LOCKPROXYFILE sqlite3_callback The type for a callback function. This is legacy and deprecated. It is included for historical compatibility and is not documented. sqlite3_destructor_type CAPI3REF: Constants Defining Special Destructor Behavior sqlite3_int64 sqlite3_syscall_ptr Ditto sqlite3_uint64 xDlSymReturn CAPI3REF: OS Interface Object Structs Name Description fts5_api Ditto fts5_tokenizer Fts5Context Interfaces to extend FTS5. Fts5ExtensionApi Ditto Fts5PhraseIter Ditto Fts5Tokenizer Ditto sqlite3 CAPI3REF: Database Connection Handle sqlite3_api_routines CAPI3REF: Loadable Extension Thunk sqlite3_backup CAPI3REF: Online Backup Object sqlite3_blob The interface to the virtual-table mechanism defined above (back up to a comment remarkably similar to this one) is currently considered to be experimental. The interface might change in incompatible ways. If this is a problem for you, do not use the interface at this time. sqlite3_changegroup sqlite3_changeset_iter sqlite3_context CAPI3REF: SQL Function Context Object sqlite3_file CAPI3REF: OS Interface Open File Handle sqlite3_index_info CAPI3REF: Virtual Table Indexing Information sqlite3_io_methods CAPI3REF: OS Interface File Virtual Methods Object sqlite3_mem_methods CAPI3REF: Memory Allocation Routines sqlite3_module Ditto sqlite3_mutex CAPI3REF: Mutex Handle sqlite3_mutex_methods CAPI3REF: Mutex Methods Object sqlite3_pcache CAPI3REF: Custom Page Cache Object sqlite3_pcache_methods sqlite3_pcache_methods2 CAPI3REF: Application Defined Page Cache. sqlite3_pcache_page CAPI3REF: Custom Page Cache Object sqlite3_rebaser sqlite3_rtree_geometry A pointer to a structure of the following type is passed as the first argument to callbacks registered using rtree_geometry_callback(). sqlite3_rtree_query_info sqlite3_session sqlite3_snapshot sqlite3_stmt CAPI3REF: SQL Statement Object sqlite3_str CAPI3REF: Dynamic String Object sqlite3_value CAPI3REF: Dynamically Typed Value Object sqlite3_vfs sqlite3_vtab CAPI3REF: Virtual Table Instance Object sqlite3_vtab_cursor CAPI3REF: Virtual Table Cursor Object Functions Name Description sqlite3_activate_cerod Specify the activation key for a CEROD database. Unless activated, none of the CEROD routines will work. sqlite3_aggregate_context CAPI3REF: Obtain Aggregate Function Context sqlite3_aggregate_count CAPI3REF: Deprecated Functions sqlite3_auto_extension CAPI3REF: Automatically Load Statically Linked Extensions sqlite3_backup_finish Ditto sqlite3_backup_init CAPI3REF: Online Backup API. sqlite3_backup_pagecount Ditto sqlite3_backup_remaining Ditto sqlite3_backup_step Ditto sqlite3_bind_blob CAPI3REF: Binding Values To Prepared Statements sqlite3_bind_blob64 Ditto sqlite3_bind_double Ditto sqlite3_bind_int Ditto sqlite3_bind_int64 Ditto sqlite3_bind_null Ditto sqlite3_bind_parameter_count CAPI3REF: Number Of SQL Parameters sqlite3_bind_parameter_index CAPI3REF: Index Of A Parameter With A Given Name sqlite3_bind_parameter_name CAPI3REF: Name Of A Host Parameter sqlite3_bind_text Ditto sqlite3_bind_text16 Ditto sqlite3_bind_text64 Ditto sqlite3_bind_value Ditto sqlite3_bind_zeroblob Ditto sqlite3_bind_zeroblob64 Ditto sqlite3_blob_bytes CAPI3REF: Return The Size Of An Open BLOB sqlite3_blob_close CAPI3REF: Close A BLOB Handle sqlite3_blob_open CAPI3REF: Open A BLOB For Incremental I/O sqlite3_blob_read CAPI3REF: Read Data From A BLOB Incrementally sqlite3_blob_reopen CAPI3REF: Move a BLOB Handle to a New Row sqlite3_blob_write CAPI3REF: Write Data Into A BLOB Incrementally sqlite3_busy_handler CAPI3REF: Register A Callback To Handle SQLITE_BUSY Errors sqlite3_busy_timeout CAPI3REF: Set A Busy Timeout sqlite3_cancel_auto_extension CAPI3REF: Cancel Automatic Extension Loading sqlite3_changes CAPI3REF: Count The Number Of Rows Modified sqlite3_clear_bindings CAPI3REF: Reset All Bindings On A Prepared Statement sqlite3_close CAPI3REF: Closing A Database Connection sqlite3_close_v2 sqlite3_collation_needed CAPI3REF: Collation Needed Callbacks sqlite3_collation_needed16 Ditto sqlite3_column_blob CAPI3REF: Result Values From A Query sqlite3_column_bytes Ditto sqlite3_column_bytes16 Ditto sqlite3_column_count CAPI3REF: Number Of Columns In A Result Set sqlite3_column_database_name CAPI3REF: Source Of Data In A Query Result sqlite3_column_database_name16 Ditto sqlite3_column_decltype CAPI3REF: Declared Datatype Of A Query Result sqlite3_column_decltype16 Ditto sqlite3_column_double Ditto sqlite3_column_int Ditto sqlite3_column_int64 Ditto sqlite3_column_name CAPI3REF: Column Names In A Result Set sqlite3_column_name16 Ditto sqlite3_column_origin_name Ditto sqlite3_column_origin_name16 Ditto sqlite3_column_table_name Ditto sqlite3_column_table_name16 Ditto sqlite3_column_text Ditto sqlite3_column_text16 Ditto sqlite3_column_type Ditto sqlite3_column_value Ditto sqlite3_commit_hook CAPI3REF: Commit And Rollback Notification Callbacks sqlite3_compileoption_get Ditto sqlite3_compileoption_used CAPI3REF: Run-Time Library Compilation Options Diagnostics sqlite3_complete CAPI3REF: Determine If An SQL Statement Is Complete sqlite3_complete16 Ditto sqlite3_config CAPI3REF: Configuring The SQLite Library sqlite3_context_db_handle CAPI3REF: Database Connection For Functions sqlite3_create_collation CAPI3REF: Define New Collating Sequences sqlite3_create_collation_v2 Ditto sqlite3_create_collation16 Ditto sqlite3_create_filename sqlite3_create_function CAPI3REF: Create Or Redefine SQL Functions sqlite3_create_function_v2 Ditto sqlite3_create_function16 Ditto sqlite3_create_module CAPI3REF: Register A Virtual Table Implementation sqlite3_create_module_v2 Ditto sqlite3_create_window_function Ditto sqlite3_data_count CAPI3REF: Number of columns in a result set sqlite3_database_file_object sqlite3_db_cacheflush sqlite3_db_config CAPI3REF: Configure database connections sqlite3_db_filename CAPI3REF: Return The Filename For A Database Connection sqlite3_db_handle CAPI3REF: Find The Database Handle Of A Prepared Statement sqlite3_db_mutex CAPI3REF: Retrieve the mutex for a database connection sqlite3_db_readonly CAPI3REF: Determine if a database is read-only sqlite3_db_release_memory CAPI3REF: Free Memory Used By A Database Connection sqlite3_db_status CAPI3REF: Database Connection Status sqlite3_declare_vtab CAPI3REF: Declare The Schema Of A Virtual Table sqlite3_deserialize sqlite3_drop_modules CAPI3REF: Remove Unnecessary Virtual Table Implementations sqlite3_enable_load_extension CAPI3REF: Enable Or Disable Extension Loading sqlite3_enable_shared_cache CAPI3REF: Enable Or Disable Shared Pager Cache sqlite3_errcode CAPI3REF: Error Codes And Messages sqlite3_errmsg Ditto sqlite3_errmsg16 Ditto sqlite3_errstr Ditto sqlite3_exec CAPI3REF: One-Step Query Execution Interface sqlite3_expanded_sql Ditto sqlite3_expired sqlite3_extended_errcode Ditto sqlite3_extended_result_codes CAPI3REF: Enable Or Disable Extended Result Codes sqlite3_file_control CAPI3REF: Low-Level Control Of Database Files sqlite3_filename_database sqlite3_filename_journal Ditto sqlite3_filename_wal Ditto sqlite3_finalize CAPI3REF: Destroy A Prepared Statement Object sqlite3_free Ditto sqlite3_free_filename Ditto sqlite3_free_table sqlite3_get_autocommit CAPI3REF: Test For Auto-Commit Mode sqlite3_get_auxdata CAPI3REF: Function Auxiliary Data sqlite3_get_table CAPI3REF: Convenience Routines For Running Queries sqlite3_global_recover sqlite3_hard_heap_limit64 sqlite3_initialize CAPI3REF: Initialize The SQLite Library sqlite3_interrupt CAPI3REF: Interrupt A Long-Running Query sqlite3_keyword_check Ditto sqlite3_keyword_count CAPI3REF: SQL Keyword Checking sqlite3_keyword_name Ditto sqlite3_last_insert_rowid CAPI3REF: Last Insert Rowid sqlite3_libversion Ditto sqlite3_libversion_number Ditto sqlite3_limit CAPI3REF: Run-time Limits sqlite3_load_extension CAPI3REF: Load An Extension sqlite3_log CAPI3REF: Error Logging Interface sqlite3_malloc CAPI3REF: Memory Allocation Subsystem sqlite3_malloc64 Ditto sqlite3_memory_alarm sqlite3_memory_highwater sqlite3_memory_used CAPI3REF: Memory Allocator Statistics sqlite3_mprintf CAPI3REF: Formatted String Printing Functions sqlite3_msize Ditto sqlite3_mutex_alloc CAPI3REF: Mutexes sqlite3_mutex_enter Ditto sqlite3_mutex_free Ditto sqlite3_mutex_held CAPI3REF: Mutex Verification Routines sqlite3_mutex_leave Ditto sqlite3_mutex_notheld Ditto sqlite3_mutex_try Ditto sqlite3_next_stmt sqlite3_normalized_sql sqlite3_open CAPI3REF: Opening A New Database Connection sqlite3_open_v2 Ditto sqlite3_open16 Ditto sqlite3_os_end Ditto sqlite3_os_init Ditto sqlite3_overload_function CAPI3REF: Overload A Function For A Virtual Table sqlite3_prepare CAPI3REF: Compiling An SQL Statement sqlite3_prepare_v2 Ditto sqlite3_prepare_v3 Ditto sqlite3_prepare16 Ditto sqlite3_prepare16_v2 Ditto sqlite3_prepare16_v3 Ditto sqlite3_preupdate_count Ditto sqlite3_preupdate_depth Ditto sqlite3_preupdate_hook sqlite3_preupdate_new Ditto sqlite3_preupdate_old Ditto sqlite3_profile Ditto sqlite3_progress_handler CAPI3REF: Query Progress Callbacks sqlite3_randomness CAPI3REF: Pseudo-Random Number Generator sqlite3_realloc Ditto sqlite3_realloc64 Ditto sqlite3_release_memory CAPI3REF: Attempt To Free Heap Memory sqlite3_reset CAPI3REF: Reset A Prepared Statement Object sqlite3_reset_auto_extension CAPI3REF: Reset Automatic Extension Loading sqlite3_result_blob CAPI3REF: Setting The Result Of An SQL Function sqlite3_result_blob64 Ditto sqlite3_result_double Ditto sqlite3_result_error Ditto sqlite3_result_error_code Ditto sqlite3_result_error_nomem Ditto sqlite3_result_error_toobig Ditto sqlite3_result_error16 Ditto sqlite3_result_int Ditto sqlite3_result_int64 Ditto sqlite3_result_null Ditto sqlite3_result_subtype sqlite3_result_text Ditto sqlite3_result_text16 Ditto sqlite3_result_text16be Ditto sqlite3_result_text16le Ditto sqlite3_result_text64 Ditto sqlite3_result_value Ditto sqlite3_result_zeroblob Ditto sqlite3_result_zeroblob64 Ditto sqlite3_rollback_hook Ditto sqlite3_rtree_geometry_callback Register a geometry callback named zGeom that can be used as part of an R-Tree geometry query as follows: sqlite3_rtree_query_callback sqlite3_serialize sqlite3_set_authorizer CAPI3REF: Compile-Time Authorization Callbacks sqlite3_set_auxdata Ditto sqlite3_set_last_insert_rowid CAPI3REF: Set the Last Insert Rowid value sqlite3_shutdown Ditto sqlite3_sleep CAPI3REF: Suspend Execution For A Short Time sqlite3_snapshot_cmp sqlite3_snapshot_free sqlite3_snapshot_get sqlite3_snapshot_open sqlite3_snapshot_recover sqlite3_snprintf sqlite3_soft_heap_limit CAPI3REF: Deprecated Soft Heap Limit Interface sqlite3_soft_heap_limit64 sqlite3_sourceid Ditto sqlite3_sql CAPI3REF: Retrieving Statement SQL sqlite3_status CAPI3REF: SQLite Runtime Status sqlite3_status64 Ditto sqlite3_step CAPI3REF: Evaluate An SQL Statement sqlite3_stmt_busy CAPI3REF: Determine If A Prepared Statement Has Been Reset sqlite3_stmt_isexplain sqlite3_stmt_readonly sqlite3_stmt_scanstatus sqlite3_stmt_scanstatus_reset sqlite3_stmt_status CAPI3REF: Prepared Statement Status sqlite3_str_append Ditto sqlite3_str_appendall Ditto sqlite3_str_appendchar Ditto sqlite3_str_appendf CAPI3REF: Add Content To A Dynamic String sqlite3_str_errcode CAPI3REF: Status Of A Dynamic String sqlite3_str_finish CAPI3REF: Finalize A Dynamic String sqlite3_str_length sqlite3_str_new CAPI3REF: Create A New Dynamic String Object sqlite3_str_reset Ditto sqlite3_str_value sqlite3_str_vappendf Ditto sqlite3_strglob sqlite3_stricmp CAPI3REF: String Comparison sqlite3_strlike sqlite3_strnicmp sqlite3_table_column_metadata CAPI3REF: Extract Metadata About A Column Of A Table sqlite3_test_control CAPI3REF: Testing Interface sqlite3_thread_cleanup sqlite3_threadsafe CAPI3REF: Test To See If The Library Is Threadsafe sqlite3_total_changes CAPI3REF: Total Number Of Rows Modified sqlite3_trace CAPI3REF: Tracing And Profiling Functions sqlite3_trace_v2 CAPI3REF: SQL Trace Hook sqlite3_transfer_bindings sqlite3_unlock_notify CAPI3REF: Unlock Notification sqlite3_update_hook CAPI3REF: Data Change Notification Callbacks sqlite3_uri_boolean Ditto sqlite3_uri_int64 Ditto sqlite3_uri_key Ditto sqlite3_uri_parameter sqlite3_user_data CAPI3REF: User Data For Functions sqlite3_value_blob CAPI3REF: Obtaining SQL Function Parameter Values sqlite3_value_bytes Ditto sqlite3_value_bytes16 Ditto sqlite3_value_double Ditto sqlite3_value_dup sqlite3_value_free sqlite3_value_frombind Ditto sqlite3_value_int Ditto sqlite3_value_int64 Ditto sqlite3_value_nochange Ditto sqlite3_value_numeric_type Ditto sqlite3_value_subtype sqlite3_value_text Ditto sqlite3_value_text16 Ditto sqlite3_value_text16be Ditto sqlite3_value_text16le Ditto sqlite3_value_type Ditto sqlite3_vfs_find CAPI3REF: Virtual File System Objects sqlite3_vfs_register Ditto sqlite3_vfs_unregister Ditto sqlite3_vmprintf sqlite3_vsnprintf sqlite3_vtab_collation sqlite3_vtab_config sqlite3_vtab_nochange sqlite3_vtab_on_conflict sqlite3_wal_autocheckpoint CAPI3REF: Configure an auto-checkpoint sqlite3_wal_checkpoint CAPI3REF: Checkpoint a database sqlite3_wal_checkpoint_v2 CAPI3REF: Checkpoint a database sqlite3_wal_hook CAPI3REF: Write-Ahead Log Commit Hook sqlite3_win32_set_directory CAPI3REF: Win32 Specific Interface sqlite3_win32_set_directory16 Ditto sqlite3_win32_set_directory8 Ditto sqlite3changegroup_add sqlite3changegroup_add_strm Ditto sqlite3changegroup_delete sqlite3changegroup_new sqlite3changegroup_output sqlite3changegroup_output_strm Ditto sqlite3changeset_apply sqlite3changeset_apply_strm sqlite3changeset_apply_v2 Ditto sqlite3changeset_apply_v2_strm Ditto sqlite3changeset_concat sqlite3changeset_concat_strm Ditto sqlite3changeset_conflict sqlite3changeset_finalize sqlite3changeset_fk_conflicts sqlite3changeset_invert sqlite3changeset_invert_strm Ditto sqlite3changeset_new sqlite3changeset_next sqlite3changeset_old sqlite3changeset_op sqlite3changeset_pk sqlite3changeset_start sqlite3changeset_start_strm Ditto sqlite3changeset_start_v2 Ditto sqlite3changeset_start_v2_strm Ditto sqlite3rebaser_configure sqlite3rebaser_create sqlite3rebaser_delete sqlite3rebaser_rebase sqlite3rebaser_rebase_strm Ditto sqlite3session_attach sqlite3session_changeset sqlite3session_changeset_strm Ditto sqlite3session_config sqlite3session_create sqlite3session_delete sqlite3session_diff sqlite3session_enable sqlite3session_indirect sqlite3session_isempty sqlite3session_patchset sqlite3session_patchset_strm Ditto sqlite3session_table_filter Variables Name Description FTS5_TOKEN_COLOCATED Ditto FTS5_TOKENIZE_AUX Ditto FTS5_TOKENIZE_DOCUMENT Ditto FTS5_TOKENIZE_PREFIX Ditto FTS5_TOKENIZE_QUERY Ditto SQLITE_DETERMINISTIC CAPI3REF: Function Flags SQLITE_DIRECTONLY SQLITE_INNOCUOUS SQLITE_SHM_NLOCK CAPI3REF: Maximum xShmLock index SQLITE_SOURCE_ID Ditto SQLITE_SUBTYPE SQLITE_VERSION CAPI3REF: Compile-Time Library Version Numbers SQLITE_VERSION_NUMBER Ditto SQLITE_VTAB_CONSTRAINT_SUPPORT CAPI3REF: Virtual Table Configuration Options SQLITE_VTAB_DIRECTONLY SQLITE_VTAB_INNOCUOUS sqlite3_data_directory CAPI3REF: Name Of The Folder Holding Database Files sqlite3_temp_directory CAPI3REF: Name Of The Folder Holding Temporary Files sqlite3_version CAPI3REF: Run-Time Library Version Numbers"
  },
  "phobos/etc/c/sqlite3/Structs/Fts5Context.html": {
    "href": "phobos/etc/c/sqlite3/Structs/Fts5Context.html",
    "title": "Struct - Fts5Context | Marmos Demo",
    "keywords": "Struct - Fts5Context Module etc.c.sqlite3 public struct Fts5Context { } About Interfaces to extend FTS5."
  },
  "phobos/etc/c/sqlite3/Structs/Fts5ExtensionApi.html": {
    "href": "phobos/etc/c/sqlite3/Structs/Fts5ExtensionApi.html",
    "title": "Struct - Fts5ExtensionApi | Marmos Demo",
    "keywords": "Struct - Fts5ExtensionApi Module etc.c.sqlite3 public struct Fts5ExtensionApi { // Currently always set to 3 int iVersion; // <bug: unknown> xColumnCount; // <bug: unknown> xColumnSize; // <bug: unknown> xColumnText; // <bug: unknown> xColumnTotalSize; // <bug: unknown> xGetAuxdata; // <bug: unknown> xInst; // <bug: unknown> xInstCount; // <bug: unknown> xPhraseCount; // <bug: unknown> xPhraseFirst; // <bug: unknown> xPhraseFirstColumn; // <bug: unknown> xPhraseNext; // <bug: unknown> xPhraseNextColumn; // <bug: unknown> xPhraseSize; // <bug: unknown> xQueryPhrase; // <bug: unknown> xRowCount; // <bug: unknown> xRowid; // <bug: unknown> xSetAuxdata; // <bug: unknown> xTokenize; // <bug: unknown> xUserData; } About Ditto Variables Name Description iVersion Currently always set to 3 xColumnCount xColumnSize xColumnText xColumnTotalSize xGetAuxdata xInst xInstCount xPhraseCount xPhraseFirst xPhraseFirstColumn xPhraseNext xPhraseNextColumn xPhraseSize xQueryPhrase xRowCount xRowid xSetAuxdata xTokenize xUserData"
  },
  "phobos/etc/c/sqlite3/Structs/Fts5PhraseIter.html": {
    "href": "phobos/etc/c/sqlite3/Structs/Fts5PhraseIter.html",
    "title": "Struct - Fts5PhraseIter | Marmos Demo",
    "keywords": "Struct - Fts5PhraseIter Module etc.c.sqlite3 public struct Fts5PhraseIter { // <bug: unknown> a; // <bug: unknown> b; } About Ditto Variables Name Description a b"
  },
  "phobos/etc/c/sqlite3/Structs/Fts5Tokenizer.html": {
    "href": "phobos/etc/c/sqlite3/Structs/Fts5Tokenizer.html",
    "title": "Struct - Fts5Tokenizer | Marmos Demo",
    "keywords": "Struct - Fts5Tokenizer Module etc.c.sqlite3 public struct Fts5Tokenizer { } About Ditto"
  },
  "phobos/etc/c/sqlite3/Structs/fts5_api.html": {
    "href": "phobos/etc/c/sqlite3/Structs/fts5_api.html",
    "title": "Struct - fts5_api | Marmos Demo",
    "keywords": "Struct - fts5_api Module etc.c.sqlite3 public struct fts5_api { // int iVersion; // <bug: unknown> xCreateFunction; // <bug: unknown> xCreateTokenizer; // <bug: unknown> xFindTokenizer; } About Ditto Variables Name Description iVersion xCreateFunction xCreateTokenizer xFindTokenizer"
  },
  "phobos/etc/c/sqlite3/Structs/fts5_tokenizer.html": {
    "href": "phobos/etc/c/sqlite3/Structs/fts5_tokenizer.html",
    "title": "Struct - fts5_tokenizer | Marmos Demo",
    "keywords": "Struct - fts5_tokenizer Module etc.c.sqlite3 public struct fts5_tokenizer { // <bug: unknown> xCreate; // <bug: unknown> xDelete; // <bug: unknown> xTokenize; } Variables Name Description xCreate xDelete xTokenize"
  },
  "phobos/etc/c/sqlite3/Structs/sqlite3.html": {
    "href": "phobos/etc/c/sqlite3/Structs/sqlite3.html",
    "title": "Struct - sqlite3 | Marmos Demo",
    "keywords": "Struct - sqlite3 Module etc.c.sqlite3 public struct sqlite3 { } About CAPI3REF: Database Connection Handle"
  },
  "phobos/etc/c/sqlite3/Structs/sqlite3_api_routines.html": {
    "href": "phobos/etc/c/sqlite3/Structs/sqlite3_api_routines.html",
    "title": "Struct - sqlite3_api_routines | Marmos Demo",
    "keywords": "Struct - sqlite3_api_routines Module etc.c.sqlite3 public struct sqlite3_api_routines { } About CAPI3REF: Loadable Extension Thunk"
  },
  "phobos/etc/c/sqlite3/Structs/sqlite3_backup.html": {
    "href": "phobos/etc/c/sqlite3/Structs/sqlite3_backup.html",
    "title": "Struct - sqlite3_backup | Marmos Demo",
    "keywords": "Struct - sqlite3_backup Module etc.c.sqlite3 public struct sqlite3_backup { } About CAPI3REF: Online Backup Object"
  },
  "phobos/etc/c/sqlite3/Structs/sqlite3_blob.html": {
    "href": "phobos/etc/c/sqlite3/Structs/sqlite3_blob.html",
    "title": "Struct - sqlite3_blob | Marmos Demo",
    "keywords": "Struct - sqlite3_blob Module etc.c.sqlite3 public struct sqlite3_blob { } About The interface to the virtual-table mechanism defined above (back up to a comment remarkably similar to this one) is currently considered to be experimental. The interface might change in incompatible ways. If this is a problem for you, do not use the interface at this time. When the virtual-table mechanism stabilizes, we will declare the interface fixed, support it indefinitely, and remove this comment."
  },
  "phobos/etc/c/sqlite3/Structs/sqlite3_changegroup.html": {
    "href": "phobos/etc/c/sqlite3/Structs/sqlite3_changegroup.html",
    "title": "Struct - sqlite3_changegroup | Marmos Demo",
    "keywords": "Struct - sqlite3_changegroup Module etc.c.sqlite3 public struct sqlite3_changegroup { }"
  },
  "phobos/etc/c/sqlite3/Structs/sqlite3_changeset_iter.html": {
    "href": "phobos/etc/c/sqlite3/Structs/sqlite3_changeset_iter.html",
    "title": "Struct - sqlite3_changeset_iter | Marmos Demo",
    "keywords": "Struct - sqlite3_changeset_iter Module etc.c.sqlite3 public struct sqlite3_changeset_iter { }"
  },
  "phobos/etc/c/sqlite3/Structs/sqlite3_context.html": {
    "href": "phobos/etc/c/sqlite3/Structs/sqlite3_context.html",
    "title": "Struct - sqlite3_context | Marmos Demo",
    "keywords": "Struct - sqlite3_context Module etc.c.sqlite3 public struct sqlite3_context { } About CAPI3REF: SQL Function Context Object"
  },
  "phobos/etc/c/sqlite3/Structs/sqlite3_file.html": {
    "href": "phobos/etc/c/sqlite3/Structs/sqlite3_file.html",
    "title": "Struct - sqlite3_file | Marmos Demo",
    "keywords": "Struct - sqlite3_file Module etc.c.sqlite3 public struct sqlite3_file { // <bug: unknown> pMethods; } About CAPI3REF: OS Interface Open File Handle Variables Name Description pMethods"
  },
  "phobos/etc/c/sqlite3/Structs/sqlite3_index_info.html": {
    "href": "phobos/etc/c/sqlite3/Structs/sqlite3_index_info.html",
    "title": "Struct - sqlite3_index_info | Marmos Demo",
    "keywords": "Struct - sqlite3_index_info Module etc.c.sqlite3 public struct sqlite3_index_info { // Table of WHERE clause constraints <bug: unknown> aConstraint; // <bug: unknown> aConstraintUsage; // The ORDER BY clause <bug: unknown> aOrderBy; // sqlite3_uint64 colUsed; // Estimated cost of using this index double estimatedCost; // sqlite3_int64 estimatedRows; // int idxFlags; // Number used to identify the index int idxNum; // String, possibly obtained from sqlite3_malloc <bug: unknown> idxStr; // Number of entries in aConstraint int nConstraint; // Free idxStr using sqlite3_free() if true int needToFreeIdxStr; // Number of terms in the ORDER BY clause int nOrderBy; // True if output is already ordered int orderByConsumed; } About CAPI3REF: Virtual Table Indexing Information Variables Name Description aConstraint Table of WHERE clause constraints aConstraintUsage aOrderBy The ORDER BY clause colUsed estimatedCost Estimated cost of using this index estimatedRows idxFlags idxNum Number used to identify the index idxStr String, possibly obtained from sqlite3_malloc nConstraint Number of entries in aConstraint needToFreeIdxStr Free idxStr using sqlite3_free() if true nOrderBy Number of terms in the ORDER BY clause orderByConsumed True if output is already ordered"
  },
  "phobos/etc/c/sqlite3/Structs/sqlite3_io_methods.html": {
    "href": "phobos/etc/c/sqlite3/Structs/sqlite3_io_methods.html",
    "title": "Struct - sqlite3_io_methods | Marmos Demo",
    "keywords": "Struct - sqlite3_io_methods Module etc.c.sqlite3 public struct sqlite3_io_methods { // int iVersion; // <bug: unknown> xCheckReservedLock; // <bug: unknown> xClose; // <bug: unknown> xDeviceCharacteristics; // <bug: unknown> xFetch; // <bug: unknown> xFileControl; // <bug: unknown> xFileSize; // <bug: unknown> xLock; // <bug: unknown> xRead; // <bug: unknown> xSectorSize; // <bug: unknown> xShmBarrier; // <bug: unknown> xShmLock; // <bug: unknown> xShmMap; // <bug: unknown> xShmUnmap; // <bug: unknown> xSync; // <bug: unknown> xTruncate; // <bug: unknown> xUnfetch; // <bug: unknown> xUnlock; // <bug: unknown> xWrite; } About CAPI3REF: OS Interface File Virtual Methods Object Variables Name Description iVersion xCheckReservedLock xClose xDeviceCharacteristics xFetch xFileControl xFileSize xLock xRead xSectorSize xShmBarrier xShmLock xShmMap xShmUnmap xSync xTruncate xUnfetch xUnlock xWrite"
  },
  "phobos/etc/c/sqlite3/Structs/sqlite3_mem_methods.html": {
    "href": "phobos/etc/c/sqlite3/Structs/sqlite3_mem_methods.html",
    "title": "Struct - sqlite3_mem_methods | Marmos Demo",
    "keywords": "Struct - sqlite3_mem_methods Module etc.c.sqlite3 public struct sqlite3_mem_methods { // Argument to xInit() and xShutdown() <bug: unknown> pAppData; // Free a prior allocation <bug: unknown> xFree; // Initialize the memory allocator <bug: unknown> xInit; // Memory allocation function <bug: unknown> xMalloc; // Resize an allocation <bug: unknown> xRealloc; // Round up request size to allocation size <bug: unknown> xRoundup; // Deinitialize the memory allocator <bug: unknown> xShutdown; // Return the size of an allocation <bug: unknown> xSize; } About CAPI3REF: Memory Allocation Routines Variables Name Description pAppData Argument to xInit() and xShutdown() xFree Free a prior allocation xInit Initialize the memory allocator xMalloc Memory allocation function xRealloc Resize an allocation xRoundup Round up request size to allocation size xShutdown Deinitialize the memory allocator xSize Return the size of an allocation"
  },
  "phobos/etc/c/sqlite3/Structs/sqlite3_module.html": {
    "href": "phobos/etc/c/sqlite3/Structs/sqlite3_module.html",
    "title": "Struct - sqlite3_module | Marmos Demo",
    "keywords": "Struct - sqlite3_module Module etc.c.sqlite3 public struct sqlite3_module { // int iVersion; // <bug: unknown> xBegin; // <bug: unknown> xBestIndex; // <bug: unknown> xClose; // <bug: unknown> xColumn; // <bug: unknown> xCommit; // <bug: unknown> xConnect; // <bug: unknown> xCreate; // <bug: unknown> xDestroy; // <bug: unknown> xDisconnect; // <bug: unknown> xEof; // <bug: unknown> xFilter; // <bug: unknown> xFindFunction; // <bug: unknown> xNext; // <bug: unknown> xOpen; // <bug: unknown> xRelease; // <bug: unknown> xRename; // <bug: unknown> xRollback; // <bug: unknown> xRollbackTo; // <bug: unknown> xRowid; // <bug: unknown> xSavepoint; // <bug: unknown> xShadowName; // <bug: unknown> xSync; // <bug: unknown> xUpdate; } About Ditto Variables Name Description iVersion xBegin xBestIndex xClose xColumn xCommit xConnect xCreate xDestroy xDisconnect xEof xFilter xFindFunction xNext xOpen xRelease xRename xRollback xRollbackTo xRowid xSavepoint xShadowName xSync xUpdate"
  },
  "phobos/etc/c/sqlite3/Structs/sqlite3_mutex.html": {
    "href": "phobos/etc/c/sqlite3/Structs/sqlite3_mutex.html",
    "title": "Struct - sqlite3_mutex | Marmos Demo",
    "keywords": "Struct - sqlite3_mutex Module etc.c.sqlite3 public struct sqlite3_mutex { } About CAPI3REF: Mutex Handle"
  },
  "phobos/etc/c/sqlite3/Structs/sqlite3_mutex_methods.html": {
    "href": "phobos/etc/c/sqlite3/Structs/sqlite3_mutex_methods.html",
    "title": "Struct - sqlite3_mutex_methods | Marmos Demo",
    "keywords": "Struct - sqlite3_mutex_methods Module etc.c.sqlite3 public struct sqlite3_mutex_methods { // <bug: unknown> xMutexAlloc; // <bug: unknown> xMutexEnd; // <bug: unknown> xMutexEnter; // <bug: unknown> xMutexFree; // <bug: unknown> xMutexHeld; // <bug: unknown> xMutexInit; // <bug: unknown> xMutexLeave; // <bug: unknown> xMutexNotheld; // <bug: unknown> xMutexTry; } About CAPI3REF: Mutex Methods Object Variables Name Description xMutexAlloc xMutexEnd xMutexEnter xMutexFree xMutexHeld xMutexInit xMutexLeave xMutexNotheld xMutexTry"
  },
  "phobos/etc/c/sqlite3/Structs/sqlite3_pcache.html": {
    "href": "phobos/etc/c/sqlite3/Structs/sqlite3_pcache.html",
    "title": "Struct - sqlite3_pcache | Marmos Demo",
    "keywords": "Struct - sqlite3_pcache Module etc.c.sqlite3 public struct sqlite3_pcache { } About CAPI3REF: Custom Page Cache Object"
  },
  "phobos/etc/c/sqlite3/Structs/sqlite3_pcache_methods.html": {
    "href": "phobos/etc/c/sqlite3/Structs/sqlite3_pcache_methods.html",
    "title": "Struct - sqlite3_pcache_methods | Marmos Demo",
    "keywords": "Struct - sqlite3_pcache_methods Module etc.c.sqlite3 public struct sqlite3_pcache_methods { // <bug: unknown> pArg; // <bug: unknown> xCachesize; // <bug: unknown> xCreate; // <bug: unknown> xDestroy; // <bug: unknown> xFetch; // <bug: unknown> xInit; // <bug: unknown> xPagecount; // <bug: unknown> xRekey; // <bug: unknown> xShutdown; // <bug: unknown> xTruncate; // <bug: unknown> xUnpin; } Variables Name Description pArg xCachesize xCreate xDestroy xFetch xInit xPagecount xRekey xShutdown xTruncate xUnpin"
  },
  "phobos/etc/c/sqlite3/Structs/sqlite3_pcache_methods2.html": {
    "href": "phobos/etc/c/sqlite3/Structs/sqlite3_pcache_methods2.html",
    "title": "Struct - sqlite3_pcache_methods2 | Marmos Demo",
    "keywords": "Struct - sqlite3_pcache_methods2 Module etc.c.sqlite3 public struct sqlite3_pcache_methods2 { // int iVersion; // <bug: unknown> pArg; // <bug: unknown> xCachesize; // <bug: unknown> xCreate; // <bug: unknown> xDestroy; // <bug: unknown> xFetch; // <bug: unknown> xInit; // <bug: unknown> xPagecount; // <bug: unknown> xRekey; // <bug: unknown> xShrink; // <bug: unknown> xShutdown; // <bug: unknown> xTruncate; // <bug: unknown> xUnpin; } About CAPI3REF: Application Defined Page Cache. Variables Name Description iVersion pArg xCachesize xCreate xDestroy xFetch xInit xPagecount xRekey xShrink xShutdown xTruncate xUnpin"
  },
  "phobos/etc/c/sqlite3/Structs/sqlite3_pcache_page.html": {
    "href": "phobos/etc/c/sqlite3/Structs/sqlite3_pcache_page.html",
    "title": "Struct - sqlite3_pcache_page | Marmos Demo",
    "keywords": "Struct - sqlite3_pcache_page Module etc.c.sqlite3 public struct sqlite3_pcache_page { // <bug: unknown> pBuf; // <bug: unknown> pExtra; } About CAPI3REF: Custom Page Cache Object Variables Name Description pBuf pExtra"
  },
  "phobos/etc/c/sqlite3/Structs/sqlite3_rebaser.html": {
    "href": "phobos/etc/c/sqlite3/Structs/sqlite3_rebaser.html",
    "title": "Struct - sqlite3_rebaser | Marmos Demo",
    "keywords": "Struct - sqlite3_rebaser Module etc.c.sqlite3 public struct sqlite3_rebaser { }"
  },
  "phobos/etc/c/sqlite3/Structs/sqlite3_rtree_geometry.html": {
    "href": "phobos/etc/c/sqlite3/Structs/sqlite3_rtree_geometry.html",
    "title": "Struct - sqlite3_rtree_geometry | Marmos Demo",
    "keywords": "Struct - sqlite3_rtree_geometry Module etc.c.sqlite3 public struct sqlite3_rtree_geometry { // Parameters passed to SQL geom function <bug: unknown> aParam; // Size of array aParam[] int nParam; // Copy of pContext passed to s_r_g_c() <bug: unknown> pContext; // Callback implementation user data <bug: unknown> pUser; // Called by SQLite to clean up pUser <bug: unknown> xDelUser; } About A pointer to a structure of the following type is passed as the first argument to callbacks registered using rtree_geometry_callback(). Variables Name Description aParam Parameters passed to SQL geom function nParam Size of array aParam[] pContext Copy of pContext passed to s_r_g_c() pUser Callback implementation user data xDelUser Called by SQLite to clean up pUser"
  },
  "phobos/etc/c/sqlite3/Structs/sqlite3_rtree_query_info.html": {
    "href": "phobos/etc/c/sqlite3/Structs/sqlite3_rtree_query_info.html",
    "title": "Struct - sqlite3_rtree_query_info | Marmos Demo",
    "keywords": "Struct - sqlite3_rtree_query_info Module etc.c.sqlite3 public struct sqlite3_rtree_query_info { // <bug: unknown> aCoord; // <bug: unknown> anQueue; // <bug: unknown> aParam; // <bug: unknown> apSqlParam; // int eParentWithin; // int eWithin; // int iLevel; // sqlite3_int64 iRowid; // int mxLevel; // int nCoord; // int nParam; // <bug: unknown> pContext; // <bug: unknown> pUser; // double rParentScore; // double rScore; // <bug: unknown> xDelUser; } Variables Name Description aCoord anQueue aParam apSqlParam eParentWithin eWithin iLevel iRowid mxLevel nCoord nParam pContext pUser rParentScore rScore xDelUser"
  },
  "phobos/etc/c/sqlite3/Structs/sqlite3_session.html": {
    "href": "phobos/etc/c/sqlite3/Structs/sqlite3_session.html",
    "title": "Struct - sqlite3_session | Marmos Demo",
    "keywords": "Struct - sqlite3_session Module etc.c.sqlite3 public struct sqlite3_session { }"
  },
  "phobos/etc/c/sqlite3/Structs/sqlite3_snapshot.html": {
    "href": "phobos/etc/c/sqlite3/Structs/sqlite3_snapshot.html",
    "title": "Struct - sqlite3_snapshot | Marmos Demo",
    "keywords": "Struct - sqlite3_snapshot Module etc.c.sqlite3 public struct sqlite3_snapshot { // <bug: unknown> hidden; } Variables Name Description hidden"
  },
  "phobos/etc/c/sqlite3/Structs/sqlite3_stmt.html": {
    "href": "phobos/etc/c/sqlite3/Structs/sqlite3_stmt.html",
    "title": "Struct - sqlite3_stmt | Marmos Demo",
    "keywords": "Struct - sqlite3_stmt Module etc.c.sqlite3 public struct sqlite3_stmt { } About CAPI3REF: SQL Statement Object"
  },
  "phobos/etc/c/sqlite3/Structs/sqlite3_str.html": {
    "href": "phobos/etc/c/sqlite3/Structs/sqlite3_str.html",
    "title": "Struct - sqlite3_str | Marmos Demo",
    "keywords": "Struct - sqlite3_str Module etc.c.sqlite3 public struct sqlite3_str { } About CAPI3REF: Dynamic String Object"
  },
  "phobos/etc/c/sqlite3/Structs/sqlite3_value.html": {
    "href": "phobos/etc/c/sqlite3/Structs/sqlite3_value.html",
    "title": "Struct - sqlite3_value | Marmos Demo",
    "keywords": "Struct - sqlite3_value Module etc.c.sqlite3 public struct sqlite3_value { } About CAPI3REF: Dynamically Typed Value Object"
  },
  "phobos/etc/c/sqlite3/Structs/sqlite3_vfs.html": {
    "href": "phobos/etc/c/sqlite3/Structs/sqlite3_vfs.html",
    "title": "Struct - sqlite3_vfs | Marmos Demo",
    "keywords": "Struct - sqlite3_vfs Module etc.c.sqlite3 public struct sqlite3_vfs { // Structure version number (currently 2) int iVersion; // Maximum file pathname length int mxPathname; // Pointer to application-specific data <bug: unknown> pAppData; // Next registered VFS <bug: unknown> pNext; // Size of subclassed sqlite3_file int szOsFile; // <bug: unknown> xAccess; // <bug: unknown> xCurrentTime; // <bug: unknown> xCurrentTimeInt64; // <bug: unknown> xDelete; // <bug: unknown> xDlClose; // <bug: unknown> xDlError; // <bug: unknown> xDlOpen; // <bug: unknown> xDlSym; // <bug: unknown> xFullPathname; // <bug: unknown> xGetLastError; // <bug: unknown> xGetSystemCall; // <bug: unknown> xNextSystemCall; // <bug: unknown> xOpen; // <bug: unknown> xRandomness; // <bug: unknown> xSetSystemCall; // <bug: unknown> xSleep; // Name of this virtual file system <bug: unknown> zName; } Variables Name Description iVersion Structure version number (currently 2) mxPathname Maximum file pathname length pAppData Pointer to application-specific data pNext Next registered VFS szOsFile Size of subclassed sqlite3_file xAccess xCurrentTime xCurrentTimeInt64 xDelete xDlClose xDlError xDlOpen xDlSym xFullPathname xGetLastError xGetSystemCall xNextSystemCall xOpen xRandomness xSetSystemCall xSleep zName Name of this virtual file system"
  },
  "phobos/etc/c/sqlite3/Structs/sqlite3_vtab.html": {
    "href": "phobos/etc/c/sqlite3/Structs/sqlite3_vtab.html",
    "title": "Struct - sqlite3_vtab | Marmos Demo",
    "keywords": "Struct - sqlite3_vtab Module etc.c.sqlite3 public struct sqlite3_vtab { // NO LONGER USED int nRef; // The module for this virtual table <bug: unknown> pModule; // Error message from sqlite3_mprintf() <bug: unknown> zErrMsg; } About CAPI3REF: Virtual Table Instance Object Variables Name Description nRef NO LONGER USED pModule The module for this virtual table zErrMsg Error message from sqlite3_mprintf()"
  },
  "phobos/etc/c/sqlite3/Structs/sqlite3_vtab_cursor.html": {
    "href": "phobos/etc/c/sqlite3/Structs/sqlite3_vtab_cursor.html",
    "title": "Struct - sqlite3_vtab_cursor | Marmos Demo",
    "keywords": "Struct - sqlite3_vtab_cursor Module etc.c.sqlite3 public struct sqlite3_vtab_cursor { // Virtual table of this cursor <bug: unknown> pVtab; } About CAPI3REF: Virtual Table Cursor Object Variables Name Description pVtab Virtual table of this cursor"
  },
  "phobos/etc/c/zlib/Functions/adler32.html": {
    "href": "phobos/etc/c/zlib/Functions/adler32.html",
    "title": "Overloads for - adler32 | Marmos Demo",
    "keywords": "Overloads for - adler32 Module etc.c.zlib adler32(adler, buf, len) uint adler32( uint adler, <bug: unknown> buf, uint len )"
  },
  "phobos/etc/c/zlib/Functions/adler32_combine.html": {
    "href": "phobos/etc/c/zlib/Functions/adler32_combine.html",
    "title": "Overloads for - adler32_combine | Marmos Demo",
    "keywords": "Overloads for - adler32_combine Module etc.c.zlib adler32_combine(adler1, adler2, len2) uint adler32_combine( uint adler1, uint adler2, z_off_t len2 )"
  },
  "phobos/etc/c/zlib/Functions/adler32_z.html": {
    "href": "phobos/etc/c/zlib/Functions/adler32_z.html",
    "title": "Overloads for - adler32_z | Marmos Demo",
    "keywords": "Overloads for - adler32_z Module etc.c.zlib adler32_z(adler, buf, len) uint adler32_z( uint adler, <bug: unknown> buf, z_size_t len )"
  },
  "phobos/etc/c/zlib/Functions/compress.html": {
    "href": "phobos/etc/c/zlib/Functions/compress.html",
    "title": "Overloads for - compress | Marmos Demo",
    "keywords": "Overloads for - compress Module etc.c.zlib compress(dest, destLen, source, sourceLen) int compress( <bug: unknown> dest, <bug: unknown> destLen, <bug: unknown> source, size_t sourceLen )"
  },
  "phobos/etc/c/zlib/Functions/compress2.html": {
    "href": "phobos/etc/c/zlib/Functions/compress2.html",
    "title": "Overloads for - compress2 | Marmos Demo",
    "keywords": "Overloads for - compress2 Module etc.c.zlib compress2(dest, destLen, source, sourceLen, level) int compress2( <bug: unknown> dest, <bug: unknown> destLen, <bug: unknown> source, size_t sourceLen, int level )"
  },
  "phobos/etc/c/zlib/Functions/compressBound.html": {
    "href": "phobos/etc/c/zlib/Functions/compressBound.html",
    "title": "Overloads for - compressBound | Marmos Demo",
    "keywords": "Overloads for - compressBound Module etc.c.zlib compressBound(sourceLen) size_t compressBound( size_t sourceLen )"
  },
  "phobos/etc/c/zlib/Functions/crc32.html": {
    "href": "phobos/etc/c/zlib/Functions/crc32.html",
    "title": "Overloads for - crc32 | Marmos Demo",
    "keywords": "Overloads for - crc32 Module etc.c.zlib crc32(crc, buf, len) uint crc32( uint crc, <bug: unknown> buf, uint len )"
  },
  "phobos/etc/c/zlib/Functions/crc32_combine.html": {
    "href": "phobos/etc/c/zlib/Functions/crc32_combine.html",
    "title": "Overloads for - crc32_combine | Marmos Demo",
    "keywords": "Overloads for - crc32_combine Module etc.c.zlib crc32_combine(crc1, crc2, len2) uint crc32_combine( uint crc1, uint crc2, z_off_t len2 )"
  },
  "phobos/etc/c/zlib/Functions/crc32_combine_gen.html": {
    "href": "phobos/etc/c/zlib/Functions/crc32_combine_gen.html",
    "title": "Overloads for - crc32_combine_gen | Marmos Demo",
    "keywords": "Overloads for - crc32_combine_gen Module etc.c.zlib crc32_combine_gen(len2) uint crc32_combine_gen( z_off_t len2 )"
  },
  "phobos/etc/c/zlib/Functions/crc32_combine_op.html": {
    "href": "phobos/etc/c/zlib/Functions/crc32_combine_op.html",
    "title": "Overloads for - crc32_combine_op | Marmos Demo",
    "keywords": "Overloads for - crc32_combine_op Module etc.c.zlib crc32_combine_op(crc1, crc2, op) uint crc32_combine_op( uint crc1, uint crc2, uint op )"
  },
  "phobos/etc/c/zlib/Functions/crc32_z.html": {
    "href": "phobos/etc/c/zlib/Functions/crc32_z.html",
    "title": "Overloads for - crc32_z | Marmos Demo",
    "keywords": "Overloads for - crc32_z Module etc.c.zlib crc32_z(crc, buf, len) uint crc32_z( uint crc, <bug: unknown> buf, z_size_t len )"
  },
  "phobos/etc/c/zlib/Functions/deflate.html": {
    "href": "phobos/etc/c/zlib/Functions/deflate.html",
    "title": "Overloads for - deflate | Marmos Demo",
    "keywords": "Overloads for - deflate Module etc.c.zlib deflate(strm, flush) int deflate( z_streamp strm, int flush )"
  },
  "phobos/etc/c/zlib/Functions/deflateBound.html": {
    "href": "phobos/etc/c/zlib/Functions/deflateBound.html",
    "title": "Overloads for - deflateBound | Marmos Demo",
    "keywords": "Overloads for - deflateBound Module etc.c.zlib deflateBound(strm, sourceLen) size_t deflateBound( z_streamp strm, size_t sourceLen )"
  },
  "phobos/etc/c/zlib/Functions/deflateCopy.html": {
    "href": "phobos/etc/c/zlib/Functions/deflateCopy.html",
    "title": "Overloads for - deflateCopy | Marmos Demo",
    "keywords": "Overloads for - deflateCopy Module etc.c.zlib deflateCopy(dest, source) int deflateCopy( z_streamp dest, z_streamp source )"
  },
  "phobos/etc/c/zlib/Functions/deflateEnd.html": {
    "href": "phobos/etc/c/zlib/Functions/deflateEnd.html",
    "title": "Overloads for - deflateEnd | Marmos Demo",
    "keywords": "Overloads for - deflateEnd Module etc.c.zlib deflateEnd(strm) int deflateEnd( z_streamp strm )"
  },
  "phobos/etc/c/zlib/Functions/deflateGetDictionary.html": {
    "href": "phobos/etc/c/zlib/Functions/deflateGetDictionary.html",
    "title": "Overloads for - deflateGetDictionary | Marmos Demo",
    "keywords": "Overloads for - deflateGetDictionary Module etc.c.zlib deflateGetDictionary(strm, dictionary, dictLength) int deflateGetDictionary( z_streamp strm, <bug: unknown> dictionary, uint dictLength )"
  },
  "phobos/etc/c/zlib/Functions/deflateInit.html": {
    "href": "phobos/etc/c/zlib/Functions/deflateInit.html",
    "title": "Overloads for - deflateInit | Marmos Demo",
    "keywords": "Overloads for - deflateInit Module etc.c.zlib deflateInit(strm, level) int deflateInit( z_streamp strm, int level )"
  },
  "phobos/etc/c/zlib/Functions/deflateInit2.html": {
    "href": "phobos/etc/c/zlib/Functions/deflateInit2.html",
    "title": "Overloads for - deflateInit2 | Marmos Demo",
    "keywords": "Overloads for - deflateInit2 Module etc.c.zlib deflateInit2(strm, level, method, windowBits, memLevel, strategy) int deflateInit2( z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy )"
  },
  "phobos/etc/c/zlib/Functions/deflateInit2_.html": {
    "href": "phobos/etc/c/zlib/Functions/deflateInit2_.html",
    "title": "Overloads for - deflateInit2_ | Marmos Demo",
    "keywords": "Overloads for - deflateInit2_ Module etc.c.zlib deflateInit2_(strm, level, method, windowBits, memLevel, strategy, versionx, stream_size) int deflateInit2_( z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, <bug: unknown> versionx, int stream_size )"
  },
  "phobos/etc/c/zlib/Functions/deflateInit_.html": {
    "href": "phobos/etc/c/zlib/Functions/deflateInit_.html",
    "title": "Overloads for - deflateInit_ | Marmos Demo",
    "keywords": "Overloads for - deflateInit_ Module etc.c.zlib deflateInit_(strm, level, versionx, stream_size) int deflateInit_( z_streamp strm, int level, <bug: unknown> versionx, int stream_size )"
  },
  "phobos/etc/c/zlib/Functions/deflateParams.html": {
    "href": "phobos/etc/c/zlib/Functions/deflateParams.html",
    "title": "Overloads for - deflateParams | Marmos Demo",
    "keywords": "Overloads for - deflateParams Module etc.c.zlib deflateParams(strm, level, strategy) int deflateParams( z_streamp strm, int level, int strategy )"
  },
  "phobos/etc/c/zlib/Functions/deflatePending.html": {
    "href": "phobos/etc/c/zlib/Functions/deflatePending.html",
    "title": "Overloads for - deflatePending | Marmos Demo",
    "keywords": "Overloads for - deflatePending Module etc.c.zlib deflatePending(strm, pending, bits) int deflatePending( z_streamp strm, <bug: unknown> pending, <bug: unknown> bits )"
  },
  "phobos/etc/c/zlib/Functions/deflatePrime.html": {
    "href": "phobos/etc/c/zlib/Functions/deflatePrime.html",
    "title": "Overloads for - deflatePrime | Marmos Demo",
    "keywords": "Overloads for - deflatePrime Module etc.c.zlib deflatePrime(strm, bits, value) int deflatePrime( z_streamp strm, int bits, int value )"
  },
  "phobos/etc/c/zlib/Functions/deflateReset.html": {
    "href": "phobos/etc/c/zlib/Functions/deflateReset.html",
    "title": "Overloads for - deflateReset | Marmos Demo",
    "keywords": "Overloads for - deflateReset Module etc.c.zlib deflateReset(strm) int deflateReset( z_streamp strm )"
  },
  "phobos/etc/c/zlib/Functions/deflateSetDictionary.html": {
    "href": "phobos/etc/c/zlib/Functions/deflateSetDictionary.html",
    "title": "Overloads for - deflateSetDictionary | Marmos Demo",
    "keywords": "Overloads for - deflateSetDictionary Module etc.c.zlib deflateSetDictionary(strm, dictionary, dictLength) int deflateSetDictionary( z_streamp strm, <bug: unknown> dictionary, uint dictLength )"
  },
  "phobos/etc/c/zlib/Functions/deflateSetHeader.html": {
    "href": "phobos/etc/c/zlib/Functions/deflateSetHeader.html",
    "title": "Overloads for - deflateSetHeader | Marmos Demo",
    "keywords": "Overloads for - deflateSetHeader Module etc.c.zlib deflateSetHeader(strm, head) int deflateSetHeader( z_streamp strm, gz_headerp head )"
  },
  "phobos/etc/c/zlib/Functions/deflateTune.html": {
    "href": "phobos/etc/c/zlib/Functions/deflateTune.html",
    "title": "Overloads for - deflateTune | Marmos Demo",
    "keywords": "Overloads for - deflateTune Module etc.c.zlib deflateTune(strm, good_length, max_lazy, nice_length, max_chain) int deflateTune( z_streamp strm, int good_length, int max_lazy, int nice_length, int max_chain )"
  },
  "phobos/etc/c/zlib/Functions/get_crc_table.html": {
    "href": "phobos/etc/c/zlib/Functions/get_crc_table.html",
    "title": "Overloads for - get_crc_table | Marmos Demo",
    "keywords": "Overloads for - get_crc_table Module etc.c.zlib get_crc_table() <bug: unknown> get_crc_table( )"
  },
  "phobos/etc/c/zlib/Functions/gzbuffer.html": {
    "href": "phobos/etc/c/zlib/Functions/gzbuffer.html",
    "title": "Overloads for - gzbuffer | Marmos Demo",
    "keywords": "Overloads for - gzbuffer Module etc.c.zlib gzbuffer(file, size) int gzbuffer( gzFile file, uint size )"
  },
  "phobos/etc/c/zlib/Functions/gzclearerr.html": {
    "href": "phobos/etc/c/zlib/Functions/gzclearerr.html",
    "title": "Overloads for - gzclearerr | Marmos Demo",
    "keywords": "Overloads for - gzclearerr Module etc.c.zlib gzclearerr(file) void gzclearerr( gzFile file )"
  },
  "phobos/etc/c/zlib/Functions/gzclose.html": {
    "href": "phobos/etc/c/zlib/Functions/gzclose.html",
    "title": "Overloads for - gzclose | Marmos Demo",
    "keywords": "Overloads for - gzclose Module etc.c.zlib gzclose(file) int gzclose( gzFile file )"
  },
  "phobos/etc/c/zlib/Functions/gzclose_r.html": {
    "href": "phobos/etc/c/zlib/Functions/gzclose_r.html",
    "title": "Overloads for - gzclose_r | Marmos Demo",
    "keywords": "Overloads for - gzclose_r Module etc.c.zlib gzclose_r(file) int gzclose_r( gzFile file )"
  },
  "phobos/etc/c/zlib/Functions/gzclose_w.html": {
    "href": "phobos/etc/c/zlib/Functions/gzclose_w.html",
    "title": "Overloads for - gzclose_w | Marmos Demo",
    "keywords": "Overloads for - gzclose_w Module etc.c.zlib gzclose_w(file) int gzclose_w( gzFile file )"
  },
  "phobos/etc/c/zlib/Functions/gzdirect.html": {
    "href": "phobos/etc/c/zlib/Functions/gzdirect.html",
    "title": "Overloads for - gzdirect | Marmos Demo",
    "keywords": "Overloads for - gzdirect Module etc.c.zlib gzdirect(file) int gzdirect( gzFile file )"
  },
  "phobos/etc/c/zlib/Functions/gzdopen.html": {
    "href": "phobos/etc/c/zlib/Functions/gzdopen.html",
    "title": "Overloads for - gzdopen | Marmos Demo",
    "keywords": "Overloads for - gzdopen Module etc.c.zlib gzdopen(fd, mode) gzFile gzdopen( int fd, <bug: unknown> mode )"
  },
  "phobos/etc/c/zlib/Functions/gzeof.html": {
    "href": "phobos/etc/c/zlib/Functions/gzeof.html",
    "title": "Overloads for - gzeof | Marmos Demo",
    "keywords": "Overloads for - gzeof Module etc.c.zlib gzeof(file) int gzeof( gzFile file )"
  },
  "phobos/etc/c/zlib/Functions/gzerror.html": {
    "href": "phobos/etc/c/zlib/Functions/gzerror.html",
    "title": "Overloads for - gzerror | Marmos Demo",
    "keywords": "Overloads for - gzerror Module etc.c.zlib gzerror(file, errnum) <bug: unknown> gzerror( gzFile file, <bug: unknown> errnum )"
  },
  "phobos/etc/c/zlib/Functions/gzflush.html": {
    "href": "phobos/etc/c/zlib/Functions/gzflush.html",
    "title": "Overloads for - gzflush | Marmos Demo",
    "keywords": "Overloads for - gzflush Module etc.c.zlib gzflush(file, flush) int gzflush( gzFile file, int flush )"
  },
  "phobos/etc/c/zlib/Functions/gzfread.html": {
    "href": "phobos/etc/c/zlib/Functions/gzfread.html",
    "title": "Overloads for - gzfread | Marmos Demo",
    "keywords": "Overloads for - gzfread Module etc.c.zlib gzfread(buf, size, nitems, file) z_size_t gzfread( <bug: unknown> buf, z_size_t size, z_size_t nitems, gzFile file )"
  },
  "phobos/etc/c/zlib/Functions/gzfwrite.html": {
    "href": "phobos/etc/c/zlib/Functions/gzfwrite.html",
    "title": "Overloads for - gzfwrite | Marmos Demo",
    "keywords": "Overloads for - gzfwrite Module etc.c.zlib gzfwrite(buf, size, nitems, file) z_size_t gzfwrite( <bug: unknown> buf, z_size_t size, z_size_t nitems, gzFile file )"
  },
  "phobos/etc/c/zlib/Functions/gzgetc.html": {
    "href": "phobos/etc/c/zlib/Functions/gzgetc.html",
    "title": "Overloads for - gzgetc | Marmos Demo",
    "keywords": "Overloads for - gzgetc Module etc.c.zlib gzgetc(file) int gzgetc( gzFile file )"
  },
  "phobos/etc/c/zlib/Functions/gzgets.html": {
    "href": "phobos/etc/c/zlib/Functions/gzgets.html",
    "title": "Overloads for - gzgets | Marmos Demo",
    "keywords": "Overloads for - gzgets Module etc.c.zlib gzgets(file, buf, len) <bug: unknown> gzgets( gzFile file, <bug: unknown> buf, int len )"
  },
  "phobos/etc/c/zlib/Functions/gzoffset.html": {
    "href": "phobos/etc/c/zlib/Functions/gzoffset.html",
    "title": "Overloads for - gzoffset | Marmos Demo",
    "keywords": "Overloads for - gzoffset Module etc.c.zlib gzoffset(file) z_off_t gzoffset( gzFile file )"
  },
  "phobos/etc/c/zlib/Functions/gzopen.html": {
    "href": "phobos/etc/c/zlib/Functions/gzopen.html",
    "title": "Overloads for - gzopen | Marmos Demo",
    "keywords": "Overloads for - gzopen Module etc.c.zlib gzopen(path, mode) gzFile gzopen( <bug: unknown> path, <bug: unknown> mode )"
  },
  "phobos/etc/c/zlib/Functions/gzprintf.html": {
    "href": "phobos/etc/c/zlib/Functions/gzprintf.html",
    "title": "Overloads for - gzprintf | Marmos Demo",
    "keywords": "Overloads for - gzprintf Module etc.c.zlib gzprintf(file, format) int gzprintf( gzFile file, <bug: unknown> format )"
  },
  "phobos/etc/c/zlib/Functions/gzputc.html": {
    "href": "phobos/etc/c/zlib/Functions/gzputc.html",
    "title": "Overloads for - gzputc | Marmos Demo",
    "keywords": "Overloads for - gzputc Module etc.c.zlib gzputc(file, c) int gzputc( gzFile file, int c )"
  },
  "phobos/etc/c/zlib/Functions/gzputs.html": {
    "href": "phobos/etc/c/zlib/Functions/gzputs.html",
    "title": "Overloads for - gzputs | Marmos Demo",
    "keywords": "Overloads for - gzputs Module etc.c.zlib gzputs(file, s) int gzputs( gzFile file, <bug: unknown> s )"
  },
  "phobos/etc/c/zlib/Functions/gzread.html": {
    "href": "phobos/etc/c/zlib/Functions/gzread.html",
    "title": "Overloads for - gzread | Marmos Demo",
    "keywords": "Overloads for - gzread Module etc.c.zlib gzread(file, buf, len) int gzread( gzFile file, <bug: unknown> buf, uint len )"
  },
  "phobos/etc/c/zlib/Functions/gzrewind.html": {
    "href": "phobos/etc/c/zlib/Functions/gzrewind.html",
    "title": "Overloads for - gzrewind | Marmos Demo",
    "keywords": "Overloads for - gzrewind Module etc.c.zlib gzrewind(file) int gzrewind( gzFile file )"
  },
  "phobos/etc/c/zlib/Functions/gzseek.html": {
    "href": "phobos/etc/c/zlib/Functions/gzseek.html",
    "title": "Overloads for - gzseek | Marmos Demo",
    "keywords": "Overloads for - gzseek Module etc.c.zlib gzseek(file, offset, whence) z_off_t gzseek( gzFile file, z_off_t offset, int whence )"
  },
  "phobos/etc/c/zlib/Functions/gzsetparams.html": {
    "href": "phobos/etc/c/zlib/Functions/gzsetparams.html",
    "title": "Overloads for - gzsetparams | Marmos Demo",
    "keywords": "Overloads for - gzsetparams Module etc.c.zlib gzsetparams(file, level, strategy) int gzsetparams( gzFile file, int level, int strategy )"
  },
  "phobos/etc/c/zlib/Functions/gztell.html": {
    "href": "phobos/etc/c/zlib/Functions/gztell.html",
    "title": "Overloads for - gztell | Marmos Demo",
    "keywords": "Overloads for - gztell Module etc.c.zlib gztell(file) z_off_t gztell( gzFile file )"
  },
  "phobos/etc/c/zlib/Functions/gzungetc.html": {
    "href": "phobos/etc/c/zlib/Functions/gzungetc.html",
    "title": "Overloads for - gzungetc | Marmos Demo",
    "keywords": "Overloads for - gzungetc Module etc.c.zlib gzungetc(c, file) int gzungetc( int c, gzFile file )"
  },
  "phobos/etc/c/zlib/Functions/gzwrite.html": {
    "href": "phobos/etc/c/zlib/Functions/gzwrite.html",
    "title": "Overloads for - gzwrite | Marmos Demo",
    "keywords": "Overloads for - gzwrite Module etc.c.zlib gzwrite(file, buf, len) int gzwrite( gzFile file, <bug: unknown> buf, uint len )"
  },
  "phobos/etc/c/zlib/Functions/inflate.html": {
    "href": "phobos/etc/c/zlib/Functions/inflate.html",
    "title": "Overloads for - inflate | Marmos Demo",
    "keywords": "Overloads for - inflate Module etc.c.zlib inflate(strm, flush) int inflate( z_streamp strm, int flush )"
  },
  "phobos/etc/c/zlib/Functions/inflateBack.html": {
    "href": "phobos/etc/c/zlib/Functions/inflateBack.html",
    "title": "Overloads for - inflateBack | Marmos Demo",
    "keywords": "Overloads for - inflateBack Module etc.c.zlib inflateBack(strm, f_in, in_desc, f_out, out_desc) int inflateBack( <bug: unknown> strm, in_func f_in, <bug: unknown> in_desc, out_func f_out, <bug: unknown> out_desc )"
  },
  "phobos/etc/c/zlib/Functions/inflateBackEnd.html": {
    "href": "phobos/etc/c/zlib/Functions/inflateBackEnd.html",
    "title": "Overloads for - inflateBackEnd | Marmos Demo",
    "keywords": "Overloads for - inflateBackEnd Module etc.c.zlib inflateBackEnd(strm) int inflateBackEnd( <bug: unknown> strm )"
  },
  "phobos/etc/c/zlib/Functions/inflateBackInit.html": {
    "href": "phobos/etc/c/zlib/Functions/inflateBackInit.html",
    "title": "Overloads for - inflateBackInit | Marmos Demo",
    "keywords": "Overloads for - inflateBackInit Module etc.c.zlib inflateBackInit(strm, windowBits, window) int inflateBackInit( <bug: unknown> strm, int windowBits, <bug: unknown> window )"
  },
  "phobos/etc/c/zlib/Functions/inflateBackInit_.html": {
    "href": "phobos/etc/c/zlib/Functions/inflateBackInit_.html",
    "title": "Overloads for - inflateBackInit_ | Marmos Demo",
    "keywords": "Overloads for - inflateBackInit_ Module etc.c.zlib inflateBackInit_(strm, windowBits, window, z_version, stream_size) int inflateBackInit_( <bug: unknown> strm, int windowBits, <bug: unknown> window, <bug: unknown> z_version, int stream_size )"
  },
  "phobos/etc/c/zlib/Functions/inflateCopy.html": {
    "href": "phobos/etc/c/zlib/Functions/inflateCopy.html",
    "title": "Overloads for - inflateCopy | Marmos Demo",
    "keywords": "Overloads for - inflateCopy Module etc.c.zlib inflateCopy(dest, source) int inflateCopy( z_streamp dest, z_streamp source )"
  },
  "phobos/etc/c/zlib/Functions/inflateEnd.html": {
    "href": "phobos/etc/c/zlib/Functions/inflateEnd.html",
    "title": "Overloads for - inflateEnd | Marmos Demo",
    "keywords": "Overloads for - inflateEnd Module etc.c.zlib inflateEnd(strm) int inflateEnd( z_streamp strm )"
  },
  "phobos/etc/c/zlib/Functions/inflateGetDictionary.html": {
    "href": "phobos/etc/c/zlib/Functions/inflateGetDictionary.html",
    "title": "Overloads for - inflateGetDictionary | Marmos Demo",
    "keywords": "Overloads for - inflateGetDictionary Module etc.c.zlib inflateGetDictionary(strm, dictionary, dictLength) int inflateGetDictionary( z_streamp strm, <bug: unknown> dictionary, <bug: unknown> dictLength )"
  },
  "phobos/etc/c/zlib/Functions/inflateGetHeader.html": {
    "href": "phobos/etc/c/zlib/Functions/inflateGetHeader.html",
    "title": "Overloads for - inflateGetHeader | Marmos Demo",
    "keywords": "Overloads for - inflateGetHeader Module etc.c.zlib inflateGetHeader(strm, head) int inflateGetHeader( z_streamp strm, gz_headerp head )"
  },
  "phobos/etc/c/zlib/Functions/inflateInit.html": {
    "href": "phobos/etc/c/zlib/Functions/inflateInit.html",
    "title": "Overloads for - inflateInit | Marmos Demo",
    "keywords": "Overloads for - inflateInit Module etc.c.zlib inflateInit(strm) int inflateInit( z_streamp strm )"
  },
  "phobos/etc/c/zlib/Functions/inflateInit2.html": {
    "href": "phobos/etc/c/zlib/Functions/inflateInit2.html",
    "title": "Overloads for - inflateInit2 | Marmos Demo",
    "keywords": "Overloads for - inflateInit2 Module etc.c.zlib inflateInit2(strm, windowBits) int inflateInit2( z_streamp strm, int windowBits )"
  },
  "phobos/etc/c/zlib/Functions/inflateInit2_.html": {
    "href": "phobos/etc/c/zlib/Functions/inflateInit2_.html",
    "title": "Overloads for - inflateInit2_ | Marmos Demo",
    "keywords": "Overloads for - inflateInit2_ Module etc.c.zlib inflateInit2_(strm, windowBits, versionx, stream_size) int inflateInit2_( z_streamp strm, int windowBits, <bug: unknown> versionx, int stream_size )"
  },
  "phobos/etc/c/zlib/Functions/inflateInit_.html": {
    "href": "phobos/etc/c/zlib/Functions/inflateInit_.html",
    "title": "Overloads for - inflateInit_ | Marmos Demo",
    "keywords": "Overloads for - inflateInit_ Module etc.c.zlib inflateInit_(strm, versionx, stream_size) int inflateInit_( z_streamp strm, <bug: unknown> versionx, int stream_size )"
  },
  "phobos/etc/c/zlib/Functions/inflateMark.html": {
    "href": "phobos/etc/c/zlib/Functions/inflateMark.html",
    "title": "Overloads for - inflateMark | Marmos Demo",
    "keywords": "Overloads for - inflateMark Module etc.c.zlib inflateMark(strm) c_long inflateMark( z_streamp strm )"
  },
  "phobos/etc/c/zlib/Functions/inflatePrime.html": {
    "href": "phobos/etc/c/zlib/Functions/inflatePrime.html",
    "title": "Overloads for - inflatePrime | Marmos Demo",
    "keywords": "Overloads for - inflatePrime Module etc.c.zlib inflatePrime(strm, bits, value) int inflatePrime( z_streamp strm, int bits, int value )"
  },
  "phobos/etc/c/zlib/Functions/inflateReset.html": {
    "href": "phobos/etc/c/zlib/Functions/inflateReset.html",
    "title": "Overloads for - inflateReset | Marmos Demo",
    "keywords": "Overloads for - inflateReset Module etc.c.zlib inflateReset(strm) int inflateReset( z_streamp strm )"
  },
  "phobos/etc/c/zlib/Functions/inflateReset2.html": {
    "href": "phobos/etc/c/zlib/Functions/inflateReset2.html",
    "title": "Overloads for - inflateReset2 | Marmos Demo",
    "keywords": "Overloads for - inflateReset2 Module etc.c.zlib inflateReset2(strm, windowBits) int inflateReset2( z_streamp strm, int windowBits )"
  },
  "phobos/etc/c/zlib/Functions/inflateSetDictionary.html": {
    "href": "phobos/etc/c/zlib/Functions/inflateSetDictionary.html",
    "title": "Overloads for - inflateSetDictionary | Marmos Demo",
    "keywords": "Overloads for - inflateSetDictionary Module etc.c.zlib inflateSetDictionary(strm, dictionary, dictLength) int inflateSetDictionary( z_streamp strm, <bug: unknown> dictionary, uint dictLength )"
  },
  "phobos/etc/c/zlib/Functions/inflateSync.html": {
    "href": "phobos/etc/c/zlib/Functions/inflateSync.html",
    "title": "Overloads for - inflateSync | Marmos Demo",
    "keywords": "Overloads for - inflateSync Module etc.c.zlib inflateSync(strm) int inflateSync( z_streamp strm )"
  },
  "phobos/etc/c/zlib/Functions/inflateSyncPoint.html": {
    "href": "phobos/etc/c/zlib/Functions/inflateSyncPoint.html",
    "title": "Overloads for - inflateSyncPoint | Marmos Demo",
    "keywords": "Overloads for - inflateSyncPoint Module etc.c.zlib inflateSyncPoint(z) int inflateSyncPoint( z_streamp z )"
  },
  "phobos/etc/c/zlib/Functions/uncompress.html": {
    "href": "phobos/etc/c/zlib/Functions/uncompress.html",
    "title": "Overloads for - uncompress | Marmos Demo",
    "keywords": "Overloads for - uncompress Module etc.c.zlib uncompress(dest, destLen, source, sourceLen) int uncompress( <bug: unknown> dest, <bug: unknown> destLen, <bug: unknown> source, size_t sourceLen )"
  },
  "phobos/etc/c/zlib/Functions/uncompress2.html": {
    "href": "phobos/etc/c/zlib/Functions/uncompress2.html",
    "title": "Overloads for - uncompress2 | Marmos Demo",
    "keywords": "Overloads for - uncompress2 Module etc.c.zlib uncompress2(dest, destLen, source, sourceLen) int uncompress2( <bug: unknown> dest, <bug: unknown> destLen, <bug: unknown> source, <bug: unknown> sourceLen )"
  },
  "phobos/etc/c/zlib/Functions/zError.html": {
    "href": "phobos/etc/c/zlib/Functions/zError.html",
    "title": "Overloads for - zError | Marmos Demo",
    "keywords": "Overloads for - zError Module etc.c.zlib zError(err) <bug: unknown> zError( int err )"
  },
  "phobos/etc/c/zlib/Functions/zlibCompileFlags.html": {
    "href": "phobos/etc/c/zlib/Functions/zlibCompileFlags.html",
    "title": "Overloads for - zlibCompileFlags | Marmos Demo",
    "keywords": "Overloads for - zlibCompileFlags Module etc.c.zlib zlibCompileFlags() uint zlibCompileFlags( )"
  },
  "phobos/etc/c/zlib/Functions/zlibVersion.html": {
    "href": "phobos/etc/c/zlib/Functions/zlibVersion.html",
    "title": "Overloads for - zlibVersion | Marmos Demo",
    "keywords": "Overloads for - zlibVersion Module etc.c.zlib zlibVersion() <bug: unknown> zlibVersion( )"
  },
  "phobos/etc/c/zlib/Overview.html": {
    "href": "phobos/etc/c/zlib/Overview.html",
    "title": "Module - etc.c.zlib | Marmos Demo",
    "keywords": "Module - etc.c.zlib Aliases Name Description alloc_func free_func gz_headerp gzFile in_func out_func z_off_t z_size_t z_streamp Structs Name Description gz_header z_stream Functions Name Description adler32 adler32_combine adler32_z compress compress2 compressBound crc32 crc32_combine crc32_combine_gen crc32_combine_op crc32_z deflate deflateBound deflateCopy deflateEnd deflateGetDictionary deflateInit deflateInit_ deflateInit2 deflateInit2_ deflateParams deflatePending deflatePrime deflateReset deflateSetDictionary deflateSetHeader deflateTune get_crc_table gzbuffer gzclearerr gzclose gzclose_r gzclose_w gzdirect gzdopen gzeof gzerror gzflush gzfread gzfwrite gzgetc gzgets gzoffset gzopen gzprintf gzputc gzputs gzread gzrewind gzseek gzsetparams gztell gzungetc gzwrite inflate inflateBack inflateBackEnd inflateBackInit inflateBackInit_ inflateCopy inflateEnd inflateGetDictionary inflateGetHeader inflateInit inflateInit_ inflateInit2 inflateInit2_ inflateMark inflatePrime inflateReset inflateReset2 inflateSetDictionary inflateSync inflateSyncPoint uncompress uncompress2 zError zlibCompileFlags zlibVersion Variables Name Description Z_NULL for initializing zalloc, zfree, opaque (extern(D) for mangling) ZLIB_VERNUM ZLIB_VERSION"
  },
  "phobos/etc/c/zlib/Structs/gz_header.html": {
    "href": "phobos/etc/c/zlib/Structs/gz_header.html",
    "title": "Struct - gz_header | Marmos Demo",
    "keywords": "Struct - gz_header Module etc.c.zlib public struct gz_header { // uint comm_max; // <bug: unknown> comment; // int done; // <bug: unknown> extra; // uint extra_len; // uint extra_max; // int hcrc; // <bug: unknown> name; // uint name_max; // int os; // int text; // c_ulong time; // int xflags; } Variables Name Description comm_max comment done extra extra_len extra_max hcrc name name_max os text time xflags"
  },
  "phobos/etc/c/zlib/Structs/z_stream.html": {
    "href": "phobos/etc/c/zlib/Structs/z_stream.html",
    "title": "Struct - z_stream | Marmos Demo",
    "keywords": "Struct - z_stream Module etc.c.zlib public struct z_stream { // c_ulong adler; // uint avail_in; // uint avail_out; // int data_type; // <bug: unknown> msg; // <bug: unknown> next_in; // <bug: unknown> next_out; // <bug: unknown> opaque; // c_ulong reserved; // <bug: unknown> state; // c_ulong total_in; // c_ulong total_out; // alloc_func zalloc; // free_func zfree; } Variables Name Description adler avail_in avail_out data_type msg next_in next_out opaque reserved state total_in total_out zalloc zfree"
  },
  "phobos/phobos/sys/compiler/Overview.html": {
    "href": "phobos/phobos/sys/compiler/Overview.html",
    "title": "Module - phobos.sys.compiler | Marmos Demo",
    "keywords": "Module - phobos.sys.compiler About Identify the compiler used and its various features. Copyright: Copyright The D Language Foundation 2000 - 2011. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP digitalmars.com, Walter Bright), Alex Rønne Petersen Source: $(PHOBOSSRC phobos/sys/compiler.d) Variables Name Description D_major The version of the D Programming Language Specification supported by the compiler. D_minor name Vendor specific string naming the compiler, for example: \"Digital Mars D\". vendor Which vendor produced this compiler. version_major The vendor specific version number, as in version_major.version_minor version_minor ditto"
  },
  "phobos/phobos/sys/meta/Overview.html": {
    "href": "phobos/phobos/sys/meta/Overview.html",
    "title": "Module - phobos.sys.meta | Marmos Demo",
    "keywords": "Module - phobos.sys.meta About Templates to manipulate $(DDSUBLINK spec/template, variadic-templates, template parameter sequences) (also known as $(I alias sequences)). Some operations on alias sequences are built into the language, such as S[i] , which accesses the element at index i in the sequence. S[low .. high] returns a new alias sequence that is a slice of the old one. For more information, see $(DDLINK ctarguments, Compile-time Sequences, Compile-time Sequences). One thing that should be noted is that while the templates provided in this module can be extremely useful, they generally should not be used with lists of values. The language uses alias sequences for a variety of things (including both parameter lists and argument lists), so they can contain types, symbols, values, or a mixture of them all. The ability to manipulate types and symbols within alias sequences is vital, because that's really the only way to do it. However, because D has CTFE (Compile-Time Function Evaluation), making it possible to call many functions at compile time, if code needs to be able to manipulate values at compile-time, CTFE is typically much more efficient and easier to do. Instantiating a bunch of templates to manipulate values is incredibly inefficient in comparison. So, while many of the templates in this module will work with values simply because alias sequences can contain values, most code should restrict itself to using them for operating on types or symbols - i.e. the stuff where CTFE can't be used. That being said, there will be times when one can be used to feed into the other. E.G. --- alias Types = AliasSeq!(int, byte, ulong, int[10]); enum Sizeof(T) = T.sizeof; alias sizesAsAliasSeq = Map!(Sizeof, Types); static assert(sizesAsAliasSeq == AliasSeq!(4, 1, 8, 40)); enum size_t[] sizes = [sizesAsAliasSeq]; static assert(sizes == [4, 1, 8, 40]); --- Just be aware that if CTFE can be used for a particular task, it's better to use CTFE than to manipulate alias sequences with the kind of templates provided by this module. $(SCRIPT inhibitQuickIndex = 1;) $(DIVC quickindex, $(BOOKTABLE , $(TR $(TH Category) $(TH Templates)) $(TR $(TD Building blocks) $(TD $(LREF Alias) $(LREF AliasSeq) )) $(TR $(TD Alias sequence filtering) $(TD $(LREF Filter) $(LREF Stride) $(LREF Unique) )) $(TR $(TD Alias sequence transformation) $(TD $(LREF Map) $(LREF Reverse) )) $(TR $(TD Alias sequence searching) $(TD $(LREF all) $(LREF any) $(LREF indexOf) )) $(TR $(TD Template predicates) $(TD $(LREF And) $(LREF Not) $(LREF Or) )) $(TR $(TD Template instantiation) $(TD $(LREF ApplyLeft) $(LREF ApplyRight) $(LREF Instantiate) )) ) References: Based on ideas in Table 3.1 from $(LINK2 http://amazon.com/exec/obidos/ASIN/0201704315/ref=ase_classicempire/102-2957199-2585768, Modern C++ Design), Andrei Alexandrescu (Addison-Wesley Professional, 2001) Copyright: Copyright The D Language Foundation 2005 - 2024. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP digitalmars.com, Walter Bright), $(HTTP klickverbot.at, David Nadlinger) $(HTTP jmdavisprog.com, Jonathan M Davis) Source: $(PHOBOSSRC phobos/sys/meta) Aliases Name Description Alias Allows aliasing of any single symbol, type or compile-time expression. Alias Ditto AliasSeq Creates a sequence of zero or more aliases. This is most commonly used as template parameters or arguments. all Whether the given template predicate is $(D true) for all of the elements in the given $(D AliasSeq). any Whether the given template predicate is $(D true) for any of the elements in the given $(D AliasSeq). ApplyLeft ApplyLeft does a $(LINK2 http://en.wikipedia.org/wiki/Partial_application, partial application) of its arguments, providing a way to bind a set of arguments to the given template while delaying actually instantiating that template until the full set of arguments is provided. The \"Left\" in the name indicates that the initial arguments are one the left-hand side of the argument list when the given template is instantiated. ApplyRight ApplyRight does a $(LINK2 http://en.wikipedia.org/wiki/Partial_application, partial application) of its arguments, providing a way to bind a set of arguments to the given template while delaying actually instantiating that template until the full set of arguments is provided. The \"Right\" in the name indicates that the initial arguments are one the right-hand side of the argument list when the given template is instantiated. Instantiate Instantiates the given template with the given arguments and evaluates to the result of that template. Variables Name Description And Combines multiple template predicates into a single template predicate using logical AND - i.e. for the resulting predicate to be $(D true) with a particular argument, all of the predicates must be $(D true) with that argument. indexOf Evaluates to the index of the first element where $(D Pred!(Args[i])) is $(D true). Not Evaluates to a template predicate which negates the given predicate. Or Combines multiple template predicates into a single template predicate using logical OR - i.e. for the resulting predicate to be $(D true) with a particular argument, at least one of the predicates must be $(D true) with that argument."
  },
  "phobos/phobos/sys/system/Overview.html": {
    "href": "phobos/phobos/sys/system/Overview.html",
    "title": "Module - phobos.sys.system | Marmos Demo",
    "keywords": "Module - phobos.sys.system About Information about the target operating system, environment, and CPU. Copyright: Copyright The D Language Foundation 2000 - 2011 License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP digitalmars.com, Walter Bright) and $(HTTP jmdavisprog.com, Jonathan M Davis) Source: $(PHOBOSSRC phobos/sys/system.d) Variables Name Description endian The endianness that the program was compiled for. instructionSetArchitecture The instruction set architecture that the program was compiled for. os The OS that the program was compiled for."
  },
  "phobos/phobos/sys/traits/Functions/lvalueOf.html": {
    "href": "phobos/phobos/sys/traits/Functions/lvalueOf.html",
    "title": "Overloads for - lvalueOf | Marmos Demo",
    "keywords": "Overloads for - lvalueOf Module phobos.sys.traits lvalueOf(__anonymous) T lvalueOf( __InoutWorkaroundStruct __anonymous ) Ditto"
  },
  "phobos/phobos/sys/traits/Functions/rvalueOf.html": {
    "href": "phobos/phobos/sys/traits/Functions/rvalueOf.html",
    "title": "Overloads for - rvalueOf | Marmos Demo",
    "keywords": "Overloads for - rvalueOf Module phobos.sys.traits rvalueOf(__anonymous) T rvalueOf( __InoutWorkaroundStruct __anonymous ) Creates an lvalue or rvalue of type T to be used in conjunction with $(D is(typeof(...))) or $(DDSUBLINK spec/traits, compiles, $(D traits(compiles, ...))). The idea is that some traits or other forms of conditional compilation need to verify that a particular piece of code compiles with an rvalue or an lvalue of a specific type, and these $(D @property) functions allow you to get an rvalue or lvalue of a specific type to use within an expression that is then tested to see whether it compiles. They're $(D @property) functions so that using $(D typeof) on them gives the return type rather than the type of the function. Note that these functions are $(I not) defined, so if they're actually used outside of type introspection, they'll result in linker errors. They're entirely for testing that a particular piece of code compiles with an rvalue or lvalue of the given type. The $(D InoutWorkaroundStruct) parameter is entirely to make it so that these work when the given type has the $(D inout) qualifier, since the language requires that a function that returns an $(D inout) type also have an $(D inout) type as a parameter. It should just be ignored."
  },
  "phobos/phobos/sys/traits/Overview.html": {
    "href": "phobos/phobos/sys/traits/Overview.html",
    "title": "Module - phobos.sys.traits | Marmos Demo",
    "keywords": "Module - phobos.sys.traits About Templates which extract information about types and symbols at compile time. In the context of phobos.sys.traits, a \"trait\" is a template which provides information about a type or symbol. Most traits evaluate to $(D true) or $(D false), telling the code using it whether the given arguments match / have that specific trait (e.g. whether the given type is a dynamic array or whether the given function is $(D @safe)). However, some traits may provide other kinds of information about a type (e.g. the trait could evaluate to the base type for an enum type, or it could strip $(D const) from the type to provide the mutable version of that type). These traits are then used primarily in template constraints so that they can test that the template arguments meet the criteria required by those templates, though they can be useful in a variety of compile-time contexts (e.g. the condition of a $(D static if)). Note that unless otherwise specified, the isXXXX and hasXXX traits in this module are checking for exact matches, so base types (e.g. with enums) and other implicit conversions do not factor into whether such traits are true or false. The type itself is being checked, not what it can be converted to. This is because these traits are often used in templated constraints, and having a type pass a template constraint based on an implicit conversion but then not have the implicit conversion actually take place (which it won't unless the template does something to force it internally) can lead to either compilation errors or subtle behavioral differences - and even when the conversion is done explicitly within a templated function, since it's not done at the call site, it can still lead to subtle bugs in some cases (e.g. if slicing a static array is involved). So, it's typically best to be explicit and clear about a template constraint accepting any kind of implicit conversion rather than having it buried in a trait where programmers stand a good chance of using the trait without realizing that enums might pass based on their base type - or that a type might pass based on some other implicit conversion. Regardless of what a trait is testing for, the documentation strives to be $(I very) clear about what the trait does, and of course, the names do try to make it clear as well - though obviously, only so much information can be put into a name, and some folks will misintrepret some symbols no matter how well they're named. So, please be sure that you clearly understand what these traits do when using them, since messing up template constraints can unfortunately be a great way to introduce subtle bugs into your program. Either way, of course, unit tests are your friends. $(SCRIPT inhibitQuickIndex = 1;) $(BOOKTABLE , $(TR $(TH Category) $(TH Templates)) $(TR $(TD Categories of types) $(TD $(LREF isAggregateType) $(LREF isDynamicArray) $(LREF isFloatingPoint) $(LREF isInstantiationOf) $(LREF isInteger) $(LREF isNumeric) $(LREF isPointer) $(LREF isSignedInteger) $(LREF isStaticArray) $(LREF isUnsignedInteger) )) $(TR $(TD Aggregate Type traits) $(TD $(LREF EnumMembers) )) $(TR $(TD Traits testing for type conversions) $(TD $(LREF isImplicitlyConvertible) $(LREF isQualifierConvertible) )) $(TR $(TD Traits for comparisons) $(TD $(LREF isEqual) $(LREF isSameSymbol) $(LREF isSameType) )) $(TR $(TD Aggregate Type Traits) $(TD $(LREF FieldNames) $(LREF FieldSymbols) $(LREF FieldTypes) )) $(TR $(TD General Types) $(TD $(LREF KeyType) $(LREF OriginalType) $(LREF ValueType) )) $(TR $(TD Traits for removing type qualfiers) $(TD $(LREF Unconst) $(LREF Unshared) $(LREF Unqualified) )) $(TR $(TD Type Constructors) $(TD $(LREF ConstOf) $(LREF ImmutableOf) $(LREF InoutOf) $(LREF SharedOf) )) $(TR $(TD Misc) $(TD $(LREF lvalueOf) $(LREF rvalueOf) )) ) Copyright: Copyright The D Language Foundation 2005 - 2024. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP jmdavisprog.com, Jonathan M Davis) $(HTTP digitalmars.com, Walter Bright), Tomasz Stachowiak (isExpressions), $(HTTP erdani.org, Andrei Alexandrescu), Shin Fujishiro, $(HTTP octarineparrot.com, Robert Clipsham), $(HTTP klickverbot.at, David Nadlinger), Kenji Hara, Shoichi Kato Source: $(PHOBOSSRC phobos/sys/traits) Aliases Name Description ConstOf Applies $(D const) to the given type. ImmutableOf Applies $(D immutable) to the given type. InoutOf Applies $(D inout) to the given type. KeyType Takes a type which is an associative array and evaluates to the type of the keys in that associative array. OriginalType Evaluates to the original / ultimate base type of an enum type - or for non-enum types, it evaluates to the type that it's given. SharedOf Applies $(D shared) to the given type. Unconst Removes the outer layer of $(D const), $(D inout), or $(D immutable) from type $(D T). Unqualified Removes the outer layer of all type qualifiers from type $(D T) - this includes $(D shared). ValueType Takes a type which is an associative array and evaluates to the type of the values in that associative array. Functions Name Description lvalueOf Ditto rvalueOf Creates an lvalue or rvalue of type T to be used in conjunction with $(D is(typeof(...))) or $(DDSUBLINK spec/traits, compiles, $(D traits(compiles, ...))). Variables Name Description impl Ditto impl Ditto impl Ditto impl Ditto isAggregateType Whether the given type is an \"aggregate type\" - i.e. a struct, class, interface, or union. isDynamicArray Whether the given type is a dynamic array (or what is sometimes referred to as a slice, since a dynamic array in D is a slice of memory). isEqual Whether the given values are equal per $(D ==). isEqual Ditto isFloatingPoint Whether the given type is one of the built-in floating-point types, ignoring all qualifiers. isImplicitlyConvertible Whether the type $(D From) is implicitly convertible to the type $(D To). isImplicitlyConvertible Ditto isInstantiationOf Evaluates to $(D true) if the given type or symbol is an instantiation of the given template. isInstantiationOf Ditto isInstantiationOf Ditto isInstantiationOf Ditto isInteger Whether the given type is one of the built-in integer types, ignoring all qualifiers. isNumeric Whether the given type is one of the built-in numeric types, ignoring all qualifiers. It's equivalent to $(D isInteger!T |``| isFloatingPoint!T), but it only involves a single template instantation instead of two. isPointer Whether the given type is a pointer. isQualifierConvertible Whether $(D From) is $(DDSUBLINK spec/const3, implicit_qualifier_conversions, qualifier-convertible) to $(D To). isQualifierConvertible Ditto isSameSymbol Whether the given symbols are the same symbol. isSameSymbol Ditto isSameType Whether the given types are the same type. isSameType Ditto isSignedInteger Whether the given type is one of the built-in signed integer types, ignoring all qualifiers. isStaticArray Whether type $(D T) is a static array. isUnsignedInteger Whether the given type is one of the built-in unsigned integer types, ignoring all qualifiers."
  },
  "phobos/std/Overview.html": {
    "href": "phobos/std/Overview.html",
    "title": "Module - std | Marmos Demo",
    "keywords": "Module - std About Convenience file that allows to import entire Phobos in one import."
  },
  "phobos/std/algorithm/Overview.html": {
    "href": "phobos/std/algorithm/Overview.html",
    "title": "Module - std.algorithm | Marmos Demo",
    "keywords": "Module - std.algorithm About This package implements generic algorithms oriented towards the processing of sequences. Sequences processed by these functions define range-based interfaces. See also $(MREF_ALTTEXT Reference on ranges, std, range) and $(HTTP ddili.org/ders/d.en/ranges.html, tutorial on ranges). $(SCRIPT inhibitQuickIndex = 1;) Algorithms are categorized into the following submodules $(DIVC quickindex, $(BOOKTABLE , $(TR $(TH Submodule) $(TH Functions) ) $(TR $(TDNW $(SUBMODULE Searching, searching)) $(TD $(SUBREF searching, all) $(SUBREF searching, any) $(SUBREF searching, balancedParens) $(SUBREF searching, boyerMooreFinder) $(SUBREF searching, canFind) $(SUBREF searching, commonPrefix) $(SUBREF searching, count) $(SUBREF searching, countUntil) $(SUBREF searching, endsWith) $(SUBREF searching, find) $(SUBREF searching, findAdjacent) $(SUBREF searching, findAmong) $(SUBREF searching, findSkip) $(SUBREF searching, findSplit) $(SUBREF searching, findSplitAfter) $(SUBREF searching, findSplitBefore) $(SUBREF searching, minCount) $(SUBREF searching, maxCount) $(SUBREF searching, minElement) $(SUBREF searching, maxElement) $(SUBREF searching, minIndex) $(SUBREF searching, maxIndex) $(SUBREF searching, minPos) $(SUBREF searching, maxPos) $(SUBREF searching, skipOver) $(SUBREF searching, startsWith) $(SUBREF searching, until) ) ) $(TR $(TDNW $(SUBMODULE Comparison, comparison)) $(TD $(SUBREF comparison, among) $(SUBREF comparison, castSwitch) $(SUBREF comparison, clamp) $(SUBREF comparison, cmp) $(SUBREF comparison, either) $(SUBREF comparison, equal) $(SUBREF comparison, isPermutation) $(SUBREF comparison, isSameLength) $(SUBREF comparison, levenshteinDistance) $(SUBREF comparison, levenshteinDistanceAndPath) $(SUBREF comparison, max) $(SUBREF comparison, min) $(SUBREF comparison, mismatch) $(SUBREF comparison, predSwitch) ) ) $(TR $(TDNW $(SUBMODULE Iteration, iteration)) $(TD $(SUBREF iteration, cache) $(SUBREF iteration, cacheBidirectional) $(SUBREF iteration, chunkBy) $(SUBREF iteration, cumulativeFold) $(SUBREF iteration, each) $(SUBREF iteration, filter) $(SUBREF iteration, filterBidirectional) $(SUBREF iteration, fold) $(SUBREF iteration, group) $(SUBREF iteration, joiner) $(SUBREF iteration, map) $(SUBREF iteration, mean) $(SUBREF iteration, permutations) $(SUBREF iteration, reduce) $(SUBREF iteration, splitWhen) $(SUBREF iteration, splitter) $(SUBREF iteration, substitute) $(SUBREF iteration, sum) $(SUBREF iteration, uniq) ) ) $(TR $(TDNW $(SUBMODULE Sorting, sorting)) $(TD $(SUBREF sorting, completeSort) $(SUBREF sorting, isPartitioned) $(SUBREF sorting, isSorted) $(SUBREF sorting, isStrictlyMonotonic) $(SUBREF sorting, ordered) $(SUBREF sorting, strictlyOrdered) $(SUBREF sorting, makeIndex) $(SUBREF sorting, merge) $(SUBREF sorting, multiSort) $(SUBREF sorting, nextEvenPermutation) $(SUBREF sorting, nextPermutation) $(SUBREF sorting, nthPermutation) $(SUBREF sorting, partialSort) $(SUBREF sorting, partition) $(SUBREF sorting, partition3) $(SUBREF sorting, schwartzSort) $(SUBREF sorting, sort) $(SUBREF sorting, topN) $(SUBREF sorting, topNCopy) $(SUBREF sorting, topNIndex) ) ) $(TR $(TDNW Set operations \\((BR)(\\)(SUBMODULE setops, setops))) $(TD $(SUBREF setops, cartesianProduct) $(SUBREF setops, largestPartialIntersection) $(SUBREF setops, largestPartialIntersectionWeighted) $(SUBREF setops, multiwayMerge) $(SUBREF setops, multiwayUnion) $(SUBREF setops, setDifference) $(SUBREF setops, setIntersection) $(SUBREF setops, setSymmetricDifference) ) ) $(TR $(TDNW $(SUBMODULE Mutation, mutation)) $(TD $(SUBREF mutation, bringToFront) $(SUBREF mutation, copy) $(SUBREF mutation, fill) $(SUBREF mutation, initializeAll) $(SUBREF mutation, move) $(SUBREF mutation, moveAll) $(SUBREF mutation, moveSome) $(SUBREF mutation, moveEmplace) $(SUBREF mutation, moveEmplaceAll) $(SUBREF mutation, moveEmplaceSome) $(SUBREF mutation, remove) $(SUBREF mutation, reverse) $(SUBREF mutation, strip) $(SUBREF mutation, stripLeft) $(SUBREF mutation, stripRight) $(SUBREF mutation, swap) $(SUBREF mutation, swapRanges) $(SUBREF mutation, uninitializedFill) ) ) )) Many functions in this package are parameterized with a $(GLOSSARY predicate). The predicate may be any suitable callable type (a function, a delegate, a $(GLOSSARY functor), or a lambda), or a compile-time string. The string may consist of $(B any) legal D expression that uses the symbol a (for unary functions) or the symbols a and b (for binary functions). These names will NOT interfere with other homonym symbols in user code because they are evaluated in a different context. The default for all binary comparison predicates is \"a == b\" for unordered operations and \"a < b\" for ordered operations. Example ---- int[] a = ...; static bool greater(int a, int b) { return a > b; } sort!greater(a); // predicate as alias sort!((a, b) => a > b)(a); // predicate as a lambda. sort!\"a > b\"(a); // predicate as string // (no ambiguity with array name) sort(a); // no predicate, \"a < b\" is implicit ---- Macros SUBMODULE $(MREF_ALTTEXT $1, std, algorithm, $2) SUBREF $(REF_ALTTEXT $(TT $2), $2, std, algorithm, \\(1)\\)(NBSP) Copyright: Andrei Alexandrescu 2008-. License: $(HTTP boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP erdani.com, Andrei Alexandrescu) Source: $(PHOBOSSRC std/algorithm/package.d)"
  },
  "phobos/std/algorithm/comparison/Functions/among.html": {
    "href": "phobos/std/algorithm/comparison/Functions/among.html",
    "title": "Overloads for - among | Marmos Demo",
    "keywords": "Overloads for - among Module std.algorithm.comparison among(value, values) uint among( Value value, Values values ) Find value among values, returning the 1-based index of the first matching value in values , or 0 if value is not among values. The predicate pred is used to compare values, and uses equality by default. Params pred <parameter not found> The predicate used to compare the values. value Value The value to search for. values Values The values to compare the value to. Returns 0 if value was not found among the values, otherwise the index of the found value plus one is returned. See_Also $(REF_ALTTEXT find, find, std,algorithm,searching) and $(REF_ALTTEXT canFind, canFind, std,algorithm,searching) for finding a value in a range. among(value) uint among( Value value ) Ditto"
  },
  "phobos/std/algorithm/comparison/Functions/castSwitch.html": {
    "href": "phobos/std/algorithm/comparison/Functions/castSwitch.html",
    "title": "Overloads for - castSwitch | Marmos Demo",
    "keywords": "Overloads for - castSwitch Module std.algorithm.comparison castSwitch(switchObject) <bug: unknown> castSwitch( Object switchObject ) auto Executes and returns one of a collection of handlers based on the type of the switch object. The first choice that switchObject can be casted to the type of argument it accepts will be called with switchObject casted to that type, and the value it'll return will be returned by castSwitch . If a choice's return type is void, the choice must throw an exception, unless all the choices are void. In that case, castSwitch itself will return void. Throws: If none of the choice matches, a SwitchError will be thrown. $(D SwitchError) will also be thrown if not all the choices are void and a void choice was executed without throwing anything. Params choices <parameter not found> The choices needs to be composed of function or delegate handlers that accept one argument. There can also be a choice that accepts zero arguments. That choice will be invoked if the $(D switchObject) is null. switchObject Object the object against which the tests are being made. Returns The value of the selected choice. Note: castSwitch can only be used with object types."
  },
  "phobos/std/algorithm/comparison/Functions/clamp.html": {
    "href": "phobos/std/algorithm/comparison/Functions/clamp.html",
    "title": "Overloads for - clamp | Marmos Demo",
    "keywords": "Overloads for - clamp Module std.algorithm.comparison clamp(val, lower, upper) T1 clamp( T1 val, T2 lower, T3 upper ) Clamps val into the given bounds. Result has the same type as val . Params: val = The value to clamp. lower = The *lower bound of the * clamp. upper = The *upper bound of the * clamp. Returns: lower if val is less than lower , upper if val is greater than upper , and val in all other cases. Comparisons are made correctly (using $(REF lessThan, std,functional) and the return value is converted to the return type using the standard integer coversion rules $(REF greaterThan, std,functional)) even if the signedness of T1 , T2 , and T3 are different."
  },
  "phobos/std/algorithm/comparison/Functions/cmp.html": {
    "href": "phobos/std/algorithm/comparison/Functions/cmp.html",
    "title": "Overloads for - cmp | Marmos Demo",
    "keywords": "Overloads for - cmp Module std.algorithm.comparison cmp(r1, r2) <bug: unknown> cmp( R1 r1, R2 r2 ) auto Performs a lexicographical comparison on two $(REF_ALTTEXT input ranges, isInputRange, std,range,primitives). Iterating r1 and r2 in lockstep, cmp compares each element e1 of r1 with the corresponding element e2 in r2 . If one of the ranges has been finished, cmp returns a negative value if r1 has fewer elements than r2 , a positive value if r1 has more elements than r2 , and 0 if the ranges have the same number of elements. If the ranges are strings, cmp performs UTF decoding appropriately and compares the ranges one code point at a time. A custom predicate may be specified, in which case cmp performs a three-way lexicographical comparison using pred . Otherwise the elements are compared using opCmp . Params pred <parameter not found> Predicate used for comparison. Without a predicate specified the ordering implied by opCmp is used. r1 R1 The first range. r2 R2 The second range. Returns 0 if the ranges compare equal. A negative value if r1 is a prefix of r2 or the first differing element of r1 is less than the corresponding element of r2 according to pred . A positive value if r2 is a prefix of r1 or the first differing element of r2 is less than the corresponding element of r1 according to pred . Note An earlier version of the documentation incorrectly stated that -1 is the only negative value returned and 1 is the only positive value returned. Whether that is true depends on the types being compared. cmp(r1, r2) int cmp( R1 r1, R2 r2 ) ditto"
  },
  "phobos/std/algorithm/comparison/Functions/either.html": {
    "href": "phobos/std/algorithm/comparison/Functions/either.html",
    "title": "Overloads for - either | Marmos Demo",
    "keywords": "Overloads for - either Module std.algorithm.comparison either(first, alternatives) CommonType!(TTs) either( T first, Ts alternatives ) Get the first argument a that passes an if (unaryFun!pred(a)) test. If no argument passes the test, return the last argument. Similar to behaviour of the or operator in dynamic languages such as Lisp's (or ...) and Python's a or b or ... except that the last argument is returned upon no match. Simplifies logic, for instance, in parsing rules where a set of alternative matchers are tried. The first one that matches returns it match result, typically as an abstract syntax tree (AST). Bugs Lazy parameters are currently, too restrictively, inferred by DMD to always throw even though they don't need to be. This makes it impossible to currently mark either as nothrow . See issue at $(BUGZILLA 12647). Returns The first argument that passes the test pred."
  },
  "phobos/std/algorithm/comparison/Functions/equal.html": {
    "href": "phobos/std/algorithm/comparison/Functions/equal.html",
    "title": "Overloads for - equal | Marmos Demo",
    "keywords": "Overloads for - equal Module std.algorithm.comparison equal(rs) bool equal( Ranges rs ) Compares two or more ranges for equality, as defined by predicate pred (which is == by default)."
  },
  "phobos/std/algorithm/comparison/Functions/equalLoop.html": {
    "href": "phobos/std/algorithm/comparison/Functions/equalLoop.html",
    "title": "Overloads for - equalLoop | Marmos Demo",
    "keywords": "Overloads for - equalLoop Module std.algorithm.comparison equalLoop(rs) bool equalLoop( Rs rs ) Compares two or more ranges for equality, as defined by predicate pred (which is == by default)."
  },
  "phobos/std/algorithm/comparison/Functions/isPermutation.html": {
    "href": "phobos/std/algorithm/comparison/Functions/isPermutation.html",
    "title": "Overloads for - isPermutation | Marmos Demo",
    "keywords": "Overloads for - isPermutation Module std.algorithm.comparison isPermutation(r1, r2) bool isPermutation( Range1 r1, Range2 r2 ) Checks if both ranges are permutations of each other. This function can allocate if the Yes.allocateGC flag is passed. This has the benefit of have better complexity than the Yes.allocateGC option. However, this option is only available for ranges whose equality can be determined via each element's toHash method. If customized equality is needed, then the pred template parameter can be passed, and the function will automatically switch to the non-allocating algorithm. See $(REF binaryFun, std,functional) for more details on how to define pred . Non-allocating forward range option: $(BIGOH n^2) Non-allocating forward range option with custom pred : $(BIGOH n^2) Allocating forward range option: amortized $(BIGOH r1.length) + $(BIGOH r2.length) Params pred <parameter not found> an optional parameter to change how equality is defined allocateGC <parameter not found> Yes.allocateGC /No.allocateGC r1 Range1 A finite $(REF_ALTTEXT forward range, isForwardRange, std,range,primitives) r2 Range2 A finite $(REF_ALTTEXT forward range, isForwardRange, std,range,primitives) Returns true if all of the elements in r1 appear the same number of times in r2 . Otherwise, returns false . isPermutation(r1, r2) bool isPermutation( Range1 r1, Range2 r2 ) ditto"
  },
  "phobos/std/algorithm/comparison/Functions/isSameLength.html": {
    "href": "phobos/std/algorithm/comparison/Functions/isSameLength.html",
    "title": "Overloads for - isSameLength | Marmos Demo",
    "keywords": "Overloads for - isSameLength Module std.algorithm.comparison isSameLength(rs) bool isSameLength( Ranges rs ) Checks if two or more ranges have the same number of elements. This function is optimized to always take advantage of the length member of either range if it exists. If all ranges have a length member or at least one is infinite, _isSameLength 's complexity is $(BIGOH 1). Otherwise, complexity is $(BIGOH n), where n is the smallest of the lengths of ranges with unknown length. Infinite ranges are considered of the same length. An infinite range has never the same length as a finite range. Params rs Ranges two or more $(REF_ALTTEXT input ranges, isInputRange, std,range,primitives) Returns true if both ranges have the same length, false otherwise."
  },
  "phobos/std/algorithm/comparison/Functions/levenshteinDistance.html": {
    "href": "phobos/std/algorithm/comparison/Functions/levenshteinDistance.html",
    "title": "Overloads for - levenshteinDistance | Marmos Demo",
    "keywords": "Overloads for - levenshteinDistance Module std.algorithm.comparison levenshteinDistance(s, t) size_t levenshteinDistance( Range1 s, Range2 t ) Returns the $(HTTP wikipedia.org/wiki/Levenshtein_distance, Levenshtein distance) between s and t . The Levenshtein distance computes the minimal amount of edit operations necessary to transform s into t . Performs $(BIGOH s.length t.length) evaluations of $(D equals) and occupies $(BIGOH min(s.length, t.length)) storage. Params equals <parameter not found> The binary predicate to compare the elements of the two ranges. s Range1 The original range. t Range2 The transformation target Returns The minimal number of edits to transform s into t. Does not allocate GC memory. levenshteinDistance(s, t) size_t levenshteinDistance( Range1 s, Range2 t ) ditto"
  },
  "phobos/std/algorithm/comparison/Functions/levenshteinDistanceAndPath.html": {
    "href": "phobos/std/algorithm/comparison/Functions/levenshteinDistanceAndPath.html",
    "title": "Overloads for - levenshteinDistanceAndPath | Marmos Demo",
    "keywords": "Overloads for - levenshteinDistanceAndPath Module std.algorithm.comparison levenshteinDistanceAndPath(s, t) Tuple!(size_tEditOp[]) levenshteinDistanceAndPath( Range1 s, Range2 t ) Returns the Levenshtein distance and the edit path between s and t . Params equals <parameter not found> The binary predicate to compare the elements of the two ranges. s Range1 The original range. t Range2 The transformation target Returns Tuple with the first element being the minimal amount of edits to transform s into t and the second element being the sequence of edits to effect this transformation. Allocates GC memory for the returned EditOp[] array. levenshteinDistanceAndPath(s, t) Tuple!(size_tEditOp[]) levenshteinDistanceAndPath( Range1 s, Range2 t ) ditto"
  },
  "phobos/std/algorithm/comparison/Functions/max.html": {
    "href": "phobos/std/algorithm/comparison/Functions/max.html",
    "title": "Overloads for - max | Marmos Demo",
    "keywords": "Overloads for - max Module std.algorithm.comparison max(args) <bug: unknown> max( T args ) auto Iterates the passed arguments and returns the maximum value. Params args T The values to select the maximum from. At least two arguments must be passed, and they must be comparable with < . Returns The maximum of the passed-in values. The type of the returned value is the type among the passed arguments that is able to store the largest value. If at least one of the arguments is NaN, the result is an unspecified value. See $(REF maxElement, std,algorithm,searching) for examples on how to cope with NaNs. See_Also $(REF maxElement, std,algorithm,searching) max(a, b) T max( T a, U b ) ditto"
  },
  "phobos/std/algorithm/comparison/Functions/min.html": {
    "href": "phobos/std/algorithm/comparison/Functions/min.html",
    "title": "Overloads for - min | Marmos Demo",
    "keywords": "Overloads for - min Module std.algorithm.comparison min(args) <bug: unknown> min( T args ) auto Iterates the passed arguments and returns the minimum value. Params args T The values to select the minimum from. At least two arguments must be passed, and they must be comparable with < . Returns The minimum of the passed-in values. The type of the returned value is the type among the passed arguments that is able to store the smallest value. If at least one of the arguments is NaN, the result is an unspecified value. See $(REF minElement, std,algorithm,searching) for examples on how to cope with NaNs. See_Also $(REF minElement, std,algorithm,searching) min(a, b) T min( T a, U b ) ditto"
  },
  "phobos/std/algorithm/comparison/Functions/mismatch.html": {
    "href": "phobos/std/algorithm/comparison/Functions/mismatch.html",
    "title": "Overloads for - mismatch | Marmos Demo",
    "keywords": "Overloads for - mismatch Module std.algorithm.comparison mismatch(rs) Tuple!(Ranges) mismatch( Ranges rs ) Sequentially compares elements in rs in lockstep, and stops at the first mismatch (according to pred , by default equality). Returns a tuple with the reduced ranges that start with the two mismatched values. Performs $(BIGOH min(r[0].length, r[1].length, ...)) evaluations of pred ."
  },
  "phobos/std/algorithm/comparison/Functions/predSwitch.html": {
    "href": "phobos/std/algorithm/comparison/Functions/predSwitch.html",
    "title": "Overloads for - predSwitch | Marmos Demo",
    "keywords": "Overloads for - predSwitch Module std.algorithm.comparison predSwitch(switchExpression, choices) <bug: unknown> predSwitch( T switchExpression, R choices ) auto Returns one of a collection of expressions based on the value of the switch expression. choices needs to be composed of pairs of test expressions and return expressions. Each test-expression is compared with switchExpression using pred (switchExpression is the first argument) and if that yields true - the return expression is returned. Both the test and the return expressions are lazily evaluated. Params switchExpression T The first argument for the predicate. choices = Pairs of test expressions and return expressions. The test expressions will be the second argument for the predicate, and the return expression will be returned if the predicate yields true with $(D switchExpression) and the test expression as arguments. May also have a default return expression, that needs to be the last expression without a test expression before it. A return expression may be of void type only if it always throws. Returns: The return expression associated with the first test expression that made the predicate yield true, or the default return expression if no test expression matched. Throws: If there is no default return expression and the predicate does not yield true with any test expression - SwitchError is thrown. $(D SwitchError) is also thrown if a void return expression was executed without throwing anything."
  },
  "phobos/std/algorithm/comparison/Levenshtein/Functions/AllocMatrix.html": {
    "href": "phobos/std/algorithm/comparison/Levenshtein/Functions/AllocMatrix.html",
    "title": "Overloads for - AllocMatrix | Marmos Demo",
    "keywords": "Overloads for - AllocMatrix Module std.algorithm.comparison Parent Levenshtein AllocMatrix(r, c) void AllocMatrix( size_t r, size_t c )"
  },
  "phobos/std/algorithm/comparison/Levenshtein/Functions/FreeMatrix.html": {
    "href": "phobos/std/algorithm/comparison/Levenshtein/Functions/FreeMatrix.html",
    "title": "Overloads for - FreeMatrix | Marmos Demo",
    "keywords": "Overloads for - FreeMatrix Module std.algorithm.comparison Parent Levenshtein FreeMatrix() void FreeMatrix( )"
  },
  "phobos/std/algorithm/comparison/Levenshtein/Functions/InitMatrix.html": {
    "href": "phobos/std/algorithm/comparison/Levenshtein/Functions/InitMatrix.html",
    "title": "Overloads for - InitMatrix | Marmos Demo",
    "keywords": "Overloads for - InitMatrix Module std.algorithm.comparison Parent Levenshtein InitMatrix() void InitMatrix( )"
  },
  "phobos/std/algorithm/comparison/Levenshtein/Functions/distanceLowMem.html": {
    "href": "phobos/std/algorithm/comparison/Levenshtein/Functions/distanceLowMem.html",
    "title": "Overloads for - distanceLowMem | Marmos Demo",
    "keywords": "Overloads for - distanceLowMem Module std.algorithm.comparison Parent Levenshtein distanceLowMem(s, t, slen, tlen) CostType distanceLowMem( Range s, Range t, CostType slen, CostType tlen )"
  },
  "phobos/std/algorithm/comparison/Levenshtein/Functions/distanceWithPath.html": {
    "href": "phobos/std/algorithm/comparison/Levenshtein/Functions/distanceWithPath.html",
    "title": "Overloads for - distanceWithPath | Marmos Demo",
    "keywords": "Overloads for - distanceWithPath Module std.algorithm.comparison Parent Levenshtein distanceWithPath(s, t) CostType distanceWithPath( Range s, Range t )"
  },
  "phobos/std/algorithm/comparison/Levenshtein/Functions/matrix.html": {
    "href": "phobos/std/algorithm/comparison/Levenshtein/Functions/matrix.html",
    "title": "Overloads for - matrix | Marmos Demo",
    "keywords": "Overloads for - matrix Module std.algorithm.comparison Parent Levenshtein matrix(row, col) CostType matrix( size_t row, size_t col )"
  },
  "phobos/std/algorithm/comparison/Levenshtein/Functions/min_index.html": {
    "href": "phobos/std/algorithm/comparison/Levenshtein/Functions/min_index.html",
    "title": "Overloads for - min_index | Marmos Demo",
    "keywords": "Overloads for - min_index Module std.algorithm.comparison Parent Levenshtein min_index(i0, i1, i2) uint min_index( CostType i0, CostType i1, CostType i2 ) static"
  },
  "phobos/std/algorithm/comparison/Levenshtein/Functions/path.html": {
    "href": "phobos/std/algorithm/comparison/Levenshtein/Functions/path.html",
    "title": "Overloads for - path | Marmos Demo",
    "keywords": "Overloads for - path Module std.algorithm.comparison Parent Levenshtein path() <bug: unknown> path( )"
  },
  "phobos/std/algorithm/comparison/Overview.html": {
    "href": "phobos/std/algorithm/comparison/Overview.html",
    "title": "Module - std.algorithm.comparison | Marmos Demo",
    "keywords": "Module - std.algorithm.comparison About This is a submodule of $(MREF std, algorithm). It contains generic comparison algorithms. $(SCRIPT inhibitQuickIndex = 1;) $(BOOKTABLE Cheat Sheet, $(TR $(TH Function Name) $(TH Description)) $(T2 among, Checks if a value is among a set of values, e.g. if (v.among(1, 2, 3)) // v is 1, 2 or 3) $(T2 castSwitch, (new A()).castSwitch((A a)=>1,(B b)=>2) returns 1 .) $(T2 clamp, clamp(1, 3, 6) returns 3 . clamp(4, 3, 6) returns 4 .) $(T2 cmp, cmp(\"abc\", \"abcd\") is -1 , cmp(\"abc\", \"aba\") is 1 , and cmp(\"abc\", \"abc\") is 0 .) $(T2 either, Return first parameter p that passes an if (p) test, e.g. either(0, 42, 43) returns 42 .) $(T2 equal, Compares ranges for element-by-element equality, e.g. equal([1, 2, 3], [1.0, 2.0, 3.0]) returns true .) $(T2 isPermutation, isPermutation([1, 2], [2, 1]) returns true .) $(T2 isSameLength, isSameLength([1, 2, 3], [4, 5, 6]) returns true .) $(T2 levenshteinDistance, levenshteinDistance(\"kitten\", \"sitting\") returns 3 by using the $(LINK2 https://en.wikipedia.org/wiki/Levenshtein_distance, Levenshtein distance algorithm).) $(T2 levenshteinDistanceAndPath, levenshteinDistanceAndPath(\"kitten\", \"sitting\") returns tuple(3, \"snnnsni\") by using the $(LINK2 https://en.wikipedia.org/wiki/Levenshtein_distance, Levenshtein distance algorithm).) $(T2 max, max(3, 4, 2) returns 4 .) $(T2 min, min(3, 4, 2) returns 2 .) $(T2 mismatch, mismatch(\"oh hi\", \"ohayo\") returns tuple(\" hi\", \"ayo\") .) $(T2 predSwitch, 2.predSwitch(1, \"one\", 2, \"two\", 3, \"three\") returns \"two\" .) ) Copyright: Andrei Alexandrescu 2008-. License: $(HTTP boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP erdani.com, Andrei Alexandrescu) Source: $(PHOBOSSRC std/algorithm/comparison.d) Macros T2=$(TR $(TDNW $(LREF $1)) $(TD $+)) Aliases Name Description AllocateGC Structs Name Description Levenshtein Functions Name Description among Find value among values, returning the 1-based index of the first matching value in values , or 0 if value is not among values. The predicate pred is used to compare values, and uses equality by default. castSwitch Executes and returns one of a collection of handlers based on the type of the switch object. clamp Clamps val into the given bounds. Result has the same type as val . cmp Performs a lexicographical comparison on two $(REF_ALTTEXT input ranges, isInputRange, std,range,primitives). Iterating r1 and r2 in lockstep, cmp compares each element e1 of r1 with the corresponding element e2 in r2 . If one of the ranges has been finished, cmp returns a negative value if r1 has fewer elements than r2 , a positive value if r1 has more elements than r2 , and 0 if the ranges have the same number of elements. either Get the first argument a that passes an if (unaryFun!pred(a)) test. If no argument passes the test, return the last argument. equal Compares two or more ranges for equality, as defined by predicate pred (which is == by default). equalLoop Compares two or more ranges for equality, as defined by predicate pred (which is == by default). isPermutation Checks if both ranges are permutations of each other. isSameLength Checks if two or more ranges have the same number of elements. This function is optimized to always take advantage of the length member of either range if it exists. levenshteinDistance Returns the $(HTTP wikipedia.org/wiki/Levenshtein_distance, Levenshtein distance) between s and t . The Levenshtein distance computes the minimal amount of edit operations necessary to transform s into t . Performs $(BIGOH s.length t.length) evaluations of $(D equals) and occupies $(BIGOH min(s.length, t.length)) storage. levenshteinDistanceAndPath Returns the Levenshtein distance and the edit path between s and t . max Iterates the passed arguments and returns the maximum value. min Iterates the passed arguments and returns the minimum value. mismatch Sequentially compares elements in rs in lockstep, and stops at the first mismatch (according to pred , by default equality). Returns a tuple with the reduced ranges that start with the two mismatched values. Performs $(BIGOH min(r[0].length, r[1].length, ...)) evaluations of pred . predSwitch Returns one of a collection of expressions based on the value of the switch expression."
  },
  "phobos/std/algorithm/comparison/Structs/Levenshtein.html": {
    "href": "phobos/std/algorithm/comparison/Structs/Levenshtein.html",
    "title": "Struct - Levenshtein | Marmos Demo",
    "keywords": "Struct - Levenshtein Module std.algorithm.comparison public struct Levenshtein { // void AllocMatrix( size_t r, size_t c ) ; // CostType distanceLowMem( Range s, Range t, CostType slen, CostType tlen ) ; // CostType distanceWithPath( Range s, Range t ) ; // void FreeMatrix( ) ; // void InitMatrix( ) ; // CostType matrix( size_t row, size_t col ) ; // uint min_index( CostType i0, CostType i1, CostType i2 ) static; // <bug: unknown> path( ) ; // size_t cols; // size_t rows; } Functions Name Description AllocMatrix distanceLowMem distanceWithPath FreeMatrix InitMatrix matrix min_index path Variables Name Description cols rows"
  },
  "phobos/std/algorithm/internal/Functions/addressOf.html": {
    "href": "phobos/std/algorithm/internal/Functions/addressOf.html",
    "title": "Overloads for - addressOf | Marmos Demo",
    "keywords": "Overloads for - addressOf Module std.algorithm.internal addressOf(val) <bug: unknown> addressOf( T val )"
  },
  "phobos/std/algorithm/internal/Functions/rndstuff.html": {
    "href": "phobos/std/algorithm/internal/Functions/rndstuff.html",
    "title": "Overloads for - rndstuff | Marmos Demo",
    "keywords": "Overloads for - rndstuff Module std.algorithm.internal rndstuff() <bug: unknown> rndstuff( ) rndstuff() <bug: unknown> rndstuff( ) rndstuff() <bug: unknown> rndstuff( )"
  },
  "phobos/std/algorithm/internal/Overview.html": {
    "href": "phobos/std/algorithm/internal/Overview.html",
    "title": "Module - std.algorithm.internal | Marmos Demo",
    "keywords": "Module - std.algorithm.internal About Helper functions for std.algorithm package. Aliases Name Description algoFormat Functions Name Description addressOf rndstuff Variables Name Description maxArraySize minArraySize"
  },
  "phobos/std/algorithm/iteration/ChunkByChunkImpl/Functions/empty.html": {
    "href": "phobos/std/algorithm/iteration/ChunkByChunkImpl/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.algorithm.iteration Parent ChunkByChunkImpl empty() bool empty( )"
  },
  "phobos/std/algorithm/iteration/ChunkByChunkImpl/Functions/front.html": {
    "href": "phobos/std/algorithm/iteration/ChunkByChunkImpl/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.algorithm.iteration Parent ChunkByChunkImpl front() ElementType!(Range) front( )"
  },
  "phobos/std/algorithm/iteration/ChunkByChunkImpl/Functions/popFront.html": {
    "href": "phobos/std/algorithm/iteration/ChunkByChunkImpl/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.algorithm.iteration Parent ChunkByChunkImpl popFront() void popFront( )"
  },
  "phobos/std/algorithm/iteration/ChunkByGroup/Functions/cargo.html": {
    "href": "phobos/std/algorithm/iteration/ChunkByGroup/Functions/cargo.html",
    "title": "Overloads for - cargo | Marmos Demo",
    "keywords": "Overloads for - cargo Module std.algorithm.iteration Parent ChunkByGroup cargo() <bug: unknown> cargo( )"
  },
  "phobos/std/algorithm/iteration/ChunkByGroup/Functions/empty.html": {
    "href": "phobos/std/algorithm/iteration/ChunkByGroup/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.algorithm.iteration Parent ChunkByGroup empty() bool empty( )"
  },
  "phobos/std/algorithm/iteration/ChunkByGroup/Functions/front.html": {
    "href": "phobos/std/algorithm/iteration/ChunkByGroup/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.algorithm.iteration Parent ChunkByGroup front() <bug: unknown> front( ) auto"
  },
  "phobos/std/algorithm/iteration/ChunkByGroup/Functions/popFront.html": {
    "href": "phobos/std/algorithm/iteration/ChunkByGroup/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.algorithm.iteration Parent ChunkByGroup popFront() void popFront( )"
  },
  "phobos/std/algorithm/iteration/ChunkByGroup/Functions/save.html": {
    "href": "phobos/std/algorithm/iteration/ChunkByGroup/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.algorithm.iteration Parent ChunkByGroup save() <bug: unknown> save( ) auto"
  },
  "phobos/std/algorithm/iteration/ChunkByImpl/Functions/empty.html": {
    "href": "phobos/std/algorithm/iteration/ChunkByImpl/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.algorithm.iteration Parent ChunkByImpl empty() bool empty( )"
  },
  "phobos/std/algorithm/iteration/ChunkByImpl/Functions/front.html": {
    "href": "phobos/std/algorithm/iteration/ChunkByImpl/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.algorithm.iteration Parent ChunkByImpl front() <bug: unknown> front( ) auto"
  },
  "phobos/std/algorithm/iteration/ChunkByImpl/Functions/impl.html": {
    "href": "phobos/std/algorithm/iteration/ChunkByImpl/Functions/impl.html",
    "title": "Overloads for - impl | Marmos Demo",
    "keywords": "Overloads for - impl Module std.algorithm.iteration Parent ChunkByImpl impl() <bug: unknown> impl( )"
  },
  "phobos/std/algorithm/iteration/ChunkByImpl/Functions/implPL.html": {
    "href": "phobos/std/algorithm/iteration/ChunkByImpl/Functions/implPL.html",
    "title": "Overloads for - implPL | Marmos Demo",
    "keywords": "Overloads for - implPL Module std.algorithm.iteration Parent ChunkByImpl implPL() <bug: unknown> implPL( )"
  },
  "phobos/std/algorithm/iteration/ChunkByImpl/Functions/popFront.html": {
    "href": "phobos/std/algorithm/iteration/ChunkByImpl/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.algorithm.iteration Parent ChunkByImpl popFront() void popFront( )"
  },
  "phobos/std/algorithm/iteration/ChunkByImpl/Functions/save.html": {
    "href": "phobos/std/algorithm/iteration/ChunkByImpl/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.algorithm.iteration Parent ChunkByImpl save() <bug: unknown> save( ) auto"
  },
  "phobos/std/algorithm/iteration/FilterBidiResult/Functions/back.html": {
    "href": "phobos/std/algorithm/iteration/FilterBidiResult/Functions/back.html",
    "title": "Overloads for - back | Marmos Demo",
    "keywords": "Overloads for - back Module std.algorithm.iteration Parent FilterBidiResult back() <bug: unknown> back( ) auto"
  },
  "phobos/std/algorithm/iteration/FilterBidiResult/Functions/empty.html": {
    "href": "phobos/std/algorithm/iteration/FilterBidiResult/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.algorithm.iteration Parent FilterBidiResult empty() bool empty( )"
  },
  "phobos/std/algorithm/iteration/FilterBidiResult/Functions/front.html": {
    "href": "phobos/std/algorithm/iteration/FilterBidiResult/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.algorithm.iteration Parent FilterBidiResult front() <bug: unknown> front( ) auto"
  },
  "phobos/std/algorithm/iteration/FilterBidiResult/Functions/popBack.html": {
    "href": "phobos/std/algorithm/iteration/FilterBidiResult/Functions/popBack.html",
    "title": "Overloads for - popBack | Marmos Demo",
    "keywords": "Overloads for - popBack Module std.algorithm.iteration Parent FilterBidiResult popBack() void popBack( )"
  },
  "phobos/std/algorithm/iteration/FilterBidiResult/Functions/popFront.html": {
    "href": "phobos/std/algorithm/iteration/FilterBidiResult/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.algorithm.iteration Parent FilterBidiResult popFront() void popFront( )"
  },
  "phobos/std/algorithm/iteration/FilterBidiResult/Functions/save.html": {
    "href": "phobos/std/algorithm/iteration/FilterBidiResult/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.algorithm.iteration Parent FilterBidiResult save() <bug: unknown> save( ) auto"
  },
  "phobos/std/algorithm/iteration/FilterResult/Functions/front.html": {
    "href": "phobos/std/algorithm/iteration/FilterResult/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.algorithm.iteration Parent FilterResult front() <bug: unknown> front( ) auto"
  },
  "phobos/std/algorithm/iteration/FilterResult/Functions/opSlice.html": {
    "href": "phobos/std/algorithm/iteration/FilterResult/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.algorithm.iteration Parent FilterResult opSlice() <bug: unknown> opSlice( ) auto"
  },
  "phobos/std/algorithm/iteration/FilterResult/Functions/popFront.html": {
    "href": "phobos/std/algorithm/iteration/FilterResult/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.algorithm.iteration Parent FilterResult popFront() void popFront( )"
  },
  "phobos/std/algorithm/iteration/FilterResult/Functions/prime.html": {
    "href": "phobos/std/algorithm/iteration/FilterResult/Functions/prime.html",
    "title": "Overloads for - prime | Marmos Demo",
    "keywords": "Overloads for - prime Module std.algorithm.iteration Parent FilterResult prime() void prime( )"
  },
  "phobos/std/algorithm/iteration/FilterResult/Functions/save.html": {
    "href": "phobos/std/algorithm/iteration/FilterResult/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.algorithm.iteration Parent FilterResult save() <bug: unknown> save( ) auto"
  },
  "phobos/std/algorithm/iteration/Functions/cache.html": {
    "href": "phobos/std/algorithm/iteration/Functions/cache.html",
    "title": "Overloads for - cache | Marmos Demo",
    "keywords": "Overloads for - cache Module std.algorithm.iteration cache(range) <bug: unknown> cache( Range range ) auto cache eagerly evaluates $(REF_ALTTEXT front, front, std,range,primitives) of range on each construction or call to $(REF_ALTTEXT popFront, popFront, std,range,primitives), to store the result in a cache. The result is then directly returned when $(REF_ALTTEXT front, front, std,range,primitives) is called, rather than re-evaluated. This can be a useful function to place in a chain, after functions that have expensive evaluation, as a lazy alternative to $(REF array, std,array). In particular, it can be placed after a call to $(LREF map), or before a call $(REF filter, std,range) or $(REF tee, std,range) cache may provide $(REF_ALTTEXT bidirectional range, isBidirectionalRange, std,range,primitives) iteration if needed, but since this comes at an increased cost, it must be explicitly requested via the call to cacheBidirectional . Furthermore, a bidirectional cache will evaluate the \"center\" element twice, when there is only one element left in the range. cache does not provide random access primitives, as cache would be unable to cache the random accesses. If Range provides slicing primitives, then cache will provide the same slicing primitives, but hasSlicing!Cache will not yield true (as the $(REF hasSlicing, std,range,primitives) trait also checks for random access). Params range Range an $(REF_ALTTEXT input range, isInputRange, std,range,primitives) Returns An $(REF_ALTTEXT input range, isInputRange, std,range,primitives) with the cached values of range"
  },
  "phobos/std/algorithm/iteration/Functions/cacheBidirectional.html": {
    "href": "phobos/std/algorithm/iteration/Functions/cacheBidirectional.html",
    "title": "Overloads for - cacheBidirectional | Marmos Demo",
    "keywords": "Overloads for - cacheBidirectional Module std.algorithm.iteration cacheBidirectional(range) <bug: unknown> cacheBidirectional( Range range ) auto ditto"
  },
  "phobos/std/algorithm/iteration/Functions/chunkBy.html": {
    "href": "phobos/std/algorithm/iteration/Functions/chunkBy.html",
    "title": "Overloads for - chunkBy | Marmos Demo",
    "keywords": "Overloads for - chunkBy Module std.algorithm.iteration chunkBy(r) <bug: unknown> chunkBy( Range r ) auto Chunks an input range into subranges of equivalent adjacent elements. In other languages this is often called partitionBy , groupBy or sliceWhen . Equivalence is defined by the predicate pred , which can be either binary, which is passed to $(REF binaryFun, std,functional), or unary, which is passed to $(REF unaryFun, std,functional). In the binary form, two range elements a and b are considered equivalent if pred(a,b) is true. In unary form, two elements are considered equivalent if pred(a) == pred(b) is true. This predicate must be an equivalence relation, that is, it must be reflexive (pred(x,x) is always true), symmetric (pred(x,y) == pred(y,x)), and transitive (pred(x,y) && pred(y,z) implies pred(x,z) ). If this is not the case, the range returned by chunkBy may assert at runtime or behave erratically. Use $(LREF splitWhen) if you want to chunk by a predicate that is not an equivalence relation. Params pred <parameter not found> Predicate for determining equivalence. r Range An $(REF_ALTTEXT input range, isInputRange, std,range,primitives) to be chunked. Returns: With a binary predicate, a range of ranges is returned in which all elements in a given subrange are equivalent under the given predicate. With a unary predicate, a range of tuples is returned, with the tuple consisting of the result of the unary predicate for each subrange, and the subrange itself. Copying the range currently has reference semantics, but this may change in the future. Notes Equivalent elements separated by an intervening non-equivalent element will appear in separate subranges; this function only considers adjacent equivalence. Elements in the subranges will always appear in the same order they appear in the original range. See_also $(LREF group), which collapses adjacent equivalent elements into a single element."
  },
  "phobos/std/algorithm/iteration/Functions/cumulativeFold.html": {
    "href": "phobos/std/algorithm/iteration/Functions/cumulativeFold.html",
    "title": "Overloads for - cumulativeFold | Marmos Demo",
    "keywords": "Overloads for - cumulativeFold Module std.algorithm.iteration cumulativeFold(range) <bug: unknown> cumulativeFold( R range ) auto Similar to fold , but returns a range containing the successive reduced values. The call cumulativeFold!(fun)(range, seed) first assigns seed to an internal variable result , also called the accumulator. The returned range contains the values result = fun(result, x) lazily evaluated for each element x in range . Finally, the last element has the same value as fold!(fun)(seed, range) . The one-argument version cumulativeFold!(fun)(range) works similarly, but it returns the first element unchanged and uses it as seed for the next elements. This function is also known as $(HTTP en.cppreference.com/w/cpp/algorithm/partial_sum, partial_sum), $(HTTP docs.python.org/3/library/itertools.html#itertools.accumulate, accumulate), $(HTTP hackage.haskell.org/package/base-4.8.2.0/docs/Prelude.html#v:scanl, scan), $(HTTP mathworld.wolfram.com/CumulativeSum.html, Cumulative Sum). Params fun <parameter not found> one or more functions to use as fold operation Returns The function returns a range containing the consecutive reduced values. If there is more than one fun , the element type will be $(REF Tuple, std,typecons) containing one element for each fun . See_Also $(HTTP en.wikipedia.org/wiki/Prefix_sum, Prefix Sum) Note In functional programming languages this is typically called scan , scanl , scanLeft or reductions . cumulativeFold(range, seed) <bug: unknown> cumulativeFold( R range, S seed ) auto Similar to fold , but returns a range containing the successive reduced values. The call cumulativeFold!(fun)(range, seed) first assigns seed to an internal variable result , also called the accumulator. The returned range contains the values result = fun(result, x) lazily evaluated for each element x in range . Finally, the last element has the same value as fold!(fun)(seed, range) . The one-argument version cumulativeFold!(fun)(range) works similarly, but it returns the first element unchanged and uses it as seed for the next elements. This function is also known as $(HTTP en.cppreference.com/w/cpp/algorithm/partial_sum, partial_sum), $(HTTP docs.python.org/3/library/itertools.html#itertools.accumulate, accumulate), $(HTTP hackage.haskell.org/package/base-4.8.2.0/docs/Prelude.html#v:scanl, scan), $(HTTP mathworld.wolfram.com/CumulativeSum.html, Cumulative Sum). Params fun <parameter not found> one or more functions to use as fold operation Returns The function returns a range containing the consecutive reduced values. If there is more than one fun , the element type will be $(REF Tuple, std,typecons) containing one element for each fun . See_Also $(HTTP en.wikipedia.org/wiki/Prefix_sum, Prefix Sum) Note In functional programming languages this is typically called scan , scanl , scanLeft or reductions ."
  },
  "phobos/std/algorithm/iteration/Functions/cumulativeFoldImpl.html": {
    "href": "phobos/std/algorithm/iteration/Functions/cumulativeFoldImpl.html",
    "title": "Overloads for - cumulativeFoldImpl | Marmos Demo",
    "keywords": "Overloads for - cumulativeFoldImpl Module std.algorithm.iteration cumulativeFoldImpl(range, args) <bug: unknown> cumulativeFoldImpl( R range, Args args ) auto Similar to fold , but returns a range containing the successive reduced values. The call cumulativeFold!(fun)(range, seed) first assigns seed to an internal variable result , also called the accumulator. The returned range contains the values result = fun(result, x) lazily evaluated for each element x in range . Finally, the last element has the same value as fold!(fun)(seed, range) . The one-argument version cumulativeFold!(fun)(range) works similarly, but it returns the first element unchanged and uses it as seed for the next elements. This function is also known as $(HTTP en.cppreference.com/w/cpp/algorithm/partial_sum, partial_sum), $(HTTP docs.python.org/3/library/itertools.html#itertools.accumulate, accumulate), $(HTTP hackage.haskell.org/package/base-4.8.2.0/docs/Prelude.html#v:scanl, scan), $(HTTP mathworld.wolfram.com/CumulativeSum.html, Cumulative Sum). Params fun <parameter not found> one or more functions to use as fold operation Returns The function returns a range containing the consecutive reduced values. If there is more than one fun , the element type will be $(REF Tuple, std,typecons) containing one element for each fun . See_Also $(HTTP en.wikipedia.org/wiki/Prefix_sum, Prefix Sum) Note In functional programming languages this is typically called scan , scanl , scanLeft or reductions ."
  },
  "phobos/std/algorithm/iteration/Functions/each.html": {
    "href": "phobos/std/algorithm/iteration/Functions/each.html",
    "title": "Overloads for - each | Marmos Demo",
    "keywords": "Overloads for - each Module std.algorithm.iteration each(r) Flag!(\"each\") each( Range r ) Eagerly iterates over r and calls fun with each element. If no function to call is specified, each defaults to doing nothing but consuming the entire range. r.front will be evaluated, but that can be avoided by specifying a lambda with a lazy parameter. each also supports opApply -based types, so it works with e.g. $(REF parallel, std,parallelism). Normally the entire range is iterated. If partial iteration (early stopping) is desired, fun needs to return a value of type $(REF Flag, std,typecons)!\"each\" (Yes.each to continue iteration, or No.each to stop iteration). Params fun <parameter not found> function to apply to each element of the range r Range range or iterable over which each iterates Returns: Yes.each if the entire range was iterated, No.each in case of early stopping. See_Also: $(REF tee, std,range) each(r) Flag!(\"each\") each( Iterable r ) Eagerly iterates over r and calls fun with each element. If no function to call is specified, each defaults to doing nothing but consuming the entire range. r.front will be evaluated, but that can be avoided by specifying a lambda with a lazy parameter. each also supports opApply -based types, so it works with e.g. $(REF parallel, std,parallelism). Normally the entire range is iterated. If partial iteration (early stopping) is desired, fun needs to return a value of type $(REF Flag, std,typecons)!\"each\" (Yes.each to continue iteration, or No.each to stop iteration). Params fun <parameter not found> function to apply to each element of the range r Iterable range or iterable over which each iterates Returns: Yes.each if the entire range was iterated, No.each in case of early stopping. See_Also: $(REF tee, std,range)"
  },
  "phobos/std/algorithm/iteration/Functions/filter.html": {
    "href": "phobos/std/algorithm/iteration/Functions/filter.html",
    "title": "Overloads for - filter | Marmos Demo",
    "keywords": "Overloads for - filter Module std.algorithm.iteration filter(range) <bug: unknown> filter( Range range ) auto filter!(predicate)(range) returns a new range containing only elements x in range for which predicate(x) returns true . The predicate is passed to $(REF unaryFun, std,functional), and can be either a string, or any callable that can be executed via pred(element) . Params predicate <parameter not found> Function to apply to each element of range Returns An input range that contains the filtered elements. If range is at least a forward range, the return value of filter will also be a forward range. See_Also $(HTTP en.wikipedia.org/wiki/Filter_(higher-order_function), Filter (higher-order function)), $(REF filterBidirectional, std,algorithm,iteration)"
  },
  "phobos/std/algorithm/iteration/Functions/filterBidirectional.html": {
    "href": "phobos/std/algorithm/iteration/Functions/filterBidirectional.html",
    "title": "Overloads for - filterBidirectional | Marmos Demo",
    "keywords": "Overloads for - filterBidirectional Module std.algorithm.iteration filterBidirectional(r) <bug: unknown> filterBidirectional( Range r ) auto Similar to filter , except it defines a $(REF_ALTTEXT bidirectional range, isBidirectionalRange, std,range,primitives). There is a speed disadvantage - the constructor spends time finding the last element in the range that satisfies the filtering condition (in addition to finding the first one). The advantage is that the filtered range can be spanned from both directions. Also, $(REF retro, std,range) can be applied against the filtered range. The predicate is passed to $(REF unaryFun, std,functional), and can either accept a string, or any callable that can be executed via pred(element) . Params pred <parameter not found> Function to apply to each element of range"
  },
  "phobos/std/algorithm/iteration/Functions/fold.html": {
    "href": "phobos/std/algorithm/iteration/Functions/fold.html",
    "title": "Overloads for - fold | Marmos Demo",
    "keywords": "Overloads for - fold Module std.algorithm.iteration fold(r, seeds) <bug: unknown> fold( R r, S seeds ) auto Implements the homonym function (also known as accumulate , $(D compress), inject , or foldl ) present in various programming languages of functional flavor, iteratively calling one or more predicates. $(P Each predicate in fun must take two arguments:) An accumulator value An element of the range r $(P Each predicate must return a value which implicitly converts to the type of the accumulator.) $(P For a single predicate, the call fold!(fun)(range, seed) will:) !!Unsupported comment block type: marmos.generic.model.DocCommentUnorderedListBlock!! $(P The one-argument version fold!(fun)(range) works similarly, but it uses the first element of the range as the seed (the range must be non-empty) and iterates over the remaining elements.) Multiple results are produced when using multiple predicates. Params fun <parameter not found> the predicate function(s) to apply to the elements See_Also !!Unsupported comment block type: marmos.generic.model.DocCommentUnorderedListBlock!! !!Unsupported comment block type: marmos.generic.model.DocCommentUnorderedListBlock!! !!Unsupported comment block type: marmos.generic.model.DocCommentUnorderedListBlock!!"
  },
  "phobos/std/algorithm/iteration/Functions/group.html": {
    "href": "phobos/std/algorithm/iteration/Functions/group.html",
    "title": "Overloads for - group | Marmos Demo",
    "keywords": "Overloads for - group Module std.algorithm.iteration group(r) Group!(predRange) group( Range r ) Groups consecutively equivalent elements into a single tuple of the element and the number of its repetitions. Similarly to uniq , group produces a range that iterates over unique consecutive elements of the given range. Each element of this range is a tuple of the element and the number of times it is repeated in the original range. Equivalence of elements is assessed by using the predicate pred , which defaults to \"a == b\" . The predicate is passed to $(REF binaryFun, std,functional), and can either accept a string, or any callable that can be executed via pred(element, element) . Params pred <parameter not found> Binary predicate for determining equivalence of two elements. R <parameter not found> The range type r Range The $(REF_ALTTEXT input range, isInputRange, std,range,primitives) to iterate over. Returns: A range of elements of type Tuple!(ElementType!R, uint) , representing each consecutively unique element and its respective number of occurrences in that run. This will be an input range if R is an input range, and a forward range in all other cases. See_Also: $(LREF chunkBy), which chunks an input range into subranges of equivalent adjacent elements."
  },
  "phobos/std/algorithm/iteration/Functions/joiner.html": {
    "href": "phobos/std/algorithm/iteration/Functions/joiner.html",
    "title": "Overloads for - joiner | Marmos Demo",
    "keywords": "Overloads for - joiner Module std.algorithm.iteration joiner(r, sep) <bug: unknown> joiner( RoR r, Separator sep ) auto Lazily joins a range of ranges with a separator. The separator itself is a range. If a separator is not provided, then the ranges are joined directly without anything in between them (often called flatten in other languages). Params r RoR An $(REF_ALTTEXT input range, isInputRange, std,range,primitives) of input ranges to be joined. sep Separator A $(REF_ALTTEXT forward range, isForwardRange, std,range,primitives) of element(s) to serve as separators in the joined range. Returns A range of elements in the joined range. This will be a bidirectional range if both outer and inner ranges of RoR are at least bidirectional ranges. Else if both outer and inner ranges of RoR are forward ranges, the returned range will be likewise. Otherwise it will be only an input range. The $(REF_ALTTEXT range bidirectionality, isBidirectionalRange, std,range,primitives) is propagated if no separator is specified. See_also $(REF chain, std,range), which chains a sequence of ranges with compatible elements into a single range. Note When both outer and inner ranges of RoR are bidirectional and the joiner is iterated from the back to the front, the separator will still be consumed from front to back, even if it is a bidirectional range too. joiner(r) <bug: unknown> joiner( RoR r ) auto Ditto"
  },
  "phobos/std/algorithm/iteration/Functions/map.html": {
    "href": "phobos/std/algorithm/iteration/Functions/map.html",
    "title": "Overloads for - map | Marmos Demo",
    "keywords": "Overloads for - map Module std.algorithm.iteration map(r) <bug: unknown> map( Range r ) auto Implements the homonym function (also known as transform ) present in many languages of functional flavor. The call map!(fun)(range) returns a range of which elements are obtained by applying fun(a) left to right for all elements a in range . The original ranges are not changed. Evaluation is done lazily. Params fun <parameter not found> one or more transformation functions See_Also $(HTTP en.wikipedia.org/wiki/Map_(higher-order_function), Map (higher-order function))"
  },
  "phobos/std/algorithm/iteration/Functions/mean.html": {
    "href": "phobos/std/algorithm/iteration/Functions/mean.html",
    "title": "Overloads for - mean | Marmos Demo",
    "keywords": "Overloads for - mean Module std.algorithm.iteration mean(r) T mean( R r ) Finds the mean (colloquially known as the average) of a range. For built-in numerical types, accurate Knuth & Welford mean calculation is used. For user-defined types, element by element summation is used. Additionally an extra parameter seed is needed in order to correctly seed the summation with the equivalent to 0 . The first overload of this function will return T.init if the range is empty. However, the second overload will return seed on empty ranges. This function is $(BIGOH r.length). Params T <parameter not found> The type of the return value. r R An $(REF_ALTTEXT input range, isInputRange, std,range,primitives) seed <parameter not found> For user defined types. Should be equivalent to 0 . Returns The mean of r when r is non-empty. mean(r, seed) <bug: unknown> mean( R r, T seed ) auto ditto"
  },
  "phobos/std/algorithm/iteration/Functions/permutations.html": {
    "href": "phobos/std/algorithm/iteration/Functions/permutations.html",
    "title": "Overloads for - permutations | Marmos Demo",
    "keywords": "Overloads for - permutations Module std.algorithm.iteration permutations(r) Permutations!(Range) permutations( Range r ) Lazily computes all permutations of r using $(HTTP en.wikipedia.org/wiki/Heap%27s_algorithm, Heap's algorithm). Params Range <parameter not found> the range type r Range the $(REF_ALTTEXT random access range, isRandomAccessRange, std,range,primitives) r = the $(REF_ALTTEXT random access range, isRandomAccessRange, std,range,primitives) to find the permutations for. Returns: A $(REF_ALTTEXT forward range, isForwardRange, std,range,primitives) of elements of which are an $(REF indexed, std,range) view into r . See_Also $(REF nextPermutation, std,algorithm,sorting)."
  },
  "phobos/std/algorithm/iteration/Functions/reduce.html": {
    "href": "phobos/std/algorithm/iteration/Functions/reduce.html",
    "title": "Overloads for - reduce | Marmos Demo",
    "keywords": "Overloads for - reduce Module std.algorithm.iteration reduce(r) <bug: unknown> reduce( R r ) auto Implements the homonym function (also known as accumulate , $(D compress), inject , or foldl ) present in various programming languages of functional flavor. There is also $(LREF fold) which does the same thing but with the opposite parameter order. The call reduce!(fun)(seed, range) first assigns seed to an internal variable result , also called the accumulator. Then, for each element x in range , result = fun(result, x) gets evaluated. Finally, result is returned. The one-argument version reduce!(fun)(range) works similarly, but it uses the first element of the range as the seed (the range must be non-empty). Returns the accumulated result Params fun <parameter not found> one or more functions See_Also $(HTTP en.wikipedia.org/wiki/Fold_(higher-order_function), Fold (higher-order function)) $(LREF fold) is functionally equivalent to $(LREF reduce) with the argument order reversed, and without the need to use $(REF_ALTTEXT tuple ,tuple,std,typecons) for multiple seeds. This makes it easier to use in UFCS chains. $(LREF sum) is similar to reduce!((a, b) => a + b) that offers pairwise summing of floating point numbers. reduce(seed, r) <bug: unknown> reduce( S seed, R r ) auto Implements the homonym function (also known as accumulate , $(D compress), inject , or foldl ) present in various programming languages of functional flavor. There is also $(LREF fold) which does the same thing but with the opposite parameter order. The call reduce!(fun)(seed, range) first assigns seed to an internal variable result , also called the accumulator. Then, for each element x in range , result = fun(result, x) gets evaluated. Finally, result is returned. The one-argument version reduce!(fun)(range) works similarly, but it uses the first element of the range as the seed (the range must be non-empty). Returns the accumulated result Params fun <parameter not found> one or more functions See_Also $(HTTP en.wikipedia.org/wiki/Fold_(higher-order_function), Fold (higher-order function)) $(LREF fold) is functionally equivalent to $(LREF reduce) with the argument order reversed, and without the need to use $(REF_ALTTEXT tuple ,tuple,std,typecons) for multiple seeds. This makes it easier to use in UFCS chains. $(LREF sum) is similar to reduce!((a, b) => a + b) that offers pairwise summing of floating point numbers."
  },
  "phobos/std/algorithm/iteration/Functions/reduceImpl.html": {
    "href": "phobos/std/algorithm/iteration/Functions/reduceImpl.html",
    "title": "Overloads for - reduceImpl | Marmos Demo",
    "keywords": "Overloads for - reduceImpl Module std.algorithm.iteration reduceImpl(r, args) <bug: unknown> reduceImpl( R r, Args args ) auto Implements the homonym function (also known as accumulate , $(D compress), inject , or foldl ) present in various programming languages of functional flavor. There is also $(LREF fold) which does the same thing but with the opposite parameter order. The call reduce!(fun)(seed, range) first assigns seed to an internal variable result , also called the accumulator. Then, for each element x in range , result = fun(result, x) gets evaluated. Finally, result is returned. The one-argument version reduce!(fun)(range) works similarly, but it uses the first element of the range as the seed (the range must be non-empty). Returns the accumulated result Params fun <parameter not found> one or more functions See_Also $(HTTP en.wikipedia.org/wiki/Fold_(higher-order_function), Fold (higher-order function)) $(LREF fold) is functionally equivalent to $(LREF reduce) with the argument order reversed, and without the need to use $(REF_ALTTEXT tuple ,tuple,std,typecons) for multiple seeds. This makes it easier to use in UFCS chains. $(LREF sum) is similar to reduce!((a, b) => a + b) that offers pairwise summing of floating point numbers."
  },
  "phobos/std/algorithm/iteration/Functions/reducePreImpl.html": {
    "href": "phobos/std/algorithm/iteration/Functions/reducePreImpl.html",
    "title": "Overloads for - reducePreImpl | Marmos Demo",
    "keywords": "Overloads for - reducePreImpl Module std.algorithm.iteration reducePreImpl(r, args) <bug: unknown> reducePreImpl( R r, Args args ) auto Implements the homonym function (also known as accumulate , $(D compress), inject , or foldl ) present in various programming languages of functional flavor. There is also $(LREF fold) which does the same thing but with the opposite parameter order. The call reduce!(fun)(seed, range) first assigns seed to an internal variable result , also called the accumulator. Then, for each element x in range , result = fun(result, x) gets evaluated. Finally, result is returned. The one-argument version reduce!(fun)(range) works similarly, but it uses the first element of the range as the seed (the range must be non-empty). Returns the accumulated result Params fun <parameter not found> one or more functions See_Also $(HTTP en.wikipedia.org/wiki/Fold_(higher-order_function), Fold (higher-order function)) $(LREF fold) is functionally equivalent to $(LREF reduce) with the argument order reversed, and without the need to use $(REF_ALTTEXT tuple ,tuple,std,typecons) for multiple seeds. This makes it easier to use in UFCS chains. $(LREF sum) is similar to reduce!((a, b) => a + b) that offers pairwise summing of floating point numbers."
  },
  "phobos/std/algorithm/iteration/Functions/splitWhen.html": {
    "href": "phobos/std/algorithm/iteration/Functions/splitWhen.html",
    "title": "Overloads for - splitWhen | Marmos Demo",
    "keywords": "Overloads for - splitWhen Module std.algorithm.iteration splitWhen(r) <bug: unknown> splitWhen( Range r ) auto Splits a forward range into subranges in places determined by a binary predicate. When iterating, one element of r is compared with pred to the next element. If pred return true, a new subrange is started for the next element. Otherwise, they are part of the same subrange. If the elements are compared with an inequality (!=) operator, consider $(LREF chunkBy) instead, as it's likely faster to execute. Params pred <parameter not found> Predicate for determining where to split. The earlier element in the source range is always given as the first argument. r = A $(REF_ALTTEXT forward range, isForwardRange, std,range,primitives) to be split. Returns: a range of subranges of r , split such that within a given subrange, calling pred with any pair of adjacent elements as arguments returns false . Copying the range currently has reference semantics, but this may change in the future. See_also $(LREF splitter), which uses elements as splitters instead of element-to-element relations."
  },
  "phobos/std/algorithm/iteration/Functions/splitter.html": {
    "href": "phobos/std/algorithm/iteration/Functions/splitter.html",
    "title": "Overloads for - splitter | Marmos Demo",
    "keywords": "Overloads for - splitter Module std.algorithm.iteration splitter(r, s) <bug: unknown> splitter( Range r, Separator s ) auto Lazily splits a range using an element or range as a separator. Separator ranges can be any narrow string type or sliceable range type. Two adjacent separators are considered to surround an empty element in the split range. Use filter!(a => !a.empty) on the result to compress empty elements. The predicate is passed to $(REF binaryFun, std,functional) and accepts any callable function that can be executed via pred(element, s) . Notes If splitting a string on whitespace and token compression is desired, consider using splitter without specifying a separator. If no separator is passed, the $(REF_ALTTEXT, unary, unaryFun, std,functional) predicate isTerminator decides whether to accept an element of r . Params pred <parameter not found> The predicate for comparing each element with the separator, defaulting to \"a == b\" . r Range The $(REF_ALTTEXT input range, isInputRange, std,range,primitives) to be split. Must support slicing and .length or be a narrow string type. s Separator The element (or range) to be treated as the separator between range segments to be split. isTerminator <parameter not found> The predicate for deciding where to split the range when no separator is passed keepSeparators <parameter not found> The flag for deciding if the separators are kept Constraints The predicate pred needs to accept an element of r and the separator s . Returns An input range of the subranges of elements between separators. If r is a $(REF_ALTTEXT forward range, isForwardRange, std,range,primitives) or $(REF_ALTTEXT bidirectional range, isBidirectionalRange, std,range,primitives), the returned range will be likewise. When a range is used a separator, bidirectionality isn't possible. If keepSeparators is equal to Yes.keepSeparators the output will also contain the separators. If an empty range is given, the result is an empty range. If a range with one separator is given, the result is a range with two empty elements. See_Also $(REF splitter, std,regex) for a version that splits using a regular expression defined separator, $(REF split, std,array) for a version that splits eagerly and $(LREF splitWhen), which compares adjacent elements instead of element against separator. splitter(r, s) <bug: unknown> splitter( Range r, Separator s ) auto ditto splitter(r) <bug: unknown> splitter( Range r ) auto ditto splitter(s) <bug: unknown> splitter( Range s ) auto Lazily splits the character-based range s into words, using whitespace as the delimiter. This function is character-range specific and, contrary to splitter!(std.uni.isWhite) , runs of whitespace will be merged together (no empty tokens will be produced). Params s Range The character-based range to be split. Must be a string, or a random-access range of character types. Returns An $(REF_ALTTEXT input range, isInputRange, std,range,primitives) of slices of the original range split by whitespace."
  },
  "phobos/std/algorithm/iteration/Functions/substitute.html": {
    "href": "phobos/std/algorithm/iteration/Functions/substitute.html",
    "title": "Overloads for - substitute | Marmos Demo",
    "keywords": "Overloads for - substitute Module std.algorithm.iteration substitute(r, substs) <bug: unknown> substitute( R r, Substs substs ) auto ditto substitute(value) <bug: unknown> substitute( Value value ) auto Returns a range with all occurrences of substs in r . replaced with their substitution. Single value replacements ('ö'.substitute!('ä', 'a', 'ö', 'o', 'ü', 'u)) are supported as well and in $(BIGOH 1). Params r <parameter not found> an $(REF_ALTTEXT input range, isInputRange, std,range,primitives) value Value a single value which can be substituted in $(BIGOH 1) substs <parameter not found> a set of replacements/substitutions pred <parameter not found> the equality function to test if element(s) are equal to value = a single value which can be substituted in $(BIGOH 1) substs = a set of replacements/substitutions pred = the equality function to test if element(s) are equal to a substitution Returns: a range with the substitutions replaced. See_Also $(REF replace, std, array) for an eager replace algorithm or $(REF translate, std, string), and $(REF tr, std, string) for string algorithms with translation tables."
  },
  "phobos/std/algorithm/iteration/Functions/sum.html": {
    "href": "phobos/std/algorithm/iteration/Functions/sum.html",
    "title": "Overloads for - sum | Marmos Demo",
    "keywords": "Overloads for - sum Module std.algorithm.iteration sum(r) <bug: unknown> sum( R r ) auto Sums elements of r , which must be a finite $(REF_ALTTEXT input range, isInputRange, std,range,primitives). Although conceptually sum(r) is equivalent to $(LREF fold)!((a, b) => a + b)(r, 0), sum uses specialized algorithms to maximize accuracy, as follows. $(UL $(LI If $(REF ElementType, std,range,primitives)!R is a floating-point type and R is a $(REF_ALTTEXT random-access range, isRandomAccessRange, std,range,primitives) with length and slicing, then sum uses the $(HTTP en.wikipedia.org/wiki/Pairwise_summation, pairwise summation) algorithm.) $(LI If ElementType!R is a floating-point type and R is a finite input range (but not a random-access range with slicing), then sum uses the $(HTTP en.wikipedia.org/wiki/Kahan_summation, Kahan summation) algorithm.) $(LI In all other cases, a simple element by element addition is done.) ) For floating point inputs, calculations are made in $(DDLINK spec/type, Types, real ) precision for real inputs and in double precision otherwise (Note this is a special case that deviates from fold 's behavior, which would have kept float precision for a float range). For all other types, the calculations are done in the same type obtained from from adding two elements of the range, which may be a different type from the elements themselves (for example, in case of $(DDSUBLINK spec/type,integer-promotions, integral promotion)). A seed may be passed to sum . Not only will this seed be used as an initial value, but its type will override all the above, and determine the algorithm and precision used for summation. If a seed is not passed, one is created with the value of typeof(r.front + r.front)(0) , or typeof(r.front + r.front).zero if no constructor exists that takes an int. Note that these specialized summing algorithms execute more primitive operations than vanilla summation. Therefore, if in certain cases maximum speed is required at expense of precision, one can use fold!((a, b) => a + b)(r, 0) , which is not specialized for summation. Params seed <parameter not found> the initial value of the summation r R a finite input range Returns The sum of all the elements in the range r. sum(r, seed) <bug: unknown> sum( R r, E seed ) auto ditto"
  },
  "phobos/std/algorithm/iteration/Functions/sumKahan.html": {
    "href": "phobos/std/algorithm/iteration/Functions/sumKahan.html",
    "title": "Overloads for - sumKahan | Marmos Demo",
    "keywords": "Overloads for - sumKahan Module std.algorithm.iteration sumKahan(result, r) <bug: unknown> sumKahan( Result result, R r ) auto"
  },
  "phobos/std/algorithm/iteration/Functions/sumPair.html": {
    "href": "phobos/std/algorithm/iteration/Functions/sumPair.html",
    "title": "Overloads for - sumPair | Marmos Demo",
    "keywords": "Overloads for - sumPair Module std.algorithm.iteration sumPair(r) <bug: unknown> sumPair( R r ) auto"
  },
  "phobos/std/algorithm/iteration/Functions/sumPairwise.html": {
    "href": "phobos/std/algorithm/iteration/Functions/sumPairwise.html",
    "title": "Overloads for - sumPairwise | Marmos Demo",
    "keywords": "Overloads for - sumPairwise Module std.algorithm.iteration sumPairwise(data) <bug: unknown> sumPairwise( R data ) auto"
  },
  "phobos/std/algorithm/iteration/Functions/sumPairwise16.html": {
    "href": "phobos/std/algorithm/iteration/Functions/sumPairwise16.html",
    "title": "Overloads for - sumPairwise16 | Marmos Demo",
    "keywords": "Overloads for - sumPairwise16 Module std.algorithm.iteration sumPairwise16(r) <bug: unknown> sumPairwise16( R r ) auto"
  },
  "phobos/std/algorithm/iteration/Functions/sumPairwiseN.html": {
    "href": "phobos/std/algorithm/iteration/Functions/sumPairwiseN.html",
    "title": "Overloads for - sumPairwiseN | Marmos Demo",
    "keywords": "Overloads for - sumPairwiseN Module std.algorithm.iteration sumPairwiseN(r) <bug: unknown> sumPairwiseN( R r ) auto"
  },
  "phobos/std/algorithm/iteration/Functions/uniq.html": {
    "href": "phobos/std/algorithm/iteration/Functions/uniq.html",
    "title": "Overloads for - uniq | Marmos Demo",
    "keywords": "Overloads for - uniq Module std.algorithm.iteration uniq(r) <bug: unknown> uniq( Range r ) auto Lazily iterates unique consecutive elements of the given range, which is assumed to be sorted (functionality akin to the $(HTTP wikipedia.org/wiki/_Uniq, uniq) system utility). Equivalence of elements is assessed by using the predicate pred , by default \"a == b\" . The predicate is passed to $(REF binaryFun, std,functional), and can either accept a string, or any callable that can be executed via pred(element, element) . If the given range is bidirectional, uniq also yields a $(REF_ALTTEXT bidirectional range, isBidirectionalRange, std,range,primitives). Params pred <parameter not found> Predicate for determining equivalence between range elements. r Range An $(REF_ALTTEXT input range, isInputRange, std,range,primitives) of elements to filter. Returns An $(REF_ALTTEXT input range, isInputRange, std,range,primitives) of consecutively unique elements in the original range. If r is also a forward range or bidirectional range, the returned range will be likewise."
  },
  "phobos/std/algorithm/iteration/Group/Functions/front.html": {
    "href": "phobos/std/algorithm/iteration/Group/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.algorithm.iteration Parent Group front() <bug: unknown> front( ) auto Returns: the front of the range"
  },
  "phobos/std/algorithm/iteration/Group/Functions/popFront.html": {
    "href": "phobos/std/algorithm/iteration/Group/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.algorithm.iteration Parent Group popFront() void popFront( )"
  },
  "phobos/std/algorithm/iteration/Group/Functions/save.html": {
    "href": "phobos/std/algorithm/iteration/Group/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.algorithm.iteration Parent Group save() <bug: unknown> save( )"
  },
  "phobos/std/algorithm/iteration/MapResult/Functions/front.html": {
    "href": "phobos/std/algorithm/iteration/MapResult/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.algorithm.iteration Parent MapResult front() <bug: unknown> front( ) auto"
  },
  "phobos/std/algorithm/iteration/MapResult/Functions/opIndex.html": {
    "href": "phobos/std/algorithm/iteration/MapResult/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.algorithm.iteration Parent MapResult opIndex(index) <bug: unknown> opIndex( opIndex_t index ) auto"
  },
  "phobos/std/algorithm/iteration/MapResult/Functions/opSlice.html": {
    "href": "phobos/std/algorithm/iteration/MapResult/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.algorithm.iteration Parent MapResult opSlice(low, high) <bug: unknown> opSlice( opSlice_t low, opSlice_t high ) auto"
  },
  "phobos/std/algorithm/iteration/MapResult/Functions/popFront.html": {
    "href": "phobos/std/algorithm/iteration/MapResult/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.algorithm.iteration Parent MapResult popFront() void popFront( )"
  },
  "phobos/std/algorithm/iteration/MapResult/Functions/save.html": {
    "href": "phobos/std/algorithm/iteration/MapResult/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.algorithm.iteration Parent MapResult save() <bug: unknown> save( ) auto"
  },
  "phobos/std/algorithm/iteration/Overview.html": {
    "href": "phobos/std/algorithm/iteration/Overview.html",
    "title": "Module - std.algorithm.iteration | Marmos Demo",
    "keywords": "Module - std.algorithm.iteration About This is a submodule of $(MREF std, algorithm). It contains generic iteration algorithms. $(SCRIPT inhibitQuickIndex = 1;) $(BOOKTABLE Cheat Sheet, $(TR $(TH Function Name) $(TH Description)) $(T2 cache, Eagerly evaluates and caches another range's front .) $(T2 cacheBidirectional, As above, but also provides back and popBack .) $(T2 chunkBy, chunkBy!((a,b) => a[1] == b[1])([[1, 1], [1, 2], [2, 2], [2, 1]]) returns a range containing 3 subranges: the first with just [1, 1] ; the second with the elements [1, 2] and [2, 2] ; and the third with just [2, 1] .) $(T2 cumulativeFold, cumulativeFold!((a, b) => a + b)([1, 2, 3, 4]) returns a lazily-evaluated range containing the successive reduced values 1 , 3 , 6 , 10 .) $(T2 each, each!writeln([1, 2, 3]) eagerly prints the numbers 1 , 2 and 3 on their own lines.) $(T2 filter, filter!(a => a > 0)([1, -1, 2, 0, -3]) iterates over elements 1 and 2 .) $(T2 filterBidirectional, Similar to filter , but also provides back and popBack at a small increase in cost.) $(T2 fold, fold!((a, b) => a + b)([1, 2, 3, 4]) returns 10 .) $(T2 group, group([5, 2, 2, 3, 3]) returns a range containing the tuples tuple(5, 1) , tuple(2, 2) , and tuple(3, 2) .) $(T2 joiner, joiner([\"hello\", \"world!\"], \"; \") returns a range that iterates over the characters \"hello; world!\" . No new string is created - the existing inputs are iterated.) $(T2 map, map!(a => a * 2)([1, 2, 3]) lazily returns a range with the numbers 2 , 4 , 6 .) $(T2 mean, Colloquially known as the average, mean([1, 2, 3]) returns 2 .) $(T2 permutations, Lazily computes all permutations using Heap's algorithm.) $(T2 reduce, reduce!((a, b) => a + b)([1, 2, 3, 4]) returns 10 . This is the old implementation of fold .) $(T2 splitWhen, Lazily splits a range by comparing adjacent elements.) $(T2 splitter, Lazily splits a range by a separator.) $(T2 substitute, [1, 2].substitute(1, 0.1) returns [0.1, 2] .) $(T2 sum, Same as fold , but specialized for accurate summation.) $(T2 uniq, Iterates over the unique elements in a range, which is assumed sorted.) ) Copyright: Andrei Alexandrescu 2008-. License: $(HTTP boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP erdani.com, Andrei Alexandrescu) Source: $(PHOBOSSRC std/algorithm/iteration.d) Macros T2=$(TR $(TDNW $(LREF $1)) $(TD $+)) Aliases Name Description BinaryArgs Eagerly iterates over r and calls fun with each element. binfuns Implements the homonym function (also known as accumulate , $(D compress), inject , or foldl ) present in various programming languages of functional flavor. There is also $(LREF fold) which does the same thing but with the opposite parameter order. The call reduce!(fun)(seed, range) first assigns seed to an internal variable result , also called the accumulator. Then, for each element x in range , result = fun(result, x) gets evaluated. Finally, result is returned. The one-argument version reduce!(fun)(range) works similarly, but it uses the first element of the range as the seed (the range must be non-empty). binfuns Similar to fold , but returns a range containing the successive reduced values. The call cumulativeFold!(fun)(range, seed) first assigns seed to an internal variable result , also called the accumulator. The returned range contains the values result = fun(result, x) lazily evaluated for each element x in range . Finally, the last element has the same value as fold!(fun)(seed, range) . The one-argument version cumulativeFold!(fun)(range) works similarly, but it returns the first element unchanged and uses it as seed for the next elements. This function is also known as $(HTTP en.cppreference.com/w/cpp/algorithm/partial_sum, partial_sum), $(HTTP docs.python.org/3/library/itertools.html#itertools.accumulate, accumulate), $(HTTP hackage.haskell.org/package/base-4.8.2.0/docs/Prelude.html#v:scanl, scan), $(HTTP mathworld.wolfram.com/CumulativeSum.html, Cumulative Sum). ReduceSeedType Structs Name Description ChunkByChunkImpl ChunkByGroup ChunkByImpl ChunkByImpl ChunkByOuter FilterBidiResult FilterResult Group ditto MapResult Permutations ditto SplitterResult UniqResult Functions Name Description cache cache eagerly evaluates $(REF_ALTTEXT front, front, std,range,primitives) of range on each construction or call to $(REF_ALTTEXT popFront, popFront, std,range,primitives), to store the result in a cache. The result is then directly returned when $(REF_ALTTEXT front, front, std,range,primitives) is called, rather than re-evaluated. cacheBidirectional ditto chunkBy Chunks an input range into subranges of equivalent adjacent elements. In other languages this is often called partitionBy , groupBy or sliceWhen . cumulativeFold Similar to fold , but returns a range containing the successive reduced values. The call cumulativeFold!(fun)(range, seed) first assigns seed to an internal variable result , also called the accumulator. The returned range contains the values result = fun(result, x) lazily evaluated for each element x in range . Finally, the last element has the same value as fold!(fun)(seed, range) . The one-argument version cumulativeFold!(fun)(range) works similarly, but it returns the first element unchanged and uses it as seed for the next elements. This function is also known as $(HTTP en.cppreference.com/w/cpp/algorithm/partial_sum, partial_sum), $(HTTP docs.python.org/3/library/itertools.html#itertools.accumulate, accumulate), $(HTTP hackage.haskell.org/package/base-4.8.2.0/docs/Prelude.html#v:scanl, scan), $(HTTP mathworld.wolfram.com/CumulativeSum.html, Cumulative Sum). cumulativeFoldImpl Similar to fold , but returns a range containing the successive reduced values. The call cumulativeFold!(fun)(range, seed) first assigns seed to an internal variable result , also called the accumulator. The returned range contains the values result = fun(result, x) lazily evaluated for each element x in range . Finally, the last element has the same value as fold!(fun)(seed, range) . The one-argument version cumulativeFold!(fun)(range) works similarly, but it returns the first element unchanged and uses it as seed for the next elements. This function is also known as $(HTTP en.cppreference.com/w/cpp/algorithm/partial_sum, partial_sum), $(HTTP docs.python.org/3/library/itertools.html#itertools.accumulate, accumulate), $(HTTP hackage.haskell.org/package/base-4.8.2.0/docs/Prelude.html#v:scanl, scan), $(HTTP mathworld.wolfram.com/CumulativeSum.html, Cumulative Sum). each Eagerly iterates over r and calls fun with each element. filter filter!(predicate)(range) returns a new range containing only elements x in range for which predicate(x) returns true . filterBidirectional Similar to filter , except it defines a $(REF_ALTTEXT bidirectional range, isBidirectionalRange, std,range,primitives). There is a speed disadvantage - the constructor spends time finding the last element in the range that satisfies the filtering condition (in addition to finding the first one). The advantage is that the filtered range can be spanned from both directions. Also, $(REF retro, std,range) can be applied against the filtered range. fold Implements the homonym function (also known as accumulate , $(D compress), inject , or foldl ) present in various programming languages of functional flavor, iteratively calling one or more predicates. group Groups consecutively equivalent elements into a single tuple of the element and the number of its repetitions. joiner Lazily joins a range of ranges with a separator. The separator itself is a range. If a separator is not provided, then the ranges are joined directly without anything in between them (often called flatten in other languages). map Implements the homonym function (also known as transform ) present in many languages of functional flavor. The call map!(fun)(range) returns a range of which elements are obtained by applying fun(a) left to right for all elements a in range . The original ranges are not changed. Evaluation is done lazily. mean Finds the mean (colloquially known as the average) of a range. permutations Lazily computes all permutations of r using $(HTTP en.wikipedia.org/wiki/Heap%27s_algorithm, Heap's algorithm). reduce Implements the homonym function (also known as accumulate , $(D compress), inject , or foldl ) present in various programming languages of functional flavor. There is also $(LREF fold) which does the same thing but with the opposite parameter order. The call reduce!(fun)(seed, range) first assigns seed to an internal variable result , also called the accumulator. Then, for each element x in range , result = fun(result, x) gets evaluated. Finally, result is returned. The one-argument version reduce!(fun)(range) works similarly, but it uses the first element of the range as the seed (the range must be non-empty). reduceImpl Implements the homonym function (also known as accumulate , $(D compress), inject , or foldl ) present in various programming languages of functional flavor. There is also $(LREF fold) which does the same thing but with the opposite parameter order. The call reduce!(fun)(seed, range) first assigns seed to an internal variable result , also called the accumulator. Then, for each element x in range , result = fun(result, x) gets evaluated. Finally, result is returned. The one-argument version reduce!(fun)(range) works similarly, but it uses the first element of the range as the seed (the range must be non-empty). reducePreImpl Implements the homonym function (also known as accumulate , $(D compress), inject , or foldl ) present in various programming languages of functional flavor. There is also $(LREF fold) which does the same thing but with the opposite parameter order. The call reduce!(fun)(seed, range) first assigns seed to an internal variable result , also called the accumulator. Then, for each element x in range , result = fun(result, x) gets evaluated. Finally, result is returned. The one-argument version reduce!(fun)(range) works similarly, but it uses the first element of the range as the seed (the range must be non-empty). splitter Lazily splits a range using an element or range as a separator. Separator ranges can be any narrow string type or sliceable range type. splitWhen Splits a forward range into subranges in places determined by a binary predicate. substitute ditto sum Sums elements of r , which must be a finite $(REF_ALTTEXT input range, isInputRange, std,range,primitives). Although conceptually sum(r) is equivalent to $(LREF fold)!((a, b) => a + b)(r, 0), sum uses specialized algorithms to maximize accuracy, as follows. sumKahan sumPair sumPairwise sumPairwise16 sumPairwiseN uniq Lazily iterates unique consecutive elements of the given range, which is assumed to be sorted (functionality akin to the $(HTTP wikipedia.org/wiki/_Uniq, uniq) system utility). Equivalence of elements is assessed by using the predicate pred , by default \"a == b\" . The predicate is passed to $(REF binaryFun, std,functional), and can either accept a string, or any callable that can be executed via pred(element, element) . If the given range is bidirectional, uniq also yields a $(REF_ALTTEXT bidirectional range, isBidirectionalRange, std,range,primitives). Variables Name Description hasDifferentAutodecoding isForeachBinaryIterable Eagerly iterates over r and calls fun with each element. isForeachIterable Eagerly iterates over r and calls fun with each element. isForeachUnaryIterable Eagerly iterates over r and calls fun with each element. isForeachUnaryWithIndexIterable Eagerly iterates over r and calls fun with each element. isRangeBinaryIterable Eagerly iterates over r and calls fun with each element. isRangeIterable Eagerly iterates over r and calls fun with each element. isRangeUnaryIterable Eagerly iterates over r and calls fun with each element. needlesAreNarrow s sourceIsNarrow"
  },
  "phobos/std/algorithm/iteration/Permutations/Functions/empty.html": {
    "href": "phobos/std/algorithm/iteration/Permutations/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.algorithm.iteration Parent Permutations empty() bool empty( ) Returns: true if the range is empty, false otherwise."
  },
  "phobos/std/algorithm/iteration/Permutations/Functions/front.html": {
    "href": "phobos/std/algorithm/iteration/Permutations/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.algorithm.iteration Parent Permutations front() <bug: unknown> front( ) auto Returns: the front of the range"
  },
  "phobos/std/algorithm/iteration/Permutations/Functions/popFront.html": {
    "href": "phobos/std/algorithm/iteration/Permutations/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.algorithm.iteration Parent Permutations popFront() void popFront( )"
  },
  "phobos/std/algorithm/iteration/Permutations/Functions/save.html": {
    "href": "phobos/std/algorithm/iteration/Permutations/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.algorithm.iteration Parent Permutations save() <bug: unknown> save( ) auto Returns: an independent copy of the permutations range."
  },
  "phobos/std/algorithm/iteration/SplitterResult/Functions/findTerminator.html": {
    "href": "phobos/std/algorithm/iteration/SplitterResult/Functions/findTerminator.html",
    "title": "Overloads for - findTerminator | Marmos Demo",
    "keywords": "Overloads for - findTerminator Module std.algorithm.iteration Parent SplitterResult findTerminator() void findTerminator( )"
  },
  "phobos/std/algorithm/iteration/SplitterResult/Functions/front.html": {
    "href": "phobos/std/algorithm/iteration/SplitterResult/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.algorithm.iteration Parent SplitterResult front() <bug: unknown> front( ) auto"
  },
  "phobos/std/algorithm/iteration/SplitterResult/Functions/popFront.html": {
    "href": "phobos/std/algorithm/iteration/SplitterResult/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.algorithm.iteration Parent SplitterResult popFront() void popFront( )"
  },
  "phobos/std/algorithm/iteration/SplitterResult/Functions/save.html": {
    "href": "phobos/std/algorithm/iteration/SplitterResult/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.algorithm.iteration Parent SplitterResult save() <bug: unknown> save( )"
  },
  "phobos/std/algorithm/iteration/Structs/ChunkByChunkImpl.html": {
    "href": "phobos/std/algorithm/iteration/Structs/ChunkByChunkImpl.html",
    "title": "Struct - ChunkByChunkImpl | Marmos Demo",
    "keywords": "Struct - ChunkByChunkImpl Module std.algorithm.iteration public struct ChunkByChunkImpl { // alias fun = <todo: marmos support pending>; // bool empty( ) ; // ElementType!(Range) front( ) ; // void popFront( ) ; // ElementType!(Range) prev; // <bug: unknown> r; } Aliases Name Description fun Functions Name Description empty front popFront Variables Name Description prev r"
  },
  "phobos/std/algorithm/iteration/Structs/ChunkByGroup.html": {
    "href": "phobos/std/algorithm/iteration/Structs/ChunkByGroup.html",
    "title": "Struct - ChunkByGroup | Marmos Demo",
    "keywords": "Struct - ChunkByGroup Module std.algorithm.iteration public struct ChunkByGroup { // alias OuterRange = <todo: marmos support pending>; // <bug: unknown> cargo( ) ; // bool empty( ) ; // <bug: unknown> front( ) auto; // void popFront( ) ; // <bug: unknown> save( ) auto; // Range current; // size_t groupNum; // RefCounted!(OuterRange) mothership; // Range start; } Aliases Name Description OuterRange Functions Name Description cargo empty front popFront save Variables Name Description current groupNum mothership start"
  },
  "phobos/std/algorithm/iteration/Structs/ChunkByImpl.html": {
    "href": "phobos/std/algorithm/iteration/Structs/ChunkByImpl.html",
    "title": "Struct - ChunkByImpl | Marmos Demo",
    "keywords": "Struct - ChunkByImpl Module std.algorithm.iteration public struct ChunkByImpl { // alias InnerRange = <todo: marmos support pending>; // alias OuterRange = <todo: marmos support pending>; // bool empty( ) ; // <bug: unknown> front( ) auto; // <bug: unknown> impl( ) ; // <bug: unknown> implPL( ) ; // void popFront( ) ; // <bug: unknown> save( ) auto; // bool eqEquivalenceAssured; } Aliases Name Description InnerRange OuterRange Functions Name Description empty front impl implPL popFront save Variables Name Description eqEquivalenceAssured"
  },
  "phobos/std/algorithm/iteration/Structs/ChunkByOuter.html": {
    "href": "phobos/std/algorithm/iteration/Structs/ChunkByOuter.html",
    "title": "Struct - ChunkByOuter | Marmos Demo",
    "keywords": "Struct - ChunkByOuter Module std.algorithm.iteration public struct ChunkByOuter { // Range current; // size_t groupNum; // Range next; // bool nextUpdated; } Variables Name Description current groupNum next nextUpdated"
  },
  "phobos/std/algorithm/iteration/Structs/FilterBidiResult.html": {
    "href": "phobos/std/algorithm/iteration/Structs/FilterBidiResult.html",
    "title": "Struct - FilterBidiResult | Marmos Demo",
    "keywords": "Struct - FilterBidiResult Module std.algorithm.iteration public struct FilterBidiResult { // alias R = <todo: marmos support pending>; // <bug: unknown> back( ) auto; // bool empty( ) ; // <bug: unknown> front( ) auto; // void popBack( ) ; // void popFront( ) ; // <bug: unknown> save( ) auto; } Aliases Name Description R Functions Name Description back empty front popBack popFront save"
  },
  "phobos/std/algorithm/iteration/Structs/FilterResult.html": {
    "href": "phobos/std/algorithm/iteration/Structs/FilterResult.html",
    "title": "Struct - FilterResult | Marmos Demo",
    "keywords": "Struct - FilterResult Module std.algorithm.iteration public struct FilterResult { // alias R = <todo: marmos support pending>; // <bug: unknown> front( ) auto; // <bug: unknown> opSlice( ) auto; // void popFront( ) ; // void prime( ) ; // <bug: unknown> save( ) auto; // bool empty; } Aliases Name Description R Functions Name Description front opSlice popFront prime save Variables Name Description empty"
  },
  "phobos/std/algorithm/iteration/Structs/Group.html": {
    "href": "phobos/std/algorithm/iteration/Structs/Group.html",
    "title": "Struct - Group | Marmos Demo",
    "keywords": "Struct - Group Module std.algorithm.iteration public struct Group { // alias comp = <todo: marmos support pending>; // alias E = <todo: marmos support pending>; // alias MutableE = <todo: marmos support pending>; // Returns: the front of the range <bug: unknown> front( ) auto; // void popFront( ) ; // <bug: unknown> save( ) ; // bool empty; } About ditto Aliases Name Description comp E MutableE Functions Name Description front Returns: the front of the range popFront save Variables Name Description empty"
  },
  "phobos/std/algorithm/iteration/Structs/MapResult.html": {
    "href": "phobos/std/algorithm/iteration/Structs/MapResult.html",
    "title": "Struct - MapResult | Marmos Demo",
    "keywords": "Struct - MapResult Module std.algorithm.iteration public struct MapResult { // alias opIndex_t = <todo: marmos support pending>; // alias opSlice_t = <todo: marmos support pending>; // alias R = <todo: marmos support pending>; // <bug: unknown> front( ) auto; // <bug: unknown> opIndex( opIndex_t index ) auto; // <bug: unknown> opSlice( opSlice_t low, opSlice_t high ) auto; // void popFront( ) ; // <bug: unknown> save( ) auto; // bool empty; } Aliases Name Description opIndex_t opSlice_t R Functions Name Description front opIndex opSlice popFront save Variables Name Description empty"
  },
  "phobos/std/algorithm/iteration/Structs/Permutations.html": {
    "href": "phobos/std/algorithm/iteration/Structs/Permutations.html",
    "title": "Struct - Permutations | Marmos Demo",
    "keywords": "Struct - Permutations Module std.algorithm.iteration public struct Permutations { // Returns: `true` if the range is empty, `false` otherwise. bool empty( ) ; // Returns: the front of the range <bug: unknown> front( ) auto; // void popFront( ) ; // Returns: an independent copy of the permutations range. <bug: unknown> save( ) auto; } About ditto Functions Name Description empty Returns: true if the range is empty, false otherwise. front Returns: the front of the range popFront save Returns: an independent copy of the permutations range."
  },
  "phobos/std/algorithm/iteration/Structs/SplitterResult.html": {
    "href": "phobos/std/algorithm/iteration/Structs/SplitterResult.html",
    "title": "Struct - SplitterResult | Marmos Demo",
    "keywords": "Struct - SplitterResult Module std.algorithm.iteration public struct SplitterResult { // void findTerminator( ) ; // <bug: unknown> front( ) auto; // void popFront( ) ; // <bug: unknown> save( ) ; // bool empty; // __enumMember fullSlicing; } Functions Name Description findTerminator front popFront save Variables Name Description empty fullSlicing"
  },
  "phobos/std/algorithm/iteration/Structs/UniqResult.html": {
    "href": "phobos/std/algorithm/iteration/Structs/UniqResult.html",
    "title": "Struct - UniqResult | Marmos Demo",
    "keywords": "Struct - UniqResult Module std.algorithm.iteration public struct UniqResult { // ElementType!(Range) back( ) ; // ElementType!(Range) front( ) ; // <bug: unknown> opSlice( ) auto; // void popBack( ) ; // void popFront( ) ; // <bug: unknown> save( ) ; // bool empty; } Functions Name Description back front opSlice popBack popFront save Variables Name Description empty"
  },
  "phobos/std/algorithm/iteration/UniqResult/Functions/back.html": {
    "href": "phobos/std/algorithm/iteration/UniqResult/Functions/back.html",
    "title": "Overloads for - back | Marmos Demo",
    "keywords": "Overloads for - back Module std.algorithm.iteration Parent UniqResult back() ElementType!(Range) back( )"
  },
  "phobos/std/algorithm/iteration/UniqResult/Functions/front.html": {
    "href": "phobos/std/algorithm/iteration/UniqResult/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.algorithm.iteration Parent UniqResult front() ElementType!(Range) front( )"
  },
  "phobos/std/algorithm/iteration/UniqResult/Functions/opSlice.html": {
    "href": "phobos/std/algorithm/iteration/UniqResult/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.algorithm.iteration Parent UniqResult opSlice() <bug: unknown> opSlice( ) auto"
  },
  "phobos/std/algorithm/iteration/UniqResult/Functions/popBack.html": {
    "href": "phobos/std/algorithm/iteration/UniqResult/Functions/popBack.html",
    "title": "Overloads for - popBack | Marmos Demo",
    "keywords": "Overloads for - popBack Module std.algorithm.iteration Parent UniqResult popBack() void popBack( )"
  },
  "phobos/std/algorithm/iteration/UniqResult/Functions/popFront.html": {
    "href": "phobos/std/algorithm/iteration/UniqResult/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.algorithm.iteration Parent UniqResult popFront() void popFront( )"
  },
  "phobos/std/algorithm/iteration/UniqResult/Functions/save.html": {
    "href": "phobos/std/algorithm/iteration/UniqResult/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.algorithm.iteration Parent UniqResult save() <bug: unknown> save( )"
  },
  "phobos/std/algorithm/mutation/Functions/bringToFront.html": {
    "href": "phobos/std/algorithm/mutation/Functions/bringToFront.html",
    "title": "Overloads for - bringToFront | Marmos Demo",
    "keywords": "Overloads for - bringToFront Module std.algorithm.mutation bringToFront(front, back) size_t bringToFront( InputRange front, ForwardRange back ) bringToFront takes two ranges front and back , which may be of different types. Considering the concatenation of front and back one unified range, bringToFront rotates that unified range such that all elements in back are brought to the beginning of the unified range. The relative ordering of elements in front and back , respectively, remains unchanged. The bringToFront function treats strings at the code unit level and it is not concerned with Unicode character integrity. bringToFront is designed as a function for moving elements in ranges, not as a string function. Performs $(BIGOH max(front.length, back.length)) evaluations of $(D swap). The bringToFront function can rotate elements in one buffer left or right, swap buffers of equal length, and even move elements across disjoint buffers of different types and different lengths. Preconditions Either front and back are disjoint, or back is reachable from front and front is not reachable from $(D back). Params front InputRange an $(REF_ALTTEXT input range, isInputRange, std,range,primitives) back ForwardRange a $(REF_ALTTEXT forward range, isForwardRange, std,range,primitives) Returns The number of elements brought to the front, i.e., the length of back . See_Also $(LINK2 http://en.cppreference.com/w/cpp/algorithm/rotate, STL's rotate )"
  },
  "phobos/std/algorithm/mutation/Functions/bringToFrontImpl.html": {
    "href": "phobos/std/algorithm/mutation/Functions/bringToFrontImpl.html",
    "title": "Overloads for - bringToFrontImpl | Marmos Demo",
    "keywords": "Overloads for - bringToFrontImpl Module std.algorithm.mutation bringToFrontImpl(front, back) size_t bringToFrontImpl( InputRange front, ForwardRange back )"
  },
  "phobos/std/algorithm/mutation/Functions/copy.html": {
    "href": "phobos/std/algorithm/mutation/Functions/copy.html",
    "title": "Overloads for - copy | Marmos Demo",
    "keywords": "Overloads for - copy Module std.algorithm.mutation copy(source, target) TargetRange copy( SourceRange source, TargetRange target ) Copies the content of source into target and returns the remaining (unfilled) part of target . Preconditions: target shall have enough room to accommodate the entirety of source . Params source SourceRange an $(REF_ALTTEXT input range, isInputRange, std,range,primitives) target TargetRange an output range Returns The unfilled part of target"
  },
  "phobos/std/algorithm/mutation/Functions/fill.html": {
    "href": "phobos/std/algorithm/mutation/Functions/fill.html",
    "title": "Overloads for - fill | Marmos Demo",
    "keywords": "Overloads for - fill Module std.algorithm.mutation fill(range, value) void fill( Range range, Value value ) Assigns value to each element of input range range . Alternatively, instead of using a single value to fill the range , a filler $(REF_ALTTEXT forward range, isForwardRange, std,range,primitives) can be provided. The length of filler and range do not need to match, but filler must not be empty. Params range Range An $(REF_ALTTEXT input range, isInputRange, std,range,primitives) that exposes references to its elements and has assignable elements value Value Assigned to each element of range filler <parameter not found> A $(REF_ALTTEXT forward range, isForwardRange, std,range,primitives) representing the fill pattern. Throws: If filler is empty. See_Also $(LREF uninitializedFill) $(LREF initializeAll) fill(range, filler) void fill( InputRange range, ForwardRange filler ) ditto"
  },
  "phobos/std/algorithm/mutation/Functions/initializeAll.html": {
    "href": "phobos/std/algorithm/mutation/Functions/initializeAll.html",
    "title": "Overloads for - initializeAll | Marmos Demo",
    "keywords": "Overloads for - initializeAll Module std.algorithm.mutation initializeAll(range) void initializeAll( Range range ) Initializes all elements of range with their .init value. Assumes that the elements of the range are uninitialized. This function is unavailable if T is a struct and T.this() is annotated with @disable . Params range Range An $(REF_ALTTEXT input range, isInputRange, std,range,primitives) that exposes references to its elements and has assignable elements See_Also $(LREF fill) $(LREF uninitializedFill) initializeAll(range) void initializeAll( Range range ) ditto"
  },
  "phobos/std/algorithm/mutation/Functions/move.html": {
    "href": "phobos/std/algorithm/mutation/Functions/move.html",
    "title": "Overloads for - move | Marmos Demo",
    "keywords": "Overloads for - move Module std.algorithm.mutation move(source, target) void move( T source, T target ) Moves source into target , via a destructive copy when necessary. If T is a struct with a destructor or postblit defined, source is reset to its .init value after it is moved into target, otherwise it is left unchanged. Preconditions If source has internal pointers that point to itself and doesn't define opPostMove, it cannot be moved, and will trigger an assertion failure. Params source T Data to copy. target T Where to copy into. The destructor, if any, is invoked before the copy is performed. move(source) T move( T source ) Ditto"
  },
  "phobos/std/algorithm/mutation/Functions/moveAll.html": {
    "href": "phobos/std/algorithm/mutation/Functions/moveAll.html",
    "title": "Overloads for - moveAll | Marmos Demo",
    "keywords": "Overloads for - moveAll Module std.algorithm.mutation moveAll(src, tgt) InputRange2 moveAll( InputRange1 src, InputRange2 tgt ) Calls move(a, b) for each element a in src and the corresponding element b in tgt , in increasing order. Preconditions walkLength(src) <= walkLength(tgt) . This precondition will be asserted. If you cannot ensure there is enough room in tgt to accommodate all of src use $(LREF moveSome) instead. Params src InputRange1 An $(REF_ALTTEXT input range, isInputRange, std,range,primitives) with movable elements. tgt InputRange2 An $(REF_ALTTEXT input range, isInputRange, std,range,primitives) with elements that elements from src can be moved into. Returns: The leftover portion of tgt after all elements from src have been moved."
  },
  "phobos/std/algorithm/mutation/Functions/moveAllImpl.html": {
    "href": "phobos/std/algorithm/mutation/Functions/moveAllImpl.html",
    "title": "Overloads for - moveAllImpl | Marmos Demo",
    "keywords": "Overloads for - moveAllImpl Module std.algorithm.mutation moveAllImpl(src, tgt) InputRange2 moveAllImpl( InputRange1 src, InputRange2 tgt )"
  },
  "phobos/std/algorithm/mutation/Functions/moveEmplace.html": {
    "href": "phobos/std/algorithm/mutation/Functions/moveEmplace.html",
    "title": "Overloads for - moveEmplace | Marmos Demo",
    "keywords": "Overloads for - moveEmplace Module std.algorithm.mutation moveEmplace(source, target) void moveEmplace( T source, T target ) Similar to $(LREF move) but assumes target is uninitialized. This is more efficient because source can be blitted over target without destroying or initializing it first. Params source T value to be moved into target target T uninitialized value to be filled by source"
  },
  "phobos/std/algorithm/mutation/Functions/moveEmplaceAll.html": {
    "href": "phobos/std/algorithm/mutation/Functions/moveEmplaceAll.html",
    "title": "Overloads for - moveEmplaceAll | Marmos Demo",
    "keywords": "Overloads for - moveEmplaceAll Module std.algorithm.mutation moveEmplaceAll(src, tgt) InputRange2 moveEmplaceAll( InputRange1 src, InputRange2 tgt ) Similar to $(LREF moveAll) but assumes all elements in tgt are uninitialized. Uses $(LREF moveEmplace) to move elements from src over elements from tgt ."
  },
  "phobos/std/algorithm/mutation/Functions/moveEmplaceImpl.html": {
    "href": "phobos/std/algorithm/mutation/Functions/moveEmplaceImpl.html",
    "title": "Overloads for - moveEmplaceImpl | Marmos Demo",
    "keywords": "Overloads for - moveEmplaceImpl Module std.algorithm.mutation moveEmplaceImpl(target, source) void moveEmplaceImpl( T target, T source )"
  },
  "phobos/std/algorithm/mutation/Functions/moveEmplaceSome.html": {
    "href": "phobos/std/algorithm/mutation/Functions/moveEmplaceSome.html",
    "title": "Overloads for - moveEmplaceSome | Marmos Demo",
    "keywords": "Overloads for - moveEmplaceSome Module std.algorithm.mutation moveEmplaceSome(src, tgt) Tuple!(InputRange1InputRange2) moveEmplaceSome( InputRange1 src, InputRange2 tgt ) Same as $(LREF moveSome) but assumes all elements in tgt are uninitialized. Uses $(LREF moveEmplace) to move elements from src over elements from tgt ."
  },
  "phobos/std/algorithm/mutation/Functions/moveImpl.html": {
    "href": "phobos/std/algorithm/mutation/Functions/moveImpl.html",
    "title": "Overloads for - moveImpl | Marmos Demo",
    "keywords": "Overloads for - moveImpl Module std.algorithm.mutation moveImpl(target, source) void moveImpl( T target, T source ) moveImpl(source) T moveImpl( T source )"
  },
  "phobos/std/algorithm/mutation/Functions/moveSome.html": {
    "href": "phobos/std/algorithm/mutation/Functions/moveSome.html",
    "title": "Overloads for - moveSome | Marmos Demo",
    "keywords": "Overloads for - moveSome Module std.algorithm.mutation moveSome(src, tgt) Tuple!(InputRange1InputRange2) moveSome( InputRange1 src, InputRange2 tgt ) Calls move(a, b) for each element a in src and the corresponding element b in tgt , in increasing order, stopping when either range has been exhausted. Params src InputRange1 An $(REF_ALTTEXT input range, isInputRange, std,range,primitives) with movable elements. tgt InputRange2 An $(REF_ALTTEXT input range, isInputRange, std,range,primitives) with elements that elements from src can be moved into. Returns: The leftover portions of the two ranges after one or the other of the ranges have been exhausted."
  },
  "phobos/std/algorithm/mutation/Functions/moveSomeImpl.html": {
    "href": "phobos/std/algorithm/mutation/Functions/moveSomeImpl.html",
    "title": "Overloads for - moveSomeImpl | Marmos Demo",
    "keywords": "Overloads for - moveSomeImpl Module std.algorithm.mutation moveSomeImpl(src, tgt) Tuple!(InputRange1InputRange2) moveSomeImpl( InputRange1 src, InputRange2 tgt )"
  },
  "phobos/std/algorithm/mutation/Functions/remove.html": {
    "href": "phobos/std/algorithm/mutation/Functions/remove.html",
    "title": "Overloads for - remove | Marmos Demo",
    "keywords": "Overloads for - remove Module std.algorithm.mutation remove(range, offset) Range remove( Range range, Offset offset ) Eliminates elements at given offsets from range and returns the shortened range. For example, here is how to remove a single element from an array $(RUNNABLE_EXAMPLE ---- import std.algorithm.mutation; string[] a = [ \"a\", \"b\", \"c\", \"d\" ]; a = a.remove(1); // remove element at offset 1 assert(a == [ \"a\", \"c\", \"d\"]); ---- ) Note that remove does not change the length of the original range directly; instead, it returns the shortened range. If its return value is not assigned to the original range, the original range will retain its original length, though its contents will have changed: $(RUNNABLE_EXAMPLE ---- import std.algorithm.mutation; int[] a = [ 3, 5, 7, 8 ]; assert(remove(a, 1) == [ 3, 7, 8 ]); assert(a == [ 3, 7, 8, 8 ]); ---- ) The element at offset 1 has been removed and the rest of the elements have shifted up to fill its place, however, the original array remains of the same length. This is because all functions in std.algorithm only change $(I content), not $(I topology). The value 8 is repeated because $(LREF move) was invoked to rearrange elements, and on integers move simply copies the source to the destination. To replace a with the effect of the removal, simply assign the slice returned by remove to it, as shown in the first example. $(H3 $(LNAME2 remove-multiple, Removing multiple elements)) Multiple indices can be passed into remove . In that case, elements at the respective indices are all removed. The indices must be passed in increasing order, otherwise an exception occurs. $(RUNNABLE_EXAMPLE ---- import std.algorithm.mutation; int[] a = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; assert(remove(a, 1, 3, 5) == [ 0, 2, 4, 6, 7, 8, 9, 10 ]); ---- ) Note that all indices refer to slots in the $(I original) array, not in the array as it is being progressively shortened. Tuples of two integral offsets can be supplied to remove a range of indices $(RUNNABLE_EXAMPLE ---- import std.algorithm.mutation, std.typecons; int[] a = [ 3, 4, 5, 6, 7]; // remove elements at indices 1 and 2 assert(remove(a, tuple(1, 3)) == [ 3, 6, 7 ]); ---- ) The tuple passes in a range closed to the left and open to the right (consistent with built-in slices), e.g. tuple(1, 3) means indices 1 and 2 but not 3 . Finally, any combination of integral offsets and tuples composed of two integral offsets can be passed in: $(RUNNABLE_EXAMPLE ---- import std.algorithm.mutation, std.typecons; int[] a = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; a = remove(a, 1, tuple(3, 5), 9); assert(a == [ 0, 2, 5, 6, 7, 8, 10 ]); ---- ) In this case, the slots at positions 1, 3, 4, and 9 are removed from the array. $(H3 $(LNAME2 remove-moving, Moving strategy)) If the need is to remove some elements in the range but the order of the remaining elements does not have to be preserved, you may want to pass SwapStrategy.unstable to remove . $(RUNNABLE_EXAMPLE ---- import std.algorithm.mutation; int[] a = [ 0, 1, 2, 3 ]; assert(remove!(SwapStrategy.unstable)(a, 1) == [ 0, 3, 2 ]); ---- ) In the case above, the element at slot 1 is removed, but replaced with the last element of the range. Taking advantage of the relaxation of the stability requirement, remove moved elements from the end of the array over the slots to be removed. This way there is less data movement to be done which improves the execution time of the function. remove works on bidirectional ranges that have assignable lvalue elements. The moving strategy is (listed from fastest to slowest): $(UL $(LI If $(D s == SwapStrategy.unstable && isRandomAccessRange!Range && hasLength!Range && hasLvalueElements!Range), then elements are moved from the end of the range into the slots to be filled. In this case, the absolute minimum of moves is performed.) $(LI Otherwise, if $(D s == SwapStrategy.unstable && isBidirectionalRange!Range && hasLength!Range && hasLvalueElements!Range), then elements are still moved from the end of the range, but time is spent on advancing between slots by repeated calls to range.popFront .) $(LI Otherwise, elements are moved incrementally towards the front of range ; a given element is never moved several times, but more elements are moved than in the previous cases.) ) Params s <parameter not found> a SwapStrategy to determine if the original order needs to be preserved range Range a $(REF_ALTTEXT bidirectional range, isBidirectionalRange, std,range,primitives) range = a $(REF_ALTTEXT bidirectional range, isBidirectionalRange, std,range,primitives) with a length member offset = which element(s) to remove Returns A range containing elements of range with 1 or more elements removed. remove(range, offset) Range remove( Range range, Offset offset ) ditto remove(range) Range remove( Range range ) Reduces the length of the $(REF_ALTTEXT bidirectional range, isBidirectionalRange, std,range,primitives) range by removing elements that satisfy pred . If s = SwapStrategy.unstable , elements are moved from the right end of the range over the elements to eliminate. If s = SwapStrategy.stable (the default), elements are moved progressively to front such that their relative order is preserved. Returns the filtered range. Params range Range a bidirectional ranges with lvalue elements or mutable character arrays Returns the range with all of the elements where pred is true removed"
  },
  "phobos/std/algorithm/mutation/Functions/removeImpl.html": {
    "href": "phobos/std/algorithm/mutation/Functions/removeImpl.html",
    "title": "Overloads for - removeImpl | Marmos Demo",
    "keywords": "Overloads for - removeImpl Module std.algorithm.mutation removeImpl(range, offset) <bug: unknown> removeImpl( Range range, Offset offset ) auto"
  },
  "phobos/std/algorithm/mutation/Functions/removePredStable.html": {
    "href": "phobos/std/algorithm/mutation/Functions/removePredStable.html",
    "title": "Overloads for - removePredStable | Marmos Demo",
    "keywords": "Overloads for - removePredStable Module std.algorithm.mutation removePredStable(range) Range removePredStable( Range range )"
  },
  "phobos/std/algorithm/mutation/Functions/removePredString.html": {
    "href": "phobos/std/algorithm/mutation/Functions/removePredString.html",
    "title": "Overloads for - removePredString | Marmos Demo",
    "keywords": "Overloads for - removePredString Module std.algorithm.mutation removePredString(range) Range removePredString( Range range )"
  },
  "phobos/std/algorithm/mutation/Functions/removePredUnstable.html": {
    "href": "phobos/std/algorithm/mutation/Functions/removePredUnstable.html",
    "title": "Overloads for - removePredUnstable | Marmos Demo",
    "keywords": "Overloads for - removePredUnstable Module std.algorithm.mutation removePredUnstable(range) Range removePredUnstable( Range range )"
  },
  "phobos/std/algorithm/mutation/Functions/removeStable.html": {
    "href": "phobos/std/algorithm/mutation/Functions/removeStable.html",
    "title": "Overloads for - removeStable | Marmos Demo",
    "keywords": "Overloads for - removeStable Module std.algorithm.mutation removeStable(range, offset) Range removeStable( Range range, Offset offset )"
  },
  "phobos/std/algorithm/mutation/Functions/removeStableString.html": {
    "href": "phobos/std/algorithm/mutation/Functions/removeStableString.html",
    "title": "Overloads for - removeStableString | Marmos Demo",
    "keywords": "Overloads for - removeStableString Module std.algorithm.mutation removeStableString(range, offsets) Range removeStableString( Range range, Offset offsets )"
  },
  "phobos/std/algorithm/mutation/Functions/removeUnstable.html": {
    "href": "phobos/std/algorithm/mutation/Functions/removeUnstable.html",
    "title": "Overloads for - removeUnstable | Marmos Demo",
    "keywords": "Overloads for - removeUnstable Module std.algorithm.mutation removeUnstable(range, offset) Range removeUnstable( Range range, Offset offset )"
  },
  "phobos/std/algorithm/mutation/Functions/reverse.html": {
    "href": "phobos/std/algorithm/mutation/Functions/reverse.html",
    "title": "Overloads for - reverse | Marmos Demo",
    "keywords": "Overloads for - reverse Module std.algorithm.mutation reverse(r) Range reverse( Range r ) Reverses r in-place. Performs r.length / 2 evaluations of swap . UTF sequences consisting of multiple code units are preserved properly. Params r Range a $(REF_ALTTEXT bidirectional range, isBidirectionalRange, std,range,primitives) with either swappable elements, a random access range with a length member, or a narrow string Returns: r Note When passing a string with unicode modifiers on characters, such as \\u0301 , this function will not properly keep the position of the modifier. For example, reversing ba\\u0301d (\"bád\") will result in d\\u0301ab (\"d́ab\") instead of da\\u0301b (\"dáb\"). See_Also: $(REF retro, std,range) for a lazy reverse without changing r"
  },
  "phobos/std/algorithm/mutation/Functions/strip.html": {
    "href": "phobos/std/algorithm/mutation/Functions/strip.html",
    "title": "Overloads for - strip | Marmos Demo",
    "keywords": "Overloads for - strip Module std.algorithm.mutation strip(range, element) Range strip( Range range, E element ) The strip group of functions allow stripping of either leading, trailing, or both leading and trailing elements. The stripLeft function will strip the front of the range, the stripRight function will strip the back of the range, while the strip function will strip both the front and back of the range. Note that the strip and stripRight functions require the range to be a $(LREF BidirectionalRange) range. All of these functions come in two varieties: one takes a target element, where the range will be stripped as long as this element can be found. The other takes a lambda predicate, where the range will be stripped as long as the predicate returns true. Params range Range a $(REF_ALTTEXT bidirectional range, isBidirectionalRange, std,range,primitives) or $(REF_ALTTEXT input range, isInputRange, std,range,primitives) element = the elements to remove Returns a Range with all of range except element at the start and end strip(range) Range strip( Range range ) ditto"
  },
  "phobos/std/algorithm/mutation/Functions/stripLeft.html": {
    "href": "phobos/std/algorithm/mutation/Functions/stripLeft.html",
    "title": "Overloads for - stripLeft | Marmos Demo",
    "keywords": "Overloads for - stripLeft Module std.algorithm.mutation stripLeft(range, element) Range stripLeft( Range range, E element ) ditto stripLeft(range) Range stripLeft( Range range ) ditto"
  },
  "phobos/std/algorithm/mutation/Functions/stripRight.html": {
    "href": "phobos/std/algorithm/mutation/Functions/stripRight.html",
    "title": "Overloads for - stripRight | Marmos Demo",
    "keywords": "Overloads for - stripRight Module std.algorithm.mutation stripRight(range, element) Range stripRight( Range range, E element ) ditto stripRight(range) Range stripRight( Range range ) ditto"
  },
  "phobos/std/algorithm/mutation/Functions/swap.html": {
    "href": "phobos/std/algorithm/mutation/Functions/swap.html",
    "title": "Overloads for - swap | Marmos Demo",
    "keywords": "Overloads for - swap Module std.algorithm.mutation swap(lhs, rhs) void swap( T lhs, T rhs ) Swaps lhs and rhs . The instances lhs and rhs are moved in memory, without ever calling opAssign , nor any other function. T need not be assignable at all to be swapped. If lhs and rhs reference the same instance, then nothing is done. lhs and rhs must be mutable. If T is a struct or union, then its fields must also all be (recursively) mutable. Params lhs T Data to be swapped with rhs . rhs T Data to be swapped with lhs . swap(lhs, rhs) void swap( T lhs, T rhs ) ditto"
  },
  "phobos/std/algorithm/mutation/Functions/swapAt.html": {
    "href": "phobos/std/algorithm/mutation/Functions/swapAt.html",
    "title": "Overloads for - swapAt | Marmos Demo",
    "keywords": "Overloads for - swapAt Module std.algorithm.mutation swapAt(r, i1, i2) void swapAt( R r, size_t i1, size_t i2 ) Swaps two elements in-place of a range r , specified by their indices i1 and i2 . Params r R a range with swappable elements i1 size_t first index i2 size_t second index"
  },
  "phobos/std/algorithm/mutation/Functions/swapFront.html": {
    "href": "phobos/std/algorithm/mutation/Functions/swapFront.html",
    "title": "Overloads for - swapFront | Marmos Demo",
    "keywords": "Overloads for - swapFront Module std.algorithm.mutation swapFront(r1, r2) void swapFront( R1 r1, R2 r2 )"
  },
  "phobos/std/algorithm/mutation/Functions/swapRanges.html": {
    "href": "phobos/std/algorithm/mutation/Functions/swapRanges.html",
    "title": "Overloads for - swapRanges | Marmos Demo",
    "keywords": "Overloads for - swapRanges Module std.algorithm.mutation swapRanges(r1, r2) Tuple!(InputRange1InputRange2) swapRanges( InputRange1 r1, InputRange2 r2 ) Swaps all elements of r1 with successive elements in r2 . Returns a tuple containing the remainder portions of r1 and $(D r2) that were not swapped (one of them will be empty). The ranges may be of different types but must have the same element type and support swapping. Params r1 InputRange1 an $(REF_ALTTEXT input range, isInputRange, std,range,primitives) with swappable elements r2 InputRange2 an $(REF_ALTTEXT input range, isInputRange, std,range,primitives) with swappable elements Returns Tuple containing the remainder portions of r1 and r2 that were not swapped"
  },
  "phobos/std/algorithm/mutation/Functions/trustedMoveImpl.html": {
    "href": "phobos/std/algorithm/mutation/Functions/trustedMoveImpl.html",
    "title": "Overloads for - trustedMoveImpl | Marmos Demo",
    "keywords": "Overloads for - trustedMoveImpl Module std.algorithm.mutation trustedMoveImpl(source) T trustedMoveImpl( T source )"
  },
  "phobos/std/algorithm/mutation/Functions/uninitializedFill.html": {
    "href": "phobos/std/algorithm/mutation/Functions/uninitializedFill.html",
    "title": "Overloads for - uninitializedFill | Marmos Demo",
    "keywords": "Overloads for - uninitializedFill Module std.algorithm.mutation uninitializedFill(range, value) void uninitializedFill( Range range, Value value ) Initializes each element of range with value . Assumes that the elements of the range are uninitialized. This is of interest for structs that define copy constructors (for all other types, $(LREF fill) and uninitializedFill are equivalent). Params range Range An $(REF_ALTTEXT input range, isInputRange, std,range,primitives) that exposes references to its elements and has assignable elements value Value Assigned to each element of range See_Also $(LREF fill) $(LREF initializeAll)"
  },
  "phobos/std/algorithm/mutation/Overview.html": {
    "href": "phobos/std/algorithm/mutation/Overview.html",
    "title": "Module - std.algorithm.mutation | Marmos Demo",
    "keywords": "Module - std.algorithm.mutation About This is a submodule of $(MREF std, algorithm). It contains generic mutation algorithms. $(SCRIPT inhibitQuickIndex = 1;) $(BOOKTABLE Cheat Sheet, $(TR $(TH Function Name) $(TH Description)) $(T2 bringToFront, If a = [1, 2, 3] and b = [4, 5, 6, 7] , bringToFront(a, b) leaves a = [4, 5, 6] and b = [7, 1, 2, 3] .) $(T2 copy, Copies a range to another. If a = [1, 2, 3] and b = new int[5] , then copy(a, b) leaves b = [1, 2, 3, 0, 0] and returns b[3 .. $] .) $(T2 fill, Fills a range with a pattern, e.g., if a = new int[3] , then fill(a, 4) leaves a = [4, 4, 4] and fill(a, [3, 4]) leaves a = [3, 4, 3] .) $(T2 initializeAll, If a = [1.2, 3.4] , then initializeAll(a) leaves a = [double.init, double.init] .) $(T2 move, move(a, b) moves a into b . move(a) reads a destructively when necessary.) $(T2 moveEmplace, Similar to move but assumes target is uninitialized.) $(T2 moveAll, Moves all elements from one range to another.) $(T2 moveEmplaceAll, Similar to moveAll but assumes all elements in target are uninitialized.) $(T2 moveSome, Moves as many elements as possible from one range to another.) $(T2 moveEmplaceSome, Similar to moveSome but assumes all elements in target are uninitialized.) $(T2 remove, Removes elements from a range in-place, and returns the shortened range.) $(T2 reverse, If a = [1, 2, 3] , reverse(a) changes it to [3, 2, 1] .) $(T2 strip, Strips all leading and trailing elements equal to a value, or that satisfy a predicate. If a = [1, 1, 0, 1, 1] , then strip(a, 1) and strip!(e => e == 1)(a) returns [0] .) $(T2 stripLeft, Strips all leading elements equal to a value, or that satisfy a predicate. If a = [1, 1, 0, 1, 1] , then stripLeft(a, 1) and stripLeft!(e => e == 1)(a) returns [0, 1, 1] .) $(T2 stripRight, Strips all trailing elements equal to a value, or that satisfy a predicate. If a = [1, 1, 0, 1, 1] , then stripRight(a, 1) and stripRight!(e => e == 1)(a) returns [1, 1, 0] .) $(T2 swap, Swaps two values.) $(T2 swapAt, Swaps two values by indices.) $(T2 swapRanges, Swaps all elements of two ranges.) $(T2 uninitializedFill, Fills a range (assumed uninitialized) with a value.) ) Copyright: Andrei Alexandrescu 2008-. License: $(HTTP boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP erdani.com, Andrei Alexandrescu) Source: $(PHOBOSSRC std/algorithm/mutation.d) Macros T2=$(TR $(TDNW $(LREF $1)) $(TD $+)) Functions Name Description bringToFront bringToFront takes two ranges front and back , which may be of different types. Considering the concatenation of front and back one unified range, bringToFront rotates that unified range such that all elements in back are brought to the beginning of the unified range. The relative ordering of elements in front and back , respectively, remains unchanged. bringToFrontImpl copy Copies the content of source into target and returns the remaining (unfilled) part of target . fill Assigns value to each element of input range range . initializeAll Initializes all elements of range with their .init value. Assumes that the elements of the range are uninitialized. move Moves source into target , via a destructive copy when necessary. moveAll Calls move(a, b) for each element a in src and the corresponding element b in tgt , in increasing order. moveAllImpl moveEmplace Similar to $(LREF move) but assumes target is uninitialized. This is more efficient because source can be blitted over target without destroying or initializing it first. moveEmplaceAll Similar to $(LREF moveAll) but assumes all elements in tgt are uninitialized. Uses $(LREF moveEmplace) to move elements from src over elements from tgt . moveEmplaceImpl moveEmplaceSome Same as $(LREF moveSome) but assumes all elements in tgt are uninitialized. Uses $(LREF moveEmplace) to move elements from src over elements from tgt . moveImpl moveSome Calls move(a, b) for each element a in src and the corresponding element b in tgt , in increasing order, stopping when either range has been exhausted. moveSomeImpl remove Eliminates elements at given offsets from range and returns the shortened range. removeImpl removePredStable removePredString removePredUnstable removeStable removeStableString removeUnstable reverse Reverses r in-place. Performs r.length / 2 evaluations of swap . UTF sequences consisting of multiple code units are preserved properly. strip The strip group of functions allow stripping of either leading, trailing, or both leading and trailing elements. stripLeft ditto stripRight ditto swap Swaps lhs and rhs . The instances lhs and rhs are moved in memory, without ever calling opAssign , nor any other function. T need not be assignable at all to be swapped. swapAt Swaps two elements in-place of a range r , specified by their indices i1 and i2 . swapFront swapRanges Swaps all elements of r1 with successive elements in r2 . Returns a tuple containing the remainder portions of r1 and $(D r2) that were not swapped (one of them will be empty). The ranges may be of different types but must have the same element type and support swapping. trustedMoveImpl uninitializedFill Initializes each element of range with value . Assumes that the elements of the range are uninitialized. This is of interest for structs that define copy constructors (for all other types, $(LREF fill) and uninitializedFill are equivalent). Variables Name Description areCopyCompatibleArrays"
  },
  "phobos/std/algorithm/searching/BoyerMooreFinder/Functions/beFound.html": {
    "href": "phobos/std/algorithm/searching/BoyerMooreFinder/Functions/beFound.html",
    "title": "Overloads for - beFound | Marmos Demo",
    "keywords": "Overloads for - beFound Module std.algorithm.searching Parent BoyerMooreFinder beFound(haystack) Range beFound( Range haystack )"
  },
  "phobos/std/algorithm/searching/BoyerMooreFinder/Functions/length.html": {
    "href": "phobos/std/algorithm/searching/BoyerMooreFinder/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.algorithm.searching Parent BoyerMooreFinder length() size_t length( )"
  },
  "phobos/std/algorithm/searching/BoyerMooreFinder/Functions/occurrence.html": {
    "href": "phobos/std/algorithm/searching/BoyerMooreFinder/Functions/occurrence.html",
    "title": "Overloads for - occurrence | Marmos Demo",
    "keywords": "Overloads for - occurrence Module std.algorithm.searching Parent BoyerMooreFinder occurrence(c) ptrdiff_t occurrence( ElementType!(Range) c )"
  },
  "phobos/std/algorithm/searching/FindSplitResult/Functions/opAssign.html": {
    "href": "phobos/std/algorithm/searching/FindSplitResult/Functions/opAssign.html",
    "title": "Overloads for - opAssign | Marmos Demo",
    "keywords": "Overloads for - opAssign Module std.algorithm.searching Parent FindSplitResult opAssign(rhs) void opAssign( <bug: unknown> rhs )"
  },
  "phobos/std/algorithm/searching/Functions/all.html": {
    "href": "phobos/std/algorithm/searching/Functions/all.html",
    "title": "Overloads for - all | Marmos Demo",
    "keywords": "Overloads for - all Module std.algorithm.searching all(range) bool all( Range range ) Checks if $(I all) of the elements satisfy pred."
  },
  "phobos/std/algorithm/searching/Functions/any.html": {
    "href": "phobos/std/algorithm/searching/Functions/any.html",
    "title": "Overloads for - any | Marmos Demo",
    "keywords": "Overloads for - any Module std.algorithm.searching any(range) bool any( Range range ) Checks if $(I any) of the elements satisfies pred. !any can be used to verify that $(I none) of the elements satisfy pred . This is sometimes called exists in other languages."
  },
  "phobos/std/algorithm/searching/Functions/balancedParens.html": {
    "href": "phobos/std/algorithm/searching/Functions/balancedParens.html",
    "title": "Overloads for - balancedParens | Marmos Demo",
    "keywords": "Overloads for - balancedParens Module std.algorithm.searching balancedParens(r, lPar, rPar, maxNestingLevel) bool balancedParens( Range r, E lPar, E rPar, size_t maxNestingLevel ) Checks whether r has \"balanced parentheses\", i.e. all instances of lPar are closed by corresponding instances of rPar . The parameter maxNestingLevel controls the nesting level allowed. The most common uses are the default or 0 . In the latter case, no nesting is allowed. Params r Range The range to check. lPar E The element corresponding with a left (opening) parenthesis. rPar E The element corresponding with a right (closing) parenthesis. maxNestingLevel size_t The maximum allowed nesting level. Returns true if the given range has balanced parenthesis within the given maximum nesting level; false otherwise."
  },
  "phobos/std/algorithm/searching/Functions/boyerMooreFinder.html": {
    "href": "phobos/std/algorithm/searching/Functions/boyerMooreFinder.html",
    "title": "Overloads for - boyerMooreFinder | Marmos Demo",
    "keywords": "Overloads for - boyerMooreFinder Module std.algorithm.searching boyerMooreFinder(needle) BoyerMooreFinder!(binaryFun!predRange) boyerMooreFinder( Range needle ) Ditto"
  },
  "phobos/std/algorithm/searching/Functions/canFind.html": {
    "href": "phobos/std/algorithm/searching/Functions/canFind.html",
    "title": "Overloads for - canFind | Marmos Demo",
    "keywords": "Overloads for - canFind Module std.algorithm.searching canFind(haystack) bool canFind( Range haystack ) Convenience function. Like find, but only returns whether or not the search was successful. For more information about pred see $(LREF find). See_Also $(REF among, std,algorithm,comparison) for checking a value against multiple arguments. canFind(haystack, needle) bool canFind( Range haystack, Element needle ) Convenience function. Like find, but only returns whether or not the search was successful. For more information about pred see $(LREF find). See_Also $(REF among, std,algorithm,comparison) for checking a value against multiple arguments. canFind(haystack, needles) size_t canFind( Range haystack, Needles needles ) Convenience function. Like find, but only returns whether or not the search was successful. For more information about pred see $(LREF find). See_Also $(REF among, std,algorithm,comparison) for checking a value against multiple arguments."
  },
  "phobos/std/algorithm/searching/Functions/commonPrefix.html": {
    "href": "phobos/std/algorithm/searching/Functions/commonPrefix.html",
    "title": "Overloads for - commonPrefix | Marmos Demo",
    "keywords": "Overloads for - commonPrefix Module std.algorithm.searching commonPrefix(r1, r2) <bug: unknown> commonPrefix( R1 r1, R2 r2 ) auto Returns the common prefix of two ranges. Params pred <parameter not found> The predicate to use in comparing elements for commonality. Defaults to equality \"a == b\" . r1 = A $(REF_ALTTEXT forward range, isForwardRange, std,range,primitives) of elements. r2 = An $(REF_ALTTEXT input range, isInputRange, std,range,primitives) of elements. Returns A slice of r1 which contains the characters that both ranges start with, if the first argument is a string; otherwise, the same as the result of takeExactly(r1, n) , where n is the number of elements in the common prefix of both ranges. See_Also $(REF takeExactly, std,range) commonPrefix(r1, r2) <bug: unknown> commonPrefix( R1 r1, R2 r2 ) auto ditto commonPrefix(r1, r2) <bug: unknown> commonPrefix( R1 r1, R2 r2 ) auto ditto commonPrefix(r1, r2) <bug: unknown> commonPrefix( R1 r1, R2 r2 ) auto ditto"
  },
  "phobos/std/algorithm/searching/Functions/count.html": {
    "href": "phobos/std/algorithm/searching/Functions/count.html",
    "title": "Overloads for - count | Marmos Demo",
    "keywords": "Overloads for - count Module std.algorithm.searching count(haystack, needle) size_t count( Range haystack, E needle ) Counts matches of needle in haystack . The first overload counts each element e in haystack for which pred(e, needle) is true . pred defaults to equality. Performs $(BIGOH haystack.length) evaluations of pred . The second overload counts the number of times needle was matched in haystack . pred compares elements in each range. Throws an exception if needle.empty is true , as the count of the empty range in any range would be infinite. Overlapped counts are not considered, for example count(\"aaa\", \"aa\") is 1 , not 2 . Note: Regardless of the overload, count will not accept infinite ranges for haystack . Params pred <parameter not found> The predicate to compare elements. haystack Range The range to count. needle E The element or sub-range to count in haystack. Returns The number of matches in haystack . count(haystack, needle) size_t count( R1 haystack, R2 needle ) Ditto count(haystack) size_t count( R haystack ) Counts all elements or elements satisfying a predicate in haystack . The first overload counts each element e in haystack for which pred(e) is $(D true). Performs $(BIGOH haystack.length) evaluations of pred . The second overload counts the number of elements in a range. If the given range has the length property, that is returned right away, otherwise performs $(BIGOH haystack.length) to walk the range. Params pred <parameter not found> Optional predicate to find elements. haystack R The range to count. Returns The number of elements in haystack (for which pred returned true). count(haystack) size_t count( R haystack ) Ditto"
  },
  "phobos/std/algorithm/searching/Functions/countUntil.html": {
    "href": "phobos/std/algorithm/searching/Functions/countUntil.html",
    "title": "Overloads for - countUntil | Marmos Demo",
    "keywords": "Overloads for - countUntil Module std.algorithm.searching countUntil(haystack, needles) ptrdiff_t countUntil( R haystack, Rs needles ) Counts elements in the given $(REF_ALTTEXT forward range, isForwardRange, std,range,primitives) until the given predicate is true for one of the given needles . Params pred <parameter not found> The predicate for determining when to stop counting. haystack R The $(REF_ALTTEXT input range, isInputRange, std,range,primitives) to be counted. needles Rs Either a single element, or a $(REF_ALTTEXT forward range, isForwardRange, std,range,primitives) of elements, to be evaluated in turn against each element in haystack under the given predicate. Returns: The number of elements which must be popped from the front of haystack before reaching an element for which startsWith!pred(haystack, needles) is true . If startsWith!pred(haystack, needles) is not true for any element in haystack , then -1 is returned. If only pred is provided, pred(haystack) is tested for each element. See_Also: $(REF indexOf, std,string) countUntil(haystack, needle) ptrdiff_t countUntil( R haystack, N needle ) ditto countUntil(haystack) ptrdiff_t countUntil( R haystack ) ditto"
  },
  "phobos/std/algorithm/searching/Functions/endsWith.html": {
    "href": "phobos/std/algorithm/searching/Functions/endsWith.html",
    "title": "Overloads for - endsWith | Marmos Demo",
    "keywords": "Overloads for - endsWith Module std.algorithm.searching endsWith(doesThisEnd, withOneOfThese) uint endsWith( Range doesThisEnd, Needles withOneOfThese ) Checks if the given range ends with (one of) the given needle(s). The reciprocal of startsWith . Params pred <parameter not found> The predicate to use for comparing elements between the range and the needle(s). doesThisEnd = The $(REF_ALTTEXT bidirectional range, isBidirectionalRange, std,range,primitives) to check. withOneOfThese = The needles to check against, which may be single elements, or bidirectional ranges of elements. withThis = The single element to check. Returns 0 if the needle(s) do not occur at the end of the given range; otherwise the position of the matching needle, that is, 1 if the range ends with withOneOfThese[0] , 2 if it ends with withOneOfThese[1] , and so on. In the case when no needle parameters are given, return true iff back of doesThisStart fulfils predicate pred . endsWith(doesThisEnd, withThis) bool endsWith( R1 doesThisEnd, R2 withThis ) Ditto endsWith(doesThisEnd, withThis) bool endsWith( R doesThisEnd, E withThis ) Ditto endsWith(doesThisEnd) bool endsWith( R doesThisEnd ) Ditto"
  },
  "phobos/std/algorithm/searching/Functions/extremum.html": {
    "href": "phobos/std/algorithm/searching/Functions/extremum.html",
    "title": "Overloads for - extremum | Marmos Demo",
    "keywords": "Overloads for - extremum Module std.algorithm.searching extremum(r) <bug: unknown> extremum( Range r ) auto Iterates the passed range and selects the extreme element with less . If the extreme element occurs multiple time, the first occurrence will be returned. Params map <parameter not found> custom accessor for the comparison key selector <parameter not found> custom mapping for the extrema selection r Range Range from which the extreme value will be selected seedElement <parameter not found> custom seed to use as initial element Returns The extreme value according to map and selector of the passed-in values. extremum(r, seedElement) <bug: unknown> extremum( Range r, RangeElementType seedElement ) auto extremum(r) <bug: unknown> extremum( Range r ) auto extremum(r, seedElement) <bug: unknown> extremum( Range r, RangeElementType seedElement ) auto"
  },
  "phobos/std/algorithm/searching/Functions/find.html": {
    "href": "phobos/std/algorithm/searching/Functions/find.html",
    "title": "Overloads for - find | Marmos Demo",
    "keywords": "Overloads for - find Module std.algorithm.searching find(haystack) InputRange find( InputRange haystack ) Finds an element e of an $(REF_ALTTEXT input range, isInputRange, std,range,primitives) where pred(e) is true . $(P $(PANEL $(UL $(LI find behaves similarly to dropWhile in other languages.) $(LI To find the last matching element in a $(REF_ALTTEXT bidirectional, isBidirectionalRange, std,range,primitives) haystack , call find!pred(retro(haystack)) . See $(REF retro, std,range).) ))) Complexity find performs $(BIGOH walkLength(haystack)) evaluations of pred . Params pred <parameter not found> The predicate to match an element. haystack InputRange The $(REF_ALTTEXT input range, isInputRange, std,range,primitives) searched in. Returns haystack advanced such that the front element satisfies pred . If no such element exists, returns an empty haystack . find(haystack, needle) InputRange find( InputRange haystack, Element needle ) Finds an individual element in an $(REF_ALTTEXT input range, isInputRange, std,range,primitives). Elements of haystack are compared with needle by using predicate pred with pred(haystack.front, needle) . The predicate is passed to $(REF binaryFun, std, functional), and can either accept a string, or any callable that can be executed via pred(element, element) . If haystack is a $(REF_ALTTEXT forward range, isForwardRange, std,range,primitives), needle can be a $(REF_ALTTEXT forward range, isForwardRange, std,range,primitives) too. In this case startsWith!pred(haystack, needle) is evaluated on each evaluation. $(NOTE To find the first element $(I not) matching the needle, use predicate \"a != b\" .) Complexity find performs $(BIGOH walkLength(haystack)) evaluations of pred . There are specializations that improve performance by taking advantage of $(REF_ALTTEXT bidirectional, isBidirectionalRange, std,range,primitives) or $(REF_ALTTEXT random access, isRandomAccessRange, std,range,primitives) ranges (where possible). Params pred <parameter not found> The predicate for comparing each element with the needle, defaulting to equality \"a == b\" . haystack InputRange The $(REF_ALTTEXT input range, isInputRange, std,range,primitives) searched in. needle Element The element searched for. Returns haystack advanced such that the front element is the one searched for; that is, until binaryFun!pred(haystack.front, needle) is true . If no such position exists, returns an empty haystack . See_Also: $(LREF findAdjacent), $(LREF findAmong), $(LREF findSkip), $(LREF findSplit), $(LREF startsWith) find(haystack, needle) R1 find( R1 haystack, R2 needle ) ditto find(haystack, needles) Tuple!(Rangesize_t) find( Range haystack, Needles needles ) Finds two or more needles into a haystack . The predicate $(D pred) is used throughout to compare elements. By default, elements are compared for equality. Params pred <parameter not found> The predicate to use for comparing elements. haystack = The target of the search. Must be an input range. If any of needles is a range with elements comparable to elements in haystack , then haystack must be a $(REF_ALTTEXT forward range, isForwardRange, std,range,primitives) such that the search can backtrack. needles = One or more items to search for. Each of needles must be either comparable to one element in haystack , or be itself a forward range with elements comparable with elements in haystack . Returns A tuple containing haystack positioned to match one of the needles and also the 1-based index of the matching element in $(D needles) (0 if none of needles matched, 1 if needles[0] matched, 2 if needles[1] matched...). The first needle to be found will be the one that matches. If multiple needles are found at the same spot in the range, then the shortest one is the one which matches (if multiple needles of the same length are found at the same spot (e.g \"a\" and 'a' ), then the left-most of them in the argument list matches). The relationship between haystack and needles simply means that one can e.g. search for individual int s or arrays of $(D int)s in an array of int s. In addition, if elements are individually comparable, searches of heterogeneous types are allowed as well: a double[] can be searched for an int or a $(D short[]), and conversely a long can be searched for a float or a double[] . This makes for efficient searches without the need to coerce one side of the comparison into the other's side type. The complexity of the search is $(BIGOH haystack.length max(needles.length)). (For needles that are individual items, length is considered to be 1.) The strategy used in searching several subranges at once maximizes cache usage by moving in haystack as few times as possible. find(haystack, needle) RandomAccessRange find( RandomAccessRange haystack, BoyerMooreFinder!(predInputRange) needle ) Finds needle in haystack efficiently using the $(LINK2 https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string_search_algorithm, Boyer-Moore) method. Params haystack RandomAccessRange A random-access range with length and slicing. needle BoyerMooreFinder!(predInputRange) A $(LREF BoyerMooreFinder). Returns haystack advanced such that needle is a prefix of it (if no such position exists, returns haystack advanced to termination)."
  },
  "phobos/std/algorithm/searching/Functions/findAdjacent.html": {
    "href": "phobos/std/algorithm/searching/Functions/findAdjacent.html",
    "title": "Overloads for - findAdjacent | Marmos Demo",
    "keywords": "Overloads for - findAdjacent Module std.algorithm.searching findAdjacent(r) Range findAdjacent( Range r ) Advances r until it finds the first two adjacent elements a , b that satisfy pred(a, b) . Performs $(BIGOH r.length) evaluations of pred . For more information about pred see $(LREF find). Params pred <parameter not found> The predicate to satisfy. r Range A $(REF_ALTTEXT forward range, isForwardRange, std,range,primitives) to search in. Returns r advanced to the first occurrence of two adjacent elements that satisfy the given predicate. If there are no such two elements, returns r advanced until empty. See_Also $(LINK2 http://en.cppreference.com/w/cpp/algorithm/adjacent_find, STL's adjacent_find )"
  },
  "phobos/std/algorithm/searching/Functions/findAmong.html": {
    "href": "phobos/std/algorithm/searching/Functions/findAmong.html",
    "title": "Overloads for - findAmong | Marmos Demo",
    "keywords": "Overloads for - findAmong Module std.algorithm.searching findAmong(seq, choices) InputRange findAmong( InputRange seq, ForwardRange choices ) Searches the given range for an element that matches one of the given choices. Advances seq by calling seq.popFront until either find!(pred)(choices, seq.front) is true , or seq becomes empty. Performs $(BIGOH seq.length choices.length) evaluations of pred. For more information about pred see $(LREF find). Params pred <parameter not found> The predicate to use for determining a match. seq InputRange The $(REF_ALTTEXT input range, isInputRange, std,range,primitives) to search. choices ForwardRange A $(REF_ALTTEXT forward range, isForwardRange, std,range,primitives) of possible choices. Returns seq advanced to the first matching element, or until empty if there are no matching elements. See_Also: $(LREF find), $(REF among, std,algorithm,comparison)"
  },
  "phobos/std/algorithm/searching/Functions/findSkip.html": {
    "href": "phobos/std/algorithm/searching/Functions/findSkip.html",
    "title": "Overloads for - findSkip | Marmos Demo",
    "keywords": "Overloads for - findSkip Module std.algorithm.searching findSkip(haystack, needle) bool findSkip( R1 haystack, R2 needle ) Finds needle in haystack and positions haystack right after the first occurrence of needle . If no needle is provided, the haystack is advanced as long as pred evaluates to true . Similarly, the haystack is positioned so as pred evaluates to false for haystack.front . For more information about pred see $(LREF find). Params haystack R1 The $(REF_ALTTEXT forward range, isForwardRange, std,range,primitives) to search in. needle R2 The $(REF_ALTTEXT forward range, isForwardRange, std,range,primitives) to search for. pred <parameter not found> Custom predicate for comparison of haystack and needle Returns: true if the needle was found, in which case haystack is positioned after the end of the first occurrence of needle ; otherwise false , leaving haystack untouched. If no needle is provided, it returns the number of times pred(haystack.front) returned true. See_Also: $(LREF find) findSkip(haystack) size_t findSkip( R1 haystack ) ditto"
  },
  "phobos/std/algorithm/searching/Functions/findSplit.html": {
    "href": "phobos/std/algorithm/searching/Functions/findSplit.html",
    "title": "Overloads for - findSplit | Marmos Demo",
    "keywords": "Overloads for - findSplit Module std.algorithm.searching findSplit(haystack, needle) <bug: unknown> findSplit( R1 haystack, R2 needle ) auto These functions find the first occurrence of needle in haystack and then split haystack as follows. $(PANEL findSplit returns a tuple result containing $(I three) ranges. $(UL $(LI result[0] is the portion of haystack before needle ) $(LI result[1] is the portion of haystack that matches needle ) $(LI result[2] is the portion of haystack after the match.) ) If needle was not found, result[0] comprehends haystack entirely and result[1] and result[2] are empty. findSplitBefore returns a tuple result containing two ranges. $(UL $(LI result[0] is the portion of haystack before needle ) $(LI result[1] is the balance of haystack starting with the match.) ) If needle was not found, result[0] comprehends haystack entirely and result[1] is empty. findSplitAfter returns a tuple result containing two ranges. $(UL $(LI result[0] is the portion of haystack up to and including the match) $(LI result[1] is the balance of haystack starting after the match.) ) If needle was not found, result[0] is empty and result[1] is haystack . ) $(P In all cases, the concatenation of the returned ranges spans the entire haystack . If haystack is a random-access range, all three components of the tuple have the same type as haystack . Otherwise, haystack must be a $(REF_ALTTEXT forward range, isForwardRange, std,range,primitives) and the type of result[0] (and result[1] for findSplit ) is the same as the result of $(REF takeExactly, std,range). For more information about pred see $(LREF find). ) Params: pred = Predicate to compare 2 elements. haystack = The forward range to search. needle = The forward range to look for. Returns A sub-type of $(REF Tuple, std, typecons) of the split portions of haystack (see above for details). This sub-type of Tuple defines opCast!bool , which returns true when the separating needle was found and false otherwise. See_Also: $(LREF find)"
  },
  "phobos/std/algorithm/searching/Functions/findSplitAfter.html": {
    "href": "phobos/std/algorithm/searching/Functions/findSplitAfter.html",
    "title": "Overloads for - findSplitAfter | Marmos Demo",
    "keywords": "Overloads for - findSplitAfter Module std.algorithm.searching findSplitAfter(haystack, needle) <bug: unknown> findSplitAfter( R1 haystack, R2 needle ) auto Ditto"
  },
  "phobos/std/algorithm/searching/Functions/findSplitBefore.html": {
    "href": "phobos/std/algorithm/searching/Functions/findSplitBefore.html",
    "title": "Overloads for - findSplitBefore | Marmos Demo",
    "keywords": "Overloads for - findSplitBefore Module std.algorithm.searching findSplitBefore(haystack, needle) <bug: unknown> findSplitBefore( R1 haystack, R2 needle ) auto Ditto"
  },
  "phobos/std/algorithm/searching/Functions/maxCount.html": {
    "href": "phobos/std/algorithm/searching/Functions/maxCount.html",
    "title": "Overloads for - maxCount | Marmos Demo",
    "keywords": "Overloads for - maxCount Module std.algorithm.searching maxCount(range) Tuple!(ElementType!Rangesize_t) maxCount( Range range ) Ditto"
  },
  "phobos/std/algorithm/searching/Functions/maxElement.html": {
    "href": "phobos/std/algorithm/searching/Functions/maxElement.html",
    "title": "Overloads for - maxElement | Marmos Demo",
    "keywords": "Overloads for - maxElement Module std.algorithm.searching maxElement(r) <bug: unknown> maxElement( Range r ) auto Iterates the passed range and returns the maximal element. A custom mapping function can be passed to map . In other languages this is sometimes called argmax . Complexity: O(n) Exactly n - 1 comparisons are needed. Params map <parameter not found> custom accessor for the comparison key r Range range from which the maximum element will be selected seed <parameter not found> custom seed to use as initial element Precondition: If a seed is not given, r must not be empty. Returns: The maximal element of the passed-in range. Note If at least one of the arguments is NaN, the result is an unspecified value. See $(REF minElement, std,algorithm,searching) for examples on how to cope with NaNs. See_Also $(LREF minElement), $(REF max, std,algorithm,comparison), $(LREF maxCount), $(LREF maxIndex), $(LREF maxPos) maxElement(r, seed) <bug: unknown> maxElement( Range r, RangeElementType seed ) auto ditto"
  },
  "phobos/std/algorithm/searching/Functions/maxIndex.html": {
    "href": "phobos/std/algorithm/searching/Functions/maxIndex.html",
    "title": "Overloads for - maxIndex | Marmos Demo",
    "keywords": "Overloads for - maxIndex Module std.algorithm.searching maxIndex(range) ptrdiff_t maxIndex( Range range ) Computes the index of the first occurrence of range 's maximum element. Complexity: $(BIGOH range) Exactly range.length - 1 comparisons are needed. Params pred <parameter not found> The ordering predicate to use to determine the maximum element. range Range The $(REF_ALTTEXT input range, isInputRange, std,range,primitives) to search. Returns The index of the first encounter of the maximum in range . If the range is empty, -1 is returned. Limitations If at least one of the arguments is NaN, the result is an unspecified value. See $(REF maxElement, std,algorithm,searching) for examples on how to cope with NaNs. See_Also $(LREF minIndex), $(REF max, std,algorithm,comparison), $(LREF maxCount), $(LREF maxElement), $(LREF maxPos)"
  },
  "phobos/std/algorithm/searching/Functions/maxPos.html": {
    "href": "phobos/std/algorithm/searching/Functions/maxPos.html",
    "title": "Overloads for - maxPos | Marmos Demo",
    "keywords": "Overloads for - maxPos Module std.algorithm.searching maxPos(range) Range maxPos( Range range ) Ditto"
  },
  "phobos/std/algorithm/searching/Functions/minCount.html": {
    "href": "phobos/std/algorithm/searching/Functions/minCount.html",
    "title": "Overloads for - minCount | Marmos Demo",
    "keywords": "Overloads for - minCount Module std.algorithm.searching minCount(range) Tuple!(ElementType!Rangesize_t) minCount( Range range ) Computes the minimum (respectively maximum) of range along with its number of occurrences. Formally, the minimum is a value x in range such that $(D pred(a, x)) is false for all values a in range . Conversely, the maximum is a value x in range such that pred(x, a) is false for all values a in range (note the swapped arguments to pred ). These functions may be used for computing arbitrary extrema by choosing pred appropriately. For corrrect functioning, pred must be a strict partial order, i.e. transitive (if pred(a, b) && pred(b, c) then pred(a, c) ) and irreflexive (pred(a, a) is false ). The $(LUCKY trichotomy property of inequality) is not required: these algorithms consider elements a and b equal (for the purpose of counting) if pred puts them in the same equivalence class, i.e. !pred(a, b) && !pred(b, a) . Params pred <parameter not found> The ordering predicate to use to determine the extremum (minimum or maximum). range Range The $(REF_ALTTEXT input range, isInputRange, std,range,primitives) to count. Returns: The minimum, respectively maximum element of a range together with the number it occurs in the range. Limitations: If at least one of the arguments is NaN, the result is an unspecified value. See $(REF maxElement, std,algorithm,searching) for examples on how to cope with NaNs. Throws: Exception if range.empty . See_Also: $(REF min, std,algorithm,comparison), $(LREF minIndex), $(LREF minElement), $(LREF minPos)"
  },
  "phobos/std/algorithm/searching/Functions/minElement.html": {
    "href": "phobos/std/algorithm/searching/Functions/minElement.html",
    "title": "Overloads for - minElement | Marmos Demo",
    "keywords": "Overloads for - minElement Module std.algorithm.searching minElement(r) <bug: unknown> minElement( Range r ) auto Iterates the passed range and returns the minimal element. A custom mapping function can be passed to map . In other languages this is sometimes called argmin . Complexity: O(n) Exactly n - 1 comparisons are needed. Params map <parameter not found> custom accessor for the comparison key r Range range from which the minimal element will be selected seed <parameter not found> custom seed to use as initial element Precondition: If a seed is not given, r must not be empty. Returns: The minimal element of the passed-in range. Note If at least one of the arguments is NaN, the result is an unspecified value. If you want to ignore NaNs, you can use $(REF filter, std,algorithm,iteration) and $(REF isNaN, std,math) to remove them, before applying minElement. Add a suitable seed, to avoid error messages if all elements are NaNs: --- .filter!(a=>!a.isNaN).minElement( ); --- If you want to get NaN as a result if a NaN is present in the range, you can use $(REF fold, std,algorithm,iteration) and $(REF isNaN, std,math): --- .fold!((a,b)=>a.isNaN || b.isNaN ? real.nan : a < b ? a : b); --- See_Also $(LREF maxElement), $(REF min, std,algorithm,comparison), $(LREF minCount), $(LREF minIndex), $(LREF minPos) minElement(r, seed) <bug: unknown> minElement( Range r, RangeElementType seed ) auto ditto"
  },
  "phobos/std/algorithm/searching/Functions/minIndex.html": {
    "href": "phobos/std/algorithm/searching/Functions/minIndex.html",
    "title": "Overloads for - minIndex | Marmos Demo",
    "keywords": "Overloads for - minIndex Module std.algorithm.searching minIndex(range) ptrdiff_t minIndex( Range range ) Computes the index of the first occurrence of range 's minimum element. Params pred <parameter not found> The ordering predicate to use to determine the minimum element. range Range The $(REF_ALTTEXT input range, isInputRange, std,range,primitives) range = The $(REF_ALTTEXT input range, isInputRange, std,range,primitives) to search. Complexity: $(BIGOH range.length) Exactly range.length - 1 comparisons are needed. Returns The index of the first encounter of the minimum element in range . If the range is empty, -1 is returned. Limitations If at least one of the arguments is NaN, the result is an unspecified value. See $(REF maxElement, std,algorithm,searching) for examples on how to cope with NaNs. See_Also $(LREF maxIndex), $(REF min, std,algorithm,comparison), $(LREF minCount), $(LREF minElement), $(LREF minPos)"
  },
  "phobos/std/algorithm/searching/Functions/minPos.html": {
    "href": "phobos/std/algorithm/searching/Functions/minPos.html",
    "title": "Overloads for - minPos | Marmos Demo",
    "keywords": "Overloads for - minPos Module std.algorithm.searching minPos(range) Range minPos( Range range ) Computes a subrange of range starting at the first occurrence of range 's minimum (respectively maximum) and with the same ending as range , or the empty range if range itself is empty. Formally, the minimum is a value x in range such that pred(a, x) is false for all values a in range . Conversely, the maximum is a value x in range such that pred(x, a) is false for all values a in range (note the swapped arguments to pred ). These functions may be used for computing arbitrary extrema by choosing pred appropriately. For corrrect functioning, pred must be a strict partial order, i.e. transitive (if pred(a, b) && pred(b, c) then pred(a, c) ) and irreflexive (pred(a, a) is false ). Params pred <parameter not found> The ordering predicate to use to determine the extremum (minimum or maximum) element. range Range The $(REF_ALTTEXT forward range, isForwardRange, std,range,primitives) to search. Returns: The position of the minimum (respectively maximum) element of forward range range , i.e. a subrange of range starting at the position of its smallest (respectively largest) element and with the same ending as range . Limitations: If at least one of the arguments is NaN, the result is an unspecified value. See $(REF maxElement, std,algorithm,searching) for examples on how to cope with NaNs. See_Also $(REF max, std,algorithm,comparison), $(LREF minCount), $(LREF minIndex), $(LREF minElement)"
  },
  "phobos/std/algorithm/searching/Functions/simpleMindedFind.html": {
    "href": "phobos/std/algorithm/searching/Functions/simpleMindedFind.html",
    "title": "Overloads for - simpleMindedFind | Marmos Demo",
    "keywords": "Overloads for - simpleMindedFind Module std.algorithm.searching simpleMindedFind(haystack, needle) R1 simpleMindedFind( R1 haystack, R2 needle )"
  },
  "phobos/std/algorithm/searching/Functions/skipAll.html": {
    "href": "phobos/std/algorithm/searching/Functions/skipAll.html",
    "title": "Overloads for - skipAll | Marmos Demo",
    "keywords": "Overloads for - skipAll Module std.algorithm.searching skipAll(r, es) void skipAll( R r, Es es )"
  },
  "phobos/std/algorithm/searching/Functions/skipOver.html": {
    "href": "phobos/std/algorithm/searching/Functions/skipOver.html",
    "title": "Overloads for - skipOver | Marmos Demo",
    "keywords": "Overloads for - skipOver Module std.algorithm.searching skipOver(haystack, needles) bool skipOver( Haystack haystack, Needles needles ) Skip over the initial portion of the first given range (haystack) that matches any of the additionally given ranges (needles) fully, or if no second range is given skip over the elements that fulfill pred. Do nothing if there is no match. Params pred <parameter not found> The predicate that determines whether elements from each respective range match. Defaults to equality \"a == b\" . skipOver(r1) bool skipOver( R r1 ) Skip over the initial portion of the first given range (haystack) that matches any of the additionally given ranges (needles) fully, or if no second range is given skip over the elements that fulfill pred. Do nothing if there is no match. Params pred <parameter not found> The predicate that determines whether elements from each respective range match. Defaults to equality \"a == b\" . skipOver(r, es) bool skipOver( R r, Es es ) Skip over the initial portion of the first given range (haystack) that matches any of the additionally given ranges (needles) fully, or if no second range is given skip over the elements that fulfill pred. Do nothing if there is no match. Params pred <parameter not found> The predicate that determines whether elements from each respective range match. Defaults to equality \"a == b\" ."
  },
  "phobos/std/algorithm/searching/Functions/startsWith.html": {
    "href": "phobos/std/algorithm/searching/Functions/startsWith.html",
    "title": "Overloads for - startsWith | Marmos Demo",
    "keywords": "Overloads for - startsWith Module std.algorithm.searching startsWith(doesThisStart, withOneOfThese) uint startsWith( Range doesThisStart, Needles withOneOfThese ) Checks whether the given $(REF_ALTTEXT input range, isInputRange, std,range,primitives) starts with (one of) the given needle(s) or, if no needles are given, if its front element fulfils predicate pred . For more information about pred see $(LREF find). Params pred <parameter not found> Predicate to use in comparing the elements of the haystack and the needle(s). Mandatory if no needles are given. doesThisStart = The input range to check. withOneOfThese = The needles against which the range is to be checked, which may be individual elements or input ranges of elements. withThis = The single needle to check, which may be either a single element or an input range of elements. Returns 0 if the needle(s) do not occur at the beginning of the given range; otherwise the position of the matching needle, that is, 1 if the range starts with withOneOfThese[0] , 2 if it starts with withOneOfThese[1] , and so on. In the case where doesThisStart starts with multiple of the ranges or elements in withOneOfThese , then the shortest one matches (if there are two which match which are of the same length (e.g. \"a\" and 'a' ), then the left-most of them in the argument list matches). In the case when no needle parameters are given, return true iff front of doesThisStart fulfils predicate pred . startsWith(doesThisStart, withThis) bool startsWith( R1 doesThisStart, R2 withThis ) Ditto startsWith(doesThisStart, withThis) bool startsWith( R doesThisStart, E withThis ) Ditto startsWith(doesThisStart) bool startsWith( R doesThisStart ) Ditto"
  },
  "phobos/std/algorithm/searching/Functions/until.html": {
    "href": "phobos/std/algorithm/searching/Functions/until.html",
    "title": "Overloads for - until | Marmos Demo",
    "keywords": "Overloads for - until Module std.algorithm.searching until(range, sentinel, openRight) Until!(predRangeSentinel) until( Range range, Sentinel sentinel, OpenRight openRight ) Lazily iterates range until the element e for which pred(e, sentinel) is true. This is similar to takeWhile in other languages. Params pred <parameter not found> Predicate to determine when to stop. range Range The $(REF_ALTTEXT input range, isInputRange, std,range,primitives) range = The $(REF_ALTTEXT input range, isInputRange, std,range,primitives) to iterate over. sentinel = The element to stop at. openRight = Determines whether the element for which the given predicate is true should be included in the resulting range (No.openRight), or not (Yes.openRight). Returns An $(REF_ALTTEXT input range, isInputRange, std,range,primitives) that iterates over the original range's elements, but ends when the specified predicate becomes true. If the original range is a $(REF_ALTTEXT forward range, isForwardRange, std,range,primitives) or higher, this range will be a forward range. until(range, openRight) Until!(predRangevoid) until( Range range, OpenRight openRight ) Ditto"
  },
  "phobos/std/algorithm/searching/Overview.html": {
    "href": "phobos/std/algorithm/searching/Overview.html",
    "title": "Module - std.algorithm.searching | Marmos Demo",
    "keywords": "Module - std.algorithm.searching About This is a submodule of $(MREF std, algorithm). It contains generic searching algorithms. $(SCRIPT inhibitQuickIndex = 1;) $(BOOKTABLE Cheat Sheet, $(TR $(TH Function Name) $(TH Description)) $(T2 all, all!\"a > 0\"([1, 2, 3, 4]) returns true because all elements are positive) $(T2 any, any!\"a > 0\"([1, 2, -3, -4]) returns true because at least one element is positive) $(T2 balancedParens, balancedParens(\"((1 + 1) / 2)\", '(', ')') returns true because the string has balanced parentheses.) $(T2 boyerMooreFinder, find(\"hello world\", boyerMooreFinder(\"or\")) returns \"orld\" using the $(LINK2 https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string_search_algorithm, Boyer-Moore algorithm).) $(T2 canFind, canFind(\"hello world\", \"or\") returns true .) \\((T2 count, Counts all elements or elements matching a predicate, specific element or sub-range.\\)(BR) count([1, 2, 1]) returns 3 , count([1, 2, 1], 1) returns 2 and count!\"a < 0\"([1, -3, 0]) returns 1 .) $(T2 countUntil, countUntil(a, b) returns the number of steps taken in a to reach b ; for example, countUntil(\"hello!\", \"o\") returns 4 .) $(T2 commonPrefix, commonPrefix(\"parakeet\", \"parachute\") returns \"para\" .) $(T2 endsWith, endsWith(\"rocks\", \"ks\") returns true .) $(T2 find, find(\"hello world\", \"or\") returns \"orld\" using linear search. (For binary search refer to $(REF SortedRange, std,range).)) $(T2 findAdjacent, findAdjacent([1, 2, 3, 3, 4]) returns the subrange starting with two equal adjacent elements, i.e. [3, 3, 4] .) $(T2 findAmong, findAmong(\"abcd\", \"qcx\") returns \"cd\" because 'c' is among \"qcx\" .) $(T2 findSkip, If a = \"abcde\" , then findSkip(a, \"x\") returns false and leaves a unchanged, whereas findSkip(a, \"c\") advances a to \"de\" and returns true .) $(T2 findSplit, findSplit(\"abcdefg\", \"de\") returns a tuple of three ranges \"abc\" , \"de\" , and \"fg\" .) $(T2 findSplitAfter, findSplitAfter(\"abcdefg\", \"de\") returns a tuple of two ranges \"abcde\" and \"fg\" .) $(T2 findSplitBefore, findSplitBefore(\"abcdefg\", \"de\") returns a tuple of two ranges \"abc\" and \"defg\" .) $(T2 minCount, minCount([2, 1, 1, 4, 1]) returns tuple(1, 3) .) $(T2 maxCount, maxCount([2, 4, 1, 4, 1]) returns tuple(4, 2) .) $(T2 minElement, Selects the minimal element of a range. minElement([3, 4, 1, 2]) returns 1 .) $(T2 maxElement, Selects the maximal element of a range. maxElement([3, 4, 1, 2]) returns 4 .) $(T2 minIndex, Index of the minimal element of a range. minIndex([3, 4, 1, 2]) returns 2 .) $(T2 maxIndex, Index of the maximal element of a range. maxIndex([3, 4, 1, 2]) returns 1 .) $(T2 minPos, minPos([2, 3, 1, 3, 4, 1]) returns the subrange [1, 3, 4, 1] , i.e., positions the range at the first occurrence of its minimal element.) $(T2 maxPos, maxPos([2, 3, 1, 3, 4, 1]) returns the subrange [4, 1] , i.e., positions the range at the first occurrence of its maximal element.) $(T2 skipOver, Assume a = \"blah\" . Then skipOver(a, \"bi\") leaves a unchanged and returns false , whereas skipOver(a, \"bl\") advances a to refer to \"ah\" and returns true .) $(T2 startsWith, startsWith(\"hello, world\", \"hello\") returns true .) $(T2 until, Lazily iterates a range until a specific value is found.) ) Copyright: Andrei Alexandrescu 2008-. License: $(HTTP boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP erdani.com, Andrei Alexandrescu) Source: $(PHOBOSSRC std/algorithm/searching.d) Macros T2=$(TR $(TDNW $(LREF $1)) $(TD $+)) Aliases Name Description OpenRight Interval option specifier for until (below) and others. Structs Name Description BoyerMooreFinder Sets up Boyer-Moore matching for use with find below. By default, elements are compared for equality. FindSplitResult Until ditto Functions Name Description all Checks if $(I all) of the elements satisfy pred. any Checks if $(I any) of the elements satisfies pred. !any can be used to verify that $(I none) of the elements satisfy pred . This is sometimes called exists in other languages. balancedParens Checks whether r has \"balanced parentheses\", i.e. all instances of lPar are closed by corresponding instances of rPar . The parameter maxNestingLevel controls the nesting level allowed. The most common uses are the default or 0 . In the latter case, no nesting is allowed. boyerMooreFinder Ditto canFind Convenience function. Like find, but only returns whether or not the search was successful. commonPrefix Returns the common prefix of two ranges. count Counts matches of needle in haystack . countUntil Counts elements in the given $(REF_ALTTEXT forward range, isForwardRange, std,range,primitives) until the given predicate is true for one of the given needles . endsWith Checks if the given range ends with (one of) the given needle(s). The reciprocal of startsWith . extremum Iterates the passed range and selects the extreme element with less . If the extreme element occurs multiple time, the first occurrence will be returned. find Finds an element e of an $(REF_ALTTEXT input range, isInputRange, std,range,primitives) where pred(e) is true . $(P $(PANEL $(UL $(LI find behaves similarly to dropWhile in other languages.) $(LI To find the last matching element in a $(REF_ALTTEXT bidirectional, isBidirectionalRange, std,range,primitives) haystack , call find!pred(retro(haystack)) . See $(REF retro, std,range).) ))) findAdjacent Advances r until it finds the first two adjacent elements a , b that satisfy pred(a, b) . Performs $(BIGOH r.length) evaluations of pred . findAmong Searches the given range for an element that matches one of the given choices. findSkip Finds needle in haystack and positions haystack right after the first occurrence of needle . findSplit These functions find the first occurrence of needle in haystack and then split haystack as follows. findSplitAfter Ditto findSplitBefore Ditto maxCount Ditto maxElement Iterates the passed range and returns the maximal element. A custom mapping function can be passed to map . In other languages this is sometimes called argmax . maxIndex Computes the index of the first occurrence of range 's maximum element. maxPos Ditto minCount Computes the minimum (respectively maximum) of range along with its number of occurrences. Formally, the minimum is a value x in range such that $(D pred(a, x)) is false for all values a in range . Conversely, the maximum is a value x in range such that pred(x, a) is false for all values a in range (note the swapped arguments to pred ). minElement Iterates the passed range and returns the minimal element. A custom mapping function can be passed to map . In other languages this is sometimes called argmin . minIndex Computes the index of the first occurrence of range 's minimum element. minPos Computes a subrange of range starting at the first occurrence of range 's minimum (respectively maximum) and with the same ending as range , or the empty range if range itself is empty. simpleMindedFind skipAll skipOver Skip over the initial portion of the first given range (haystack) that matches any of the additionally given ranges (needles) fully, or if no second range is given skip over the elements that fulfill pred. Do nothing if there is no match. startsWith Checks whether the given $(REF_ALTTEXT input range, isInputRange, std,range,primitives) starts with (one of) the given needle(s) or, if no needles are given, if its front element fulfils predicate pred . until Lazily iterates range until the element e for which pred(e, sentinel) is true. Variables Name Description canTestStartsWith hasConstEmptyMember isPredComparable Skip over the initial portion of the first given range (haystack) that matches any of the additionally given ranges (needles) fully, or if no second range is given skip over the elements that fulfill pred. Do nothing if there is no match."
  },
  "phobos/std/algorithm/searching/Structs/BoyerMooreFinder.html": {
    "href": "phobos/std/algorithm/searching/Structs/BoyerMooreFinder.html",
    "title": "Struct - BoyerMooreFinder | Marmos Demo",
    "keywords": "Struct - BoyerMooreFinder Module std.algorithm.searching public struct BoyerMooreFinder { // alias opDollar = <todo: marmos support pending>; // Range beFound( Range haystack ) ; // size_t length( ) ; // ptrdiff_t occurrence( ElementType!(Range) c ) ; // Range needle; // <bug: unknown> occ; // <bug: unknown> skip; } About Sets up Boyer-Moore matching for use with find below. By default, elements are compared for equality. BoyerMooreFinder allocates GC memory. Params pred Predicate used to compare elements. needle A random-access range with length and slicing. Returns An instance of BoyerMooreFinder that can be used with find() to invoke the Boyer-Moore matching algorithm for finding of needle in a given haystack. Aliases Name Description opDollar Functions Name Description beFound length occurrence Variables Name Description needle occ skip"
  },
  "phobos/std/algorithm/searching/Structs/FindSplitResult.html": {
    "href": "phobos/std/algorithm/searching/Structs/FindSplitResult.html",
    "title": "Struct - FindSplitResult | Marmos Demo",
    "keywords": "Struct - FindSplitResult Module std.algorithm.searching public struct FindSplitResult { // void opAssign( <bug: unknown> rhs ) ; // Tuple!(Types) asTuple; } Functions Name Description opAssign Variables Name Description asTuple"
  },
  "phobos/std/algorithm/searching/Structs/Until.html": {
    "href": "phobos/std/algorithm/searching/Structs/Until.html",
    "title": "Struct - Until | Marmos Demo",
    "keywords": "Struct - Until Module std.algorithm.searching public struct Until { // bool empty( ) ; // <bug: unknown> front( ) auto; // void popFront( ) ; // bool predSatisfied( ) ; // Until save( ) ; } About ditto Functions Name Description empty front popFront predSatisfied save"
  },
  "phobos/std/algorithm/searching/Until/Functions/empty.html": {
    "href": "phobos/std/algorithm/searching/Until/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.algorithm.searching Parent Until empty() bool empty( )"
  },
  "phobos/std/algorithm/searching/Until/Functions/front.html": {
    "href": "phobos/std/algorithm/searching/Until/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.algorithm.searching Parent Until front() <bug: unknown> front( ) auto"
  },
  "phobos/std/algorithm/searching/Until/Functions/popFront.html": {
    "href": "phobos/std/algorithm/searching/Until/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.algorithm.searching Parent Until popFront() void popFront( )"
  },
  "phobos/std/algorithm/searching/Until/Functions/predSatisfied.html": {
    "href": "phobos/std/algorithm/searching/Until/Functions/predSatisfied.html",
    "title": "Overloads for - predSatisfied | Marmos Demo",
    "keywords": "Overloads for - predSatisfied Module std.algorithm.searching Parent Until predSatisfied() bool predSatisfied( )"
  },
  "phobos/std/algorithm/searching/Until/Functions/save.html": {
    "href": "phobos/std/algorithm/searching/Until/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.algorithm.searching Parent Until save() Until save( )"
  },
  "phobos/std/algorithm/setops/Functions/cartesianProduct.html": {
    "href": "phobos/std/algorithm/setops/Functions/cartesianProduct.html",
    "title": "Overloads for - cartesianProduct | Marmos Demo",
    "keywords": "Overloads for - cartesianProduct Module std.algorithm.setops cartesianProduct(range1, range2) <bug: unknown> cartesianProduct( R1 range1, R2 range2 ) auto Lazily computes the Cartesian product of two or more ranges. The product is a range of tuples of elements from each respective range. The conditions for the two-range case are as follows If both ranges are finite, then one must be (at least) a $(REF_ALTTEXT forward range, isForwardRange, std,range,primitives) and the other an $(REF_ALTTEXT input range, isInputRange, std,range,primitives). If one range is infinite and the other finite, then the finite range must be a forward range, and the infinite range can be an input range. If both ranges are infinite, then both must be forward ranges. When there are more than two ranges, the above conditions apply to each adjacent pair of ranges. Params range1 R1 The first range range2 R2 The second range ranges <parameter not found> Two or more non-infinite forward ranges otherRanges <parameter not found> Zero or more non-infinite forward ranges Returns A forward range of $(REF Tuple, std,typecons) representing elements of the cartesian product of the given ranges. cartesianProduct(ranges) <bug: unknown> cartesianProduct( RR ranges ) auto ditto cartesianProduct(range1, range2, otherRanges) <bug: unknown> cartesianProduct( R1 range1, R2 range2, RR otherRanges ) auto ditto"
  },
  "phobos/std/algorithm/setops/Functions/largestPartialIntersection.html": {
    "href": "phobos/std/algorithm/setops/Functions/largestPartialIntersection.html",
    "title": "Overloads for - largestPartialIntersection | Marmos Demo",
    "keywords": "Overloads for - largestPartialIntersection Module std.algorithm.setops largestPartialIntersection(ror, tgt, sorted) void largestPartialIntersection( RangeOfRanges ror, Range tgt, SortOutput sorted ) Given a range of sorted $(REF_ALTTEXT forward ranges, isForwardRange, std,range,primitives) ror , copies to tgt the elements that are common to most ranges, along with their number of occurrences. All ranges in ror are assumed to be sorted by $(D less). Only the most frequent tgt.length elements are returned. Params less <parameter not found> The predicate the ranges are sorted by. ror RangeOfRanges A range of forward ranges sorted by less . tgt Range The target range to copy common elements to. sorted SortOutput Whether the elements copied should be in sorted order. The function largestPartialIntersection is useful for e.g. searching an $(LINK2 https://en.wikipedia.org/wiki/Inverted_index, inverted index) for the documents most likely to contain some terms of interest. The complexity of the search is $(BIGOH n log(tgt.length)), where n is the sum of lengths of all input ranges. This approach is faster than keeping an associative array of the occurrences and then selecting its top items, and also requires less memory (largestPartialIntersection builds its result directly in tgt and requires no extra memory). If at least one of the ranges is a multiset, then all occurences of a duplicate element are taken into account. The result is equivalent to merging all ranges and picking the most frequent tgt.length elements. Warning: Because largestPartialIntersection does not allocate extra memory, it will leave ror modified. Namely, $(D largestPartialIntersection) assumes ownership of ror and discretionarily swaps and advances elements of it. If you want $(D ror) to preserve its contents after the call, you may want to pass a duplicate to largestPartialIntersection (and perhaps cache the duplicate in between calls)."
  },
  "phobos/std/algorithm/setops/Functions/largestPartialIntersectionWeighted.html": {
    "href": "phobos/std/algorithm/setops/Functions/largestPartialIntersectionWeighted.html",
    "title": "Overloads for - largestPartialIntersectionWeighted | Marmos Demo",
    "keywords": "Overloads for - largestPartialIntersectionWeighted Module std.algorithm.setops largestPartialIntersectionWeighted(ror, tgt, weights, sorted) void largestPartialIntersectionWeighted( RangeOfRanges ror, Range tgt, WeightsAA weights, SortOutput sorted ) Similar to largestPartialIntersection , but associates a weight with each distinct element in the intersection. If at least one of the ranges is a multiset, then all occurences of a duplicate element are taken into account. The result is equivalent to merging all input ranges and picking the highest tgt.length , weight-based ranking elements. Params less <parameter not found> The predicate the ranges are sorted by. ror RangeOfRanges A range of $(REF_ALTTEXT forward ranges, isForwardRange, std,range,primitives) ror = A range of $(REF_ALTTEXT forward ranges, isForwardRange, std,range,primitives) sorted by less . tgt = The target range to copy common elements to. weights = An associative array mapping elements to weights. sorted = Whether the elements copied should be in sorted order."
  },
  "phobos/std/algorithm/setops/Functions/multiwayMerge.html": {
    "href": "phobos/std/algorithm/setops/Functions/multiwayMerge.html",
    "title": "Overloads for - multiwayMerge | Marmos Demo",
    "keywords": "Overloads for - multiwayMerge Module std.algorithm.setops multiwayMerge(ror) MultiwayMerge!(lessRangeOfRanges) multiwayMerge( RangeOfRanges ror ) Ditto"
  },
  "phobos/std/algorithm/setops/Functions/multiwayUnion.html": {
    "href": "phobos/std/algorithm/setops/Functions/multiwayUnion.html",
    "title": "Overloads for - multiwayUnion | Marmos Demo",
    "keywords": "Overloads for - multiwayUnion Module std.algorithm.setops multiwayUnion(ror) <bug: unknown> multiwayUnion( RangeOfRanges ror ) auto Computes the union of multiple ranges. The $(REF_ALTTEXT input ranges, isInputRange, std,range,primitives) are passed as a range of ranges and each is assumed to be sorted by $(D less). Computation is done lazily, one union element at a time. multiwayUnion(ror) is functionally equivalent to multiwayMerge(ror).uniq . \"The output of multiwayUnion has no duplicates even when its inputs contain duplicates.\" Params less <parameter not found> Predicate the given ranges are sorted by. ror RangeOfRanges A range of ranges sorted by less to compute the intersection for. Returns A range of the union of the ranges in ror . See also: $(LREF multiwayMerge)"
  },
  "phobos/std/algorithm/setops/Functions/setDifference.html": {
    "href": "phobos/std/algorithm/setops/Functions/setDifference.html",
    "title": "Overloads for - setDifference | Marmos Demo",
    "keywords": "Overloads for - setDifference Module std.algorithm.setops setDifference(r1, r2) SetDifference!(lessR1R2) setDifference( R1 r1, R2 r2 ) Ditto"
  },
  "phobos/std/algorithm/setops/Functions/setIntersection.html": {
    "href": "phobos/std/algorithm/setops/Functions/setIntersection.html",
    "title": "Overloads for - setIntersection | Marmos Demo",
    "keywords": "Overloads for - setIntersection Module std.algorithm.setops setIntersection(ranges) SetIntersection!(lessRs) setIntersection( Rs ranges ) Ditto"
  },
  "phobos/std/algorithm/setops/Functions/setSymmetricDifference.html": {
    "href": "phobos/std/algorithm/setops/Functions/setSymmetricDifference.html",
    "title": "Overloads for - setSymmetricDifference | Marmos Demo",
    "keywords": "Overloads for - setSymmetricDifference Module std.algorithm.setops setSymmetricDifference(r1, r2) SetSymmetricDifference!(lessR1R2) setSymmetricDifference( R1 r1, R2 r2 ) Ditto"
  },
  "phobos/std/algorithm/setops/MultiwayMerge/Functions/compFront.html": {
    "href": "phobos/std/algorithm/setops/MultiwayMerge/Functions/compFront.html",
    "title": "Overloads for - compFront | Marmos Demo",
    "keywords": "Overloads for - compFront Module std.algorithm.setops Parent MultiwayMerge compFront(a, b) bool compFront( a, b ) static"
  },
  "phobos/std/algorithm/setops/MultiwayMerge/Functions/empty.html": {
    "href": "phobos/std/algorithm/setops/MultiwayMerge/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.algorithm.setops Parent MultiwayMerge empty() bool empty( )"
  },
  "phobos/std/algorithm/setops/MultiwayMerge/Functions/front.html": {
    "href": "phobos/std/algorithm/setops/MultiwayMerge/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.algorithm.setops Parent MultiwayMerge front() <bug: unknown> front( ) auto"
  },
  "phobos/std/algorithm/setops/MultiwayMerge/Functions/popFront.html": {
    "href": "phobos/std/algorithm/setops/MultiwayMerge/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.algorithm.setops Parent MultiwayMerge popFront() void popFront( )"
  },
  "phobos/std/algorithm/setops/Overview.html": {
    "href": "phobos/std/algorithm/setops/Overview.html",
    "title": "Module - std.algorithm.setops | Marmos Demo",
    "keywords": "Module - std.algorithm.setops About This is a submodule of $(MREF std, algorithm). It contains generic algorithms that implement set operations. The functions $(LREF multiwayMerge), $(LREF multiwayUnion), $(LREF setDifference), $(LREF setIntersection), $(LREF setSymmetricDifference) expect a range of sorted ranges as input. All algorithms are generalized to accept as input not only sets but also $(LINK2 https://en.wikipedia.org/wiki/Multiset, multisets). Each algorithm documents behaviour in the presence of duplicated inputs. $(SCRIPT inhibitQuickIndex = 1;) $(BOOKTABLE Cheat Sheet, $(TR $(TH Function Name) $(TH Description)) $(T2 cartesianProduct, Computes Cartesian product of two ranges.) $(T2 largestPartialIntersection, Copies out the values that occur most frequently in a range of ranges.) $(T2 largestPartialIntersectionWeighted, Copies out the values that occur most frequently (multiplied by per-value weights) in a range of ranges.) $(T2 multiwayMerge, Merges a range of sorted ranges.) $(T2 multiwayUnion, Computes the union of a range of sorted ranges.) $(T2 setDifference, Lazily computes the set difference of two or more sorted ranges.) $(T2 setIntersection, Lazily computes the intersection of two or more sorted ranges.) $(T2 setSymmetricDifference, Lazily computes the symmetric set difference of two or more sorted ranges.) ) Copyright: Andrei Alexandrescu 2008-. License: $(HTTP boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP erdani.com, Andrei Alexandrescu) Source: $(PHOBOSSRC std/algorithm/setops.d) Macros T2=$(TR $(TDNW $(LREF $1)) $(TD $+)) Aliases Name Description nWayUnion NWayUnion Structs Name Description MultiwayMerge Merges multiple sets. The input sets are passed as a range of ranges and each is assumed to be sorted by $(D less). Computation is done lazily, one union element at a time. The complexity of one popFront operation is $(BIGOH log(ror.length)). However, the length of ror decreases as ranges in it are exhausted, so the complexity of a full pass through $(D MultiwayMerge) is dependent on the distribution of the lengths of ranges contained within ror . If all ranges have the same length n (worst case scenario), the complexity of a full pass through $(D MultiwayMerge) is $(BIGOH n **ror.length ** log(ror.length)), i.e., $(D log(ror.length)) times worse than just spanning all ranges in turn. The output comes sorted (unstably) by less . SetDifference Lazily computes the difference of r1 and r2 . The two ranges are assumed to be sorted by less . The element types of the two ranges must have a common type. SetIntersection Lazily computes the intersection of two or more $(REF_ALTTEXT input ranges, isInputRange, std,range,primitives) ranges . The ranges are assumed to be sorted by less . The element types of the ranges must have a common type. SetSymmetricDifference Lazily computes the symmetric difference of r1 and r2 , i.e. the elements that are present in exactly one of r1 and $(D r2). The two ranges are assumed to be sorted by less , and the output is also sorted by less . The element types of the two ranges must have a common type. Functions Name Description cartesianProduct Lazily computes the Cartesian product of two or more ranges. The product is a range of tuples of elements from each respective range. largestPartialIntersection Given a range of sorted $(REF_ALTTEXT forward ranges, isForwardRange, std,range,primitives) ror , copies to tgt the elements that are common to most ranges, along with their number of occurrences. All ranges in ror are assumed to be sorted by $(D less). Only the most frequent tgt.length elements are returned. largestPartialIntersectionWeighted Similar to largestPartialIntersection , but associates a weight with each distinct element in the intersection. multiwayMerge Ditto multiwayUnion Computes the union of multiple ranges. The $(REF_ALTTEXT input ranges, isInputRange, std,range,primitives) are passed as a range of ranges and each is assumed to be sorted by $(D less). Computation is done lazily, one union element at a time. multiwayUnion(ror) is functionally equivalent to multiwayMerge(ror).uniq . setDifference Ditto setIntersection Ditto setSymmetricDifference Ditto"
  },
  "phobos/std/algorithm/setops/SetDifference/Functions/adjustPosition.html": {
    "href": "phobos/std/algorithm/setops/SetDifference/Functions/adjustPosition.html",
    "title": "Overloads for - adjustPosition | Marmos Demo",
    "keywords": "Overloads for - adjustPosition Module std.algorithm.setops Parent SetDifference adjustPosition() void adjustPosition( )"
  },
  "phobos/std/algorithm/setops/SetDifference/Functions/empty.html": {
    "href": "phobos/std/algorithm/setops/SetDifference/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.algorithm.setops Parent SetDifference empty() bool empty( )"
  },
  "phobos/std/algorithm/setops/SetDifference/Functions/front.html": {
    "href": "phobos/std/algorithm/setops/SetDifference/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.algorithm.setops Parent SetDifference front() <bug: unknown> front( ) auto"
  },
  "phobos/std/algorithm/setops/SetDifference/Functions/popFront.html": {
    "href": "phobos/std/algorithm/setops/SetDifference/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.algorithm.setops Parent SetDifference popFront() void popFront( )"
  },
  "phobos/std/algorithm/setops/SetDifference/Functions/save.html": {
    "href": "phobos/std/algorithm/setops/SetDifference/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.algorithm.setops Parent SetDifference save() <bug: unknown> save( )"
  },
  "phobos/std/algorithm/setops/SetIntersection/Functions/adjustPosition.html": {
    "href": "phobos/std/algorithm/setops/SetIntersection/Functions/adjustPosition.html",
    "title": "Overloads for - adjustPosition | Marmos Demo",
    "keywords": "Overloads for - adjustPosition Module std.algorithm.setops Parent SetIntersection adjustPosition() void adjustPosition( )"
  },
  "phobos/std/algorithm/setops/SetIntersection/Functions/empty.html": {
    "href": "phobos/std/algorithm/setops/SetIntersection/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.algorithm.setops Parent SetIntersection empty() bool empty( )"
  },
  "phobos/std/algorithm/setops/SetIntersection/Functions/front.html": {
    "href": "phobos/std/algorithm/setops/SetIntersection/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.algorithm.setops Parent SetIntersection front() ElementType front( )"
  },
  "phobos/std/algorithm/setops/SetIntersection/Functions/popFront.html": {
    "href": "phobos/std/algorithm/setops/SetIntersection/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.algorithm.setops Parent SetIntersection popFront() void popFront( )"
  },
  "phobos/std/algorithm/setops/SetIntersection/Functions/save.html": {
    "href": "phobos/std/algorithm/setops/SetIntersection/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.algorithm.setops Parent SetIntersection save() SetIntersection save( )"
  },
  "phobos/std/algorithm/setops/SetSymmetricDifference/Functions/adjustPosition.html": {
    "href": "phobos/std/algorithm/setops/SetSymmetricDifference/Functions/adjustPosition.html",
    "title": "Overloads for - adjustPosition | Marmos Demo",
    "keywords": "Overloads for - adjustPosition Module std.algorithm.setops Parent SetSymmetricDifference adjustPosition() void adjustPosition( )"
  },
  "phobos/std/algorithm/setops/SetSymmetricDifference/Functions/empty.html": {
    "href": "phobos/std/algorithm/setops/SetSymmetricDifference/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.algorithm.setops Parent SetSymmetricDifference empty() bool empty( )"
  },
  "phobos/std/algorithm/setops/SetSymmetricDifference/Functions/front.html": {
    "href": "phobos/std/algorithm/setops/SetSymmetricDifference/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.algorithm.setops Parent SetSymmetricDifference front() <bug: unknown> front( ) auto"
  },
  "phobos/std/algorithm/setops/SetSymmetricDifference/Functions/opSlice.html": {
    "href": "phobos/std/algorithm/setops/SetSymmetricDifference/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.algorithm.setops Parent SetSymmetricDifference opSlice() <bug: unknown> opSlice( ) auto"
  },
  "phobos/std/algorithm/setops/SetSymmetricDifference/Functions/popFront.html": {
    "href": "phobos/std/algorithm/setops/SetSymmetricDifference/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.algorithm.setops Parent SetSymmetricDifference popFront() void popFront( )"
  },
  "phobos/std/algorithm/setops/SetSymmetricDifference/Functions/save.html": {
    "href": "phobos/std/algorithm/setops/SetSymmetricDifference/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.algorithm.setops Parent SetSymmetricDifference save() <bug: unknown> save( )"
  },
  "phobos/std/algorithm/setops/Structs/MultiwayMerge.html": {
    "href": "phobos/std/algorithm/setops/Structs/MultiwayMerge.html",
    "title": "Struct - MultiwayMerge | Marmos Demo",
    "keywords": "Struct - MultiwayMerge Module std.algorithm.setops public struct MultiwayMerge { // alias comp = <todo: marmos support pending>; // alias ElementType = <todo: marmos support pending>; // bool compFront( a, b ) static; // bool empty( ) ; // <bug: unknown> front( ) auto; // void popFront( ) ; } About Merges multiple sets. The input sets are passed as a range of ranges and each is assumed to be sorted by $(D less). Computation is done lazily, one union element at a time. The complexity of one popFront operation is $(BIGOH log(ror.length)). However, the length of ror decreases as ranges in it are exhausted, so the complexity of a full pass through $(D MultiwayMerge) is dependent on the distribution of the lengths of ranges contained within ror . If all ranges have the same length n (worst case scenario), the complexity of a full pass through $(D MultiwayMerge) is $(BIGOH n **ror.length ** log(ror.length)), i.e., $(D log(ror.length)) times worse than just spanning all ranges in turn. The output comes sorted (unstably) by less . The length of the resulting range is the sum of all lengths of the ranges passed as input. This means that all elements (duplicates included) are transferred to the resulting range. For backward compatibility, multiwayMerge is available under the name nWayUnion and MultiwayMerge under the name of NWayUnion . Future code should use multiwayMerge and MultiwayMerge as nWayUnion and NWayUnion will be deprecated. Params less Predicate the given ranges are sorted by. ror A range of ranges sorted by less to compute the union for. Returns A range of the union of the ranges in ror . Warning: Because MultiwayMerge does not allocate extra memory, it will leave ror modified. Namely, MultiwayMerge assumes ownership of ror and discretionarily swaps and advances elements of it. If you want ror to preserve its contents after the call, you may want to pass a duplicate to MultiwayMerge (and perhaps cache the duplicate in between calls). See_Also: $(REF merge, std,algorithm,sorting) for an analogous function that takes a static number of ranges of possibly disparate types. Aliases Name Description comp ElementType Functions Name Description compFront empty front popFront"
  },
  "phobos/std/algorithm/setops/Structs/SetDifference.html": {
    "href": "phobos/std/algorithm/setops/Structs/SetDifference.html",
    "title": "Struct - SetDifference | Marmos Demo",
    "keywords": "Struct - SetDifference Module std.algorithm.setops public struct SetDifference { // alias comp = <todo: marmos support pending>; // void adjustPosition( ) ; // bool empty( ) ; // <bug: unknown> front( ) auto; // void popFront( ) ; // <bug: unknown> save( ) ; // R1 r1; // R2 r2; } About Lazily computes the difference of r1 and r2 . The two ranges are assumed to be sorted by less . The element types of the two ranges must have a common type. In the case of multisets, considering that element a appears x times in r1 and y times and r2 , the number of occurences of a in the resulting range is going to be x-y if x > y or 0 otherwise. Params less Predicate the given ranges are sorted by. r1 The first range. r2 The range to subtract from r1 . Returns A range of the difference of r1 and r2 . See_also: $(LREF setSymmetricDifference) Aliases Name Description comp Functions Name Description adjustPosition empty front popFront save Variables Name Description r1 r2"
  },
  "phobos/std/algorithm/setops/Structs/SetIntersection.html": {
    "href": "phobos/std/algorithm/setops/Structs/SetIntersection.html",
    "title": "Struct - SetIntersection | Marmos Demo",
    "keywords": "Struct - SetIntersection Module std.algorithm.setops public struct SetIntersection { // alias comp = <todo: marmos support pending>; // alias ElementType = <todo: marmos support pending>; // void adjustPosition( ) ; // bool empty( ) ; // ElementType front( ) ; // void popFront( ) ; // SetIntersection save( ) ; } About Lazily computes the intersection of two or more $(REF_ALTTEXT input ranges, isInputRange, std,range,primitives) ranges . The ranges are assumed to be sorted by less . The element types of the ranges must have a common type. In the case of multisets, the range with the minimum number of occurences of a given element, propagates the number of occurences of this element to the resulting range. Params less Predicate the given ranges are sorted by. ranges The ranges to compute the intersection for. Returns A range containing the intersection of the given ranges. Aliases Name Description comp ElementType Functions Name Description adjustPosition empty front popFront save"
  },
  "phobos/std/algorithm/setops/Structs/SetSymmetricDifference.html": {
    "href": "phobos/std/algorithm/setops/Structs/SetSymmetricDifference.html",
    "title": "Struct - SetSymmetricDifference | Marmos Demo",
    "keywords": "Struct - SetSymmetricDifference Module std.algorithm.setops public struct SetSymmetricDifference { // alias comp = <todo: marmos support pending>; // void adjustPosition( ) ; // bool empty( ) ; // <bug: unknown> front( ) auto; // <bug: unknown> opSlice( ) auto; // void popFront( ) ; // <bug: unknown> save( ) ; // R1 r1; // R2 r2; } About Lazily computes the symmetric difference of r1 and r2 , i.e. the elements that are present in exactly one of r1 and $(D r2). The two ranges are assumed to be sorted by less , and the output is also sorted by less . The element types of the two ranges must have a common type. If both ranges are sets (without duplicated elements), the resulting range is going to be a set. If at least one of the ranges is a multiset, the number of occurences of an element x in the resulting range is abs(a-b) where a is the number of occurences of x in r1 , b is the number of occurences of x in r2 , and abs is the absolute value. If both arguments are ranges of L-values of the same type then SetSymmetricDifference will also be a range of L-values of that type. Params less Predicate the given ranges are sorted by. r1 The first range. r2 The second range. Returns A range of the symmetric difference between r1 and r2 . See_also: $(LREF setDifference) Aliases Name Description comp Functions Name Description adjustPosition empty front opSlice popFront save Variables Name Description r1 r2"
  },
  "phobos/std/algorithm/sorting/Functions/completeSort.html": {
    "href": "phobos/std/algorithm/sorting/Functions/completeSort.html",
    "title": "Overloads for - completeSort | Marmos Demo",
    "keywords": "Overloads for - completeSort Module std.algorithm.sorting completeSort(lhs, rhs) void completeSort( SortedRange!(Lhsless) lhs, Rhs rhs ) Sorts the random-access range chain(lhs, rhs) according to predicate less . The left-hand side of the range lhs is assumed to be already sorted; rhs is assumed to be unsorted. The exact strategy chosen depends on the relative sizes of lhs and rhs . Performs $(BIGOH lhs.length + rhs.length log(rhs.length)) (best case) to $(BIGOH (lhs.length + rhs.length) log(lhs.length + rhs.length)) (worst-case) evaluations of $(REF_ALTTEXT swap, swap, std,algorithm,mutation). Params less <parameter not found> The predicate to sort by. ss <parameter not found> The swapping strategy to use. lhs SortedRange!(Lhsless) The sorted, left-hand side of the random access range to be sorted. rhs Rhs The unsorted, right-hand side of the random access range to be sorted."
  },
  "phobos/std/algorithm/sorting/Functions/expandPartition.html": {
    "href": "phobos/std/algorithm/sorting/Functions/expandPartition.html",
    "title": "Overloads for - expandPartition | Marmos Demo",
    "keywords": "Overloads for - expandPartition Module std.algorithm.sorting expandPartition(r, lo, pivot, hi) size_t expandPartition( R r, size_t lo, size_t pivot, size_t hi )"
  },
  "phobos/std/algorithm/sorting/Functions/getPivot.html": {
    "href": "phobos/std/algorithm/sorting/Functions/getPivot.html",
    "title": "Overloads for - getPivot | Marmos Demo",
    "keywords": "Overloads for - getPivot Module std.algorithm.sorting getPivot(r) size_t getPivot( Range r )"
  },
  "phobos/std/algorithm/sorting/Functions/isPartitioned.html": {
    "href": "phobos/std/algorithm/sorting/Functions/isPartitioned.html",
    "title": "Overloads for - isPartitioned | Marmos Demo",
    "keywords": "Overloads for - isPartitioned Module std.algorithm.sorting isPartitioned(r) bool isPartitioned( Range r ) Params pred <parameter not found> The predicate that the range should be partitioned by. r Range The range to check. r = The range to check. Returns: true if r is partitioned according to predicate pred ."
  },
  "phobos/std/algorithm/sorting/Functions/isSorted.html": {
    "href": "phobos/std/algorithm/sorting/Functions/isSorted.html",
    "title": "Overloads for - isSorted | Marmos Demo",
    "keywords": "Overloads for - isSorted Module std.algorithm.sorting isSorted(r) bool isSorted( Range r ) Checks whether a $(REF_ALTTEXT forward range, isForwardRange, std,range,primitives) is sorted according to the comparison operation less . Performs $(BIGOH r.length) evaluations of less . Unlike isSorted , isStrictlyMonotonic does not allow for equal values, i.e. values for which both less(a, b) and less(b, a) are false. With either function, the predicate must be a strict ordering just like with isSorted . For example, using \"a <= b\" instead of \"a < b\" is incorrect and will cause failed assertions. Params less <parameter not found> Predicate the range should be sorted by. r Range Forward range to check for sortedness. Returns true if the range is sorted, false otherwise. isSorted allows duplicates, isStrictlyMonotonic not."
  },
  "phobos/std/algorithm/sorting/Functions/isStrictlyMonotonic.html": {
    "href": "phobos/std/algorithm/sorting/Functions/isStrictlyMonotonic.html",
    "title": "Overloads for - isStrictlyMonotonic | Marmos Demo",
    "keywords": "Overloads for - isStrictlyMonotonic Module std.algorithm.sorting isStrictlyMonotonic(r) bool isStrictlyMonotonic( Range r ) ditto"
  },
  "phobos/std/algorithm/sorting/Functions/makeIndex.html": {
    "href": "phobos/std/algorithm/sorting/Functions/makeIndex.html",
    "title": "Overloads for - makeIndex | Marmos Demo",
    "keywords": "Overloads for - makeIndex Module std.algorithm.sorting makeIndex(r, index) SortedRange!(RangeIndex) makeIndex( Range r, RangeIndex index ) Computes an index for r based on the comparison less . The index is a sorted array of pointers or indices into the original range. This technique is similar to sorting, but it is more flexible because (1) it allows \"sorting\" of immutable collections, (2) allows binary search even if the original collection does not offer random access, (3) allows multiple indexes, each on a different predicate, and (4) may be faster when dealing with large objects. However, using an index may also be slower under certain circumstances due to the extra indirection, and is always larger than a sorting-based solution because it needs space for the index in addition to the original collection. The complexity is the same as sort 's. The first overload of makeIndex writes to a range containing pointers, and the second writes to a range containing offsets. The first overload requires Range to be a $(REF_ALTTEXT forward range, isForwardRange, std,range,primitives), and the latter requires it to be a random-access range. makeIndex overwrites its second argument with the result, but never reallocates it. Params less <parameter not found> The comparison to use. ss <parameter not found> The swapping strategy. r Range The range to index. index RangeIndex The resulting index. Returns: The pointer-based version returns a SortedRange wrapper over index, of type SortedRange!(RangeIndex, (a, b) => binaryFun!less(*a, *b)) thus reflecting the ordering of the index. The index-based version returns void because the ordering relation involves not only index but also r . Throws: If the second argument's length is less than that of the range indexed, an exception is thrown. makeIndex(r, index) void makeIndex( Range r, RangeIndex index ) Ditto"
  },
  "phobos/std/algorithm/sorting/Functions/medianOf.html": {
    "href": "phobos/std/algorithm/sorting/Functions/medianOf.html",
    "title": "Overloads for - medianOf | Marmos Demo",
    "keywords": "Overloads for - medianOf Module std.algorithm.sorting medianOf(r, i) void medianOf( Range r, Indexes i )"
  },
  "phobos/std/algorithm/sorting/Functions/merge.html": {
    "href": "phobos/std/algorithm/sorting/Functions/merge.html",
    "title": "Overloads for - merge | Marmos Demo",
    "keywords": "Overloads for - merge Module std.algorithm.sorting merge(rs) Merge!(lessRs) merge( Rs rs ) Merge multiple sorted ranges rs with less-than predicate function pred into one single sorted output range containing the sorted union of the elements of inputs. Duplicates are not eliminated, meaning that the total number of elements in the output is the sum of all elements in the ranges passed to it; the length member is offered if all inputs also have length . The element types of all the inputs must have a common type CommonType . Params: less = Predicate the given ranges are sorted by. rs = The ranges to compute the union for. Returns: A range containing the union of the given ranges. Details: All of its inputs are assumed to be sorted. This can mean that inputs are instances of $(REF SortedRange, std,range). Use the result of $(REF sort, std,algorithm,sorting), or $(REF assumeSorted, std,range) to merge ranges known to be sorted (show in the example below). Note that there is currently no way of ensuring that two or more instances of $(REF SortedRange, std,range) are sorted using a specific comparison function pred . Therefore no checking is done here to assure that all inputs rs are instances of $(REF SortedRange, std,range). This algorithm is lazy, doing work progressively as elements are pulled off the result. Time complexity is proportional to the sum of element counts over all inputs. If all inputs have the same element type and offer it by ref , output becomes a range with mutable front (and back where appropriate) that reflects in the original inputs. If any of the inputs rs is infinite so is the result (empty being always false ). See_Also: $(REF multiwayMerge, std,algorithm,setops) for an analogous function that merges a dynamic number of ranges."
  },
  "phobos/std/algorithm/sorting/Functions/multiSort.html": {
    "href": "phobos/std/algorithm/sorting/Functions/multiSort.html",
    "title": "Overloads for - multiSort | Marmos Demo",
    "keywords": "Overloads for - multiSort Module std.algorithm.sorting multiSort(r) <bug: unknown> multiSort( Range r ) auto Sorts a range by multiple keys. The call $(D multiSort!(\"a.id < b.id\", \"a.date > b.date\")(r)) sorts the range r by id ascending, and sorts elements that have the same id by date descending. Such a call is equivalent to $(D sort!\"a.id != b.id ? a.id < b.id : a.date > b.date\"(r)), but multiSort is faster because it does fewer comparisons (in addition to being more convenient). Returns The initial range wrapped as a SortedRange with its predicates converted to an equivalent single predicate."
  },
  "phobos/std/algorithm/sorting/Functions/multiSortImpl.html": {
    "href": "phobos/std/algorithm/sorting/Functions/multiSortImpl.html",
    "title": "Overloads for - multiSortImpl | Marmos Demo",
    "keywords": "Overloads for - multiSortImpl Module std.algorithm.sorting multiSortImpl(r) void multiSortImpl( Range r )"
  },
  "phobos/std/algorithm/sorting/Functions/multiSortPredFun.html": {
    "href": "phobos/std/algorithm/sorting/Functions/multiSortPredFun.html",
    "title": "Overloads for - multiSortPredFun | Marmos Demo",
    "keywords": "Overloads for - multiSortPredFun Module std.algorithm.sorting multiSortPredFun(a, b) bool multiSortPredFun( ElementType!(Range) a, ElementType!(Range) b )"
  },
  "phobos/std/algorithm/sorting/Functions/nextEvenPermutation.html": {
    "href": "phobos/std/algorithm/sorting/Functions/nextEvenPermutation.html",
    "title": "Overloads for - nextEvenPermutation | Marmos Demo",
    "keywords": "Overloads for - nextEvenPermutation Module std.algorithm.sorting nextEvenPermutation(range) bool nextEvenPermutation( BidirectionalRange range ) Permutes range in-place to the next lexicographically greater $(I even) permutation. The predicate less defines the lexicographical ordering to be used on the range. An even permutation is one which is produced by swapping an even number of pairs of elements in the original range. The set of $(I even) permutations is distinct from the set of $(I all) permutations only when there are no duplicate elements in the range. If the range has $(I N) unique elements, then there are exactly $(I N)!/2 even permutations. If the range is already the lexicographically greatest even permutation, it is permuted back to the least even permutation and false is returned. Otherwise, true is returned, and the range is modified in-place to be the lexicographically next even permutation. One can thus generate the even permutations of a range with unique elements by starting with the lexicographically smallest permutation, and repeatedly calling nextEvenPermutation until it returns false. ---- // Enumerate even permutations int[] a = [1,2,3,4,5]; do { // use the current permutation and // proceed to the next even permutation of the array. } while (nextEvenPermutation(a)); ---- One can also generate the \\((I odd) permutations of a range by noting that permutations obey the rule that even + even = even, and odd + even = odd. Thus, by swapping the last two elements of a lexicographically least range, it is turned into the first odd permutation. Then calling nextEvenPermutation on this first odd permutation will generate the next even permutation relative to this odd permutation, which is actually the next odd permutation of the original range. Thus, by repeatedly calling nextEvenPermutation until it returns false, one enumerates the odd permutations of the original range. ---- // Enumerate odd permutations int[] a = [1,2,3,4,5]; swap(a[\\)-2], a[$-1]); // a is now the first odd permutation of [1,2,3,4,5] do { // use the current permutation and // proceed to the next odd permutation of the original array // (which is an even permutation of the first odd permutation). } while (nextEvenPermutation(a)); ---- Warning: Since even permutations are only distinct from all permutations when the range elements are unique, this function assumes that there are no duplicate elements under the specified ordering. If this is not true, some permutations may fail to be generated. When the range has non-unique elements, you should use $(MYREF nextPermutation) instead. Params less <parameter not found> The ordering to be used to determine lexicographical ordering of the permutations. range BidirectionalRange The range to permute. Returns: false if the range was lexicographically the greatest, in which case the range is reversed back to the lexicographically smallest permutation; otherwise returns true."
  },
  "phobos/std/algorithm/sorting/Functions/nextPermutation.html": {
    "href": "phobos/std/algorithm/sorting/Functions/nextPermutation.html",
    "title": "Overloads for - nextPermutation | Marmos Demo",
    "keywords": "Overloads for - nextPermutation Module std.algorithm.sorting nextPermutation(range) bool nextPermutation( BidirectionalRange range ) Permutes range in-place to the next lexicographically greater permutation. The predicate less defines the lexicographical ordering to be used on the range. If the range is currently the lexicographically greatest permutation, it is permuted back to the least permutation and false is returned. Otherwise, true is returned. One can thus generate all permutations of a range by sorting it according to less , which produces the lexicographically least permutation, and then calling nextPermutation until it returns false. This is guaranteed to generate all distinct permutations of the range exactly once. If there are $(I N) elements in the range and all of them are unique, then $(I N)! permutations will be generated. Otherwise, if there are some duplicated elements, fewer permutations will be produced. ---- // Enumerate all permutations int[] a = [1,2,3,4,5]; do { // use the current permutation and // proceed to the next permutation of the array. } while (nextPermutation(a)); ---- Params: less = The ordering to be used to determine lexicographical ordering of the permutations. range = The range to permute. Returns: false if the range was lexicographically the greatest, in which case the range is reversed back to the lexicographically smallest permutation; otherwise returns true. See_Also: $(REF permutations, std,algorithm,iteration)."
  },
  "phobos/std/algorithm/sorting/Functions/nthPermutation.html": {
    "href": "phobos/std/algorithm/sorting/Functions/nthPermutation.html",
    "title": "Overloads for - nthPermutation | Marmos Demo",
    "keywords": "Overloads for - nthPermutation Module std.algorithm.sorting nthPermutation(range, perm) Range nthPermutation( Range range, ulong perm ) auto Permutes range into the perm permutation. The algorithm has a constant runtime complexity with respect to the number of permutations created. Due to the number of unique values of ulong only the first 21 elements of range can be permuted. The rest of the range will therefore not be permuted. This algorithm uses the $(HTTP en.wikipedia.org/wiki/Lehmer_code, Lehmer Code). The algorithm works as follows $(D_CODE auto pem = [4,0,4,1,0,0,0]; // permutation 2982 in factorial auto src = [0,1,2,3,4,5,6]; // the range to permutate auto i = 0; // range index // range index iterates pem and src in sync // pem[i] + i is used as index into src // first src[pem[i] + i] is stored in t auto t = 4; // tmp value src = [0,1,2,3,n,5,6]; // then the values between i and pem[i] + i are moved one // to the right src = [n,0,1,2,3,5,6]; // at last t is inserted into position i src = [4,0,1,2,3,5,6]; // finally i is incremented ++i; // this process is repeated while i < pem.length t = 0; src = [4,n,1,2,3,5,6]; src = [4,0,1,2,3,5,6]; ++i; t = 6; src = [4,0,1,2,3,5,n]; src = [4,0,n,1,2,3,5]; src = [4,0,6,1,2,3,5]; ) Returns The permuted range. Params range Range The Range to permute. The original ordering will be lost. perm ulong The permutation to permutate range to."
  },
  "phobos/std/algorithm/sorting/Functions/nthPermutationImpl.html": {
    "href": "phobos/std/algorithm/sorting/Functions/nthPermutationImpl.html",
    "title": "Overloads for - nthPermutationImpl | Marmos Demo",
    "keywords": "Overloads for - nthPermutationImpl Module std.algorithm.sorting nthPermutationImpl(range, perm) bool nthPermutationImpl( Range range, ulong perm ) Returns: true in case the permutation worked, false in case perm had more digits in the factorial number system than range had elements. This case must not occur as this would lead to out of range accesses."
  },
  "phobos/std/algorithm/sorting/Functions/ordered.html": {
    "href": "phobos/std/algorithm/sorting/Functions/ordered.html",
    "title": "Overloads for - ordered | Marmos Demo",
    "keywords": "Overloads for - ordered Module std.algorithm.sorting ordered(values) bool ordered( T values ) Like isSorted , returns true if the given values are ordered according to the comparison operation less . Unlike isSorted , takes values directly instead of structured in a range. ordered allows repeated values, e.g. ordered(1, 1, 2) is true . To verify that the values are ordered strictly monotonically, use strictlyOrdered ; strictlyOrdered(1, 1, 2) is false . With either function, the predicate must be a strict ordering. For example, using \"a <= b\" instead of \"a < b\" is incorrect and will cause failed assertions. Params values T The tested value less <parameter not found> The comparison predicate Returns true if the values are ordered; ordered allows for duplicates, strictlyOrdered does not."
  },
  "phobos/std/algorithm/sorting/Functions/p3.html": {
    "href": "phobos/std/algorithm/sorting/Functions/p3.html",
    "title": "Overloads for - p3 | Marmos Demo",
    "keywords": "Overloads for - p3 Module std.algorithm.sorting p3(r, lo, hi) void p3( Range r, size_t lo, size_t hi )"
  },
  "phobos/std/algorithm/sorting/Functions/p4.html": {
    "href": "phobos/std/algorithm/sorting/Functions/p4.html",
    "title": "Overloads for - p4 | Marmos Demo",
    "keywords": "Overloads for - p4 Module std.algorithm.sorting p4(r, lo, hi) void p4( Range r, size_t lo, size_t hi )"
  },
  "phobos/std/algorithm/sorting/Functions/partialSort.html": {
    "href": "phobos/std/algorithm/sorting/Functions/partialSort.html",
    "title": "Overloads for - partialSort | Marmos Demo",
    "keywords": "Overloads for - partialSort Module std.algorithm.sorting partialSort(r, n) void partialSort( Range r, size_t n ) Reorders the random-access range r such that the range r[0 .. mid] is the same as if the entire r were sorted, and leaves the range r[mid .. r.length] in no particular order. Performs $(BIGOH r.length log(mid)) evaluations of pred. The implementation simply calls topN!(less, ss)(r, n) and then $(D sort!(less, ss)(r[0 .. n])). Params less <parameter not found> The predicate to sort by. ss <parameter not found> The swapping strategy to use. r Range The random-access range to reorder. n size_t The length of the initial segment of r to sort. partialSort(r1, r2) void partialSort( Range1 r1, Range2 r2 ) Stores the smallest elements of the two ranges in the left-hand range in sorted order. Params less <parameter not found> The predicate to sort by. ss <parameter not found> The swapping strategy to use. r1 Range1 The first range. r2 Range2 The second range."
  },
  "phobos/std/algorithm/sorting/Functions/partition.html": {
    "href": "phobos/std/algorithm/sorting/Functions/partition.html",
    "title": "Overloads for - partition | Marmos Demo",
    "keywords": "Overloads for - partition Module std.algorithm.sorting partition(r) Range partition( Range r ) Partitions a range in two using the given predicate . Specifically, reorders the range r = [left, right$(RPAREN) using $(REF_ALTTEXT swap, swap, std,algorithm,mutation) such that all elements i for which predicate(i) is true come before all elements j for which predicate(j) returns false . Performs $(BIGOH r.length) (if unstable or semistable) or $(BIGOH r.length log(r.length)) (if stable) evaluations of less and $(REF_ALTTEXT swap, swap, std,algorithm,mutation). The unstable version computes the minimum possible evaluations of swap (roughly half of those performed by the semistable version). Params predicate <parameter not found> The predicate to partition by. ss <parameter not found> The swapping strategy to employ. r Range The random-access range to partition. Returns The right part of r after partitioning. If ss == SwapStrategy.stable , partition preserves the relative ordering of all elements a , b in r for which predicate(a) == predicate(b) . If ss == SwapStrategy.semistable , partition preserves the relative ordering of all elements a , b in the left part of r for which predicate(a) == predicate(b) . partition(r) Range partition( Range r ) ditto"
  },
  "phobos/std/algorithm/sorting/Functions/partition3.html": {
    "href": "phobos/std/algorithm/sorting/Functions/partition3.html",
    "title": "Overloads for - partition3 | Marmos Demo",
    "keywords": "Overloads for - partition3 Module std.algorithm.sorting partition3(r, pivot) <bug: unknown> partition3( Range r, E pivot ) auto Rearranges elements in r in three adjacent ranges and returns them. The first and leftmost range only contains elements in r less than pivot . The second and middle range only contains elements in r that are equal to pivot . Finally, the third and rightmost range only contains elements in r that are greater than pivot . The less-than test is defined by the binary function less . Params less <parameter not found> The predicate to use for the rearrangement. ss <parameter not found> The swapping strategy to use. r Range The random-access range to rearrange. pivot E The pivot element. Returns A $(REF Tuple, std,typecons) of the three resulting ranges. These ranges are slices of the original range. BUGS: stable partition3 has not been implemented yet."
  },
  "phobos/std/algorithm/sorting/Functions/pivotPartition.html": {
    "href": "phobos/std/algorithm/sorting/Functions/pivotPartition.html",
    "title": "Overloads for - pivotPartition | Marmos Demo",
    "keywords": "Overloads for - pivotPartition Module std.algorithm.sorting pivotPartition(r, pivot) size_t pivotPartition( Range r, size_t pivot ) Partitions r around pivot using comparison function less , algorithm akin to $(LINK2 https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme, Hoare partition). Specifically, permutes elements of r and returns an index k < r.length such that: $(UL $(LI r[pivot] is swapped to r[k] ) $(LI All elements e in subrange r[0 .. k] satisfy !less(r[k], e) (i.e. r[k] is greater than or equal to each element to its left according to predicate less )) $(LI All elements e in subrange r[k .. $] satisfy !less(e, r[k]) (i.e. r[k] is less than or equal to each element to its right according to predicate less ))) If r contains equivalent elements, multiple permutations of r satisfy these constraints. In such cases, pivotPartition attempts to distribute equivalent elements fairly to the left and right of k such that k stays close to $(D r.length / 2). Params less <parameter not found> The predicate used for comparison, modeled as a $(LINK2 https://en.wikipedia.org/wiki/Weak_ordering#Strict_weak_orderings, strict weak ordering) (irreflexive, antisymmetric, transitive, and implying a transitive equivalence) r Range The range being partitioned pivot size_t The index of the pivot for partitioning, must be less than r.length or $(LINK2 https://en.wikipedia.org/wiki/Weak_ordering#Strict_weak_orderings, strict weak ordering) (irreflexive, antisymmetric, transitive, and implying a transitive equivalence) r = The range being partitioned pivot = The index of the pivot for partitioning, must be less than r.length or 0 if r.length is 0 Returns The new position of the pivot See_Also $(HTTP jgrcs.info/index.php/jgrcs/article/view/142, Engineering of a Quicksort Partitioning Algorithm), D. Abhyankar, Journal of Global Research in Computer Science, February 2011. $(HTTPS youtube.com/watch?v=AxnotgLql0k, ACCU 2016 Keynote), Andrei Alexandrescu."
  },
  "phobos/std/algorithm/sorting/Functions/quickSortImpl.html": {
    "href": "phobos/std/algorithm/sorting/Functions/quickSortImpl.html",
    "title": "Overloads for - quickSortImpl | Marmos Demo",
    "keywords": "Overloads for - quickSortImpl Module std.algorithm.sorting quickSortImpl(r, depth) void quickSortImpl( Range r, size_t depth )"
  },
  "phobos/std/algorithm/sorting/Functions/schwartzSort.html": {
    "href": "phobos/std/algorithm/sorting/Functions/schwartzSort.html",
    "title": "Overloads for - schwartzSort | Marmos Demo",
    "keywords": "Overloads for - schwartzSort Module std.algorithm.sorting schwartzSort(r) SortedRange!(R) schwartzSort( R r ) Alternative sorting method that should be used when comparing keys involves an expensive computation. Instead of using less(a, b) for comparing elements, schwartzSort uses less(transform(a), transform(b)) . The values of the transform function are precomputed in a temporary array, thus saving on repeatedly computing it. Conversely, if the cost of transform is small compared to the cost of allocating and filling the precomputed array, sort may be faster and therefore preferable. This approach to sorting is akin to the $(HTTP wikipedia.org/wiki/Schwartzian_transform, Schwartzian transform), also known as the decorate-sort-undecorate pattern in Python and Lisp. The complexity is the same as that of the corresponding sort , but schwartzSort evaluates transform only r.length times (less than half when compared to regular sorting). The usage can be best illustrated with an example. Example ---- uint hashFun(string) { ... expensive computation ... } string[] array = ...; // Sort strings by hash, slow sort!((a, b) => hashFun(a) < hashFun(b))(array); // Sort strings by hash, fast (only computes arr.length hashes): schwartzSort!(hashFun, \"a < b\")(array); ---- The schwartzSort function might require less temporary data and be faster than the Perl idiom or the decorate-sort-undecorate idiom present in Python and Lisp. This is because sorting is done in-place and only minimal extra data (one array of transformed elements) is created. To check whether an array was sorted and benefit of the speedup of Schwartz sorting, a function schwartzIsSorted is not provided because the effect can be achieved by calling $(D isSorted!less(map!transform(r))). Params transform <parameter not found> The transformation to apply. Either a unary function (unaryFun!transform(element)), or a binary function (binaryFun!transform(element, index)). less <parameter not found> The predicate to sort the transformed elements by. ss <parameter not found> The swapping strategy to use. r R The range to sort. Returns: The initial range wrapped as a SortedRange with the predicate (a, b) => binaryFun!less(transform(a), transform(b)) . schwartzSort(r) <bug: unknown> schwartzSort( R r ) auto ditto"
  },
  "phobos/std/algorithm/sorting/Functions/shortSort.html": {
    "href": "phobos/std/algorithm/sorting/Functions/shortSort.html",
    "title": "Overloads for - shortSort | Marmos Demo",
    "keywords": "Overloads for - shortSort Module std.algorithm.sorting shortSort(r) void shortSort( Range r )"
  },
  "phobos/std/algorithm/sorting/Functions/sort.html": {
    "href": "phobos/std/algorithm/sorting/Functions/sort.html",
    "title": "Overloads for - sort | Marmos Demo",
    "keywords": "Overloads for - sort Module std.algorithm.sorting sort(r) SortedRange!(Rangeless) sort( Range r ) Sorts a random-access range according to the predicate less . Performs $(BIGOH r.length log(r.length)) evaluations of less. If less involves expensive computations on the sort key, it may be worthwhile to use $(LREF schwartzSort) instead. Stable sorting requires hasAssignableElements!Range to be true. sort returns a $(REF SortedRange, std,range) over the original range, allowing functions that can take advantage of sorted data to know that the range is sorted and adjust accordingly. The $(REF SortedRange, std,range) is a wrapper around the original range, so both it and the original range are sorted. Other functions can't know that the original range has been sorted, but they $(I can) know that $(REF SortedRange, std,range) has been sorted. Preconditions The predicate is expected to satisfy certain rules in order for sort to behave as expected - otherwise, the program may fail on certain inputs (but not others) when not compiled in release mode, due to the cursory assumeSorted check. Specifically, sort expects less(a,b) && less(b,c) to imply less(a,c) (transitivity), and, conversely, !less(a,b) && !less(b,c) to imply !less(a,c) . Note that the default predicate (\"a < b\") does not always satisfy these conditions for floating point types, because the expression will always be false when either a or b is NaN. Use $(REF cmp, std,math) instead. Params less <parameter not found> The predicate to sort by. ss <parameter not found> The swapping strategy to use. r Range The range to sort. Returns: The initial range wrapped as a SortedRange with the predicate binaryFun!less . Algorithms: $(HTTP en.wikipedia.org/wiki/Introsort, Introsort) is used for unstable sorting and $(HTTP en.wikipedia.org/wiki/Timsort, Timsort) is used for stable sorting. Each algorithm has benefits beyond stability. Introsort is generally faster but Timsort may achieve greater speeds on data with low entropy or if predicate calls are expensive. Introsort performs no allocations whereas Timsort will perform one or more allocations per call. Both algorithms have $(BIGOH n log n) worst-case time complexity. See_Also \\((REF assumeSorted, std,range)\\)(BR) \\((REF SortedRange, std,range)\\)(BR) \\((REF SwapStrategy, std,algorithm,mutation)\\)(BR) $(REF binaryFun, std,functional)"
  },
  "phobos/std/algorithm/sorting/Functions/sort5.html": {
    "href": "phobos/std/algorithm/sorting/Functions/sort5.html",
    "title": "Overloads for - sort5 | Marmos Demo",
    "keywords": "Overloads for - sort5 Module std.algorithm.sorting sort5(r) void sort5( Range r )"
  },
  "phobos/std/algorithm/sorting/Functions/strictlyOrdered.html": {
    "href": "phobos/std/algorithm/sorting/Functions/strictlyOrdered.html",
    "title": "Overloads for - strictlyOrdered | Marmos Demo",
    "keywords": "Overloads for - strictlyOrdered Module std.algorithm.sorting strictlyOrdered(values) bool strictlyOrdered( T values ) ditto"
  },
  "phobos/std/algorithm/sorting/Functions/topN.html": {
    "href": "phobos/std/algorithm/sorting/Functions/topN.html",
    "title": "Overloads for - topN | Marmos Demo",
    "keywords": "Overloads for - topN Module std.algorithm.sorting topN(r, nth) <bug: unknown> topN( Range r, size_t nth ) auto Reorders the range r using $(REF_ALTTEXT swap, swap, std,algorithm,mutation) such that r[nth] refers to the element that would fall there if the range were fully sorted. It is akin to $(LINK2 https://en.wikipedia.org/wiki/Quickselect, Quickselect), and partitions r such that all elements e1 from r[0] to r[nth] satisfy !less(r[nth], e1) , and all elements e2 from r[nth] to r[r.length] satisfy !less(e2, r[nth]) . Effectively, it finds the nth + 1 smallest (according to less ) elements in r . Performs an expected $(BIGOH r.length) (if unstable) or $(BIGOH r.length log(r.length)) (if stable) evaluations of less and $(REF_ALTTEXT swap, swap, std,algorithm,mutation). If n >= r.length , the algorithm has no effect and returns r[0 .. r.length] . Params less <parameter not found> The predicate to sort by. ss <parameter not found> The swapping strategy to use. r Range The random-access range to reorder. nth size_t The index of the element that should be in sorted position after the function is done. Returns: a slice from r[0] to r[nth] , excluding r[nth] itself. See_Also $(LREF topNIndex), BUGS Stable topN has not been implemented yet. topN(r1, r2) <bug: unknown> topN( Range1 r1, Range2 r2 ) auto Stores the smallest elements of the two ranges in the left-hand range. Params less <parameter not found> The predicate to sort by. ss <parameter not found> The swapping strategy to use. r1 Range1 The first range. r2 Range2 The second range."
  },
  "phobos/std/algorithm/sorting/Functions/topNCopy.html": {
    "href": "phobos/std/algorithm/sorting/Functions/topNCopy.html",
    "title": "Overloads for - topNCopy | Marmos Demo",
    "keywords": "Overloads for - topNCopy Module std.algorithm.sorting topNCopy(source, target, sorted) TRange topNCopy( SRange source, TRange target, SortOutput sorted ) Copies the top n elements of the $(REF_ALTTEXT input range, isInputRange, std,range,primitives) source into the random-access range target , where n = target.length . Elements of source are not touched. If $(D sorted) is true , the target is sorted. Otherwise, the target respects the $(HTTP en.wikipedia.org/wiki/Binary_heap, heap property). Params less <parameter not found> The predicate to sort by. source SRange The source range. target TRange The target range. sorted SortOutput Whether to sort the elements copied into target . Returns: The slice of target containing the copied elements."
  },
  "phobos/std/algorithm/sorting/Functions/topNImpl.html": {
    "href": "phobos/std/algorithm/sorting/Functions/topNImpl.html",
    "title": "Overloads for - topNImpl | Marmos Demo",
    "keywords": "Overloads for - topNImpl Module std.algorithm.sorting topNImpl(r, n, useSampling) void topNImpl( R r, size_t n, bool useSampling )"
  },
  "phobos/std/algorithm/sorting/Functions/topNIndex.html": {
    "href": "phobos/std/algorithm/sorting/Functions/topNIndex.html",
    "title": "Overloads for - topNIndex | Marmos Demo",
    "keywords": "Overloads for - topNIndex Module std.algorithm.sorting topNIndex(r, index, sorted) void topNIndex( Range r, RangeIndex index, SortOutput sorted ) Given a range of elements, constructs an index of its top $(I n) elements (i.e., the first $(I n) elements if the range were sorted). Similar to $(LREF topN), except that the range is not modified. Params less <parameter not found> A binary predicate that defines the ordering of range elements. Defaults to a < b . ss <parameter not found> $(RED (Not implemented yet.)) Specify the swapping strategy. r Range A $(REF_ALTTEXT random-access range, isRandomAccessRange, std,range,primitives) of elements to make an index for. index RangeIndex A $(REF_ALTTEXT random-access range, isRandomAccessRange, std,range,primitives) with assignable elements to build the index in. The length of this range determines how many top elements to index in r . This index range can either have integral elements, in which case the constructed index will consist of zero-based numerical indices into r ; or it can have pointers to the element type of r , in which case the constructed index will be pointers to the top elements in r . sorted = Determines whether to sort the index by the elements they refer to. See_also: $(LREF topN), $(LREF topNCopy). BUGS The swapping strategy parameter is not implemented yet; currently it is ignored."
  },
  "phobos/std/algorithm/sorting/Functions/topNPartition.html": {
    "href": "phobos/std/algorithm/sorting/Functions/topNPartition.html",
    "title": "Overloads for - topNPartition | Marmos Demo",
    "keywords": "Overloads for - topNPartition Module std.algorithm.sorting topNPartition(r, n, useSampling) size_t topNPartition( R r, size_t n, bool useSampling )"
  },
  "phobos/std/algorithm/sorting/Functions/topNPartitionOffMedian.html": {
    "href": "phobos/std/algorithm/sorting/Functions/topNPartitionOffMedian.html",
    "title": "Overloads for - topNPartitionOffMedian | Marmos Demo",
    "keywords": "Overloads for - topNPartitionOffMedian Module std.algorithm.sorting topNPartitionOffMedian(r, n, useSampling) size_t topNPartitionOffMedian( R r, size_t n, bool useSampling )"
  },
  "phobos/std/algorithm/sorting/Functions/trustedMoveEmplace.html": {
    "href": "phobos/std/algorithm/sorting/Functions/trustedMoveEmplace.html",
    "title": "Overloads for - trustedMoveEmplace | Marmos Demo",
    "keywords": "Overloads for - trustedMoveEmplace Module std.algorithm.sorting trustedMoveEmplace(source, target) void trustedMoveEmplace( T source, T target ) @trusted wrapper for moveEmplace"
  },
  "phobos/std/algorithm/sorting/Merge/Functions/back.html": {
    "href": "phobos/std/algorithm/sorting/Merge/Functions/back.html",
    "title": "Overloads for - back | Marmos Demo",
    "keywords": "Overloads for - back Module std.algorithm.sorting Parent Merge back() <bug: unknown> back( ) auto"
  },
  "phobos/std/algorithm/sorting/Merge/Functions/backIndex.html": {
    "href": "phobos/std/algorithm/sorting/Merge/Functions/backIndex.html",
    "title": "Overloads for - backIndex | Marmos Demo",
    "keywords": "Overloads for - backIndex Module std.algorithm.sorting Parent Merge backIndex() size_t backIndex( )"
  },
  "phobos/std/algorithm/sorting/Merge/Functions/front.html": {
    "href": "phobos/std/algorithm/sorting/Merge/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.algorithm.sorting Parent Merge front() <bug: unknown> front( ) auto"
  },
  "phobos/std/algorithm/sorting/Merge/Functions/frontIndex.html": {
    "href": "phobos/std/algorithm/sorting/Merge/Functions/frontIndex.html",
    "title": "Overloads for - frontIndex | Marmos Demo",
    "keywords": "Overloads for - frontIndex Module std.algorithm.sorting Parent Merge frontIndex() size_t frontIndex( )"
  },
  "phobos/std/algorithm/sorting/Merge/Functions/length.html": {
    "href": "phobos/std/algorithm/sorting/Merge/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.algorithm.sorting Parent Merge length() size_t length( )"
  },
  "phobos/std/algorithm/sorting/Merge/Functions/popBack.html": {
    "href": "phobos/std/algorithm/sorting/Merge/Functions/popBack.html",
    "title": "Overloads for - popBack | Marmos Demo",
    "keywords": "Overloads for - popBack Module std.algorithm.sorting Parent Merge popBack() void popBack( )"
  },
  "phobos/std/algorithm/sorting/Merge/Functions/popFront.html": {
    "href": "phobos/std/algorithm/sorting/Merge/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.algorithm.sorting Parent Merge popFront() void popFront( )"
  },
  "phobos/std/algorithm/sorting/Merge/Functions/save.html": {
    "href": "phobos/std/algorithm/sorting/Merge/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.algorithm.sorting Parent Merge save() <bug: unknown> save( ) auto"
  },
  "phobos/std/algorithm/sorting/Overview.html": {
    "href": "phobos/std/algorithm/sorting/Overview.html",
    "title": "Module - std.algorithm.sorting | Marmos Demo",
    "keywords": "Module - std.algorithm.sorting About This is a submodule of $(MREF std, algorithm). It contains generic sorting algorithms. $(SCRIPT inhibitQuickIndex = 1;) $(BOOKTABLE Cheat Sheet, $(TR $(TH Function Name) $(TH Description)) \\((T2 completeSort, If `a = [10, 20, 30]` and `b = [40, 6, 15]` , then `completeSort(a, b)` leaves `a = [6, 10, 15]` and `b = [20, 30, 40]` . The range `a` must be sorted prior to the call, and as a result the combination `\\)(REF chain, std,range)(a, b)is sorted.) $(T2 isPartitioned,isPartitioned!\"a < 0\"([-1, -2, 1, 0, 2])returnstruebecause the predicate istruefor a portion of the range andfalseafterwards.) $(T2 isSorted,isSorted([1, 1, 2, 3])returnstrue.) $(T2 isStrictlyMonotonic,isStrictlyMonotonic([1, 1, 2, 3])returnsfalse.) $(T2 ordered,ordered(1, 1, 2, 3)returnstrue.) $(T2 strictlyOrdered,strictlyOrdered(1, 1, 2, 3)returnsfalse.) $(T2 makeIndex, Creates a separate index for a range.) $(T2 merge, Lazily merges two or more sorted ranges.) $(T2 multiSort, Sorts by multiple keys.) $(T2 nextEvenPermutation, Computes the next lexicographically greater even permutation of a range in-place.) $(T2 nextPermutation, Computes the next lexicographically greater permutation of a range in-place.) $(T2 nthPermutation, Computes the nth permutation of a range in-place.) $(T2 partialSort, Ifa = [5, 4, 3, 2, 1], thenpartialSort(a, 3)leavesa[0 .. 3] = [1, 2, 3]. The other elements ofa` are left in an unspecified order.) $(T2 partition, Partitions a range according to a unary predicate.) $(T2 partition3, Partitions a range according to a binary predicate in three parts (less than, equal, greater than the given pivot). Pivot is not given as an index, but instead as an element independent from the range's content.) $(T2 pivotPartition, Partitions a range according to a binary predicate in two parts: less than or equal, and greater than or equal to the given pivot, passed as an index in the range.) $(T2 schwartzSort, Sorts with the help of the $(LINK2 https://en.wikipedia.org/wiki/Schwartzian_transform, Schwartzian transform).) $(T2 sort, Sorts.) $(T2 topN, Separates the top elements in a range, akin to $(LINK2 https://en.wikipedia.org/wiki/Quickselect, Quickselect).) $(T2 topNCopy, Copies out the top elements of a range.) $(T2 topNIndex, Builds an index of the top elements of a range.) ) Copyright: Andrei Alexandrescu 2008-. License: $(HTTP boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP erdani.com, Andrei Alexandrescu) Source: $(PHOBOSSRC std/algorithm/sorting.d) Macros T2=$(TR $(TDNW $(LREF $1)) $(TD $+)) Aliases Name Description SortOutput Specifies whether the output of certain algorithm is desired in sorted format. Structs Name Description Merge Functions Name Description completeSort Sorts the random-access range chain(lhs, rhs) according to predicate less . expandPartition getPivot isPartitioned isSorted Checks whether a $(REF_ALTTEXT forward range, isForwardRange, std,range,primitives) is sorted according to the comparison operation less . Performs $(BIGOH r.length) evaluations of less . isStrictlyMonotonic ditto makeIndex Computes an index for r based on the comparison less . medianOf merge Merge multiple sorted ranges rs with less-than predicate function pred into one single sorted output range containing the sorted union of the elements of inputs. multiSort Sorts a range by multiple keys. multiSortImpl multiSortPredFun nextEvenPermutation Permutes range in-place to the next lexicographically greater $(I even) permutation. nextPermutation Permutes range in-place to the next lexicographically greater permutation. nthPermutation Permutes range into the perm permutation. nthPermutationImpl Returns: true in case the permutation worked, false in case perm had more digits in the factorial number system than range had elements. This case must not occur as this would lead to out of range accesses. ordered Like isSorted , returns true if the given values are ordered according to the comparison operation less . Unlike isSorted , takes values directly instead of structured in a range. p3 p4 partialSort Reorders the random-access range r such that the range r[0 .. mid] is the same as if the entire r were sorted, and leaves the range r[mid .. r.length] in no particular order. partition Partitions a range in two using the given predicate . partition3 Rearranges elements in r in three adjacent ranges and returns them. pivotPartition Partitions r around pivot using comparison function less , algorithm akin to $(LINK2 https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme, Hoare partition). quickSortImpl schwartzSort Alternative sorting method that should be used when comparing keys involves an expensive computation. shortSort sort Sorts a random-access range according to the predicate less . sort5 strictlyOrdered ditto topN Reorders the range r using $(REF_ALTTEXT swap, swap, std,algorithm,mutation) such that r[nth] refers to the element that would fall there if the range were fully sorted. topNCopy Copies the top n elements of the $(REF_ALTTEXT input range, isInputRange, std,range,primitives) source into the random-access range target , where n = target.length . topNImpl topNIndex Given a range of elements, constructs an index of its top $(I n) elements (i.e., the first $(I n) elements if the range were sorted). topNPartition topNPartitionOffMedian trustedMoveEmplace @trusted wrapper for moveEmplace"
  },
  "phobos/std/algorithm/sorting/Structs/Merge.html": {
    "href": "phobos/std/algorithm/sorting/Structs/Merge.html",
    "title": "Struct - Merge | Marmos Demo",
    "keywords": "Struct - Merge Module std.algorithm.sorting public struct Merge { // alias comp = <todo: marmos support pending>; // alias ElementType = <todo: marmos support pending>; // alias opDollar = <todo: marmos support pending>; // <bug: unknown> back( ) auto; // size_t backIndex( ) ; // <bug: unknown> front( ) auto; // size_t frontIndex( ) ; // size_t length( ) ; // void popBack( ) ; // void popFront( ) ; // <bug: unknown> save( ) auto; // __enumMember canCheckSortedness; // bool empty; // __enumMember isBidirectional; // Rs source; } Aliases Name Description comp ElementType opDollar Functions Name Description back backIndex front frontIndex length popBack popFront save Variables Name Description canCheckSortedness empty isBidirectional source"
  },
  "phobos/std/array/Appender/Functions/capacity.html": {
    "href": "phobos/std/array/Appender/Functions/capacity.html",
    "title": "Overloads for - capacity | Marmos Demo",
    "keywords": "Overloads for - capacity Module std.array Parent Appender capacity() size_t capacity( ) Returns: the capacity of the array (the maximum number of elements the managed array can accommodate before triggering a reallocation). If any appending will reallocate, 0 will be returned."
  },
  "phobos/std/array/Appender/Functions/clear.html": {
    "href": "phobos/std/array/Appender/Functions/clear.html",
    "title": "Overloads for - clear | Marmos Demo",
    "keywords": "Overloads for - clear Module std.array Parent Appender clear() void clear( ) Clears the managed array. This allows the elements of the array to be reused for appending. Note: clear is disabled for immutable or const element types, due to the possibility that Appender might overwrite immutable data."
  },
  "phobos/std/array/Appender/Functions/data.html": {
    "href": "phobos/std/array/Appender/Functions/data.html",
    "title": "Overloads for - data | Marmos Demo",
    "keywords": "Overloads for - data Module std.array Parent Appender data() <bug: unknown> data( ) Use opSlice() from now on. Returns: The managed array."
  },
  "phobos/std/array/Appender/Functions/ensureAddable.html": {
    "href": "phobos/std/array/Appender/Functions/ensureAddable.html",
    "title": "Overloads for - ensureAddable | Marmos Demo",
    "keywords": "Overloads for - ensureAddable Module std.array Parent Appender ensureAddable(nelems) void ensureAddable( size_t nelems )"
  },
  "phobos/std/array/Appender/Functions/opSlice.html": {
    "href": "phobos/std/array/Appender/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.array Parent Appender opSlice() <bug: unknown> opSlice( ) Returns: The managed array."
  },
  "phobos/std/array/Appender/Functions/reserve.html": {
    "href": "phobos/std/array/Appender/Functions/reserve.html",
    "title": "Overloads for - reserve | Marmos Demo",
    "keywords": "Overloads for - reserve Module std.array Parent Appender reserve(newCapacity) void reserve( size_t newCapacity ) Reserve at least newCapacity elements for appending. Note that more elements may be reserved than requested. If newCapacity <= capacity , then nothing is done. Params newCapacity size_t the capacity the Appender should have"
  },
  "phobos/std/array/Appender/Functions/shrinkTo.html": {
    "href": "phobos/std/array/Appender/Functions/shrinkTo.html",
    "title": "Overloads for - shrinkTo | Marmos Demo",
    "keywords": "Overloads for - shrinkTo Module std.array Parent Appender shrinkTo(newlength) void shrinkTo( size_t newlength ) Shrinks the managed array to the given length. Throws: Exception if newlength is greater than the current array length. Note: shrinkTo is disabled for immutable or const element types."
  },
  "phobos/std/array/Functions/appender.html": {
    "href": "phobos/std/array/Functions/appender.html",
    "title": "Overloads for - appender | Marmos Demo",
    "keywords": "Overloads for - appender Module std.array appender() Appender!(A) appender( ) Convenience function that returns an $(LREF Appender) instance, optionally initialized with array . appender(array) Appender!(E[]) appender( A array ) ditto appender(arrayPtr) RefAppender!(E[]) appender( P arrayPtr ) Convenience function that returns a $(LREF RefAppender) instance initialized with arrayPtr . Don't use null for the array pointer, use the other version of appender instead."
  },
  "phobos/std/array/Functions/appenderNewCapacity.html": {
    "href": "phobos/std/array/Functions/appenderNewCapacity.html",
    "title": "Overloads for - appenderNewCapacity | Marmos Demo",
    "keywords": "Overloads for - appenderNewCapacity Module std.array appenderNewCapacity(curLen, reqLen) size_t appenderNewCapacity( size_t curLen, size_t reqLen )"
  },
  "phobos/std/array/Functions/array.html": {
    "href": "phobos/std/array/Functions/array.html",
    "title": "Overloads for - array | Marmos Demo",
    "keywords": "Overloads for - array Module std.array array(r) <bug: unknown> array( Range r ) Allocates an array and initializes it with copies of the elements of range r . Narrow strings are handled as follows !!Unsupported comment block type: marmos.generic.model.DocCommentUnorderedListBlock!! Params r Range range (or aggregate with opApply function) whose elements are copied into the allocated array Returns allocated and initialized array array(r) <bug: unknown> array( Range r ) ditto array(str) <bug: unknown> array( String str ) Convert a narrow autodecoding string to an array type that fully supports random access. This is handled as a special case and always returns an array of dchar NOTE: This function is never used when autodecoding is turned off. Params str String isNarrowString to be converted to an array of dchar Returns a dchar[] , const(dchar)[] , or immutable(dchar)[] depending on the constness of the input."
  },
  "phobos/std/array/Functions/arrayAllocImpl.html": {
    "href": "phobos/std/array/Functions/arrayAllocImpl.html",
    "title": "Overloads for - arrayAllocImpl | Marmos Demo",
    "keywords": "Overloads for - arrayAllocImpl Module std.array arrayAllocImpl(sizes) <bug: unknown> arrayAllocImpl( I sizes ) auto"
  },
  "phobos/std/array/Functions/assocArray.html": {
    "href": "phobos/std/array/Functions/assocArray.html",
    "title": "Overloads for - assocArray | Marmos Demo",
    "keywords": "Overloads for - assocArray Module std.array assocArray(r) <bug: unknown> assocArray( Range r ) auto Returns a newly allocated associative array from a range of key/value tuples or from a range of keys and a range of values. Params r Range An $(REF_ALTTEXT input range, isInputRange, std,range,primitives) of tuples of keys and values. keys = An $(REF_ALTTEXT input range, isInputRange, std,range,primitives) of keys values = An $(REF_ALTTEXT input range, isInputRange, std,range,primitives) of values Returns A newly allocated associative array out of elements of the input range, which must be a range of tuples (Key, Value) or a range of keys and a range of values. If given two ranges of unequal lengths after the elements of the shorter are exhausted the remaining elements of the longer will not be considered. Returns a null associative array reference when given an empty range. Duplicates: Associative arrays have unique keys. If r contains duplicate keys, then the result will contain the value of the last pair for that key in r. See_Also: $(REF Tuple, std,typecons), $(REF zip, std,range) assocArray(keys, values) <bug: unknown> assocArray( Keys keys, Values values ) auto ditto"
  },
  "phobos/std/array/Functions/byPair.html": {
    "href": "phobos/std/array/Functions/byPair.html",
    "title": "Overloads for - byPair | Marmos Demo",
    "keywords": "Overloads for - byPair Module std.array byPair(aa) <bug: unknown> byPair( AA aa ) auto Construct a range iterating over an associative array by key/value tuples. Params aa AA The associative array to iterate over. Returns: A $(REF_ALTTEXT forward range, isForwardRange, std,range,primitives) of Tuple's of key and value pairs from the given associative array. The members of each pair can be accessed by name (.key and .value ). or by integer index (0 and 1 respectively)."
  },
  "phobos/std/array/Functions/checkStaticArray.html": {
    "href": "phobos/std/array/Functions/checkStaticArray.html",
    "title": "Overloads for - checkStaticArray | Marmos Demo",
    "keywords": "Overloads for - checkStaticArray Module std.array checkStaticArray(a, b) void checkStaticArray( T1 a, T2 b )"
  },
  "phobos/std/array/Functions/copyBackwards.html": {
    "href": "phobos/std/array/Functions/copyBackwards.html",
    "title": "Overloads for - copyBackwards | Marmos Demo",
    "keywords": "Overloads for - copyBackwards Module std.array copyBackwards(src, dest) void copyBackwards( <bug: unknown> src, <bug: unknown> dest )"
  },
  "phobos/std/array/Functions/insertInPlace.html": {
    "href": "phobos/std/array/Functions/insertInPlace.html",
    "title": "Overloads for - insertInPlace | Marmos Demo",
    "keywords": "Overloads for - insertInPlace Module std.array insertInPlace(array, pos, stuff) void insertInPlace( <bug: unknown> array, size_t pos, U stuff ) Inserts stuff (which must be an input range or any number of implicitly convertible items) in array at position pos . Params array <bug: unknown> The array that stuff will be inserted into. pos size_t The position in array to insert the stuff . stuff U An $(REF_ALTTEXT input range, isInputRange, std,range,primitives), pos = The position in array to insert the stuff . stuff = An $(REF_ALTTEXT input range, isInputRange, std,range,primitives), or any number of implicitly convertible items to insert into array . insertInPlace(array, pos, stuff) void insertInPlace( <bug: unknown> array, size_t pos, U stuff ) Ditto"
  },
  "phobos/std/array/Functions/join.html": {
    "href": "phobos/std/array/Functions/join.html",
    "title": "Overloads for - join | Marmos Demo",
    "keywords": "Overloads for - join Module std.array join(ror, sep) <bug: unknown> join( RoR ror, R sep ) Eagerly concatenates all of the ranges in ror together (with the GC) into one array using sep as the separator if present. Params ror RoR An $(REF_ALTTEXT input range, isInputRange, std,range,primitives) of input ranges sep = An input range, or a single element, to join the ranges on Returns An array of elements See_Also For a lazy version, see $(REF joiner, std,algorithm,iteration) join(ror, sep) <bug: unknown> join( RoR ror, E sep ) Ditto join(ror) <bug: unknown> join( RoR ror ) Ditto"
  },
  "phobos/std/array/Functions/minimallyInitializedArray.html": {
    "href": "phobos/std/array/Functions/minimallyInitializedArray.html",
    "title": "Overloads for - minimallyInitializedArray | Marmos Demo",
    "keywords": "Overloads for - minimallyInitializedArray Module std.array minimallyInitializedArray(sizes) <bug: unknown> minimallyInitializedArray( I sizes ) auto Returns a new array of type T allocated on the garbage collected heap. Partial initialization is done for types with indirections, for preservation of memory safety. Note that elements will only be initialized to 0, but not necessarily the element type's .init . minimallyInitializedArray is nothrow and weakly pure . Params T <parameter not found> The type of the array elements sizes I The length dimension(s) of the resulting array sizes = The length dimension(s) of the resulting array Returns: An array of T with I.length dimensions."
  },
  "phobos/std/array/Functions/overlap.html": {
    "href": "phobos/std/array/Functions/overlap.html",
    "title": "Overloads for - overlap | Marmos Demo",
    "keywords": "Overloads for - overlap Module std.array overlap(a, b) CommonType!(T[]U[]) overlap( <bug: unknown> a, <bug: unknown> b ) Returns the overlapping portion, if any, of two arrays. Unlike equal , overlap only compares the pointers and lengths in the ranges, not the values referred by them. If r1 and r2 have an overlapping slice, returns that slice. Otherwise, returns the null slice. Params a <bug: unknown> The first array to compare b <bug: unknown> The second array to compare b = The second array to compare Returns: The overlapping portion of the two arrays."
  },
  "phobos/std/array/Functions/replace.html": {
    "href": "phobos/std/array/Functions/replace.html",
    "title": "Overloads for - replace | Marmos Demo",
    "keywords": "Overloads for - replace Module std.array replace(subject, from, to) <bug: unknown> replace( <bug: unknown> subject, R1 from, R2 to ) Replace occurrences of from with to in subject in a new array. Params subject <bug: unknown> the array to scan from R1 the item to replace to R2 the item to replace all instances of from with Returns A new array without changing the contents of subject , or the original array if no match is found. See_Also $(REF substitute, std,algorithm,iteration) for a lazy replace. replace(subject, from, to, changed) <bug: unknown> replace( <bug: unknown> subject, R1 from, R2 to, size_t changed ) Replace occurrences of from with to in subject in a new array. changed counts how many replacements took place. Params subject <bug: unknown> the array to scan from R1 the item to replace to R2 the item to replace all instances of from with changed size_t the number of replacements Returns A new array without changing the contents of subject , or the original array if no match is found. replace(subject, from, to, stuff) <bug: unknown> replace( <bug: unknown> subject, size_t from, size_t to, Range stuff ) Replaces elements from array with indices ranging from from (inclusive) to to (exclusive) with the range stuff . Params subject <bug: unknown> the array to scan from size_t the starting index to size_t the ending index stuff Range the items to replace in-between from and to Returns A new array without changing the contents of subject . See_Also $(REF substitute, std,algorithm,iteration) for a lazy replace."
  },
  "phobos/std/array/Functions/replaceFirst.html": {
    "href": "phobos/std/array/Functions/replaceFirst.html",
    "title": "Overloads for - replaceFirst | Marmos Demo",
    "keywords": "Overloads for - replaceFirst Module std.array replaceFirst(subject, from, to) <bug: unknown> replaceFirst( <bug: unknown> subject, R1 from, R2 to ) Replaces the first occurrence of from with to in subject . Params subject <bug: unknown> the array to scan from R1 the item to replace to R2 the item to replace from with Returns A new array without changing the contents of subject , or the original array if no match is found."
  },
  "phobos/std/array/Functions/replaceInPlace.html": {
    "href": "phobos/std/array/Functions/replaceInPlace.html",
    "title": "Overloads for - replaceInPlace | Marmos Demo",
    "keywords": "Overloads for - replaceInPlace Module std.array replaceInPlace(array, from, to, stuff) void replaceInPlace( <bug: unknown> array, size_t from, size_t to, Range stuff ) Replaces elements from array with indices ranging from from (inclusive) to to (exclusive) with the range stuff . Expands or shrinks the array as needed. Params array <bug: unknown> the array to scan from size_t the starting index to size_t the ending index stuff Range the items to replace in-between from and to"
  },
  "phobos/std/array/Functions/replaceInto.html": {
    "href": "phobos/std/array/Functions/replaceInto.html",
    "title": "Overloads for - replaceInto | Marmos Demo",
    "keywords": "Overloads for - replaceInto Module std.array replaceInto(sink, subject, from, to) void replaceInto( Sink sink, <bug: unknown> subject, R1 from, R2 to ) Replace occurrences of from with to in subject and output the result into sink . Params sink Sink an $(REF_ALTTEXT output range, isOutputRange, std,range,primitives) subject <bug: unknown> the array to scan from R1 the item to replace to R2 the item to replace all instances of from with See_Also $(REF substitute, std,algorithm,iteration) for a lazy replace. replaceInto(sink, subject, from, to, changed) void replaceInto( Sink sink, <bug: unknown> subject, R1 from, R2 to, size_t changed ) Replace occurrences of from with to in subject and output the result into sink . changed counts how many replacements took place. Params sink Sink an $(REF_ALTTEXT output range, isOutputRange, std,range,primitives) subject <bug: unknown> the array to scan from R1 the item to replace to R2 the item to replace all instances of from with changed size_t the number of replacements"
  },
  "phobos/std/array/Functions/replaceLast.html": {
    "href": "phobos/std/array/Functions/replaceLast.html",
    "title": "Overloads for - replaceLast | Marmos Demo",
    "keywords": "Overloads for - replaceLast Module std.array replaceLast(subject, from, to) <bug: unknown> replaceLast( <bug: unknown> subject, R1 from, R2 to ) Replaces the last occurrence of from with to in subject . Params subject <bug: unknown> the array to scan from R1 the item to replace to R2 the item to replace from with Returns A new array without changing the contents of subject , or the original array if no match is found."
  },
  "phobos/std/array/Functions/replaceSlice.html": {
    "href": "phobos/std/array/Functions/replaceSlice.html",
    "title": "Overloads for - replaceSlice | Marmos Demo",
    "keywords": "Overloads for - replaceSlice Module std.array replaceSlice(s, slice, replacement) <bug: unknown> replaceSlice( <bug: unknown> s, <bug: unknown> slice, <bug: unknown> replacement ) Creates a new array such that the items in slice are replaced with the items in replacement . slice and replacement do not need to be the same length. The result will grow or shrink based on the items given. Params s <bug: unknown> the base of the new array slice <bug: unknown> the slice of s to be replaced replacement <bug: unknown> the items to replace slice with Returns A new array that is s with slice replaced by replacement[] . See_Also $(REF substitute, std,algorithm,iteration) for a lazy replace."
  },
  "phobos/std/array/Functions/replicate.html": {
    "href": "phobos/std/array/Functions/replicate.html",
    "title": "Overloads for - replicate | Marmos Demo",
    "keywords": "Overloads for - replicate Module std.array replicate(s, n) <bug: unknown> replicate( S s, size_t n ) Params s S an $(REF_ALTTEXT input range, isInputRange, std,range,primitives) or a dynamic array n = number of times to repeat s Returns An array that consists of s repeated n times. This function allocates, fills, and returns a new array. See_Also For a lazy version, refer to $(REF repeat, std,range). replicate(s, n) <bug: unknown> replicate( S s, size_t n ) ditto"
  },
  "phobos/std/array/Functions/sameHead.html": {
    "href": "phobos/std/array/Functions/sameHead.html",
    "title": "Overloads for - sameHead | Marmos Demo",
    "keywords": "Overloads for - sameHead Module std.array sameHead(lhs, rhs) bool sameHead( <bug: unknown> lhs, <bug: unknown> rhs ) Returns whether the front s of lhs and rhs both refer to the same place in memory, making one of the arrays a slice of the other which starts at index 0 . Params lhs <bug: unknown> the first array to compare rhs <bug: unknown> the second array to compare rhs = the second array to compare Returns: true if $(D lhs.ptr == rhs.ptr), false otherwise."
  },
  "phobos/std/array/Functions/sameTail.html": {
    "href": "phobos/std/array/Functions/sameTail.html",
    "title": "Overloads for - sameTail | Marmos Demo",
    "keywords": "Overloads for - sameTail Module std.array sameTail(lhs, rhs) bool sameTail( <bug: unknown> lhs, <bug: unknown> rhs ) Returns whether the back s of lhs and rhs both refer to the same place in memory, making one of the arrays a slice of the other which end at index $ . Params lhs <bug: unknown> the first array to compare rhs <bug: unknown> the second array to compare rhs = the second array to compare Returns: true if both arrays are the same length and $(D lhs.ptr == rhs.ptr), false otherwise."
  },
  "phobos/std/array/Functions/split.html": {
    "href": "phobos/std/array/Functions/split.html",
    "title": "Overloads for - split | Marmos Demo",
    "keywords": "Overloads for - split Module std.array split(s) <bug: unknown> split( S s ) Eagerly splits range into an array, using sep as the delimiter. When no delimiter is provided, strings are split into an array of words, using whitespace as delimiter. Runs of whitespace are merged together (no empty words are produced). The range must be a $(REF_ALTTEXT forward range, isForwardRange, std,range,primitives). The separator can be a value of the same type as the elements in range or it can be another forward range . Params s S the string to split by word if no separator is given range <parameter not found> the range to split sep <parameter not found> a value of the same type as the elements of range or another isTerminator <parameter not found> a predicate that splits the range when it returns true . Returns An array containing the divided parts of range (or the words of s ). See_Also $(REF splitter, std,algorithm,iteration) for a lazy version without allocating memory. $(REF splitter, std,regex) for a version that splits using a regular expression defined separator. split(range, sep) <bug: unknown> split( Range range, Separator sep ) auto ditto split(range) <bug: unknown> split( Range range ) auto ditto"
  },
  "phobos/std/array/Functions/staticArray.html": {
    "href": "phobos/std/array/Functions/staticArray.html",
    "title": "Overloads for - staticArray | Marmos Demo",
    "keywords": "Overloads for - staticArray Module std.array staticArray(a) <bug: unknown> staticArray( <bug: unknown> a ) Constructs a static array from a dynamic array whose length is known at compile-time. The element type can be inferred or specified explicitly: !!Unsupported comment block type: marmos.generic.model.DocCommentUnorderedListBlock!! Note: staticArray returns by value, so expressions involving large arrays may be inefficient. Params a <bug: unknown> The input array. Returns: A static array constructed from a . staticArray(a) <bug: unknown> staticArray( <bug: unknown> a ) ditto staticArray(a) <bug: unknown> staticArray( T a ) auto Constructs a static array from a range. When a.length is not known at compile time, the number of elements must be given as a template argument (e.g. myrange.staticArray!2 ). Size and type can be combined, if the source range elements are implicitly convertible to the requested element type (eg: 2.iota.staticArray!(long[2]) ). When the range a is known at compile time, it can be given as a template argument to avoid having to specify the number of elements (e.g.: staticArray!(2.iota) or staticArray!(double, 2.iota) ). Params a T The input range. If there are less elements than the specified length of the static array, the rest of it is default-initialized. If there are more than specified, the first elements up to the specified length are used. rangeLength = Output for the number of elements used from a . Optional. staticArray(a, rangeLength) <bug: unknown> staticArray( T a, size_t rangeLength ) auto ditto staticArray(a) <bug: unknown> staticArray( T a ) auto ditto staticArray(a, rangeLength) <bug: unknown> staticArray( T a, size_t rangeLength ) auto ditto staticArray() <bug: unknown> staticArray( ) auto ditto staticArray() <bug: unknown> staticArray( ) auto ditto"
  },
  "phobos/std/array/Functions/uninitializedArray.html": {
    "href": "phobos/std/array/Functions/uninitializedArray.html",
    "title": "Overloads for - uninitializedArray | Marmos Demo",
    "keywords": "Overloads for - uninitializedArray Module std.array uninitializedArray(sizes) <bug: unknown> uninitializedArray( I sizes ) auto Returns a new array of type T allocated on the garbage collected heap without initializing its elements. This can be a useful optimization if every element will be immediately initialized. T may be a multidimensional array. In this case sizes may be specified for any number of dimensions from 0 to the number in T . uninitializedArray is nothrow and weakly pure . uninitializedArray is @system if the uninitialized element type has pointers. Params T <parameter not found> The type of the resulting array elements sizes I The length dimension(s) of the resulting array sizes = The length dimension(s) of the resulting array Returns: An array of T with I.length dimensions. uninitializedArray(sizes) <bug: unknown> uninitializedArray( I sizes ) auto ditto"
  },
  "phobos/std/array/Overview.html": {
    "href": "phobos/std/array/Overview.html",
    "title": "Module - std.array | Marmos Demo",
    "keywords": "Module - std.array About Functions and types that manipulate built-in arrays and associative arrays. This module provides all kinds of functions to create, manipulate or convert arrays $(SCRIPT inhibitQuickIndex = 1;) $(DIVC quickindex, $(BOOKTABLE , $(TR $(TH Function Name) $(TH Description) ) $(TR $(TD $(LREF array)) $(TD Returns a copy of the input in a newly allocated dynamic array. )) $(TR $(TD $(LREF appender)) $(TD Returns a new $(LREF Appender) or $(LREF RefAppender) initialized with a given array. )) $(TR $(TD $(LREF assocArray)) $(TD Returns a newly allocated associative array from a range of key/value tuples. )) $(TR $(TD $(LREF byPair)) $(TD Construct a range iterating over an associative array by key/value tuples. )) $(TR $(TD $(LREF insertInPlace)) $(TD Inserts into an existing array at a given position. )) $(TR $(TD $(LREF join)) $(TD Concatenates a range of ranges into one array. )) $(TR $(TD $(LREF minimallyInitializedArray)) $(TD Returns a new array of type T . )) $(TR $(TD $(LREF replace)) $(TD Returns a new array with all occurrences of a certain subrange replaced. )) $(TR $(TD $(LREF replaceFirst)) $(TD Returns a new array with the first occurrence of a certain subrange replaced. )) $(TR $(TD $(LREF replaceInPlace)) $(TD Replaces all occurrences of a certain subrange and puts the result into a given array. )) $(TR $(TD $(LREF replaceInto)) $(TD Replaces all occurrences of a certain subrange and puts the result into an output range. )) $(TR $(TD $(LREF replaceLast)) $(TD Returns a new array with the last occurrence of a certain subrange replaced. )) $(TR $(TD $(LREF replaceSlice)) $(TD Returns a new array with a given slice replaced. )) $(TR $(TD $(LREF replicate)) $(TD Creates a new array out of several copies of an input array or range. )) $(TR $(TD $(LREF sameHead)) $(TD Checks if the initial segments of two arrays refer to the same place in memory. )) $(TR $(TD $(LREF sameTail)) $(TD Checks if the final segments of two arrays refer to the same place in memory. )) $(TR $(TD $(LREF split)) $(TD Eagerly split a range or string into an array. )) $(TR $(TD $(LREF staticArray)) $(TD Creates a new static array from given data. )) $(TR $(TD $(LREF uninitializedArray)) $(TD Returns a new array of type T without initializing its elements. )) )) Copyright: Copyright Andrei Alexandrescu 2008- and Jonathan M Davis 2011-. License: $(HTTP boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP erdani.org, Andrei Alexandrescu) and $(HTTP jmdavisprog.com, Jonathan M Davis) Source: $(PHOBOSSRC std/array.d) Structs Name Description Appender Implements an output range that appends data to an array. This is recommended over $(D array ~= data) when appending many elements because it is more efficient. Appender maintains its own array metadata locally, so it can avoid the $(DDSUBLINK spec/arrays, capacity-reserve, performance hit of looking up slice capacity ) for each append. RefAppender A version of $(LREF Appender) that can update an array in-place. It forwards all calls to an underlying appender implementation. Any calls made to the appender also update the pointer to the original array passed in. Functions Name Description appender Convenience function that returns an $(LREF Appender) instance, optionally initialized with array . appenderNewCapacity array Allocates an array and initializes it with copies of the elements of range r . arrayAllocImpl assocArray Returns a newly allocated associative array from a range of key/value tuples or from a range of keys and a range of values. byPair Construct a range iterating over an associative array by key/value tuples. checkStaticArray copyBackwards insertInPlace Inserts stuff (which must be an input range or any number of implicitly convertible items) in array at position pos . join Eagerly concatenates all of the ranges in ror together (with the GC) into one array using sep as the separator if present. minimallyInitializedArray Returns a new array of type T allocated on the garbage collected heap. overlap Returns the overlapping portion, if any, of two arrays. Unlike equal , overlap only compares the pointers and lengths in the ranges, not the values referred by them. If r1 and r2 have an overlapping slice, returns that slice. Otherwise, returns the null slice. replace Replace occurrences of from with to in subject in a new array. replaceFirst Replaces the first occurrence of from with to in subject . replaceInPlace Replaces elements from array with indices ranging from from (inclusive) to to (exclusive) with the range stuff . Expands or shrinks the array as needed. replaceInto Replace occurrences of from with to in subject and output the result into sink . replaceLast Replaces the last occurrence of from with to in subject . replaceSlice Creates a new array such that the items in slice are replaced with the items in replacement . slice and replacement do not need to be the same length. The result will grow or shrink based on the items given. replicate sameHead Returns whether the front s of lhs and rhs both refer to the same place in memory, making one of the arrays a slice of the other which starts at index 0 . sameTail Returns whether the back s of lhs and rhs both refer to the same place in memory, making one of the arrays a slice of the other which end at index $ . split Eagerly splits range into an array, using sep as the delimiter. staticArray Constructs a static array from a dynamic array whose length is known at compile-time. The element type can be inferred or specified explicitly: uninitializedArray Returns a new array of type T allocated on the garbage collected heap without initializing its elements. This can be a useful optimization if every element will be immediately initialized. T may be a multidimensional array. In this case sizes may be specified for any number of dimensions from 0 to the number in T . Variables Name Description hasCheapIteration isCharOrStringOrDcharRange isInputRangeOrConvertible isInputRangeWithLengthOrConvertible"
  },
  "phobos/std/array/RefAppender/Functions/capacity.html": {
    "href": "phobos/std/array/RefAppender/Functions/capacity.html",
    "title": "Overloads for - capacity | Marmos Demo",
    "keywords": "Overloads for - capacity Module std.array Parent RefAppender capacity() size_t capacity( ) Returns the capacity of the array (the maximum number of elements the managed array can accommodate before triggering a reallocation). If any appending will reallocate, capacity returns 0 ."
  },
  "phobos/std/array/RefAppender/Functions/data.html": {
    "href": "phobos/std/array/RefAppender/Functions/data.html",
    "title": "Overloads for - data | Marmos Demo",
    "keywords": "Overloads for - data Module std.array Parent RefAppender data() <bug: unknown> data( )"
  },
  "phobos/std/array/RefAppender/Functions/opSlice.html": {
    "href": "phobos/std/array/RefAppender/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.array Parent RefAppender opSlice() <bug: unknown> opSlice( ) Returns: the managed array."
  },
  "phobos/std/array/Structs/Appender.html": {
    "href": "phobos/std/array/Structs/Appender.html",
    "title": "Struct - Appender | Marmos Demo",
    "keywords": "Struct - Appender Module std.array public struct Appender { // alias T = <todo: marmos support pending>; // Returns: the capacity of the array (the maximum number of elements the managed array can accommodate before triggering a reallocation). If any appending will reallocate, `0` will be returned. size_t capacity( ) ; // Clears the managed array. This allows the elements of the array to be reused for appending. void clear( ) ; // Use opSlice() from now on. Returns: The managed array. <bug: unknown> data( ) ; // void ensureAddable( size_t nelems ) ; // Returns: The managed array. <bug: unknown> opSlice( ) ; // Reserve at least newCapacity elements for appending. Note that more elements may be reserved than requested. If `newCapacity <= capacity` , then nothing is done. void reserve( size_t newCapacity ) ; // Shrinks the managed array to the given length. void shrinkTo( size_t newlength ) ; } About Implements an output range that appends data to an array. This is recommended over $(D array ~= data) when appending many elements because it is more efficient. Appender maintains its own array metadata locally, so it can avoid the $(DDSUBLINK spec/arrays, capacity-reserve, performance hit of looking up slice capacity ) for each append. Params A the array type to simulate. See_Also: $(LREF appender) Aliases Name Description T Functions Name Description capacity Returns: the capacity of the array (the maximum number of elements the managed array can accommodate before triggering a reallocation). If any appending will reallocate, 0 will be returned. clear Clears the managed array. This allows the elements of the array to be reused for appending. data Use opSlice() from now on. Returns: The managed array. ensureAddable opSlice Returns: The managed array. reserve Reserve at least newCapacity elements for appending. Note that more elements may be reserved than requested. If newCapacity <= capacity , then nothing is done. shrinkTo Shrinks the managed array to the given length."
  },
  "phobos/std/array/Structs/RefAppender.html": {
    "href": "phobos/std/array/Structs/RefAppender.html",
    "title": "Struct - RefAppender | Marmos Demo",
    "keywords": "Struct - RefAppender Module std.array public struct RefAppender { // alias T = <todo: marmos support pending>; // Returns the capacity of the array (the maximum number of elements the managed array can accommodate before triggering a reallocation). If any appending will reallocate, `capacity` returns `0` . size_t capacity( ) ; // <bug: unknown> data( ) ; // Returns: the managed array. <bug: unknown> opSlice( ) ; // <bug: unknown> arr; // Appender!(A) impl; } About A version of $(LREF Appender) that can update an array in-place. It forwards all calls to an underlying appender implementation. Any calls made to the appender also update the pointer to the original array passed in. Tip: Use the arrayPtr overload of $(LREF appender) for construction with type-inference. Params A The array type to simulate Aliases Name Description T Functions Name Description capacity Returns the capacity of the array (the maximum number of elements the managed array can accommodate before triggering a reallocation). If any appending will reallocate, capacity returns 0 . data opSlice Returns: the managed array. Variables Name Description arr impl"
  },
  "phobos/std/ascii/Functions/isASCII.html": {
    "href": "phobos/std/ascii/Functions/isASCII.html",
    "title": "Overloads for - isASCII | Marmos Demo",
    "keywords": "Overloads for - isASCII Module std.ascii isASCII(c) bool isASCII( dchar c ) Params: c = The character to test. Returns: Whether or not c is in the ASCII character set - i.e. in the range 0 .. 0x7F."
  },
  "phobos/std/ascii/Functions/isAlpha.html": {
    "href": "phobos/std/ascii/Functions/isAlpha.html",
    "title": "Overloads for - isAlpha | Marmos Demo",
    "keywords": "Overloads for - isAlpha Module std.ascii isAlpha(c) bool isAlpha( dchar c ) Params: c = The character to test. Returns: Whether c is an ASCII letter (A .. Z, a .. z)."
  },
  "phobos/std/ascii/Functions/isAlphaNum.html": {
    "href": "phobos/std/ascii/Functions/isAlphaNum.html",
    "title": "Overloads for - isAlphaNum | Marmos Demo",
    "keywords": "Overloads for - isAlphaNum Module std.ascii isAlphaNum(c) bool isAlphaNum( dchar c ) Params: c = The character to test. Returns: Whether c is a letter or a number (0 .. 9, a .. z, A .. Z)."
  },
  "phobos/std/ascii/Functions/isControl.html": {
    "href": "phobos/std/ascii/Functions/isControl.html",
    "title": "Overloads for - isControl | Marmos Demo",
    "keywords": "Overloads for - isControl Module std.ascii isControl(c) bool isControl( dchar c ) Params: c = The character to test. Returns: Whether c is a control character."
  },
  "phobos/std/ascii/Functions/isDigit.html": {
    "href": "phobos/std/ascii/Functions/isDigit.html",
    "title": "Overloads for - isDigit | Marmos Demo",
    "keywords": "Overloads for - isDigit Module std.ascii isDigit(c) bool isDigit( dchar c ) Params: c = The character to test. Returns: Whether c is a digit (0 .. 9)."
  },
  "phobos/std/ascii/Functions/isGraphical.html": {
    "href": "phobos/std/ascii/Functions/isGraphical.html",
    "title": "Overloads for - isGraphical | Marmos Demo",
    "keywords": "Overloads for - isGraphical Module std.ascii isGraphical(c) bool isGraphical( dchar c ) Params: c = The character to test. Returns: Whether or not c is a printable character other than the space character."
  },
  "phobos/std/ascii/Functions/isHexDigit.html": {
    "href": "phobos/std/ascii/Functions/isHexDigit.html",
    "title": "Overloads for - isHexDigit | Marmos Demo",
    "keywords": "Overloads for - isHexDigit Module std.ascii isHexDigit(c) bool isHexDigit( dchar c ) Params: c = The character to test. Returns: Whether c is a digit in base 16 (0 .. 9, A .. F, a .. f)."
  },
  "phobos/std/ascii/Functions/isLower.html": {
    "href": "phobos/std/ascii/Functions/isLower.html",
    "title": "Overloads for - isLower | Marmos Demo",
    "keywords": "Overloads for - isLower Module std.ascii isLower(c) bool isLower( dchar c ) Params: c = The character to test. Returns: Whether c is a lowercase ASCII letter (a .. z)."
  },
  "phobos/std/ascii/Functions/isOctalDigit.html": {
    "href": "phobos/std/ascii/Functions/isOctalDigit.html",
    "title": "Overloads for - isOctalDigit | Marmos Demo",
    "keywords": "Overloads for - isOctalDigit Module std.ascii isOctalDigit(c) bool isOctalDigit( dchar c ) Params: c = The character to test. Returns: Whether c is a digit in base 8 (0 .. 7)."
  },
  "phobos/std/ascii/Functions/isPrintable.html": {
    "href": "phobos/std/ascii/Functions/isPrintable.html",
    "title": "Overloads for - isPrintable | Marmos Demo",
    "keywords": "Overloads for - isPrintable Module std.ascii isPrintable(c) bool isPrintable( dchar c ) Params: c = The character to test. Returns: Whether or not c is a printable character - including the space character."
  },
  "phobos/std/ascii/Functions/isPunctuation.html": {
    "href": "phobos/std/ascii/Functions/isPunctuation.html",
    "title": "Overloads for - isPunctuation | Marmos Demo",
    "keywords": "Overloads for - isPunctuation Module std.ascii isPunctuation(c) bool isPunctuation( dchar c ) Params: c = The character to test. Returns: Whether or not c is a punctuation character. That includes all ASCII characters which are not control characters, letters, digits, or whitespace."
  },
  "phobos/std/ascii/Functions/isUpper.html": {
    "href": "phobos/std/ascii/Functions/isUpper.html",
    "title": "Overloads for - isUpper | Marmos Demo",
    "keywords": "Overloads for - isUpper Module std.ascii isUpper(c) bool isUpper( dchar c ) Params: c = The character to test. Returns: Whether c is an uppercase ASCII letter (A .. Z)."
  },
  "phobos/std/ascii/Functions/isWhite.html": {
    "href": "phobos/std/ascii/Functions/isWhite.html",
    "title": "Overloads for - isWhite | Marmos Demo",
    "keywords": "Overloads for - isWhite Module std.ascii isWhite(c) bool isWhite( dchar c ) Params: c = The character to test. Returns: Whether or not c is a whitespace character. That includes the space, tab, vertical tab, form feed, carriage return, and linefeed characters."
  },
  "phobos/std/ascii/Functions/toLower.html": {
    "href": "phobos/std/ascii/Functions/toLower.html",
    "title": "Overloads for - toLower | Marmos Demo",
    "keywords": "Overloads for - toLower Module std.ascii toLower(c) <bug: unknown> toLower( C c ) auto Converts an ASCII letter to lowercase. Params: c = A character of any type that implicitly converts to dchar . In the case where it's a built-in type, or an enum of a built-in type, Unqual!(OriginalType!C) is returned, whereas if it's a user-defined type, dchar is returned. Returns: The corresponding lowercase letter, if c is an uppercase ASCII character, otherwise c itself."
  },
  "phobos/std/ascii/Functions/toUpper.html": {
    "href": "phobos/std/ascii/Functions/toUpper.html",
    "title": "Overloads for - toUpper | Marmos Demo",
    "keywords": "Overloads for - toUpper Module std.ascii toUpper(c) <bug: unknown> toUpper( C c ) auto Converts an ASCII letter to uppercase. Params: c = Any type which implicitly converts to dchar . In the case where it's a built-in type, or an enum of a built-in type, Unqual!(OriginalType!C) is returned, whereas if it's a user-defined type, dchar is returned. Returns: The corresponding uppercase letter, if c is a lowercase ASCII character, otherwise c itself."
  },
  "phobos/std/ascii/Overview.html": {
    "href": "phobos/std/ascii/Overview.html",
    "title": "Module - std.ascii | Marmos Demo",
    "keywords": "Module - std.ascii About Functions which operate on ASCII characters. All of the functions in std.ascii accept Unicode characters but effectively ignore them if they're not ASCII. All isX functions return false for non-ASCII characters, and all toX functions do nothing to non-ASCII characters. For functions which operate on Unicode characters, see $(MREF std, uni). $(SCRIPT inhibitQuickIndex = 1;) $(DIVC quickindex, $(BOOKTABLE, $(TR $(TH Category) $(TH Functions)) $(TR $(TD Validation) $(TD $(LREF isAlpha) $(LREF isAlphaNum) $(LREF isASCII) $(LREF isControl) $(LREF isDigit) $(LREF isGraphical) $(LREF isHexDigit) $(LREF isOctalDigit) $(LREF isPrintable) $(LREF isPunctuation) $(LREF isUpper) $(LREF isWhite) )) $(TR $(TD Conversions) $(TD $(LREF toLower) $(LREF toUpper) )) $(TR $(TD Constants) $(TD $(LREF digits) $(LREF fullHexDigits) $(LREF hexDigits) $(LREF letters) $(LREF lowercase) $(LREF lowerHexDigits) $(LREF newline) $(LREF octalDigits) $(LREF uppercase) $(LREF whitespace) )) $(TR $(TD Enums) $(TD $(LREF ControlChar) $(LREF LetterCase) )) )) References: $(LINK2 http://www.digitalmars.com/d/ascii-table.html, ASCII Table), $(HTTP en.wikipedia.org/wiki/Ascii, Wikipedia) License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP digitalmars.com, Walter Bright) and $(HTTP jmdavisprog.com, Jonathan M Davis) Source: $(PHOBOSSRC std/ascii.d) Functions Name Description isAlpha Params: c = The character to test. Returns: Whether c is an ASCII letter (A .. Z, a .. z). isAlphaNum Params: c = The character to test. Returns: Whether c is a letter or a number (0 .. 9, a .. z, A .. Z). isASCII Params: c = The character to test. Returns: Whether or not c is in the ASCII character set - i.e. in the range 0 .. 0x7F. isControl Params: c = The character to test. Returns: Whether c is a control character. isDigit Params: c = The character to test. Returns: Whether c is a digit (0 .. 9). isGraphical Params: c = The character to test. Returns: Whether or not c is a printable character other than the space character. isHexDigit Params: c = The character to test. Returns: Whether c is a digit in base 16 (0 .. 9, A .. F, a .. f). isLower Params: c = The character to test. Returns: Whether c is a lowercase ASCII letter (a .. z). isOctalDigit Params: c = The character to test. Returns: Whether c is a digit in base 8 (0 .. 7). isPrintable Params: c = The character to test. Returns: Whether or not c is a printable character - including the space character. isPunctuation Params: c = The character to test. Returns: Whether or not c is a punctuation character. That includes all ASCII characters which are not control characters, letters, digits, or whitespace. isUpper Params: c = The character to test. Returns: Whether c is an uppercase ASCII letter (A .. Z). isWhite Params: c = The character to test. Returns: Whether or not c is a whitespace character. That includes the space, tab, vertical tab, form feed, carriage return, and linefeed characters. toLower Converts an ASCII letter to lowercase. toUpper Converts an ASCII letter to uppercase. Variables Name Description digits 0 .. 9 fullHexDigits 0 .. 9A .. Fa .. f hexDigits 0 .. 9A .. F letters A .. Za .. z lowercase a .. z lowerHexDigits 0 .. 9a .. f newline Newline sequence for this system. octalDigits 0 .. 7 uppercase A .. Z whitespace ASCII whitespace"
  },
  "phobos/std/base64/Classes/Base64Exception.html": {
    "href": "phobos/std/base64/Classes/Base64Exception.html",
    "title": "Class - Base64Exception | Marmos Demo",
    "keywords": "Class - Base64Exception Module std.base64 public class Base64Exception { } About Exception thrown upon encountering Base64 encoding or decoding errors."
  },
  "phobos/std/base64/Overview.html": {
    "href": "phobos/std/base64/Overview.html",
    "title": "Module - std.base64 | Marmos Demo",
    "keywords": "Module - std.base64 About Support for Base64 encoding and decoding. This module provides two default implementations of Base64 encoding, $(LREF Base64) with a standard encoding alphabet, and a variant $(LREF Base64URL) that has a modified encoding alphabet designed to be safe for embedding in URLs and filenames. Both variants are implemented as instantiations of the template $(LREF Base64Impl). Most users will not need to use this template directly; however, it can be used to create customized Base64 encodings, such as one that omits padding characters, or one that is safe to embed inside a regular expression. Example ----- ubyte[] data = [0x14, 0xfb, 0x9c, 0x03, 0xd9, 0x7e]; const(char)[] encoded = Base64.encode(data); assert(encoded == \"FPucA9l+\"); ubyte[] decoded = Base64.decode(\"FPucA9l+\"); assert(decoded == [0x14, 0xfb, 0x9c, 0x03, 0xd9, 0x7e]); ----- The range API is supported for both encoding and decoding Example ----- // Create MIME Base64 with CRLF, per line 76. File f = File(\"./text.txt\", \"r\"); scope(exit) f.close(); Appender!string mime64 = appender!string; foreach (encoded; Base64.encoder(f.byChunk(57))) { mime64.put(encoded); mime64.put(\"\\r\\n\"); } writeln(mime64.data); ----- References $(LINK2 https://tools.ietf.org/html/rfc4648, RFC 4648 - The Base16, Base32, and Base64 Data Encodings) Copyright: Masahiro Nakagawa 2010-. License: $(HTTP boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: Masahiro Nakagawa, Daniel Murphy (Single value Encoder and Decoder) Source: $(PHOBOSSRC std/base64.d) Macros: LREF2=$2 Aliases Name Description Base64 Implementation of standard Base64 encoding. Base64URL Variation of Base64 encoding that is safe for use in URLs and filenames. Base64URLNoPadding Unpadded variation of Base64 encoding that is safe for use in URLs and filenames, as used in RFCs 4648 and 7515 (JWS/JWT/JWE). Classes Name Description Base64Exception Exception thrown upon encountering Base64 encoding or decoding errors."
  },
  "phobos/std/bigint/BigInt/Functions/checkDivByZero.html": {
    "href": "phobos/std/bigint/BigInt/Functions/checkDivByZero.html",
    "title": "Overloads for - checkDivByZero | Marmos Demo",
    "keywords": "Overloads for - checkDivByZero Module std.bigint Parent BigInt checkDivByZero() void checkDivByZero( )"
  },
  "phobos/std/bigint/BigInt/Functions/isZero.html": {
    "href": "phobos/std/bigint/BigInt/Functions/isZero.html",
    "title": "Overloads for - isZero | Marmos Demo",
    "keywords": "Overloads for - isZero Module std.bigint Parent BigInt isZero() bool isZero( )"
  },
  "phobos/std/bigint/BigInt/Functions/negate.html": {
    "href": "phobos/std/bigint/BigInt/Functions/negate.html",
    "title": "Overloads for - negate | Marmos Demo",
    "keywords": "Overloads for - negate Module std.bigint Parent BigInt negate() void negate( )"
  },
  "phobos/std/bigint/BigInt/Functions/opCmp.html": {
    "href": "phobos/std/bigint/BigInt/Functions/opCmp.html",
    "title": "Overloads for - opCmp | Marmos Demo",
    "keywords": "Overloads for - opCmp Module std.bigint Parent BigInt opCmp(y) int opCmp( BigInt y ) Implements 3-way comparisons of BigInt with BigInt or BigInt with built-in numeric types."
  },
  "phobos/std/bigint/BigInt/Functions/toHash.html": {
    "href": "phobos/std/bigint/BigInt/Functions/toHash.html",
    "title": "Overloads for - toHash | Marmos Demo",
    "keywords": "Overloads for - toHash Module std.bigint Parent BigInt toHash() size_t toHash( ) Returns: A unique hash of the BigInt 's value suitable for use in a hash table."
  },
  "phobos/std/bigint/BigInt/Functions/toInt.html": {
    "href": "phobos/std/bigint/BigInt/Functions/toInt.html",
    "title": "Overloads for - toInt | Marmos Demo",
    "keywords": "Overloads for - toInt Module std.bigint Parent BigInt toInt() int toInt( ) Returns: The value of this BigInt as an int , or int.max /int.min if outside the representable range."
  },
  "phobos/std/bigint/BigInt/Functions/toLong.html": {
    "href": "phobos/std/bigint/BigInt/Functions/toLong.html",
    "title": "Overloads for - toLong | Marmos Demo",
    "keywords": "Overloads for - toLong Module std.bigint Parent BigInt toLong() long toLong( ) Returns: The value of this BigInt as a long , or long.max /long.min if outside the representable range."
  },
  "phobos/std/bigint/BigInt/Functions/toString.html": {
    "href": "phobos/std/bigint/BigInt/Functions/toString.html",
    "title": "Overloads for - toString | Marmos Demo",
    "keywords": "Overloads for - toString Module std.bigint Parent BigInt toString(sink, formatString) void toString( <bug: unknown> sink, string formatString ) ditto toString(sink, f) void toString( <bug: unknown> sink, FormatSpec!(char) f ) ditto"
  },
  "phobos/std/bigint/BigInt/Functions/uintLength.html": {
    "href": "phobos/std/bigint/BigInt/Functions/uintLength.html",
    "title": "Overloads for - uintLength | Marmos Demo",
    "keywords": "Overloads for - uintLength Module std.bigint Parent BigInt uintLength() size_t uintLength( ) Number of significant uint s which are used in storing this number. The absolute value of this BigInt is always < 2$(SUPERSCRIPT 32*uintLength)"
  },
  "phobos/std/bigint/BigInt/Functions/ulongLength.html": {
    "href": "phobos/std/bigint/BigInt/Functions/ulongLength.html",
    "title": "Overloads for - ulongLength | Marmos Demo",
    "keywords": "Overloads for - ulongLength Module std.bigint Parent BigInt ulongLength() size_t ulongLength( ) Number of significant ulong s which are used in storing this number. The absolute value of this BigInt is always < 2$(SUPERSCRIPT 64*ulongLength)"
  },
  "phobos/std/bigint/Functions/absUnsign.html": {
    "href": "phobos/std/bigint/Functions/absUnsign.html",
    "title": "Overloads for - absUnsign | Marmos Demo",
    "keywords": "Overloads for - absUnsign Module std.bigint absUnsign(x) Unsigned!(T) absUnsign( T x ) Returns the absolute value of x converted to the corresponding unsigned type. Params: x = The integral value to return the absolute value of. Returns: The absolute value of x."
  },
  "phobos/std/bigint/Functions/divMod.html": {
    "href": "phobos/std/bigint/Functions/divMod.html",
    "title": "Overloads for - divMod | Marmos Demo",
    "keywords": "Overloads for - divMod Module std.bigint divMod(dividend, divisor, quotient, remainder) void divMod( BigInt dividend, BigInt divisor, BigInt quotient, BigInt remainder ) Finds the quotient and remainder for the given dividend and divisor in one operation. Params dividend BigInt the $(LREF BigInt) to divide divisor BigInt the $(LREF BigInt) to divide the dividend by quotient BigInt is set to the result of the division remainder BigInt is set to the remainder of the division"
  },
  "phobos/std/bigint/Functions/powmod.html": {
    "href": "phobos/std/bigint/Functions/powmod.html",
    "title": "Overloads for - powmod | Marmos Demo",
    "keywords": "Overloads for - powmod Module std.bigint powmod(base, exponent, modulus) BigInt powmod( BigInt base, BigInt exponent, BigInt modulus ) Fast power modulus calculation for $(LREF BigInt) operands. Params: base = the $(LREF BigInt) is basic operands. exponent = the $(LREF BigInt) is power exponent of base. modulus = the $(LREF BigInt) is modules to be modular of base ^ exponent. Returns: The power modulus value of (base ^ exponent) % modulus."
  },
  "phobos/std/bigint/Functions/toDecimalString.html": {
    "href": "phobos/std/bigint/Functions/toDecimalString.html",
    "title": "Overloads for - toDecimalString | Marmos Demo",
    "keywords": "Overloads for - toDecimalString Module std.bigint toDecimalString(x) string toDecimalString( BigInt x ) Params x BigInt The BigInt to convert to a decimal string . Returns A string that represents the BigInt as a decimal number."
  },
  "phobos/std/bigint/Functions/toHex.html": {
    "href": "phobos/std/bigint/Functions/toHex.html",
    "title": "Overloads for - toHex | Marmos Demo",
    "keywords": "Overloads for - toHex Module std.bigint toHex(x) string toHex( BigInt x ) Params x BigInt The BigInt to convert to a hexadecimal string . Returns A string that represents the BigInt as a hexadecimal (base 16) number in upper case."
  },
  "phobos/std/bigint/Overview.html": {
    "href": "phobos/std/bigint/Overview.html",
    "title": "Module - std.bigint | Marmos Demo",
    "keywords": "Module - std.bigint About Arbitrary-precision ('bignum') arithmetic. Performance is optimized for numbers below ~1000 decimal digits. For X86 machines, highly optimised assembly routines are used. The following algorithms are currently implemented $(UL $(LI Karatsuba multiplication) $(LI Squaring is optimized independently of multiplication) $(LI Divide-and-conquer division) $(LI Binary exponentiation) ) For very large numbers, consider using the $(HTTP gmplib.org, GMP library) instead. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: Don Clugston Source: $(PHOBOSSRC std/bigint.d) Structs Name Description BigInt A struct representing an arbitrary precision integer. Functions Name Description absUnsign Returns the absolute value of x converted to the corresponding unsigned type. divMod Finds the quotient and remainder for the given dividend and divisor in one operation. powmod Fast power modulus calculation for $(LREF BigInt) operands. Params: base = the $(LREF BigInt) is basic operands. exponent = the $(LREF BigInt) is power exponent of base. modulus = the $(LREF BigInt) is modules to be modular of base ^ exponent. Returns: The power modulus value of (base ^ exponent) % modulus. toDecimalString toHex"
  },
  "phobos/std/bigint/Structs/BigInt.html": {
    "href": "phobos/std/bigint/Structs/BigInt.html",
    "title": "Struct - BigInt | Marmos Demo",
    "keywords": "Struct - BigInt Module std.bigint public struct BigInt { // alias isNegative = <todo: marmos support pending>; // void checkDivByZero( ) ; // bool isZero( ) ; // void negate( ) ; // Implements 3-way comparisons of `BigInt` with `BigInt` or `BigInt` with built-in numeric types. int opCmp( BigInt y ) ; // Returns: A unique hash of the `BigInt` 's value suitable for use in a hash table. size_t toHash( ) ; // Returns: The value of this `BigInt` as an `int` , or `int.max` /`int.min` if outside the representable range. int toInt( ) ; // Returns: The value of this `BigInt` as a `long` , or `long.max` /`long.min` if outside the representable range. long toLong( ) ; // ditto void toString( <bug: unknown> sink, string formatString ) ; // ditto void toString( <bug: unknown> sink, FormatSpec!(char) f ) ; // Number of significant `uint` s which are used in storing this number. The absolute value of this `BigInt` is always &lt; 2$(SUPERSCRIPT 32*uintLength) size_t uintLength( ) ; // Number of significant `ulong` s which are used in storing this number. The absolute value of this `BigInt` is always &lt; 2$(SUPERSCRIPT 64*ulongLength) size_t ulongLength( ) ; // BigUint data; // bool sign; } About A struct representing an arbitrary precision integer. All arithmetic operations are supported, except unsigned shift right (>>>). Bitwise operations (|, & , ^ , ~ ) are supported, and behave as if BigInt was an infinite length 2's complement number. BigInt implements value semantics using copy-on-write. This means that assignment is cheap, but operations such as x++ will cause heap allocation. (But note that for most bigint operations, heap allocation is inevitable anyway.) Aliases Name Description isNegative Functions Name Description checkDivByZero isZero negate opCmp Implements 3-way comparisons of BigInt with BigInt or BigInt with built-in numeric types. toHash Returns: A unique hash of the BigInt 's value suitable for use in a hash table. toInt Returns: The value of this BigInt as an int , or int.max /int.min if outside the representable range. toLong Returns: The value of this BigInt as a long , or long.max /long.min if outside the representable range. toString ditto uintLength Number of significant uint s which are used in storing this number. The absolute value of this BigInt is always < 2$(SUPERSCRIPT 32*uintLength) ulongLength Number of significant ulong s which are used in storing this number. The absolute value of this BigInt is always < 2$(SUPERSCRIPT 64*ulongLength) Variables Name Description data sign"
  },
  "phobos/std/bitmanip/BitArray/Functions/bitsSet.html": {
    "href": "phobos/std/bitmanip/BitArray/Functions/bitsSet.html",
    "title": "Overloads for - bitsSet | Marmos Demo",
    "keywords": "Overloads for - bitsSet Module std.bitmanip Parent BitArray bitsSet() <bug: unknown> bitsSet( ) auto Return a lazy range of the indices of set bits."
  },
  "phobos/std/bitmanip/BitArray/Functions/count.html": {
    "href": "phobos/std/bitmanip/BitArray/Functions/count.html",
    "title": "Overloads for - count | Marmos Demo",
    "keywords": "Overloads for - count Module std.bitmanip Parent BitArray count() size_t count( ) Counts all the set bits in the BitArray"
  },
  "phobos/std/bitmanip/BitArray/Functions/dim.html": {
    "href": "phobos/std/bitmanip/BitArray/Functions/dim.html",
    "title": "Overloads for - dim | Marmos Demo",
    "keywords": "Overloads for - dim Module std.bitmanip Parent BitArray dim() size_t dim( ) Returns: Dimension i.e. the number of native words backing this BitArray . Technically, this is the length of the underlying array storing bits, which is equal to ceil(length / (size_t.sizeof * 8)) , as bits are packed into size_t units."
  },
  "phobos/std/bitmanip/BitArray/Functions/dup.html": {
    "href": "phobos/std/bitmanip/BitArray/Functions/dup.html",
    "title": "Overloads for - dup | Marmos Demo",
    "keywords": "Overloads for - dup Module std.bitmanip Parent BitArray dup() BitArray dup( ) Duplicates the BitArray and its contents."
  },
  "phobos/std/bitmanip/BitArray/Functions/endBits.html": {
    "href": "phobos/std/bitmanip/BitArray/Functions/endBits.html",
    "title": "Overloads for - endBits | Marmos Demo",
    "keywords": "Overloads for - endBits Module std.bitmanip Parent BitArray endBits() size_t endBits( )"
  },
  "phobos/std/bitmanip/BitArray/Functions/endMask.html": {
    "href": "phobos/std/bitmanip/BitArray/Functions/endMask.html",
    "title": "Overloads for - endMask | Marmos Demo",
    "keywords": "Overloads for - endMask Module std.bitmanip Parent BitArray endMask() size_t endMask( )"
  },
  "phobos/std/bitmanip/BitArray/Functions/flip.html": {
    "href": "phobos/std/bitmanip/BitArray/Functions/flip.html",
    "title": "Overloads for - flip | Marmos Demo",
    "keywords": "Overloads for - flip Module std.bitmanip Parent BitArray flip() void flip( ) Flips all the bits in the BitArray flip(pos) void flip( size_t pos ) Flips a single bit, specified by pos"
  },
  "phobos/std/bitmanip/BitArray/Functions/fullWords.html": {
    "href": "phobos/std/bitmanip/BitArray/Functions/fullWords.html",
    "title": "Overloads for - fullWords | Marmos Demo",
    "keywords": "Overloads for - fullWords Module std.bitmanip Parent BitArray fullWords() size_t fullWords( )"
  },
  "phobos/std/bitmanip/BitArray/Functions/lenToDim.html": {
    "href": "phobos/std/bitmanip/BitArray/Functions/lenToDim.html",
    "title": "Overloads for - lenToDim | Marmos Demo",
    "keywords": "Overloads for - lenToDim Module std.bitmanip Parent BitArray lenToDim(len) size_t lenToDim( size_t len ) static"
  },
  "phobos/std/bitmanip/BitArray/Functions/length.html": {
    "href": "phobos/std/bitmanip/BitArray/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.bitmanip Parent BitArray length() size_t length( ) Returns: Number of bits in the BitArray . length(newlen) size_t length( size_t newlen ) Sets the amount of bits in the BitArray . $(RED Warning: increasing length may overwrite bits in the final word of the current underlying data regardless of whether it is shared between BitArray objects. i.e. D dynamic array extension semantics are not followed.)"
  },
  "phobos/std/bitmanip/BitArray/Functions/opApply.html": {
    "href": "phobos/std/bitmanip/BitArray/Functions/opApply.html",
    "title": "Overloads for - opApply | Marmos Demo",
    "keywords": "Overloads for - opApply Module std.bitmanip Parent BitArray opApply(dg) int opApply( <bug: unknown> dg ) Support for foreach loops for BitArray . opApply(dg) int opApply( <bug: unknown> dg ) ditto opApply(dg) int opApply( <bug: unknown> dg ) ditto opApply(dg) int opApply( <bug: unknown> dg ) ditto"
  },
  "phobos/std/bitmanip/BitArray/Functions/opCmp.html": {
    "href": "phobos/std/bitmanip/BitArray/Functions/opCmp.html",
    "title": "Overloads for - opCmp | Marmos Demo",
    "keywords": "Overloads for - opCmp Module std.bitmanip Parent BitArray opCmp(a2) int opCmp( BitArray a2 ) Supports comparison operators for BitArray ."
  },
  "phobos/std/bitmanip/BitArray/Functions/opEquals.html": {
    "href": "phobos/std/bitmanip/BitArray/Functions/opEquals.html",
    "title": "Overloads for - opEquals | Marmos Demo",
    "keywords": "Overloads for - opEquals Module std.bitmanip Parent BitArray opEquals(a2) bool opEquals( BitArray a2 ) Support for operators == and != for BitArray ."
  },
  "phobos/std/bitmanip/BitArray/Functions/opIndex.html": {
    "href": "phobos/std/bitmanip/BitArray/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.bitmanip Parent BitArray opIndex(i) bool opIndex( size_t i ) Gets the i 'th bit in the BitArray ."
  },
  "phobos/std/bitmanip/BitArray/Functions/opIndexAssign.html": {
    "href": "phobos/std/bitmanip/BitArray/Functions/opIndexAssign.html",
    "title": "Overloads for - opIndexAssign | Marmos Demo",
    "keywords": "Overloads for - opIndexAssign Module std.bitmanip Parent BitArray opIndexAssign(b, i) bool opIndexAssign( bool b, size_t i ) Sets the i 'th bit in the BitArray ."
  },
  "phobos/std/bitmanip/BitArray/Functions/opSliceAssign.html": {
    "href": "phobos/std/bitmanip/BitArray/Functions/opSliceAssign.html",
    "title": "Overloads for - opSliceAssign | Marmos Demo",
    "keywords": "Overloads for - opSliceAssign Module std.bitmanip Parent BitArray opSliceAssign(val) void opSliceAssign( bool val ) Sets all the values in the BitArray to the value specified by val . opSliceAssign(val, start, end) void opSliceAssign( bool val, size_t start, size_t end ) Sets the bits of a slice of BitArray starting at index start and ends at index ($D end - 1) with the values specified by val ."
  },
  "phobos/std/bitmanip/BitArray/Functions/reverse.html": {
    "href": "phobos/std/bitmanip/BitArray/Functions/reverse.html",
    "title": "Overloads for - reverse | Marmos Demo",
    "keywords": "Overloads for - reverse Module std.bitmanip Parent BitArray reverse() BitArray reverse( ) Reverses the bits of the BitArray ."
  },
  "phobos/std/bitmanip/BitArray/Functions/sort.html": {
    "href": "phobos/std/bitmanip/BitArray/Functions/sort.html",
    "title": "Overloads for - sort | Marmos Demo",
    "keywords": "Overloads for - sort Module std.bitmanip Parent BitArray sort() BitArray sort( ) Sorts the BitArray 's elements."
  },
  "phobos/std/bitmanip/BitArray/Functions/toHash.html": {
    "href": "phobos/std/bitmanip/BitArray/Functions/toHash.html",
    "title": "Overloads for - toHash | Marmos Demo",
    "keywords": "Overloads for - toHash Module std.bitmanip Parent BitArray toHash() size_t toHash( ) Support for hashing for BitArray ."
  },
  "phobos/std/bitmanip/BitsSet/Functions/empty.html": {
    "href": "phobos/std/bitmanip/BitsSet/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.bitmanip Parent BitsSet empty() bool empty( )"
  },
  "phobos/std/bitmanip/BitsSet/Functions/front.html": {
    "href": "phobos/std/bitmanip/BitsSet/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.bitmanip Parent BitsSet front() size_t front( )"
  },
  "phobos/std/bitmanip/BitsSet/Functions/length.html": {
    "href": "phobos/std/bitmanip/BitsSet/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.bitmanip Parent BitsSet length() size_t length( )"
  },
  "phobos/std/bitmanip/BitsSet/Functions/popFront.html": {
    "href": "phobos/std/bitmanip/BitsSet/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.bitmanip Parent BitsSet popFront() void popFront( )"
  },
  "phobos/std/bitmanip/BitsSet/Functions/save.html": {
    "href": "phobos/std/bitmanip/BitsSet/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.bitmanip Parent BitsSet save() BitsSet save( )"
  },
  "phobos/std/bitmanip/Functions/append.html": {
    "href": "phobos/std/bitmanip/Functions/append.html",
    "title": "Overloads for - append | Marmos Demo",
    "keywords": "Overloads for - append Module std.bitmanip append(range, value) void append( R range, T value ) Takes an integral value, converts it to the given endianness, and appends it to the given range of ubyte s (using put ) as a sequence of T.sizeof ubyte s starting at index. hasSlicing!R must be true . Params T <parameter not found> The integral type to convert the first T.sizeof bytes to. endianness <parameter not found> The endianness to write the bytes in. range R The range to append to. value T The value to append."
  },
  "phobos/std/bitmanip/Functions/bigEndianToNative.html": {
    "href": "phobos/std/bitmanip/Functions/bigEndianToNative.html",
    "title": "Overloads for - bigEndianToNative | Marmos Demo",
    "keywords": "Overloads for - bigEndianToNative Module std.bitmanip bigEndianToNative(val) T bigEndianToNative( <bug: unknown> val ) Converts the given value from big endian to the native endianness and returns it. The value is given as a ubyte[n] where n is the size of the target type. You must give the target type as a template argument, because there are multiple types with the same size and so the type of the argument is not enough to determine the return type. Taking a ubyte[n] helps prevent accidentally using a swapped value as a regular one (and in the case of floating point values, it's necessary, because the FPU will mess up any swapped floating point values. So, you can't actually have swapped floating point values as floating point values)."
  },
  "phobos/std/bitmanip/Functions/bitfields.html": {
    "href": "phobos/std/bitmanip/Functions/bitfields.html",
    "title": "Overloads for - bitfields | Marmos Demo",
    "keywords": "Overloads for - bitfields Module std.bitmanip bitfields() string bitfields( ) Allows creating bitfields inside structs , classes and unions . A bitfield consists of one or more entries with a fixed number of bits reserved for each of the entries. The types of the entries can be bool s, integral types or enumerated types, arbitrarily mixed. The most efficient type to store in bitfields is bool , followed by unsigned types, followed by signed types. Each non-bool entry of the bitfield will be represented by the number of bits specified by the user. The minimum and the maximum numbers that represent this domain can be queried by using the name of the variable followed by _min or _max . Limitation: The number of bits in a bitfield is limited to 8, 16, 32 or 64. If padding is needed, an entry should be explicitly allocated with an empty name. Implementation_details: Bitfields are internally stored in an ubyte , ushort , uint or ulong depending on the number of bits used. The bits are filled in the order given by the parameters, starting with the lowest significant bit. The name of the (private) variable used for saving the bitfield is created by concatenating all of the variable names, each preceded by an underscore, and a suffix _bf . Params: T = A list of template parameters divided into chunks of 3 items. Each chunk consists (in this order) of a type, a name and a number. Together they define an entry of the bitfield : a variable of the given type and name, which can hold as many bits as the number denotes. Returns: A string that can be used in a mixin to add the bitfield . See_Also: $(REF BitFlags, std,typecons)"
  },
  "phobos/std/bitmanip/Functions/bitsSet.html": {
    "href": "phobos/std/bitmanip/Functions/bitsSet.html",
    "title": "Overloads for - bitsSet | Marmos Demo",
    "keywords": "Overloads for - bitsSet Module std.bitmanip bitsSet(value) <bug: unknown> bitsSet( T value ) auto Range that iterates the indices of the set bits in value . Index 0 corresponds to the least significant bit. For signed integers, the highest index corresponds to the sign bit."
  },
  "phobos/std/bitmanip/Functions/countBitsSet.html": {
    "href": "phobos/std/bitmanip/Functions/countBitsSet.html",
    "title": "Overloads for - countBitsSet | Marmos Demo",
    "keywords": "Overloads for - countBitsSet Module std.bitmanip countBitsSet(value) uint countBitsSet( T value ) Counts the number of set bits in the binary representation of value . For signed integers, the sign bit is included in the count."
  },
  "phobos/std/bitmanip/Functions/ctfeBytes.html": {
    "href": "phobos/std/bitmanip/Functions/ctfeBytes.html",
    "title": "Overloads for - ctfeBytes | Marmos Demo",
    "keywords": "Overloads for - ctfeBytes Module std.bitmanip ctfeBytes(value) <bug: unknown> ctfeBytes( T value ) auto"
  },
  "phobos/std/bitmanip/Functions/ctfeRead.html": {
    "href": "phobos/std/bitmanip/Functions/ctfeRead.html",
    "title": "Overloads for - ctfeRead | Marmos Demo",
    "keywords": "Overloads for - ctfeRead Module std.bitmanip ctfeRead(array) <bug: unknown> ctfeRead( <bug: unknown> array ) auto"
  },
  "phobos/std/bitmanip/Functions/endianToNativeImpl.html": {
    "href": "phobos/std/bitmanip/Functions/endianToNativeImpl.html",
    "title": "Overloads for - endianToNativeImpl | Marmos Demo",
    "keywords": "Overloads for - endianToNativeImpl Module std.bitmanip endianToNativeImpl(val) T endianToNativeImpl( <bug: unknown> val ) endianToNativeImpl(val) <bug: unknown> endianToNativeImpl( <bug: unknown> val ) auto"
  },
  "phobos/std/bitmanip/Functions/getBitsForAlign.html": {
    "href": "phobos/std/bitmanip/Functions/getBitsForAlign.html",
    "title": "Overloads for - getBitsForAlign | Marmos Demo",
    "keywords": "Overloads for - getBitsForAlign Module std.bitmanip getBitsForAlign(a) ulong getBitsForAlign( ulong a )"
  },
  "phobos/std/bitmanip/Functions/littleEndianToNative.html": {
    "href": "phobos/std/bitmanip/Functions/littleEndianToNative.html",
    "title": "Overloads for - littleEndianToNative | Marmos Demo",
    "keywords": "Overloads for - littleEndianToNative Module std.bitmanip littleEndianToNative(val) T littleEndianToNative( <bug: unknown> val ) Converts the given value from little endian to the native endianness and returns it. The value is given as a ubyte[n] where n is the size of the target type. You must give the target type as a template argument, because there are multiple types with the same size and so the type of the argument is not enough to determine the return type. Taking a ubyte[n] helps prevent accidentally using a swapped value as a regular one (and in the case of floating point values, it's necessary, because the FPU will mess up any swapped floating point values. So, you can't actually have swapped floating point values as floating point values). real is not supported, because its size is implementation-dependent and therefore could vary from machine to machine (which could make it unusable if you tried to transfer it to another machine)."
  },
  "phobos/std/bitmanip/Functions/myToString.html": {
    "href": "phobos/std/bitmanip/Functions/myToString.html",
    "title": "Overloads for - myToString | Marmos Demo",
    "keywords": "Overloads for - myToString Module std.bitmanip myToString(n) string myToString( ulong n )"
  },
  "phobos/std/bitmanip/Functions/nativeToBigEndian.html": {
    "href": "phobos/std/bitmanip/Functions/nativeToBigEndian.html",
    "title": "Overloads for - nativeToBigEndian | Marmos Demo",
    "keywords": "Overloads for - nativeToBigEndian Module std.bitmanip nativeToBigEndian(val) <bug: unknown> nativeToBigEndian( T val ) auto Converts the given value from the native endianness to big endian and returns it as a ubyte[n] where n is the size of the given type. Returning a ubyte[n] helps prevent accidentally using a swapped value as a regular one (and in the case of floating point values, it's necessary, because the FPU will mess up any swapped floating point values. So, you can't actually have swapped floating point values as floating point values). real is not supported, because its size is implementation-dependent and therefore could vary from machine to machine (which could make it unusable if you tried to transfer it to another machine)."
  },
  "phobos/std/bitmanip/Functions/nativeToEndianImpl.html": {
    "href": "phobos/std/bitmanip/Functions/nativeToEndianImpl.html",
    "title": "Overloads for - nativeToEndianImpl | Marmos Demo",
    "keywords": "Overloads for - nativeToEndianImpl Module std.bitmanip nativeToEndianImpl(val) <bug: unknown> nativeToEndianImpl( T val ) auto nativeToEndianImpl(val) <bug: unknown> nativeToEndianImpl( T val ) auto"
  },
  "phobos/std/bitmanip/Functions/nativeToLittleEndian.html": {
    "href": "phobos/std/bitmanip/Functions/nativeToLittleEndian.html",
    "title": "Overloads for - nativeToLittleEndian | Marmos Demo",
    "keywords": "Overloads for - nativeToLittleEndian Module std.bitmanip nativeToLittleEndian(val) <bug: unknown> nativeToLittleEndian( T val ) auto Converts the given value from the native endianness to little endian and returns it as a ubyte[n] where n is the size of the given type. Returning a ubyte[n] helps prevent accidentally using a swapped value as a regular one (and in the case of floating point values, it's necessary, because the FPU will mess up any swapped floating point values. So, you can't actually have swapped floating point values as floating point values)."
  },
  "phobos/std/bitmanip/Functions/peek.html": {
    "href": "phobos/std/bitmanip/Functions/peek.html",
    "title": "Overloads for - peek | Marmos Demo",
    "keywords": "Overloads for - peek Module std.bitmanip peek(range) T peek( R range ) Takes a range of ubyte s and converts the first T.sizeof bytes to T . The value returned is converted from the given endianness to the native endianness. The range is not consumed. Params T <parameter not found> The integral type to convert the first T.sizeof bytes to. endianness <parameter not found> The endianness that the bytes are assumed to be in. range R The range to read from. index <parameter not found> The index to start reading from (instead of starting at the front). If index is a pointer, then it is updated to the index after the bytes read. The overloads with index are only available if hasSlicing!R is true . peek(range, index) T peek( R range, size_t index ) Ditto peek(range, index) T peek( R range, <bug: unknown> index ) Ditto"
  },
  "phobos/std/bitmanip/Functions/read.html": {
    "href": "phobos/std/bitmanip/Functions/read.html",
    "title": "Overloads for - read | Marmos Demo",
    "keywords": "Overloads for - read Module std.bitmanip read(range) T read( R range ) Takes a range of ubyte s and converts the first T.sizeof bytes to T . The value returned is converted from the given endianness to the native endianness. The T.sizeof bytes which are read are consumed from the range. Params T <parameter not found> The integral type to convert the first T.sizeof bytes to. endianness <parameter not found> The endianness that the bytes are assumed to be in. range R The range to read from."
  },
  "phobos/std/bitmanip/Functions/swapEndian.html": {
    "href": "phobos/std/bitmanip/Functions/swapEndian.html",
    "title": "Overloads for - swapEndian | Marmos Demo",
    "keywords": "Overloads for - swapEndian Module std.bitmanip swapEndian(val) T swapEndian( T val ) Swaps the endianness of the given integral value or character."
  },
  "phobos/std/bitmanip/Functions/write.html": {
    "href": "phobos/std/bitmanip/Functions/write.html",
    "title": "Overloads for - write | Marmos Demo",
    "keywords": "Overloads for - write Module std.bitmanip write(range, value, index) void write( R range, T value, size_t index ) Takes an integral value, converts it to the given endianness, and writes it to the given range of ubyte s as a sequence of T.sizeof ubyte s starting at index. hasSlicing!R must be true . Params T <parameter not found> The integral type to convert the first T.sizeof bytes to. endianness <parameter not found> The endianness to write the bytes in. range R The range to write to. value T The value to write. index size_t The index to start writing to. If index is a pointer, then it is updated to the index after the bytes read. write(range, value, index) void write( R range, T value, <bug: unknown> index ) Ditto"
  },
  "phobos/std/bitmanip/Overview.html": {
    "href": "phobos/std/bitmanip/Overview.html",
    "title": "Module - std.bitmanip | Marmos Demo",
    "keywords": "Module - std.bitmanip About Bit-level manipulation facilities. $(SCRIPT inhibitQuickIndex = 1;) $(DIVC quickindex, $(BOOKTABLE, $(TR $(TH Category) $(TH Functions)) $(TR $(TD Bit constructs) $(TD $(LREF BitArray) $(LREF bitfields) $(LREF bitsSet) )) $(TR $(TD Endianness conversion) $(TD $(LREF bigEndianToNative) $(LREF littleEndianToNative) $(LREF nativeToBigEndian) $(LREF nativeToLittleEndian) $(LREF swapEndian) )) $(TR $(TD Integral ranges) $(TD $(LREF append) $(LREF peek) $(LREF read) $(LREF write) )) $(TR $(TD Floating-Point manipulation) $(TD $(LREF DoubleRep) $(LREF FloatRep) )) $(TR $(TD Tagging) $(TD $(LREF taggedClassRef) $(LREF taggedPointer) )) )) Copyright: Copyright The D Language Foundation 2007 - 2011. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP digitalmars.com, Walter Bright), $(HTTP erdani.org, Andrei Alexandrescu), $(HTTP jmdavisprog.com, Jonathan M Davis), Alex Rønne Petersen, Damian Ziemba, Amaury SECHET Source: $(PHOBOSSRC std/bitmanip.d) Aliases Name Description DoubleRep Allows manipulating the fraction, exponent, and sign parts of a double separately. The definition is: FloatRep Allows manipulating the fraction, exponent, and sign parts of a float separately. The definition is: StoreType Structs Name Description BitArray A dynamic array of bits. Each bit in a BitArray can be manipulated individually or by the standard bitwise operators & , | , ^ , ~ , >> , << and also by other effective member functions; most of them work relative to the BitArray 's dimension (see $(LREF dim)), instead of its $(LREF length). BitsSet FloatingPointRepresentation Functions Name Description append Takes an integral value, converts it to the given endianness, and appends it to the given range of ubyte s (using put ) as a sequence of T.sizeof ubyte s starting at index. hasSlicing!R must be true . bigEndianToNative Converts the given value from big endian to the native endianness and returns it. The value is given as a ubyte[n] where n is the size of the target type. You must give the target type as a template argument, because there are multiple types with the same size and so the type of the argument is not enough to determine the return type. bitfields Allows creating bitfields inside structs , classes and unions . bitsSet Range that iterates the indices of the set bits in value . Index 0 corresponds to the least significant bit. For signed integers, the highest index corresponds to the sign bit. countBitsSet Counts the number of set bits in the binary representation of value . For signed integers, the sign bit is included in the count. ctfeBytes ctfeRead endianToNativeImpl getBitsForAlign littleEndianToNative Converts the given value from little endian to the native endianness and returns it. The value is given as a ubyte[n] where n is the size of the target type. You must give the target type as a template argument, because there are multiple types with the same size and so the type of the argument is not enough to determine the return type. myToString nativeToBigEndian Converts the given value from the native endianness to big endian and returns it as a ubyte[n] where n is the size of the given type. nativeToEndianImpl nativeToLittleEndian Converts the given value from the native endianness to little endian and returns it as a ubyte[n] where n is the size of the given type. peek Takes a range of ubyte s and converts the first T.sizeof bytes to T . The value returned is converted from the given endianness to the native endianness. The range is not consumed. read Takes a range of ubyte s and converts the first T.sizeof bytes to T . The value returned is converted from the given endianness to the native endianness. The T.sizeof bytes which are read are consumed from the range. swapEndian Swaps the endianness of the given integral value or character. write Takes an integral value, converts it to the given endianness, and writes it to the given range of ubyte s as a sequence of T.sizeof ubyte s starting at index. hasSlicing!R must be true . Variables Name Description canSwapEndianness createReferenceAccessor createStorageAndFields createTaggedReference isFloatOrDouble mask Name ref_accessor Size storage storage_accessor StoreName taggedClassRef This string mixin generator allows one to create tagged class reference inside $(D_PARAM struct)s and $(D_PARAM class)es. taggedPointer This string mixin generator allows one to create tagged pointers inside $(D_PARAM struct)s and $(D_PARAM class)es."
  },
  "phobos/std/bitmanip/Structs/BitArray.html": {
    "href": "phobos/std/bitmanip/Structs/BitArray.html",
    "title": "Struct - BitArray | Marmos Demo",
    "keywords": "Struct - BitArray Module std.bitmanip public struct BitArray { // Return a lazy range of the indices of set bits. <bug: unknown> bitsSet( ) auto; // Counts all the set bits in the `BitArray` size_t count( ) ; // Returns: Dimension i.e. the number of native words backing this `BitArray` . size_t dim( ) ; // Duplicates the `BitArray` and its contents. BitArray dup( ) ; // size_t endBits( ) ; // size_t endMask( ) ; // Flips all the bits in the `BitArray` void flip( ) ; // Flips a single bit, specified by `pos` void flip( size_t pos ) ; // size_t fullWords( ) ; // Returns: Number of bits in the `BitArray` . size_t length( ) ; // Sets the amount of bits in the `BitArray` . $(RED Warning: increasing length may overwrite bits in the final word of the current underlying data regardless of whether it is shared between BitArray objects. i.e. D dynamic array extension semantics are not followed.) size_t length( size_t newlen ) ; // size_t lenToDim( size_t len ) static; // Support for `foreach` loops for `BitArray` . int opApply( <bug: unknown> dg ) ; // ditto int opApply( <bug: unknown> dg ) ; // ditto int opApply( <bug: unknown> dg ) ; // ditto int opApply( <bug: unknown> dg ) ; // Supports comparison operators for `BitArray` . int opCmp( BitArray a2 ) ; // Support for operators == and != for `BitArray` . bool opEquals( BitArray a2 ) ; // Gets the `i` 'th bit in the `BitArray` . bool opIndex( size_t i ) ; // Sets the `i` 'th bit in the `BitArray` . bool opIndexAssign( bool b, size_t i ) ; // Sets all the values in the `BitArray` to the value specified by `val` . void opSliceAssign( bool val ) ; // Sets the bits of a slice of `BitArray` starting at index `start` and ends at index ($D end - 1) with the values specified by `val` . void opSliceAssign( bool val, size_t start, size_t end ) ; // Reverses the bits of the `BitArray` . BitArray reverse( ) ; // Sorts the `BitArray` 's elements. BitArray sort( ) ; // Support for hashing for `BitArray` . size_t toHash( ) ; // __enumMember bitsPerSizeT; } About A dynamic array of bits. Each bit in a BitArray can be manipulated individually or by the standard bitwise operators & , | , ^ , ~ , >> , << and also by other effective member functions; most of them work relative to the BitArray 's dimension (see $(LREF dim)), instead of its $(LREF length). Functions Name Description bitsSet Return a lazy range of the indices of set bits. count Counts all the set bits in the BitArray dim Returns: Dimension i.e. the number of native words backing this BitArray . dup Duplicates the BitArray and its contents. endBits endMask flip Flips all the bits in the BitArray fullWords length Returns: Number of bits in the BitArray . lenToDim opApply Support for foreach loops for BitArray . opCmp Supports comparison operators for BitArray . opEquals Support for operators == and != for BitArray . opIndex Gets the i 'th bit in the BitArray . opIndexAssign Sets the i 'th bit in the BitArray . opSliceAssign Sets all the values in the BitArray to the value specified by val . reverse Reverses the bits of the BitArray . sort Sorts the BitArray 's elements. toHash Support for hashing for BitArray . Variables Name Description bitsPerSizeT"
  },
  "phobos/std/bitmanip/Structs/BitsSet.html": {
    "href": "phobos/std/bitmanip/Structs/BitsSet.html",
    "title": "Struct - BitsSet | Marmos Demo",
    "keywords": "Struct - BitsSet Module std.bitmanip public struct BitsSet { // bool empty( ) ; // size_t front( ) ; // size_t length( ) ; // void popFront( ) ; // BitsSet save( ) ; } Functions Name Description empty front length popFront save"
  },
  "phobos/std/bitmanip/Structs/FloatingPointRepresentation.html": {
    "href": "phobos/std/bitmanip/Structs/FloatingPointRepresentation.html",
    "title": "Struct - FloatingPointRepresentation | Marmos Demo",
    "keywords": "Struct - FloatingPointRepresentation Module std.bitmanip public struct FloatingPointRepresentation { // alias ExponentType = <todo: marmos support pending>; // alias FractionType = <todo: marmos support pending>; // uint bias; // uint exponentBits; // uint fractionBits; // uint signBits; // T value; } Aliases Name Description ExponentType FractionType Variables Name Description bias exponentBits fractionBits signBits value"
  },
  "phobos/std/checkedint/Checked/Functions/get.html": {
    "href": "phobos/std/checkedint/Checked/Functions/get.html",
    "title": "Overloads for - get | Marmos Demo",
    "keywords": "Overloads for - get Module std.checkedint Parent Checked get() <bug: unknown> get( ) auto Returns A copy of the underlying value."
  },
  "phobos/std/checkedint/Checked/Functions/toHash.html": {
    "href": "phobos/std/checkedint/Checked/Functions/toHash.html",
    "title": "Overloads for - toHash | Marmos Demo",
    "keywords": "Overloads for - toHash Module std.checkedint Parent Checked toHash() size_t toHash( ) Generates a hash for this . If Hook defines hookToHash , the call immediately returns hook.hookToHash(payload) . If Hook does not implement hookToHash , but it has state, a hash will be generated for the Hook using the built-in function and it will be xored with the hash of the payload . Returns The hash of this instance."
  },
  "phobos/std/checkedint/Functions/checked.html": {
    "href": "phobos/std/checkedint/Functions/checked.html",
    "title": "Overloads for - checked | Marmos Demo",
    "keywords": "Overloads for - checked Module std.checkedint checked(value) Checked!(THook) checked( T value ) Convenience function that turns an integral into the corresponding Checked instance by using template argument deduction. The hook type may be specified (by default Abort ). Params Hook <parameter not found> type that customizes the behavior, by default Abort T <parameter not found> type represetinfg the underlying represantion of the Checked instance value T the actual value of the representation Returns A Checked instance customized by the provided Hook and value"
  },
  "phobos/std/checkedint/Functions/isNaN.html": {
    "href": "phobos/std/checkedint/Functions/isNaN.html",
    "title": "Overloads for - isNaN | Marmos Demo",
    "keywords": "Overloads for - isNaN Module std.checkedint isNaN(x) bool isNaN( Checked!(TWithNaN) x ) Queries whether a $(D Checked!(T, WithNaN)) object is not a number (NaN). Params x Checked!(TWithNaN) the Checked instance queried Returns true if x is a NaN, false otherwise"
  },
  "phobos/std/checkedint/Functions/opChecked.html": {
    "href": "phobos/std/checkedint/Functions/opChecked.html",
    "title": "Overloads for - opChecked | Marmos Demo",
    "keywords": "Overloads for - opChecked Module std.checkedint opChecked(lhs, rhs, overflow) <bug: unknown> opChecked( L lhs, R rhs, bool overflow ) Defines binary operations with overflow checking for any two integral types. The result type obeys the language rules (even when they may be counterintuitive), and overflow is set if an overflow occurs (including inadvertent change of signedness, e.g. -1 is converted to uint ). Conceptually the behavior is: $(OL $(LI Perform the operation in infinite precision) $(LI If the infinite-precision result fits in the result type, return it and do not touch overflow ) $(LI Otherwise, set overflow to true and return an unspecified value) ) The implementation exploits properties of types and operations to minimize additional work. Params x <parameter not found> The binary operator involved, e.g. / lhs L The left-hand side of the operator rhs R The right-hand side of the operator overflow bool The overflow indicator (assigned true in case there's an error) Returns The result of the operation, which is the same as the built-in operator"
  },
  "phobos/std/checkedint/Functions/pow.html": {
    "href": "phobos/std/checkedint/Functions/pow.html",
    "title": "Overloads for - pow | Marmos Demo",
    "keywords": "Overloads for - pow Module std.checkedint pow(lhs, rhs, overflow) <bug: unknown> pow( L lhs, R rhs, bool overflow ) auto"
  },
  "phobos/std/checkedint/Functions/powImpl.html": {
    "href": "phobos/std/checkedint/Functions/powImpl.html",
    "title": "Overloads for - powImpl | Marmos Demo",
    "keywords": "Overloads for - powImpl Module std.checkedint powImpl(b, e, overflow) T powImpl( T b, uint e, bool overflow )"
  },
  "phobos/std/checkedint/Overview.html": {
    "href": "phobos/std/checkedint/Overview.html",
    "title": "Module - std.checkedint | Marmos Demo",
    "keywords": "Module - std.checkedint About $(SCRIPT inhibitQuickIndex = 1;) This module defines facilities for efficient checking of integral operations against overflow, casting with loss of precision, unexpected change of sign, etc. The checking (and possibly correction) can be done at operation level, for example \\((LREF opChecked)\\)(D !\"+\"(x, y, overflow)) adds two integrals x and y and sets overflow to true if an overflow occurred. The flag overflow (a bool passed by reference) is not touched if the operation succeeded, so the same flag can be reused for a sequence of operations and tested at the end. Issuing individual checked operations is flexible and efficient but often tedious. The $(LREF Checked) facility offers encapsulated integral wrappers that do all checking internally and have configurable behavior upon erroneous results. For example, Checked!int is a type that behaves like int but aborts execution immediately whenever involved in an operation that produces the arithmetically wrong result. The accompanying convenience function $(LREF checked) uses type deduction to convert a value x of integral type T to Checked!T by means of checked(x) . For example: --- void main() { import std.checkedint, std.stdio; writeln((checked(5) + 7).get); // 12 writeln((checked(10) **1000 ** 1000 1000).get); // Overflow } --- Similarly, $(D checked(-1) > uint(0)) aborts execution (even though the built-in comparison $(D int(-1) > uint(0)) is surprisingly true due to language's conversion rules modeled after C). Thus, Checked!int is a virtually drop-in replacement for int useable in debug builds, to be replaced by int in release mode if efficiency demands it. Checked has customizable behavior with the help of a second type parameter, Hook . Depending on what methods Hook defines, core operations on the underlying integral may be verified for overflow or completely redefined. If Hook defines no method at all and carries no state, there is no change in behavior, i.e. $(D Checked!(int, void)) is a wrapper around int that adds no customization at all. This module provides a few predefined hooks (below) that add useful behavior to Checked : $(BOOKTABLE , $(TR $(TD $(LREF Abort)) $(TD fails every incorrect operation with a message to $(REF stderr, std, stdio) followed by a call to assert(0) . It is the default second parameter, i.e. Checked!short is the same as $(D Checked!(short, Abort)). )) $(TR $(TD $(LREF Throw)) $(TD fails every incorrect operation by throwing an exception. )) $(TR $(TD $(LREF Warn)) $(TD prints incorrect operations to $(REF stderr, std, stdio) but otherwise preserves the built-in behavior. )) $(TR $(TD $(LREF ProperCompare)) $(TD fixes the comparison operators == , != , < , <= , > , and >= to return correct results in all circumstances, at a slight cost in efficiency. For example, $(D Checked!(uint, ProperCompare)(1) > -1) is true , which is not the case for the built-in comparison. Also, comparing numbers for equality with floating-point numbers only passes if the integral can be converted to the floating-point number precisely, so as to preserve transitivity of equality. )) $(TR $(TD $(LREF WithNaN)) $(TD reserves a special \"Not a Number\" (NaN) value akin to the homonym value reserved for floating-point values. Once a $(D Checked!(X, WithNaN)) gets this special value, it preserves and propagates it until reassigned. $(LREF isNaN) can be used to query whether the object is not a number. )) $(TR $(TD $(LREF Saturate)) $(TD implements saturating arithmetic, i.e. $(D Checked!(int, Saturate)) \"stops\" at int.max for all operations that would cause an int to overflow toward infinity, and at int.min for all operations that would correspondingly overflow toward negative infinity. )) ) These policies may be used alone, e.g. $(D Checked!(uint, WithNaN)) defines a uint -like type that reaches a stable NaN state for all erroneous operations. They may also be \"stacked\" on top of each other, owing to the property that a checked integral emulates an actual integral, which means another checked integral can be built on top of it. Some combinations of interest include: $(BOOKTABLE , $(TR $(TD $(D Checked!(Checked!int, ProperCompare)))) $(TR $(TD defines an int with fixed comparison operators that will fail with assert(0) upon overflow. (Recall that Abort is the default policy.) The order in which policies are combined is important because the outermost policy (ProperCompare in this case) has the first crack at intercepting an operator. The converse combination $(D Checked!(Checked!(int, ProperCompare))) is meaningless because Abort will intercept comparison and will fail without giving ProperCompare a chance to intervene. )) $(TR $(TD)) $(TR $(TDNW $(D Checked!(Checked!(int, ProperCompare), WithNaN)))) $(TR $(TD defines an int -like type that supports a NaN value. For values that are not NaN, comparison works properly. Again the composition order is important; $(D Checked!(Checked!(int, WithNaN), ProperCompare)) does not have good semantics because ProperCompare intercepts comparisons before the numbers involved are tested for NaN. )) ) The hook's members are looked up statically in a Design by Introspection manner and are all optional. The table below illustrates the members that a hook type may define and their influence over the behavior of the Checked type using it. In the table, hook is an alias for Hook if the type Hook does not introduce any state, or an object of type Hook otherwise. $(TABLE , $(TR $(TH Hook member) $(TH Semantics in $(D Checked!(T, Hook))) ) $(TR $(TD defaultValue ) $(TD If defined, Hook.defaultValue!T is used as the default initializer of the payload.) ) $(TR $(TD min ) $(TD If defined, Hook.min!T is used as the minimum value of the payload.) ) $(TR $(TD max ) $(TD If defined, Hook.max!T is used as the maximum value of the payload.) ) $(TR $(TD hookOpCast ) $(TD If defined, hook.hookOpCast!U(get) is forwarded to unconditionally when the payload is to be cast to type U .) ) $(TR $(TD onBadCast ) $(TD If defined and hookOpCast is $(I not) defined, onBadCast!U(get) is forwarded to when the payload is to be cast to type U and the cast would lose information or force a change of sign.) ) $(TR $(TD hookOpEquals ) $(TD If defined, $(D hook.hookOpEquals(get, rhs)) is forwarded to unconditionally when the payload is compared for equality against value rhs of integral, floating point, or Boolean type.) ) $(TR $(TD hookOpCmp ) $(TD If defined, $(D hook.hookOpCmp(get, rhs)) is forwarded to unconditionally when the payload is compared for ordering against value rhs of integral, floating point, or Boolean type.) ) $(TR $(TD hookOpUnary ) $(TD If defined, hook.hookOpUnary!op(get) (where op is the operator symbol) is forwarded to for unary operators - and ~ . In addition, for unary operators ++ and -- , hook.hookOpUnary!op(payload) is called, where payload is a reference to the value wrapped by Checked so the hook can change it.) ) $(TR $(TD hookOpBinary ) $(TD If defined, $(D hook.hookOpBinary!op(get, rhs)) (where op is the operator symbol and rhs is the right-hand side operand) is forwarded to unconditionally for binary operators + , - , * , / , % , ^^ , & , | , ^ , << , >> , and >>> .) ) $(TR $(TD hookOpBinaryRight ) $(TD If defined, $(D hook.hookOpBinaryRight!op(lhs, get)) (where op is the operator symbol and lhs is the left-hand side operand) is forwarded to unconditionally for binary operators + , - , * , / , % , ^^ , & , | , ^ , << , >> , and >>> .) ) $(TR $(TD onOverflow ) $(TD If defined, hook.onOverflow!op(get) is forwarded to for unary operators that overflow but only if hookOpUnary is not defined. Unary ~ does not overflow; unary - overflows only when the most negative value of a signed type is negated, and the result of the hook call is returned. When the increment or decrement operators overflow, the payload is assigned the result of hook.onOverflow!op(get) . When a binary operator overflows, the result of $(D hook.onOverflow!op(get, rhs)) is returned, but only if Hook does not define hookOpBinary .) ) $(TR $(TD hookOpOpAssign ) $(TD If defined, $(D hook.hookOpOpAssign!op(payload, rhs)) (where op is the operator symbol and rhs is the right-hand side operand) is forwarded to unconditionally for binary operators += , -= , *= , /= , %= , ^^= , &= , |= , ^= , <<= , >>= , and >>>= .) ) $(TR $(TD onLowerBound ) $(TD If defined, $(D hook.onLowerBound(value, bound)) (where value is the value being assigned) is forwarded to when the result of binary operators += , -= , *= , /= , %= , ^^= , &= , |= , ^= , <<= , >>= , and >>>= is smaller than the smallest value representable by T .) ) $(TR $(TD onUpperBound ) $(TD If defined, $(D hook.onUpperBound(value, bound)) (where value is the value being assigned) is forwarded to when the result of binary operators += , -= , *= , /= , %= , ^^= , &= , |= , ^= , <<= , >>= , and >>>= is larger than the largest value representable by T .) ) $(TR $(TD hookToHash ) $(TD If defined, $(D hook.hookToHash(payload)) (where payload is a reference to the value wrapped by Checked) is forwarded to when toHash is called on a Checked type. Custom hashing can be implemented in a Hook , otherwise the built-in hashing is used.) ) ) Source: $(PHOBOSSRC std/checkedint.d) Structs Name Description Abort Force all integral errors to fail by printing an error message to stderr and then abort the program. Abort is the default second argument for Checked . Checked Checked integral type wraps an integral T and customizes its behavior with the help of a Hook type. The type wrapped must be one of the predefined integrals (unqualified), or another instance of Checked . CountOverflows ProperCompare Hook that provides arithmetically correct comparisons for equality and ordering. Comparing an object of type $(D Checked!(X, ProperCompare)) against another integral (for equality or ordering) ensures that no surprising conversions from signed to unsigned integral occur before the comparison. Using $(D Checked!(X, ProperCompare)) on either side of a comparison for equality against a floating-point number makes sure the integral can be properly converted to the floating point type, thus making sure equality is transitive. Saturate Hook that implements $(I saturation), i.e. any arithmetic operation that would overflow leaves the result at its extreme value (min or max depending on the direction of the overflow). Throw Force all integral errors to fail by throwing an exception of type Throw.CheckFailure . The message coming with the error is similar to the one printed by Warn . Warn Hook that prints to stderr a trace of all integral errors, without affecting default behavior. WithNaN Hook that reserves a special value as a \"Not a Number\" representative. For signed integrals, the reserved value is T.min . For signed integrals, the reserved value is T.max . Functions Name Description checked Convenience function that turns an integral into the corresponding Checked instance by using template argument deduction. The hook type may be specified (by default Abort ). isNaN Queries whether a $(D Checked!(T, WithNaN)) object is not a number (NaN). opChecked Defines binary operations with overflow checking for any two integral types. The result type obeys the language rules (even when they may be counterintuitive), and overflow is set if an overflow occurs (including inadvertent change of signedness, e.g. -1 is converted to uint ). Conceptually the behavior is: pow powImpl Variables Name Description valueConvertible"
  },
  "phobos/std/checkedint/Structs/Abort.html": {
    "href": "phobos/std/checkedint/Structs/Abort.html",
    "title": "Struct - Abort | Marmos Demo",
    "keywords": "Struct - Abort Module std.checkedint public struct Abort { } About Force all integral errors to fail by printing an error message to stderr and then abort the program. Abort is the default second argument for Checked ."
  },
  "phobos/std/checkedint/Structs/Checked.html": {
    "href": "phobos/std/checkedint/Structs/Checked.html",
    "title": "Struct - Checked | Marmos Demo",
    "keywords": "Struct - Checked Module std.checkedint public struct Checked { // The type of the integral subject to checking. alias Representation = <todo: marmos support pending>; // <bug: unknown> get( ) auto; // Generates a hash for `this` . If `Hook` defines `hookToHash` , the call immediately returns `hook.hookToHash(payload)` . If `Hook` does not implement `hookToHash` , but it has state, a hash will be generated for the `Hook` using the built-in function and it will be xored with the hash of the `payload` . size_t toHash( ) ; // `hook` is a member variable if it has state, or an alias for `Hook` otherwise. Hook hook; // ditto Checked!(THook) max; // Defines the minimum and maximum. These values are hookable by defining `Hook.min` and/or `Hook.max` . Checked!(THook) min; // T payload; } About Checked integral type wraps an integral T and customizes its behavior with the help of a Hook type. The type wrapped must be one of the predefined integrals (unqualified), or another instance of Checked . Params T type that is wrapped in the Checked type Hook hook type that customizes the behavior of the Checked type Aliases Name Description Representation The type of the integral subject to checking. Functions Name Description get toHash Generates a hash for this . If Hook defines hookToHash , the call immediately returns hook.hookToHash(payload) . If Hook does not implement hookToHash , but it has state, a hash will be generated for the Hook using the built-in function and it will be xored with the hash of the payload . Variables Name Description hook hook is a member variable if it has state, or an alias for Hook otherwise. max ditto min Defines the minimum and maximum. These values are hookable by defining Hook.min and/or Hook.max . payload"
  },
  "phobos/std/checkedint/Structs/CountOverflows.html": {
    "href": "phobos/std/checkedint/Structs/CountOverflows.html",
    "title": "Struct - CountOverflows | Marmos Demo",
    "keywords": "Struct - CountOverflows Module std.checkedint public struct CountOverflows { // uint calls; } Variables Name Description calls"
  },
  "phobos/std/checkedint/Structs/ProperCompare.html": {
    "href": "phobos/std/checkedint/Structs/ProperCompare.html",
    "title": "Struct - ProperCompare | Marmos Demo",
    "keywords": "Struct - ProperCompare Module std.checkedint public struct ProperCompare { } About Hook that provides arithmetically correct comparisons for equality and ordering. Comparing an object of type $(D Checked!(X, ProperCompare)) against another integral (for equality or ordering) ensures that no surprising conversions from signed to unsigned integral occur before the comparison. Using $(D Checked!(X, ProperCompare)) on either side of a comparison for equality against a floating-point number makes sure the integral can be properly converted to the floating point type, thus making sure equality is transitive."
  },
  "phobos/std/checkedint/Structs/Saturate.html": {
    "href": "phobos/std/checkedint/Structs/Saturate.html",
    "title": "Struct - Saturate | Marmos Demo",
    "keywords": "Struct - Saturate Module std.checkedint public struct Saturate { } About Hook that implements $(I saturation), i.e. any arithmetic operation that would overflow leaves the result at its extreme value (min or max depending on the direction of the overflow). Saturation is not sticky; if a value reaches its saturation value, another operation may take it back to normal range."
  },
  "phobos/std/checkedint/Structs/Throw.html": {
    "href": "phobos/std/checkedint/Structs/Throw.html",
    "title": "Struct - Throw | Marmos Demo",
    "keywords": "Struct - Throw Module std.checkedint public struct Throw { } About Force all integral errors to fail by throwing an exception of type Throw.CheckFailure . The message coming with the error is similar to the one printed by Warn ."
  },
  "phobos/std/checkedint/Structs/Warn.html": {
    "href": "phobos/std/checkedint/Structs/Warn.html",
    "title": "Struct - Warn | Marmos Demo",
    "keywords": "Struct - Warn Module std.checkedint public struct Warn { // <bug: unknown> trustedStderr( ) auto; } About Hook that prints to stderr a trace of all integral errors, without affecting default behavior. Functions Name Description trustedStderr"
  },
  "phobos/std/checkedint/Structs/WithNaN.html": {
    "href": "phobos/std/checkedint/Structs/WithNaN.html",
    "title": "Struct - WithNaN | Marmos Demo",
    "keywords": "Struct - WithNaN Module std.checkedint public struct WithNaN { } About Hook that reserves a special value as a \"Not a Number\" representative. For signed integrals, the reserved value is T.min . For signed integrals, the reserved value is T.max . The default value of a $(D Checked!(X, WithNaN)) is its NaN value, so care must be taken that all variables are explicitly initialized. Any arithmetic and logic operation involving at least on NaN becomes NaN itself. All of $(D a == b), $(D a < b), $(D a > b), $(D a <= b), $(D a >= b) yield false if at least one of a and b is NaN."
  },
  "phobos/std/checkedint/Warn/Functions/trustedStderr.html": {
    "href": "phobos/std/checkedint/Warn/Functions/trustedStderr.html",
    "title": "Overloads for - trustedStderr | Marmos Demo",
    "keywords": "Overloads for - trustedStderr Module std.checkedint Parent Warn trustedStderr() <bug: unknown> trustedStderr( ) auto"
  },
  "phobos/std/compiler/Overview.html": {
    "href": "phobos/std/compiler/Overview.html",
    "title": "Module - std.compiler | Marmos Demo",
    "keywords": "Module - std.compiler About Identify the compiler used and its various features. Copyright: Copyright The D Language Foundation 2000 - 2011. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP digitalmars.com, Walter Bright), Alex Rønne Petersen Source: $(PHOBOSSRC std/compiler.d) Variables Name Description D_major The version of the D Programming Language Specification supported by the compiler. D_minor name Vendor specific string naming the compiler, for example: \"Digital Mars D\". vendor Which vendor produced this compiler. version_major The vendor specific version number, as in version_major.version_minor version_minor ditto"
  },
  "phobos/std/complex/Complex/Functions/toNative.html": {
    "href": "phobos/std/complex/Complex/Functions/toNative.html",
    "title": "Overloads for - toNative | Marmos Demo",
    "keywords": "Overloads for - toNative Module std.complex Parent Complex toNative() <bug: unknown> toNative( ) auto Returns a complex number instance that correponds in size and in ABI to the associated C compiler's _Complex type."
  },
  "phobos/std/complex/Complex/Functions/toString.html": {
    "href": "phobos/std/complex/Complex/Functions/toString.html",
    "title": "Overloads for - toString | Marmos Demo",
    "keywords": "Overloads for - toString Module std.complex Parent Complex toString() string toString( ) Converts the complex number to a string representation. The second form of this function is usually not called directly; instead, it is used via $(REF format, std,string), as shown in the examples below. Supported format characters are 'e', 'f', 'g', 'a', and 's'. See the $(MREF std, format) and $(REF format, std,string) documentation for more information."
  },
  "phobos/std/complex/Functions/abs.html": {
    "href": "phobos/std/complex/Functions/abs.html",
    "title": "Overloads for - abs | Marmos Demo",
    "keywords": "Overloads for - abs Module std.complex abs(z) T abs( Complex!(T) z ) Params: z = A complex number. Returns: The absolute value (or modulus) of z ."
  },
  "phobos/std/complex/Functions/acos.html": {
    "href": "phobos/std/complex/Functions/acos.html",
    "title": "Overloads for - acos | Marmos Demo",
    "keywords": "Overloads for - acos Module std.complex acos(z) Complex!(T) acos( Complex!(T) z ) ditto"
  },
  "phobos/std/complex/Functions/acosh.html": {
    "href": "phobos/std/complex/Functions/acosh.html",
    "title": "Overloads for - acosh | Marmos Demo",
    "keywords": "Overloads for - acosh Module std.complex acosh(z) Complex!(T) acosh( Complex!(T) z ) ditto"
  },
  "phobos/std/complex/Functions/arg.html": {
    "href": "phobos/std/complex/Functions/arg.html",
    "title": "Overloads for - arg | Marmos Demo",
    "keywords": "Overloads for - arg Module std.complex arg(z) T arg( Complex!(T) z ) Params: z = A complex number. Returns: The argument (or phase) of z ."
  },
  "phobos/std/complex/Functions/asin.html": {
    "href": "phobos/std/complex/Functions/asin.html",
    "title": "Overloads for - asin | Marmos Demo",
    "keywords": "Overloads for - asin Module std.complex asin(z) Complex!(T) asin( Complex!(T) z ) Inverse trigonometric functions on complex numbers. Params: z = A complex number. Returns: The arcsine, arccosine and arctangent of z , respectively."
  },
  "phobos/std/complex/Functions/asinh.html": {
    "href": "phobos/std/complex/Functions/asinh.html",
    "title": "Overloads for - asinh | Marmos Demo",
    "keywords": "Overloads for - asinh Module std.complex asinh(z) Complex!(T) asinh( Complex!(T) z ) Inverse hyperbolic trigonometric functions on complex numbers. Params: z = A complex number. Returns: The hyperbolic arcsine, arccosine and arctangent of z , respectively."
  },
  "phobos/std/complex/Functions/atan.html": {
    "href": "phobos/std/complex/Functions/atan.html",
    "title": "Overloads for - atan | Marmos Demo",
    "keywords": "Overloads for - atan Module std.complex atan(z) Complex!(T) atan( Complex!(T) z ) ditto"
  },
  "phobos/std/complex/Functions/atanh.html": {
    "href": "phobos/std/complex/Functions/atanh.html",
    "title": "Overloads for - atanh | Marmos Demo",
    "keywords": "Overloads for - atanh Module std.complex atanh(z) Complex!(T) atanh( Complex!(T) z ) ditto"
  },
  "phobos/std/complex/Functions/ceqrel.html": {
    "href": "phobos/std/complex/Functions/ceqrel.html",
    "title": "Overloads for - ceqrel | Marmos Demo",
    "keywords": "Overloads for - ceqrel Module std.complex ceqrel(x, y) int ceqrel( Complex!(T) x, Complex!(T) y )"
  },
  "phobos/std/complex/Functions/complex.html": {
    "href": "phobos/std/complex/Functions/complex.html",
    "title": "Overloads for - complex | Marmos Demo",
    "keywords": "Overloads for - complex Module std.complex complex(re) <bug: unknown> complex( R re ) auto Helper function that returns a complex number with the specified real and imaginary parts. Params: R = (template parameter) type of real part of complex number I = (template parameter) type of imaginary part of complex number re = real part of complex number to be constructed im = (optional) imaginary part of complex number, 0 if omitted. Returns: Complex instance with real and imaginary parts set to the values provided as input. If neither re nor im are floating-point numbers, the return type will be Complex!double . Otherwise, the return type is deduced using $(D std.traits.CommonType!(R, I)). complex(re, im) <bug: unknown> complex( R re, I im ) auto ditto"
  },
  "phobos/std/complex/Functions/conj.html": {
    "href": "phobos/std/complex/Functions/conj.html",
    "title": "Overloads for - conj | Marmos Demo",
    "keywords": "Overloads for - conj Module std.complex conj(z) Complex!(T) conj( Complex!(T) z ) Params: z = A complex number. Returns: The complex conjugate of z ."
  },
  "phobos/std/complex/Functions/cos.html": {
    "href": "phobos/std/complex/Functions/cos.html",
    "title": "Overloads for - cos | Marmos Demo",
    "keywords": "Overloads for - cos Module std.complex cos(z) Complex!(T) cos( Complex!(T) z ) ditto"
  },
  "phobos/std/complex/Functions/cosh.html": {
    "href": "phobos/std/complex/Functions/cosh.html",
    "title": "Overloads for - cosh | Marmos Demo",
    "keywords": "Overloads for - cosh Module std.complex cosh(z) Complex!(T) cosh( Complex!(T) z ) ditto"
  },
  "phobos/std/complex/Functions/coshisinh.html": {
    "href": "phobos/std/complex/Functions/coshisinh.html",
    "title": "Overloads for - coshisinh | Marmos Demo",
    "keywords": "Overloads for - coshisinh Module std.complex coshisinh(y) Complex!(real) coshisinh( real y ) Params: y = A real number. Returns: The value of cosh(y) + i sinh(y) Note coshisinh is included here for convenience and for easy migration of code."
  },
  "phobos/std/complex/Functions/exp.html": {
    "href": "phobos/std/complex/Functions/exp.html",
    "title": "Overloads for - exp | Marmos Demo",
    "keywords": "Overloads for - exp Module std.complex exp(x) Complex!(T) exp( Complex!(T) x ) Calculates e$(SUPERSCRIPT x). Params: x = A complex number Returns: The complex base e exponential of x $(TABLE_SV $(TR $(TH x) $(TH exp(x))) $(TR \\((TD (\\)(PLUSMN)0, +0)) $(TD (1, +0))) $(TR \\((TD (any, +\\)(INFIN))) \\((TD (\\)(NAN), $(NAN)))) $(TR $(TD (any, $(NAN)) \\((TD (\\)(NAN), $(NAN))))) $(TR \\((TD (+\\)(INFIN), +0)) \\((TD (+\\)(INFIN), +0))) $(TR \\((TD (-\\)(INFIN), any)) \\((TD (\\)(PLUSMN)0, cis(x.im)))) $(TR \\((TD (+\\)(INFIN), any)) \\((TD (\\)(PLUSMN)$(INFIN), cis(x.im)))) $(TR \\((TD (-\\)(INFIN), +$(INFIN))) \\((TD (\\)(PLUSMN)0, $(PLUSMN)0))) $(TR \\((TD (+\\)(INFIN), +$(INFIN))) \\((TD (\\)(PLUSMN)$(INFIN), $(NAN)))) $(TR \\((TD (-\\)(INFIN), $(NAN))) \\((TD (\\)(PLUSMN)0, $(PLUSMN)0))) $(TR \\((TD (+\\)(INFIN), $(NAN))) \\((TD (\\)(PLUSMN)$(INFIN), $(NAN)))) $(TR \\((TD (\\)(NAN), +0)) \\((TD (\\)(NAN), +0))) $(TR \\((TD (\\)(NAN), any)) \\((TD (\\)(NAN), $(NAN)))) $(TR \\((TD (\\)(NAN), $(NAN))) \\((TD (\\)(NAN), $(NAN)))) )"
  },
  "phobos/std/complex/Functions/expi.html": {
    "href": "phobos/std/complex/Functions/expi.html",
    "title": "Overloads for - expi | Marmos Demo",
    "keywords": "Overloads for - expi Module std.complex expi(y) Complex!(real) expi( real y ) Params: y = A real number. Returns: The value of cos(y) + i sin(y). Note expi is included here for convenience and for easy migration of code."
  },
  "phobos/std/complex/Functions/fromPolar.html": {
    "href": "phobos/std/complex/Functions/fromPolar.html",
    "title": "Overloads for - fromPolar | Marmos Demo",
    "keywords": "Overloads for - fromPolar Module std.complex fromPolar(modulus, argument) Complex!(CommonType!(T, U)) fromPolar( T modulus, U argument ) Constructs a complex number given its absolute value and argument. Params: modulus = The modulus argument = The argument Returns: The complex number with the given modulus and argument."
  },
  "phobos/std/complex/Functions/log.html": {
    "href": "phobos/std/complex/Functions/log.html",
    "title": "Overloads for - log | Marmos Demo",
    "keywords": "Overloads for - log Module std.complex log(x) Complex!(T) log( Complex!(T) x ) Calculate the natural logarithm of x. The branch cut is along the negative axis. Params: x = A complex number Returns: The complex natural logarithm of x $(TABLE_SV $(TR $(TH x) $(TH log(x))) $(TR $(TD (-0, +0)) \\((TD (-\\)(INFIN), $(PI)))) $(TR $(TD (+0, +0)) \\((TD (-\\)(INFIN), +0))) $(TR \\((TD (any, +\\)(INFIN))) \\((TD (+\\)(INFIN), $(PI)/2))) $(TR $(TD (any, $(NAN))) \\((TD (\\)(NAN), $(NAN)))) $(TR \\((TD (-\\)(INFIN), any)) \\((TD (+\\)(INFIN), $(PI)))) $(TR \\((TD (+\\)(INFIN), any)) \\((TD (+\\)(INFIN), +0))) $(TR \\((TD (-\\)(INFIN), +$(INFIN))) \\((TD (+\\)(INFIN), 3$(PI)/4))) $(TR \\((TD (+\\)(INFIN), +$(INFIN))) \\((TD (+\\)(INFIN), $(PI)/4))) $(TR \\((TD (\\)(PLUSMN)$(INFIN), $(NAN))) \\((TD (+\\)(INFIN), $(NAN)))) $(TR \\((TD (\\)(NAN), any)) \\((TD (\\)(NAN), $(NAN)))) $(TR \\((TD (\\)(NAN), +$(INFIN))) \\((TD (+\\)(INFIN), $(NAN)))) $(TR \\((TD (\\)(NAN), $(NAN))) \\((TD (\\)(NAN), $(NAN)))) )"
  },
  "phobos/std/complex/Functions/log10.html": {
    "href": "phobos/std/complex/Functions/log10.html",
    "title": "Overloads for - log10 | Marmos Demo",
    "keywords": "Overloads for - log10 Module std.complex log10(x) Complex!(T) log10( Complex!(T) x ) Calculate the base-10 logarithm of x. Params: x = A complex number Returns: The complex base 10 logarithm of x"
  },
  "phobos/std/complex/Functions/norm.html": {
    "href": "phobos/std/complex/Functions/norm.html",
    "title": "Overloads for - norm | Marmos Demo",
    "keywords": "Overloads for - norm Module std.complex norm(z) T norm( Complex!(T) z ) Extracts the norm of a complex number. Params: z = A complex number Returns: The squared magnitude of z ."
  },
  "phobos/std/complex/Functions/pow.html": {
    "href": "phobos/std/complex/Functions/pow.html",
    "title": "Overloads for - pow | Marmos Demo",
    "keywords": "Overloads for - pow Module std.complex pow(x, n) Complex!(T) pow( Complex!(T) x, Int n ) Calculates x$(SUPERSCRIPT n). The branch cut is on the negative axis. Params: x = base n = exponent Returns: x raised to the power of n pow(x, n) Complex!(T) pow( Complex!(T) x, T n ) ditto pow(x, y) Complex!(T) pow( Complex!(T) x, Complex!(T) y ) ditto pow(x, n) Complex!(T) pow( T x, Complex!(T) n ) ditto"
  },
  "phobos/std/complex/Functions/proj.html": {
    "href": "phobos/std/complex/Functions/proj.html",
    "title": "Overloads for - proj | Marmos Demo",
    "keywords": "Overloads for - proj Module std.complex proj(z) Complex!(T) proj( Complex!(T) z ) Returns the projection of z onto the Riemann sphere. Params: z = A complex number Returns: The projection of z onto the Riemann sphere."
  },
  "phobos/std/complex/Functions/sin.html": {
    "href": "phobos/std/complex/Functions/sin.html",
    "title": "Overloads for - sin | Marmos Demo",
    "keywords": "Overloads for - sin Module std.complex sin(z) Complex!(T) sin( Complex!(T) z ) Trigonometric functions on complex numbers. Params: z = A complex number. Returns: The sine, cosine and tangent of z , respectively."
  },
  "phobos/std/complex/Functions/sinh.html": {
    "href": "phobos/std/complex/Functions/sinh.html",
    "title": "Overloads for - sinh | Marmos Demo",
    "keywords": "Overloads for - sinh Module std.complex sinh(z) Complex!(T) sinh( Complex!(T) z ) Hyperbolic trigonometric functions on complex numbers. Params: z = A complex number. Returns: The hyperbolic sine, cosine and tangent of z , respectively."
  },
  "phobos/std/complex/Functions/sqAbs.html": {
    "href": "phobos/std/complex/Functions/sqAbs.html",
    "title": "Overloads for - sqAbs | Marmos Demo",
    "keywords": "Overloads for - sqAbs Module std.complex sqAbs(z) T sqAbs( Complex!(T) z ) Params z Complex!(T) A complex number. x <parameter not found> A real number. x = A real number. Returns: The squared modulus of z . For genericity, if called on a real number, returns its square. sqAbs(x) T sqAbs( T x ) ditto"
  },
  "phobos/std/complex/Functions/sqrt.html": {
    "href": "phobos/std/complex/Functions/sqrt.html",
    "title": "Overloads for - sqrt | Marmos Demo",
    "keywords": "Overloads for - sqrt Module std.complex sqrt(z) Complex!(T) sqrt( Complex!(T) z ) Params: z = A complex number. Returns: The square root of z ."
  },
  "phobos/std/complex/Functions/tan.html": {
    "href": "phobos/std/complex/Functions/tan.html",
    "title": "Overloads for - tan | Marmos Demo",
    "keywords": "Overloads for - tan Module std.complex tan(z) Complex!(T) tan( Complex!(T) z ) ditto"
  },
  "phobos/std/complex/Functions/tanh.html": {
    "href": "phobos/std/complex/Functions/tanh.html",
    "title": "Overloads for - tanh | Marmos Demo",
    "keywords": "Overloads for - tanh Module std.complex tanh(z) Complex!(T) tanh( Complex!(T) z ) ditto"
  },
  "phobos/std/complex/Overview.html": {
    "href": "phobos/std/complex/Overview.html",
    "title": "Module - std.complex | Marmos Demo",
    "keywords": "Module - std.complex About This module contains the $(LREF Complex) type, which is used to represent complex numbers, along with related mathematical operations and functions. $(LREF Complex) will eventually $(DDLINK deprecate, Deprecated Features, replace) the built-in types cfloat , cdouble , creal , ifloat , idouble , and ireal . Macros: TABLE_SV = Special Values $0 PLUSMN = ± NAN = $(RED NAN) INFIN = ∞ PI = π Authors: Lars Tandle Kyllingstad, Don Clugston Copyright: Copyright (c) 2010, Lars T. Kyllingstad. License: $(HTTP boost.org/LICENSE_1_0.txt, Boost License 1.0) Source: $(PHOBOSSRC std/complex.d) Aliases Name Description Complex Structs Name Description Complex A complex number parametrised by a type T , which must be either float , double or real . Functions Name Description abs Params: z = A complex number. Returns: The absolute value (or modulus) of z . acos ditto acosh ditto arg Params: z = A complex number. Returns: The argument (or phase) of z . asin Inverse trigonometric functions on complex numbers. asinh Inverse hyperbolic trigonometric functions on complex numbers. atan ditto atanh ditto ceqrel complex Helper function that returns a complex number with the specified real and imaginary parts. conj Params: z = A complex number. Returns: The complex conjugate of z . cos ditto cosh ditto coshisinh Params: y = A real number. Returns: The value of cosh(y) + i sinh(y) exp Calculates e$(SUPERSCRIPT x). Params: x = A complex number Returns: The complex base e exponential of x expi Params: y = A real number. Returns: The value of cos(y) + i sin(y). fromPolar Constructs a complex number given its absolute value and argument. Params: modulus = The modulus argument = The argument Returns: The complex number with the given modulus and argument. log Calculate the natural logarithm of x. The branch cut is along the negative axis. Params: x = A complex number Returns: The complex natural logarithm of x log10 Calculate the base-10 logarithm of x. Params: x = A complex number Returns: The complex base 10 logarithm of x norm Extracts the norm of a complex number. Params: z = A complex number Returns: The squared magnitude of z . pow Calculates x$(SUPERSCRIPT n). The branch cut is on the negative axis. Params: x = base n = exponent Returns: x raised to the power of n proj Returns the projection of z onto the Riemann sphere. Params: z = A complex number Returns: The projection of z onto the Riemann sphere. sin Trigonometric functions on complex numbers. sinh Hyperbolic trigonometric functions on complex numbers. sqAbs sqrt Params: z = A complex number. Returns: The square root of z . tan ditto tanh ditto"
  },
  "phobos/std/complex/Structs/Complex.html": {
    "href": "phobos/std/complex/Structs/Complex.html",
    "title": "Struct - Complex | Marmos Demo",
    "keywords": "Struct - Complex Module std.complex public struct Complex { // Returns a complex number instance that correponds in size and in ABI to the associated C compiler's `_Complex` type. <bug: unknown> toNative( ) auto; // Converts the complex number to a string representation. string toString( ) ; // The imaginary part of the number. T im; // The real part of the number. T re; } About A complex number parametrised by a type T , which must be either float , double or real . Functions Name Description toNative Returns a complex number instance that correponds in size and in ABI to the associated C compiler's _Complex type. toString Converts the complex number to a string representation. Variables Name Description im The imaginary part of the number. re The real part of the number."
  },
  "phobos/std/concurrency/Classes/FiberScheduler.html": {
    "href": "phobos/std/concurrency/Classes/FiberScheduler.html",
    "title": "Class - FiberScheduler | Marmos Demo",
    "keywords": "Class - FiberScheduler Module std.concurrency public class FiberScheduler { // Creates a new `Fiber` which calls the given delegate. void create( <bug: unknown> op ) ; // void dispatch( ) ; // Returns a `Condition` analog that yields when wait or notify is called. Condition newCondition( Mutex m ) ; // This created a new `Fiber` for the supplied op and adds it to the dispatch list. void spawn( <bug: unknown> op ) ; // This creates a new `Fiber` for the supplied op and then starts the dispatcher. void start( <bug: unknown> op ) ; // Returns an appropriate `ThreadInfo` instance. ThreadInfo thisInfo( ) ; // If the caller is a scheduled `Fiber` , this yields execution to another scheduled `Fiber` . void yield( ) ; // <bug: unknown> m_fibers; // size_t m_pos; } About An example Scheduler using $(MREF_ALTTEXT Fiber s, core, thread, fiber). This is an example scheduler that creates a new Fiber per call to spawn and multiplexes the execution of all fibers within the main thread. Functions Name Description create Creates a new Fiber which calls the given delegate. dispatch newCondition Returns a Condition analog that yields when wait or notify is called. spawn This created a new Fiber for the supplied op and adds it to the dispatch list. start This creates a new Fiber for the supplied op and then starts the dispatcher. thisInfo Returns an appropriate ThreadInfo instance. yield If the caller is a scheduled Fiber , this yields execution to another scheduled Fiber . Variables Name Description m_fibers m_pos"
  },
  "phobos/std/concurrency/Classes/Generator.html": {
    "href": "phobos/std/concurrency/Classes/Generator.html",
    "title": "Class - Generator | Marmos Demo",
    "keywords": "Class - Generator Module std.concurrency public class Generator { // Returns true if the generator is empty. bool empty( ) final; // Returns the most recently generated value by shallow copy. T front( ) final; // Returns the most recently generated value without executing a copy contructor. Will not compile for element types defining a postblit, because `Generator` does not return by reference. T moveFront( ) final; // int opApply( <bug: unknown> loopBody ) final; // int opApply( <bug: unknown> loopBody ) final; // Obtains the next value from the underlying function. void popFront( ) final; // <bug: unknown> m_value; } About A Generator is a $(MREF_ALTTEXT Fiber, core, thread, fiber) that periodically returns values of type T to the caller via yield . This is represented as an InputRange. Functions Name Description empty Returns true if the generator is empty. front Returns the most recently generated value by shallow copy. moveFront Returns the most recently generated value without executing a copy contructor. Will not compile for element types defining a postblit, because Generator does not return by reference. opApply popFront Obtains the next value from the underlying function. Variables Name Description m_value"
  },
  "phobos/std/concurrency/Classes/LinkTerminated.html": {
    "href": "phobos/std/concurrency/Classes/LinkTerminated.html",
    "title": "Class - LinkTerminated | Marmos Demo",
    "keywords": "Class - LinkTerminated Module std.concurrency public class LinkTerminated { // Tid tid; } About Thrown if a linked thread has terminated. Variables Name Description tid"
  },
  "phobos/std/concurrency/Classes/MailboxFull.html": {
    "href": "phobos/std/concurrency/Classes/MailboxFull.html",
    "title": "Class - MailboxFull | Marmos Demo",
    "keywords": "Class - MailboxFull Module std.concurrency public class MailboxFull { // Tid tid; } About Thrown on mailbox crowding if the mailbox is configured with OnCrowding.throwException . Variables Name Description tid"
  },
  "phobos/std/concurrency/Classes/MessageBox.html": {
    "href": "phobos/std/concurrency/Classes/MessageBox.html",
    "title": "Class - MessageBox | Marmos Demo",
    "keywords": "Class - MessageBox Module std.concurrency public class MessageBox { // alias ListT = <todo: marmos support pending>; // alias OnMaxFn = <todo: marmos support pending>; // void close( ) final; // bool isClosed( ) final; // bool isControlMsg( Message msg ) ; // bool isLinkDeadMsg( Message msg ) ; // bool isPriorityMsg( Message msg ) ; // bool mboxFull( ) ; // void put( Message msg ) final; // void setMaxMsgs( size_t num, <bug: unknown> call ) final; // void updateMsgCount( ) ; // bool m_closed; // ListT m_localBox; // size_t m_localMsgs; // ListT m_localPty; // Mutex m_lock; // size_t m_maxMsgs; // Condition m_notFull; // OnMaxFn m_onMaxMsgs; // Condition m_putMsg; // size_t m_putQueue; // ListT m_sharedBox; // ListT m_sharedPty; } Aliases Name Description ListT OnMaxFn Functions Name Description close isClosed isControlMsg isLinkDeadMsg isPriorityMsg mboxFull put setMaxMsgs updateMsgCount Variables Name Description m_closed m_localBox m_localMsgs m_localPty m_lock m_maxMsgs m_notFull m_onMaxMsgs m_putMsg m_putQueue m_sharedBox m_sharedPty"
  },
  "phobos/std/concurrency/Classes/MessageMismatch.html": {
    "href": "phobos/std/concurrency/Classes/MessageMismatch.html",
    "title": "Class - MessageMismatch | Marmos Demo",
    "keywords": "Class - MessageMismatch Module std.concurrency public class MessageMismatch { } About Thrown on calls to $(LREF receiveOnly) if a message other than the type the receiving thread expected is sent."
  },
  "phobos/std/concurrency/Classes/OwnerTerminated.html": {
    "href": "phobos/std/concurrency/Classes/OwnerTerminated.html",
    "title": "Class - OwnerTerminated | Marmos Demo",
    "keywords": "Class - OwnerTerminated Module std.concurrency public class OwnerTerminated { // Tid tid; } About Thrown on calls to $(LREF receive) if the thread that spawned the receiving thread has terminated and no more messages exist. Variables Name Description tid"
  },
  "phobos/std/concurrency/Classes/PriorityMessageException.html": {
    "href": "phobos/std/concurrency/Classes/PriorityMessageException.html",
    "title": "Class - PriorityMessageException | Marmos Demo",
    "keywords": "Class - PriorityMessageException Module std.concurrency public class PriorityMessageException { // The message that was sent. Variant message; } About Thrown if a message was sent to a thread via $(REF prioritySend, std,concurrency) and the receiver does not have a handler for a message of this type. Variables Name Description message The message that was sent."
  },
  "phobos/std/concurrency/Classes/ThreadScheduler.html": {
    "href": "phobos/std/concurrency/Classes/ThreadScheduler.html",
    "title": "Class - ThreadScheduler | Marmos Demo",
    "keywords": "Class - ThreadScheduler Module std.concurrency public class ThreadScheduler { // Creates a new `Condition` variable. No custom behavior is needed here. Condition newCondition( Mutex m ) ; // Creates a new kernel thread and assigns it to run the supplied op. void spawn( <bug: unknown> op ) ; // This simply runs op directly, since no real scheduling is needed by this approach. void start( <bug: unknown> op ) ; // Returns `ThreadInfo.thisInfo` , since it is a thread-local instance of `ThreadInfo` , which is the correct behavior for this scheduler. ThreadInfo thisInfo( ) ; // This scheduler does no explicit multiplexing, so this is a no-op. void yield( ) ; } About An example Scheduler using kernel threads. This is an example Scheduler that mirrors the default scheduling behavior of creating one kernel thread per call to spawn. It is fully functional and may be instantiated and used, but is not a necessary part of the default functioning of this module. Functions Name Description newCondition Creates a new Condition variable. No custom behavior is needed here. spawn Creates a new kernel thread and assigns it to run the supplied op. start This simply runs op directly, since no real scheduling is needed by this approach. thisInfo Returns ThreadInfo.thisInfo , since it is a thread-local instance of ThreadInfo , which is the correct behavior for this scheduler. yield This scheduler does no explicit multiplexing, so this is a no-op."
  },
  "phobos/std/concurrency/Classes/TidMissingException.html": {
    "href": "phobos/std/concurrency/Classes/TidMissingException.html",
    "title": "Class - TidMissingException | Marmos Demo",
    "keywords": "Class - TidMissingException Module std.concurrency public class TidMissingException { } About Thrown when a Tid is missing, e.g. when $(LREF ownerTid) doesn't find an owner thread."
  },
  "phobos/std/concurrency/FiberScheduler/Functions/create.html": {
    "href": "phobos/std/concurrency/FiberScheduler/Functions/create.html",
    "title": "Overloads for - create | Marmos Demo",
    "keywords": "Overloads for - create Module std.concurrency Parent FiberScheduler create(op) void create( <bug: unknown> op ) Creates a new Fiber which calls the given delegate. Params op <bug: unknown> The delegate the fiber should call"
  },
  "phobos/std/concurrency/FiberScheduler/Functions/dispatch.html": {
    "href": "phobos/std/concurrency/FiberScheduler/Functions/dispatch.html",
    "title": "Overloads for - dispatch | Marmos Demo",
    "keywords": "Overloads for - dispatch Module std.concurrency Parent FiberScheduler dispatch() void dispatch( )"
  },
  "phobos/std/concurrency/FiberScheduler/Functions/newCondition.html": {
    "href": "phobos/std/concurrency/FiberScheduler/Functions/newCondition.html",
    "title": "Overloads for - newCondition | Marmos Demo",
    "keywords": "Overloads for - newCondition Module std.concurrency Parent FiberScheduler newCondition(m) Condition newCondition( Mutex m ) Returns a Condition analog that yields when wait or notify is called. Bug For the default implementation, notifyAll will behave like notify . Params m Mutex A Mutex to use for locking if the condition needs to be waited on or notified from multiple Thread s. If null , no Mutex will be used and it is assumed that the Condition is only waited on/notified from one Thread ."
  },
  "phobos/std/concurrency/FiberScheduler/Functions/spawn.html": {
    "href": "phobos/std/concurrency/FiberScheduler/Functions/spawn.html",
    "title": "Overloads for - spawn | Marmos Demo",
    "keywords": "Overloads for - spawn Module std.concurrency Parent FiberScheduler spawn(op) void spawn( <bug: unknown> op ) This created a new Fiber for the supplied op and adds it to the dispatch list."
  },
  "phobos/std/concurrency/FiberScheduler/Functions/start.html": {
    "href": "phobos/std/concurrency/FiberScheduler/Functions/start.html",
    "title": "Overloads for - start | Marmos Demo",
    "keywords": "Overloads for - start Module std.concurrency Parent FiberScheduler start(op) void start( <bug: unknown> op ) This creates a new Fiber for the supplied op and then starts the dispatcher."
  },
  "phobos/std/concurrency/FiberScheduler/Functions/thisInfo.html": {
    "href": "phobos/std/concurrency/FiberScheduler/Functions/thisInfo.html",
    "title": "Overloads for - thisInfo | Marmos Demo",
    "keywords": "Overloads for - thisInfo Module std.concurrency Parent FiberScheduler thisInfo() ThreadInfo thisInfo( ) Returns an appropriate ThreadInfo instance. Returns a ThreadInfo instance specific to the calling Fiber if the Fiber was created by this dispatcher, otherwise it returns ThreadInfo.thisInfo ."
  },
  "phobos/std/concurrency/FiberScheduler/Functions/yield.html": {
    "href": "phobos/std/concurrency/FiberScheduler/Functions/yield.html",
    "title": "Overloads for - yield | Marmos Demo",
    "keywords": "Overloads for - yield Module std.concurrency Parent FiberScheduler yield() void yield( ) If the caller is a scheduled Fiber , this yields execution to another scheduled Fiber ."
  },
  "phobos/std/concurrency/Functions/checkops.html": {
    "href": "phobos/std/concurrency/Functions/checkops.html",
    "title": "Overloads for - checkops | Marmos Demo",
    "keywords": "Overloads for - checkops Module std.concurrency checkops(ops) void checkops( T ops )"
  },
  "phobos/std/concurrency/Functions/hasLocalAliasing.html": {
    "href": "phobos/std/concurrency/Functions/hasLocalAliasing.html",
    "title": "Overloads for - hasLocalAliasing | Marmos Demo",
    "keywords": "Overloads for - hasLocalAliasing Module std.concurrency hasLocalAliasing() bool hasLocalAliasing( )"
  },
  "phobos/std/concurrency/Functions/initOnce.html": {
    "href": "phobos/std/concurrency/Functions/initOnce.html",
    "title": "Overloads for - initOnce | Marmos Demo",
    "keywords": "Overloads for - initOnce Module std.concurrency initOnce(init) <bug: unknown> initOnce( <bug: unknown> init ) auto Initializes $(D_PARAM var) with the lazy $(D_PARAM init) value in a thread-safe manner. The implementation guarantees that all threads simultaneously calling initOnce with the same $(D_PARAM var) argument block until $(D_PARAM var) is fully initialized. All side-effects of $(D_PARAM init) are globally visible afterwards. Params var <parameter not found> The variable to initialize init <bug: unknown> The lazy initializer value Returns A reference to the initialized variable initOnce(init, mutex) <bug: unknown> initOnce( <bug: unknown> init, Mutex mutex ) auto Same as above, but takes a separate mutex instead of sharing one among all initOnce instances. This should be used to avoid dead-locks when the $(D_PARAM init) expression waits for the result of another thread that might also call initOnce. Use with care. Params var <parameter not found> The variable to initialize init <bug: unknown> The lazy initializer value mutex Mutex A mutex to prevent race conditions Returns A reference to the initialized variable initOnce(init, mutex) <bug: unknown> initOnce( <bug: unknown> init, Mutex mutex ) auto ditto"
  },
  "phobos/std/concurrency/Functions/initOnceLock.html": {
    "href": "phobos/std/concurrency/Functions/initOnceLock.html",
    "title": "Overloads for - initOnceLock | Marmos Demo",
    "keywords": "Overloads for - initOnceLock Module std.concurrency initOnceLock() Mutex initOnceLock( )"
  },
  "phobos/std/concurrency/Functions/locate.html": {
    "href": "phobos/std/concurrency/Functions/locate.html",
    "title": "Overloads for - locate | Marmos Demo",
    "keywords": "Overloads for - locate Module std.concurrency locate(name) Tid locate( string name ) Gets the Tid associated with name. Params name string The name to locate within the registry. Returns The associated Tid or Tid.init if name is not registered."
  },
  "phobos/std/concurrency/Functions/onCrowdingBlock.html": {
    "href": "phobos/std/concurrency/Functions/onCrowdingBlock.html",
    "title": "Overloads for - onCrowdingBlock | Marmos Demo",
    "keywords": "Overloads for - onCrowdingBlock Module std.concurrency onCrowdingBlock(tid) bool onCrowdingBlock( Tid tid )"
  },
  "phobos/std/concurrency/Functions/onCrowdingIgnore.html": {
    "href": "phobos/std/concurrency/Functions/onCrowdingIgnore.html",
    "title": "Overloads for - onCrowdingIgnore | Marmos Demo",
    "keywords": "Overloads for - onCrowdingIgnore Module std.concurrency onCrowdingIgnore(tid) bool onCrowdingIgnore( Tid tid )"
  },
  "phobos/std/concurrency/Functions/onCrowdingThrow.html": {
    "href": "phobos/std/concurrency/Functions/onCrowdingThrow.html",
    "title": "Overloads for - onCrowdingThrow | Marmos Demo",
    "keywords": "Overloads for - onCrowdingThrow Module std.concurrency onCrowdingThrow(tid) bool onCrowdingThrow( Tid tid )"
  },
  "phobos/std/concurrency/Functions/ownerTid.html": {
    "href": "phobos/std/concurrency/Functions/ownerTid.html",
    "title": "Overloads for - ownerTid | Marmos Demo",
    "keywords": "Overloads for - ownerTid Module std.concurrency ownerTid() Tid ownerTid( ) Return the Tid of the thread which spawned the caller's thread. Throws: A TidMissingException exception if there is no owner thread."
  },
  "phobos/std/concurrency/Functions/prioritySend.html": {
    "href": "phobos/std/concurrency/Functions/prioritySend.html",
    "title": "Overloads for - prioritySend | Marmos Demo",
    "keywords": "Overloads for - prioritySend Module std.concurrency prioritySend(tid, vals) void prioritySend( Tid tid, T vals ) Places the values as a message on the front of tid's message queue. Send a message to tid but place it at the front of tid 's message queue instead of at the back. This function is typically used for out-of-band communication, to signal exceptional conditions, etc."
  },
  "phobos/std/concurrency/Functions/receive.html": {
    "href": "phobos/std/concurrency/Functions/receive.html",
    "title": "Overloads for - receive | Marmos Demo",
    "keywords": "Overloads for - receive Module std.concurrency receive(ops) void receive( T ops ) Receives a message from another thread. Receive a message from another thread, or block if no messages of the specified types are available. This function works by pattern matching a message against a set of delegates and executing the first match found. If a delegate that accepts a $(REF Variant, std,variant) is included as the last argument to receive , it will match any message that was not matched by an earlier delegate. If more than one argument is sent, the Variant will contain a $(REF Tuple, std,typecons) of all values sent. Params ops T Variadic list of function pointers and delegates. Entries in this list must not occlude later entries. Throws: $(LREF OwnerTerminated) when the sending thread was terminated."
  },
  "phobos/std/concurrency/Functions/receiveFunction.html": {
    "href": "phobos/std/concurrency/Functions/receiveFunction.html",
    "title": "Overloads for - receiveFunction | Marmos Demo",
    "keywords": "Overloads for - receiveFunction Module std.concurrency receiveFunction(x) void receiveFunction( int x )"
  },
  "phobos/std/concurrency/Functions/receiveOnly.html": {
    "href": "phobos/std/concurrency/Functions/receiveOnly.html",
    "title": "Overloads for - receiveOnly | Marmos Demo",
    "keywords": "Overloads for - receiveOnly Module std.concurrency receiveOnly() receiveOnlyRet!(T) receiveOnly( ) Receives only messages with arguments of the specified types. Params T <parameter not found> Variadic list of types to be received. Returns: The received message. If T has more than one entry, the message will be packed into a $(REF Tuple, std,typecons). Throws: $(LREF MessageMismatch) if a message of types other than T is received, $(LREF OwnerTerminated) when the sending thread was terminated."
  },
  "phobos/std/concurrency/Functions/receiveTimeout.html": {
    "href": "phobos/std/concurrency/Functions/receiveTimeout.html",
    "title": "Overloads for - receiveTimeout | Marmos Demo",
    "keywords": "Overloads for - receiveTimeout Module std.concurrency receiveTimeout(duration, ops) bool receiveTimeout( Duration duration, T ops ) Receives a message from another thread and gives up if no match arrives within a specified duration. Receive a message from another thread, or block until duration exceeds, if no messages of the specified types are available. This function works by pattern matching a message against a set of delegates and executing the first match found. If a delegate that accepts a $(REF Variant, std,variant) is included as the last argument, it will match any message that was not matched by an earlier delegate. If more than one argument is sent, the Variant will contain a $(REF Tuple, std,typecons) of all values sent. Params duration Duration Duration, how long to wait. If duration is negative, won't wait at all. ops T Variadic list of function pointers and delegates. Entries in this list must not occlude later entries. Returns: true if it received a message and false if it timed out waiting for one. Throws: $(LREF OwnerTerminated) when the sending thread was terminated."
  },
  "phobos/std/concurrency/Functions/register.html": {
    "href": "phobos/std/concurrency/Functions/register.html",
    "title": "Overloads for - register | Marmos Demo",
    "keywords": "Overloads for - register Module std.concurrency register(name, tid) bool register( string name, Tid tid ) Associates name with tid. Associates name with tid in a process-local map. When the thread represented by tid terminates, any names associated with it will be automatically unregistered. Params name string The name to associate with tid. tid Tid The tid register by name. Returns true if the name is available and tid is not known to represent a defunct thread."
  },
  "phobos/std/concurrency/Functions/registryLock.html": {
    "href": "phobos/std/concurrency/Functions/registryLock.html",
    "title": "Overloads for - registryLock | Marmos Demo",
    "keywords": "Overloads for - registryLock Module std.concurrency registryLock() Mutex registryLock( )"
  },
  "phobos/std/concurrency/Functions/send.html": {
    "href": "phobos/std/concurrency/Functions/send.html",
    "title": "Overloads for - send | Marmos Demo",
    "keywords": "Overloads for - send Module std.concurrency send(tid, vals) void send( Tid tid, T vals ) Places the values as a message at the back of tid's message queue. Sends the supplied value to the thread represented by tid. As with $(REF spawn, std,concurrency), T must not have unshared aliasing."
  },
  "phobos/std/concurrency/Functions/setMaxMailboxSize.html": {
    "href": "phobos/std/concurrency/Functions/setMaxMailboxSize.html",
    "title": "Overloads for - setMaxMailboxSize | Marmos Demo",
    "keywords": "Overloads for - setMaxMailboxSize Module std.concurrency setMaxMailboxSize(tid, messages, doThis) void setMaxMailboxSize( Tid tid, size_t messages, OnCrowding doThis ) Sets a maximum mailbox size. Sets a limit on the maximum number of user messages allowed in the mailbox. If this limit is reached, the caller attempting to add a new message will execute the behavior specified by doThis. If messages is zero, the mailbox is unbounded. Params tid Tid The Tid of the thread for which this limit should be set. messages size_t The maximum number of messages or zero if no limit. doThis OnCrowding The behavior executed when a message is sent to a full mailbox. setMaxMailboxSize(tid, messages, onCrowdingDoThis) void setMaxMailboxSize( Tid tid, size_t messages, <bug: unknown> onCrowdingDoThis ) Sets a maximum mailbox size. Sets a limit on the maximum number of user messages allowed in the mailbox. If this limit is reached, the caller attempting to add a new message will execute onCrowdingDoThis. If messages is zero, the mailbox is unbounded. Params tid Tid The Tid of the thread for which this limit should be set. messages size_t The maximum number of messages or zero if no limit. onCrowdingDoThis <bug: unknown> The routine called when a message is sent to a full mailbox."
  },
  "phobos/std/concurrency/Functions/spawn.html": {
    "href": "phobos/std/concurrency/Functions/spawn.html",
    "title": "Overloads for - spawn | Marmos Demo",
    "keywords": "Overloads for - spawn Module std.concurrency spawn(fn, args) Tid spawn( F fn, T args ) Starts fn(args) in a new logical thread. Executes the supplied function in a new logical thread represented by Tid . The calling thread is designated as the owner of the new thread. When the owner thread terminates an OwnerTerminated message will be sent to the new thread, causing an OwnerTerminated exception to be thrown on receive() . Params fn F The function to execute. args T Arguments to the function. Returns A Tid representing the new logical thread. Notes args must not have unshared aliasing. In other words, all arguments to fn must either be shared or immutable or have no pointer indirection. This is necessary for enforcing isolation among threads. Similarly, if fn is a delegate, it must not have unshared aliases, meaning fn must be either shared or immutable ."
  },
  "phobos/std/concurrency/Functions/spawnLinked.html": {
    "href": "phobos/std/concurrency/Functions/spawnLinked.html",
    "title": "Overloads for - spawnLinked | Marmos Demo",
    "keywords": "Overloads for - spawnLinked Module std.concurrency spawnLinked(fn, args) Tid spawnLinked( F fn, T args ) Starts fn(args) in a logical thread and will receive a LinkTerminated message when the operation terminates. Executes the supplied function in a new logical thread represented by Tid . This new thread is linked to the calling thread so that if either it or the calling thread terminates a LinkTerminated message will be sent to the other, causing a LinkTerminated exception to be thrown on receive() . The owner relationship from spawn() is preserved as well, so if the link between threads is broken, owner termination will still result in an OwnerTerminated exception to be thrown on receive() . Params fn F The function to execute. args T Arguments to the function. Returns A Tid representing the new thread."
  },
  "phobos/std/concurrency/Functions/thisInfo.html": {
    "href": "phobos/std/concurrency/Functions/thisInfo.html",
    "title": "Overloads for - thisInfo | Marmos Demo",
    "keywords": "Overloads for - thisInfo Module std.concurrency thisInfo() ThreadInfo thisInfo( )"
  },
  "phobos/std/concurrency/Functions/thisTid.html": {
    "href": "phobos/std/concurrency/Functions/thisTid.html",
    "title": "Overloads for - thisTid | Marmos Demo",
    "keywords": "Overloads for - thisTid Module std.concurrency thisTid() Tid thisTid( ) Returns: The Tid of the caller's thread."
  },
  "phobos/std/concurrency/Functions/unregister.html": {
    "href": "phobos/std/concurrency/Functions/unregister.html",
    "title": "Overloads for - unregister | Marmos Demo",
    "keywords": "Overloads for - unregister Module std.concurrency unregister(name) bool unregister( string name ) Removes the registered name associated with a tid. Params name string The name to unregister. Returns true if the name is registered, false if not."
  },
  "phobos/std/concurrency/Functions/unregisterMe.html": {
    "href": "phobos/std/concurrency/Functions/unregisterMe.html",
    "title": "Overloads for - unregisterMe | Marmos Demo",
    "keywords": "Overloads for - unregisterMe Module std.concurrency unregisterMe(me) void unregisterMe( ThreadInfo me )"
  },
  "phobos/std/concurrency/Functions/yield.html": {
    "href": "phobos/std/concurrency/Functions/yield.html",
    "title": "Overloads for - yield | Marmos Demo",
    "keywords": "Overloads for - yield Module std.concurrency yield() void yield( ) If the caller is a Fiber and is not a $(LREF Generator), this function will call scheduler.yield() or Fiber.yield() , as appropriate. yield(value) void yield( T value ) Yields a value of type T to the caller of the currently executing generator. Params value T The value to yield. yield(value) void yield( T value ) ditto"
  },
  "phobos/std/concurrency/Generator/Functions/empty.html": {
    "href": "phobos/std/concurrency/Generator/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.concurrency Parent Generator empty() bool empty( ) final Returns true if the generator is empty."
  },
  "phobos/std/concurrency/Generator/Functions/front.html": {
    "href": "phobos/std/concurrency/Generator/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.concurrency Parent Generator front() T front( ) final Returns the most recently generated value by shallow copy."
  },
  "phobos/std/concurrency/Generator/Functions/moveFront.html": {
    "href": "phobos/std/concurrency/Generator/Functions/moveFront.html",
    "title": "Overloads for - moveFront | Marmos Demo",
    "keywords": "Overloads for - moveFront Module std.concurrency Parent Generator moveFront() T moveFront( ) final Returns the most recently generated value without executing a copy contructor. Will not compile for element types defining a postblit, because Generator does not return by reference."
  },
  "phobos/std/concurrency/Generator/Functions/opApply.html": {
    "href": "phobos/std/concurrency/Generator/Functions/opApply.html",
    "title": "Overloads for - opApply | Marmos Demo",
    "keywords": "Overloads for - opApply Module std.concurrency Parent Generator opApply(loopBody) int opApply( <bug: unknown> loopBody ) final opApply(loopBody) int opApply( <bug: unknown> loopBody ) final"
  },
  "phobos/std/concurrency/Generator/Functions/popFront.html": {
    "href": "phobos/std/concurrency/Generator/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.concurrency Parent Generator popFront() void popFront( ) final Obtains the next value from the underlying function."
  },
  "phobos/std/concurrency/List/Functions/clear.html": {
    "href": "phobos/std/concurrency/List/Functions/clear.html",
    "title": "Overloads for - clear | Marmos Demo",
    "keywords": "Overloads for - clear Module std.concurrency Parent List clear() void clear( )"
  },
  "phobos/std/concurrency/List/Functions/empty.html": {
    "href": "phobos/std/concurrency/List/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.concurrency Parent List empty() bool empty( )"
  },
  "phobos/std/concurrency/List/Functions/freeNode.html": {
    "href": "phobos/std/concurrency/List/Functions/freeNode.html",
    "title": "Overloads for - freeNode | Marmos Demo",
    "keywords": "Overloads for - freeNode Module std.concurrency Parent List freeNode(n) void freeNode( <bug: unknown> n )"
  },
  "phobos/std/concurrency/List/Functions/length.html": {
    "href": "phobos/std/concurrency/List/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.concurrency Parent List length() size_t length( )"
  },
  "phobos/std/concurrency/List/Functions/newNode.html": {
    "href": "phobos/std/concurrency/List/Functions/newNode.html",
    "title": "Overloads for - newNode | Marmos Demo",
    "keywords": "Overloads for - newNode Module std.concurrency Parent List newNode(v) <bug: unknown> newNode( T v )"
  },
  "phobos/std/concurrency/List/Functions/opSlice.html": {
    "href": "phobos/std/concurrency/List/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.concurrency Parent List opSlice() Range opSlice( )"
  },
  "phobos/std/concurrency/List/Functions/put.html": {
    "href": "phobos/std/concurrency/List/Functions/put.html",
    "title": "Overloads for - put | Marmos Demo",
    "keywords": "Overloads for - put Module std.concurrency Parent List put(val) void put( T val ) put(rhs) void put( List!(T) rhs ) put(n) void put( <bug: unknown> n )"
  },
  "phobos/std/concurrency/List/Functions/removeAt.html": {
    "href": "phobos/std/concurrency/List/Functions/removeAt.html",
    "title": "Overloads for - removeAt | Marmos Demo",
    "keywords": "Overloads for - removeAt Module std.concurrency Parent List removeAt(r) void removeAt( Range r )"
  },
  "phobos/std/concurrency/MessageBox/Functions/close.html": {
    "href": "phobos/std/concurrency/MessageBox/Functions/close.html",
    "title": "Overloads for - close | Marmos Demo",
    "keywords": "Overloads for - close Module std.concurrency Parent MessageBox close() void close( ) final"
  },
  "phobos/std/concurrency/MessageBox/Functions/isClosed.html": {
    "href": "phobos/std/concurrency/MessageBox/Functions/isClosed.html",
    "title": "Overloads for - isClosed | Marmos Demo",
    "keywords": "Overloads for - isClosed Module std.concurrency Parent MessageBox isClosed() bool isClosed( ) final"
  },
  "phobos/std/concurrency/MessageBox/Functions/isControlMsg.html": {
    "href": "phobos/std/concurrency/MessageBox/Functions/isControlMsg.html",
    "title": "Overloads for - isControlMsg | Marmos Demo",
    "keywords": "Overloads for - isControlMsg Module std.concurrency Parent MessageBox isControlMsg(msg) bool isControlMsg( Message msg )"
  },
  "phobos/std/concurrency/MessageBox/Functions/isLinkDeadMsg.html": {
    "href": "phobos/std/concurrency/MessageBox/Functions/isLinkDeadMsg.html",
    "title": "Overloads for - isLinkDeadMsg | Marmos Demo",
    "keywords": "Overloads for - isLinkDeadMsg Module std.concurrency Parent MessageBox isLinkDeadMsg(msg) bool isLinkDeadMsg( Message msg )"
  },
  "phobos/std/concurrency/MessageBox/Functions/isPriorityMsg.html": {
    "href": "phobos/std/concurrency/MessageBox/Functions/isPriorityMsg.html",
    "title": "Overloads for - isPriorityMsg | Marmos Demo",
    "keywords": "Overloads for - isPriorityMsg Module std.concurrency Parent MessageBox isPriorityMsg(msg) bool isPriorityMsg( Message msg )"
  },
  "phobos/std/concurrency/MessageBox/Functions/mboxFull.html": {
    "href": "phobos/std/concurrency/MessageBox/Functions/mboxFull.html",
    "title": "Overloads for - mboxFull | Marmos Demo",
    "keywords": "Overloads for - mboxFull Module std.concurrency Parent MessageBox mboxFull() bool mboxFull( )"
  },
  "phobos/std/concurrency/MessageBox/Functions/put.html": {
    "href": "phobos/std/concurrency/MessageBox/Functions/put.html",
    "title": "Overloads for - put | Marmos Demo",
    "keywords": "Overloads for - put Module std.concurrency Parent MessageBox put(msg) void put( Message msg ) final"
  },
  "phobos/std/concurrency/MessageBox/Functions/setMaxMsgs.html": {
    "href": "phobos/std/concurrency/MessageBox/Functions/setMaxMsgs.html",
    "title": "Overloads for - setMaxMsgs | Marmos Demo",
    "keywords": "Overloads for - setMaxMsgs Module std.concurrency Parent MessageBox setMaxMsgs(num, call) void setMaxMsgs( size_t num, <bug: unknown> call ) final"
  },
  "phobos/std/concurrency/MessageBox/Functions/updateMsgCount.html": {
    "href": "phobos/std/concurrency/MessageBox/Functions/updateMsgCount.html",
    "title": "Overloads for - updateMsgCount | Marmos Demo",
    "keywords": "Overloads for - updateMsgCount Module std.concurrency Parent MessageBox updateMsgCount() void updateMsgCount( )"
  },
  "phobos/std/concurrency/Overview.html": {
    "href": "phobos/std/concurrency/Overview.html",
    "title": "Module - std.concurrency | Marmos Demo",
    "keywords": "Module - std.concurrency About $(SCRIPT inhibitQuickIndex = 1;) $(DIVC quickindex, $(BOOKTABLE, $(TR $(TH Category) $(TH Symbols)) $(TR $(TD Tid) $(TD $(MYREF locate) $(MYREF ownerTid) $(MYREF register) $(MYREF spawn) $(MYREF spawnLinked) $(MYREF thisTid) $(MYREF Tid) $(MYREF TidMissingException) $(MYREF unregister) )) $(TR $(TD Message passing) $(TD $(MYREF prioritySend) $(MYREF receive) $(MYREF receiveOnly) $(MYREF receiveTimeout) $(MYREF send) $(MYREF setMaxMailboxSize) )) $(TR $(TD Message-related types) $(TD $(MYREF LinkTerminated) $(MYREF MailboxFull) $(MYREF MessageMismatch) $(MYREF OnCrowding) $(MYREF OwnerTerminated) $(MYREF PriorityMessageException) )) $(TR $(TD Scheduler) $(TD $(MYREF FiberScheduler) $(MYREF Generator) $(MYREF Scheduler) $(MYREF scheduler) $(MYREF ThreadInfo) $(MYREF ThreadScheduler) $(MYREF yield) )) $(TR $(TD Misc) $(TD $(MYREF initOnce) )) )) This is a low-level messaging API upon which more structured or restrictive APIs may be built. The general idea is that every messageable entity is represented by a common handle type called a Tid , which allows messages to be sent to logical threads that are executing in both the current process and in external processes using the same interface. This is an important aspect of scalability because it allows the components of a program to be spread across available resources with few to no changes to the actual implementation. A logical thread is an execution context that has its own stack and which runs asynchronously to other logical threads. These may be preemptively scheduled kernel threads, $(MREF_ALTTEXT fibers, core, thread, fiber) (cooperative user-space threads), or some other concept with similar behavior. The type of concurrency used when logical threads are created is determined by the $(LREF Scheduler) selected at initialization time. The default behavior is currently to create a new kernel thread per call to spawn, but other schedulers are available that multiplex fibers across the main thread or use some combination of the two approaches. Copyright: Copyright Sean Kelly 2009 - 2014. License: Boost License 1.0. Authors: Sean Kelly, Alex Rønne Petersen, Martin Nowak Source: $(PHOBOSSRC std/concurrency.d) Classes Name Description FiberScheduler An example Scheduler using $(MREF_ALTTEXT Fiber s, core, thread, fiber). Generator A Generator is a $(MREF_ALTTEXT Fiber, core, thread, fiber) that periodically returns values of type T to the caller via yield . This is represented as an InputRange. LinkTerminated Thrown if a linked thread has terminated. MailboxFull Thrown on mailbox crowding if the mailbox is configured with OnCrowding.throwException . MessageBox MessageMismatch Thrown on calls to $(LREF receiveOnly) if a message other than the type the receiving thread expected is sent. OwnerTerminated Thrown on calls to $(LREF receive) if the thread that spawned the receiving thread has terminated and no more messages exist. PriorityMessageException Thrown if a message was sent to a thread via $(REF prioritySend, std,concurrency) and the receiver does not have a handler for a message of this type. ThreadScheduler An example Scheduler using kernel threads. TidMissingException Thrown when a Tid is missing, e.g. when $(LREF ownerTid) doesn't find an owner thread. Structs Name Description List Message ThreadInfo Encapsulates all implementation-level data needed for scheduling. Tid An opaque type used to represent a logical thread. Functions Name Description checkops hasLocalAliasing initOnce Initializes $(D_PARAM var) with the lazy $(D_PARAM init) value in a thread-safe manner. initOnceLock locate Gets the Tid associated with name. onCrowdingBlock onCrowdingIgnore onCrowdingThrow ownerTid Return the Tid of the thread which spawned the caller's thread. prioritySend Places the values as a message on the front of tid's message queue. receive Receives a message from another thread. receiveFunction receiveOnly Receives only messages with arguments of the specified types. receiveTimeout Receives a message from another thread and gives up if no match arrives within a specified duration. register Associates name with tid. registryLock send Places the values as a message at the back of tid's message queue. setMaxMailboxSize Sets a maximum mailbox size. spawn Starts fn(args) in a new logical thread. spawnLinked Starts fn(args) in a logical thread and will receive a LinkTerminated message when the operation terminates. thisInfo thisTid Returns: The Tid of the caller's thread. unregister Removes the registered name associated with a tid. unregisterMe yield If the caller is a Fiber and is not a $(LREF Generator), this function will call scheduler.yield() or Fiber.yield() , as appropriate. Variables Name Description isSpawnable namesByTid scheduler Sets the Scheduler behavior within the program. tidByName"
  },
  "phobos/std/concurrency/Structs/List.html": {
    "href": "phobos/std/concurrency/Structs/List.html",
    "title": "Struct - List | Marmos Demo",
    "keywords": "Struct - List Module std.concurrency public struct List { // void clear( ) ; // bool empty( ) ; // void freeNode( <bug: unknown> n ) ; // size_t length( ) ; // <bug: unknown> newNode( T v ) ; // Range opSlice( ) ; // void put( T val ) ; // void put( List!(T) rhs ) ; // void put( <bug: unknown> n ) ; // void removeAt( Range r ) ; // size_t m_count; // <bug: unknown> m_first; // <bug: unknown> m_last; // static shared <bug: unknown> sm_head; // static shared SpinLock sm_lock; } Functions Name Description clear empty freeNode length newNode opSlice put removeAt Variables Name Description m_count m_first m_last sm_head sm_lock"
  },
  "phobos/std/concurrency/Structs/Message.html": {
    "href": "phobos/std/concurrency/Structs/Message.html",
    "title": "Struct - Message | Marmos Demo",
    "keywords": "Struct - Message Module std.concurrency public struct Message { // Variant data; // MsgType type; } Variables Name Description data type"
  },
  "phobos/std/concurrency/Structs/ThreadInfo.html": {
    "href": "phobos/std/concurrency/Structs/ThreadInfo.html",
    "title": "Struct - ThreadInfo | Marmos Demo",
    "keywords": "Struct - ThreadInfo Module std.concurrency public struct ThreadInfo { // Cleans up this ThreadInfo. void cleanup( ) ; // Gets a thread-local instance of `ThreadInfo` . <bug: unknown> thisInfo( ) static; // Tid ident; // <bug: unknown> links; // Tid owner; } About Encapsulates all implementation-level data needed for scheduling. When defining a $(LREF Scheduler), an instance of this struct must be associated with each logical thread. It contains all implementation-level information needed by the internal API. Functions Name Description cleanup Cleans up this ThreadInfo. thisInfo Gets a thread-local instance of ThreadInfo . Variables Name Description ident links owner"
  },
  "phobos/std/concurrency/Structs/Tid.html": {
    "href": "phobos/std/concurrency/Structs/Tid.html",
    "title": "Struct - Tid | Marmos Demo",
    "keywords": "Struct - Tid Module std.concurrency public struct Tid { // MessageBox mbox; } About An opaque type used to represent a logical thread. Variables Name Description mbox"
  },
  "phobos/std/concurrency/ThreadInfo/Functions/cleanup.html": {
    "href": "phobos/std/concurrency/ThreadInfo/Functions/cleanup.html",
    "title": "Overloads for - cleanup | Marmos Demo",
    "keywords": "Overloads for - cleanup Module std.concurrency Parent ThreadInfo cleanup() void cleanup( ) Cleans up this ThreadInfo. This must be called when a scheduled thread terminates. It tears down the messaging system for the thread and notifies interested parties of the thread's termination."
  },
  "phobos/std/concurrency/ThreadInfo/Functions/thisInfo.html": {
    "href": "phobos/std/concurrency/ThreadInfo/Functions/thisInfo.html",
    "title": "Overloads for - thisInfo | Marmos Demo",
    "keywords": "Overloads for - thisInfo Module std.concurrency Parent ThreadInfo thisInfo() <bug: unknown> thisInfo( ) static Gets a thread-local instance of ThreadInfo . Gets a thread-local instance of ThreadInfo , which should be used as the default instance when info is requested for a thread not created by the Scheduler ."
  },
  "phobos/std/concurrency/ThreadScheduler/Functions/newCondition.html": {
    "href": "phobos/std/concurrency/ThreadScheduler/Functions/newCondition.html",
    "title": "Overloads for - newCondition | Marmos Demo",
    "keywords": "Overloads for - newCondition Module std.concurrency Parent ThreadScheduler newCondition(m) Condition newCondition( Mutex m ) Creates a new Condition variable. No custom behavior is needed here."
  },
  "phobos/std/concurrency/ThreadScheduler/Functions/spawn.html": {
    "href": "phobos/std/concurrency/ThreadScheduler/Functions/spawn.html",
    "title": "Overloads for - spawn | Marmos Demo",
    "keywords": "Overloads for - spawn Module std.concurrency Parent ThreadScheduler spawn(op) void spawn( <bug: unknown> op ) Creates a new kernel thread and assigns it to run the supplied op."
  },
  "phobos/std/concurrency/ThreadScheduler/Functions/start.html": {
    "href": "phobos/std/concurrency/ThreadScheduler/Functions/start.html",
    "title": "Overloads for - start | Marmos Demo",
    "keywords": "Overloads for - start Module std.concurrency Parent ThreadScheduler start(op) void start( <bug: unknown> op ) This simply runs op directly, since no real scheduling is needed by this approach."
  },
  "phobos/std/concurrency/ThreadScheduler/Functions/thisInfo.html": {
    "href": "phobos/std/concurrency/ThreadScheduler/Functions/thisInfo.html",
    "title": "Overloads for - thisInfo | Marmos Demo",
    "keywords": "Overloads for - thisInfo Module std.concurrency Parent ThreadScheduler thisInfo() ThreadInfo thisInfo( ) Returns ThreadInfo.thisInfo , since it is a thread-local instance of ThreadInfo , which is the correct behavior for this scheduler."
  },
  "phobos/std/concurrency/ThreadScheduler/Functions/yield.html": {
    "href": "phobos/std/concurrency/ThreadScheduler/Functions/yield.html",
    "title": "Overloads for - yield | Marmos Demo",
    "keywords": "Overloads for - yield Module std.concurrency Parent ThreadScheduler yield() void yield( ) This scheduler does no explicit multiplexing, so this is a no-op."
  },
  "phobos/std/container/Overview.html": {
    "href": "phobos/std/container/Overview.html",
    "title": "Module - std.container | Marmos Demo",
    "keywords": "Module - std.container About This module defines generic containers. Construction To implement the different containers both struct and class based approaches have been used. $(REF make, std,container,util) allows for uniform construction with either approach. --- import std.container; // Construct a red-black tree and an array both containing the values 1, 2, 3. // RedBlackTree should typically be allocated using new RedBlackTree!int rbTree = new RedBlackTree!int(1, 2, 3); // But new should not be used with Array Array!int array = Array!int(1, 2, 3); // make hides the differences RedBlackTree!int rbTree2 = make!(RedBlackTree!int)(1, 2, 3); Array!int array2 = make!(Array!int)(1, 2, 3); --- Note that make can infer the element type from the given arguments. --- import std.container; auto rbTree = make!RedBlackTree(1, 2, 3); // RedBlackTree!int auto array = make!Array(\"1\", \"2\", \"3\"); // Array!string --- Reference_semantics All containers have reference semantics, which means that after assignment both variables refer to the same underlying data. To make a copy of a container, use the c.dup container primitive. --- import std.container, std.range; Array!int originalArray = make!(Array!int)(1, 2, 3); Array!int secondArray = originalArray; assert(equal(originalArray[], secondArray[])); // changing one instance changes the other one as well! originalArray[0] = 12; assert(secondArray[0] == 12); // secondArray now refers to an independent copy of originalArray secondArray = originalArray.dup; secondArray[0] = 1; // assert that originalArray has not been affected assert(originalArray[0] == 12); --- $(B Attention:) If the container is implemented as a class, using an uninitialized instance can cause a null pointer dereference. --- import std.container; RedBlackTree!int rbTree; rbTree.insert(5); // null pointer dereference --- Using an uninitialized struct-based container will work, because the struct intializes itself upon use; however, up to this point the container will not have an identity and assignment does not create two references to the same data. --- import std.container; // create an uninitialized array Array!int array1; // array2 does not refer to array1 Array!int array2 = array1; array2.insertBack(42); // thus array1 will not be affected assert(array1.empty); // after initialization reference semantics work as expected array1 = array2; // now affects array2 as well array1.removeBack(); assert(array2.empty); --- It is therefore recommended to always construct containers using $(REF make, std,container,util). This is in fact necessary to put containers into another container. For example, to construct an Array of ten empty Array s, use the following that calls make ten times. --- import std.container, std.range; auto arrOfArrs = make!Array(generate!(() => make!(Array!int)).take(10)); --- Submodules This module consists of the following submodules $(UL $(LI The $(MREF std, container, array) module provides an array type with deterministic control of memory, not reliant on the GC unlike built-in arrays. ) $(LI The $(MREF std, container, binaryheap) module provides a binary heap implementation that can be applied to any user-provided random-access range. ) $(LI The $(MREF std, container, dlist) module provides a doubly-linked list implementation. ) $(LI The $(MREF std, container, rbtree) module implements red-black trees. ) $(LI The $(MREF std, container, slist) module implements singly-linked lists. ) $(LI The $(MREF std, container, util) module contains some generic tools commonly used by container implementations. ) ) The_primary_range_of_a_container While some containers offer direct access to their elements e.g. via opIndex , c.front or c.back , access and modification of a container's contents is generally done through its primary $(MREF_ALTTEXT range, std, range) type, which is aliased as C.Range . For example, the primary range type of Array!int is Array!int.Range . If the documentation of a member function of a container takes a parameter of type Range , then it refers to the primary range type of this container. Oftentimes Take!Range will be used, in which case the range refers to a span of the elements in the container. Arguments to these parameters $(B must) be obtained from the same container instance as the one being worked with. It is important to note that many generic range algorithms return the same range type as their input range. --- import std.algorithm.comparison : equal; import std.algorithm.iteration : find; import std.container; import std.range : take; auto array = make!Array(1, 2, 3); // find returns an Array!int.Range advanced to the element \"2\" array.linearRemove(array[].find(2)); assert(array[].equal([1])); array = make!Array(1, 2, 3); // the range given to linearRemove is a Take!(Array!int.Range) // spanning just the element \"2\" array.linearRemove(array[].find(2).take(1)); assert(array[].equal([1, 3])); --- When any $(MREF_ALTTEXT range, std, range) can be passed as an argument to a member function, the documention usually refers to the parameter's templated type as Stuff . --- import std.algorithm.comparison : equal; import std.container; import std.range : iota; auto array = make!Array(1, 2); // the range type returned by iota is completely unrelated to Array, // which is fine for Array.insertBack: array.insertBack(iota(3, 10)); assert(array[].equal([1, 2, 3, 4, 5, 6, 7, 8, 9])); --- Container_primitives Containers do not form a class hierarchy, instead they implement a common set of primitives (see table below). These primitives each guarantee a specific worst case complexity and thus allow generic code to be written independently of the container implementation. For example the primitives c.remove(r) and c.linearRemove(r) both remove the sequence of elements in range r from the container c . The primitive c.remove(r) guarantees \\((BIGOH n\\)(SUBSCRIPT r) log n$(SUBSCRIPT c)) complexity in the worst case and c.linearRemove(r) relaxes this guarantee to \\((BIGOH n\\)(SUBSCRIPT c)). Since a sequence of elements can be removed from a $(MREF_ALTTEXT doubly linked list,std,container,dlist) in constant time, DList provides the primitive c.remove(r) as well as c.linearRemove(r) . On the other hand $(MREF_ALTTEXT Array, std,container, array) only offers c.linearRemove(r) . The following table describes the common set of primitives that containers implement. A container need not implement all primitives, but if a primitive is implemented, it must support the syntax described in the $(B syntax) column with the semantics described in the $(B description) column, and it must not have a worst-case complexity worse than denoted in big-O notation in the $(BIGOH ·) column. Below, C means a container type, c is a value of container type, \\((D n\\)(SUBSCRIPT x)) represents the effective length of value x , which could be a single element (in which case \\((D n\\)(SUBSCRIPT x)) is 1 ), a container, or a range. $(BOOKTABLE Container primitives, $(TR $(TH Syntax) $(TH $(BIGOH ·)) $(TH Description) ) $(TR $(TDNW C(x) ) $(TDNW \\((D n\\)(SUBSCRIPT x))) $(TD Creates a container of type C from either another container or a range. The created container must not be a null reference even if x is empty.) ) $(TR $(TDNW c.dup ) $(TDNW \\((D n\\)(SUBSCRIPT c))) $(TD Returns a duplicate of the container.) ) $(TR $(TDNW $(D c ~ x)) $(TDNW \\((D n\\)(SUBSCRIPT c) + n$(SUBSCRIPT x))) $(TD Returns the concatenation of c and r . x may be a single element or an input range.) ) $(TR $(TDNW $(D x ~ c)) $(TDNW \\((D n\\)(SUBSCRIPT c) + n$(SUBSCRIPT x))) $(TD Returns the concatenation of x and c . x may be a single element or an input range type.) ) $(LEADINGROWN 3, Iteration ) $(TR $(TD c.Range ) $(TD) $(TD The primary range type associated with the container.) ) $(TR $(TD c[] ) $(TDNW \\((D log n\\)(SUBSCRIPT c))) $(TD Returns a range iterating over the entire container, in a container-defined order.) ) $(TR $(TDNW $(D c[a .. b])) $(TDNW \\((D log n\\)(SUBSCRIPT c))) $(TD Fetches a portion of the container from key a to key b .) ) $(LEADINGROWN 3, Capacity ) $(TR $(TD c.empty ) $(TD 1 ) $(TD Returns true if the container has no elements, false otherwise.) ) $(TR $(TD c.length ) $(TDNW \\((D log n\\)(SUBSCRIPT c))) $(TD Returns the number of elements in the container.) ) $(TR $(TDNW $(D c.length = n)) $(TDNW \\((D n\\)(SUBSCRIPT c) + n)) $(TD Forces the number of elements in the container to n . If the container ends up growing, the added elements are initialized in a container-dependent manner (usually with T.init ).) ) $(TR $(TD c.capacity ) $(TDNW \\((D log n\\)(SUBSCRIPT c))) $(TD Returns the maximum number of elements that can be stored in the container without triggering a reallocation.) ) $(TR $(TD c.reserve(x) ) $(TD \\((D n\\)(SUBSCRIPT c))) $(TD Forces capacity to at least x without reducing it.) ) $(LEADINGROWN 3, Access ) $(TR $(TDNW c.front ) $(TDNW \\((D log n\\)(SUBSCRIPT c))) $(TD Returns the first element of the container, in a container-defined order.) ) $(TR $(TDNW c.moveFront ) $(TDNW \\((D log n\\)(SUBSCRIPT c))) $(TD Destructively reads and returns the first element of the container. The slot is not removed from the container; it is left initialized with T.init . This routine need not be defined if $(D front) returns a ref .) ) $(TR $(TDNW $(D c.front = v)) $(TDNW \\((D log n\\)(SUBSCRIPT c))) $(TD Assigns v to the first element of the container.) ) $(TR $(TDNW c.back ) $(TDNW \\((D log n\\)(SUBSCRIPT c))) $(TD Returns the last element of the container, in a container-defined order.) ) $(TR $(TDNW c.moveBack ) $(TDNW \\((D log n\\)(SUBSCRIPT c))) $(TD Destructively reads and returns the last element of the container. The slot is not removed from the container; it is left initialized with T.init . This routine need not be defined if $(D front) returns a ref .) ) $(TR $(TDNW $(D c.back = v)) $(TDNW \\((D log n\\)(SUBSCRIPT c))) $(TD Assigns v to the last element of the container.) ) $(TR $(TDNW c[x] ) $(TDNW \\((D log n\\)(SUBSCRIPT c))) $(TD Provides indexed access into the container. The index type is container-defined. A container may define several index types (and consequently overloaded indexing).) ) $(TR $(TDNW c.moveAt(x) ) $(TDNW \\((D log n\\)(SUBSCRIPT c))) $(TD Destructively reads and returns the value at position x . The slot is not removed from the container; it is left initialized with $(D T.init).) ) $(TR $(TDNW $(D c[x] = v)) $(TDNW \\((D log n\\)(SUBSCRIPT c))) $(TD Sets element at specified index into the container.) ) $(TR $(TDNW $(D c[x] $(I op)= v)) $(TDNW \\((D log n\\)(SUBSCRIPT c))) $(TD Performs read-modify-write operation at specified index into the container.) ) $(LEADINGROWN 3, Operations ) $(TR $(TDNW $(D e in c)) $(TDNW \\((D log n\\)(SUBSCRIPT c))) $(TD Returns nonzero if e is found in c .) ) $(TR $(TDNW c.lowerBound(v) ) $(TDNW \\((D log n\\)(SUBSCRIPT c))) $(TD Returns a range of all elements strictly less than v .) ) $(TR $(TDNW c.upperBound(v) ) $(TDNW \\((D log n\\)(SUBSCRIPT c))) $(TD Returns a range of all elements strictly greater than v .) ) $(TR $(TDNW c.equalRange(v) ) $(TDNW \\((D log n\\)(SUBSCRIPT c))) $(TD Returns a range of all elements in c that are equal to v .) ) $(LEADINGROWN 3, Modifiers ) $(TR $(TDNW $(D c ~= x)) $(TDNW \\((D n\\)(SUBSCRIPT c) + n$(SUBSCRIPT x))) $(TD Appends x to c . x may be a single element or an input range type.) ) $(TR $(TDNW c.clear() ) $(TDNW \\((D n\\)(SUBSCRIPT c))) $(TD Removes all elements in c .) ) $(TR $(TDNW c.insert(x) ) $(TDNW \\((D n\\)(SUBSCRIPT x) log n$(SUBSCRIPT c))) $(TD Inserts x in c at a position (or positions) chosen by c .) ) $(TR $(TDNW c.stableInsert(x) ) $(TDNW \\((D n\\)(SUBSCRIPT x) log n$(SUBSCRIPT c))) $(TD Same as c.insert(x) , but is guaranteed to not invalidate any ranges.) ) $(TR $(TDNW c.linearInsert(v) ) $(TDNW \\((D n\\)(SUBSCRIPT c))) $(TD Same as c.insert(v) but relaxes complexity to linear.) ) $(TR $(TDNW c.stableLinearInsert(v) ) $(TDNW \\((D n\\)(SUBSCRIPT c))) $(TD Same as c.stableInsert(v) but relaxes complexity to linear.) ) $(TR $(TDNW c.removeAny() ) $(TDNW \\((D log n\\)(SUBSCRIPT c))) $(TD Removes some element from c and returns it.) ) $(TR $(TDNW c.stableRemoveAny() ) $(TDNW \\((D log n\\)(SUBSCRIPT c))) $(TD Same as c.removeAny() , but is guaranteed to not invalidate any iterators.) ) $(TR $(TDNW c.insertFront(v) ) $(TDNW \\((D log n\\)(SUBSCRIPT c))) $(TD Inserts v at the front of c .) ) $(TR $(TDNW c.stableInsertFront(v) ) $(TDNW \\((D log n\\)(SUBSCRIPT c))) $(TD Same as c.insertFront(v) , but guarantees no ranges will be invalidated.) ) $(TR $(TDNW c.insertBack(v) ) $(TDNW \\((D log n\\)(SUBSCRIPT c))) $(TD Inserts v at the back of c .) ) $(TR $(TDNW c.stableInsertBack(v) ) $(TDNW \\((D log n\\)(SUBSCRIPT c))) $(TD Same as c.insertBack(v) , but guarantees no ranges will be invalidated.) ) $(TR $(TDNW c.removeFront() ) $(TDNW \\((D log n\\)(SUBSCRIPT c))) $(TD Removes the element at the front of c .) ) $(TR $(TDNW c.stableRemoveFront() ) $(TDNW \\((D log n\\)(SUBSCRIPT c))) $(TD Same as c.removeFront() , but guarantees no ranges will be invalidated.) ) $(TR $(TDNW c.removeBack() ) $(TDNW \\((D log n\\)(SUBSCRIPT c))) $(TD Removes the value at the back of c .) ) $(TR $(TDNW c.stableRemoveBack() ) $(TDNW \\((D log n\\)(SUBSCRIPT c))) $(TD Same as c.removeBack() , but guarantees no ranges will be invalidated.) ) $(TR $(TDNW c.remove(r) ) $(TDNW \\((D n\\)(SUBSCRIPT r) log n$(SUBSCRIPT c))) $(TD Removes range r from c .) ) $(TR $(TDNW c.stableRemove(r) ) $(TDNW \\((D n\\)(SUBSCRIPT r) log n$(SUBSCRIPT c))) $(TD Same as c.remove(r) , but guarantees iterators are not invalidated.) ) $(TR $(TDNW c.linearRemove(r) ) $(TDNW \\((D n\\)(SUBSCRIPT c))) $(TD Removes range r from c .) ) $(TR $(TDNW c.stableLinearRemove(r) ) $(TDNW \\((D n\\)(SUBSCRIPT c))) $(TD Same as c.linearRemove(r) , but guarantees iterators are not invalidated.) ) $(TR $(TDNW c.removeKey(k) ) $(TDNW \\((D log n\\)(SUBSCRIPT c))) $(TD Removes an element from c by using its key k . The key's type is defined by the container.) ) ) Source: $(PHOBOSSRC std/container/package.d) Copyright: Red-black tree code copyright (C) 2008- by Steven Schveighoffer. Other code copyright 2010- Andrei Alexandrescu. All rights reserved by the respective holders. License: Distributed under the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at $(HTTP boost.org/LICENSE_1_0.txt)). Authors: Steven Schveighoffer, $(HTTP erdani.com, Andrei Alexandrescu) Structs Name Description TotalContainer"
  },
  "phobos/std/container/Structs/TotalContainer.html": {
    "href": "phobos/std/container/Structs/TotalContainer.html",
    "title": "Struct - TotalContainer | Marmos Demo",
    "keywords": "Struct - TotalContainer Module std.container public struct TotalContainer { // If the container has a notion of key-value mapping, `KeyType` defines the type of the key of the container. alias KeyType = <todo: marmos support pending>; // If the container has a notion of multikey-value mapping, $(D KeyTypes[k]), where `k` is a zero-based unsigned number, defines the type of the `k` th key of the container. alias KeyTypes = <todo: marmos support pending>; // If the container has a notion of key-value mapping, `ValueType` defines the type of the value of the container. Typically, a map-style container mapping values of type `K` to values of type `V` defines `KeyType` to be `K` and `ValueType` to be `V` . alias ValueType = <todo: marmos support pending>; // Ditto T back( ) ; // Ditto void back( T value ) ; // Returns the maximum number of elements the container can store without (a) allocating memory, (b) invalidating iterators upon insertion. size_t capacity( ) ; // Removes all contents from the container. The container decides how $(D capacity) is affected. void clear( ) ; // Returns a duplicate of the container. The elements themselves are not transitively duplicated. TotalContainer dup( ) ; // Property returning `true` if and only if the container has no elements. bool empty( ) ; // Returns a range of all elements containing `k` (could be empty or a singleton range). Range equalRange( KeyType k ) ; // Forward to `opSlice().front` and `opSlice().back` , respectively. T front( ) ; // Ditto void front( T value ) ; // Returns the number of elements in the container. size_t length( ) ; // Sets the number of elements in the container to `newSize` . If $(D newSize) is greater than `length` , the added elements are added to unspecified positions in the container and initialized with $(D .init). void length( size_t newLength ) ; // Same as `remove` above, but has complexity relaxed to linear. Range linearRemove( Range r ) ; // Returns a range of all elements with keys less than `k` (could be empty or a singleton range). Only defined by containers that store data sorted at all times. Range lowerBound( KeyType k ) ; // ditto T moveAt( KeyType i ) ; // Ditto T moveBack( ) ; // Ditto T moveFront( ) ; // Indexing operators yield or modify the value at a specified index. T opIndex( KeyType __anonymous ) ; // ditto void opIndexAssign( KeyType i, T value ) ; // Returns a range that iterates over all elements of the container, in a container-defined order. The container should choose the most convenient and fast method of iteration for `opSlice()` . Range opSlice( ) ; // Returns a range that iterates the container between two specified positions. Range opSlice( size_t a, size_t b ) ; // Removes all elements belonging to `r` , which must be a range obtained originally from this container. The stable version behaves the same, but guarantees that ranges iterating over the container are never invalidated. Range remove( Range r ) ; // Picks one value in an unspecified position in the container, removes it from the container, and returns it. Implementations should pick the value that's the most advantageous for the container. The stable version behaves the same, but guarantees that ranges iterating over the container are never invalidated. T removeAny( ) ; // ditto void removeBack( ) ; // ditto size_t removeBack( size_t howMany ) ; // Removes the value at the front or back of the container. The stable version behaves the same, but guarantees that ranges iterating over the container are never invalidated. The optional parameter $(D howMany) instructs removal of that many elements. If $(D howMany > n), all elements are removed and no exception is thrown. void removeFront( ) ; // Removes `howMany` values at the front or back of the container. Unlike the unparameterized versions above, these functions do not throw if they could not remove `howMany` elements. Instead, if $(D howMany > n), all elements are removed. The returned value is the effective number of elements removed. The stable version behaves the same, but guarantees that ranges iterating over the container are never invalidated. size_t removeFront( size_t howMany ) ; // Removes all values corresponding to key `k` . size_t removeKey( KeyType k ) ; // Ensures sufficient capacity to accommodate `n` elements. void reserve( size_t e ) ; // ditto size_t stableInsertBack( T value ) ; // ditto Range stableLinearRemove( Range r ) ; // ditto Range stableRemove( Range r ) ; // ditto T stableRemoveAny( ) ; // ditto void stableRemoveBack( ) ; // ditto size_t stableRemoveBack( size_t howMany ) ; // ditto void stableRemoveFront( ) ; // ditto size_t stableRemoveFront( size_t howMany ) ; // Returns a range of all elements with keys larger than `k` (could be empty or a singleton range). Only defined by containers that store data sorted at all times. Range upperBound( KeyType k ) ; } Aliases Name Description KeyType If the container has a notion of key-value mapping, KeyType defines the type of the key of the container. KeyTypes If the container has a notion of multikey-value mapping, $(D KeyTypes[k]), where k is a zero-based unsigned number, defines the type of the k th key of the container. ValueType If the container has a notion of key-value mapping, ValueType defines the type of the value of the container. Typically, a map-style container mapping values of type K to values of type V defines KeyType to be K and ValueType to be V . Functions Name Description back Ditto capacity Returns the maximum number of elements the container can store without (a) allocating memory, (b) invalidating iterators upon insertion. clear Removes all contents from the container. The container decides how $(D capacity) is affected. dup Returns a duplicate of the container. The elements themselves are not transitively duplicated. empty Property returning true if and only if the container has no elements. equalRange Returns a range of all elements containing k (could be empty or a singleton range). front Forward to opSlice().front and opSlice().back , respectively. length Returns the number of elements in the container. linearRemove Same as remove above, but has complexity relaxed to linear. lowerBound Returns a range of all elements with keys less than k (could be empty or a singleton range). Only defined by containers that store data sorted at all times. moveAt ditto moveBack Ditto moveFront Ditto opIndex Indexing operators yield or modify the value at a specified index. opIndexAssign ditto opSlice Returns a range that iterates over all elements of the container, in a container-defined order. The container should choose the most convenient and fast method of iteration for opSlice() . remove Removes all elements belonging to r , which must be a range obtained originally from this container. The stable version behaves the same, but guarantees that ranges iterating over the container are never invalidated. removeAny Picks one value in an unspecified position in the container, removes it from the container, and returns it. Implementations should pick the value that's the most advantageous for the container. The stable version behaves the same, but guarantees that ranges iterating over the container are never invalidated. removeBack ditto removeFront Removes the value at the front or back of the container. The stable version behaves the same, but guarantees that ranges iterating over the container are never invalidated. The optional parameter $(D howMany) instructs removal of that many elements. If $(D howMany > n), all elements are removed and no exception is thrown. removeKey Removes all values corresponding to key k . reserve Ensures sufficient capacity to accommodate n elements. stableInsertBack ditto stableLinearRemove ditto stableRemove ditto stableRemoveAny ditto stableRemoveBack ditto stableRemoveFront ditto upperBound Returns a range of all elements with keys larger than k (could be empty or a singleton range). Only defined by containers that store data sorted at all times."
  },
  "phobos/std/container/TotalContainer/Functions/back.html": {
    "href": "phobos/std/container/TotalContainer/Functions/back.html",
    "title": "Overloads for - back | Marmos Demo",
    "keywords": "Overloads for - back Module std.container Parent TotalContainer back() T back( ) Ditto back(value) void back( T value ) Ditto"
  },
  "phobos/std/container/TotalContainer/Functions/capacity.html": {
    "href": "phobos/std/container/TotalContainer/Functions/capacity.html",
    "title": "Overloads for - capacity | Marmos Demo",
    "keywords": "Overloads for - capacity Module std.container Parent TotalContainer capacity() size_t capacity( ) Returns the maximum number of elements the container can store without (a) allocating memory, (b) invalidating iterators upon insertion. Complexity: $(BIGOH log(n))."
  },
  "phobos/std/container/TotalContainer/Functions/clear.html": {
    "href": "phobos/std/container/TotalContainer/Functions/clear.html",
    "title": "Overloads for - clear | Marmos Demo",
    "keywords": "Overloads for - clear Module std.container Parent TotalContainer clear() void clear( ) Removes all contents from the container. The container decides how $(D capacity) is affected. Postcondition: empty Complexity: $(BIGOH n)"
  },
  "phobos/std/container/TotalContainer/Functions/dup.html": {
    "href": "phobos/std/container/TotalContainer/Functions/dup.html",
    "title": "Overloads for - dup | Marmos Demo",
    "keywords": "Overloads for - dup Module std.container Parent TotalContainer dup() TotalContainer dup( ) Returns a duplicate of the container. The elements themselves are not transitively duplicated. Complexity: $(BIGOH n)."
  },
  "phobos/std/container/TotalContainer/Functions/empty.html": {
    "href": "phobos/std/container/TotalContainer/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.container Parent TotalContainer empty() bool empty( ) Property returning true if and only if the container has no elements. Complexity: $(BIGOH 1)"
  },
  "phobos/std/container/TotalContainer/Functions/equalRange.html": {
    "href": "phobos/std/container/TotalContainer/Functions/equalRange.html",
    "title": "Overloads for - equalRange | Marmos Demo",
    "keywords": "Overloads for - equalRange Module std.container Parent TotalContainer equalRange(k) Range equalRange( KeyType k ) Returns a range of all elements containing k (could be empty or a singleton range)."
  },
  "phobos/std/container/TotalContainer/Functions/front.html": {
    "href": "phobos/std/container/TotalContainer/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.container Parent TotalContainer front() T front( ) Forward to opSlice().front and opSlice().back , respectively. Complexity: $(BIGOH log(n)) front(value) void front( T value ) Ditto"
  },
  "phobos/std/container/TotalContainer/Functions/length.html": {
    "href": "phobos/std/container/TotalContainer/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.container Parent TotalContainer length() size_t length( ) Returns the number of elements in the container. Complexity: $(BIGOH log(n)). length(newLength) void length( size_t newLength ) Sets the number of elements in the container to newSize . If $(D newSize) is greater than length , the added elements are added to unspecified positions in the container and initialized with $(D .init). Complexity: $(BIGOH abs(n - newLength)) Postcondition: $(D length == newLength)"
  },
  "phobos/std/container/TotalContainer/Functions/linearRemove.html": {
    "href": "phobos/std/container/TotalContainer/Functions/linearRemove.html",
    "title": "Overloads for - linearRemove | Marmos Demo",
    "keywords": "Overloads for - linearRemove Module std.container Parent TotalContainer linearRemove(r) Range linearRemove( Range r ) Same as remove above, but has complexity relaxed to linear. Returns: A range spanning the remaining elements in the container that initially were right after r . Complexity: $(BIGOH n)"
  },
  "phobos/std/container/TotalContainer/Functions/lowerBound.html": {
    "href": "phobos/std/container/TotalContainer/Functions/lowerBound.html",
    "title": "Overloads for - lowerBound | Marmos Demo",
    "keywords": "Overloads for - lowerBound Module std.container Parent TotalContainer lowerBound(k) Range lowerBound( KeyType k ) Returns a range of all elements with keys less than k (could be empty or a singleton range). Only defined by containers that store data sorted at all times."
  },
  "phobos/std/container/TotalContainer/Functions/moveAt.html": {
    "href": "phobos/std/container/TotalContainer/Functions/moveAt.html",
    "title": "Overloads for - moveAt | Marmos Demo",
    "keywords": "Overloads for - moveAt Module std.container Parent TotalContainer moveAt(i) T moveAt( KeyType i ) ditto"
  },
  "phobos/std/container/TotalContainer/Functions/moveBack.html": {
    "href": "phobos/std/container/TotalContainer/Functions/moveBack.html",
    "title": "Overloads for - moveBack | Marmos Demo",
    "keywords": "Overloads for - moveBack Module std.container Parent TotalContainer moveBack() T moveBack( ) Ditto"
  },
  "phobos/std/container/TotalContainer/Functions/moveFront.html": {
    "href": "phobos/std/container/TotalContainer/Functions/moveFront.html",
    "title": "Overloads for - moveFront | Marmos Demo",
    "keywords": "Overloads for - moveFront Module std.container Parent TotalContainer moveFront() T moveFront( ) Ditto"
  },
  "phobos/std/container/TotalContainer/Functions/opIndex.html": {
    "href": "phobos/std/container/TotalContainer/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.container Parent TotalContainer opIndex(__anonymous) T opIndex( KeyType __anonymous ) Indexing operators yield or modify the value at a specified index."
  },
  "phobos/std/container/TotalContainer/Functions/opIndexAssign.html": {
    "href": "phobos/std/container/TotalContainer/Functions/opIndexAssign.html",
    "title": "Overloads for - opIndexAssign | Marmos Demo",
    "keywords": "Overloads for - opIndexAssign Module std.container Parent TotalContainer opIndexAssign(i, value) void opIndexAssign( KeyType i, T value ) ditto"
  },
  "phobos/std/container/TotalContainer/Functions/opSlice.html": {
    "href": "phobos/std/container/TotalContainer/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.container Parent TotalContainer opSlice() Range opSlice( ) Returns a range that iterates over all elements of the container, in a container-defined order. The container should choose the most convenient and fast method of iteration for opSlice() . Complexity: $(BIGOH log(n)) opSlice(a, b) Range opSlice( size_t a, size_t b ) Returns a range that iterates the container between two specified positions. Complexity: $(BIGOH log(n))"
  },
  "phobos/std/container/TotalContainer/Functions/remove.html": {
    "href": "phobos/std/container/TotalContainer/Functions/remove.html",
    "title": "Overloads for - remove | Marmos Demo",
    "keywords": "Overloads for - remove Module std.container Parent TotalContainer remove(r) Range remove( Range r ) Removes all elements belonging to r , which must be a range obtained originally from this container. The stable version behaves the same, but guarantees that ranges iterating over the container are never invalidated. Returns: A range spanning the remaining elements in the container that initially were right after r . Complexity: $(BIGOH m log(n)), where m is the number of elements in r"
  },
  "phobos/std/container/TotalContainer/Functions/removeAny.html": {
    "href": "phobos/std/container/TotalContainer/Functions/removeAny.html",
    "title": "Overloads for - removeAny | Marmos Demo",
    "keywords": "Overloads for - removeAny Module std.container Parent TotalContainer removeAny() T removeAny( ) Picks one value in an unspecified position in the container, removes it from the container, and returns it. Implementations should pick the value that's the most advantageous for the container. The stable version behaves the same, but guarantees that ranges iterating over the container are never invalidated. Precondition: !empty Returns: The element removed. Complexity: $(BIGOH log(n))."
  },
  "phobos/std/container/TotalContainer/Functions/removeBack.html": {
    "href": "phobos/std/container/TotalContainer/Functions/removeBack.html",
    "title": "Overloads for - removeBack | Marmos Demo",
    "keywords": "Overloads for - removeBack Module std.container Parent TotalContainer removeBack() void removeBack( ) ditto removeBack(howMany) size_t removeBack( size_t howMany ) ditto"
  },
  "phobos/std/container/TotalContainer/Functions/removeFront.html": {
    "href": "phobos/std/container/TotalContainer/Functions/removeFront.html",
    "title": "Overloads for - removeFront | Marmos Demo",
    "keywords": "Overloads for - removeFront Module std.container Parent TotalContainer removeFront() void removeFront( ) Removes the value at the front or back of the container. The stable version behaves the same, but guarantees that ranges iterating over the container are never invalidated. The optional parameter $(D howMany) instructs removal of that many elements. If $(D howMany > n), all elements are removed and no exception is thrown. Precondition: !empty Complexity: $(BIGOH log(n)). removeFront(howMany) size_t removeFront( size_t howMany ) Removes howMany values at the front or back of the container. Unlike the unparameterized versions above, these functions do not throw if they could not remove howMany elements. Instead, if $(D howMany > n), all elements are removed. The returned value is the effective number of elements removed. The stable version behaves the same, but guarantees that ranges iterating over the container are never invalidated. Returns: The number of elements removed Complexity: $(BIGOH howMany log(n))."
  },
  "phobos/std/container/TotalContainer/Functions/removeKey.html": {
    "href": "phobos/std/container/TotalContainer/Functions/removeKey.html",
    "title": "Overloads for - removeKey | Marmos Demo",
    "keywords": "Overloads for - removeKey Module std.container Parent TotalContainer removeKey(k) size_t removeKey( KeyType k ) Removes all values corresponding to key k . Complexity: $(BIGOH m log(n)), where m is the number of elements with the same key. Returns: The number of elements removed."
  },
  "phobos/std/container/TotalContainer/Functions/reserve.html": {
    "href": "phobos/std/container/TotalContainer/Functions/reserve.html",
    "title": "Overloads for - reserve | Marmos Demo",
    "keywords": "Overloads for - reserve Module std.container Parent TotalContainer reserve(e) void reserve( size_t e ) Ensures sufficient capacity to accommodate n elements. Postcondition: $(D capacity >= n) Complexity: $(BIGOH log(e - capacity)) if $(D e > capacity), otherwise $(BIGOH 1)."
  },
  "phobos/std/container/TotalContainer/Functions/stableInsertBack.html": {
    "href": "phobos/std/container/TotalContainer/Functions/stableInsertBack.html",
    "title": "Overloads for - stableInsertBack | Marmos Demo",
    "keywords": "Overloads for - stableInsertBack Module std.container Parent TotalContainer stableInsertBack(value) size_t stableInsertBack( T value ) ditto"
  },
  "phobos/std/container/TotalContainer/Functions/stableLinearRemove.html": {
    "href": "phobos/std/container/TotalContainer/Functions/stableLinearRemove.html",
    "title": "Overloads for - stableLinearRemove | Marmos Demo",
    "keywords": "Overloads for - stableLinearRemove Module std.container Parent TotalContainer stableLinearRemove(r) Range stableLinearRemove( Range r ) ditto"
  },
  "phobos/std/container/TotalContainer/Functions/stableRemove.html": {
    "href": "phobos/std/container/TotalContainer/Functions/stableRemove.html",
    "title": "Overloads for - stableRemove | Marmos Demo",
    "keywords": "Overloads for - stableRemove Module std.container Parent TotalContainer stableRemove(r) Range stableRemove( Range r ) ditto"
  },
  "phobos/std/container/TotalContainer/Functions/stableRemoveAny.html": {
    "href": "phobos/std/container/TotalContainer/Functions/stableRemoveAny.html",
    "title": "Overloads for - stableRemoveAny | Marmos Demo",
    "keywords": "Overloads for - stableRemoveAny Module std.container Parent TotalContainer stableRemoveAny() T stableRemoveAny( ) ditto"
  },
  "phobos/std/container/TotalContainer/Functions/stableRemoveBack.html": {
    "href": "phobos/std/container/TotalContainer/Functions/stableRemoveBack.html",
    "title": "Overloads for - stableRemoveBack | Marmos Demo",
    "keywords": "Overloads for - stableRemoveBack Module std.container Parent TotalContainer stableRemoveBack() void stableRemoveBack( ) ditto stableRemoveBack(howMany) size_t stableRemoveBack( size_t howMany ) ditto"
  },
  "phobos/std/container/TotalContainer/Functions/stableRemoveFront.html": {
    "href": "phobos/std/container/TotalContainer/Functions/stableRemoveFront.html",
    "title": "Overloads for - stableRemoveFront | Marmos Demo",
    "keywords": "Overloads for - stableRemoveFront Module std.container Parent TotalContainer stableRemoveFront() void stableRemoveFront( ) ditto stableRemoveFront(howMany) size_t stableRemoveFront( size_t howMany ) ditto"
  },
  "phobos/std/container/TotalContainer/Functions/upperBound.html": {
    "href": "phobos/std/container/TotalContainer/Functions/upperBound.html",
    "title": "Overloads for - upperBound | Marmos Demo",
    "keywords": "Overloads for - upperBound Module std.container Parent TotalContainer upperBound(k) Range upperBound( KeyType k ) Returns a range of all elements with keys larger than k (could be empty or a singleton range). Only defined by containers that store data sorted at all times."
  },
  "phobos/std/container/array/Array/Functions/back.html": {
    "href": "phobos/std/container/array/Array/Functions/back.html",
    "title": "Overloads for - back | Marmos Demo",
    "keywords": "Overloads for - back Module std.container.array Parent Array back() bool back( ) Returns: The last element of the array. Precondition: empty == false Complexity: $(BIGOH 1) Throws: Exception if the array is empty. back(value) void back( bool value ) Ditto"
  },
  "phobos/std/container/array/Array/Functions/capacity.html": {
    "href": "phobos/std/container/array/Array/Functions/capacity.html",
    "title": "Overloads for - capacity | Marmos Demo",
    "keywords": "Overloads for - capacity Module std.container.array Parent Array capacity() size_t capacity( ) Returns: The maximum number of elements the array can store without reallocating memory and invalidating iterators upon insertion. Complexity: $(BIGOH 1)."
  },
  "phobos/std/container/array/Array/Functions/clear.html": {
    "href": "phobos/std/container/array/Array/Functions/clear.html",
    "title": "Overloads for - clear | Marmos Demo",
    "keywords": "Overloads for - clear Module std.container.array Parent Array clear() void clear( ) Removes all the elements from the array and releases allocated memory. Postcondition: empty == true && capacity == 0 Complexity: $(BIGOH length)"
  },
  "phobos/std/container/array/Array/Functions/data.html": {
    "href": "phobos/std/container/array/Array/Functions/data.html",
    "title": "Overloads for - data | Marmos Demo",
    "keywords": "Overloads for - data Module std.container.array Parent Array data() <bug: unknown> data( )"
  },
  "phobos/std/container/array/Array/Functions/dup.html": {
    "href": "phobos/std/container/array/Array/Functions/dup.html",
    "title": "Overloads for - dup | Marmos Demo",
    "keywords": "Overloads for - dup Module std.container.array Parent Array dup() Array dup( ) Returns: A duplicate of the array. Complexity: $(BIGOH length)."
  },
  "phobos/std/container/array/Array/Functions/empty.html": {
    "href": "phobos/std/container/array/Array/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.container.array Parent Array empty() bool empty( ) Property returning true if and only if the array has no elements. Complexity: $(BIGOH 1)"
  },
  "phobos/std/container/array/Array/Functions/front.html": {
    "href": "phobos/std/container/array/Array/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.container.array Parent Array front() bool front( ) Returns: The first element of the array. Precondition: empty == false Complexity: $(BIGOH 1) Throws: Exception if the array is empty. front(value) void front( bool value ) Ditto"
  },
  "phobos/std/container/array/Array/Functions/length.html": {
    "href": "phobos/std/container/array/Array/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.container.array Parent Array length() size_t length( ) Returns the number of elements in the array. Complexity: $(BIGOH 1). length(newLength) void length( size_t newLength ) Sets the number of elements in the array to newLength . If newLength is greater than length , the new elements are added to the end of the array and initialized with false . Complexity Guaranteed $(BIGOH abs(length - newLength)) if capacity >= newLength . If capacity < newLength the worst case is $(BIGOH newLength). Postcondition: length == newLength"
  },
  "phobos/std/container/array/Array/Functions/linearRemove.html": {
    "href": "phobos/std/container/array/Array/Functions/linearRemove.html",
    "title": "Overloads for - linearRemove | Marmos Demo",
    "keywords": "Overloads for - linearRemove Module std.container.array Parent Array linearRemove(r) Range linearRemove( Range r ) Removes all elements belonging to r , which must be a range obtained originally from this array. Returns: A range spanning the remaining elements in the array that initially were right after r . Complexity: $(BIGOH length)"
  },
  "phobos/std/container/array/Array/Functions/moveAt.html": {
    "href": "phobos/std/container/array/Array/Functions/moveAt.html",
    "title": "Overloads for - moveAt | Marmos Demo",
    "keywords": "Overloads for - moveAt Module std.container.array Parent Array moveAt(i) T moveAt( size_t i ) Ditto"
  },
  "phobos/std/container/array/Array/Functions/opDollar.html": {
    "href": "phobos/std/container/array/Array/Functions/opDollar.html",
    "title": "Overloads for - opDollar | Marmos Demo",
    "keywords": "Overloads for - opDollar Module std.container.array Parent Array opDollar() size_t opDollar( ) ditto"
  },
  "phobos/std/container/array/Array/Functions/opEquals.html": {
    "href": "phobos/std/container/array/Array/Functions/opEquals.html",
    "title": "Overloads for - opEquals | Marmos Demo",
    "keywords": "Overloads for - opEquals Module std.container.array Parent Array opEquals(rhs) bool opEquals( Array rhs ) Comparison for equality. opEquals(rhs) bool opEquals( Array rhs ) ditto"
  },
  "phobos/std/container/array/Array/Functions/opIndex.html": {
    "href": "phobos/std/container/array/Array/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.container.array Parent Array opIndex(i) bool opIndex( size_t i ) Indexing operators yielding or modifyng the value at the specified index. Precondition: i < length Complexity: $(BIGOH 1)"
  },
  "phobos/std/container/array/Array/Functions/opIndexAssign.html": {
    "href": "phobos/std/container/array/Array/Functions/opIndexAssign.html",
    "title": "Overloads for - opIndexAssign | Marmos Demo",
    "keywords": "Overloads for - opIndexAssign Module std.container.array Parent Array opIndexAssign(value, i) void opIndexAssign( bool value, size_t i ) ditto"
  },
  "phobos/std/container/array/Array/Functions/opSlice.html": {
    "href": "phobos/std/container/array/Array/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.container.array Parent Array opSlice() Range opSlice( ) Returns: A range that iterates over all elements of the array in forward order. Complexity: $(BIGOH 1) opSlice(a, b) Range opSlice( size_t a, size_t b ) Returns: A range that iterates the array between two specified positions. Complexity: $(BIGOH 1)"
  },
  "phobos/std/container/array/Array/Functions/opSliceAssign.html": {
    "href": "phobos/std/container/array/Array/Functions/opSliceAssign.html",
    "title": "Overloads for - opSliceAssign | Marmos Demo",
    "keywords": "Overloads for - opSliceAssign Module std.container.array Parent Array opSliceAssign(value) void opSliceAssign( T value ) Slicing operators executing the specified operation on the entire slice. Precondition: i < j && j < length Complexity: $(BIGOH slice.length) opSliceAssign(value, i, j) void opSliceAssign( T value, size_t i, size_t j ) ditto"
  },
  "phobos/std/container/array/Array/Functions/removeAny.html": {
    "href": "phobos/std/container/array/Array/Functions/removeAny.html",
    "title": "Overloads for - removeAny | Marmos Demo",
    "keywords": "Overloads for - removeAny Module std.container.array Parent Array removeAny() T removeAny( ) Removes the last element from the array and returns it. Both stable and non-stable versions behave the same and guarantee that ranges iterating over the array are never invalidated. Precondition: empty == false Returns: The element removed. Complexity: $(BIGOH 1). Throws: Exception if the array is empty."
  },
  "phobos/std/container/array/Array/Functions/removeBack.html": {
    "href": "phobos/std/container/array/Array/Functions/removeBack.html",
    "title": "Overloads for - removeBack | Marmos Demo",
    "keywords": "Overloads for - removeBack Module std.container.array Parent Array removeBack() void removeBack( ) Removes the value from the back of the array. Both stable and non-stable versions behave the same and guarantee that ranges iterating over the array are never invalidated. Precondition: empty == false Complexity: $(BIGOH 1). Throws: Exception if the array is empty. removeBack(howMany) size_t removeBack( size_t howMany ) Removes howMany values from the back of the array. Unlike the unparameterized versions above, these functions do not throw if they could not remove howMany elements. Instead, if howMany > n , all elements are removed. The returned value is the effective number of elements removed. Both stable and non-stable versions behave the same and guarantee that ranges iterating over the array are never invalidated. Returns: The number of elements removed. Complexity: $(BIGOH howMany)."
  },
  "phobos/std/container/array/Array/Functions/reserve.html": {
    "href": "phobos/std/container/array/Array/Functions/reserve.html",
    "title": "Overloads for - reserve | Marmos Demo",
    "keywords": "Overloads for - reserve Module std.container.array Parent Array reserve(e) void reserve( size_t e ) Ensures sufficient capacity to accommodate e elements. If e < capacity , this method does nothing. Postcondition: capacity >= e Note: If the capacity is increased, one should assume that all iterators to the elements are invalidated. Complexity: at most $(BIGOH length) if e > capacity , otherwise $(BIGOH 1)."
  },
  "phobos/std/container/array/Overview.html": {
    "href": "phobos/std/container/array/Overview.html",
    "title": "Module - std.container.array | Marmos Demo",
    "keywords": "Module - std.container.array About This module provides an Array type with deterministic memory usage not reliant on the GC, as an alternative to the built-in arrays. This module is a submodule of $(MREF std, container). Source: $(PHOBOSSRC std/container/array.d) Copyright: 2010- Andrei Alexandrescu. All rights reserved by the respective holders. License: Distributed under the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at $(HTTP boost.org/LICENSE_1_0.txt)). Authors: $(HTTP erdani.com, Andrei Alexandrescu) $(SCRIPT inhibitQuickIndex = 1;) Structs Name Description Array Array type with deterministic control of memory. The memory allocated for the array is reclaimed as soon as possible; there is no reliance on the garbage collector. Array uses malloc , realloc and free for managing its own memory. Array Array specialized for bool. Packs together values efficiently by allocating one bit per element. RangeT"
  },
  "phobos/std/container/array/RangeT/Functions/back.html": {
    "href": "phobos/std/container/array/RangeT/Functions/back.html",
    "title": "Overloads for - back | Marmos Demo",
    "keywords": "Overloads for - back Module std.container.array Parent RangeT back() E back( )"
  },
  "phobos/std/container/array/RangeT/Functions/empty.html": {
    "href": "phobos/std/container/array/RangeT/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.container.array Parent RangeT empty() bool empty( )"
  },
  "phobos/std/container/array/RangeT/Functions/front.html": {
    "href": "phobos/std/container/array/RangeT/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.container.array Parent RangeT front() E front( )"
  },
  "phobos/std/container/array/RangeT/Functions/length.html": {
    "href": "phobos/std/container/array/RangeT/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.container.array Parent RangeT length() size_t length( )"
  },
  "phobos/std/container/array/RangeT/Functions/moveAt.html": {
    "href": "phobos/std/container/array/RangeT/Functions/moveAt.html",
    "title": "Overloads for - moveAt | Marmos Demo",
    "keywords": "Overloads for - moveAt Module std.container.array Parent RangeT moveAt(i) E moveAt( size_t i )"
  },
  "phobos/std/container/array/RangeT/Functions/moveBack.html": {
    "href": "phobos/std/container/array/RangeT/Functions/moveBack.html",
    "title": "Overloads for - moveBack | Marmos Demo",
    "keywords": "Overloads for - moveBack Module std.container.array Parent RangeT moveBack() E moveBack( )"
  },
  "phobos/std/container/array/RangeT/Functions/moveFront.html": {
    "href": "phobos/std/container/array/RangeT/Functions/moveFront.html",
    "title": "Overloads for - moveFront | Marmos Demo",
    "keywords": "Overloads for - moveFront Module std.container.array Parent RangeT moveFront() E moveFront( )"
  },
  "phobos/std/container/array/RangeT/Functions/opIndex.html": {
    "href": "phobos/std/container/array/RangeT/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.container.array Parent RangeT opIndex(i) E opIndex( size_t i )"
  },
  "phobos/std/container/array/RangeT/Functions/opSlice.html": {
    "href": "phobos/std/container/array/RangeT/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.container.array Parent RangeT opSlice() RangeT opSlice( ) opSlice(i, j) RangeT opSlice( size_t i, size_t j ) opSlice() RangeT!(const(A)) opSlice( ) opSlice(i, j) RangeT!(const(A)) opSlice( size_t i, size_t j )"
  },
  "phobos/std/container/array/RangeT/Functions/opSliceAssign.html": {
    "href": "phobos/std/container/array/RangeT/Functions/opSliceAssign.html",
    "title": "Overloads for - opSliceAssign | Marmos Demo",
    "keywords": "Overloads for - opSliceAssign Module std.container.array Parent RangeT opSliceAssign(value) void opSliceAssign( E value ) opSliceAssign(value, i, j) void opSliceAssign( E value, size_t i, size_t j )"
  },
  "phobos/std/container/array/RangeT/Functions/popBack.html": {
    "href": "phobos/std/container/array/RangeT/Functions/popBack.html",
    "title": "Overloads for - popBack | Marmos Demo",
    "keywords": "Overloads for - popBack Module std.container.array Parent RangeT popBack() void popBack( )"
  },
  "phobos/std/container/array/RangeT/Functions/popFront.html": {
    "href": "phobos/std/container/array/RangeT/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.container.array Parent RangeT popFront() void popFront( )"
  },
  "phobos/std/container/array/RangeT/Functions/save.html": {
    "href": "phobos/std/container/array/RangeT/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.container.array Parent RangeT save() RangeT save( )"
  },
  "phobos/std/container/array/Structs/Array.html": {
    "href": "phobos/std/container/array/Structs/Array.html",
    "title": "Struct - Array | Marmos Demo",
    "keywords": "Struct - Array Module std.container.array public struct Array { // ditto alias insert = <todo: marmos support pending>; // ditto alias linearInsert = <todo: marmos support pending>; // alias opDollar = <todo: marmos support pending>; // ditto alias stableInsert = <todo: marmos support pending>; // ditto alias stableInsertAfter = <todo: marmos support pending>; // ditto alias stableInsertBack = <todo: marmos support pending>; // ditto alias stableInsertBefore = <todo: marmos support pending>; // ditto alias stableLinearInsert = <todo: marmos support pending>; // ditto alias stableRemoveAny = <todo: marmos support pending>; // ditto alias stableRemoveBack = <todo: marmos support pending>; // ditto alias stableRemoveBack = <todo: marmos support pending>; // ditto alias stableReplace = <todo: marmos support pending>; // Returns: The last element of the array. bool back( ) ; // Ditto void back( bool value ) ; // Returns: The maximum number of elements the array can store without reallocating memory and invalidating iterators upon insertion. size_t capacity( ) ; // Removes all the elements from the array and releases allocated memory. void clear( ) ; // <bug: unknown> data( ) ; // Returns: A duplicate of the array. Array dup( ) ; // Property returning `true` if and only if the array has no elements. bool empty( ) ; // Returns: The first element of the array. bool front( ) ; // Ditto void front( bool value ) ; // Returns the number of elements in the array. size_t length( ) ; // Sets the number of elements in the array to `newLength` . If `newLength` is greater than `length` , the new elements are added to the end of the array and initialized with `false` . void length( size_t newLength ) ; // Removes all elements belonging to `r` , which must be a range obtained originally from this array. Range linearRemove( Range r ) ; // Ditto T moveAt( size_t i ) ; // Indexing operators yielding or modifyng the value at the specified index. bool opIndex( size_t i ) ; // ditto void opIndexAssign( bool value, size_t i ) ; // Returns: A range that iterates over all elements of the array in forward order. Range opSlice( ) ; // Returns: A range that iterates the array between two specified positions. Range opSlice( size_t a, size_t b ) ; // Removes the last element from the array and returns it. Both stable and non-stable versions behave the same and guarantee that ranges iterating over the array are never invalidated. T removeAny( ) ; // Removes the value from the back of the array. Both stable and non-stable versions behave the same and guarantee that ranges iterating over the array are never invalidated. void removeBack( ) ; // Removes `howMany` values from the back of the array. Unlike the unparameterized versions above, these functions do not throw if they could not remove `howMany` elements. Instead, if `howMany > n` , all elements are removed. The returned value is the effective number of elements removed. Both stable and non-stable versions behave the same and guarantee that ranges iterating over the array are never invalidated. size_t removeBack( size_t howMany ) ; // Ensures sufficient capacity to accommodate `e` elements. If `e < capacity` , this method does nothing. void reserve( size_t e ) ; // static immutable uint bitsPerWord; } About Array specialized for bool. Packs together values efficiently by allocating one bit per element. Aliases Name Description insert ditto linearInsert ditto opDollar stableInsert ditto stableInsertAfter ditto stableInsertBack ditto stableInsertBefore ditto stableLinearInsert ditto stableRemoveAny ditto stableRemoveBack ditto stableRemoveBack ditto stableReplace ditto Functions Name Description back Returns: The last element of the array. capacity Returns: The maximum number of elements the array can store without reallocating memory and invalidating iterators upon insertion. clear Removes all the elements from the array and releases allocated memory. data dup Returns: A duplicate of the array. empty Property returning true if and only if the array has no elements. front Returns: The first element of the array. length Returns the number of elements in the array. linearRemove Removes all elements belonging to r , which must be a range obtained originally from this array. moveAt Ditto opIndex Indexing operators yielding or modifyng the value at the specified index. opIndexAssign ditto opSlice Returns: A range that iterates over all elements of the array in forward order. removeAny Removes the last element from the array and returns it. Both stable and non-stable versions behave the same and guarantee that ranges iterating over the array are never invalidated. removeBack Removes the value from the back of the array. Both stable and non-stable versions behave the same and guarantee that ranges iterating over the array are never invalidated. reserve Ensures sufficient capacity to accommodate e elements. If e < capacity , this method does nothing. Variables Name Description bitsPerWord"
  },
  "phobos/std/container/array/Structs/RangeT.html": {
    "href": "phobos/std/container/array/Structs/RangeT.html",
    "title": "Struct - RangeT | Marmos Demo",
    "keywords": "Struct - RangeT Module std.container.array public struct RangeT { // alias E = <todo: marmos support pending>; // alias opDollar = <todo: marmos support pending>; // E back( ) ; // bool empty( ) ; // E front( ) ; // size_t length( ) ; // E moveAt( size_t i ) ; // E moveBack( ) ; // E moveFront( ) ; // E opIndex( size_t i ) ; // RangeT opSlice( ) ; // RangeT opSlice( size_t i, size_t j ) ; // RangeT!(const(A)) opSlice( ) ; // RangeT!(const(A)) opSlice( size_t i, size_t j ) ; // void opSliceAssign( E value ) ; // void opSliceAssign( E value, size_t i, size_t j ) ; // void popBack( ) ; // void popFront( ) ; // RangeT save( ) ; } Aliases Name Description E opDollar Functions Name Description back empty front length moveAt moveBack moveFront opIndex opSlice opSliceAssign popBack popFront save"
  },
  "phobos/std/container/binaryheap/BinaryHeap/Functions/acquire.html": {
    "href": "phobos/std/container/binaryheap/BinaryHeap/Functions/acquire.html",
    "title": "Overloads for - acquire | Marmos Demo",
    "keywords": "Overloads for - acquire Module std.container.binaryheap Parent BinaryHeap acquire(s, initialSize) void acquire( Store s, size_t initialSize ) Takes ownership of a store. After this, manipulating s may make the heap work incorrectly."
  },
  "phobos/std/container/binaryheap/BinaryHeap/Functions/assertValid.html": {
    "href": "phobos/std/container/binaryheap/BinaryHeap/Functions/assertValid.html",
    "title": "Overloads for - assertValid | Marmos Demo",
    "keywords": "Overloads for - assertValid Module std.container.binaryheap Parent BinaryHeap assertValid() void assertValid( )"
  },
  "phobos/std/container/binaryheap/BinaryHeap/Functions/assume.html": {
    "href": "phobos/std/container/binaryheap/BinaryHeap/Functions/assume.html",
    "title": "Overloads for - assume | Marmos Demo",
    "keywords": "Overloads for - assume Module std.container.binaryheap Parent BinaryHeap assume(s, initialSize) void assume( Store s, size_t initialSize ) Takes ownership of a store assuming it already was organized as a heap."
  },
  "phobos/std/container/binaryheap/BinaryHeap/Functions/capacity.html": {
    "href": "phobos/std/container/binaryheap/BinaryHeap/Functions/capacity.html",
    "title": "Overloads for - capacity | Marmos Demo",
    "keywords": "Overloads for - capacity Module std.container.binaryheap Parent BinaryHeap capacity() size_t capacity( ) Returns the capacity of the heap, which is the length of the underlying store (if the store is a range) or the capacity of the underlying store (if the store is a container)."
  },
  "phobos/std/container/binaryheap/BinaryHeap/Functions/clear.html": {
    "href": "phobos/std/container/binaryheap/BinaryHeap/Functions/clear.html",
    "title": "Overloads for - clear | Marmos Demo",
    "keywords": "Overloads for - clear Module std.container.binaryheap Parent BinaryHeap clear() void clear( ) Clears the heap by detaching it from the underlying store."
  },
  "phobos/std/container/binaryheap/BinaryHeap/Functions/conditionalInsert.html": {
    "href": "phobos/std/container/binaryheap/BinaryHeap/Functions/conditionalInsert.html",
    "title": "Overloads for - conditionalInsert | Marmos Demo",
    "keywords": "Overloads for - conditionalInsert Module std.container.binaryheap Parent BinaryHeap conditionalInsert(value) bool conditionalInsert( ElementType!(Store) value ) If the heap has room to grow, inserts value into the store and returns true . Otherwise, if $(D less(value, front)), calls $(D replaceFront(value)) and returns again true . Otherwise, leaves the heap unaffected and returns false . This method is useful in scenarios where the smallest k elements of a set of candidates must be collected."
  },
  "phobos/std/container/binaryheap/BinaryHeap/Functions/conditionalSwap.html": {
    "href": "phobos/std/container/binaryheap/BinaryHeap/Functions/conditionalSwap.html",
    "title": "Overloads for - conditionalSwap | Marmos Demo",
    "keywords": "Overloads for - conditionalSwap Module std.container.binaryheap Parent BinaryHeap conditionalSwap(value) bool conditionalSwap( ElementType!(Store) value ) Swapping is allowed if the heap is full. If $(D less(value, front)), the method exchanges store.front and value and returns true . Otherwise, it leaves the heap unaffected and returns false ."
  },
  "phobos/std/container/binaryheap/BinaryHeap/Functions/dup.html": {
    "href": "phobos/std/container/binaryheap/BinaryHeap/Functions/dup.html",
    "title": "Overloads for - dup | Marmos Demo",
    "keywords": "Overloads for - dup Module std.container.binaryheap Parent BinaryHeap dup() BinaryHeap dup( ) Returns a duplicate of the heap. The dup method is available only if the underlying store supports it."
  },
  "phobos/std/container/binaryheap/BinaryHeap/Functions/empty.html": {
    "href": "phobos/std/container/binaryheap/BinaryHeap/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.container.binaryheap Parent BinaryHeap empty() bool empty( ) Returns true if the heap is empty, false otherwise."
  },
  "phobos/std/container/binaryheap/BinaryHeap/Functions/front.html": {
    "href": "phobos/std/container/binaryheap/BinaryHeap/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.container.binaryheap Parent BinaryHeap front() ElementType!(Store) front( ) Returns a copy of the front of the heap, which is the largest element according to less ."
  },
  "phobos/std/container/binaryheap/BinaryHeap/Functions/insert.html": {
    "href": "phobos/std/container/binaryheap/BinaryHeap/Functions/insert.html",
    "title": "Overloads for - insert | Marmos Demo",
    "keywords": "Overloads for - insert Module std.container.binaryheap Parent BinaryHeap insert(value) size_t insert( ElementType!(Store) value ) Inserts value into the store. If the underlying store is a range and $(D length == capacity), throws an exception."
  },
  "phobos/std/container/binaryheap/BinaryHeap/Functions/length.html": {
    "href": "phobos/std/container/binaryheap/BinaryHeap/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.container.binaryheap Parent BinaryHeap length() size_t length( ) Returns the length of the heap."
  },
  "phobos/std/container/binaryheap/BinaryHeap/Functions/pop.html": {
    "href": "phobos/std/container/binaryheap/BinaryHeap/Functions/pop.html",
    "title": "Overloads for - pop | Marmos Demo",
    "keywords": "Overloads for - pop Module std.container.binaryheap Parent BinaryHeap pop(store) void pop( Store store )"
  },
  "phobos/std/container/binaryheap/BinaryHeap/Functions/release.html": {
    "href": "phobos/std/container/binaryheap/BinaryHeap/Functions/release.html",
    "title": "Overloads for - release | Marmos Demo",
    "keywords": "Overloads for - release Module std.container.binaryheap Parent BinaryHeap release() <bug: unknown> release( ) auto Clears the heap. Returns the portion of the store from 0 up to length , which satisfies the $(LINK2 https://en.wikipedia.org/wiki/Heap_(data_structure), heap property)."
  },
  "phobos/std/container/binaryheap/BinaryHeap/Functions/removeAny.html": {
    "href": "phobos/std/container/binaryheap/BinaryHeap/Functions/removeAny.html",
    "title": "Overloads for - removeAny | Marmos Demo",
    "keywords": "Overloads for - removeAny Module std.container.binaryheap Parent BinaryHeap removeAny() ElementType!(Store) removeAny( ) Removes the largest element from the heap and returns a copy of it. The element still resides in the heap's store. For performance reasons you may want to use removeFront with heaps of objects that are expensive to copy."
  },
  "phobos/std/container/binaryheap/BinaryHeap/Functions/removeFront.html": {
    "href": "phobos/std/container/binaryheap/BinaryHeap/Functions/removeFront.html",
    "title": "Overloads for - removeFront | Marmos Demo",
    "keywords": "Overloads for - removeFront Module std.container.binaryheap Parent BinaryHeap removeFront() void removeFront( ) Removes the largest element from the heap."
  },
  "phobos/std/container/binaryheap/BinaryHeap/Functions/replaceFront.html": {
    "href": "phobos/std/container/binaryheap/BinaryHeap/Functions/replaceFront.html",
    "title": "Overloads for - replaceFront | Marmos Demo",
    "keywords": "Overloads for - replaceFront Module std.container.binaryheap Parent BinaryHeap replaceFront(value) void replaceFront( ElementType!(Store) value ) Replaces the largest element in the store with value ."
  },
  "phobos/std/container/binaryheap/Functions/heapify.html": {
    "href": "phobos/std/container/binaryheap/Functions/heapify.html",
    "title": "Overloads for - heapify | Marmos Demo",
    "keywords": "Overloads for - heapify Module std.container.binaryheap heapify(s, initialSize) BinaryHeap!(Storeless) heapify( Store s, size_t initialSize ) Convenience function that returns a BinaryHeap!Store object initialized with s and initialSize ."
  },
  "phobos/std/container/binaryheap/Overview.html": {
    "href": "phobos/std/container/binaryheap/Overview.html",
    "title": "Module - std.container.binaryheap | Marmos Demo",
    "keywords": "Module - std.container.binaryheap About This module provides a BinaryHeap (aka priority queue) adaptor that makes a binary heap out of any user-provided random-access range. This module is a submodule of $(MREF std, container). Source: $(PHOBOSSRC std/container/binaryheap.d) Copyright: 2010- Andrei Alexandrescu. All rights reserved by the respective holders. License: Distributed under the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at $(HTTP boost.org/LICENSE_1_0.txt)). Authors: $(HTTP erdani.com, Andrei Alexandrescu) Structs Name Description BinaryHeap Implements a $(HTTP en.wikipedia.org/wiki/Binary_heap, binary heap) container on top of a given random-access range type (usually $(D T[])) or a random-access container type (usually Array!T ). The documentation of BinaryHeap will refer to the underlying range or container as the $(I store) of the heap. Functions Name Description heapify Convenience function that returns a BinaryHeap!Store object initialized with s and initialSize ."
  },
  "phobos/std/container/binaryheap/Structs/BinaryHeap.html": {
    "href": "phobos/std/container/binaryheap/Structs/BinaryHeap.html",
    "title": "Struct - BinaryHeap | Marmos Demo",
    "keywords": "Struct - BinaryHeap Module std.container.binaryheap public struct BinaryHeap { // alias buildHeap = <todo: marmos support pending>; // alias comp = <todo: marmos support pending>; // alias percolate = <todo: marmos support pending>; // ditto alias popFront = <todo: marmos support pending>; // alias Range = <todo: marmos support pending>; // Takes ownership of a store. After this, manipulating `s` may make the heap work incorrectly. void acquire( Store s, size_t initialSize ) ; // void assertValid( ) ; // Takes ownership of a store assuming it already was organized as a heap. void assume( Store s, size_t initialSize ) ; // Returns the capacity of the heap, which is the length of the underlying store (if the store is a range) or the capacity of the underlying store (if the store is a container). size_t capacity( ) ; // Clears the heap by detaching it from the underlying store. void clear( ) ; // If the heap has room to grow, inserts `value` into the store and returns `true` . Otherwise, if $(D less(value, front)), calls $(D replaceFront(value)) and returns again `true` . Otherwise, leaves the heap unaffected and returns `false` . This method is useful in scenarios where the smallest `k` elements of a set of candidates must be collected. bool conditionalInsert( ElementType!(Store) value ) ; // Swapping is allowed if the heap is full. If $(D less(value, front)), the method exchanges store.front and value and returns `true` . Otherwise, it leaves the heap unaffected and returns `false` . bool conditionalSwap( ElementType!(Store) value ) ; // Returns a duplicate of the heap. The `dup` method is available only if the underlying store supports it. BinaryHeap dup( ) ; // Returns `true` if the heap is empty, `false` otherwise. bool empty( ) ; // Returns a copy of the front of the heap, which is the largest element according to `less` . ElementType!(Store) front( ) ; // Inserts `value` into the store. If the underlying store is a range and $(D length == capacity), throws an exception. size_t insert( ElementType!(Store) value ) ; // Returns the length of the heap. size_t length( ) ; // void pop( Store store ) ; // Clears the heap. Returns the portion of the store from `0` up to `length` , which satisfies the $(LINK2 https://en.wikipedia.org/wiki/Heap_(data_structure), heap property). <bug: unknown> release( ) auto; // Removes the largest element from the heap and returns a copy of it. The element still resides in the heap's store. For performance reasons you may want to use `removeFront` with heaps of objects that are expensive to copy. ElementType!(Store) removeAny( ) ; // Removes the largest element from the heap. void removeFront( ) ; // Replaces the largest element in the store with `value` . void replaceFront( ElementType!(Store) value ) ; } About Implements a $(HTTP en.wikipedia.org/wiki/Binary_heap, binary heap) container on top of a given random-access range type (usually $(D T[])) or a random-access container type (usually Array!T ). The documentation of BinaryHeap will refer to the underlying range or container as the $(I store) of the heap. The binary heap induces structure over the underlying store such that accessing the largest element (by using the front property) is a $(BIGOH 1) operation and extracting it (by using the $(D removeFront()) method) is done fast in $(BIGOH log n) time. If less is the less-than operator, which is the default option, then BinaryHeap defines a so-called max-heap that optimizes extraction of the $(I largest) elements. To define a min-heap, instantiate BinaryHeap with $(D \"a > b\") as its predicate. Simply extracting elements from a BinaryHeap container is tantamount to lazily fetching elements of Store in descending order. Extracting elements from the BinaryHeap to completion leaves the underlying store sorted in ascending order but, again, yields elements in descending order. If Store is a range, the BinaryHeap cannot grow beyond the size of that range. If Store is a container that supports $(D insertBack), the BinaryHeap may grow by adding elements to the container. Aliases Name Description buildHeap comp percolate popFront ditto Range Functions Name Description acquire Takes ownership of a store. After this, manipulating s may make the heap work incorrectly. assertValid assume Takes ownership of a store assuming it already was organized as a heap. capacity Returns the capacity of the heap, which is the length of the underlying store (if the store is a range) or the capacity of the underlying store (if the store is a container). clear Clears the heap by detaching it from the underlying store. conditionalInsert If the heap has room to grow, inserts value into the store and returns true . Otherwise, if $(D less(value, front)), calls $(D replaceFront(value)) and returns again true . Otherwise, leaves the heap unaffected and returns false . This method is useful in scenarios where the smallest k elements of a set of candidates must be collected. conditionalSwap Swapping is allowed if the heap is full. If $(D less(value, front)), the method exchanges store.front and value and returns true . Otherwise, it leaves the heap unaffected and returns false . dup Returns a duplicate of the heap. The dup method is available only if the underlying store supports it. empty Returns true if the heap is empty, false otherwise. front Returns a copy of the front of the heap, which is the largest element according to less . insert Inserts value into the store. If the underlying store is a range and $(D length == capacity), throws an exception. length Returns the length of the heap. pop release Clears the heap. Returns the portion of the store from 0 up to length , which satisfies the $(LINK2 https://en.wikipedia.org/wiki/Heap_(data_structure), heap property). removeAny Removes the largest element from the heap and returns a copy of it. The element still resides in the heap's store. For performance reasons you may want to use removeFront with heaps of objects that are expensive to copy. removeFront Removes the largest element from the heap. replaceFront Replaces the largest element in the store with value ."
  },
  "phobos/std/container/dlist/BaseNode/Functions/connect.html": {
    "href": "phobos/std/container/dlist/BaseNode/Functions/connect.html",
    "title": "Overloads for - connect | Marmos Demo",
    "keywords": "Overloads for - connect Module std.container.dlist Parent BaseNode connect(p, n) void connect( <bug: unknown> p, <bug: unknown> n ) static"
  },
  "phobos/std/container/dlist/DList/Functions/back.html": {
    "href": "phobos/std/container/dlist/DList/Functions/back.html",
    "title": "Overloads for - back | Marmos Demo",
    "keywords": "Overloads for - back Module std.container.dlist Parent DList back() T back( ) Forward to opSlice().back . Complexity: $(BIGOH 1)"
  },
  "phobos/std/container/dlist/DList/Functions/clear.html": {
    "href": "phobos/std/container/dlist/DList/Functions/clear.html",
    "title": "Overloads for - clear | Marmos Demo",
    "keywords": "Overloads for - clear Module std.container.dlist Parent DList clear() void clear( ) Removes all contents from the DList . Postcondition: empty Complexity: $(BIGOH 1)"
  },
  "phobos/std/container/dlist/DList/Functions/dup.html": {
    "href": "phobos/std/container/dlist/DList/Functions/dup.html",
    "title": "Overloads for - dup | Marmos Demo",
    "keywords": "Overloads for - dup Module std.container.dlist Parent DList dup() DList dup( ) Duplicates the container. The elements themselves are not transitively duplicated. Complexity: $(BIGOH n)."
  },
  "phobos/std/container/dlist/DList/Functions/empty.html": {
    "href": "phobos/std/container/dlist/DList/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.container.dlist Parent DList empty() bool empty( ) Property returning true if and only if the container has no elements. Complexity: $(BIGOH 1)"
  },
  "phobos/std/container/dlist/DList/Functions/findNodeByValue.html": {
    "href": "phobos/std/container/dlist/DList/Functions/findNodeByValue.html",
    "title": "Overloads for - findNodeByValue | Marmos Demo",
    "keywords": "Overloads for - findNodeByValue Module std.container.dlist Parent DList findNodeByValue(n, value) <bug: unknown> findNodeByValue( <bug: unknown> n, T value )"
  },
  "phobos/std/container/dlist/DList/Functions/front.html": {
    "href": "phobos/std/container/dlist/DList/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.container.dlist Parent DList front() T front( ) Forward to opSlice().front . Complexity: $(BIGOH 1)"
  },
  "phobos/std/container/dlist/DList/Functions/initialize.html": {
    "href": "phobos/std/container/dlist/DList/Functions/initialize.html",
    "title": "Overloads for - initialize | Marmos Demo",
    "keywords": "Overloads for - initialize Module std.container.dlist Parent DList initialize() void initialize( )"
  },
  "phobos/std/container/dlist/DList/Functions/linearRemove.html": {
    "href": "phobos/std/container/dlist/DList/Functions/linearRemove.html",
    "title": "Overloads for - linearRemove | Marmos Demo",
    "keywords": "Overloads for - linearRemove Module std.container.dlist Parent DList linearRemove(r) Range linearRemove( Range r ) ditto linearRemove(r) Range linearRemove( Take!(Range) r ) linearRemove functions as remove , but also accepts ranges that are result the of a take operation. This is a convenient way to remove a fixed amount of elements from the range. Complexity: $(BIGOH r.walkLength)"
  },
  "phobos/std/container/dlist/DList/Functions/linearRemoveElement.html": {
    "href": "phobos/std/container/dlist/DList/Functions/linearRemoveElement.html",
    "title": "Overloads for - linearRemoveElement | Marmos Demo",
    "keywords": "Overloads for - linearRemoveElement Module std.container.dlist Parent DList linearRemoveElement(value) bool linearRemoveElement( T value ) Removes the first occurence of an element from the list in linear time. Returns: True if the element existed and was successfully removed, false otherwise. Params value T value of the node to be removed Complexity: $(BIGOH n)"
  },
  "phobos/std/container/dlist/DList/Functions/opSlice.html": {
    "href": "phobos/std/container/dlist/DList/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.container.dlist Parent DList opSlice() Range opSlice( ) Returns a range that iterates over all elements of the container, in forward order. Complexity: $(BIGOH 1)"
  },
  "phobos/std/container/dlist/DList/Functions/popFirstOf.html": {
    "href": "phobos/std/container/dlist/DList/Functions/popFirstOf.html",
    "title": "Overloads for - popFirstOf | Marmos Demo",
    "keywords": "Overloads for - popFirstOf Module std.container.dlist Parent DList popFirstOf(r) void popFirstOf( Range r ) Removes first element of r , wich must be a range obtained originally from this container, from both DList instance and range r . Compexity: $(BIGOH 1)"
  },
  "phobos/std/container/dlist/DList/Functions/popLastOf.html": {
    "href": "phobos/std/container/dlist/DList/Functions/popLastOf.html",
    "title": "Overloads for - popLastOf | Marmos Demo",
    "keywords": "Overloads for - popLastOf Module std.container.dlist Parent DList popLastOf(r) void popLastOf( Range r ) Removes last element of r , wich must be a range obtained originally from this container, from both DList instance and range r . Compexity: $(BIGOH 1)"
  },
  "phobos/std/container/dlist/DList/Functions/remove.html": {
    "href": "phobos/std/container/dlist/DList/Functions/remove.html",
    "title": "Overloads for - remove | Marmos Demo",
    "keywords": "Overloads for - remove Module std.container.dlist Parent DList remove(r) Range remove( Range r ) Removes all elements belonging to r , which must be a range obtained originally from this container. Returns: A range spanning the remaining elements in the container that initially were right after r . Complexity: $(BIGOH 1)"
  },
  "phobos/std/container/dlist/DList/Functions/removeAny.html": {
    "href": "phobos/std/container/dlist/DList/Functions/removeAny.html",
    "title": "Overloads for - removeAny | Marmos Demo",
    "keywords": "Overloads for - removeAny Module std.container.dlist Parent DList removeAny() T removeAny( ) Picks one value in an unspecified position in the container, removes it from the container, and returns it. The stable version behaves the same, but guarantees that ranges iterating over the container are never invalidated. Precondition: !empty Returns: The element removed. Complexity: $(BIGOH 1)."
  },
  "phobos/std/container/dlist/DList/Functions/removeBack.html": {
    "href": "phobos/std/container/dlist/DList/Functions/removeBack.html",
    "title": "Overloads for - removeBack | Marmos Demo",
    "keywords": "Overloads for - removeBack Module std.container.dlist Parent DList removeBack() void removeBack( ) ditto removeBack(howMany) size_t removeBack( size_t howMany ) ditto"
  },
  "phobos/std/container/dlist/DList/Functions/removeFront.html": {
    "href": "phobos/std/container/dlist/DList/Functions/removeFront.html",
    "title": "Overloads for - removeFront | Marmos Demo",
    "keywords": "Overloads for - removeFront Module std.container.dlist Parent DList removeFront() void removeFront( ) Removes the value at the front/back of the container. The stable version behaves the same, but guarantees that ranges iterating over the container are never invalidated. Precondition: !empty Complexity: $(BIGOH 1). removeFront(howMany) size_t removeFront( size_t howMany ) Removes howMany values at the front or back of the container. Unlike the unparameterized versions above, these functions do not throw if they could not remove howMany elements. Instead, if $(D howMany > n), all elements are removed. The returned value is the effective number of elements removed. The stable version behaves the same, but guarantees that ranges iterating over the container are never invalidated. Returns: The number of elements removed Complexity: $(BIGOH howMany)."
  },
  "phobos/std/container/dlist/DRange/Functions/back.html": {
    "href": "phobos/std/container/dlist/DRange/Functions/back.html",
    "title": "Overloads for - back | Marmos Demo",
    "keywords": "Overloads for - back Module std.container.dlist Parent DRange back() <bug: unknown> back( )"
  },
  "phobos/std/container/dlist/DRange/Functions/empty.html": {
    "href": "phobos/std/container/dlist/DRange/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.container.dlist Parent DRange empty() bool empty( )"
  },
  "phobos/std/container/dlist/DRange/Functions/front.html": {
    "href": "phobos/std/container/dlist/DRange/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.container.dlist Parent DRange front() <bug: unknown> front( )"
  },
  "phobos/std/container/dlist/DRange/Functions/popBack.html": {
    "href": "phobos/std/container/dlist/DRange/Functions/popBack.html",
    "title": "Overloads for - popBack | Marmos Demo",
    "keywords": "Overloads for - popBack Module std.container.dlist Parent DRange popBack() void popBack( )"
  },
  "phobos/std/container/dlist/DRange/Functions/popFront.html": {
    "href": "phobos/std/container/dlist/DRange/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.container.dlist Parent DRange popFront() void popFront( )"
  },
  "phobos/std/container/dlist/DRange/Functions/save.html": {
    "href": "phobos/std/container/dlist/DRange/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.container.dlist Parent DRange save() DRange save( ) Forward range primitive."
  },
  "phobos/std/container/dlist/Overview.html": {
    "href": "phobos/std/container/dlist/Overview.html",
    "title": "Module - std.container.dlist | Marmos Demo",
    "keywords": "Module - std.container.dlist About This module implements a generic doubly-linked list container. It can be used as a queue, dequeue or stack. This module is a submodule of $(MREF std, container). Source: $(PHOBOSSRC std/container/dlist.d) Copyright: 2010- Andrei Alexandrescu. All rights reserved by the respective holders. License: Distributed under the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at $(HTTP boost.org/LICENSE_1_0.txt)). Authors: $(HTTP erdani.com, Andrei Alexandrescu) $(SCRIPT inhibitQuickIndex = 1;) Structs Name Description BaseNode DList Implements a doubly-linked list. DRange"
  },
  "phobos/std/container/dlist/Structs/BaseNode.html": {
    "href": "phobos/std/container/dlist/Structs/BaseNode.html",
    "title": "Struct - BaseNode | Marmos Demo",
    "keywords": "Struct - BaseNode Module std.container.dlist public struct BaseNode { // void connect( <bug: unknown> p, <bug: unknown> n ) static; } Functions Name Description connect"
  },
  "phobos/std/container/dlist/Structs/DList.html": {
    "href": "phobos/std/container/dlist/Structs/DList.html",
    "title": "Struct - DList | Marmos Demo",
    "keywords": "Struct - DList Module std.container.dlist public struct DList { // ditto alias insert = <todo: marmos support pending>; // ditto alias stableInsert = <todo: marmos support pending>; // ditto alias stableInsertAfter = <todo: marmos support pending>; // ditto alias stableInsertBack = <todo: marmos support pending>; // ditto alias stableInsertBefore = <todo: marmos support pending>; // ditto alias stableInsertFront = <todo: marmos support pending>; // ditto alias stableLinearRemove = <todo: marmos support pending>; // ditto alias stableRemove = <todo: marmos support pending>; // ditto alias stableRemoveAny = <todo: marmos support pending>; // ditto alias stableRemoveBack = <todo: marmos support pending>; // ditto alias stableRemoveBack = <todo: marmos support pending>; // ditto alias stableRemoveFront = <todo: marmos support pending>; // ditto alias stableRemoveFront = <todo: marmos support pending>; // Forward to `opSlice().back` . T back( ) ; // Removes all contents from the `DList` . void clear( ) ; // Duplicates the container. The elements themselves are not transitively duplicated. DList dup( ) ; // Property returning `true` if and only if the container has no elements. bool empty( ) ; // <bug: unknown> findNodeByValue( <bug: unknown> n, T value ) ; // Forward to `opSlice().front` . T front( ) ; // void initialize( ) ; // ditto Range linearRemove( Range r ) ; // `linearRemove` functions as `remove` , but also accepts ranges that are result the of a `take` operation. This is a convenient way to remove a fixed amount of elements from the range. Range linearRemove( Take!(Range) r ) ; // Removes the first occurence of an element from the list in linear time. bool linearRemoveElement( T value ) ; // Returns a range that iterates over all elements of the container, in forward order. Range opSlice( ) ; // Removes first element of `r` , wich must be a range obtained originally from this container, from both DList instance and range `r` . void popFirstOf( Range r ) ; // Removes last element of `r` , wich must be a range obtained originally from this container, from both DList instance and range `r` . void popLastOf( Range r ) ; // Removes all elements belonging to `r` , which must be a range obtained originally from this container. Range remove( Range r ) ; // Picks one value in an unspecified position in the container, removes it from the container, and returns it. The stable version behaves the same, but guarantees that ranges iterating over the container are never invalidated. T removeAny( ) ; // ditto void removeBack( ) ; // ditto size_t removeBack( size_t howMany ) ; // Removes the value at the front/back of the container. The stable version behaves the same, but guarantees that ranges iterating over the container are never invalidated. void removeFront( ) ; // Removes `howMany` values at the front or back of the container. Unlike the unparameterized versions above, these functions do not throw if they could not remove `howMany` elements. Instead, if $(D howMany > n), all elements are removed. The returned value is the effective number of elements removed. The stable version behaves the same, but guarantees that ranges iterating over the container are never invalidated. size_t removeFront( size_t howMany ) ; } About Implements a doubly-linked list. DList uses reference semantics. Aliases Name Description insert ditto stableInsert ditto stableInsertAfter ditto stableInsertBack ditto stableInsertBefore ditto stableInsertFront ditto stableLinearRemove ditto stableRemove ditto stableRemoveAny ditto stableRemoveBack ditto stableRemoveBack ditto stableRemoveFront ditto stableRemoveFront ditto Functions Name Description back Forward to opSlice().back . clear Removes all contents from the DList . dup Duplicates the container. The elements themselves are not transitively duplicated. empty Property returning true if and only if the container has no elements. findNodeByValue front Forward to opSlice().front . initialize linearRemove ditto linearRemoveElement Removes the first occurence of an element from the list in linear time. opSlice Returns a range that iterates over all elements of the container, in forward order. popFirstOf Removes first element of r , wich must be a range obtained originally from this container, from both DList instance and range r . popLastOf Removes last element of r , wich must be a range obtained originally from this container, from both DList instance and range r . remove Removes all elements belonging to r , which must be a range obtained originally from this container. removeAny Picks one value in an unspecified position in the container, removes it from the container, and returns it. The stable version behaves the same, but guarantees that ranges iterating over the container are never invalidated. removeBack ditto removeFront Removes the value at the front/back of the container. The stable version behaves the same, but guarantees that ranges iterating over the container are never invalidated."
  },
  "phobos/std/container/dlist/Structs/DRange.html": {
    "href": "phobos/std/container/dlist/Structs/DRange.html",
    "title": "Struct - DRange | Marmos Demo",
    "keywords": "Struct - DRange Module std.container.dlist public struct DRange { // <bug: unknown> back( ) ; // bool empty( ) ; // <bug: unknown> front( ) ; // void popBack( ) ; // void popFront( ) ; // Forward range primitive. DRange save( ) ; } Functions Name Description back empty front popBack popFront save Forward range primitive."
  },
  "phobos/std/container/rbtree/Classes/RedBlackTree.html": {
    "href": "phobos/std/container/rbtree/Classes/RedBlackTree.html",
    "title": "Class - RedBlackTree | Marmos Demo",
    "keywords": "Class - RedBlackTree Module std.container.rbtree public class RedBlackTree { // Ditto alias ConstRange = <todo: marmos support pending>; // Element type for the tree alias Elem = <todo: marmos support pending>; // Ditto alias ImmutableRange = <todo: marmos support pending>; // ditto alias insert = <todo: marmos support pending>; // alias Node = <todo: marmos support pending>; // The range types for `RedBlackTree` alias Range = <todo: marmos support pending>; // alias RBNode = <todo: marmos support pending>; // Node allocate( ) static; // Node allocate( Elem v ) static; // bool arrayEqual( <bug: unknown> arr ) ; // The last element in the container Elem back( ) ; // void check( ) ; // Removes all elements from the container. void clear( ) ; // Duplicate this container. The resulting container contains a shallow copy of the elements. RedBlackTree dup( ) ; // Check if any elements exist in the container. Returns `false` if at least one element exists. bool empty( ) ; // The front element in the container Elem front( ) ; // Returns the number of elements in the container. size_t length( ) ; // Get a range from the container with all elements that are < e according to the less comparator Range lowerBound( Elem e ) ; // Ditto ConstRange lowerBound( Elem e ) ; // Ditto ImmutableRange lowerBound( Elem e ) ; // Compares two trees for equality. bool opEquals( Object rhs ) override; // Fetch a range that spans all the elements in the container. Range opSlice( ) ; // Ditto ConstRange opSlice( ) ; // Ditto ImmutableRange opSlice( ) ; // void printTree( Node n, int indent ) ; // Removes the given range from the container. Range remove( Range r ) ; // Removes the given `Take!Range` from the container Range remove( Take!(Range) r ) ; // Remove an element from the container and return its value. Elem removeAny( ) ; // Remove the back element from the container. void removeBack( ) ; // Remove the front element from the container. void removeFront( ) ; // Generates a hash for the tree. Note that with a custom comparison function it may not hold that if two rbtrees are equal, the hashes of the trees will be equal. size_t toHash( ) override; // Formats the RedBlackTree into a sink function. For more info see $(D std.format.formatValue). Note that this only is available when the element type can be formatted. Otherwise, the default toString from Object is used. void toString( <bug: unknown> sink, FormatSpec!(char) fmt ) ; // Get a range from the container with all elements that are > e according to the less comparator Range upperBound( Elem e ) ; // Ditto ConstRange upperBound( Elem e ) ; // Ditto ImmutableRange upperBound( Elem e ) ; // __enumMember doUnittest; } About Implementation of a $(LINK2 https://en.wikipedia.org/wiki/Red%E2%80%93black_tree, red-black tree) container. All inserts, removes, searches, and any function in general has complexity of $(BIGOH lg(n)). To use a different comparison than $(D \"a < b\"), pass a different operator string that can be used by $(REF binaryFun, std,functional), or pass in a function, delegate, functor, or any type where $(D less(a, b)) results in a bool value. Note that less should produce a strict ordering. That is, for two unequal elements a and b , $(D less(a, b) == !less(b, a)). $(D less(a, a)) should always equal false . If allowDuplicates is set to true , then inserting the same element more than once continues to add more elements. If it is false , duplicate elements are ignored on insertion. If duplicates are allowed, then new elements are inserted after all existing duplicate elements. Aliases Name Description _less ConstRange Ditto Elem Element type for the tree ImmutableRange Ditto insert ditto Node Range The range types for RedBlackTree RBNode Functions Name Description allocate arrayEqual back The last element in the container check clear Removes all elements from the container. dup Duplicate this container. The resulting container contains a shallow copy of the elements. empty Check if any elements exist in the container. Returns false if at least one element exists. front The front element in the container length Returns the number of elements in the container. lowerBound Get a range from the container with all elements that are < e according to the less comparator opEquals Compares two trees for equality. opSlice Fetch a range that spans all the elements in the container. printTree remove Removes the given range from the container. removeAny Remove an element from the container and return its value. removeBack Remove the back element from the container. removeFront Remove the front element from the container. toHash Generates a hash for the tree. Note that with a custom comparison function it may not hold that if two rbtrees are equal, the hashes of the trees will be equal. toString Formats the RedBlackTree into a sink function. For more info see $(D std.format.formatValue). Note that this only is available when the element type can be formatted. Otherwise, the default toString from Object is used. upperBound Get a range from the container with all elements that are > e according to the less comparator Variables Name Description doUnittest"
  },
  "phobos/std/container/rbtree/Functions/redBlackTree.html": {
    "href": "phobos/std/container/rbtree/Functions/redBlackTree.html",
    "title": "Overloads for - redBlackTree | Marmos Demo",
    "keywords": "Overloads for - redBlackTree Module std.container.rbtree redBlackTree(elems) <bug: unknown> redBlackTree( <bug: unknown> elems ) auto Convenience function for creating a RedBlackTree!E from a list of values. Params allowDuplicates <parameter not found> Whether duplicates should be allowed (optional, default: false) less <parameter not found> predicate to sort by (optional) elems <bug: unknown> elements to insert into the rbtree (variadic arguments) range <parameter not found> range elements to insert into the rbtree (alternative to elems) redBlackTree(elems) <bug: unknown> redBlackTree( <bug: unknown> elems ) auto Ditto redBlackTree(elems) <bug: unknown> redBlackTree( <bug: unknown> elems ) auto Ditto redBlackTree(elems) <bug: unknown> redBlackTree( <bug: unknown> elems ) auto Ditto redBlackTree(range) <bug: unknown> redBlackTree( Stuff range ) auto Ditto redBlackTree(range) <bug: unknown> redBlackTree( Stuff range ) auto Ditto redBlackTree(range) <bug: unknown> redBlackTree( Stuff range ) auto Ditto redBlackTree(range) <bug: unknown> redBlackTree( Stuff range ) auto Ditto"
  },
  "phobos/std/container/rbtree/Overview.html": {
    "href": "phobos/std/container/rbtree/Overview.html",
    "title": "Module - std.container.rbtree | Marmos Demo",
    "keywords": "Module - std.container.rbtree About This module implements a red-black tree container. This module is a submodule of $(MREF std, container). Source: $(PHOBOSSRC std/container/rbtree.d) Copyright: Red-black tree code copyright (C) 2008- by Steven Schveighoffer. Other code copyright 2010- Andrei Alexandrescu. All rights reserved by the respective holders. License: Distributed under the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at $(HTTP boost.org/LICENSE_1_0.txt)). Authors: Steven Schveighoffer, $(HTTP erdani.com, Andrei Alexandrescu) Classes Name Description RedBlackTree Implementation of a $(LINK2 https://en.wikipedia.org/wiki/Red%E2%80%93black_tree, red-black tree) container. Structs Name Description RBNode RBRange Functions Name Description redBlackTree Convenience function for creating a RedBlackTree!E from a list of values."
  },
  "phobos/std/container/rbtree/RBNode/Functions/dup.html": {
    "href": "phobos/std/container/rbtree/RBNode/Functions/dup.html",
    "title": "Overloads for - dup | Marmos Demo",
    "keywords": "Overloads for - dup Module std.container.rbtree Parent RBNode dup(alloc) Node dup( <bug: unknown> alloc ) dup() Node dup( )"
  },
  "phobos/std/container/rbtree/RBNode/Functions/isLeftNode.html": {
    "href": "phobos/std/container/rbtree/RBNode/Functions/isLeftNode.html",
    "title": "Overloads for - isLeftNode | Marmos Demo",
    "keywords": "Overloads for - isLeftNode Module std.container.rbtree Parent RBNode isLeftNode() bool isLeftNode( ) Returns true if this node is a left child. Note that this should always return a value because the root has a parent which is the marker node."
  },
  "phobos/std/container/rbtree/RBNode/Functions/left.html": {
    "href": "phobos/std/container/rbtree/RBNode/Functions/left.html",
    "title": "Overloads for - left | Marmos Demo",
    "keywords": "Overloads for - left Module std.container.rbtree Parent RBNode left() <bug: unknown> left( ) Get the left child left(newNode) Node left( Node newNode ) Set the left child. Also updates the new child's parent node. This does not update the previous child. $(RED Warning: If the node this is called on is a local variable, a stack pointer can be escaped through newNode.parent . It's marked @trusted only for backwards compatibility.) Returns newNode"
  },
  "phobos/std/container/rbtree/RBNode/Functions/leftmost.html": {
    "href": "phobos/std/container/rbtree/RBNode/Functions/leftmost.html",
    "title": "Overloads for - leftmost | Marmos Demo",
    "keywords": "Overloads for - leftmost Module std.container.rbtree Parent RBNode leftmost() <bug: unknown> leftmost( ) Return the leftmost descendant of this node."
  },
  "phobos/std/container/rbtree/RBNode/Functions/next.html": {
    "href": "phobos/std/container/rbtree/RBNode/Functions/next.html",
    "title": "Overloads for - next | Marmos Demo",
    "keywords": "Overloads for - next Module std.container.rbtree Parent RBNode next() <bug: unknown> next( ) Returns the next valued node in the tree. You should never call this on the marker node, as it is assumed that there is a valid next node."
  },
  "phobos/std/container/rbtree/RBNode/Functions/parent.html": {
    "href": "phobos/std/container/rbtree/RBNode/Functions/parent.html",
    "title": "Overloads for - parent | Marmos Demo",
    "keywords": "Overloads for - parent Module std.container.rbtree Parent RBNode parent() <bug: unknown> parent( ) Get the parent"
  },
  "phobos/std/container/rbtree/RBNode/Functions/prev.html": {
    "href": "phobos/std/container/rbtree/RBNode/Functions/prev.html",
    "title": "Overloads for - prev | Marmos Demo",
    "keywords": "Overloads for - prev Module std.container.rbtree Parent RBNode prev() <bug: unknown> prev( ) Returns the previous valued node in the tree. You should never call this on the leftmost node of the tree as it is assumed that there is a valid previous node."
  },
  "phobos/std/container/rbtree/RBNode/Functions/remove.html": {
    "href": "phobos/std/container/rbtree/RBNode/Functions/remove.html",
    "title": "Overloads for - remove | Marmos Demo",
    "keywords": "Overloads for - remove Module std.container.rbtree Parent RBNode remove(end) Node remove( Node end ) Remove this node from the tree. The 'end' node is used as the marker which is root's parent. Note that this cannot be null! Returns the next highest valued node in the tree after this one, or end if this was the highest-valued node."
  },
  "phobos/std/container/rbtree/RBNode/Functions/right.html": {
    "href": "phobos/std/container/rbtree/RBNode/Functions/right.html",
    "title": "Overloads for - right | Marmos Demo",
    "keywords": "Overloads for - right Module std.container.rbtree Parent RBNode right() <bug: unknown> right( ) Get the right child right(newNode) Node right( Node newNode ) Set the right child. Also updates the new child's parent node. This does not update the previous child. $(RED Warning: If the node this is called on is a local variable, a stack pointer can be escaped through newNode.parent . It's marked @trusted only for backwards compatibility.) Returns newNode"
  },
  "phobos/std/container/rbtree/RBNode/Functions/rightmost.html": {
    "href": "phobos/std/container/rbtree/RBNode/Functions/rightmost.html",
    "title": "Overloads for - rightmost | Marmos Demo",
    "keywords": "Overloads for - rightmost Module std.container.rbtree Parent RBNode rightmost() <bug: unknown> rightmost( ) Return the rightmost descendant of this node"
  },
  "phobos/std/container/rbtree/RBNode/Functions/rotateL.html": {
    "href": "phobos/std/container/rbtree/RBNode/Functions/rotateL.html",
    "title": "Overloads for - rotateL | Marmos Demo",
    "keywords": "Overloads for - rotateL Module std.container.rbtree Parent RBNode rotateL() Node rotateL( ) Rotate left. This performs the following operations !!Unsupported comment block type: marmos.generic.model.DocCommentUnorderedListBlock!!"
  },
  "phobos/std/container/rbtree/RBNode/Functions/rotateR.html": {
    "href": "phobos/std/container/rbtree/RBNode/Functions/rotateR.html",
    "title": "Overloads for - rotateR | Marmos Demo",
    "keywords": "Overloads for - rotateR Module std.container.rbtree Parent RBNode rotateR() Node rotateR( ) Rotate right. This performs the following operations !!Unsupported comment block type: marmos.generic.model.DocCommentUnorderedListBlock!!"
  },
  "phobos/std/container/rbtree/RBNode/Functions/setColor.html": {
    "href": "phobos/std/container/rbtree/RBNode/Functions/setColor.html",
    "title": "Overloads for - setColor | Marmos Demo",
    "keywords": "Overloads for - setColor Module std.container.rbtree Parent RBNode setColor(end) void setColor( Node end ) Set the color of the node after it is inserted. This performs an update to the whole tree, possibly rotating nodes to keep the Red-Black properties correct. This is an O(lg(n)) operation, where n is the number of nodes in the tree. end is the marker node, which is the parent of the topmost valid node."
  },
  "phobos/std/container/rbtree/RBRange/Functions/back.html": {
    "href": "phobos/std/container/rbtree/RBRange/Functions/back.html",
    "title": "Overloads for - back | Marmos Demo",
    "keywords": "Overloads for - back Module std.container.rbtree Parent RBRange back() Elem back( ) Returns the last element in the range"
  },
  "phobos/std/container/rbtree/RBRange/Functions/empty.html": {
    "href": "phobos/std/container/rbtree/RBRange/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.container.rbtree Parent RBRange empty() bool empty( ) Returns true if the range is empty"
  },
  "phobos/std/container/rbtree/RBRange/Functions/front.html": {
    "href": "phobos/std/container/rbtree/RBRange/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.container.rbtree Parent RBRange front() Elem front( ) Returns the first element in the range"
  },
  "phobos/std/container/rbtree/RBRange/Functions/popBack.html": {
    "href": "phobos/std/container/rbtree/RBRange/Functions/popBack.html",
    "title": "Overloads for - popBack | Marmos Demo",
    "keywords": "Overloads for - popBack Module std.container.rbtree Parent RBRange popBack() void popBack( ) pop the back element from the range Complexity: amortized $(BIGOH 1)"
  },
  "phobos/std/container/rbtree/RBRange/Functions/popFront.html": {
    "href": "phobos/std/container/rbtree/RBRange/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.container.rbtree Parent RBRange popFront() void popFront( ) pop the front element from the range Complexity: amortized $(BIGOH 1)"
  },
  "phobos/std/container/rbtree/RBRange/Functions/save.html": {
    "href": "phobos/std/container/rbtree/RBRange/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.container.rbtree Parent RBRange save() RBRange save( ) Trivial save implementation, needed for isForwardRange."
  },
  "phobos/std/container/rbtree/RedBlackTree/Functions/allocate.html": {
    "href": "phobos/std/container/rbtree/RedBlackTree/Functions/allocate.html",
    "title": "Overloads for - allocate | Marmos Demo",
    "keywords": "Overloads for - allocate Module std.container.rbtree Parent RedBlackTree allocate() Node allocate( ) static allocate(v) Node allocate( Elem v ) static"
  },
  "phobos/std/container/rbtree/RedBlackTree/Functions/arrayEqual.html": {
    "href": "phobos/std/container/rbtree/RedBlackTree/Functions/arrayEqual.html",
    "title": "Overloads for - arrayEqual | Marmos Demo",
    "keywords": "Overloads for - arrayEqual Module std.container.rbtree Parent RedBlackTree arrayEqual(arr) bool arrayEqual( <bug: unknown> arr )"
  },
  "phobos/std/container/rbtree/RedBlackTree/Functions/back.html": {
    "href": "phobos/std/container/rbtree/RedBlackTree/Functions/back.html",
    "title": "Overloads for - back | Marmos Demo",
    "keywords": "Overloads for - back Module std.container.rbtree Parent RedBlackTree back() Elem back( ) The last element in the container Complexity: $(BIGOH log(n))"
  },
  "phobos/std/container/rbtree/RedBlackTree/Functions/check.html": {
    "href": "phobos/std/container/rbtree/RedBlackTree/Functions/check.html",
    "title": "Overloads for - check | Marmos Demo",
    "keywords": "Overloads for - check Module std.container.rbtree Parent RedBlackTree check() void check( )"
  },
  "phobos/std/container/rbtree/RedBlackTree/Functions/clear.html": {
    "href": "phobos/std/container/rbtree/RedBlackTree/Functions/clear.html",
    "title": "Overloads for - clear | Marmos Demo",
    "keywords": "Overloads for - clear Module std.container.rbtree Parent RedBlackTree clear() void clear( ) Removes all elements from the container. Complexity: $(BIGOH 1)"
  },
  "phobos/std/container/rbtree/RedBlackTree/Functions/dup.html": {
    "href": "phobos/std/container/rbtree/RedBlackTree/Functions/dup.html",
    "title": "Overloads for - dup | Marmos Demo",
    "keywords": "Overloads for - dup Module std.container.rbtree Parent RedBlackTree dup() RedBlackTree dup( ) Duplicate this container. The resulting container contains a shallow copy of the elements. Complexity: $(BIGOH n)"
  },
  "phobos/std/container/rbtree/RedBlackTree/Functions/empty.html": {
    "href": "phobos/std/container/rbtree/RedBlackTree/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.container.rbtree Parent RedBlackTree empty() bool empty( ) Check if any elements exist in the container. Returns false if at least one element exists."
  },
  "phobos/std/container/rbtree/RedBlackTree/Functions/front.html": {
    "href": "phobos/std/container/rbtree/RedBlackTree/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.container.rbtree Parent RedBlackTree front() Elem front( ) The front element in the container Complexity: $(BIGOH 1)"
  },
  "phobos/std/container/rbtree/RedBlackTree/Functions/length.html": {
    "href": "phobos/std/container/rbtree/RedBlackTree/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.container.rbtree Parent RedBlackTree length() size_t length( ) Returns the number of elements in the container. Complexity: $(BIGOH 1)."
  },
  "phobos/std/container/rbtree/RedBlackTree/Functions/lowerBound.html": {
    "href": "phobos/std/container/rbtree/RedBlackTree/Functions/lowerBound.html",
    "title": "Overloads for - lowerBound | Marmos Demo",
    "keywords": "Overloads for - lowerBound Module std.container.rbtree Parent RedBlackTree lowerBound(e) Range lowerBound( Elem e ) Get a range from the container with all elements that are < e according to the less comparator Complexity: $(BIGOH log(n)) lowerBound(e) ConstRange lowerBound( Elem e ) Ditto lowerBound(e) ImmutableRange lowerBound( Elem e ) Ditto"
  },
  "phobos/std/container/rbtree/RedBlackTree/Functions/opEquals.html": {
    "href": "phobos/std/container/rbtree/RedBlackTree/Functions/opEquals.html",
    "title": "Overloads for - opEquals | Marmos Demo",
    "keywords": "Overloads for - opEquals Module std.container.rbtree Parent RedBlackTree opEquals(rhs) bool opEquals( Object rhs ) override Compares two trees for equality. Complexity: $(BIGOH n)"
  },
  "phobos/std/container/rbtree/RedBlackTree/Functions/opSlice.html": {
    "href": "phobos/std/container/rbtree/RedBlackTree/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.container.rbtree Parent RedBlackTree opSlice() Range opSlice( ) Fetch a range that spans all the elements in the container. Complexity: $(BIGOH 1) opSlice() ConstRange opSlice( ) Ditto opSlice() ImmutableRange opSlice( ) Ditto"
  },
  "phobos/std/container/rbtree/RedBlackTree/Functions/printTree.html": {
    "href": "phobos/std/container/rbtree/RedBlackTree/Functions/printTree.html",
    "title": "Overloads for - printTree | Marmos Demo",
    "keywords": "Overloads for - printTree Module std.container.rbtree Parent RedBlackTree printTree(n, indent) void printTree( Node n, int indent )"
  },
  "phobos/std/container/rbtree/RedBlackTree/Functions/remove.html": {
    "href": "phobos/std/container/rbtree/RedBlackTree/Functions/remove.html",
    "title": "Overloads for - remove | Marmos Demo",
    "keywords": "Overloads for - remove Module std.container.rbtree Parent RedBlackTree remove(r) Range remove( Range r ) Removes the given range from the container. Returns: A range containing all of the elements that were after the given range. Complexity: $(BIGOH m log(n)) (where m is the number of elements in the range) remove(r) Range remove( Take!(Range) r ) Removes the given Take!Range from the container Returns: A range containing all of the elements that were after the given range. Complexity: $(BIGOH m log(n)) (where m is the number of elements in the range)"
  },
  "phobos/std/container/rbtree/RedBlackTree/Functions/removeAny.html": {
    "href": "phobos/std/container/rbtree/RedBlackTree/Functions/removeAny.html",
    "title": "Overloads for - removeAny | Marmos Demo",
    "keywords": "Overloads for - removeAny Module std.container.rbtree Parent RedBlackTree removeAny() Elem removeAny( ) Remove an element from the container and return its value. Complexity: $(BIGOH log(n))"
  },
  "phobos/std/container/rbtree/RedBlackTree/Functions/removeBack.html": {
    "href": "phobos/std/container/rbtree/RedBlackTree/Functions/removeBack.html",
    "title": "Overloads for - removeBack | Marmos Demo",
    "keywords": "Overloads for - removeBack Module std.container.rbtree Parent RedBlackTree removeBack() void removeBack( ) Remove the back element from the container. Complexity: $(BIGOH log(n))"
  },
  "phobos/std/container/rbtree/RedBlackTree/Functions/removeFront.html": {
    "href": "phobos/std/container/rbtree/RedBlackTree/Functions/removeFront.html",
    "title": "Overloads for - removeFront | Marmos Demo",
    "keywords": "Overloads for - removeFront Module std.container.rbtree Parent RedBlackTree removeFront() void removeFront( ) Remove the front element from the container. Complexity: $(BIGOH log(n))"
  },
  "phobos/std/container/rbtree/RedBlackTree/Functions/toHash.html": {
    "href": "phobos/std/container/rbtree/RedBlackTree/Functions/toHash.html",
    "title": "Overloads for - toHash | Marmos Demo",
    "keywords": "Overloads for - toHash Module std.container.rbtree Parent RedBlackTree toHash() size_t toHash( ) override Generates a hash for the tree. Note that with a custom comparison function it may not hold that if two rbtrees are equal, the hashes of the trees will be equal."
  },
  "phobos/std/container/rbtree/RedBlackTree/Functions/toString.html": {
    "href": "phobos/std/container/rbtree/RedBlackTree/Functions/toString.html",
    "title": "Overloads for - toString | Marmos Demo",
    "keywords": "Overloads for - toString Module std.container.rbtree Parent RedBlackTree toString(sink, fmt) void toString( <bug: unknown> sink, FormatSpec!(char) fmt ) Formats the RedBlackTree into a sink function. For more info see $(D std.format.formatValue). Note that this only is available when the element type can be formatted. Otherwise, the default toString from Object is used."
  },
  "phobos/std/container/rbtree/RedBlackTree/Functions/upperBound.html": {
    "href": "phobos/std/container/rbtree/RedBlackTree/Functions/upperBound.html",
    "title": "Overloads for - upperBound | Marmos Demo",
    "keywords": "Overloads for - upperBound Module std.container.rbtree Parent RedBlackTree upperBound(e) Range upperBound( Elem e ) Get a range from the container with all elements that are > e according to the less comparator Complexity: $(BIGOH log(n)) upperBound(e) ConstRange upperBound( Elem e ) Ditto upperBound(e) ImmutableRange upperBound( Elem e ) Ditto"
  },
  "phobos/std/container/rbtree/Structs/RBNode.html": {
    "href": "phobos/std/container/rbtree/Structs/RBNode.html",
    "title": "Struct - RBNode | Marmos Demo",
    "keywords": "Struct - RBNode Module std.container.rbtree public struct RBNode { // alias Node = <todo: marmos support pending>; // Node dup( <bug: unknown> alloc ) ; // Node dup( ) ; // Returns true if this node is a left child. bool isLeftNode( ) ; // Get the left child <bug: unknown> left( ) ; // Set the left child. Also updates the new child's parent node. This does not update the previous child. Node left( Node newNode ) ; // Return the leftmost descendant of this node. <bug: unknown> leftmost( ) ; // Returns the next valued node in the tree. <bug: unknown> next( ) ; // Get the parent <bug: unknown> parent( ) ; // Returns the previous valued node in the tree. <bug: unknown> prev( ) ; // Remove this node from the tree. The 'end' node is used as the marker which is root's parent. Note that this cannot be null! Node remove( Node end ) ; // Get the right child <bug: unknown> right( ) ; // Set the right child. Also updates the new child's parent node. This does not update the previous child. Node right( Node newNode ) ; // Return the rightmost descendant of this node <bug: unknown> rightmost( ) ; // Node rotateL( ) ; // Node rotateR( ) ; // Set the color of the node after it is inserted. This performs an update to the whole tree, possibly rotating nodes to keep the Red-Black properties correct. This is an O(lg(n)) operation, where n is the number of nodes in the tree. void setColor( Node end ) ; // The color of the node. Color color; // The value held by this node V value; } Aliases Name Description Node Functions Name Description dup isLeftNode Returns true if this node is a left child. left Get the left child leftmost Return the leftmost descendant of this node. next Returns the next valued node in the tree. parent Get the parent prev Returns the previous valued node in the tree. remove Remove this node from the tree. The 'end' node is used as the marker which is root's parent. Note that this cannot be null! right Get the right child rightmost Return the rightmost descendant of this node rotateL rotateR setColor Set the color of the node after it is inserted. This performs an update to the whole tree, possibly rotating nodes to keep the Red-Black properties correct. This is an O(lg(n)) operation, where n is the number of nodes in the tree. Variables Name Description color The color of the node. value The value held by this node"
  },
  "phobos/std/container/rbtree/Structs/RBRange.html": {
    "href": "phobos/std/container/rbtree/Structs/RBRange.html",
    "title": "Struct - RBRange | Marmos Demo",
    "keywords": "Struct - RBRange Module std.container.rbtree public struct RBRange { // alias Elem = <todo: marmos support pending>; // alias Node = <todo: marmos support pending>; // Returns the last element in the range Elem back( ) ; // Returns `true` if the range is empty bool empty( ) ; // Returns the first element in the range Elem front( ) ; // pop the back element from the range void popBack( ) ; // pop the front element from the range void popFront( ) ; // Trivial save implementation, needed for `isForwardRange`. RBRange save( ) ; } Aliases Name Description Elem Node Functions Name Description back Returns the last element in the range empty Returns true if the range is empty front Returns the first element in the range popBack pop the back element from the range popFront pop the front element from the range save Trivial save implementation, needed for isForwardRange."
  },
  "phobos/std/container/slist/Overview.html": {
    "href": "phobos/std/container/slist/Overview.html",
    "title": "Module - std.container.slist | Marmos Demo",
    "keywords": "Module - std.container.slist About This module implements a singly-linked list container. It can be used as a stack. This module is a submodule of $(MREF std, container). Source: $(PHOBOSSRC std/container/slist.d) Copyright: 2010- Andrei Alexandrescu. All rights reserved by the respective holders. License: Distributed under the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at $(HTTP boost.org/LICENSE_1_0.txt)). Authors: $(HTTP erdani.com, Andrei Alexandrescu) $(SCRIPT inhibitQuickIndex = 1;) Structs Name Description SList Implements a simple and fast singly-linked list. It can be used as a stack."
  },
  "phobos/std/container/slist/SList/Functions/clear.html": {
    "href": "phobos/std/container/slist/SList/Functions/clear.html",
    "title": "Overloads for - clear | Marmos Demo",
    "keywords": "Overloads for - clear Module std.container.slist Parent SList clear() void clear( ) Removes all contents from the SList . Postcondition: empty Complexity: $(BIGOH 1)"
  },
  "phobos/std/container/slist/SList/Functions/dup.html": {
    "href": "phobos/std/container/slist/SList/Functions/dup.html",
    "title": "Overloads for - dup | Marmos Demo",
    "keywords": "Overloads for - dup Module std.container.slist Parent SList dup() SList dup( ) Duplicates the container. The elements themselves are not transitively duplicated. Complexity: $(BIGOH n)."
  },
  "phobos/std/container/slist/SList/Functions/empty.html": {
    "href": "phobos/std/container/slist/SList/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.container.slist Parent SList empty() bool empty( ) Property returning true if and only if the container has no elements. Complexity: $(BIGOH 1)"
  },
  "phobos/std/container/slist/SList/Functions/findLastNode.html": {
    "href": "phobos/std/container/slist/SList/Functions/findLastNode.html",
    "title": "Overloads for - findLastNode | Marmos Demo",
    "keywords": "Overloads for - findLastNode Module std.container.slist Parent SList findLastNode(n) <bug: unknown> findLastNode( <bug: unknown> n ) static findLastNode(n, limit) <bug: unknown> findLastNode( <bug: unknown> n, size_t limit ) static"
  },
  "phobos/std/container/slist/SList/Functions/findNode.html": {
    "href": "phobos/std/container/slist/SList/Functions/findNode.html",
    "title": "Overloads for - findNode | Marmos Demo",
    "keywords": "Overloads for - findNode Module std.container.slist Parent SList findNode(n, findMe) <bug: unknown> findNode( <bug: unknown> n, <bug: unknown> findMe ) static"
  },
  "phobos/std/container/slist/SList/Functions/findNodeByValue.html": {
    "href": "phobos/std/container/slist/SList/Functions/findNodeByValue.html",
    "title": "Overloads for - findNodeByValue | Marmos Demo",
    "keywords": "Overloads for - findNodeByValue Module std.container.slist Parent SList findNodeByValue(n, value) <bug: unknown> findNodeByValue( <bug: unknown> n, T value ) static"
  },
  "phobos/std/container/slist/SList/Functions/front.html": {
    "href": "phobos/std/container/slist/SList/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.container.slist Parent SList front() T front( ) Forward to opSlice().front . Complexity: $(BIGOH 1)"
  },
  "phobos/std/container/slist/SList/Functions/initialize.html": {
    "href": "phobos/std/container/slist/SList/Functions/initialize.html",
    "title": "Overloads for - initialize | Marmos Demo",
    "keywords": "Overloads for - initialize Module std.container.slist Parent SList initialize() void initialize( )"
  },
  "phobos/std/container/slist/SList/Functions/linearRemove.html": {
    "href": "phobos/std/container/slist/SList/Functions/linearRemove.html",
    "title": "Overloads for - linearRemove | Marmos Demo",
    "keywords": "Overloads for - linearRemove Module std.container.slist Parent SList linearRemove(r) Range linearRemove( Range r ) Removes a range from the list in linear time. Returns: An empty range. Complexity: $(BIGOH n) linearRemove(r) Range linearRemove( Take!(Range) r ) Removes a Take!Range from the list in linear time. Returns: A range comprehending the elements after the removed range. Complexity: $(BIGOH n)"
  },
  "phobos/std/container/slist/SList/Functions/linearRemoveElement.html": {
    "href": "phobos/std/container/slist/SList/Functions/linearRemoveElement.html",
    "title": "Overloads for - linearRemoveElement | Marmos Demo",
    "keywords": "Overloads for - linearRemoveElement Module std.container.slist Parent SList linearRemoveElement(value) bool linearRemoveElement( T value ) Removes the first occurence of an element from the list in linear time. Returns: True if the element existed and was successfully removed, false otherwise. Params value T value of the node to be removed Complexity: $(BIGOH n)"
  },
  "phobos/std/container/slist/SList/Functions/opEquals.html": {
    "href": "phobos/std/container/slist/SList/Functions/opEquals.html",
    "title": "Overloads for - opEquals | Marmos Demo",
    "keywords": "Overloads for - opEquals Module std.container.slist Parent SList opEquals(rhs) bool opEquals( SList rhs ) Comparison for equality. Complexity: $(BIGOH min(n, n1)) where n1 is the number of elements in rhs . opEquals(rhs) bool opEquals( SList rhs ) ditto"
  },
  "phobos/std/container/slist/SList/Functions/opSlice.html": {
    "href": "phobos/std/container/slist/SList/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.container.slist Parent SList opSlice() Range opSlice( ) Returns a range that iterates over all elements of the container, in forward order. Complexity: $(BIGOH 1)"
  },
  "phobos/std/container/slist/SList/Functions/removeAny.html": {
    "href": "phobos/std/container/slist/SList/Functions/removeAny.html",
    "title": "Overloads for - removeAny | Marmos Demo",
    "keywords": "Overloads for - removeAny Module std.container.slist Parent SList removeAny() T removeAny( ) Picks one value in an unspecified position in the container, removes it from the container, and returns it. The stable version behaves the same, but guarantees that ranges iterating over the container are never invalidated. Precondition: !empty Returns: The element removed. Complexity: $(BIGOH 1)."
  },
  "phobos/std/container/slist/SList/Functions/removeFront.html": {
    "href": "phobos/std/container/slist/SList/Functions/removeFront.html",
    "title": "Overloads for - removeFront | Marmos Demo",
    "keywords": "Overloads for - removeFront Module std.container.slist Parent SList removeFront() void removeFront( ) Removes the value at the front of the container. The stable version behaves the same, but guarantees that ranges iterating over the container are never invalidated. Precondition: !empty Complexity: $(BIGOH 1). removeFront(howMany) size_t removeFront( size_t howMany ) Removes howMany values at the front or back of the container. Unlike the unparameterized versions above, these functions do not throw if they could not remove howMany elements. Instead, if $(D howMany > n), all elements are removed. The returned value is the effective number of elements removed. The stable version behaves the same, but guarantees that ranges iterating over the container are never invalidated. Returns: The number of elements removed Complexity: $(BIGOH howMany log(n))."
  },
  "phobos/std/container/slist/SList/Functions/reverse.html": {
    "href": "phobos/std/container/slist/SList/Functions/reverse.html",
    "title": "Overloads for - reverse | Marmos Demo",
    "keywords": "Overloads for - reverse Module std.container.slist Parent SList reverse() void reverse( ) Reverses SList in-place. Performs no memory allocation. Complexity: $(BIGOH n)"
  },
  "phobos/std/container/slist/Structs/SList.html": {
    "href": "phobos/std/container/slist/Structs/SList.html",
    "title": "Struct - SList | Marmos Demo",
    "keywords": "Struct - SList Module std.container.slist public struct SList { // ditto alias insert = <todo: marmos support pending>; // ditto alias stableInsert = <todo: marmos support pending>; // ditto alias stableInsertAfter = <todo: marmos support pending>; // ditto alias stableInsertFront = <todo: marmos support pending>; // ditto alias stableLinearRemove = <todo: marmos support pending>; // ditto alias stableRemoveAny = <todo: marmos support pending>; // ditto alias stableRemoveFront = <todo: marmos support pending>; // ditto alias stableRemoveFront = <todo: marmos support pending>; // Removes all contents from the `SList` . void clear( ) ; // Duplicates the container. The elements themselves are not transitively duplicated. SList dup( ) ; // Property returning `true` if and only if the container has no elements. bool empty( ) ; // <bug: unknown> findLastNode( <bug: unknown> n ) static; // <bug: unknown> findLastNode( <bug: unknown> n, size_t limit ) static; // <bug: unknown> findNode( <bug: unknown> n, <bug: unknown> findMe ) static; // <bug: unknown> findNodeByValue( <bug: unknown> n, T value ) static; // Forward to `opSlice().front` . T front( ) ; // void initialize( ) ; // Removes a range from the list in linear time. Range linearRemove( Range r ) ; // Removes a `Take!Range` from the list in linear time. Range linearRemove( Take!(Range) r ) ; // Removes the first occurence of an element from the list in linear time. bool linearRemoveElement( T value ) ; // Comparison for equality. bool opEquals( SList rhs ) ; // ditto bool opEquals( SList rhs ) ; // Returns a range that iterates over all elements of the container, in forward order. Range opSlice( ) ; // Picks one value in an unspecified position in the container, removes it from the container, and returns it. The stable version behaves the same, but guarantees that ranges iterating over the container are never invalidated. T removeAny( ) ; // Removes the value at the front of the container. The stable version behaves the same, but guarantees that ranges iterating over the container are never invalidated. void removeFront( ) ; // Removes `howMany` values at the front or back of the container. Unlike the unparameterized versions above, these functions do not throw if they could not remove `howMany` elements. Instead, if $(D howMany > n), all elements are removed. The returned value is the effective number of elements removed. The stable version behaves the same, but guarantees that ranges iterating over the container are never invalidated. size_t removeFront( size_t howMany ) ; // Reverses SList in-place. Performs no memory allocation. void reverse( ) ; } About Implements a simple and fast singly-linked list. It can be used as a stack. SList uses reference semantics. Aliases Name Description insert ditto stableInsert ditto stableInsertAfter ditto stableInsertFront ditto stableLinearRemove ditto stableRemoveAny ditto stableRemoveFront ditto stableRemoveFront ditto Functions Name Description clear Removes all contents from the SList . dup Duplicates the container. The elements themselves are not transitively duplicated. empty Property returning true if and only if the container has no elements. findLastNode findNode findNodeByValue front Forward to opSlice().front . initialize linearRemove Removes a range from the list in linear time. linearRemoveElement Removes the first occurence of an element from the list in linear time. opEquals Comparison for equality. opSlice Returns a range that iterates over all elements of the container, in forward order. removeAny Picks one value in an unspecified position in the container, removes it from the container, and returns it. The stable version behaves the same, but guarantees that ranges iterating over the container are never invalidated. removeFront Removes the value at the front of the container. The stable version behaves the same, but guarantees that ranges iterating over the container are never invalidated. reverse Reverses SList in-place. Performs no memory allocation."
  },
  "phobos/std/container/util/Functions/make.html": {
    "href": "phobos/std/container/util/Functions/make.html",
    "title": "Overloads for - make | Marmos Demo",
    "keywords": "Overloads for - make Module std.container.util make(arguments) T make( Args arguments ) Returns an initialized object. This function is mainly for eliminating construction differences between structs and classes. It allows code to not worry about whether the type it's constructing is a struct or a class. make(arguments) T make( Args arguments ) Returns an initialized object. This function is mainly for eliminating construction differences between structs and classes. It allows code to not worry about whether the type it's constructing is a struct or a class. make(range) <bug: unknown> make( Range range ) auto Convenience function for constructing a generic container. make(items) <bug: unknown> make( <bug: unknown> items ) auto Convenience function for constructing a generic container."
  },
  "phobos/std/container/util/Overview.html": {
    "href": "phobos/std/container/util/Overview.html",
    "title": "Module - std.container.util | Marmos Demo",
    "keywords": "Module - std.container.util About This module contains some common utilities used by containers. This module is a submodule of $(MREF std, container). Source: $(PHOBOSSRC std/container/util.d) Copyright: 2010- Andrei Alexandrescu. All rights reserved by the respective holders. License: Distributed under the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at $(HTTP boost.org/LICENSE_1_0.txt)). Authors: $(HTTP erdani.com, Andrei Alexandrescu) $(SCRIPT inhibitQuickIndex = 1;) Functions Name Description make Returns an initialized object. This function is mainly for eliminating construction differences between structs and classes. It allows code to not worry about whether the type it's constructing is a struct or a class."
  },
  "phobos/std/conv/Classes/ConvException.html": {
    "href": "phobos/std/conv/Classes/ConvException.html",
    "title": "Class - ConvException | Marmos Demo",
    "keywords": "Class - ConvException Module std.conv public class ConvException { } About Thrown on conversion errors."
  },
  "phobos/std/conv/Classes/ConvOverflowException.html": {
    "href": "phobos/std/conv/Classes/ConvOverflowException.html",
    "title": "Class - ConvOverflowException | Marmos Demo",
    "keywords": "Class - ConvOverflowException Module std.conv public class ConvOverflowException { } About Thrown on conversion overflow errors."
  },
  "phobos/std/conv/Functions/asOriginalType.html": {
    "href": "phobos/std/conv/Functions/asOriginalType.html",
    "title": "Overloads for - asOriginalType | Marmos Demo",
    "keywords": "Overloads for - asOriginalType Module std.conv asOriginalType(value) OriginalType!(E) asOriginalType( E value ) Returns the representation of an enumerated value, i.e. the value converted to the base type of the enumeration."
  },
  "phobos/std/conv/Functions/convError.html": {
    "href": "phobos/std/conv/Functions/convError.html",
    "title": "Overloads for - convError | Marmos Demo",
    "keywords": "Overloads for - convError Module std.conv convError(source, fn, ln) <bug: unknown> convError( S source, string fn, size_t ln ) auto"
  },
  "phobos/std/conv/Functions/convertToOctal.html": {
    "href": "phobos/std/conv/Functions/convertToOctal.html",
    "title": "Overloads for - convertToOctal | Marmos Demo",
    "keywords": "Overloads for - convertToOctal Module std.conv convertToOctal(i) T convertToOctal( T i ) Convert a decimal integer to an octal integer with the same digits. Params: i = integer to convert Returns: octal integer with the same type and same digits"
  },
  "phobos/std/conv/Functions/dtext.html": {
    "href": "phobos/std/conv/Functions/dtext.html",
    "title": "Overloads for - dtext | Marmos Demo",
    "keywords": "Overloads for - dtext Module std.conv dtext(args) dstring dtext( T args ) ditto"
  },
  "phobos/std/conv/Functions/hexStrLiteral.html": {
    "href": "phobos/std/conv/Functions/hexStrLiteral.html",
    "title": "Overloads for - hexStrLiteral | Marmos Demo",
    "keywords": "Overloads for - hexStrLiteral Module std.conv hexStrLiteral(hexData) <bug: unknown> hexStrLiteral( String hexData ) auto"
  },
  "phobos/std/conv/Functions/hexToString.html": {
    "href": "phobos/std/conv/Functions/hexToString.html",
    "title": "Overloads for - hexToString | Marmos Demo",
    "keywords": "Overloads for - hexToString Module std.conv hexToString(s) string hexToString( string s ) hexToString(s) wstring hexToString( wstring s ) hexToString(s) dstring hexToString( dstring s )"
  },
  "phobos/std/conv/Functions/isHexLiteral.html": {
    "href": "phobos/std/conv/Functions/isHexLiteral.html",
    "title": "Overloads for - isHexLiteral | Marmos Demo",
    "keywords": "Overloads for - isHexLiteral Module std.conv isHexLiteral(hexData) bool isHexLiteral( String hexData ) Check the correctness of a string for hexString . The result is true if and only if the input string is composed of whitespace characters (\\f\\n\\r\\t\\v lineSep paraSep nelSep) and an even number of hexadecimal digits (regardless of the case)."
  },
  "phobos/std/conv/Functions/isOctalLiteral.html": {
    "href": "phobos/std/conv/Functions/isOctalLiteral.html",
    "title": "Overloads for - isOctalLiteral | Marmos Demo",
    "keywords": "Overloads for - isOctalLiteral Module std.conv isOctalLiteral(num) bool isOctalLiteral( string num )"
  },
  "phobos/std/conv/Functions/octal.html": {
    "href": "phobos/std/conv/Functions/octal.html",
    "title": "Overloads for - octal | Marmos Demo",
    "keywords": "Overloads for - octal Module std.conv octal(num) T octal( string num )"
  },
  "phobos/std/conv/Functions/parse.html": {
    "href": "phobos/std/conv/Functions/parse.html",
    "title": "Overloads for - parse | Marmos Demo",
    "keywords": "Overloads for - parse Module std.conv parse(source) <bug: unknown> parse( Source source ) auto $(PANEL The parse family of functions works quite like the $(LREF to) family, except that: $(OL $(LI It only works with character ranges as input.) $(LI It takes the input by reference. This means that rvalues (such as string literals) are not accepted: use to instead.) $(LI It advances the input to the position following the conversion.) $(LI It does not throw if it could not convert the entire input.)) ) This overload parses a bool from a character input range. Params Target <parameter not found> the boolean type to convert to source Source the lvalue of an $(REF_ALTTEXT input range, isInputRange, std,range,primitives) doCount <parameter not found> the flag for deciding to report the number of consumed characters Returns $(UL $(LI A bool if doCount is set to No.doCount ) $(LI A tuple containing a bool and a size_t if doCount is set to Yes.doCount )) Throws A $(LREF ConvException) if the range does not represent a bool . Note All character input range conversions using $(LREF to) are forwarded to parse and do not require lvalues. parse(s) <bug: unknown> parse( Source s ) auto Parses an integer from a character $(REF_ALTTEXT input range, isInputRange, std,range,primitives). Params Target <parameter not found> the integral type to convert to s Source the lvalue of an input range doCount <parameter not found> the flag for deciding to report the number of consumed characters Returns $(UL $(LI A number of type Target if doCount is set to No.doCount ) $(LI A tuple containing a number of type Target and a size_t if doCount is set to Yes.doCount )) Throws A $(LREF ConvException) If an overflow occurred during conversion or if no character of the input was meaningfully converted. parse(source, radix) <bug: unknown> parse( Source source, uint radix ) auto ditto parse(s) <bug: unknown> parse( Source s ) auto Parses an enum type from a string representing an enum member name. Params Target <parameter not found> the enum type to convert to s Source the lvalue of the range to parse doCount <parameter not found> the flag for deciding to report the number of consumed characters Returns $(UL $(LI An enum of type Target if doCount is set to No.doCount ) $(LI A tuple containing an enum of type Target and a size_t if doCount is set to Yes.doCount )) Throws A $(LREF ConvException) if type Target does not have a member represented by s . parse(source) <bug: unknown> parse( Source source ) auto Parses a floating point number from a character range. Params Target <parameter not found> a floating point type source Source the lvalue of the range to parse doCount <parameter not found> the flag for deciding to report the number of consumed characters Returns $(UL $(LI A floating point number of type Target if doCount is set to No.doCount ) $(LI A tuple containing a floating point number of·type Target and a size_t if doCount is set to Yes.doCount )) Throws A $(LREF ConvException) if source is empty, if no number could be parsed, or if an overflow occurred. parse(s) <bug: unknown> parse( Source s ) auto Parses one character from a character range. Params Target <parameter not found> the type to convert to s Source the lvalue of an $(REF_ALTTEXT input range, isInputRange, std,range,primitives) doCount <parameter not found> the flag for deciding to report the number of consumed characters Returns $(UL $(LI A character of type Target if doCount is set to No.doCount ) $(LI A tuple containing a character of type Target and a size_t if doCount is set to Yes.doCount )) Throws A $(LREF ConvException) if the range is empty. parse(s) <bug: unknown> parse( Source s ) auto ditto parse(s) <bug: unknown> parse( Source s ) auto Parses typeof(null) from a character range if the range spells \"null\" . This function is case insensitive. Params Target <parameter not found> the type to convert to s Source the lvalue of an $(REF_ALTTEXT input range, isInputRange, std,range,primitives) doCount <parameter not found> the flag for deciding to report the number of consumed characters Returns $(UL $(LI null if doCount is set to No.doCount ) $(LI A tuple containing null and a size_t if doCount is set to Yes.doCount )) Throws A $(LREF ConvException) if the range doesn't represent null . parse(s, lbracket, rbracket, comma) <bug: unknown> parse( Source s, dchar lbracket, dchar rbracket, dchar comma ) auto Parses an array from a string given the left bracket (default $(D '[')), right bracket (default ']' ), and element separator (by default ',' ). A trailing separator is allowed. Params s Source The string to parse lbracket dchar the character that starts the array rbracket dchar the character that ends the array comma dchar the character that separates the elements of the array doCount <parameter not found> the flag for deciding to report the number of consumed characters Returns $(UL $(LI An array of type Target if doCount is set to No.doCount ) $(LI A tuple containing an array of type Target and a size_t if doCount is set to Yes.doCount )) parse(s, lbracket, rbracket, comma) <bug: unknown> parse( Source s, dchar lbracket, dchar rbracket, dchar comma ) auto ditto parse(s, lbracket, rbracket, keyval, comma) <bug: unknown> parse( Source s, dchar lbracket, dchar rbracket, dchar keyval, dchar comma ) auto Parses an associative array from a string given the left bracket (default $(D '[')), right bracket (default ']' ), key-value separator (default $(D ':')), and element seprator (by default ',' ). Params s Source the string to parse lbracket dchar the character that starts the associative array rbracket dchar the character that ends the associative array keyval dchar the character that associates the key with the value comma dchar the character that separates the elements of the associative array doCount <parameter not found> the flag for deciding to report the number of consumed characters Returns $(UL $(LI An associative array of type Target if doCount is set to No.doCount ) $(LI A tuple containing an associative array of type Target and a size_t if doCount is set to Yes.doCount ))"
  },
  "phobos/std/conv/Functions/parseCheck.html": {
    "href": "phobos/std/conv/Functions/parseCheck.html",
    "title": "Overloads for - parseCheck | Marmos Demo",
    "keywords": "Overloads for - parseCheck Module std.conv parseCheck(c, fn, ln) void parseCheck( dchar c, string fn, size_t ln )"
  },
  "phobos/std/conv/Functions/parseElement.html": {
    "href": "phobos/std/conv/Functions/parseElement.html",
    "title": "Overloads for - parseElement | Marmos Demo",
    "keywords": "Overloads for - parseElement Module std.conv parseElement(s) <bug: unknown> parseElement( Source s ) auto parseElement(s) <bug: unknown> parseElement( Source s ) auto parseElement(s) <bug: unknown> parseElement( Source s ) auto"
  },
  "phobos/std/conv/Functions/parseError.html": {
    "href": "phobos/std/conv/Functions/parseError.html",
    "title": "Overloads for - parseError | Marmos Demo",
    "keywords": "Overloads for - parseError Module std.conv parseError(msg, fn, ln) <bug: unknown> parseError( string msg, string fn, size_t ln ) auto"
  },
  "phobos/std/conv/Functions/parseEscape.html": {
    "href": "phobos/std/conv/Functions/parseEscape.html",
    "title": "Overloads for - parseEscape | Marmos Demo",
    "keywords": "Overloads for - parseEscape Module std.conv parseEscape(s) <bug: unknown> parseEscape( Source s ) auto"
  },
  "phobos/std/conv/Functions/roundTo.html": {
    "href": "phobos/std/conv/Functions/roundTo.html",
    "title": "Overloads for - roundTo | Marmos Demo",
    "keywords": "Overloads for - roundTo Module std.conv roundTo(value) Target roundTo( Source value ) Rounded conversion from floating point to integral. Rounded conversions do not work with non-integral target types."
  },
  "phobos/std/conv/Functions/signed.html": {
    "href": "phobos/std/conv/Functions/signed.html",
    "title": "Overloads for - signed | Marmos Demo",
    "keywords": "Overloads for - signed Module std.conv signed(x) <bug: unknown> signed( T x ) auto Returns the corresponding signed value for x (e.g. if x has type uint , it returns $(D cast(int) x)). The advantage compared to the cast is that you do not need to rewrite the cast if x later changes type (e.g from uint to ulong ). Note that the result is always mutable even if the original type was const or immutable. In order to retain the constness, use $(REF Signed, std,traits)."
  },
  "phobos/std/conv/Functions/skipWS.html": {
    "href": "phobos/std/conv/Functions/skipWS.html",
    "title": "Overloads for - skipWS | Marmos Demo",
    "keywords": "Overloads for - skipWS Module std.conv skipWS(r) <bug: unknown> skipWS( R r ) auto"
  },
  "phobos/std/conv/Functions/strippedOctalLiteral.html": {
    "href": "phobos/std/conv/Functions/strippedOctalLiteral.html",
    "title": "Overloads for - strippedOctalLiteral | Marmos Demo",
    "keywords": "Overloads for - strippedOctalLiteral Module std.conv strippedOctalLiteral(original) string strippedOctalLiteral( string original )"
  },
  "phobos/std/conv/Functions/text.html": {
    "href": "phobos/std/conv/Functions/text.html",
    "title": "Overloads for - text | Marmos Demo",
    "keywords": "Overloads for - text Module std.conv text(args) string text( T args ) Convenience functions for converting one or more arguments of any type into text (the three character widths)."
  },
  "phobos/std/conv/Functions/textImpl.html": {
    "href": "phobos/std/conv/Functions/textImpl.html",
    "title": "Overloads for - textImpl | Marmos Demo",
    "keywords": "Overloads for - textImpl Module std.conv textImpl(args) S textImpl( U args )"
  },
  "phobos/std/conv/Functions/to.html": {
    "href": "phobos/std/conv/Functions/to.html",
    "title": "Overloads for - to | Marmos Demo",
    "keywords": "Overloads for - to Module std.conv to(args) T to( A args ) The to template converts a value from one type to another. The source type is deduced and the target type must be specified, for example the expression to!int(42.0) converts the number 42 from double to int. The conversion is \"safe\", i.e., it checks for overflow; to!int(4.2e10) would throw the ConvOverflowException exception. Overflow checks are only inserted when necessary, e.g., to!double(42) does not do any checking because any int fits in a double . Conversions from string to numeric types differ from the C equivalents atoi() and atol() by checking for overflow and not allowing whitespace. For conversion of strings _to signed types, the grammar recognized is $(PRE $(I Integer) $(I Sign UnsignedInteger) $(I UnsignedInteger) $(I Sign): $(B +) $(B -)) For conversion _to unsigned types, the grammar recognized is $(PRE $(I UnsignedInteger) $(I DecimalDigit) $(I DecimalDigit) $(I UnsignedInteger)) to(arg) T to( S arg ) The to template converts a value from one type to another. The source type is deduced and the target type must be specified, for example the expression to!int(42.0) converts the number 42 from double to int. The conversion is \"safe\", i.e., it checks for overflow; to!int(4.2e10) would throw the ConvOverflowException exception. Overflow checks are only inserted when necessary, e.g., to!double(42) does not do any checking because any int fits in a double . Conversions from string to numeric types differ from the C equivalents atoi() and atol() by checking for overflow and not allowing whitespace. For conversion of strings _to signed types, the grammar recognized is $(PRE $(I Integer) $(I Sign UnsignedInteger) $(I UnsignedInteger) $(I Sign): $(B +) $(B -)) For conversion _to unsigned types, the grammar recognized is $(PRE $(I UnsignedInteger) $(I DecimalDigit) $(I DecimalDigit) $(I UnsignedInteger)) to(arg) T to( S arg ) The to template converts a value from one type to another. The source type is deduced and the target type must be specified, for example the expression to!int(42.0) converts the number 42 from double to int. The conversion is \"safe\", i.e., it checks for overflow; to!int(4.2e10) would throw the ConvOverflowException exception. Overflow checks are only inserted when necessary, e.g., to!double(42) does not do any checking because any int fits in a double . Conversions from string to numeric types differ from the C equivalents atoi() and atol() by checking for overflow and not allowing whitespace. For conversion of strings _to signed types, the grammar recognized is $(PRE $(I Integer) $(I Sign UnsignedInteger) $(I UnsignedInteger) $(I Sign): $(B +) $(B -)) For conversion _to unsigned types, the grammar recognized is $(PRE $(I UnsignedInteger) $(I DecimalDigit) $(I DecimalDigit) $(I UnsignedInteger))"
  },
  "phobos/std/conv/Functions/toChars.html": {
    "href": "phobos/std/conv/Functions/toChars.html",
    "title": "Overloads for - toChars | Marmos Demo",
    "keywords": "Overloads for - toChars Module std.conv toChars(value) <bug: unknown> toChars( T value ) auto Convert integer to a range of characters. Intended to be lightweight and fast. Params radix <parameter not found> 2, 8, 10, 16 Char <parameter not found> character type for output letterCase <parameter not found> lower for deadbeef, upper for DEADBEEF value T integer to convert. Can be ubyte, ushort, uint or ulong. If radix is 10, can also be byte, short, int or long. Char = character type for output letterCase = lower for deadbeef, upper for DEADBEEF value = integer to convert. Can be ubyte, ushort, uint or ulong. If radix is 10, can also be byte, short, int or long. Returns: Random access range with slicing and everything"
  },
  "phobos/std/conv/Functions/toImpl.html": {
    "href": "phobos/std/conv/Functions/toImpl.html",
    "title": "Overloads for - toImpl | Marmos Demo",
    "keywords": "Overloads for - toImpl Module std.conv toImpl(value) T toImpl( S value ) If the source type is implicitly convertible to the target type, $(D to) simply performs the implicit conversion. toImpl(value) T toImpl( S value ) toImpl(s) T toImpl( S s ) toImpl(value) T toImpl( S value ) When source type supports member template function opCast, it is used. toImpl(value) T toImpl( S value ) When target type supports 'converting construction', it is used. $(UL $(LI If target type is struct, T(value) is used.) $(LI If target type is class, $(D new T(value)) is used.)) toImpl(value) T toImpl( S value ) ditto toImpl(value) T toImpl( S value ) Object-to-object conversions by dynamic casting throw exception when the source is non-null and the target is null. toImpl(value) T toImpl( S value ) Handles type to string conversions toImpl(value) T toImpl( S value ) toImpl(value, radix, letterCase) T toImpl( S value, uint radix, LetterCase letterCase ) toImpl(value) T toImpl( S value ) Narrowing numeric-numeric conversions throw when the value does not fit in the narrower type. toImpl(value) T toImpl( S value ) Array-to-array conversion (except when target is a string type) converts each element in turn by using to . toImpl(value) T toImpl( S value ) Associative array to associative array conversion converts each key and each value in turn. toImpl(value) T toImpl( S value ) String, or string-like input range, to non-string conversion runs parsing. $(UL $(LI When the source is a wide string, it is first converted to a narrow string and then parsed.) $(LI When the source is a narrow string, normal text parsing occurs.)) toImpl(value, radix) T toImpl( S value, uint radix ) ditto toImpl(value) T toImpl( S value ) String, or string-like input range, to char type not directly supported by parse parses the first dchar of the source. Returns: the first code point of the input range, converted to type T. Throws: ConvException if the input range contains more than a single code point, or if the code point does not fit into a code unit of type T. toImpl(value) T toImpl( S value ) Convert a value that is implicitly convertible to the enum base type into an Enum value. If the value does not match any enum member values a ConvException is thrown. Enums with floating-point or string base types are not supported."
  },
  "phobos/std/conv/Functions/toStr.html": {
    "href": "phobos/std/conv/Functions/toStr.html",
    "title": "Overloads for - toStr | Marmos Demo",
    "keywords": "Overloads for - toStr Module std.conv toStr(src) T toStr( S src )"
  },
  "phobos/std/conv/Functions/toTextRange.html": {
    "href": "phobos/std/conv/Functions/toTextRange.html",
    "title": "Overloads for - toTextRange | Marmos Demo",
    "keywords": "Overloads for - toTextRange Module std.conv toTextRange(value, writer) void toTextRange( T value, W writer )"
  },
  "phobos/std/conv/Functions/unsigned.html": {
    "href": "phobos/std/conv/Functions/unsigned.html",
    "title": "Overloads for - unsigned | Marmos Demo",
    "keywords": "Overloads for - unsigned Module std.conv unsigned(x) <bug: unknown> unsigned( T x ) auto Returns the corresponding unsigned value for x (e.g. if x has type int , it returns $(D cast(uint) x)). The advantage compared to the cast is that you do not need to rewrite the cast if x later changes type (e.g from int to long ). Note that the result is always mutable even if the original type was const or immutable. In order to retain the constness, use $(REF Unsigned, std,traits). unsigned(x) <bug: unknown> unsigned( T x ) auto Ditto"
  },
  "phobos/std/conv/Functions/wtext.html": {
    "href": "phobos/std/conv/Functions/wtext.html",
    "title": "Overloads for - wtext | Marmos Demo",
    "keywords": "Overloads for - wtext Module std.conv wtext(args) wstring wtext( T args ) ditto"
  },
  "phobos/std/conv/Overview.html": {
    "href": "phobos/std/conv/Overview.html",
    "title": "Module - std.conv | Marmos Demo",
    "keywords": "Module - std.conv About A one-stop shop for converting values from one type to another. $(SCRIPT inhibitQuickIndex = 1;) $(DIVC quickindex, $(BOOKTABLE, $(TR $(TH Category) $(TH Functions)) $(TR $(TD Generic) $(TD $(LREF asOriginalType) $(LREF castFrom) $(LREF parse) $(LREF to) $(LREF toChars) )) $(TR $(TD Strings) $(TD $(LREF text) $(LREF wtext) $(LREF dtext) $(LREF hexString) )) $(TR $(TD Numeric) $(TD $(LREF octal) $(LREF roundTo) $(LREF signed) $(LREF unsigned) )) $(TR $(TD Exceptions) $(TD $(LREF ConvException) $(LREF ConvOverflowException) )) )) Copyright: Copyright The D Language Foundation 2007-. License: $(HTTP boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP digitalmars.com, Walter Bright), $(HTTP erdani.org, Andrei Alexandrescu), Shin Fujishiro, Adam D. Ruppe, Kenji Hara Source: $(PHOBOSSRC std/conv.d) Aliases Name Description convFormat Classes Name Description ConvException Thrown on conversion errors. ConvOverflowException Thrown on conversion overflow errors. Functions Name Description asOriginalType Returns the representation of an enumerated value, i.e. the value converted to the base type of the enumeration. convError convertToOctal Convert a decimal integer to an octal integer with the same digits. Params: i = integer to convert Returns: octal integer with the same type and same digits dtext ditto hexStrLiteral hexToString isHexLiteral Check the correctness of a string for hexString . The result is true if and only if the input string is composed of whitespace characters (\\f\\n\\r\\t\\v lineSep paraSep nelSep) and an even number of hexadecimal digits (regardless of the case). isOctalLiteral octal parse $(PANEL The parse family of functions works quite like the $(LREF to) family, except that: $(OL $(LI It only works with character ranges as input.) $(LI It takes the input by reference. This means that rvalues (such as string literals) are not accepted: use to instead.) $(LI It advances the input to the position following the conversion.) $(LI It does not throw if it could not convert the entire input.)) ) parseCheck parseElement parseError parseEscape roundTo Rounded conversion from floating point to integral. signed Returns the corresponding signed value for x (e.g. if x has type uint , it returns $(D cast(int) x)). The advantage compared to the cast is that you do not need to rewrite the cast if x later changes type (e.g from uint to ulong ). skipWS strippedOctalLiteral text Convenience functions for converting one or more arguments of any type into text (the three character widths). textImpl to The to template converts a value from one type to another. The source type is deduced and the target type must be specified, for example the expression to!int(42.0) converts the number 42 from double to int. The conversion is \"safe\", i.e., it checks for overflow; to!int(4.2e10) would throw the ConvOverflowException exception. Overflow checks are only inserted when necessary, e.g., to!double(42) does not do any checking because any int fits in a double . toChars Convert integer to a range of characters. Intended to be lightweight and fast. toImpl If the source type is implicitly convertible to the target type, $(D to) simply performs the implicit conversion. toStr toTextRange unsigned Returns the corresponding unsigned value for x (e.g. if x has type int , it returns $(D cast(uint) x)). The advantage compared to the cast is that you do not need to rewrite the cast if x later changes type (e.g from int to long ). wtext ditto Variables Name Description enumRep hexString Converts a hex literal to a string at compile time. hexString ditto hexString ditto isEnumStrToStr isExactSomeString isNullToStr isSwitchable octal Ditto octalFitsInInt toCtString"
  },
  "phobos/std/csv/CSVException/Functions/toString.html": {
    "href": "phobos/std/csv/CSVException/Functions/toString.html",
    "title": "Overloads for - toString | Marmos Demo",
    "keywords": "Overloads for - toString Module std.csv Parent CSVException toString() string toString( ) override"
  },
  "phobos/std/csv/Classes/CSVException.html": {
    "href": "phobos/std/csv/Classes/CSVException.html",
    "title": "Class - CSVException | Marmos Demo",
    "keywords": "Class - CSVException Module std.csv public class CSVException { // string toString( ) override; // size_t col; // size_t row; } About Exception containing the row and column for when an exception was thrown. Numbering of both row and col start at one and corresponds to the location in the file rather than any specified header. Special consideration should be made when there is failure to match the header see $(LREF HeaderMismatchException) for details. When performing type conversions, $(REF ConvException, std,conv) is stored in the next field. Functions Name Description toString Variables Name Description col row"
  },
  "phobos/std/csv/Classes/HeaderMismatchException.html": {
    "href": "phobos/std/csv/Classes/HeaderMismatchException.html",
    "title": "Class - HeaderMismatchException | Marmos Demo",
    "keywords": "Class - HeaderMismatchException Module std.csv public class HeaderMismatchException { } About Exception thrown under different conditions based on the type of $(D Contents). Structure, Class, and Associative Array $(UL $(LI When a header is provided but a matching column is not found) ) Other $(UL $(LI When a header is provided but a matching column is not found) $(LI Order did not match that found in the input) ) Since a row and column is not meaningful when a column specified by the header is not found in the data, both row and col will be zero. Otherwise row is always one and col is the first instance found in header that occurred before the previous starting at one."
  },
  "phobos/std/csv/Classes/IncompleteCellException.html": {
    "href": "phobos/std/csv/Classes/IncompleteCellException.html",
    "title": "Class - IncompleteCellException | Marmos Demo",
    "keywords": "Class - IncompleteCellException Module std.csv public class IncompleteCellException { // Data pulled from input before finding a problem dstring partialData; } About Exception thrown when a Token is identified to not be completed: a quote is found in an unquoted field, data continues after a closing quote, or the quoted field was not closed before data was empty. Variables Name Description partialData Data pulled from input before finding a problem"
  },
  "phobos/std/csv/CsvReader/Functions/empty.html": {
    "href": "phobos/std/csv/CsvReader/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.csv Parent CsvReader empty() bool empty( ) Part of an input range as defined by $(REF isInputRange, std,range,primitives)."
  },
  "phobos/std/csv/CsvReader/Functions/front.html": {
    "href": "phobos/std/csv/CsvReader/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.csv Parent CsvReader front() <bug: unknown> front( ) auto Part of an input range as defined by $(REF isInputRange, std,range,primitives). Returns If Contents is a struct, will be filled with record data. If Contents is a class, will be filled with record data. If Contents is a associative array, will be filled with record data. If Contents is non-struct, a $(LREF CsvRecord) will be returned."
  },
  "phobos/std/csv/CsvReader/Functions/popFront.html": {
    "href": "phobos/std/csv/CsvReader/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.csv Parent CsvReader popFront() void popFront( ) Part of an input range as defined by $(REF isInputRange, std,range,primitives). Throws $(LREF CSVException) When a quote is found in an unquoted field, data continues after a closing quote, the quoted field was not closed before data was empty, a conversion failed, or when the row's length does not match the previous length."
  },
  "phobos/std/csv/CsvReader/Functions/prime.html": {
    "href": "phobos/std/csv/CsvReader/Functions/prime.html",
    "title": "Overloads for - prime | Marmos Demo",
    "keywords": "Overloads for - prime Module std.csv Parent CsvReader prime() void prime( )"
  },
  "phobos/std/csv/CsvRecord/Functions/empty.html": {
    "href": "phobos/std/csv/CsvRecord/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.csv Parent CsvRecord empty() bool empty( ) Part of an input range as defined by $(REF isInputRange, std,range,primitives)."
  },
  "phobos/std/csv/CsvRecord/Functions/front.html": {
    "href": "phobos/std/csv/CsvRecord/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.csv Parent CsvRecord front() Contents front( ) Part of an input range as defined by $(REF isInputRange, std,range,primitives)."
  },
  "phobos/std/csv/CsvRecord/Functions/popFront.html": {
    "href": "phobos/std/csv/CsvRecord/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.csv Parent CsvRecord popFront() void popFront( ) Part of an input range as defined by $(REF isInputRange, std,range,primitives). Throws $(LREF CSVException) When a quote is found in an unquoted field, data continues after a closing quote, the quoted field was not closed before data was empty, a conversion failed, or when the row's length does not match the previous length."
  },
  "phobos/std/csv/CsvRecord/Functions/prime.html": {
    "href": "phobos/std/csv/CsvRecord/Functions/prime.html",
    "title": "Overloads for - prime | Marmos Demo",
    "keywords": "Overloads for - prime Module std.csv Parent CsvRecord prime(skipNum) void prime( size_t skipNum ) prime() void prime( )"
  },
  "phobos/std/csv/CsvRecord/Functions/recordEnd.html": {
    "href": "phobos/std/csv/CsvRecord/Functions/recordEnd.html",
    "title": "Overloads for - recordEnd | Marmos Demo",
    "keywords": "Overloads for - recordEnd Module std.csv Parent CsvRecord recordEnd() bool recordEnd( )"
  },
  "phobos/std/csv/Functions/csvNextToken.html": {
    "href": "phobos/std/csv/Functions/csvNextToken.html",
    "title": "Overloads for - csvNextToken | Marmos Demo",
    "keywords": "Overloads for - csvNextToken Module std.csv csvNextToken(input, ans, sep, quote, startQuoted) void csvNextToken( Range input, Output ans, Separator sep, Separator quote, bool startQuoted ) Lower level control over parsing CSV This function consumes the input. After each call the input will start with either a delimiter or record break (\\n, \\r\\n, \\r) which must be removed for subsequent calls. Params input Range Any CSV input ans Output The first field in the input sep Separator The character to represent a comma in the specification quote Separator The character to represent a quote in the specification startQuoted bool Whether the input should be considered to already be in ans = The first field in the input sep = The character to represent a comma in the specification quote = The character to represent a quote in the specification startQuoted = Whether the input should be considered to already be in quotes Throws $(LREF IncompleteCellException) When a quote is found in an unquoted field, data continues after a closing quote, or the quoted field was not closed before data was empty."
  },
  "phobos/std/csv/Functions/csvReader.html": {
    "href": "phobos/std/csv/Functions/csvReader.html",
    "title": "Overloads for - csvReader | Marmos Demo",
    "keywords": "Overloads for - csvReader Module std.csv csvReader(input, delimiter, quote, allowInconsistentDelimiterCount) <bug: unknown> csvReader( Range input, Separator delimiter, Separator quote, bool allowInconsistentDelimiterCount ) auto Returns an $(REF_ALTTEXT input range, isInputRange, std,range,primitives) for iterating over records found in input . An optional header can be provided. The first record will be read in as the header. If Contents is a struct then the header provided is expected to correspond to the fields in the struct. When Contents is not a type which can contain the entire record, the header must be provided in the same order as the input or an exception is thrown. Returns An input range R as defined by $(REF isInputRange, std,range,primitives). When Contents is a struct, class, or an associative array, the element type of R is Contents , otherwise the element type of R is itself a range with element type Contents . If a header argument is provided, the returned range provides a header field for accessing the header from the input in array form. Throws $(LREF CSVException) When a quote is found in an unquoted field, data continues after a closing quote, the quoted field was not closed before data was empty, a conversion failed, or when the row's length does not match the previous length. $(LREF HeaderMismatchException) when a header is provided but a matching column is not found or the order did not match that found in the input. Read the exception documentation for specific details of when the exception is thrown for different types of Contents . csvReader(input, header, delimiter, quote, allowInconsistentDelimiterCount) <bug: unknown> csvReader( Range input, Header header, Separator delimiter, Separator quote, bool allowInconsistentDelimiterCount ) auto ditto csvReader(input, header, delimiter, quote, allowInconsistentDelimiterCount) <bug: unknown> csvReader( Range input, Header header, Separator delimiter, Separator quote, bool allowInconsistentDelimiterCount ) auto ditto"
  },
  "phobos/std/csv/Overview.html": {
    "href": "phobos/std/csv/Overview.html",
    "title": "Module - std.csv | Marmos Demo",
    "keywords": "Module - std.csv About Implements functionality to read Comma Separated Values and its variants from an $(REF_ALTTEXT input range, isInputRange, std,range,primitives) of dchar . Comma Separated Values provide a simple means to transfer and store tabular data. It has been common for programs to use their own variant of the CSV format. This parser will loosely follow the $(HTTP tools.ietf.org/html/rfc4180, RFC-4180). CSV input should adhere to the following criteria (differences from RFC-4180 in parentheses): $(UL $(LI A record is separated by a new line (CRLF,LF,CR)) $(LI A final record may end with a new line) $(LI A header may be provided as the first record in input) $(LI A record has fields separated by a comma (customizable)) $(LI A field containing new lines, commas, or double quotes should be enclosed in double quotes (customizable)) $(LI Double quotes in a field are escaped with a double quote) $(LI Each record should contain the same number of fields) ) Example ------- import std.algorithm; import std.array; import std.csv; import std.stdio; import std.typecons; void main() { auto text = \"Joe,Carpenter,300000\\nFred,Blacksmith,400000\\r\\n\"; foreach (record; csvReader!(Tuple!(string, string, int))(text)) { writefln(\"%s works as a %s and earns $%d per year\", record[0], record[1], record[2]); } // To read the same string from the file \"filename.csv\": auto file = File(\"filename.csv\", \"r\"); foreach (record; file.byLine.joiner(\"\\n\").csvReader!(Tuple!(string, string, int))) { writefln(\"%s works as a %s and earns $%d per year\", record[0], record[1], record[2]); } } } ------- When an input contains a header the Contents can be specified as an associative array. Passing null to signify that a header is present. ------- auto text = \"Name,Occupation,Salary\\r\" ~ \"Joe,Carpenter,300000\\nFred,Blacksmith,400000\\r\\n\"; foreach (record; csvReader!(string[string]) (text, null)) { writefln(\"%s works as a %s and earns $%s per year.\", record[\"Name\"], record[\"Occupation\"], record[\"Salary\"]); } // To read the same string from the file \"filename.csv\" auto file = File(\"filename.csv\", \"r\"); foreach (record; csvReader!(string[string]) (file.byLine.joiner(\"\\n\"), null)) { writefln(\"%s works as a %s and earns $%s per year.\", record[\"Name\"], record[\"Occupation\"], record[\"Salary\"]); } ------- This module allows content to be iterated by record stored in a struct, class, associative array, or as a range of fields. Upon detection of an error an CSVException is thrown (can be disabled). csvNextToken has been made public to allow for attempted recovery. Disabling exceptions will lift many restrictions specified above. A quote can appear in a field if the field was not quoted. If in a quoted field any quote by itself, not at the end of a field, will end processing for that field. The field is ended when there is no input, even if the quote was not closed. See_Also: $(HTTP en.wikipedia.org/wiki/Comma-separated_values, Wikipedia Comma-separated values) Copyright: Copyright 2011 License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: Jesse Phillips Source: $(PHOBOSSRC std/csv.d) Classes Name Description CSVException Exception containing the row and column for when an exception was thrown. HeaderMismatchException Exception thrown under different conditions based on the type of $(D Contents). IncompleteCellException Exception thrown when a Token is identified to not be completed: a quote is found in an unquoted field, data continues after a closing quote, or the quoted field was not closed before data was empty. Structs Name Description CsvReader CsvRecord Input Functions Name Description csvNextToken Lower level control over parsing CSV csvReader Returns an $(REF_ALTTEXT input range, isInputRange, std,range,primitives) for iterating over records found in input ."
  },
  "phobos/std/csv/Structs/CsvReader.html": {
    "href": "phobos/std/csv/Structs/CsvReader.html",
    "title": "Struct - CsvReader | Marmos Demo",
    "keywords": "Struct - CsvReader Module std.csv public struct CsvReader { // Part of an input range as defined by $(REF isInputRange, std,range,primitives). bool empty( ) ; // Part of an input range as defined by $(REF isInputRange, std,range,primitives). <bug: unknown> front( ) auto; // Part of an input range as defined by $(REF isInputRange, std,range,primitives). void popFront( ) ; // void prime( ) ; // Header from the input in array form. <bug: unknown> header; // <bug: unknown> indices; // Contents recordContent; // CsvRecord!(stringErrorLevelRangeSeparator) recordRange; } Functions Name Description empty Part of an input range as defined by $(REF isInputRange, std,range,primitives). front Part of an input range as defined by $(REF isInputRange, std,range,primitives). popFront Part of an input range as defined by $(REF isInputRange, std,range,primitives). prime Variables Name Description header Header from the input in array form. indices recordContent recordRange"
  },
  "phobos/std/csv/Structs/CsvRecord.html": {
    "href": "phobos/std/csv/Structs/CsvRecord.html",
    "title": "Struct - CsvRecord | Marmos Demo",
    "keywords": "Struct - CsvRecord Module std.csv public struct CsvRecord { // Part of an input range as defined by $(REF isInputRange, std,range,primitives). bool empty( ) ; // Part of an input range as defined by $(REF isInputRange, std,range,primitives). Contents front( ) ; // Part of an input range as defined by $(REF isInputRange, std,range,primitives). void popFront( ) ; // void prime( size_t skipNum ) ; // void prime( ) ; // bool recordEnd( ) ; // Contents curContentsoken; } Functions Name Description empty Part of an input range as defined by $(REF isInputRange, std,range,primitives). front Part of an input range as defined by $(REF isInputRange, std,range,primitives). popFront Part of an input range as defined by $(REF isInputRange, std,range,primitives). prime recordEnd Variables Name Description curContentsoken"
  },
  "phobos/std/csv/Structs/Input.html": {
    "href": "phobos/std/csv/Structs/Input.html",
    "title": "Struct - Input | Marmos Demo",
    "keywords": "Struct - Input Module std.csv public struct Input { // size_t col; // Range range; // size_t row; // size_t rowLength; } Variables Name Description col range row rowLength"
  },
  "phobos/std/datetime/Overview.html": {
    "href": "phobos/std/datetime/Overview.html",
    "title": "Module - std.datetime | Marmos Demo",
    "keywords": "Module - std.datetime About $(SCRIPT inhibitQuickIndex = 1;) Phobos provides the following functionality for time $(DIVC quickindex, $(BOOKTABLE , $(TR $(TH Functionality) $(TH Symbols) ) $(TR $(TD Points in Time) $(TD \\((REF_ALTTEXT Clock, Clock, std, datetime, systime)\\)(NBSP) \\((REF_ALTTEXT Date, Date, std, datetime, date)\\)(NBSP) \\((REF_ALTTEXT TimeOfDay, TimeOfDay, std, datetime, date)\\)(NBSP) \\((REF_ALTTEXT DateTime, DateTime, std, datetime, date)\\)(NBSP) \\((REF_ALTTEXT SysTime, SysTime, std, datetime, systime)\\)(NBSP) ) ) $(TR $(TD $(MREF_ALTTEXT Timezones, std, datetime, timezone)) $(TD \\((REF_ALTTEXT TimeZone, TimeZone, std, datetime, timezone)\\)(NBSP) \\((REF_ALTTEXT UTC, UTC, std, datetime, timezone)\\)(NBSP) \\((REF_ALTTEXT LocalTime, LocalTime, std, datetime, timezone)\\)(NBSP) \\((REF_ALTTEXT PosixTimeZone, PosixTimeZone, std, datetime, timezone)\\)(NBSP) \\((REF_ALTTEXT WindowsTimeZone, WindowsTimeZone, std, datetime, timezone)\\)(NBSP) \\((REF_ALTTEXT SimpleTimeZone, SimpleTimeZone, std, datetime, timezone)\\)(NBSP) ) ) $(TR $(TD Intervals and Ranges of Time) $(TD \\((REF_ALTTEXT Interval, Interval, std, datetime, interval)\\)(NBSP) \\((REF_ALTTEXT PosInfInterval, PosInfInterval, std, datetime, interval)\\)(NBSP) \\((REF_ALTTEXT NegInfInterval, NegInfInterval, std, datetime, interval)\\)(NBSP) ) ) $(TR $(TD $(MREF_ALTTEXT Durations of Time, core, time)) $(TD \\((REF_ALTTEXT Duration, Duration, core, time)\\)(NBSP) \\((REF_ALTTEXT weeks, weeks, core, time)\\)(NBSP) \\((REF_ALTTEXT days, days, core, time)\\)(NBSP) \\((REF_ALTTEXT hours, hours, core, time)\\)(NBSP) \\((REF_ALTTEXT minutes, minutes, core, time)\\)(NBSP) \\((REF_ALTTEXT seconds, seconds, core, time)\\)(NBSP) \\((REF_ALTTEXT msecs, msecs, core, time)\\)(NBSP) \\((REF_ALTTEXT usecs, usecs, core, time)\\)(NBSP) \\((REF_ALTTEXT hnsecs, hnsecs, core, time)\\)(NBSP) \\((REF_ALTTEXT nsecs, nsecs, core, time)\\)(NBSP) ) ) $(TR $(TD Time Measurement and Benchmarking) $(TD \\((REF_ALTTEXT MonoTime, MonoTime, core, time)\\)(NBSP) \\((REF_ALTTEXT StopWatch, StopWatch, std, datetime, stopwatch)\\)(NBSP) \\((REF_ALTTEXT benchmark, benchmark, std, datetime, stopwatch)\\)(NBSP) ) ) )) This functionality is separated into the following modules $(UL $(LI $(MREF std, datetime, date) for points in time without timezones.) $(LI $(MREF std, datetime, timezone) for classes which represent timezones.) $(LI $(MREF std, datetime, systime) for a point in time with a timezone.) $(LI $(MREF std, datetime, interval) for types which represent series of points in time.) $(LI $(MREF std, datetime, stopwatch) for measuring time.) ) See_Also \\((MREF core, time)\\)(BR) $(DDLINK intro-to-datetime, Introduction to std.datetime, Introduction to std.datetime) $(HTTP en.wikipedia.org/wiki/ISO_8601, ISO 8601) $(HTTP en.wikipedia.org/wiki/Tz_database, Wikipedia entry on TZ Database) $(HTTP en.wikipedia.org/wiki/List_of_tz_database_time_zones, List of Time Zones) License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP jmdavisprog.com, Jonathan M Davis) and Kato Shoichi Source: $(PHOBOSSRC std/datetime/package.d)"
  },
  "phobos/std/datetime/date/Date/Functions/day.html": {
    "href": "phobos/std/datetime/date/Date/Functions/day.html",
    "title": "Overloads for - day | Marmos Demo",
    "keywords": "Overloads for - day Module std.datetime.date Parent Date day() ubyte day( ) Day of a Gregorian Month. day(day) void day( int day ) Day of a Gregorian Month. Params day int The day of the month to set this $(LREF Date)'s day to. Throws $(REF DateTimeException,std,datetime,date) if the given day is not a valid day of the current month."
  },
  "phobos/std/datetime/date/Date/Functions/dayOfGregorianCal.html": {
    "href": "phobos/std/datetime/date/Date/Functions/dayOfGregorianCal.html",
    "title": "Overloads for - dayOfGregorianCal | Marmos Demo",
    "keywords": "Overloads for - dayOfGregorianCal Module std.datetime.date Parent Date dayOfGregorianCal() int dayOfGregorianCal( ) The Xth day of the Gregorian Calendar that this $(LREF Date) is on. dayOfGregorianCal(day) void dayOfGregorianCal( int day ) The Xth day of the Gregorian Calendar that this $(LREF Date) is on. Params day int The day of the Gregorian Calendar to set this $(LREF Date) to."
  },
  "phobos/std/datetime/date/Date/Functions/dayOfWeek.html": {
    "href": "phobos/std/datetime/date/Date/Functions/dayOfWeek.html",
    "title": "Overloads for - dayOfWeek | Marmos Demo",
    "keywords": "Overloads for - dayOfWeek Module std.datetime.date Parent Date dayOfWeek() DayOfWeek dayOfWeek( ) Day of the week this $(LREF Date) is on."
  },
  "phobos/std/datetime/date/Date/Functions/dayOfYear.html": {
    "href": "phobos/std/datetime/date/Date/Functions/dayOfYear.html",
    "title": "Overloads for - dayOfYear | Marmos Demo",
    "keywords": "Overloads for - dayOfYear Module std.datetime.date Parent Date dayOfYear() ushort dayOfYear( ) Day of the year this $(LREF Date) is on. dayOfYear(day) void dayOfYear( int day ) Day of the year. Params day int The day of the year to set which day of the year this $(LREF Date) is on. Throws $(REF DateTimeException,std,datetime,date) if the given day is an invalid day of the year."
  },
  "phobos/std/datetime/date/Date/Functions/daysInMonth.html": {
    "href": "phobos/std/datetime/date/Date/Functions/daysInMonth.html",
    "title": "Overloads for - daysInMonth | Marmos Demo",
    "keywords": "Overloads for - daysInMonth Module std.datetime.date Parent Date daysInMonth() ubyte daysInMonth( ) The last day in the month that this $(LREF Date) is in."
  },
  "phobos/std/datetime/date/Date/Functions/diffMonths.html": {
    "href": "phobos/std/datetime/date/Date/Functions/diffMonths.html",
    "title": "Overloads for - diffMonths | Marmos Demo",
    "keywords": "Overloads for - diffMonths Module std.datetime.date Parent Date diffMonths(rhs) int diffMonths( Date rhs ) Returns the difference between the two $(LREF Date)s in months. To get the difference in years, subtract the year property of two $(LREF Date)s. To get the difference in days or weeks, subtract the $(LREF Date)s themselves and use the $(REF Duration, core,time) that results. Because converting between months and smaller units requires a specific date (which $(REF Duration, core,time)s don't have), getting the difference in months requires some math using both the year and month properties, so this is a convenience function for getting the difference in months. Note that the number of days in the months or how far into the month either $(LREF Date) is is irrelevant. It is the difference in the month property combined with the difference in years 12. So, for instance, December 31st and January 1st are one month apart just as December 1st and January 31st are one month apart. Params rhs Date The $(LREF Date) to subtract from this one."
  },
  "phobos/std/datetime/date/Date/Functions/endOfMonth.html": {
    "href": "phobos/std/datetime/date/Date/Functions/endOfMonth.html",
    "title": "Overloads for - endOfMonth | Marmos Demo",
    "keywords": "Overloads for - endOfMonth Module std.datetime.date Parent Date endOfMonth() Date endOfMonth( ) $(LREF Date) for the last day in the month that this $(LREF Date) is in."
  },
  "phobos/std/datetime/date/Date/Functions/fromISOWeek.html": {
    "href": "phobos/std/datetime/date/Date/Functions/fromISOWeek.html",
    "title": "Overloads for - fromISOWeek | Marmos Demo",
    "keywords": "Overloads for - fromISOWeek Module std.datetime.date Parent Date fromISOWeek(isoWeekYear, isoWeek, weekday) Date fromISOWeek( short isoWeekYear, ubyte isoWeek, DayOfWeek weekday ) static"
  },
  "phobos/std/datetime/date/Date/Functions/isAD.html": {
    "href": "phobos/std/datetime/date/Date/Functions/isAD.html",
    "title": "Overloads for - isAD | Marmos Demo",
    "keywords": "Overloads for - isAD Module std.datetime.date Parent Date isAD() bool isAD( ) Whether the current year is a date in A.D."
  },
  "phobos/std/datetime/date/Date/Functions/isLeapYear.html": {
    "href": "phobos/std/datetime/date/Date/Functions/isLeapYear.html",
    "title": "Overloads for - isLeapYear | Marmos Demo",
    "keywords": "Overloads for - isLeapYear Module std.datetime.date Parent Date isLeapYear() bool isLeapYear( ) Whether this $(LREF Date) is in a leap year."
  },
  "phobos/std/datetime/date/Date/Functions/isoWeek.html": {
    "href": "phobos/std/datetime/date/Date/Functions/isoWeek.html",
    "title": "Overloads for - isoWeek | Marmos Demo",
    "keywords": "Overloads for - isoWeek Module std.datetime.date Parent Date isoWeek() ubyte isoWeek( ) The ISO 8601 week of the year that this $(LREF Date) is in. See_Also $(HTTP en.wikipedia.org/wiki/ISO_week_date, ISO Week Date)"
  },
  "phobos/std/datetime/date/Date/Functions/isoWeekAndYear.html": {
    "href": "phobos/std/datetime/date/Date/Functions/isoWeekAndYear.html",
    "title": "Overloads for - isoWeekAndYear | Marmos Demo",
    "keywords": "Overloads for - isoWeekAndYear Module std.datetime.date Parent Date isoWeekAndYear() <bug: unknown> isoWeekAndYear( ) auto The ISO 8601 week and year of the year that this $(LREF Date) is in. Returns An anonymous struct with the members $(D isoWeekYear) for the resulting year and $(D isoWeek) for the resulting ISO week. See_Also $(HTTP en.wikipedia.org/wiki/ISO_week_date, ISO Week Date)"
  },
  "phobos/std/datetime/date/Date/Functions/isoWeekYear.html": {
    "href": "phobos/std/datetime/date/Date/Functions/isoWeekYear.html",
    "title": "Overloads for - isoWeekYear | Marmos Demo",
    "keywords": "Overloads for - isoWeekYear Module std.datetime.date Parent Date isoWeekYear() short isoWeekYear( ) The year inside the ISO 8601 week calendar that this $(LREF Date) is in. May differ from $(LREF year) between 28 December and 4 January. See_Also $(HTTP en.wikipedia.org/wiki/ISO_week_date, ISO Week Date)"
  },
  "phobos/std/datetime/date/Date/Functions/julianDay.html": {
    "href": "phobos/std/datetime/date/Date/Functions/julianDay.html",
    "title": "Overloads for - julianDay | Marmos Demo",
    "keywords": "Overloads for - julianDay Module std.datetime.date Parent Date julianDay() long julianDay( ) The $(HTTP en.wikipedia.org/wiki/Julian_day, Julian day) for this $(LREF Date) at noon (since the Julian day changes at noon)."
  },
  "phobos/std/datetime/date/Date/Functions/max.html": {
    "href": "phobos/std/datetime/date/Date/Functions/max.html",
    "title": "Overloads for - max | Marmos Demo",
    "keywords": "Overloads for - max Module std.datetime.date Parent Date max() Date max( ) static Returns the $(LREF Date) farthest in the future which is representable by $(LREF Date)."
  },
  "phobos/std/datetime/date/Date/Functions/min.html": {
    "href": "phobos/std/datetime/date/Date/Functions/min.html",
    "title": "Overloads for - min | Marmos Demo",
    "keywords": "Overloads for - min Module std.datetime.date Parent Date min() Date min( ) static Returns the $(LREF Date) farthest in the past which is representable by $(LREF Date)."
  },
  "phobos/std/datetime/date/Date/Functions/modJulianDay.html": {
    "href": "phobos/std/datetime/date/Date/Functions/modJulianDay.html",
    "title": "Overloads for - modJulianDay | Marmos Demo",
    "keywords": "Overloads for - modJulianDay Module std.datetime.date Parent Date modJulianDay() long modJulianDay( ) The modified $(HTTP en.wikipedia.org/wiki/Julian_day, Julian day) for any time on this date (since, the modified Julian day changes at midnight)."
  },
  "phobos/std/datetime/date/Date/Functions/month.html": {
    "href": "phobos/std/datetime/date/Date/Functions/month.html",
    "title": "Overloads for - month | Marmos Demo",
    "keywords": "Overloads for - month Module std.datetime.date Parent Date month() Month month( ) Month of a Gregorian Year. month(month) void month( Month month ) Month of a Gregorian Year. Params month Month The month to set this $(LREF Date)'s month to. Throws $(REF DateTimeException,std,datetime,date) if the given month is not a valid month or if the current day would not be valid in the given month."
  },
  "phobos/std/datetime/date/Date/Functions/opCmp.html": {
    "href": "phobos/std/datetime/date/Date/Functions/opCmp.html",
    "title": "Overloads for - opCmp | Marmos Demo",
    "keywords": "Overloads for - opCmp Module std.datetime.date Parent Date opCmp(rhs) int opCmp( Date rhs ) Compares this $(LREF Date) with the given $(LREF Date). Returns $(BOOKTABLE, $(TR $(TD this < rhs) $(TD < 0)) $(TR $(TD this == rhs) $(TD 0)) $(TR $(TD this > rhs) $(TD > 0)) )"
  },
  "phobos/std/datetime/date/Date/Functions/toISOExtString.html": {
    "href": "phobos/std/datetime/date/Date/Functions/toISOExtString.html",
    "title": "Overloads for - toISOExtString | Marmos Demo",
    "keywords": "Overloads for - toISOExtString Module std.datetime.date Parent Date toISOExtString() string toISOExtString( ) Converts this $(LREF Date) to a string with the format YYYY-MM-DD . If writer is set, the resulting string will be written directly to it. Params writer <parameter not found> A char accepting $(REF_ALTTEXT output range, isOutputRange, std, range, primitives) Returns A string when not using an output range; void otherwise."
  },
  "phobos/std/datetime/date/Date/Functions/toISOString.html": {
    "href": "phobos/std/datetime/date/Date/Functions/toISOString.html",
    "title": "Overloads for - toISOString | Marmos Demo",
    "keywords": "Overloads for - toISOString Module std.datetime.date Parent Date toISOString() string toISOString( ) Converts this $(LREF Date) to a string with the format YYYYMMDD . If writer is set, the resulting string will be written directly to it. Params writer <parameter not found> A char accepting $(REF_ALTTEXT output range, isOutputRange, std, range, primitives) Returns A string when not using an output range; void otherwise."
  },
  "phobos/std/datetime/date/Date/Functions/toSimpleString.html": {
    "href": "phobos/std/datetime/date/Date/Functions/toSimpleString.html",
    "title": "Overloads for - toSimpleString | Marmos Demo",
    "keywords": "Overloads for - toSimpleString Module std.datetime.date Parent Date toSimpleString() string toSimpleString( ) Converts this $(LREF Date) to a string with the format YYYY-Mon-DD . If writer is set, the resulting string will be written directly to it. Params writer <parameter not found> A char accepting $(REF_ALTTEXT output range, isOutputRange, std, range, primitives) Returns A string when not using an output range; void otherwise."
  },
  "phobos/std/datetime/date/Date/Functions/toString.html": {
    "href": "phobos/std/datetime/date/Date/Functions/toString.html",
    "title": "Overloads for - toString | Marmos Demo",
    "keywords": "Overloads for - toString Module std.datetime.date Parent Date toString() string toString( ) Converts this $(LREF Date) to a string. This function exists to make it easy to convert a $(LREF Date) to a string for code that does not care what the exact format is - just that it presents the information in a clear manner. It also makes it easy to simply convert a $(LREF Date) to a string when using functions such as to!string , format , or writeln which use toString to convert user-defined types. So, it is unlikely that much code will call toString directly. The format of the string is purposefully unspecified, and code that cares about the format of the string should use toISOString , toISOExtString , toSimpleString , or some other custom formatting function that explicitly generates the format that the code needs. The reason is that the code is then clear about what format it's using, making it less error-prone to maintain the code and interact with other software that consumes the generated strings. It's for this same reason $(LREF Date) has no fromString function, whereas it does have fromISOString , fromISOExtString , and fromSimpleString . The format returned by toString may or may not change in the future."
  },
  "phobos/std/datetime/date/Date/Functions/year.html": {
    "href": "phobos/std/datetime/date/Date/Functions/year.html",
    "title": "Overloads for - year | Marmos Demo",
    "keywords": "Overloads for - year Module std.datetime.date Parent Date year() short year( ) Year of the Gregorian Calendar. Positive numbers are A.D. Non-positive are B.C. year(year) void year( int year ) Year of the Gregorian Calendar. Positive numbers are A.D. Non-positive are B.C. Params year int The year to set this Date's year to. Throws $(REF DateTimeException,std,datetime,date) if the new year is not a leap year and the resulting date would be on February 29th."
  },
  "phobos/std/datetime/date/Date/Functions/yearBC.html": {
    "href": "phobos/std/datetime/date/Date/Functions/yearBC.html",
    "title": "Overloads for - yearBC | Marmos Demo",
    "keywords": "Overloads for - yearBC Module std.datetime.date Parent Date yearBC() ushort yearBC( ) Year B.C. of the Gregorian Calendar counting year 0 as 1 B.C. Throws $(REF DateTimeException,std,datetime,date) if isAD is true. yearBC(year) void yearBC( int year ) Year B.C. of the Gregorian Calendar counting year 0 as 1 B.C. Params year int The year B.C. to set this $(LREF Date)'s year to. Throws $(REF DateTimeException,std,datetime,date) if a non-positive value is given."
  },
  "phobos/std/datetime/date/DateTime/Functions/date.html": {
    "href": "phobos/std/datetime/date/DateTime/Functions/date.html",
    "title": "Overloads for - date | Marmos Demo",
    "keywords": "Overloads for - date Module std.datetime.date Parent DateTime date() Date date( ) The date portion of $(LREF DateTime). date(date) void date( Date date ) The date portion of $(LREF DateTime). Params date Date The Date to set this $(LREF DateTime)'s date portion to."
  },
  "phobos/std/datetime/date/DateTime/Functions/day.html": {
    "href": "phobos/std/datetime/date/DateTime/Functions/day.html",
    "title": "Overloads for - day | Marmos Demo",
    "keywords": "Overloads for - day Module std.datetime.date Parent DateTime day() ubyte day( ) Day of a Gregorian Month. day(day) void day( int day ) Day of a Gregorian Month. Params day int The day of the month to set this $(LREF DateTime)'s day to. Throws $(REF DateTimeException,std,datetime,date) if the given day is not a valid day of the current month."
  },
  "phobos/std/datetime/date/DateTime/Functions/dayOfGregorianCal.html": {
    "href": "phobos/std/datetime/date/DateTime/Functions/dayOfGregorianCal.html",
    "title": "Overloads for - dayOfGregorianCal | Marmos Demo",
    "keywords": "Overloads for - dayOfGregorianCal Module std.datetime.date Parent DateTime dayOfGregorianCal() int dayOfGregorianCal( ) The Xth day of the Gregorian Calendar that this $(LREF DateTime) is on. dayOfGregorianCal(days) void dayOfGregorianCal( int days ) The Xth day of the Gregorian Calendar that this $(LREF DateTime) is on. Setting this property does not affect the time portion of $(LREF DateTime). Params days int The day of the Gregorian Calendar to set this $(LREF DateTime) to."
  },
  "phobos/std/datetime/date/DateTime/Functions/dayOfWeek.html": {
    "href": "phobos/std/datetime/date/DateTime/Functions/dayOfWeek.html",
    "title": "Overloads for - dayOfWeek | Marmos Demo",
    "keywords": "Overloads for - dayOfWeek Module std.datetime.date Parent DateTime dayOfWeek() DayOfWeek dayOfWeek( ) Day of the week this $(LREF DateTime) is on."
  },
  "phobos/std/datetime/date/DateTime/Functions/dayOfYear.html": {
    "href": "phobos/std/datetime/date/DateTime/Functions/dayOfYear.html",
    "title": "Overloads for - dayOfYear | Marmos Demo",
    "keywords": "Overloads for - dayOfYear Module std.datetime.date Parent DateTime dayOfYear() ushort dayOfYear( ) Day of the year this $(LREF DateTime) is on. dayOfYear(day) void dayOfYear( int day ) Day of the year. Params day int The day of the year to set which day of the year this $(LREF DateTime) is on."
  },
  "phobos/std/datetime/date/DateTime/Functions/daysInMonth.html": {
    "href": "phobos/std/datetime/date/DateTime/Functions/daysInMonth.html",
    "title": "Overloads for - daysInMonth | Marmos Demo",
    "keywords": "Overloads for - daysInMonth Module std.datetime.date Parent DateTime daysInMonth() ubyte daysInMonth( ) The last day in the month that this $(LREF DateTime) is in."
  },
  "phobos/std/datetime/date/DateTime/Functions/diffMonths.html": {
    "href": "phobos/std/datetime/date/DateTime/Functions/diffMonths.html",
    "title": "Overloads for - diffMonths | Marmos Demo",
    "keywords": "Overloads for - diffMonths Module std.datetime.date Parent DateTime diffMonths(rhs) int diffMonths( DateTime rhs ) Returns the difference between the two $(LREF DateTime)s in months. To get the difference in years, subtract the year property of two $(LREF DateTime)s. To get the difference in days or weeks, subtract the $(LREF DateTime)s themselves and use the $(REF Duration, core,time) that results. Because converting between months and smaller units requires a specific date (which $(REF Duration, core,time)s don't have), getting the difference in months requires some math using both the year and month properties, so this is a convenience function for getting the difference in months. Note that the number of days in the months or how far into the month either date is is irrelevant. It is the difference in the month property combined with the difference in years 12. So, for instance, December 31st and January 1st are one month apart just as December 1st and January 31st are one month apart. Params rhs DateTime The $(LREF DateTime) to subtract from this one."
  },
  "phobos/std/datetime/date/DateTime/Functions/endOfMonth.html": {
    "href": "phobos/std/datetime/date/DateTime/Functions/endOfMonth.html",
    "title": "Overloads for - endOfMonth | Marmos Demo",
    "keywords": "Overloads for - endOfMonth Module std.datetime.date Parent DateTime endOfMonth() DateTime endOfMonth( ) $(LREF DateTime) for the last day in the month that this $(LREF DateTime) is in. The time portion of endOfMonth is always 23:59:59."
  },
  "phobos/std/datetime/date/DateTime/Functions/hour.html": {
    "href": "phobos/std/datetime/date/DateTime/Functions/hour.html",
    "title": "Overloads for - hour | Marmos Demo",
    "keywords": "Overloads for - hour Module std.datetime.date Parent DateTime hour() ubyte hour( ) Hours past midnight. hour(hour) void hour( int hour ) Hours past midnight. Params hour int The hour of the day to set this $(LREF DateTime)'s hour to. Throws $(REF DateTimeException,std,datetime,date) if the given hour would result in an invalid $(LREF DateTime)."
  },
  "phobos/std/datetime/date/DateTime/Functions/isAD.html": {
    "href": "phobos/std/datetime/date/DateTime/Functions/isAD.html",
    "title": "Overloads for - isAD | Marmos Demo",
    "keywords": "Overloads for - isAD Module std.datetime.date Parent DateTime isAD() bool isAD( ) Whether the current year is a date in A.D."
  },
  "phobos/std/datetime/date/DateTime/Functions/isLeapYear.html": {
    "href": "phobos/std/datetime/date/DateTime/Functions/isLeapYear.html",
    "title": "Overloads for - isLeapYear | Marmos Demo",
    "keywords": "Overloads for - isLeapYear Module std.datetime.date Parent DateTime isLeapYear() bool isLeapYear( ) Whether this $(LREF DateTime) is in a leap year."
  },
  "phobos/std/datetime/date/DateTime/Functions/isoWeek.html": {
    "href": "phobos/std/datetime/date/DateTime/Functions/isoWeek.html",
    "title": "Overloads for - isoWeek | Marmos Demo",
    "keywords": "Overloads for - isoWeek Module std.datetime.date Parent DateTime isoWeek() ubyte isoWeek( ) The ISO 8601 week of the year that this $(LREF DateTime) is in. See_Also $(HTTP en.wikipedia.org/wiki/ISO_week_date, ISO Week Date)"
  },
  "phobos/std/datetime/date/DateTime/Functions/isoWeekYear.html": {
    "href": "phobos/std/datetime/date/DateTime/Functions/isoWeekYear.html",
    "title": "Overloads for - isoWeekYear | Marmos Demo",
    "keywords": "Overloads for - isoWeekYear Module std.datetime.date Parent DateTime isoWeekYear() short isoWeekYear( ) The year of the ISO 8601 week calendar that this $(LREF DateTime) is in. See_Also $(HTTP en.wikipedia.org/wiki/ISO_week_date, ISO Week Date)"
  },
  "phobos/std/datetime/date/DateTime/Functions/julianDay.html": {
    "href": "phobos/std/datetime/date/DateTime/Functions/julianDay.html",
    "title": "Overloads for - julianDay | Marmos Demo",
    "keywords": "Overloads for - julianDay Module std.datetime.date Parent DateTime julianDay() long julianDay( ) The $(HTTP en.wikipedia.org/wiki/Julian_day, Julian day) for this $(LREF DateTime) at the given time. For example, prior to noon, 1996-03-31 would be the Julian day number 2_450_173, so this function returns 2_450_173, while from noon onward, the julian day number would be 2_450_174, so this function returns 2_450_174."
  },
  "phobos/std/datetime/date/DateTime/Functions/max.html": {
    "href": "phobos/std/datetime/date/DateTime/Functions/max.html",
    "title": "Overloads for - max | Marmos Demo",
    "keywords": "Overloads for - max Module std.datetime.date Parent DateTime max() DateTime max( ) static Returns the $(LREF DateTime) farthest in the future which is representable by $(LREF DateTime)."
  },
  "phobos/std/datetime/date/DateTime/Functions/min.html": {
    "href": "phobos/std/datetime/date/DateTime/Functions/min.html",
    "title": "Overloads for - min | Marmos Demo",
    "keywords": "Overloads for - min Module std.datetime.date Parent DateTime min() DateTime min( ) static Returns the $(LREF DateTime) farthest in the past which is representable by $(LREF DateTime)."
  },
  "phobos/std/datetime/date/DateTime/Functions/minute.html": {
    "href": "phobos/std/datetime/date/DateTime/Functions/minute.html",
    "title": "Overloads for - minute | Marmos Demo",
    "keywords": "Overloads for - minute Module std.datetime.date Parent DateTime minute() ubyte minute( ) Minutes past the hour. minute(minute) void minute( int minute ) Minutes past the hour. Params minute int The minute to set this $(LREF DateTime)'s minute to. Throws $(REF DateTimeException,std,datetime,date) if the given minute would result in an invalid $(LREF DateTime)."
  },
  "phobos/std/datetime/date/DateTime/Functions/modJulianDay.html": {
    "href": "phobos/std/datetime/date/DateTime/Functions/modJulianDay.html",
    "title": "Overloads for - modJulianDay | Marmos Demo",
    "keywords": "Overloads for - modJulianDay Module std.datetime.date Parent DateTime modJulianDay() long modJulianDay( ) The modified $(HTTP en.wikipedia.org/wiki/Julian_day, Julian day) for any time on this date (since, the modified Julian day changes at midnight)."
  },
  "phobos/std/datetime/date/DateTime/Functions/month.html": {
    "href": "phobos/std/datetime/date/DateTime/Functions/month.html",
    "title": "Overloads for - month | Marmos Demo",
    "keywords": "Overloads for - month Module std.datetime.date Parent DateTime month() Month month( ) Month of a Gregorian Year. month(month) void month( Month month ) Month of a Gregorian Year. Params month Month The month to set this $(LREF DateTime)'s month to. Throws $(REF DateTimeException,std,datetime,date) if the given month is not a valid month."
  },
  "phobos/std/datetime/date/DateTime/Functions/opCmp.html": {
    "href": "phobos/std/datetime/date/DateTime/Functions/opCmp.html",
    "title": "Overloads for - opCmp | Marmos Demo",
    "keywords": "Overloads for - opCmp Module std.datetime.date Parent DateTime opCmp(rhs) int opCmp( DateTime rhs ) Compares this $(LREF DateTime) with the given DateTime. . Returns $(BOOKTABLE, $(TR $(TD this < rhs) $(TD < 0)) $(TR $(TD this == rhs) $(TD 0)) $(TR $(TD this > rhs) $(TD > 0)) )"
  },
  "phobos/std/datetime/date/DateTime/Functions/second.html": {
    "href": "phobos/std/datetime/date/DateTime/Functions/second.html",
    "title": "Overloads for - second | Marmos Demo",
    "keywords": "Overloads for - second Module std.datetime.date Parent DateTime second() ubyte second( ) Seconds past the minute. second(second) void second( int second ) Seconds past the minute. Params second int The second to set this $(LREF DateTime)'s second to. Throws $(REF DateTimeException,std,datetime,date) if the given seconds would result in an invalid $(LREF DateTime)."
  },
  "phobos/std/datetime/date/DateTime/Functions/timeOfDay.html": {
    "href": "phobos/std/datetime/date/DateTime/Functions/timeOfDay.html",
    "title": "Overloads for - timeOfDay | Marmos Demo",
    "keywords": "Overloads for - timeOfDay Module std.datetime.date Parent DateTime timeOfDay() TimeOfDay timeOfDay( ) The time portion of $(LREF DateTime). timeOfDay(tod) void timeOfDay( TimeOfDay tod ) The time portion of $(LREF DateTime). Params tod TimeOfDay The $(REF TimeOfDay,std,datetime,date) to set this $(LREF DateTime)'s time portion to."
  },
  "phobos/std/datetime/date/DateTime/Functions/toISOExtString.html": {
    "href": "phobos/std/datetime/date/DateTime/Functions/toISOExtString.html",
    "title": "Overloads for - toISOExtString | Marmos Demo",
    "keywords": "Overloads for - toISOExtString Module std.datetime.date Parent DateTime toISOExtString() string toISOExtString( ) Converts this $(LREF DateTime) to a string with the format YYYY-MM-DDTHH:MM:SS . If writer is set, the resulting string will be written directly to it. Params writer <parameter not found> A char accepting $(REF_ALTTEXT output range, isOutputRange, std, range, primitives) Returns: A string when not using an output range; void otherwise."
  },
  "phobos/std/datetime/date/DateTime/Functions/toISOString.html": {
    "href": "phobos/std/datetime/date/DateTime/Functions/toISOString.html",
    "title": "Overloads for - toISOString | Marmos Demo",
    "keywords": "Overloads for - toISOString Module std.datetime.date Parent DateTime toISOString() string toISOString( ) Converts this $(LREF DateTime) to a string with the format YYYYMMDDTHHMMSS . If writer is set, the resulting string will be written directly to it. Params writer <parameter not found> A char accepting $(REF_ALTTEXT output range, isOutputRange, std, range, primitives) Returns: A string when not using an output range; void otherwise."
  },
  "phobos/std/datetime/date/DateTime/Functions/toSimpleString.html": {
    "href": "phobos/std/datetime/date/DateTime/Functions/toSimpleString.html",
    "title": "Overloads for - toSimpleString | Marmos Demo",
    "keywords": "Overloads for - toSimpleString Module std.datetime.date Parent DateTime toSimpleString() string toSimpleString( ) Converts this $(LREF DateTime) to a string with the format YYYY-Mon-DD HH:MM:SS . If writer is set, the resulting string will be written directly to it. Params writer <parameter not found> A char accepting $(REF_ALTTEXT output range, isOutputRange, std, range, primitives) Returns: A string when not using an output range; void otherwise."
  },
  "phobos/std/datetime/date/DateTime/Functions/toString.html": {
    "href": "phobos/std/datetime/date/DateTime/Functions/toString.html",
    "title": "Overloads for - toString | Marmos Demo",
    "keywords": "Overloads for - toString Module std.datetime.date Parent DateTime toString() string toString( ) Converts this $(LREF DateTime) to a string. This function exists to make it easy to convert a $(LREF DateTime) to a string for code that does not care what the exact format is - just that it presents the information in a clear manner. It also makes it easy to simply convert a $(LREF DateTime) to a string when using functions such as to!string , format , or writeln which use toString to convert user-defined types. So, it is unlikely that much code will call toString directly. The format of the string is purposefully unspecified, and code that cares about the format of the string should use toISOString , toISOExtString , toSimpleString , or some other custom formatting function that explicitly generates the format that the code needs. The reason is that the code is then clear about what format it's using, making it less error-prone to maintain the code and interact with other software that consumes the generated strings. It's for this same reason that $(LREF DateTime) has no fromString function, whereas it does have fromISOString , fromISOExtString , and fromSimpleString . The format returned by toString may or may not change in the future."
  },
  "phobos/std/datetime/date/DateTime/Functions/year.html": {
    "href": "phobos/std/datetime/date/DateTime/Functions/year.html",
    "title": "Overloads for - year | Marmos Demo",
    "keywords": "Overloads for - year Module std.datetime.date Parent DateTime year() short year( ) Year of the Gregorian Calendar. Positive numbers are A.D. Non-positive are B.C. year(year) void year( int year ) Year of the Gregorian Calendar. Positive numbers are A.D. Non-positive are B.C. Params year int The year to set this $(LREF DateTime)'s year to. Throws $(REF DateTimeException,std,datetime,date) if the new year is not a leap year and if the resulting date would be on February 29th."
  },
  "phobos/std/datetime/date/DateTime/Functions/yearBC.html": {
    "href": "phobos/std/datetime/date/DateTime/Functions/yearBC.html",
    "title": "Overloads for - yearBC | Marmos Demo",
    "keywords": "Overloads for - yearBC Module std.datetime.date Parent DateTime yearBC() short yearBC( ) Year B.C. of the Gregorian Calendar counting year 0 as 1 B.C. Throws $(REF DateTimeException,std,datetime,date) if isAD is true. yearBC(year) void yearBC( int year ) Year B.C. of the Gregorian Calendar counting year 0 as 1 B.C. Params year int The year B.C. to set this $(LREF DateTime)'s year to. Throws $(REF DateTimeException,std,datetime,date) if a non-positive value is given."
  },
  "phobos/std/datetime/date/Functions/cmpTimeUnits.html": {
    "href": "phobos/std/datetime/date/Functions/cmpTimeUnits.html",
    "title": "Overloads for - cmpTimeUnits | Marmos Demo",
    "keywords": "Overloads for - cmpTimeUnits Module std.datetime.date cmpTimeUnits(lhs, rhs) int cmpTimeUnits( string lhs, string rhs ) Compares two time unit strings. \"years\" are the largest units and \"hnsecs\" are the smallest. Returns $(BOOKTABLE, $(TR $(TD this < rhs) $(TD < 0)) $(TR $(TD this == rhs) $(TD 0)) $(TR $(TD this > rhs) $(TD > 0)) ) Throws $(LREF DateTimeException) if either of the given strings is not a valid time unit string."
  },
  "phobos/std/datetime/date/Functions/cmpTimeUnitsCTFE.html": {
    "href": "phobos/std/datetime/date/Functions/cmpTimeUnitsCTFE.html",
    "title": "Overloads for - cmpTimeUnitsCTFE | Marmos Demo",
    "keywords": "Overloads for - cmpTimeUnitsCTFE Module std.datetime.date cmpTimeUnitsCTFE(lhs, rhs) int cmpTimeUnitsCTFE( string lhs, string rhs )"
  },
  "phobos/std/datetime/date/Functions/daysToDayOfWeek.html": {
    "href": "phobos/std/datetime/date/Functions/daysToDayOfWeek.html",
    "title": "Overloads for - daysToDayOfWeek | Marmos Demo",
    "keywords": "Overloads for - daysToDayOfWeek Module std.datetime.date daysToDayOfWeek(currDoW, dow) int daysToDayOfWeek( DayOfWeek currDoW, DayOfWeek dow ) Returns the number of days from the current day of the week to the given day of the week. If they are the same, then the result is 0. Params currDoW DayOfWeek The current day of the week. dow DayOfWeek The day of the week to get the number of days to."
  },
  "phobos/std/datetime/date/Functions/enforceValid.html": {
    "href": "phobos/std/datetime/date/Functions/enforceValid.html",
    "title": "Overloads for - enforceValid | Marmos Demo",
    "keywords": "Overloads for - enforceValid Module std.datetime.date enforceValid(value, file, line) void enforceValid( int value, string file, size_t line ) Params units <parameter not found> The units of time to validate. value int The number to validate. file string The file that the $(LREF DateTimeException) will list if thrown. line size_t The line number that the $(LREF DateTimeException) will list if thrown. Throws $(LREF DateTimeException) if valid!units(value) is false. enforceValid(year, month, day, file, line) void enforceValid( int year, Month month, int day, string file, size_t line ) Because the validity of the day number depends on both on the year and month of which the day is occurring, take all three variables to validate the day. Params units <parameter not found> The units of time to validate. year int The year of the day to validate. month Month The month of the day to validate. day int The day to validate. file string The file that the $(LREF DateTimeException) will list if thrown. line size_t The line number that the $(LREF DateTimeException) will list if thrown. Throws $(LREF DateTimeException) if $(D valid!\"days\"(year, month, day)) is false."
  },
  "phobos/std/datetime/date/Functions/getDayOfWeek.html": {
    "href": "phobos/std/datetime/date/Functions/getDayOfWeek.html",
    "title": "Overloads for - getDayOfWeek | Marmos Demo",
    "keywords": "Overloads for - getDayOfWeek Module std.datetime.date getDayOfWeek(day) DayOfWeek getDayOfWeek( int day )"
  },
  "phobos/std/datetime/date/Functions/initializeTests.html": {
    "href": "phobos/std/datetime/date/Functions/initializeTests.html",
    "title": "Overloads for - initializeTests | Marmos Demo",
    "keywords": "Overloads for - initializeTests Module std.datetime.date initializeTests() void initializeTests( )"
  },
  "phobos/std/datetime/date/Functions/maxDay.html": {
    "href": "phobos/std/datetime/date/Functions/maxDay.html",
    "title": "Overloads for - maxDay | Marmos Demo",
    "keywords": "Overloads for - maxDay Module std.datetime.date maxDay(year, month) ubyte maxDay( int year, int month )"
  },
  "phobos/std/datetime/date/Functions/monthFromString.html": {
    "href": "phobos/std/datetime/date/Functions/monthFromString.html",
    "title": "Overloads for - monthFromString | Marmos Demo",
    "keywords": "Overloads for - monthFromString Module std.datetime.date monthFromString(monthStr) Month monthFromString( T monthStr )"
  },
  "phobos/std/datetime/date/Functions/monthToString.html": {
    "href": "phobos/std/datetime/date/Functions/monthToString.html",
    "title": "Overloads for - monthToString | Marmos Demo",
    "keywords": "Overloads for - monthToString Module std.datetime.date monthToString(month) string monthToString( Month month )"
  },
  "phobos/std/datetime/date/Functions/monthsToMonth.html": {
    "href": "phobos/std/datetime/date/Functions/monthsToMonth.html",
    "title": "Overloads for - monthsToMonth | Marmos Demo",
    "keywords": "Overloads for - monthsToMonth Module std.datetime.date monthsToMonth(currMonth, month) int monthsToMonth( int currMonth, int month ) Returns the number of months from the current months of the year to the given month of the year. If they are the same, then the result is 0. Params currMonth int The current month of the year. month int The month of the year to get the number of months to."
  },
  "phobos/std/datetime/date/Functions/splitUnitsFromHNSecs.html": {
    "href": "phobos/std/datetime/date/Functions/splitUnitsFromHNSecs.html",
    "title": "Overloads for - splitUnitsFromHNSecs | Marmos Demo",
    "keywords": "Overloads for - splitUnitsFromHNSecs Module std.datetime.date splitUnitsFromHNSecs(hnsecs) long splitUnitsFromHNSecs( long hnsecs )"
  },
  "phobos/std/datetime/date/Functions/testDaysOfLeapYear.html": {
    "href": "phobos/std/datetime/date/Functions/testDaysOfLeapYear.html",
    "title": "Overloads for - testDaysOfLeapYear | Marmos Demo",
    "keywords": "Overloads for - testDaysOfLeapYear Module std.datetime.date testDaysOfLeapYear() <bug: unknown> testDaysOfLeapYear( )"
  },
  "phobos/std/datetime/date/Functions/testDaysOfYear.html": {
    "href": "phobos/std/datetime/date/Functions/testDaysOfYear.html",
    "title": "Overloads for - testDaysOfYear | Marmos Demo",
    "keywords": "Overloads for - testDaysOfYear Module std.datetime.date testDaysOfYear() <bug: unknown> testDaysOfYear( )"
  },
  "phobos/std/datetime/date/Functions/testGregDaysAD.html": {
    "href": "phobos/std/datetime/date/Functions/testGregDaysAD.html",
    "title": "Overloads for - testGregDaysAD | Marmos Demo",
    "keywords": "Overloads for - testGregDaysAD Module std.datetime.date testGregDaysAD() <bug: unknown> testGregDaysAD( )"
  },
  "phobos/std/datetime/date/Functions/testGregDaysBC.html": {
    "href": "phobos/std/datetime/date/Functions/testGregDaysBC.html",
    "title": "Overloads for - testGregDaysBC | Marmos Demo",
    "keywords": "Overloads for - testGregDaysBC Module std.datetime.date testGregDaysBC() <bug: unknown> testGregDaysBC( )"
  },
  "phobos/std/datetime/date/Functions/testMonthDays.html": {
    "href": "phobos/std/datetime/date/Functions/testMonthDays.html",
    "title": "Overloads for - testMonthDays | Marmos Demo",
    "keywords": "Overloads for - testMonthDays Module std.datetime.date testMonthDays() <bug: unknown> testMonthDays( )"
  },
  "phobos/std/datetime/date/Functions/testTODs.html": {
    "href": "phobos/std/datetime/date/Functions/testTODs.html",
    "title": "Overloads for - testTODs | Marmos Demo",
    "keywords": "Overloads for - testTODs Module std.datetime.date testTODs() <bug: unknown> testTODs( )"
  },
  "phobos/std/datetime/date/Functions/testTODsThrown.html": {
    "href": "phobos/std/datetime/date/Functions/testTODsThrown.html",
    "title": "Overloads for - testTODsThrown | Marmos Demo",
    "keywords": "Overloads for - testTODsThrown Module std.datetime.date testTODsThrown() <bug: unknown> testTODsThrown( )"
  },
  "phobos/std/datetime/date/Functions/valid.html": {
    "href": "phobos/std/datetime/date/Functions/valid.html",
    "title": "Overloads for - valid | Marmos Demo",
    "keywords": "Overloads for - valid Module std.datetime.date valid(value) bool valid( int value ) Returns whether the given value is valid for the given unit type when in a time point. Naturally, a duration is not held to a particular range, but the values in a time point are (e.g. a month must be in the range of 1 - 12 inclusive). Params units <parameter not found> The units of time to validate. value int The number to validate. valid(year, month, day) bool valid( int year, int month, int day ) Returns whether the given day is valid for the given year and month. Params units <parameter not found> The units of time to validate. year int The year of the day to validate. month int The month of the day to validate (January is 1). day int The day to validate."
  },
  "phobos/std/datetime/date/Functions/validTimeUnits.html": {
    "href": "phobos/std/datetime/date/Functions/validTimeUnits.html",
    "title": "Overloads for - validTimeUnits | Marmos Demo",
    "keywords": "Overloads for - validTimeUnits Module std.datetime.date validTimeUnits(units) bool validTimeUnits( <bug: unknown> units ) Whether all of the given strings are valid units of time. \"nsecs\" is not considered a valid unit of time. Nothing in std.datetime can handle precision greater than hnsecs, and the few functions in core.time which deal with \"nsecs\" deal with it explicitly."
  },
  "phobos/std/datetime/date/Functions/yearIsLeapYear.html": {
    "href": "phobos/std/datetime/date/Functions/yearIsLeapYear.html",
    "title": "Overloads for - yearIsLeapYear | Marmos Demo",
    "keywords": "Overloads for - yearIsLeapYear Module std.datetime.date yearIsLeapYear(year) bool yearIsLeapYear( int year ) Whether the given Gregorian Year is a leap year. Params year int The year to to be tested."
  },
  "phobos/std/datetime/date/Overview.html": {
    "href": "phobos/std/datetime/date/Overview.html",
    "title": "Module - std.datetime.date | Marmos Demo",
    "keywords": "Module - std.datetime.date About $(SCRIPT inhibitQuickIndex = 1;) $(DIVC quickindex, $(BOOKTABLE, $(TR $(TH Category) $(TH Functions)) $(TR $(TD Main date types) $(TD $(LREF Date) $(LREF DateTime) )) $(TR $(TD Other date types) $(TD $(LREF Month) $(LREF DayOfWeek) $(LREF TimeOfDay) )) $(TR $(TD Date checking) $(TD $(LREF valid) $(LREF validTimeUnits) $(LREF yearIsLeapYear) $(LREF isTimePoint) $(LREF enforceValid) )) $(TR $(TD Date conversion) $(TD $(LREF daysToDayOfWeek) $(LREF monthsToMonth) )) $(TR $(TD Time units) $(TD $(LREF cmpTimeUnits) $(LREF timeStrings) )) $(TR $(TD Other) $(TD $(LREF AllowDayOverflow) $(LREF DateTimeException) )) )) License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP jmdavisprog.com, Jonathan M Davis) Source: $(PHOBOSSRC std/datetime/date.d) Aliases Name Description AllowDayOverflow In some date calculations, adding months or years can cause the date to fall on a day of the month which is not valid (e.g. February 29th 2001 or June 31st 2000). If overflow is allowed (as is the default), then the month will be incremented accordingly (so, February 29th 2001 would become March 1st 2001, and June 31st 2000 would become July 1st 2000). If overflow is not allowed, then the day will be adjusted to the last valid day in that month (so, February 29th 2001 would become February 28th 2001 and June 31st 2000 would become June 30th 2000). DateTimeException Exception type used by std.datetime. It's an alias to $(REF TimeException,core,time). Either can be caught without concern about which module it came from. U Whether the given type defines all of the necessary functions for it to function as a time point. Structs Name Description Date Represents a date in the $(HTTP en.wikipedia.org/wiki/Proleptic_Gregorian_calendar, Proleptic Gregorian Calendar) ranging from 32,768 B.C. to 32,767 A.D. Positive years are A.D. Non-positive years are B.C. DateTime Combines the $(REF Date,std,datetime,date) and $(REF TimeOfDay,std,datetime,date) structs to give an object which holds both the date and the time. It is optimized for calendar-based operations and has no concept of time zone. For an object which is optimized for time operations based on the system time, use $(REF SysTime,std,datetime,systime). $(REF SysTime,std,datetime,systime) has a concept of time zone and has much higher precision (hnsecs). DateTime is intended primarily for calendar-based uses rather than precise time operations. DayOfYear GregDay MonthDay TimeOfDay Represents a time of day with hours, minutes, and seconds. It uses 24 hour time. Functions Name Description cmpTimeUnits Compares two time unit strings. \"years\" are the largest units and \"hnsecs\" are the smallest. cmpTimeUnitsCTFE daysToDayOfWeek Returns the number of days from the current day of the week to the given day of the week. If they are the same, then the result is 0. enforceValid getDayOfWeek initializeTests maxDay monthFromString monthsToMonth Returns the number of months from the current months of the year to the given month of the year. If they are the same, then the result is 0. monthToString splitUnitsFromHNSecs testDaysOfLeapYear testDaysOfYear testGregDaysAD testGregDaysBC testMonthDays testTODs testTODsThrown valid Returns whether the given value is valid for the given unit type when in a time point. Naturally, a duration is not held to a particular range, but the values in a time point are (e.g. a month must be in the range of 1 - 12 inclusive). validTimeUnits Whether all of the given strings are valid units of time. yearIsLeapYear Whether the given Gregorian Year is a leap year. Variables Name Description CmpTimeUnits Compares two time unit strings at compile time. \"years\" are the largest units and \"hnsecs\" are the smallest. daysIn100Years daysIn400Years daysIn4Years daysInLeapYear daysInYear hasMax Whether the given type defines all of the necessary functions for it to function as a time point. hasMin Whether the given type defines all of the necessary functions for it to function as a time point. hasOverloadedOpAssignWithDuration Whether the given type defines all of the necessary functions for it to function as a time point. hasOverloadedOpBinaryWithDuration Whether the given type defines all of the necessary functions for it to function as a time point. hasOverloadedOpBinaryWithSelf Whether the given type defines all of the necessary functions for it to function as a time point. isTimePoint Whether the given type defines all of the necessary functions for it to function as a time point. lastDayLeap lastDayNonLeap testDatesAD testDatesBC testDateTimesAD testDateTimesBC testDays testHours testMinSecs testYearsAD testYearsBC timeStrings Array of the strings representing time units, starting with the smallest unit and going to the largest. It does not include \"nsecs\" ."
  },
  "phobos/std/datetime/date/Structs/Date.html": {
    "href": "phobos/std/datetime/date/Structs/Date.html",
    "title": "Struct - Date | Marmos Demo",
    "keywords": "Struct - Date Module std.datetime.date public struct Date { // Day of a Gregorian Month. ubyte day( ) ; // Day of a Gregorian Month. void day( int day ) ; // The Xth day of the Gregorian Calendar that this $(LREF Date) is on. int dayOfGregorianCal( ) ; // The Xth day of the Gregorian Calendar that this $(LREF Date) is on. void dayOfGregorianCal( int day ) ; // Day of the week this $(LREF Date) is on. DayOfWeek dayOfWeek( ) ; // Day of the year this $(LREF Date) is on. ushort dayOfYear( ) ; // Day of the year. void dayOfYear( int day ) ; // The last day in the month that this $(LREF Date) is in. ubyte daysInMonth( ) ; // Returns the difference between the two $(LREF Date)s in months. int diffMonths( Date rhs ) ; // $(LREF Date) for the last day in the month that this $(LREF Date) is in. Date endOfMonth( ) ; // Date fromISOWeek( short isoWeekYear, ubyte isoWeek, DayOfWeek weekday ) static; // Whether the current year is a date in A.D. bool isAD( ) ; // Whether this $(LREF Date) is in a leap year. bool isLeapYear( ) ; // The ISO 8601 week of the year that this $(LREF Date) is in. ubyte isoWeek( ) ; // The ISO 8601 week and year of the year that this $(LREF Date) is in. <bug: unknown> isoWeekAndYear( ) auto; // The year inside the ISO 8601 week calendar that this $(LREF Date) is in. short isoWeekYear( ) ; // The $(HTTP en.wikipedia.org/wiki/Julian_day, Julian day) for this $(LREF Date) at noon (since the Julian day changes at noon). long julianDay( ) ; // Returns the $(LREF Date) farthest in the future which is representable by $(LREF Date). Date max( ) static; // Returns the $(LREF Date) farthest in the past which is representable by $(LREF Date). Date min( ) static; // The modified $(HTTP en.wikipedia.org/wiki/Julian_day, Julian day) for any time on this date (since, the modified Julian day changes at midnight). long modJulianDay( ) ; // Month of a Gregorian Year. Month month( ) ; // Month of a Gregorian Year. void month( Month month ) ; // Compares this $(LREF Date) with the given $(LREF Date). int opCmp( Date rhs ) ; // Converts this $(LREF Date) to a string with the format `YYYY-MM-DD` . If `writer` is set, the resulting string will be written directly to it. string toISOExtString( ) ; // Converts this $(LREF Date) to a string with the format `YYYYMMDD` . If `writer` is set, the resulting string will be written directly to it. string toISOString( ) ; // Converts this $(LREF Date) to a string with the format `YYYY-Mon-DD` . If `writer` is set, the resulting string will be written directly to it. string toSimpleString( ) ; // Converts this $(LREF Date) to a string. string toString( ) ; // Year of the Gregorian Calendar. Positive numbers are A.D. Non-positive are B.C. short year( ) ; // Year of the Gregorian Calendar. Positive numbers are A.D. Non-positive are B.C. void year( int year ) ; // Year B.C. of the Gregorian Calendar counting year 0 as 1 B.C. ushort yearBC( ) ; // Year B.C. of the Gregorian Calendar counting year 0 as 1 B.C. void yearBC( int year ) ; } About Represents a date in the $(HTTP en.wikipedia.org/wiki/Proleptic_Gregorian_calendar, Proleptic Gregorian Calendar) ranging from 32,768 B.C. to 32,767 A.D. Positive years are A.D. Non-positive years are B.C. Year, month, and day are kept separately internally so that Date is optimized for calendar-based operations. Date uses the Proleptic Gregorian Calendar, so it assumes the Gregorian leap year calculations for its entire length. As per $(HTTP en.wikipedia.org/wiki/ISO_8601, ISO 8601), it treats 1 B.C. as year 0, i.e. 1 B.C. is 0, 2 B.C. is -1, etc. Use $(LREF yearBC) to use B.C. as a positive integer with 1 B.C. being the year prior to 1 A.D. Year 0 is a leap year. Functions Name Description day Day of a Gregorian Month. dayOfGregorianCal The Xth day of the Gregorian Calendar that this $(LREF Date) is on. dayOfWeek Day of the week this $(LREF Date) is on. dayOfYear Day of the year this $(LREF Date) is on. daysInMonth The last day in the month that this $(LREF Date) is in. diffMonths Returns the difference between the two $(LREF Date)s in months. endOfMonth $(LREF Date) for the last day in the month that this $(LREF Date) is in. fromISOWeek isAD Whether the current year is a date in A.D. isLeapYear Whether this $(LREF Date) is in a leap year. isoWeek The ISO 8601 week of the year that this $(LREF Date) is in. isoWeekAndYear The ISO 8601 week and year of the year that this $(LREF Date) is in. isoWeekYear The year inside the ISO 8601 week calendar that this $(LREF Date) is in. julianDay The $(HTTP en.wikipedia.org/wiki/Julian_day, Julian day) for this $(LREF Date) at noon (since the Julian day changes at noon). max Returns the $(LREF Date) farthest in the future which is representable by $(LREF Date). min Returns the $(LREF Date) farthest in the past which is representable by $(LREF Date). modJulianDay The modified $(HTTP en.wikipedia.org/wiki/Julian_day, Julian day) for any time on this date (since, the modified Julian day changes at midnight). month Month of a Gregorian Year. opCmp Compares this $(LREF Date) with the given $(LREF Date). toISOExtString Converts this $(LREF Date) to a string with the format YYYY-MM-DD . If writer is set, the resulting string will be written directly to it. toISOString Converts this $(LREF Date) to a string with the format YYYYMMDD . If writer is set, the resulting string will be written directly to it. toSimpleString Converts this $(LREF Date) to a string with the format YYYY-Mon-DD . If writer is set, the resulting string will be written directly to it. toString Converts this $(LREF Date) to a string. year Year of the Gregorian Calendar. Positive numbers are A.D. Non-positive are B.C. yearBC Year B.C. of the Gregorian Calendar counting year 0 as 1 B.C."
  },
  "phobos/std/datetime/date/Structs/DateTime.html": {
    "href": "phobos/std/datetime/date/Structs/DateTime.html",
    "title": "Struct - DateTime | Marmos Demo",
    "keywords": "Struct - DateTime Module std.datetime.date public struct DateTime { // The date portion of $(LREF DateTime). Date date( ) ; // The date portion of $(LREF DateTime). void date( Date date ) ; // Day of a Gregorian Month. ubyte day( ) ; // Day of a Gregorian Month. void day( int day ) ; // The Xth day of the Gregorian Calendar that this $(LREF DateTime) is on. int dayOfGregorianCal( ) ; // The Xth day of the Gregorian Calendar that this $(LREF DateTime) is on. Setting this property does not affect the time portion of $(LREF DateTime). void dayOfGregorianCal( int days ) ; // Day of the week this $(LREF DateTime) is on. DayOfWeek dayOfWeek( ) ; // Day of the year this $(LREF DateTime) is on. ushort dayOfYear( ) ; // Day of the year. void dayOfYear( int day ) ; // The last day in the month that this $(LREF DateTime) is in. ubyte daysInMonth( ) ; // Returns the difference between the two $(LREF DateTime)s in months. int diffMonths( DateTime rhs ) ; // $(LREF DateTime) for the last day in the month that this $(LREF DateTime) is in. The time portion of endOfMonth is always 23:59:59. DateTime endOfMonth( ) ; // Hours past midnight. ubyte hour( ) ; // Hours past midnight. void hour( int hour ) ; // Whether the current year is a date in A.D. bool isAD( ) ; // Whether this $(LREF DateTime) is in a leap year. bool isLeapYear( ) ; // The ISO 8601 week of the year that this $(LREF DateTime) is in. ubyte isoWeek( ) ; // The year of the ISO 8601 week calendar that this $(LREF DateTime) is in. short isoWeekYear( ) ; // The $(HTTP en.wikipedia.org/wiki/Julian_day, Julian day) for this $(LREF DateTime) at the given time. For example, prior to noon, 1996-03-31 would be the Julian day number 2_450_173, so this function returns 2_450_173, while from noon onward, the julian day number would be 2_450_174, so this function returns 2_450_174. long julianDay( ) ; // Returns the $(LREF DateTime) farthest in the future which is representable by $(LREF DateTime). DateTime max( ) static; // Returns the $(LREF DateTime) farthest in the past which is representable by $(LREF DateTime). DateTime min( ) static; // Minutes past the hour. ubyte minute( ) ; // Minutes past the hour. void minute( int minute ) ; // The modified $(HTTP en.wikipedia.org/wiki/Julian_day, Julian day) for any time on this date (since, the modified Julian day changes at midnight). long modJulianDay( ) ; // Month of a Gregorian Year. Month month( ) ; // Month of a Gregorian Year. void month( Month month ) ; // Compares this $(LREF DateTime) with the given `DateTime.` . int opCmp( DateTime rhs ) ; // Seconds past the minute. ubyte second( ) ; // Seconds past the minute. void second( int second ) ; // The time portion of $(LREF DateTime). TimeOfDay timeOfDay( ) ; // The time portion of $(LREF DateTime). void timeOfDay( TimeOfDay tod ) ; // Converts this $(LREF DateTime) to a string with the format `YYYY-MM-DDTHH:MM:SS` . If `writer` is set, the resulting string will be written directly to it. string toISOExtString( ) ; // Converts this $(LREF DateTime) to a string with the format `YYYYMMDDTHHMMSS` . If `writer` is set, the resulting string will be written directly to it. string toISOString( ) ; // Converts this $(LREF DateTime) to a string with the format `YYYY-Mon-DD HH:MM:SS` . If `writer` is set, the resulting string will be written directly to it. string toSimpleString( ) ; // Converts this $(LREF DateTime) to a string. string toString( ) ; // Year of the Gregorian Calendar. Positive numbers are A.D. Non-positive are B.C. short year( ) ; // Year of the Gregorian Calendar. Positive numbers are A.D. Non-positive are B.C. void year( int year ) ; // Year B.C. of the Gregorian Calendar counting year 0 as 1 B.C. short yearBC( ) ; // Year B.C. of the Gregorian Calendar counting year 0 as 1 B.C. void yearBC( int year ) ; } About Combines the $(REF Date,std,datetime,date) and $(REF TimeOfDay,std,datetime,date) structs to give an object which holds both the date and the time. It is optimized for calendar-based operations and has no concept of time zone. For an object which is optimized for time operations based on the system time, use $(REF SysTime,std,datetime,systime). $(REF SysTime,std,datetime,systime) has a concept of time zone and has much higher precision (hnsecs). DateTime is intended primarily for calendar-based uses rather than precise time operations. Functions Name Description date The date portion of $(LREF DateTime). day Day of a Gregorian Month. dayOfGregorianCal The Xth day of the Gregorian Calendar that this $(LREF DateTime) is on. dayOfWeek Day of the week this $(LREF DateTime) is on. dayOfYear Day of the year this $(LREF DateTime) is on. daysInMonth The last day in the month that this $(LREF DateTime) is in. diffMonths Returns the difference between the two $(LREF DateTime)s in months. endOfMonth $(LREF DateTime) for the last day in the month that this $(LREF DateTime) is in. The time portion of endOfMonth is always 23:59:59. hour Hours past midnight. isAD Whether the current year is a date in A.D. isLeapYear Whether this $(LREF DateTime) is in a leap year. isoWeek The ISO 8601 week of the year that this $(LREF DateTime) is in. isoWeekYear The year of the ISO 8601 week calendar that this $(LREF DateTime) is in. julianDay The $(HTTP en.wikipedia.org/wiki/Julian_day, Julian day) for this $(LREF DateTime) at the given time. For example, prior to noon, 1996-03-31 would be the Julian day number 2_450_173, so this function returns 2_450_173, while from noon onward, the julian day number would be 2_450_174, so this function returns 2_450_174. max Returns the $(LREF DateTime) farthest in the future which is representable by $(LREF DateTime). min Returns the $(LREF DateTime) farthest in the past which is representable by $(LREF DateTime). minute Minutes past the hour. modJulianDay The modified $(HTTP en.wikipedia.org/wiki/Julian_day, Julian day) for any time on this date (since, the modified Julian day changes at midnight). month Month of a Gregorian Year. opCmp Compares this $(LREF DateTime) with the given DateTime. . second Seconds past the minute. timeOfDay The time portion of $(LREF DateTime). toISOExtString Converts this $(LREF DateTime) to a string with the format YYYY-MM-DDTHH:MM:SS . If writer is set, the resulting string will be written directly to it. toISOString Converts this $(LREF DateTime) to a string with the format YYYYMMDDTHHMMSS . If writer is set, the resulting string will be written directly to it. toSimpleString Converts this $(LREF DateTime) to a string with the format YYYY-Mon-DD HH:MM:SS . If writer is set, the resulting string will be written directly to it. toString Converts this $(LREF DateTime) to a string. year Year of the Gregorian Calendar. Positive numbers are A.D. Non-positive are B.C. yearBC Year B.C. of the Gregorian Calendar counting year 0 as 1 B.C."
  },
  "phobos/std/datetime/date/Structs/DayOfYear.html": {
    "href": "phobos/std/datetime/date/Structs/DayOfYear.html",
    "title": "Struct - DayOfYear | Marmos Demo",
    "keywords": "Struct - DayOfYear Module std.datetime.date public struct DayOfYear { // int day; // MonthDay md; } Variables Name Description day md"
  },
  "phobos/std/datetime/date/Structs/GregDay.html": {
    "href": "phobos/std/datetime/date/Structs/GregDay.html",
    "title": "Struct - GregDay | Marmos Demo",
    "keywords": "Struct - GregDay Module std.datetime.date public struct GregDay { // Date date; // int day; } Variables Name Description date day"
  },
  "phobos/std/datetime/date/Structs/MonthDay.html": {
    "href": "phobos/std/datetime/date/Structs/MonthDay.html",
    "title": "Struct - MonthDay | Marmos Demo",
    "keywords": "Struct - MonthDay Module std.datetime.date public struct MonthDay { // short day; // Month month; } Variables Name Description day month"
  },
  "phobos/std/datetime/date/Structs/TimeOfDay.html": {
    "href": "phobos/std/datetime/date/Structs/TimeOfDay.html",
    "title": "Struct - TimeOfDay | Marmos Demo",
    "keywords": "Struct - TimeOfDay Module std.datetime.date public struct TimeOfDay { // Hours past midnight. ubyte hour( ) ; // Hours past midnight. void hour( int hour ) ; // Returns one second short of midnight. TimeOfDay max( ) static; // Returns midnight. TimeOfDay min( ) static; // Minutes past the hour. ubyte minute( ) ; // Minutes past the hour. void minute( int minute ) ; // Compares this $(LREF TimeOfDay) with the given $(LREF TimeOfDay). int opCmp( TimeOfDay rhs ) ; // Seconds past the minute. ubyte second( ) ; // Seconds past the minute. void second( int second ) ; // Converts this $(LREF TimeOfDay) to a string with the format `HH:MM:SS` . If `writer` is set, the resulting string will be written directly to it. string toISOExtString( ) ; // Converts this $(LREF TimeOfDay) to a string with the format `HHMMSS` . If `writer` is set, the resulting string will be written directly to it. string toISOString( ) ; // Converts this TimeOfDay to a string. string toString( ) ; // ubyte maxHour; // ubyte maxMinute; // ubyte maxSecond; } About Represents a time of day with hours, minutes, and seconds. It uses 24 hour time. Functions Name Description hour Hours past midnight. max Returns one second short of midnight. min Returns midnight. minute Minutes past the hour. opCmp Compares this $(LREF TimeOfDay) with the given $(LREF TimeOfDay). second Seconds past the minute. toISOExtString Converts this $(LREF TimeOfDay) to a string with the format HH:MM:SS . If writer is set, the resulting string will be written directly to it. toISOString Converts this $(LREF TimeOfDay) to a string with the format HHMMSS . If writer is set, the resulting string will be written directly to it. toString Converts this TimeOfDay to a string. Variables Name Description maxHour maxMinute maxSecond"
  },
  "phobos/std/datetime/date/TimeOfDay/Functions/hour.html": {
    "href": "phobos/std/datetime/date/TimeOfDay/Functions/hour.html",
    "title": "Overloads for - hour | Marmos Demo",
    "keywords": "Overloads for - hour Module std.datetime.date Parent TimeOfDay hour() ubyte hour( ) Hours past midnight. hour(hour) void hour( int hour ) Hours past midnight. Params hour int The hour of the day to set this $(LREF TimeOfDay)'s hour to. Throws $(REF DateTimeException,std,datetime,date) if the given hour would result in an invalid $(LREF TimeOfDay)."
  },
  "phobos/std/datetime/date/TimeOfDay/Functions/max.html": {
    "href": "phobos/std/datetime/date/TimeOfDay/Functions/max.html",
    "title": "Overloads for - max | Marmos Demo",
    "keywords": "Overloads for - max Module std.datetime.date Parent TimeOfDay max() TimeOfDay max( ) static Returns one second short of midnight."
  },
  "phobos/std/datetime/date/TimeOfDay/Functions/min.html": {
    "href": "phobos/std/datetime/date/TimeOfDay/Functions/min.html",
    "title": "Overloads for - min | Marmos Demo",
    "keywords": "Overloads for - min Module std.datetime.date Parent TimeOfDay min() TimeOfDay min( ) static Returns midnight."
  },
  "phobos/std/datetime/date/TimeOfDay/Functions/minute.html": {
    "href": "phobos/std/datetime/date/TimeOfDay/Functions/minute.html",
    "title": "Overloads for - minute | Marmos Demo",
    "keywords": "Overloads for - minute Module std.datetime.date Parent TimeOfDay minute() ubyte minute( ) Minutes past the hour. minute(minute) void minute( int minute ) Minutes past the hour. Params minute int The minute to set this $(LREF TimeOfDay)'s minute to. Throws $(REF DateTimeException,std,datetime,date) if the given minute would result in an invalid $(LREF TimeOfDay)."
  },
  "phobos/std/datetime/date/TimeOfDay/Functions/opCmp.html": {
    "href": "phobos/std/datetime/date/TimeOfDay/Functions/opCmp.html",
    "title": "Overloads for - opCmp | Marmos Demo",
    "keywords": "Overloads for - opCmp Module std.datetime.date Parent TimeOfDay opCmp(rhs) int opCmp( TimeOfDay rhs ) Compares this $(LREF TimeOfDay) with the given $(LREF TimeOfDay). Returns $(BOOKTABLE, $(TR $(TD this < rhs) $(TD < 0)) $(TR $(TD this == rhs) $(TD 0)) $(TR $(TD this > rhs) $(TD > 0)) )"
  },
  "phobos/std/datetime/date/TimeOfDay/Functions/second.html": {
    "href": "phobos/std/datetime/date/TimeOfDay/Functions/second.html",
    "title": "Overloads for - second | Marmos Demo",
    "keywords": "Overloads for - second Module std.datetime.date Parent TimeOfDay second() ubyte second( ) Seconds past the minute. second(second) void second( int second ) Seconds past the minute. Params second int The second to set this $(LREF TimeOfDay)'s second to. Throws $(REF DateTimeException,std,datetime,date) if the given second would result in an invalid $(LREF TimeOfDay)."
  },
  "phobos/std/datetime/date/TimeOfDay/Functions/toISOExtString.html": {
    "href": "phobos/std/datetime/date/TimeOfDay/Functions/toISOExtString.html",
    "title": "Overloads for - toISOExtString | Marmos Demo",
    "keywords": "Overloads for - toISOExtString Module std.datetime.date Parent TimeOfDay toISOExtString() string toISOExtString( ) Converts this $(LREF TimeOfDay) to a string with the format HH:MM:SS . If writer is set, the resulting string will be written directly to it. Params writer <parameter not found> A char accepting $(REF_ALTTEXT output range, isOutputRange, std, range, primitives) Returns A string when not using an output range; void otherwise."
  },
  "phobos/std/datetime/date/TimeOfDay/Functions/toISOString.html": {
    "href": "phobos/std/datetime/date/TimeOfDay/Functions/toISOString.html",
    "title": "Overloads for - toISOString | Marmos Demo",
    "keywords": "Overloads for - toISOString Module std.datetime.date Parent TimeOfDay toISOString() string toISOString( ) Converts this $(LREF TimeOfDay) to a string with the format HHMMSS . If writer is set, the resulting string will be written directly to it. Params writer <parameter not found> A char accepting $(REF_ALTTEXT output range, isOutputRange, std, range, primitives) Returns A string when not using an output range; void otherwise."
  },
  "phobos/std/datetime/date/TimeOfDay/Functions/toString.html": {
    "href": "phobos/std/datetime/date/TimeOfDay/Functions/toString.html",
    "title": "Overloads for - toString | Marmos Demo",
    "keywords": "Overloads for - toString Module std.datetime.date Parent TimeOfDay toString() string toString( ) Converts this TimeOfDay to a string. This function exists to make it easy to convert a $(LREF TimeOfDay) to a string for code that does not care what the exact format is - just that it presents the information in a clear manner. It also makes it easy to simply convert a $(LREF TimeOfDay) to a string when using functions such as to!string , format , or writeln which use toString to convert user-defined types. So, it is unlikely that much code will call toString directly. The format of the string is purposefully unspecified, and code that cares about the format of the string should use toISOString , toISOExtString , or some other custom formatting function that explicitly generates the format that the code needs. The reason is that the code is then clear about what format it's using, making it less error-prone to maintain the code and interact with other software that consumes the generated strings. It's for this same reason that $(LREF TimeOfDay) has no fromString function, whereas it does have fromISOString and fromISOExtString . The format returned by toString may or may not change in the future. Params writer <parameter not found> A char accepting $(REF_ALTTEXT output range, isOutputRange, std, range, primitives) Returns A string when not using an output range; void otherwise."
  },
  "phobos/std/datetime/interval/Functions/everyDayOfWeek.html": {
    "href": "phobos/std/datetime/interval/Functions/everyDayOfWeek.html",
    "title": "Overloads for - everyDayOfWeek | Marmos Demo",
    "keywords": "Overloads for - everyDayOfWeek Module std.datetime.interval everyDayOfWeek(dayOfWeek) <bug: unknown> everyDayOfWeek( DayOfWeek dayOfWeek ) Range-generating function. Returns a delegate which returns the next time point with the given DayOfWeek in a range. Using this delegate allows iteration over successive time points which are all the same day of the week. e.g. passing DayOfWeek.mon to everyDayOfWeek would result in a delegate which could be used to iterate over all of the Mondays in a range. Params dir <parameter not found> The direction to iterate in. If passing the return value to fwdRange , use Direction.fwd . If passing it to bwdRange , use Direction.bwd . dayOfWeek DayOfWeek The week that each time point in the range will be."
  },
  "phobos/std/datetime/interval/Functions/everyDuration.html": {
    "href": "phobos/std/datetime/interval/Functions/everyDuration.html",
    "title": "Overloads for - everyDuration | Marmos Demo",
    "keywords": "Overloads for - everyDuration Module std.datetime.interval everyDuration(duration) <bug: unknown> everyDuration( D duration ) Range-generating function. Returns a delegate which returns the next time point which is the given duration later. Using this delegate allows iteration over successive time points which are apart by the given duration e.g. passing dur!\"days\"(3) to everyDuration would result in a delegate which could be used to iterate over a range of days which are each 3 days apart. Params dir <parameter not found> The direction to iterate in. If passing the return value to fwdRange , use Direction.fwd . If passing it to bwdRange , use Direction.bwd . duration D The duration which separates each successive time point in the range. everyDuration(years, months, allowOverflow, duration) <bug: unknown> everyDuration( int years, int months, AllowDayOverflow allowOverflow, D duration ) Range-generating function. Returns a delegate which returns the next time point which is the given number of years, month, and duration later. The difference between this version of everyDuration and the version which just takes a $(REF Duration, core,time) is that this one also takes the number of years and months (along with an AllowDayOverflow to indicate whether adding years and months should allow the days to overflow). Note that if iterating forward, add!\"years\"() is called on the given time point, then add!\"months\"() , and finally the duration is added to it. However, if iterating backwards, the duration is added first, then add!\"months\"() is called, and finally add!\"years\"() is called. That way, going backwards generates close to the same time points that iterating forward does, but since adding years and months is not entirely reversible (due to possible day overflow, regardless of whether AllowDayOverflow.yes or AllowDayOverflow.no is used), it can't be guaranteed that iterating backwards will give the same time points as iterating forward would have (even assuming that the end of the range is a time point which would be returned by the delegate when iterating forward from begin ). Params dir <parameter not found> The direction to iterate in. If passing the return value to fwdRange , use Direction.fwd . If passing it to bwdRange , use Direction.bwd . years int The number of years to add to the time point passed to the delegate. months int The number of months to add to the time point passed to the delegate. allowOverflow AllowDayOverflow Whether the days should be allowed to overflow on begin and end , causing their month to increment. duration D The duration to add to the time point passed to the delegate."
  },
  "phobos/std/datetime/interval/Functions/everyMonth.html": {
    "href": "phobos/std/datetime/interval/Functions/everyMonth.html",
    "title": "Overloads for - everyMonth | Marmos Demo",
    "keywords": "Overloads for - everyMonth Module std.datetime.interval everyMonth(month) <bug: unknown> everyMonth( int month ) Range-generating function. Returns a delegate which returns the next time point with the given month which would be reached by adding months to the given time point. So, using this delegate allows iteration over successive time points which are in the same month but different years. For example, iterate over each successive December 25th in an interval by starting with a date which had the 25th as its day and passed Month.dec to everyMonth to create the delegate. Since it wouldn't really make sense to be iterating over a specific month and end up with some of the time points in the succeeding month or two years after the previous time point, AllowDayOverflow.no is always used when calculating the next time point. Params dir <parameter not found> The direction to iterate in. If passing the return value to fwdRange , use Direction.fwd . If passing it to bwdRange , use Direction.bwd . month int The month that each time point in the range will be in (January is 1)."
  },
  "phobos/std/datetime/interval/Interval/Functions/begin.html": {
    "href": "phobos/std/datetime/interval/Interval/Functions/begin.html",
    "title": "Overloads for - begin | Marmos Demo",
    "keywords": "Overloads for - begin Module std.datetime.interval Parent Interval begin() TP begin( ) The starting point of the interval. It is included in the interval. Example -------------------- assert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).begin == Date(1996, 1, 2)); -------------------- begin(timePoint) void begin( TP timePoint ) The starting point of the interval. It is included in the interval. Params timePoint TP The time point to set begin to. Throws $(REF DateTimeException,std,datetime,date) if the resulting interval would be invalid."
  },
  "phobos/std/datetime/interval/Interval/Functions/bwdRange.html": {
    "href": "phobos/std/datetime/interval/Interval/Functions/bwdRange.html",
    "title": "Overloads for - bwdRange | Marmos Demo",
    "keywords": "Overloads for - bwdRange Module std.datetime.interval Parent Interval bwdRange(func, popFirst) IntervalRange!(TPDirection.bwd) bwdRange( <bug: unknown> func, PopFirst popFirst ) Returns a range which iterates backwards over the interval, starting at end , using $(D_PARAM func) to generate each successive time point. The range's front is the interval's end . $(D_PARAM func) is used to generate the next front when popFront is called. If $(D_PARAM popFirst) is PopFirst.yes , then popFront is called before the range is returned (so that front is a time point which $(D_PARAM func) would generate). If $(D_PARAM func) ever generates a time point greater than or equal to the current front of the range, then a $(REF DateTimeException,std,datetime,date) will be thrown. The range will be empty and iteration complete when $(D_PARAM func) generates a time point equal to or less than the begin of the interval. There are helper functions in this module which generate common delegates to pass to bwdRange . Their documentation starts with \"Range-generating function,\" making them easily searchable. Params func <bug: unknown> The function used to generate the time points of the range over the interval. popFirst PopFirst Whether popFront should be called on the range before returning it. Throws $(REF DateTimeException,std,datetime,date) if this interval is empty. Warning $(D_PARAM func) must be logically pure. Ideally, $(D_PARAM func) would be a function pointer to a pure function, but forcing $(D_PARAM func) to be pure is far too restrictive to be useful, and in order to have the ease of use of having functions which generate functions to pass to fwdRange , $(D_PARAM func) must be a delegate. If $(D_PARAM func) retains state which changes as it is called, then some algorithms will not work correctly, because the range's save will have failed to have really saved the range's state. To avoid such bugs, don't pass a delegate which is not logically pure to fwdRange . If $(D_PARAM func) is given the same time point with two different calls, it must return the same result both times. Of course, none of the functions in this module have this problem, so it's only relevant for custom delegates. Example -------------------- auto interval = Interval!Date(Date(2010, 9, 1), Date(2010, 9, 9)); auto func = delegate (scope const Date date) // For iterating over even-numbered days. { if ((date.day & 1) == 0) return date - dur!\"days\"(2); return date - dur!\"days\"(1); }; auto range = interval.bwdRange(func); // An odd day. Using PopFirst.yes would have made this Date(2010, 9, 8). assert(range.front == Date(2010, 9, 9)); range.popFront(); assert(range.front == Date(2010, 9, 8)); range.popFront(); assert(range.front == Date(2010, 9, 6)); range.popFront(); assert(range.front == Date(2010, 9, 4)); range.popFront(); assert(range.front == Date(2010, 9, 2)); range.popFront(); assert(range.empty); --------------------"
  },
  "phobos/std/datetime/interval/Interval/Functions/contains.html": {
    "href": "phobos/std/datetime/interval/Interval/Functions/contains.html",
    "title": "Overloads for - contains | Marmos Demo",
    "keywords": "Overloads for - contains Module std.datetime.interval Parent Interval contains(timePoint) bool contains( TP timePoint ) Whether the given time point is within this interval. Params timePoint TP The time point to check for inclusion in this interval. Throws $(REF DateTimeException,std,datetime,date) if this interval is empty. Example -------------------- assert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).contains( Date(1994, 12, 24))); assert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).contains( Date(2000, 1, 5))); assert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).contains( Date(2012, 3, 1))); -------------------- contains(interval) bool contains( Interval interval ) Whether the given interval is completely within this interval. Params interval Interval The interval to check for inclusion in this interval. Throws $(REF DateTimeException,std,datetime,date) if either interval is empty. Example -------------------- assert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).contains( Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2)))); assert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).contains( Interval!Date(Date(1999, 1, 12), Date(2011, 9, 17)))); assert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).contains( Interval!Date(Date(1998, 2, 28), Date(2013, 5, 1)))); -------------------- contains(interval) bool contains( PosInfInterval!(TP) interval ) Whether the given interval is completely within this interval. Always returns false (unless this interval is empty), because an interval going to positive infinity can never be contained in a finite interval. Params interval PosInfInterval!(TP) The interval to check for inclusion in this interval. Throws $(REF DateTimeException,std,datetime,date) if this interval is empty. Example -------------------- assert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).contains( PosInfInterval!Date(Date(1999, 5, 4)))); -------------------- contains(interval) bool contains( NegInfInterval!(TP) interval ) Whether the given interval is completely within this interval. Always returns false (unless this interval is empty), because an interval beginning at negative infinity can never be contained in a finite interval. Params interval NegInfInterval!(TP) The interval to check for inclusion in this interval. Throws $(REF DateTimeException,std,datetime,date) if this interval is empty. Example -------------------- assert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).contains( NegInfInterval!Date(Date(1996, 5, 4)))); --------------------"
  },
  "phobos/std/datetime/interval/Interval/Functions/empty.html": {
    "href": "phobos/std/datetime/interval/Interval/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.datetime.interval Parent Interval empty() bool empty( ) Whether the interval's length is 0, that is, whether $(D begin == end). Example -------------------- assert(Interval!Date(Date(1996, 1, 2), Date(1996, 1, 2)).empty); assert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).empty); --------------------"
  },
  "phobos/std/datetime/interval/Interval/Functions/end.html": {
    "href": "phobos/std/datetime/interval/Interval/Functions/end.html",
    "title": "Overloads for - end | Marmos Demo",
    "keywords": "Overloads for - end Module std.datetime.interval Parent Interval end() TP end( ) The end point of the interval. It is excluded from the interval. Example -------------------- assert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).end == Date(2012, 3, 1)); -------------------- end(timePoint) void end( TP timePoint ) The end point of the interval. It is excluded from the interval. Params timePoint TP The time point to set end to. Throws $(REF DateTimeException,std,datetime,date) if the resulting interval would be invalid."
  },
  "phobos/std/datetime/interval/Interval/Functions/fwdRange.html": {
    "href": "phobos/std/datetime/interval/Interval/Functions/fwdRange.html",
    "title": "Overloads for - fwdRange | Marmos Demo",
    "keywords": "Overloads for - fwdRange Module std.datetime.interval Parent Interval fwdRange(func, popFirst) IntervalRange!(TPDirection.fwd) fwdRange( <bug: unknown> func, PopFirst popFirst ) Returns a range which iterates forward over the interval, starting at begin , using $(D_PARAM func) to generate each successive time point. The range's front is the interval's begin . $(D_PARAM func) is used to generate the next front when popFront is called. If $(D_PARAM popFirst) is PopFirst.yes , then popFront is called before the range is returned (so that front is a time point which $(D_PARAM func) would generate). If $(D_PARAM func) ever generates a time point less than or equal to the current front of the range, then a $(REF DateTimeException,std,datetime,date) will be thrown. The range will be empty and iteration complete when $(D_PARAM func) generates a time point equal to or beyond the end of the interval. There are helper functions in this module which generate common delegates to pass to fwdRange . Their documentation starts with \"Range-generating function,\" making them easily searchable. Params func <bug: unknown> The function used to generate the time points of the range over the interval. popFirst PopFirst Whether popFront should be called on the range before returning it. Throws $(REF DateTimeException,std,datetime,date) if this interval is empty. Warning $(D_PARAM func) must be logically pure. Ideally, $(D_PARAM func) would be a function pointer to a pure function, but forcing $(D_PARAM func) to be pure is far too restrictive to be useful, and in order to have the ease of use of having functions which generate functions to pass to fwdRange , $(D_PARAM func) must be a delegate. If $(D_PARAM func) retains state which changes as it is called, then some algorithms will not work correctly, because the range's save will have failed to have really saved the range's state. To avoid such bugs, don't pass a delegate which is not logically pure to fwdRange . If $(D_PARAM func) is given the same time point with two different calls, it must return the same result both times. Of course, none of the functions in this module have this problem, so it's only relevant if when creating a custom delegate. Example -------------------- auto interval = Interval!Date(Date(2010, 9, 1), Date(2010, 9, 9)); auto func = delegate (scope const Date date) // For iterating over even-numbered days. { if ((date.day & 1) == 0) return date + dur!\"days\"(2); return date + dur!\"days\"(1); }; auto range = interval.fwdRange(func); // An odd day. Using PopFirst.yes would have made this Date(2010, 9, 2). assert(range.front == Date(2010, 9, 1)); range.popFront(); assert(range.front == Date(2010, 9, 2)); range.popFront(); assert(range.front == Date(2010, 9, 4)); range.popFront(); assert(range.front == Date(2010, 9, 6)); range.popFront(); assert(range.front == Date(2010, 9, 8)); range.popFront(); assert(range.empty); --------------------"
  },
  "phobos/std/datetime/interval/Interval/Functions/intersection.html": {
    "href": "phobos/std/datetime/interval/Interval/Functions/intersection.html",
    "title": "Overloads for - intersection | Marmos Demo",
    "keywords": "Overloads for - intersection Module std.datetime.interval Parent Interval intersection(interval) Interval intersection( Interval interval ) Returns the intersection of two intervals Params interval Interval The interval to intersect with this interval. Throws $(REF DateTimeException,std,datetime,date) if the two intervals do not intersect or if either interval is empty. Example -------------------- assert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).intersection( Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2))) == Interval!Date(Date(1996, 1 , 2), Date(2000, 8, 2))); assert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).intersection( Interval!Date(Date(1999, 1, 12), Date(2011, 9, 17))) == Interval!Date(Date(1999, 1 , 12), Date(2011, 9, 17))); -------------------- intersection(interval) Interval intersection( PosInfInterval!(TP) interval ) Returns the intersection of two intervals Params interval PosInfInterval!(TP) The interval to intersect with this interval. Throws $(REF DateTimeException,std,datetime,date) if the two intervals do not intersect or if this interval is empty. Example -------------------- assert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).intersection( PosInfInterval!Date(Date(1990, 7, 6))) == Interval!Date(Date(1996, 1 , 2), Date(2012, 3, 1))); assert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).intersection( PosInfInterval!Date(Date(1999, 1, 12))) == Interval!Date(Date(1999, 1 , 12), Date(2012, 3, 1))); -------------------- intersection(interval) Interval intersection( NegInfInterval!(TP) interval ) Returns the intersection of two intervals Params interval NegInfInterval!(TP) The interval to intersect with this interval. Throws $(REF DateTimeException,std,datetime,date) if the two intervals do not intersect or if this interval is empty. Example -------------------- assert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).intersection( NegInfInterval!Date(Date(1999, 7, 6))) == Interval!Date(Date(1996, 1 , 2), Date(1999, 7, 6))); assert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).intersection( NegInfInterval!Date(Date(2013, 1, 12))) == Interval!Date(Date(1996, 1 , 2), Date(2012, 3, 1))); --------------------"
  },
  "phobos/std/datetime/interval/Interval/Functions/intersects.html": {
    "href": "phobos/std/datetime/interval/Interval/Functions/intersects.html",
    "title": "Overloads for - intersects | Marmos Demo",
    "keywords": "Overloads for - intersects Module std.datetime.interval Parent Interval intersects(interval) bool intersects( Interval interval ) Whether the given interval overlaps this interval. Params interval Interval The interval to check for intersection with this interval. Throws $(REF DateTimeException,std,datetime,date) if either interval is empty. Example -------------------- assert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).intersects( Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2)))); assert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).intersects( Interval!Date(Date(1999, 1, 12), Date(2011, 9, 17)))); assert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).intersects( Interval!Date(Date(1989, 3, 1), Date(1996, 1, 2)))); -------------------- intersects(interval) bool intersects( PosInfInterval!(TP) interval ) Whether the given interval overlaps this interval. Params interval PosInfInterval!(TP) The interval to check for intersection with this interval. Throws $(REF DateTimeException,std,datetime,date) if this interval is empty. Example -------------------- assert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).intersects( PosInfInterval!Date(Date(1999, 5, 4)))); assert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).intersects( PosInfInterval!Date(Date(2012, 3, 1)))); -------------------- intersects(interval) bool intersects( NegInfInterval!(TP) interval ) Whether the given interval overlaps this interval. Params interval NegInfInterval!(TP) The interval to check for intersection with this interval. Throws $(REF DateTimeException,std,datetime,date) if this interval is empty. Example -------------------- assert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).intersects( NegInfInterval!Date(Date(1996, 1, 2)))); assert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).intersects( NegInfInterval!Date(Date(2000, 1, 2)))); --------------------"
  },
  "phobos/std/datetime/interval/Interval/Functions/isAdjacent.html": {
    "href": "phobos/std/datetime/interval/Interval/Functions/isAdjacent.html",
    "title": "Overloads for - isAdjacent | Marmos Demo",
    "keywords": "Overloads for - isAdjacent Module std.datetime.interval Parent Interval isAdjacent(interval) bool isAdjacent( Interval interval ) Whether the given interval is adjacent to this interval. Params interval Interval The interval to check whether its adjecent to this interval. Throws $(REF DateTimeException,std,datetime,date) if either interval is empty. Example -------------------- assert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isAdjacent( Interval!Date(Date(1990, 7, 6), Date(1996, 1, 2)))); assert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isAdjacent( Interval!Date(Date(2012, 3, 1), Date(2013, 9, 17)))); assert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isAdjacent( Interval!Date(Date(1989, 3, 1), Date(2012, 3, 1)))); -------------------- isAdjacent(interval) bool isAdjacent( PosInfInterval!(TP) interval ) Whether the given interval is adjacent to this interval. Params interval PosInfInterval!(TP) The interval to check whether its adjecent to this interval. Throws $(REF DateTimeException,std,datetime,date) if this interval is empty. Example -------------------- assert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isAdjacent( PosInfInterval!Date(Date(1999, 5, 4)))); assert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isAdjacent( PosInfInterval!Date(Date(2012, 3, 1)))); -------------------- isAdjacent(interval) bool isAdjacent( NegInfInterval!(TP) interval ) Whether the given interval is adjacent to this interval. Params interval NegInfInterval!(TP) The interval to check whether its adjecent to this interval. Throws $(REF DateTimeException,std,datetime,date) if this interval is empty. Example -------------------- assert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isAdjacent( NegInfInterval!Date(Date(1996, 1, 2)))); assert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isAdjacent( NegInfInterval!Date(Date(2000, 1, 2)))); --------------------"
  },
  "phobos/std/datetime/interval/Interval/Functions/isAfter.html": {
    "href": "phobos/std/datetime/interval/Interval/Functions/isAfter.html",
    "title": "Overloads for - isAfter | Marmos Demo",
    "keywords": "Overloads for - isAfter Module std.datetime.interval Parent Interval isAfter(timePoint) bool isAfter( TP timePoint ) Whether this interval is after the given time point. Params timePoint TP The time point to check whether this interval is after it. Throws $(REF DateTimeException,std,datetime,date) if this interval is empty. Example -------------------- assert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isAfter( Date(1994, 12, 24))); assert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isAfter( Date(2000, 1, 5))); assert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isAfter( Date(2012, 3, 1))); -------------------- isAfter(interval) bool isAfter( Interval interval ) Whether this interval is after the given interval and does not intersect it. Params interval Interval The interval to check against this interval. Throws $(REF DateTimeException,std,datetime,date) if either interval is empty. Example -------------------- assert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isAfter( Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2)))); assert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isAfter( Interval!Date(Date(1999, 1, 12), Date(2011, 9, 17)))); assert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isAfter( Interval!Date(Date(1989, 3, 1), Date(1996, 1, 2)))); -------------------- isAfter(interval) bool isAfter( PosInfInterval!(TP) interval ) Whether this interval is after the given interval and does not intersect it. Always returns false (unless this interval is empty) because a finite interval can never be after an interval going to positive infinity. Params interval PosInfInterval!(TP) The interval to check against this interval. Throws $(REF DateTimeException,std,datetime,date) if this interval is empty. Example -------------------- assert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isAfter( PosInfInterval!Date(Date(1999, 5, 4)))); -------------------- isAfter(interval) bool isAfter( NegInfInterval!(TP) interval ) Whether this interval is after the given interval and does not intersect it. Params interval NegInfInterval!(TP) The interval to check against this interval. Throws $(REF DateTimeException,std,datetime,date) if this interval is empty. Example -------------------- assert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isAfter( NegInfInterval!Date(Date(1996, 1, 2)))); --------------------"
  },
  "phobos/std/datetime/interval/Interval/Functions/isBefore.html": {
    "href": "phobos/std/datetime/interval/Interval/Functions/isBefore.html",
    "title": "Overloads for - isBefore | Marmos Demo",
    "keywords": "Overloads for - isBefore Module std.datetime.interval Parent Interval isBefore(timePoint) bool isBefore( TP timePoint ) Whether this interval is before the given time point. Params timePoint TP The time point to check whether this interval is before it. Throws $(REF DateTimeException,std,datetime,date) if this interval is empty. Example -------------------- assert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isBefore( Date(1994, 12, 24))); assert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isBefore( Date(2000, 1, 5))); assert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isBefore( Date(2012, 3, 1))); -------------------- isBefore(interval) bool isBefore( Interval interval ) Whether this interval is before the given interval and does not intersect with it. Params interval Interval The interval to check for against this interval. Throws $(REF DateTimeException,std,datetime,date) if either interval is empty. Example -------------------- assert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isBefore( Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2)))); assert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isBefore( Interval!Date(Date(1999, 1, 12), Date(2011, 9, 17)))); assert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isBefore( Interval!Date(Date(2012, 3, 1), Date(2013, 5, 1)))); -------------------- isBefore(interval) bool isBefore( PosInfInterval!(TP) interval ) Whether this interval is before the given interval and does not intersect with it. Params interval PosInfInterval!(TP) The interval to check for against this interval. Throws $(REF DateTimeException,std,datetime,date) if this interval is empty. Example -------------------- assert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isBefore( PosInfInterval!Date(Date(1999, 5, 4)))); assert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isBefore( PosInfInterval!Date(Date(2013, 3, 7)))); -------------------- isBefore(interval) bool isBefore( NegInfInterval!(TP) interval ) Whether this interval is before the given interval and does not intersect with it. Always returns false (unless this interval is empty) because a finite interval can never be before an interval beginning at negative infinity. Params interval NegInfInterval!(TP) The interval to check for against this interval. Throws $(REF DateTimeException,std,datetime,date) if this interval is empty. Example -------------------- assert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isBefore( NegInfInterval!Date(Date(1996, 5, 4)))); --------------------"
  },
  "phobos/std/datetime/interval/Interval/Functions/length.html": {
    "href": "phobos/std/datetime/interval/Interval/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.datetime.interval Parent Interval length() <bug: unknown> length( ) auto Returns the duration between begin and end . Example -------------------- assert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).length == dur!\"days\"(5903)); --------------------"
  },
  "phobos/std/datetime/interval/Interval/Functions/merge.html": {
    "href": "phobos/std/datetime/interval/Interval/Functions/merge.html",
    "title": "Overloads for - merge | Marmos Demo",
    "keywords": "Overloads for - merge Module std.datetime.interval Parent Interval merge(interval) Interval merge( Interval interval ) Returns the union of two intervals Params interval Interval The interval to merge with this interval. Throws $(REF DateTimeException,std,datetime,date) if the two intervals do not intersect and are not adjacent or if either interval is empty. Example -------------------- assert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).merge( Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2))) == Interval!Date(Date(1990, 7 , 6), Date(2012, 3, 1))); assert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).merge( Interval!Date(Date(2012, 3, 1), Date(2013, 5, 7))) == Interval!Date(Date(1996, 1 , 2), Date(2013, 5, 7))); -------------------- merge(interval) PosInfInterval!(TP) merge( PosInfInterval!(TP) interval ) Returns the union of two intervals Params interval PosInfInterval!(TP) The interval to merge with this interval. Throws $(REF DateTimeException,std,datetime,date) if the two intervals do not intersect and are not adjacent or if this interval is empty. Example -------------------- assert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).merge( PosInfInterval!Date(Date(1990, 7, 6))) == PosInfInterval!Date(Date(1990, 7 , 6))); assert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).merge( PosInfInterval!Date(Date(2012, 3, 1))) == PosInfInterval!Date(Date(1996, 1 , 2))); -------------------- merge(interval) NegInfInterval!(TP) merge( NegInfInterval!(TP) interval ) Returns the union of two intervals Params interval NegInfInterval!(TP) The interval to merge with this interval. Throws $(REF DateTimeException,std,datetime,date) if the two intervals do not intersect and are not adjacent or if this interval is empty. Example -------------------- assert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).merge( NegInfInterval!Date(Date(1996, 1, 2))) == NegInfInterval!Date(Date(2012, 3 , 1))); assert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).merge( NegInfInterval!Date(Date(2013, 1, 12))) == NegInfInterval!Date(Date(2013, 1 , 12))); --------------------"
  },
  "phobos/std/datetime/interval/Interval/Functions/opAssign.html": {
    "href": "phobos/std/datetime/interval/Interval/Functions/opAssign.html",
    "title": "Overloads for - opAssign | Marmos Demo",
    "keywords": "Overloads for - opAssign Module std.datetime.interval Parent Interval opAssign(rhs) Interval opAssign( Interval rhs ) Params rhs Interval The $(LREF Interval) to assign to this one. opAssign(rhs) Interval opAssign( Interval rhs ) Params rhs Interval The $(LREF Interval) to assign to this one."
  },
  "phobos/std/datetime/interval/Interval/Functions/span.html": {
    "href": "phobos/std/datetime/interval/Interval/Functions/span.html",
    "title": "Overloads for - span | Marmos Demo",
    "keywords": "Overloads for - span Module std.datetime.interval Parent Interval span(interval) Interval span( Interval interval ) Returns an interval that covers from the earliest time point of two intervals up to (but not including) the latest time point of two intervals. Params interval Interval The interval to create a span together with this interval. Throws $(REF DateTimeException,std,datetime,date) if either interval is empty. Example -------------------- assert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).span( Interval!Date(Date(1990, 7, 6), Date(1991, 1, 8))) == Interval!Date(Date(1990, 7 , 6), Date(2012, 3, 1))); assert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).span( Interval!Date(Date(2012, 3, 1), Date(2013, 5, 7))) == Interval!Date(Date(1996, 1 , 2), Date(2013, 5, 7))); -------------------- span(interval) PosInfInterval!(TP) span( PosInfInterval!(TP) interval ) Returns an interval that covers from the earliest time point of two intervals up to (but not including) the latest time point of two intervals. Params interval PosInfInterval!(TP) The interval to create a span together with this interval. Throws $(REF DateTimeException,std,datetime,date) if this interval is empty. Example -------------------- assert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).span( PosInfInterval!Date(Date(1990, 7, 6))) == PosInfInterval!Date(Date(1990, 7 , 6))); assert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).span( PosInfInterval!Date(Date(2050, 1, 1))) == PosInfInterval!Date(Date(1996, 1 , 2))); -------------------- span(interval) NegInfInterval!(TP) span( NegInfInterval!(TP) interval ) Returns an interval that covers from the earliest time point of two intervals up to (but not including) the latest time point of two intervals. Params interval NegInfInterval!(TP) The interval to create a span together with this interval. Throws $(REF DateTimeException,std,datetime,date) if this interval is empty. Example -------------------- assert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).span( NegInfInterval!Date(Date(1602, 5, 21))) == NegInfInterval!Date(Date(2012, 3 , 1))); assert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).span( NegInfInterval!Date(Date(2013, 1, 12))) == NegInfInterval!Date(Date(2013, 1 , 12))); --------------------"
  },
  "phobos/std/datetime/interval/Interval/Functions/toString.html": {
    "href": "phobos/std/datetime/interval/Interval/Functions/toString.html",
    "title": "Overloads for - toString | Marmos Demo",
    "keywords": "Overloads for - toString Module std.datetime.interval Parent Interval toString() string toString( ) Converts this interval to a string. Params: w = A char accepting $(REF_ALTTEXT output range, isOutputRange, std, range, primitives) Returns: A string when not using an output range; void otherwise."
  },
  "phobos/std/datetime/interval/IntervalRange/Functions/direction.html": {
    "href": "phobos/std/datetime/interval/IntervalRange/Functions/direction.html",
    "title": "Overloads for - direction | Marmos Demo",
    "keywords": "Overloads for - direction Module std.datetime.interval Parent IntervalRange direction() Direction direction( ) The Direction that this range iterates in."
  },
  "phobos/std/datetime/interval/IntervalRange/Functions/empty.html": {
    "href": "phobos/std/datetime/interval/IntervalRange/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.datetime.interval Parent IntervalRange empty() bool empty( ) Whether this IntervalRange is empty."
  },
  "phobos/std/datetime/interval/IntervalRange/Functions/front.html": {
    "href": "phobos/std/datetime/interval/IntervalRange/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.datetime.interval Parent IntervalRange front() TP front( ) The first time point in the range. Throws $(REF DateTimeException,std,datetime,date) if the range is empty."
  },
  "phobos/std/datetime/interval/IntervalRange/Functions/func.html": {
    "href": "phobos/std/datetime/interval/IntervalRange/Functions/func.html",
    "title": "Overloads for - func | Marmos Demo",
    "keywords": "Overloads for - func Module std.datetime.interval Parent IntervalRange func() <bug: unknown> func( ) The function used to generate the next time point in the range."
  },
  "phobos/std/datetime/interval/IntervalRange/Functions/interval.html": {
    "href": "phobos/std/datetime/interval/IntervalRange/Functions/interval.html",
    "title": "Overloads for - interval | Marmos Demo",
    "keywords": "Overloads for - interval Module std.datetime.interval Parent IntervalRange interval() Interval!(TP) interval( ) The interval that this IntervalRange currently covers."
  },
  "phobos/std/datetime/interval/IntervalRange/Functions/opAssign.html": {
    "href": "phobos/std/datetime/interval/IntervalRange/Functions/opAssign.html",
    "title": "Overloads for - opAssign | Marmos Demo",
    "keywords": "Overloads for - opAssign Module std.datetime.interval Parent IntervalRange opAssign(rhs) IntervalRange opAssign( IntervalRange rhs ) Params rhs IntervalRange The IntervalRange to assign to this one. opAssign(rhs) IntervalRange opAssign( IntervalRange rhs ) Ditto"
  },
  "phobos/std/datetime/interval/IntervalRange/Functions/popFront.html": {
    "href": "phobos/std/datetime/interval/IntervalRange/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.datetime.interval Parent IntervalRange popFront() void popFront( ) Pops front from the range, using func to generate the next time point in the range. If the generated time point is beyond the edge of the range, then front is set to that edge, and the range is then empty. So, if iterating forwards, and the generated time point is greater than the interval's end , then front is set to end . If iterating backwards, and the generated time point is less than the interval's begin , then front is set to begin . Throws $(REF DateTimeException,std,datetime,date) if the range is empty or if the generated time point is in the wrong direction (i.e. if iterating forward and the generated time point is before front , or if iterating backwards and the generated time point is after front )."
  },
  "phobos/std/datetime/interval/IntervalRange/Functions/save.html": {
    "href": "phobos/std/datetime/interval/IntervalRange/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.datetime.interval Parent IntervalRange save() IntervalRange save( ) Returns a copy of this ."
  },
  "phobos/std/datetime/interval/NegInfInterval/Functions/bwdRange.html": {
    "href": "phobos/std/datetime/interval/NegInfInterval/Functions/bwdRange.html",
    "title": "Overloads for - bwdRange | Marmos Demo",
    "keywords": "Overloads for - bwdRange Module std.datetime.interval Parent NegInfInterval bwdRange(func, popFirst) NegInfIntervalRange!(TP) bwdRange( <bug: unknown> func, PopFirst popFirst ) Returns a range which iterates backwards over the interval, starting at end , using $(D_PARAM func) to generate each successive time point. The range's front is the interval's end . $(D_PARAM func) is used to generate the next front when popFront is called. If $(D_PARAM popFirst) is PopFirst.yes , then popFront is called before the range is returned (so that front is a time point which $(D_PARAM func) would generate). If $(D_PARAM func) ever generates a time point greater than or equal to the current front of the range, then a $(REF DateTimeException,std,datetime,date) will be thrown. There are helper functions in this module which generate common delegates to pass to bwdRange . Their documentation starts with \"Range-generating function,\" to make them easily searchable. Params func <bug: unknown> The function used to generate the time points of the range over the interval. popFirst PopFirst Whether popFront should be called on the range before returning it. Throws $(REF DateTimeException,std,datetime,date) if this interval is empty. Warning $(D_PARAM func) must be logically pure. Ideally, $(D_PARAM func) would be a function pointer to a pure function, but forcing $(D_PARAM func) to be pure is far too restrictive to be useful, and in order to have the ease of use of having functions which generate functions to pass to fwdRange , $(D_PARAM func) must be a delegate. If $(D_PARAM func) retains state which changes as it is called, then some algorithms will not work correctly, because the range's save will have failed to have really saved the range's state. To avoid such bugs, don't pass a delegate which is not logically pure to fwdRange . If $(D_PARAM func) is given the same time point with two different calls, it must return the same result both times. Of course, none of the functions in this module have this problem, so it's only relevant for custom delegates. Example -------------------- auto interval = NegInfInterval!Date(Date(2010, 9, 9)); auto func = delegate (scope const Date date) //For iterating over even-numbered days. { if ((date.day & 1) == 0) return date - dur!\"days\"(2); return date - dur!\"days\"(1); }; auto range = interval.bwdRange(func); assert(range.front == Date(2010, 9, 9)); //An odd day. Using PopFirst.yes would have made this Date(2010, 9, 8). range.popFront(); assert(range.front == Date(2010, 9, 8)); range.popFront(); assert(range.front == Date(2010, 9, 6)); range.popFront(); assert(range.front == Date(2010, 9, 4)); range.popFront(); assert(range.front == Date(2010, 9, 2)); range.popFront(); assert(!range.empty); --------------------"
  },
  "phobos/std/datetime/interval/NegInfInterval/Functions/contains.html": {
    "href": "phobos/std/datetime/interval/NegInfInterval/Functions/contains.html",
    "title": "Overloads for - contains | Marmos Demo",
    "keywords": "Overloads for - contains Module std.datetime.interval Parent NegInfInterval contains(timePoint) bool contains( TP timePoint ) Whether the given time point is within this interval. Params timePoint TP The time point to check for inclusion in this interval. Example -------------------- assert(NegInfInterval!Date(Date(2012, 3, 1)).contains(Date(1994, 12, 24))); assert(NegInfInterval!Date(Date(2012, 3, 1)).contains(Date(2000, 1, 5))); assert(!NegInfInterval!Date(Date(2012, 3, 1)).contains(Date(2012, 3, 1))); -------------------- contains(interval) bool contains( Interval!(TP) interval ) Whether the given interval is completely within this interval. Params interval Interval!(TP) The interval to check for inclusion in this interval. Throws $(REF DateTimeException,std,datetime,date) if the given interval is empty. Example -------------------- assert(NegInfInterval!Date(Date(2012, 3, 1)).contains( Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2)))); assert(NegInfInterval!Date(Date(2012, 3, 1)).contains( Interval!Date(Date(1999, 1, 12), Date(2011, 9, 17)))); assert(!NegInfInterval!Date(Date(2012, 3, 1)).contains( Interval!Date(Date(1998, 2, 28), Date(2013, 5, 1)))); -------------------- contains(interval) bool contains( PosInfInterval!(TP) interval ) Whether the given interval is completely within this interval. Always returns false because an interval beginning at negative infinity can never contain an interval going to positive infinity. Params interval PosInfInterval!(TP) The interval to check for inclusion in this interval. Example -------------------- assert(!NegInfInterval!Date(Date(2012, 3, 1)).contains( PosInfInterval!Date(Date(1999, 5, 4)))); -------------------- contains(interval) bool contains( NegInfInterval interval ) Whether the given interval is completely within this interval. Params interval NegInfInterval The interval to check for inclusion in this interval. Example -------------------- assert(NegInfInterval!Date(Date(2012, 3, 1)).contains( NegInfInterval!Date(Date(1996, 5, 4)))); assert(!NegInfInterval!Date(Date(2012, 3, 1)).contains( NegInfInterval!Date(Date(2013, 7, 9)))); --------------------"
  },
  "phobos/std/datetime/interval/NegInfInterval/Functions/end.html": {
    "href": "phobos/std/datetime/interval/NegInfInterval/Functions/end.html",
    "title": "Overloads for - end | Marmos Demo",
    "keywords": "Overloads for - end Module std.datetime.interval Parent NegInfInterval end() TP end( ) The end point of the interval. It is excluded from the interval. Example -------------------- assert(NegInfInterval!Date(Date(2012, 3, 1)).end == Date(2012, 3, 1)); -------------------- end(timePoint) void end( TP timePoint ) The end point of the interval. It is excluded from the interval. Params timePoint TP The time point to set end to."
  },
  "phobos/std/datetime/interval/NegInfInterval/Functions/intersection.html": {
    "href": "phobos/std/datetime/interval/NegInfInterval/Functions/intersection.html",
    "title": "Overloads for - intersection | Marmos Demo",
    "keywords": "Overloads for - intersection Module std.datetime.interval Parent NegInfInterval intersection(interval) Interval!(TP) intersection( Interval!(TP) interval ) Returns the intersection of two intervals Params interval Interval!(TP) The interval to intersect with this interval. Throws $(REF DateTimeException,std,datetime,date) if the two intervals do not intersect or if the given interval is empty. Example -------------------- assert(NegInfInterval!Date(Date(2012, 3, 1)).intersection( Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2))) == Interval!Date(Date(1990, 7 , 6), Date(2000, 8, 2))); assert(NegInfInterval!Date(Date(2012, 3, 1)).intersection( Interval!Date(Date(1999, 1, 12), Date(2015, 9, 2))) == Interval!Date(Date(1999, 1 , 12), Date(2012, 3, 1))); -------------------- intersection(interval) Interval!(TP) intersection( PosInfInterval!(TP) interval ) Returns the intersection of two intervals Params interval PosInfInterval!(TP) The interval to intersect with this interval. Throws $(REF DateTimeException,std,datetime,date) if the two intervals do not intersect. Example -------------------- assert(NegInfInterval!Date(Date(2012, 3, 1)).intersection( PosInfInterval!Date(Date(1990, 7, 6))) == Interval!Date(Date(1990, 7 , 6), Date(2012, 3, 1))); assert(NegInfInterval!Date(Date(2012, 3, 1)).intersection( PosInfInterval!Date(Date(1999, 1, 12))) == Interval!Date(Date(1999, 1 , 12), Date(2012, 3, 1))); -------------------- intersection(interval) NegInfInterval intersection( NegInfInterval interval ) Returns the intersection of two intervals Params interval NegInfInterval The interval to intersect with this interval. Example -------------------- assert(NegInfInterval!Date(Date(2012, 3, 1)).intersection( NegInfInterval!Date(Date(1999, 7, 6))) == NegInfInterval!Date(Date(1999, 7 , 6))); assert(NegInfInterval!Date(Date(2012, 3, 1)).intersection( NegInfInterval!Date(Date(2013, 1, 12))) == NegInfInterval!Date(Date(2012, 3 , 1))); --------------------"
  },
  "phobos/std/datetime/interval/NegInfInterval/Functions/intersects.html": {
    "href": "phobos/std/datetime/interval/NegInfInterval/Functions/intersects.html",
    "title": "Overloads for - intersects | Marmos Demo",
    "keywords": "Overloads for - intersects Module std.datetime.interval Parent NegInfInterval intersects(interval) bool intersects( Interval!(TP) interval ) Whether the given interval overlaps this interval. Params interval Interval!(TP) The interval to check for intersection with this interval. Throws $(REF DateTimeException,std,datetime,date) if the given interval is empty. Example -------------------- assert(NegInfInterval!Date(Date(2012, 3, 1)).intersects( Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2)))); assert(NegInfInterval!Date(Date(2012, 3, 1)).intersects( Interval!Date(Date(1999, 1, 12), Date(2011, 9, 17)))); assert(!NegInfInterval!Date(Date(2012, 3, 1)).intersects( Interval!Date(Date(2022, 10, 19), Date(2027, 6, 3)))); -------------------- intersects(interval) bool intersects( PosInfInterval!(TP) interval ) Whether the given interval overlaps this interval. Params interval PosInfInterval!(TP) The interval to check for intersection with this interval. Example -------------------- assert(NegInfInterval!Date(Date(2012, 3, 1)).intersects( PosInfInterval!Date(Date(1999, 5, 4)))); assert(!NegInfInterval!Date(Date(2012, 3, 1)).intersects( PosInfInterval!Date(Date(2012, 3, 1)))); -------------------- intersects(interval) bool intersects( NegInfInterval!(TP) interval ) Whether the given interval overlaps this interval. Always returns true because two intervals beginning at negative infinity always overlap. Params interval NegInfInterval!(TP) The interval to check for intersection with this interval. Example -------------------- assert(NegInfInterval!Date(Date(2012, 3, 1)).intersects( NegInfInterval!Date(Date(1996, 5, 4)))); assert(NegInfInterval!Date(Date(2012, 3, 1)).intersects( NegInfInterval!Date(Date(2013, 7, 9)))); --------------------"
  },
  "phobos/std/datetime/interval/NegInfInterval/Functions/isAdjacent.html": {
    "href": "phobos/std/datetime/interval/NegInfInterval/Functions/isAdjacent.html",
    "title": "Overloads for - isAdjacent | Marmos Demo",
    "keywords": "Overloads for - isAdjacent Module std.datetime.interval Parent NegInfInterval isAdjacent(interval) bool isAdjacent( Interval!(TP) interval ) Whether the given interval is adjacent to this interval. Params interval Interval!(TP) The interval to check whether its adjecent to this interval. Throws $(REF DateTimeException,std,datetime,date) if the given interval is empty. Example -------------------- assert(!NegInfInterval!Date(Date(2012, 3, 1)).isAdjacent( Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2)))); assert(!NegInfInterval!Date(Date(2012, 3, 1)).isAdjacent( Interval!Date(Date(1999, 1, 12), Date(2012, 3, 1)))); assert(NegInfInterval!Date(Date(2012, 3, 1)).isAdjacent( Interval!Date(Date(2012, 3, 1), Date(2019, 2, 2)))); assert(!NegInfInterval!Date(Date(2012, 3, 1)).isAdjacent( Interval!Date(Date(2022, 10, 19), Date(2027, 6, 3)))); -------------------- isAdjacent(interval) bool isAdjacent( PosInfInterval!(TP) interval ) Whether the given interval is adjacent to this interval. Params interval PosInfInterval!(TP) The interval to check whether its adjecent to this interval. Example -------------------- assert(!NegInfInterval!Date(Date(2012, 3, 1)).isAdjacent( PosInfInterval!Date(Date(1999, 5, 4)))); assert(NegInfInterval!Date(Date(2012, 3, 1)).isAdjacent( PosInfInterval!Date(Date(2012, 3, 1)))); -------------------- isAdjacent(interval) bool isAdjacent( NegInfInterval interval ) Whether the given interval is adjacent to this interval. Always returns false because two intervals beginning at negative infinity can never be adjacent to one another. Params interval NegInfInterval The interval to check whether its adjecent to this interval. Example -------------------- assert(!NegInfInterval!Date(Date(2012, 3, 1)).isAdjacent( NegInfInterval!Date(Date(1996, 5, 4)))); assert(!NegInfInterval!Date(Date(2012, 3, 1)).isAdjacent( NegInfInterval!Date(Date(2012, 3, 1)))); --------------------"
  },
  "phobos/std/datetime/interval/NegInfInterval/Functions/isAfter.html": {
    "href": "phobos/std/datetime/interval/NegInfInterval/Functions/isAfter.html",
    "title": "Overloads for - isAfter | Marmos Demo",
    "keywords": "Overloads for - isAfter Module std.datetime.interval Parent NegInfInterval isAfter(timePoint) bool isAfter( TP timePoint ) Whether this interval is after the given time point. Always returns false because an interval beginning at negative infinity can never be after any time point. Params timePoint TP The time point to check whether this interval is after it. Example -------------------- assert(!NegInfInterval!Date(Date(2012, 3, 1)).isAfter(Date(1994, 12, 24))); assert(!NegInfInterval!Date(Date(2012, 3, 1)).isAfter(Date(2000, 1, 5))); assert(!NegInfInterval!Date(Date(2012, 3, 1)).isAfter(Date(2012, 3, 1))); -------------------- isAfter(interval) bool isAfter( Interval!(TP) interval ) Whether this interval is after the given interval and does not intersect it. Always returns false (unless the given interval is empty) because an interval beginning at negative infinity can never be after any other interval. Params interval Interval!(TP) The interval to check against this interval. Throws $(REF DateTimeException,std,datetime,date) if the given interval is empty. Example -------------------- assert(!NegInfInterval!Date(Date(2012, 3, 1)).isAfter( Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2)))); assert(!NegInfInterval!Date(Date(2012, 3, 1)).isAfter( Interval!Date(Date(1999, 1, 12), Date(2011, 9, 17)))); assert(!NegInfInterval!Date(Date(2012, 3, 1)).isAfter( Interval!Date(Date(2022, 10, 19), Date(2027, 6, 3)))); -------------------- isAfter(interval) bool isAfter( PosInfInterval!(TP) interval ) Whether this interval is after the given interval and does not intersect it. Always returns false because an interval beginning at negative infinity can never be after any other interval. Params interval PosInfInterval!(TP) The interval to check against this interval. Example -------------------- assert(!NegInfInterval!Date(Date(2012, 3, 1)).isAfter( PosInfInterval!Date(Date(1999, 5, 4)))); assert(!NegInfInterval!Date(Date(2012, 3, 1)).isAfter( PosInfInterval!Date(Date(2012, 3, 1)))); -------------------- isAfter(interval) bool isAfter( NegInfInterval interval ) Whether this interval is after the given interval and does not intersect it. Always returns false because an interval beginning at negative infinity can never be after any other interval. Params interval NegInfInterval The interval to check against this interval. Example -------------------- assert(!NegInfInterval!Date(Date(2012, 3, 1)).isAfter( NegInfInterval!Date(Date(1996, 5, 4)))); assert(!NegInfInterval!Date(Date(2012, 3, 1)).isAfter( NegInfInterval!Date(Date(2013, 7, 9)))); --------------------"
  },
  "phobos/std/datetime/interval/NegInfInterval/Functions/isBefore.html": {
    "href": "phobos/std/datetime/interval/NegInfInterval/Functions/isBefore.html",
    "title": "Overloads for - isBefore | Marmos Demo",
    "keywords": "Overloads for - isBefore Module std.datetime.interval Parent NegInfInterval isBefore(timePoint) bool isBefore( TP timePoint ) Whether this interval is before the given time point. Params timePoint TP The time point to check whether this interval is before it. Example -------------------- assert(!NegInfInterval!Date(Date(2012, 3, 1)).isBefore(Date(1994, 12, 24))); assert(!NegInfInterval!Date(Date(2012, 3, 1)).isBefore(Date(2000, 1, 5))); assert(NegInfInterval!Date(Date(2012, 3, 1)).isBefore(Date(2012, 3, 1))); -------------------- isBefore(interval) bool isBefore( Interval!(TP) interval ) Whether this interval is before the given interval and does not intersect it. Params interval Interval!(TP) The interval to check for against this interval. Throws $(REF DateTimeException,std,datetime,date) if the given interval is empty Example -------------------- assert(!NegInfInterval!Date(Date(2012, 3, 1)).isBefore( Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2)))); assert(!NegInfInterval!Date(Date(2012, 3, 1)).isBefore( Interval!Date(Date(1999, 1, 12), Date(2011, 9, 17)))); assert(NegInfInterval!Date(Date(2012, 3, 1)).isBefore( Interval!Date(Date(2022, 10, 19), Date(2027, 6, 3)))); -------------------- isBefore(interval) bool isBefore( PosInfInterval!(TP) interval ) Whether this interval is before the given interval and does not intersect it. Params interval PosInfInterval!(TP) The interval to check for against this interval. Example -------------------- assert(!NegInfInterval!Date(Date(2012, 3, 1)).isBefore( PosInfInterval!Date(Date(1999, 5, 4)))); assert(NegInfInterval!Date(Date(2012, 3, 1)).isBefore( PosInfInterval!Date(Date(2012, 3, 1)))); -------------------- isBefore(interval) bool isBefore( NegInfInterval interval ) Whether this interval is before the given interval and does not intersect it. Always returns false because an interval beginning at negative infinity can never be before another interval beginning at negative infinity. Params interval NegInfInterval The interval to check for against this interval. Example -------------------- assert(!NegInfInterval!Date(Date(2012, 3, 1)).isBefore( NegInfInterval!Date(Date(1996, 5, 4)))); assert(!NegInfInterval!Date(Date(2012, 3, 1)).isBefore( NegInfInterval!Date(Date(2013, 7, 9)))); --------------------"
  },
  "phobos/std/datetime/interval/NegInfInterval/Functions/merge.html": {
    "href": "phobos/std/datetime/interval/NegInfInterval/Functions/merge.html",
    "title": "Overloads for - merge | Marmos Demo",
    "keywords": "Overloads for - merge Module std.datetime.interval Parent NegInfInterval merge(interval) NegInfInterval merge( Interval!(TP) interval ) Returns the union of two intervals Params interval Interval!(TP) The interval to merge with this interval. Throws $(REF DateTimeException,std,datetime,date) if the two intervals do not intersect and are not adjacent or if the given interval is empty. Note There is no overload for merge which takes a PosInfInterval , because an interval going from negative infinity to positive infinity is not possible. Example -------------------- assert(NegInfInterval!Date(Date(2012, 3, 1)).merge( Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2))) == NegInfInterval!Date(Date(2012, 3 , 1))); assert(NegInfInterval!Date(Date(2012, 3, 1)).merge( Interval!Date(Date(1999, 1, 12), Date(2015, 9, 2))) == NegInfInterval!Date(Date(2015, 9 , 2))); -------------------- merge(interval) NegInfInterval merge( NegInfInterval interval ) Returns the union of two intervals Params interval NegInfInterval The interval to merge with this interval. Note There is no overload for merge which takes a PosInfInterval , because an interval going from negative infinity to positive infinity is not possible. Example -------------------- assert(NegInfInterval!Date(Date(2012, 3, 1)).merge( NegInfInterval!Date(Date(1999, 7, 6))) == NegInfInterval!Date(Date(2012, 3 , 1))); assert(NegInfInterval!Date(Date(2012, 3, 1)).merge( NegInfInterval!Date(Date(2013, 1, 12))) == NegInfInterval!Date(Date(2013, 1 , 12))); --------------------"
  },
  "phobos/std/datetime/interval/NegInfInterval/Functions/opAssign.html": {
    "href": "phobos/std/datetime/interval/NegInfInterval/Functions/opAssign.html",
    "title": "Overloads for - opAssign | Marmos Demo",
    "keywords": "Overloads for - opAssign Module std.datetime.interval Parent NegInfInterval opAssign(rhs) NegInfInterval opAssign( NegInfInterval rhs ) Params rhs NegInfInterval The NegInfInterval to assign to this one. opAssign(rhs) NegInfInterval opAssign( NegInfInterval rhs ) Params rhs NegInfInterval The NegInfInterval to assign to this one."
  },
  "phobos/std/datetime/interval/NegInfInterval/Functions/span.html": {
    "href": "phobos/std/datetime/interval/NegInfInterval/Functions/span.html",
    "title": "Overloads for - span | Marmos Demo",
    "keywords": "Overloads for - span Module std.datetime.interval Parent NegInfInterval span(interval) NegInfInterval span( Interval!(TP) interval ) Returns an interval that covers from the earliest time point of two intervals up to (but not including) the latest time point of two intervals. Params interval Interval!(TP) The interval to create a span together with this interval. Throws $(REF DateTimeException,std,datetime,date) if the given interval is empty. Note There is no overload for span which takes a PosInfInterval , because an interval going from negative infinity to positive infinity is not possible. Example -------------------- assert(NegInfInterval!Date(Date(2012, 3, 1)).span( Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2))) == NegInfInterval!Date(Date(2012, 3 , 1))); assert(NegInfInterval!Date(Date(2012, 3, 1)).span( Interval!Date(Date(1999, 1, 12), Date(2015, 9, 2))) == NegInfInterval!Date(Date(2015, 9 , 2))); assert(NegInfInterval!Date(Date(1600, 1, 7)).span( Interval!Date(Date(2012, 3, 11), Date(2017, 7, 1))) == NegInfInterval!Date(Date(2017, 7 , 1))); -------------------- span(interval) NegInfInterval span( NegInfInterval interval ) Returns an interval that covers from the earliest time point of two intervals up to (but not including) the latest time point of two intervals. Params interval NegInfInterval The interval to create a span together with this interval. Note There is no overload for span which takes a PosInfInterval , because an interval going from negative infinity to positive infinity is not possible. Example -------------------- assert(NegInfInterval!Date(Date(2012, 3, 1)).span( NegInfInterval!Date(Date(1999, 7, 6))) == NegInfInterval!Date(Date(2012, 3 , 1))); assert(NegInfInterval!Date(Date(2012, 3, 1)).span( NegInfInterval!Date(Date(2013, 1, 12))) == NegInfInterval!Date(Date(2013, 1 , 12))); --------------------"
  },
  "phobos/std/datetime/interval/NegInfInterval/Functions/toString.html": {
    "href": "phobos/std/datetime/interval/NegInfInterval/Functions/toString.html",
    "title": "Overloads for - toString | Marmos Demo",
    "keywords": "Overloads for - toString Module std.datetime.interval Parent NegInfInterval toString() string toString( ) toString() string toString( ) Converts this interval to a string."
  },
  "phobos/std/datetime/interval/NegInfIntervalRange/Functions/front.html": {
    "href": "phobos/std/datetime/interval/NegInfIntervalRange/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.datetime.interval Parent NegInfIntervalRange front() TP front( ) The first time point in the range."
  },
  "phobos/std/datetime/interval/NegInfIntervalRange/Functions/func.html": {
    "href": "phobos/std/datetime/interval/NegInfIntervalRange/Functions/func.html",
    "title": "Overloads for - func | Marmos Demo",
    "keywords": "Overloads for - func Module std.datetime.interval Parent NegInfIntervalRange func() <bug: unknown> func( ) The function used to generate the next time point in the range."
  },
  "phobos/std/datetime/interval/NegInfIntervalRange/Functions/interval.html": {
    "href": "phobos/std/datetime/interval/NegInfIntervalRange/Functions/interval.html",
    "title": "Overloads for - interval | Marmos Demo",
    "keywords": "Overloads for - interval Module std.datetime.interval Parent NegInfIntervalRange interval() NegInfInterval!(TP) interval( ) The interval that this range currently covers."
  },
  "phobos/std/datetime/interval/NegInfIntervalRange/Functions/opAssign.html": {
    "href": "phobos/std/datetime/interval/NegInfIntervalRange/Functions/opAssign.html",
    "title": "Overloads for - opAssign | Marmos Demo",
    "keywords": "Overloads for - opAssign Module std.datetime.interval Parent NegInfIntervalRange opAssign(rhs) NegInfIntervalRange opAssign( NegInfIntervalRange rhs ) Params rhs NegInfIntervalRange The NegInfIntervalRange to assign to this one. opAssign(rhs) NegInfIntervalRange opAssign( NegInfIntervalRange rhs ) Ditto"
  },
  "phobos/std/datetime/interval/NegInfIntervalRange/Functions/popFront.html": {
    "href": "phobos/std/datetime/interval/NegInfIntervalRange/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.datetime.interval Parent NegInfIntervalRange popFront() void popFront( ) Pops front from the range, using func to generate the next time point in the range. Throws $(REF DateTimeException,std,datetime,date) if the generated time point is greater than front ."
  },
  "phobos/std/datetime/interval/NegInfIntervalRange/Functions/save.html": {
    "href": "phobos/std/datetime/interval/NegInfIntervalRange/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.datetime.interval Parent NegInfIntervalRange save() NegInfIntervalRange save( ) Returns a copy of this ."
  },
  "phobos/std/datetime/interval/Overview.html": {
    "href": "phobos/std/datetime/interval/Overview.html",
    "title": "Module - std.datetime.interval | Marmos Demo",
    "keywords": "Module - std.datetime.interval About $(SCRIPT inhibitQuickIndex = 1;) $(DIVC quickindex, $(BOOKTABLE, $(TR $(TH Category) $(TH Functions)) $(TR $(TD Main types) $(TD $(LREF Interval) $(LREF Direction) )) $(TR $(TD Special intervals) $(TD $(LREF everyDayOfWeek) $(LREF everyMonth) $(LREF everyDuration) )) $(TR $(TD Special intervals) $(TD $(LREF NegInfInterval) $(LREF PosInfInterval) )) $(TR $(TD Underlying ranges) $(TD $(LREF IntervalRange) $(LREF NegInfIntervalRange) $(LREF PosInfIntervalRange) )) $(TR $(TD Flags) $(TD $(LREF PopFirst) )) )) License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP jmdavisprog.com, Jonathan M Davis) Source: $(PHOBOSSRC std/datetime/interval.d) Aliases Name Description PopFirst Used to indicate whether popFront should be called immediately upon creating a range. The idea is that for some functions used to generate a range for an interval, front is not necessarily a time point which would ever be generated by the range (e.g. if the range were every Sunday within an interval, but the interval started on a Monday), so there needs to be a way to deal with that. To get the first time point in the range to match what the function generates, then use PopFirst.yes to indicate that the range should have popFront called on it before the range is returned so that front is a time point which the function would generate. To let the first time point not match the generator function, use PopFront.no . Structs Name Description Interval Represents an interval of time. IntervalRange A range over an $(LREF Interval). NegInfInterval Represents an interval of time which has negative infinity as its starting point. NegInfIntervalRange A range over a NegInfInterval . It is an infinite range. PosInfInterval Represents an interval of time which has positive infinity as its end point. PosInfIntervalRange A range over a PosInfInterval . It is an infinite range. Functions Name Description everyDayOfWeek Range-generating function. everyDuration Range-generating function. everyMonth Range-generating function."
  },
  "phobos/std/datetime/interval/PosInfInterval/Functions/begin.html": {
    "href": "phobos/std/datetime/interval/PosInfInterval/Functions/begin.html",
    "title": "Overloads for - begin | Marmos Demo",
    "keywords": "Overloads for - begin Module std.datetime.interval Parent PosInfInterval begin() TP begin( ) The starting point of the interval. It is included in the interval. Example -------------------- assert(PosInfInterval!Date(Date(1996, 1, 2)).begin == Date(1996, 1, 2)); -------------------- begin(timePoint) void begin( TP timePoint ) The starting point of the interval. It is included in the interval. Params timePoint TP The time point to set begin to."
  },
  "phobos/std/datetime/interval/PosInfInterval/Functions/contains.html": {
    "href": "phobos/std/datetime/interval/PosInfInterval/Functions/contains.html",
    "title": "Overloads for - contains | Marmos Demo",
    "keywords": "Overloads for - contains Module std.datetime.interval Parent PosInfInterval contains(timePoint) bool contains( TP timePoint ) Whether the given time point is within this interval. Params timePoint TP The time point to check for inclusion in this interval. Example -------------------- assert(!PosInfInterval!Date(Date(1996, 1, 2)).contains(Date(1994, 12, 24))); assert(PosInfInterval!Date(Date(1996, 1, 2)).contains(Date(2000, 1, 5))); -------------------- contains(interval) bool contains( Interval!(TP) interval ) Whether the given interval is completely within this interval. Params interval Interval!(TP) The interval to check for inclusion in this interval. Throws $(REF DateTimeException,std,datetime,date) if the given interval is empty. Example -------------------- assert(!PosInfInterval!Date(Date(1996, 1, 2)).contains( Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2)))); assert(PosInfInterval!Date(Date(1996, 1, 2)).contains( Interval!Date(Date(1999, 1, 12), Date(2011, 9, 17)))); assert(PosInfInterval!Date(Date(1996, 1, 2)).contains( Interval!Date(Date(1998, 2, 28), Date(2013, 5, 1)))); -------------------- contains(interval) bool contains( PosInfInterval interval ) Whether the given interval is completely within this interval. Params interval PosInfInterval The interval to check for inclusion in this interval. Example -------------------- assert(PosInfInterval!Date(Date(1996, 1, 2)).contains( PosInfInterval!Date(Date(1999, 5, 4)))); assert(!PosInfInterval!Date(Date(1996, 1, 2)).contains( PosInfInterval!Date(Date(1995, 7, 2)))); -------------------- contains(interval) bool contains( NegInfInterval!(TP) interval ) Whether the given interval is completely within this interval. Always returns false because an interval going to positive infinity can never contain an interval beginning at negative infinity. Params interval NegInfInterval!(TP) The interval to check for inclusion in this interval. Example -------------------- assert(!PosInfInterval!Date(Date(1996, 1, 2)).contains( NegInfInterval!Date(Date(1996, 5, 4)))); --------------------"
  },
  "phobos/std/datetime/interval/PosInfInterval/Functions/fwdRange.html": {
    "href": "phobos/std/datetime/interval/PosInfInterval/Functions/fwdRange.html",
    "title": "Overloads for - fwdRange | Marmos Demo",
    "keywords": "Overloads for - fwdRange Module std.datetime.interval Parent PosInfInterval fwdRange(func, popFirst) PosInfIntervalRange!(TP) fwdRange( <bug: unknown> func, PopFirst popFirst ) Returns a range which iterates forward over the interval, starting at begin , using $(D_PARAM func) to generate each successive time point. The range's front is the interval's begin . $(D_PARAM func) is used to generate the next front when popFront is called. If $(D_PARAM popFirst) is PopFirst.yes , then popFront is called before the range is returned (so that front is a time point which $(D_PARAM func) would generate). If $(D_PARAM func) ever generates a time point less than or equal to the current front of the range, then a $(REF DateTimeException,std,datetime,date) will be thrown. There are helper functions in this module which generate common delegates to pass to fwdRange . Their documentation starts with \"Range-generating function,\" to make them easily searchable. Params func <bug: unknown> The function used to generate the time points of the range over the interval. popFirst PopFirst Whether popFront should be called on the range before returning it. Throws $(REF DateTimeException,std,datetime,date) if this interval is empty. Warning $(D_PARAM func) must be logically pure. Ideally, $(D_PARAM func) would be a function pointer to a pure function, but forcing $(D_PARAM func) to be pure is far too restrictive to be useful, and in order to have the ease of use of having functions which generate functions to pass to fwdRange , $(D_PARAM func) must be a delegate. If $(D_PARAM func) retains state which changes as it is called, then some algorithms will not work correctly, because the range's save will have failed to have really saved the range's state. To avoid such bugs, don't pass a delegate which is not logically pure to fwdRange . If $(D_PARAM func) is given the same time point with two different calls, it must return the same result both times. Of course, none of the functions in this module have this problem, so it's only relevant for custom delegates. Example -------------------- auto interval = PosInfInterval!Date(Date(2010, 9, 1)); auto func = delegate (scope const Date date) //For iterating over even-numbered days. { if ((date.day & 1) == 0) return date + dur!\"days\"(2); return date + dur!\"days\"(1); }; auto range = interval.fwdRange(func); //An odd day. Using PopFirst.yes would have made this Date(2010, 9, 2). assert(range.front == Date(2010, 9, 1)); range.popFront(); assert(range.front == Date(2010, 9, 2)); range.popFront(); assert(range.front == Date(2010, 9, 4)); range.popFront(); assert(range.front == Date(2010, 9, 6)); range.popFront(); assert(range.front == Date(2010, 9, 8)); range.popFront(); assert(!range.empty); --------------------"
  },
  "phobos/std/datetime/interval/PosInfInterval/Functions/intersection.html": {
    "href": "phobos/std/datetime/interval/PosInfInterval/Functions/intersection.html",
    "title": "Overloads for - intersection | Marmos Demo",
    "keywords": "Overloads for - intersection Module std.datetime.interval Parent PosInfInterval intersection(interval) Interval!(TP) intersection( Interval!(TP) interval ) Returns the intersection of two intervals Params interval Interval!(TP) The interval to intersect with this interval. Throws $(REF DateTimeException,std,datetime,date) if the two intervals do not intersect or if the given interval is empty. Example -------------------- assert(PosInfInterval!Date(Date(1996, 1, 2)).intersection( Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2))) == Interval!Date(Date(1996, 1 , 2), Date(2000, 8, 2))); assert(PosInfInterval!Date(Date(1996, 1, 2)).intersection( Interval!Date(Date(1999, 1, 12), Date(2011, 9, 17))) == Interval!Date(Date(1999, 1 , 12), Date(2011, 9, 17))); -------------------- intersection(interval) PosInfInterval intersection( PosInfInterval interval ) Returns the intersection of two intervals Params interval PosInfInterval The interval to intersect with this interval. Example -------------------- assert(PosInfInterval!Date(Date(1996, 1, 2)).intersection( PosInfInterval!Date(Date(1990, 7, 6))) == PosInfInterval!Date(Date(1996, 1 , 2))); assert(PosInfInterval!Date(Date(1996, 1, 2)).intersection( PosInfInterval!Date(Date(1999, 1, 12))) == PosInfInterval!Date(Date(1999, 1 , 12))); -------------------- intersection(interval) Interval!(TP) intersection( NegInfInterval!(TP) interval ) Returns the intersection of two intervals Params interval NegInfInterval!(TP) The interval to intersect with this interval. Throws $(REF DateTimeException,std,datetime,date) if the two intervals do not intersect. Example -------------------- assert(PosInfInterval!Date(Date(1996, 1, 2)).intersection( NegInfInterval!Date(Date(1999, 7, 6))) == Interval!Date(Date(1996, 1 , 2), Date(1999, 7, 6))); assert(PosInfInterval!Date(Date(1996, 1, 2)).intersection( NegInfInterval!Date(Date(2013, 1, 12))) == Interval!Date(Date(1996, 1 , 2), Date(2013, 1, 12))); --------------------"
  },
  "phobos/std/datetime/interval/PosInfInterval/Functions/intersects.html": {
    "href": "phobos/std/datetime/interval/PosInfInterval/Functions/intersects.html",
    "title": "Overloads for - intersects | Marmos Demo",
    "keywords": "Overloads for - intersects Module std.datetime.interval Parent PosInfInterval intersects(interval) bool intersects( Interval!(TP) interval ) Whether the given interval overlaps this interval. Params interval Interval!(TP) The interval to check for intersection with this interval. Throws $(REF DateTimeException,std,datetime,date) if the given interval is empty. Example -------------------- assert(PosInfInterval!Date(Date(1996, 1, 2)).intersects( Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2)))); assert(PosInfInterval!Date(Date(1996, 1, 2)).intersects( Interval!Date(Date(1999, 1, 12), Date(2011, 9, 17)))); assert(!PosInfInterval!Date(Date(1996, 1, 2)).intersects( Interval!Date(Date(1989, 3, 1), Date(1996, 1, 2)))); -------------------- intersects(interval) bool intersects( PosInfInterval interval ) Whether the given interval overlaps this interval. Always returns true because two intervals going to positive infinity always overlap. Params interval PosInfInterval The interval to check for intersection with this interval. Example -------------------- assert(PosInfInterval!Date(Date(1996, 1, 2)).intersects( PosInfInterval!Date(Date(1990, 1, 7)))); assert(PosInfInterval!Date(Date(1996, 1, 2)).intersects( PosInfInterval!Date(Date(1999, 5, 4)))); -------------------- intersects(interval) bool intersects( NegInfInterval!(TP) interval ) Whether the given interval overlaps this interval. Params interval NegInfInterval!(TP) The interval to check for intersection with this interval. Example -------------------- assert(!PosInfInterval!Date(Date(1996, 1, 2)).intersects( NegInfInterval!Date(Date(1996, 1, 2)))); assert(PosInfInterval!Date(Date(1996, 1, 2)).intersects( NegInfInterval!Date(Date(2000, 7, 1)))); --------------------"
  },
  "phobos/std/datetime/interval/PosInfInterval/Functions/isAdjacent.html": {
    "href": "phobos/std/datetime/interval/PosInfInterval/Functions/isAdjacent.html",
    "title": "Overloads for - isAdjacent | Marmos Demo",
    "keywords": "Overloads for - isAdjacent Module std.datetime.interval Parent PosInfInterval isAdjacent(interval) bool isAdjacent( Interval!(TP) interval ) Whether the given interval is adjacent to this interval. Params interval Interval!(TP) The interval to check whether its adjecent to this interval. Throws $(REF DateTimeException,std,datetime,date) if the given interval is empty. Example -------------------- assert(PosInfInterval!Date(Date(1996, 1, 2)).isAdjacent( Interval!Date(Date(1989, 3, 1), Date(1996, 1, 2)))); assert(!PosInfInterval!Date(Date(1999, 1, 12)).isAdjacent( Interval!Date(Date(1999, 1, 12), Date(2011, 9, 17)))); -------------------- isAdjacent(interval) bool isAdjacent( PosInfInterval interval ) Whether the given interval is adjacent to this interval. Always returns false because two intervals going to positive infinity can never be adjacent to one another. Params interval PosInfInterval The interval to check whether its adjecent to this interval. Example -------------------- assert(!PosInfInterval!Date(Date(1996, 1, 2)).isAdjacent( PosInfInterval!Date(Date(1990, 1, 7)))); assert(!PosInfInterval!Date(Date(1996, 1, 2)).isAdjacent( PosInfInterval!Date(Date(1996, 1, 2)))); -------------------- isAdjacent(interval) bool isAdjacent( NegInfInterval!(TP) interval ) Whether the given interval is adjacent to this interval. Params interval NegInfInterval!(TP) The interval to check whether its adjecent to this interval. Example -------------------- assert(PosInfInterval!Date(Date(1996, 1, 2)).isAdjacent( NegInfInterval!Date(Date(1996, 1, 2)))); assert(!PosInfInterval!Date(Date(1996, 1, 2)).isAdjacent( NegInfInterval!Date(Date(2000, 7, 1)))); --------------------"
  },
  "phobos/std/datetime/interval/PosInfInterval/Functions/isAfter.html": {
    "href": "phobos/std/datetime/interval/PosInfInterval/Functions/isAfter.html",
    "title": "Overloads for - isAfter | Marmos Demo",
    "keywords": "Overloads for - isAfter Module std.datetime.interval Parent PosInfInterval isAfter(timePoint) bool isAfter( TP timePoint ) Whether this interval is after the given time point. Params timePoint TP The time point to check whether this interval is after it. Example -------------------- assert(PosInfInterval!Date(Date(1996, 1, 2)).isAfter(Date(1994, 12, 24))); assert(!PosInfInterval!Date(Date(1996, 1, 2)).isAfter(Date(2000, 1, 5))); -------------------- isAfter(interval) bool isAfter( Interval!(TP) interval ) Whether this interval is after the given interval and does not intersect it. Params interval Interval!(TP) The interval to check against this interval. Throws $(REF DateTimeException,std,datetime,date) if the given interval is empty. Example -------------------- assert(!PosInfInterval!Date(Date(1996, 1, 2)).isAfter( Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2)))); assert(!PosInfInterval!Date(Date(1996, 1, 2)).isAfter( Interval!Date(Date(1999, 1, 12), Date(2011, 9, 17)))); assert(PosInfInterval!Date(Date(1996, 1, 2)).isAfter( Interval!Date(Date(1989, 3, 1), Date(1996, 1, 2)))); -------------------- isAfter(interval) bool isAfter( PosInfInterval interval ) Whether this interval is after the given interval and does not intersect it. Always returns false because an interval going to positive infinity can never be after another interval going to positive infinity. Params interval PosInfInterval The interval to check against this interval. Example -------------------- assert(!PosInfInterval!Date(Date(1996, 1, 2)).isAfter( PosInfInterval!Date(Date(1990, 1, 7)))); assert(!PosInfInterval!Date(Date(1996, 1, 2)).isAfter( PosInfInterval!Date(Date(1999, 5, 4)))); -------------------- isAfter(interval) bool isAfter( NegInfInterval!(TP) interval ) Whether this interval is after the given interval and does not intersect it. Params interval NegInfInterval!(TP) The interval to check against this interval. Example -------------------- assert(PosInfInterval!Date(Date(1996, 1, 2)).isAfter( NegInfInterval!Date(Date(1996, 1, 2)))); assert(!PosInfInterval!Date(Date(1996, 1, 2)).isAfter( NegInfInterval!Date(Date(2000, 7, 1)))); --------------------"
  },
  "phobos/std/datetime/interval/PosInfInterval/Functions/isBefore.html": {
    "href": "phobos/std/datetime/interval/PosInfInterval/Functions/isBefore.html",
    "title": "Overloads for - isBefore | Marmos Demo",
    "keywords": "Overloads for - isBefore Module std.datetime.interval Parent PosInfInterval isBefore(timePoint) bool isBefore( TP timePoint ) Whether this interval is before the given time point. Always returns false because an interval going to positive infinity can never be before any time point. Params timePoint TP The time point to check whether this interval is before it. Example -------------------- assert(!PosInfInterval!Date(Date(1996, 1, 2)).isBefore(Date(1994, 12, 24))); assert(!PosInfInterval!Date(Date(1996, 1, 2)).isBefore(Date(2000, 1, 5))); -------------------- isBefore(interval) bool isBefore( Interval!(TP) interval ) Whether this interval is before the given interval and does not intersect it. Always returns false (unless the given interval is empty) because an interval going to positive infinity can never be before any other interval. Params interval Interval!(TP) The interval to check for against this interval. Throws $(REF DateTimeException,std,datetime,date) if the given interval is empty. Example -------------------- assert(!PosInfInterval!Date(Date(1996, 1, 2)).isBefore( Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2)))); assert(!PosInfInterval!Date(Date(1996, 1, 2)).isBefore( Interval!Date(Date(1999, 1, 12), Date(2011, 9, 17)))); -------------------- isBefore(interval) bool isBefore( PosInfInterval interval ) Whether this interval is before the given interval and does not intersect it. Always returns false because an interval going to positive infinity can never be before any other interval. Params interval PosInfInterval The interval to check for against this interval. Example -------------------- assert(!PosInfInterval!Date(Date(1996, 1, 2)).isBefore( PosInfInterval!Date(Date(1992, 5, 4)))); assert(!PosInfInterval!Date(Date(1996, 1, 2)).isBefore( PosInfInterval!Date(Date(2013, 3, 7)))); -------------------- isBefore(interval) bool isBefore( NegInfInterval!(TP) interval ) Whether this interval is before the given interval and does not intersect it. Always returns false because an interval going to positive infinity can never be before any other interval. Params interval NegInfInterval!(TP) The interval to check for against this interval. Example -------------------- assert(!PosInfInterval!Date(Date(1996, 1, 2)).isBefore( NegInfInterval!Date(Date(1996, 5, 4)))); --------------------"
  },
  "phobos/std/datetime/interval/PosInfInterval/Functions/merge.html": {
    "href": "phobos/std/datetime/interval/PosInfInterval/Functions/merge.html",
    "title": "Overloads for - merge | Marmos Demo",
    "keywords": "Overloads for - merge Module std.datetime.interval Parent PosInfInterval merge(interval) PosInfInterval merge( Interval!(TP) interval ) Returns the union of two intervals Params interval Interval!(TP) The interval to merge with this interval. Throws $(REF DateTimeException,std,datetime,date) if the two intervals do not intersect and are not adjacent or if the given interval is empty. Note There is no overload for merge which takes a NegInfInterval , because an interval going from negative infinity to positive infinity is not possible. Example -------------------- assert(PosInfInterval!Date(Date(1996, 1, 2)).merge( Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2))) == PosInfInterval!Date(Date(1990, 7 , 6))); assert(PosInfInterval!Date(Date(1996, 1, 2)).merge( Interval!Date(Date(1999, 1, 12), Date(2011, 9, 17))) == PosInfInterval!Date(Date(1996, 1 , 2))); -------------------- merge(interval) PosInfInterval merge( PosInfInterval interval ) Returns the union of two intervals Params interval PosInfInterval The interval to merge with this interval. Note There is no overload for merge which takes a NegInfInterval , because an interval going from negative infinity to positive infinity is not possible. Example -------------------- assert(PosInfInterval!Date(Date(1996, 1, 2)).merge( PosInfInterval!Date(Date(1990, 7, 6))) == PosInfInterval!Date(Date(1990, 7 , 6))); assert(PosInfInterval!Date(Date(1996, 1, 2)).merge( PosInfInterval!Date(Date(1999, 1, 12))) == PosInfInterval!Date(Date(1996, 1 , 2))); --------------------"
  },
  "phobos/std/datetime/interval/PosInfInterval/Functions/opAssign.html": {
    "href": "phobos/std/datetime/interval/PosInfInterval/Functions/opAssign.html",
    "title": "Overloads for - opAssign | Marmos Demo",
    "keywords": "Overloads for - opAssign Module std.datetime.interval Parent PosInfInterval opAssign(rhs) PosInfInterval opAssign( PosInfInterval rhs ) Params rhs PosInfInterval The PosInfInterval to assign to this one. opAssign(rhs) PosInfInterval opAssign( PosInfInterval rhs ) Params rhs PosInfInterval The PosInfInterval to assign to this one."
  },
  "phobos/std/datetime/interval/PosInfInterval/Functions/span.html": {
    "href": "phobos/std/datetime/interval/PosInfInterval/Functions/span.html",
    "title": "Overloads for - span | Marmos Demo",
    "keywords": "Overloads for - span Module std.datetime.interval Parent PosInfInterval span(interval) PosInfInterval span( Interval!(TP) interval ) Returns an interval that covers from the earliest time point of two intervals up to (but not including) the latest time point of two intervals. Params interval Interval!(TP) The interval to create a span together with this interval. Throws $(REF DateTimeException,std,datetime,date) if the given interval is empty. Note There is no overload for span which takes a NegInfInterval , because an interval going from negative infinity to positive infinity is not possible. Example -------------------- assert(PosInfInterval!Date(Date(1996, 1, 2)).span( Interval!Date(Date(500, 8, 9), Date(1602, 1, 31))) == PosInfInterval!Date(Date(500, 8, 9))); assert(PosInfInterval!Date(Date(1996, 1, 2)).span( Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2))) == PosInfInterval!Date(Date(1990, 7 , 6))); assert(PosInfInterval!Date(Date(1996, 1, 2)).span( Interval!Date(Date(1999, 1, 12), Date(2011, 9, 17))) == PosInfInterval!Date(Date(1996, 1 , 2))); -------------------- span(interval) PosInfInterval span( PosInfInterval interval ) Returns an interval that covers from the earliest time point of two intervals up to (but not including) the latest time point of two intervals. Params interval PosInfInterval The interval to create a span together with this interval. Note There is no overload for span which takes a NegInfInterval , because an interval going from negative infinity to positive infinity is not possible. Example -------------------- assert(PosInfInterval!Date(Date(1996, 1, 2)).span( PosInfInterval!Date(Date(1990, 7, 6))) == PosInfInterval!Date(Date(1990, 7 , 6))); assert(PosInfInterval!Date(Date(1996, 1, 2)).span( PosInfInterval!Date(Date(1999, 1, 12))) == PosInfInterval!Date(Date(1996, 1 , 2))); --------------------"
  },
  "phobos/std/datetime/interval/PosInfInterval/Functions/toString.html": {
    "href": "phobos/std/datetime/interval/PosInfInterval/Functions/toString.html",
    "title": "Overloads for - toString | Marmos Demo",
    "keywords": "Overloads for - toString Module std.datetime.interval Parent PosInfInterval toString() string toString( ) toString() string toString( ) Converts this interval to a string."
  },
  "phobos/std/datetime/interval/PosInfIntervalRange/Functions/front.html": {
    "href": "phobos/std/datetime/interval/PosInfIntervalRange/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.datetime.interval Parent PosInfIntervalRange front() TP front( ) The first time point in the range."
  },
  "phobos/std/datetime/interval/PosInfIntervalRange/Functions/func.html": {
    "href": "phobos/std/datetime/interval/PosInfIntervalRange/Functions/func.html",
    "title": "Overloads for - func | Marmos Demo",
    "keywords": "Overloads for - func Module std.datetime.interval Parent PosInfIntervalRange func() <bug: unknown> func( ) The function used to generate the next time point in the range."
  },
  "phobos/std/datetime/interval/PosInfIntervalRange/Functions/interval.html": {
    "href": "phobos/std/datetime/interval/PosInfIntervalRange/Functions/interval.html",
    "title": "Overloads for - interval | Marmos Demo",
    "keywords": "Overloads for - interval Module std.datetime.interval Parent PosInfIntervalRange interval() PosInfInterval!(TP) interval( ) The interval that this range currently covers."
  },
  "phobos/std/datetime/interval/PosInfIntervalRange/Functions/opAssign.html": {
    "href": "phobos/std/datetime/interval/PosInfIntervalRange/Functions/opAssign.html",
    "title": "Overloads for - opAssign | Marmos Demo",
    "keywords": "Overloads for - opAssign Module std.datetime.interval Parent PosInfIntervalRange opAssign(rhs) PosInfIntervalRange opAssign( PosInfIntervalRange rhs ) Params rhs PosInfIntervalRange The PosInfIntervalRange to assign to this one. opAssign(rhs) PosInfIntervalRange opAssign( PosInfIntervalRange rhs ) Ditto"
  },
  "phobos/std/datetime/interval/PosInfIntervalRange/Functions/popFront.html": {
    "href": "phobos/std/datetime/interval/PosInfIntervalRange/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.datetime.interval Parent PosInfIntervalRange popFront() void popFront( ) Pops front from the range, using func to generate the next time point in the range. Throws $(REF DateTimeException,std,datetime,date) if the generated time point is less than front ."
  },
  "phobos/std/datetime/interval/PosInfIntervalRange/Functions/save.html": {
    "href": "phobos/std/datetime/interval/PosInfIntervalRange/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.datetime.interval Parent PosInfIntervalRange save() PosInfIntervalRange save( ) Returns a copy of this ."
  },
  "phobos/std/datetime/interval/Structs/Interval.html": {
    "href": "phobos/std/datetime/interval/Structs/Interval.html",
    "title": "Struct - Interval | Marmos Demo",
    "keywords": "Struct - Interval Module std.datetime.interval public struct Interval { // The starting point of the interval. It is included in the interval. TP begin( ) ; // The starting point of the interval. It is included in the interval. void begin( TP timePoint ) ; // Returns a range which iterates backwards over the interval, starting at `end` , using $(D_PARAM func) to generate each successive time point. IntervalRange!(TPDirection.bwd) bwdRange( <bug: unknown> func, PopFirst popFirst ) ; // Whether the given time point is within this interval. bool contains( TP timePoint ) ; // Whether the given interval is completely within this interval. bool contains( Interval interval ) ; // Whether the given interval is completely within this interval. bool contains( PosInfInterval!(TP) interval ) ; // Whether the given interval is completely within this interval. bool contains( NegInfInterval!(TP) interval ) ; // Whether the interval's length is 0, that is, whether $(D begin == end). bool empty( ) ; // The end point of the interval. It is excluded from the interval. TP end( ) ; // The end point of the interval. It is excluded from the interval. void end( TP timePoint ) ; // Returns a range which iterates forward over the interval, starting at `begin` , using $(D_PARAM func) to generate each successive time point. IntervalRange!(TPDirection.fwd) fwdRange( <bug: unknown> func, PopFirst popFirst ) ; // Returns the intersection of two intervals Interval intersection( Interval interval ) ; // Returns the intersection of two intervals Interval intersection( PosInfInterval!(TP) interval ) ; // Returns the intersection of two intervals Interval intersection( NegInfInterval!(TP) interval ) ; // Whether the given interval overlaps this interval. bool intersects( Interval interval ) ; // Whether the given interval overlaps this interval. bool intersects( PosInfInterval!(TP) interval ) ; // Whether the given interval overlaps this interval. bool intersects( NegInfInterval!(TP) interval ) ; // Whether the given interval is adjacent to this interval. bool isAdjacent( Interval interval ) ; // Whether the given interval is adjacent to this interval. bool isAdjacent( PosInfInterval!(TP) interval ) ; // Whether the given interval is adjacent to this interval. bool isAdjacent( NegInfInterval!(TP) interval ) ; // Whether this interval is after the given time point. bool isAfter( TP timePoint ) ; // Whether this interval is after the given interval and does not intersect it. bool isAfter( Interval interval ) ; // Whether this interval is after the given interval and does not intersect it. bool isAfter( PosInfInterval!(TP) interval ) ; // Whether this interval is after the given interval and does not intersect it. bool isAfter( NegInfInterval!(TP) interval ) ; // Whether this interval is before the given time point. bool isBefore( TP timePoint ) ; // Whether this interval is before the given interval and does not intersect with it. bool isBefore( Interval interval ) ; // Whether this interval is before the given interval and does not intersect with it. bool isBefore( PosInfInterval!(TP) interval ) ; // Whether this interval is before the given interval and does not intersect with it. bool isBefore( NegInfInterval!(TP) interval ) ; // Returns the duration between `begin` and `end` . <bug: unknown> length( ) auto; // Returns the union of two intervals Interval merge( Interval interval ) ; // Returns the union of two intervals PosInfInterval!(TP) merge( PosInfInterval!(TP) interval ) ; // Returns the union of two intervals NegInfInterval!(TP) merge( NegInfInterval!(TP) interval ) ; // Interval opAssign( Interval rhs ) ; // Interval opAssign( Interval rhs ) ; // Returns an interval that covers from the earliest time point of two intervals up to (but not including) the latest time point of two intervals. Interval span( Interval interval ) ; // Returns an interval that covers from the earliest time point of two intervals up to (but not including) the latest time point of two intervals. PosInfInterval!(TP) span( PosInfInterval!(TP) interval ) ; // Returns an interval that covers from the earliest time point of two intervals up to (but not including) the latest time point of two intervals. NegInfInterval!(TP) span( NegInfInterval!(TP) interval ) ; // Converts this interval to a string. Params: w = A `char` accepting $(REF_ALTTEXT output range, isOutputRange, std, range, primitives) Returns: A `string` when not using an output range; `void` otherwise. string toString( ) ; } About Represents an interval of time. An Interval has a starting point and an end point. The interval of time is therefore the time starting at the starting point up to, but not including, the end point. e.g. $(BOOKTABLE, $(TR \\((TD [January 5th, 2010 - March 10th, 2010\\)(RPAREN))) $(TR \\((TD [05:00:30 - 12:00:00\\)(RPAREN))) $(TR \\((TD [1982-01-04T08:59:00 - 2010-07-04T12:00:00\\)(RPAREN))) ) A range can be obtained from an Interval , allowing iteration over that interval, with the exact time points which are iterated over depending on the function which generates the range. Functions Name Description begin The starting point of the interval. It is included in the interval. bwdRange Returns a range which iterates backwards over the interval, starting at end , using $(D_PARAM func) to generate each successive time point. contains Whether the given time point is within this interval. empty Whether the interval's length is 0, that is, whether $(D begin == end). end The end point of the interval. It is excluded from the interval. fwdRange Returns a range which iterates forward over the interval, starting at begin , using $(D_PARAM func) to generate each successive time point. intersection Returns the intersection of two intervals intersects Whether the given interval overlaps this interval. isAdjacent Whether the given interval is adjacent to this interval. isAfter Whether this interval is after the given time point. isBefore Whether this interval is before the given time point. length Returns the duration between begin and end . merge Returns the union of two intervals opAssign span Returns an interval that covers from the earliest time point of two intervals up to (but not including) the latest time point of two intervals. toString Converts this interval to a string. Params: w = A char accepting $(REF_ALTTEXT output range, isOutputRange, std, range, primitives) Returns: A string when not using an output range; void otherwise."
  },
  "phobos/std/datetime/interval/Structs/IntervalRange.html": {
    "href": "phobos/std/datetime/interval/Structs/IntervalRange.html",
    "title": "Struct - IntervalRange | Marmos Demo",
    "keywords": "Struct - IntervalRange Module std.datetime.interval public struct IntervalRange { // The `Direction` that this range iterates in. Direction direction( ) ; // Whether this `IntervalRange` is empty. bool empty( ) ; // The first time point in the range. TP front( ) ; // The function used to generate the next time point in the range. <bug: unknown> func( ) ; // The interval that this `IntervalRange` currently covers. Interval!(TP) interval( ) ; // IntervalRange opAssign( IntervalRange rhs ) ; // Ditto IntervalRange opAssign( IntervalRange rhs ) ; // Pops `front` from the range, using `func` to generate the next time point in the range. If the generated time point is beyond the edge of the range, then `front` is set to that edge, and the range is then empty. So, if iterating forwards, and the generated time point is greater than the interval's `end` , then `front` is set to `end` . If iterating backwards, and the generated time point is less than the interval's `begin` , then `front` is set to `begin` . void popFront( ) ; // Returns a copy of `this` . IntervalRange save( ) ; } About A range over an $(LREF Interval). IntervalRange is only ever constructed by $(LREF Interval). However, when it is constructed, it is given a function, func , which is used to generate the time points which are iterated over. func takes a time point and returns a time point of the same type. For instance, to iterate over all of the days in the interval Interval!Date , pass a function to $(LREF Interval)'s fwdRange where that function took a $(REF Date,std,datetime,date) and returned a $(REF Date,std,datetime,date) which was one day later. That function would then be used by IntervalRange 's popFront to iterate over the $(REF Date,std,datetime,date)s in the interval. If $(D dir == Direction.fwd), then a range iterates forward in time, whereas if $(D dir == Direction.bwd), then it iterates backwards in time. So, if $(D dir == Direction.fwd) then $(D front == interval.begin), whereas if $(D dir == Direction.bwd) then $(D front == interval.end). func must generate a time point going in the proper direction of iteration, or a $(REF DateTimeException,std,datetime,date) will be thrown. So, to iterate forward in time, the time point that func generates must be later in time than the one passed to it. If it's either identical or earlier in time, then a $(REF DateTimeException,std,datetime,date) will be thrown. To iterate backwards, then the generated time point must be before the time point which was passed in. If the generated time point is ever passed the edge of the range in the proper direction, then the edge of that range will be used instead. So, if iterating forward, and the generated time point is past the interval's end , then front becomes end . If iterating backwards, and the generated time point is before begin , then front becomes begin . In either case, the range would then be empty. Also note that while normally the begin of an interval is included in it and its end is excluded from it, if $(D dir == Direction.bwd), then begin is treated as excluded and end is treated as included. This allows for the same behavior in both directions. This works because none of $(LREF Interval)'s functions which care about whether begin or end is included or excluded are ever called by IntervalRange . interval returns a normal interval, regardless of whether $(D dir == Direction.fwd) or if $(D dir == Direction.bwd), so any $(LREF Interval) functions which are called on it which care about whether begin or end are included or excluded will treat begin as included and end as excluded. Functions Name Description direction The Direction that this range iterates in. empty Whether this IntervalRange is empty. front The first time point in the range. func The function used to generate the next time point in the range. interval The interval that this IntervalRange currently covers. opAssign popFront Pops front from the range, using func to generate the next time point in the range. If the generated time point is beyond the edge of the range, then front is set to that edge, and the range is then empty. So, if iterating forwards, and the generated time point is greater than the interval's end , then front is set to end . If iterating backwards, and the generated time point is less than the interval's begin , then front is set to begin . save Returns a copy of this ."
  },
  "phobos/std/datetime/interval/Structs/NegInfInterval.html": {
    "href": "phobos/std/datetime/interval/Structs/NegInfInterval.html",
    "title": "Struct - NegInfInterval | Marmos Demo",
    "keywords": "Struct - NegInfInterval Module std.datetime.interval public struct NegInfInterval { // Returns a range which iterates backwards over the interval, starting at `end` , using $(D_PARAM func) to generate each successive time point. NegInfIntervalRange!(TP) bwdRange( <bug: unknown> func, PopFirst popFirst ) ; // Whether the given time point is within this interval. bool contains( TP timePoint ) ; // Whether the given interval is completely within this interval. bool contains( Interval!(TP) interval ) ; // Whether the given interval is completely within this interval. bool contains( PosInfInterval!(TP) interval ) ; // Whether the given interval is completely within this interval. bool contains( NegInfInterval interval ) ; // The end point of the interval. It is excluded from the interval. TP end( ) ; // The end point of the interval. It is excluded from the interval. void end( TP timePoint ) ; // Returns the intersection of two intervals Interval!(TP) intersection( Interval!(TP) interval ) ; // Returns the intersection of two intervals Interval!(TP) intersection( PosInfInterval!(TP) interval ) ; // Returns the intersection of two intervals NegInfInterval intersection( NegInfInterval interval ) ; // Whether the given interval overlaps this interval. bool intersects( Interval!(TP) interval ) ; // Whether the given interval overlaps this interval. bool intersects( PosInfInterval!(TP) interval ) ; // Whether the given interval overlaps this interval. bool intersects( NegInfInterval!(TP) interval ) ; // Whether the given interval is adjacent to this interval. bool isAdjacent( Interval!(TP) interval ) ; // Whether the given interval is adjacent to this interval. bool isAdjacent( PosInfInterval!(TP) interval ) ; // Whether the given interval is adjacent to this interval. bool isAdjacent( NegInfInterval interval ) ; // Whether this interval is after the given time point. bool isAfter( TP timePoint ) ; // Whether this interval is after the given interval and does not intersect it. bool isAfter( Interval!(TP) interval ) ; // Whether this interval is after the given interval and does not intersect it. bool isAfter( PosInfInterval!(TP) interval ) ; // Whether this interval is after the given interval and does not intersect it. bool isAfter( NegInfInterval interval ) ; // Whether this interval is before the given time point. bool isBefore( TP timePoint ) ; // Whether this interval is before the given interval and does not intersect it. bool isBefore( Interval!(TP) interval ) ; // Whether this interval is before the given interval and does not intersect it. bool isBefore( PosInfInterval!(TP) interval ) ; // Whether this interval is before the given interval and does not intersect it. bool isBefore( NegInfInterval interval ) ; // Returns the union of two intervals NegInfInterval merge( Interval!(TP) interval ) ; // Returns the union of two intervals NegInfInterval merge( NegInfInterval interval ) ; // NegInfInterval opAssign( NegInfInterval rhs ) ; // NegInfInterval opAssign( NegInfInterval rhs ) ; // Returns an interval that covers from the earliest time point of two intervals up to (but not including) the latest time point of two intervals. NegInfInterval span( Interval!(TP) interval ) ; // Returns an interval that covers from the earliest time point of two intervals up to (but not including) the latest time point of two intervals. NegInfInterval span( NegInfInterval interval ) ; // string toString( ) ; // Converts this interval to a string. string toString( ) ; // Whether the interval's length is 0. Always returns false. bool empty; } About Represents an interval of time which has negative infinity as its starting point. Any ranges which iterate over a NegInfInterval are infinite. So, the main purpose of using NegInfInterval is to create an infinite range which starts at negative infinity and goes to a fixed end point. Iterate over it in reverse. Functions Name Description bwdRange Returns a range which iterates backwards over the interval, starting at end , using $(D_PARAM func) to generate each successive time point. contains Whether the given time point is within this interval. end The end point of the interval. It is excluded from the interval. intersection Returns the intersection of two intervals intersects Whether the given interval overlaps this interval. isAdjacent Whether the given interval is adjacent to this interval. isAfter Whether this interval is after the given time point. isBefore Whether this interval is before the given time point. merge Returns the union of two intervals opAssign span Returns an interval that covers from the earliest time point of two intervals up to (but not including) the latest time point of two intervals. toString Variables Name Description empty Whether the interval's length is 0. Always returns false."
  },
  "phobos/std/datetime/interval/Structs/NegInfIntervalRange.html": {
    "href": "phobos/std/datetime/interval/Structs/NegInfIntervalRange.html",
    "title": "Struct - NegInfIntervalRange | Marmos Demo",
    "keywords": "Struct - NegInfIntervalRange Module std.datetime.interval public struct NegInfIntervalRange { // The first time point in the range. TP front( ) ; // The function used to generate the next time point in the range. <bug: unknown> func( ) ; // The interval that this range currently covers. NegInfInterval!(TP) interval( ) ; // NegInfIntervalRange opAssign( NegInfIntervalRange rhs ) ; // Ditto NegInfIntervalRange opAssign( NegInfIntervalRange rhs ) ; // Pops `front` from the range, using `func` to generate the next time point in the range. void popFront( ) ; // Returns a copy of `this` . NegInfIntervalRange save( ) ; // This is an infinite range, so it is never empty. bool empty; } About A range over a NegInfInterval . It is an infinite range. NegInfIntervalRange is only ever constructed by NegInfInterval . However, when it is constructed, it is given a function, func , which is used to generate the time points which are iterated over. func takes a time point and returns a time point of the same type. For instance, to iterate over all of the days in the interval NegInfInterval!Date , pass a function to NegInfInterval 's bwdRange where that function took a $(REF Date,std,datetime,date) and returned a $(REF Date,std,datetime,date) which was one day earlier. That function would then be used by NegInfIntervalRange 's popFront to iterate over the $(REF Date,std,datetime,date)s in the interval - though obviously, since the range is infinite, use a function such as std.range.take with it rather than iterating over $(I all) of the dates. As the interval goes to negative infinity, the range is always iterated over backwards, never forwards. func must generate a time point going in the proper direction of iteration, or a $(REF DateTimeException,std,datetime,date) will be thrown. So, the time points that func generates must be earlier in time than the one passed to it. If it's either identical or later in time, then a $(REF DateTimeException,std,datetime,date) will be thrown. Also note that while normally the end of an interval is excluded from it, NegInfIntervalRange treats it as if it were included. This allows for the same behavior as with PosInfIntervalRange . This works because none of NegInfInterval 's functions which care about whether end is included or excluded are ever called by NegInfIntervalRange . interval returns a normal interval, so any NegInfInterval functions which are called on it which care about whether end is included or excluded will treat end as excluded. Functions Name Description front The first time point in the range. func The function used to generate the next time point in the range. interval The interval that this range currently covers. opAssign popFront Pops front from the range, using func to generate the next time point in the range. save Returns a copy of this . Variables Name Description empty This is an infinite range, so it is never empty."
  },
  "phobos/std/datetime/interval/Structs/PosInfInterval.html": {
    "href": "phobos/std/datetime/interval/Structs/PosInfInterval.html",
    "title": "Struct - PosInfInterval | Marmos Demo",
    "keywords": "Struct - PosInfInterval Module std.datetime.interval public struct PosInfInterval { // The starting point of the interval. It is included in the interval. TP begin( ) ; // The starting point of the interval. It is included in the interval. void begin( TP timePoint ) ; // Whether the given time point is within this interval. bool contains( TP timePoint ) ; // Whether the given interval is completely within this interval. bool contains( Interval!(TP) interval ) ; // Whether the given interval is completely within this interval. bool contains( PosInfInterval interval ) ; // Whether the given interval is completely within this interval. bool contains( NegInfInterval!(TP) interval ) ; // Returns a range which iterates forward over the interval, starting at `begin` , using $(D_PARAM func) to generate each successive time point. PosInfIntervalRange!(TP) fwdRange( <bug: unknown> func, PopFirst popFirst ) ; // Returns the intersection of two intervals Interval!(TP) intersection( Interval!(TP) interval ) ; // Returns the intersection of two intervals PosInfInterval intersection( PosInfInterval interval ) ; // Returns the intersection of two intervals Interval!(TP) intersection( NegInfInterval!(TP) interval ) ; // Whether the given interval overlaps this interval. bool intersects( Interval!(TP) interval ) ; // Whether the given interval overlaps this interval. bool intersects( PosInfInterval interval ) ; // Whether the given interval overlaps this interval. bool intersects( NegInfInterval!(TP) interval ) ; // Whether the given interval is adjacent to this interval. bool isAdjacent( Interval!(TP) interval ) ; // Whether the given interval is adjacent to this interval. bool isAdjacent( PosInfInterval interval ) ; // Whether the given interval is adjacent to this interval. bool isAdjacent( NegInfInterval!(TP) interval ) ; // Whether this interval is after the given time point. bool isAfter( TP timePoint ) ; // Whether this interval is after the given interval and does not intersect it. bool isAfter( Interval!(TP) interval ) ; // Whether this interval is after the given interval and does not intersect it. bool isAfter( PosInfInterval interval ) ; // Whether this interval is after the given interval and does not intersect it. bool isAfter( NegInfInterval!(TP) interval ) ; // Whether this interval is before the given time point. bool isBefore( TP timePoint ) ; // Whether this interval is before the given interval and does not intersect it. bool isBefore( Interval!(TP) interval ) ; // Whether this interval is before the given interval and does not intersect it. bool isBefore( PosInfInterval interval ) ; // Whether this interval is before the given interval and does not intersect it. bool isBefore( NegInfInterval!(TP) interval ) ; // Returns the union of two intervals PosInfInterval merge( Interval!(TP) interval ) ; // Returns the union of two intervals PosInfInterval merge( PosInfInterval interval ) ; // PosInfInterval opAssign( PosInfInterval rhs ) ; // PosInfInterval opAssign( PosInfInterval rhs ) ; // Returns an interval that covers from the earliest time point of two intervals up to (but not including) the latest time point of two intervals. PosInfInterval span( Interval!(TP) interval ) ; // Returns an interval that covers from the earliest time point of two intervals up to (but not including) the latest time point of two intervals. PosInfInterval span( PosInfInterval interval ) ; // string toString( ) ; // Converts this interval to a string. string toString( ) ; // Whether the interval's length is 0. Always returns false. bool empty; } About Represents an interval of time which has positive infinity as its end point. Any ranges which iterate over a PosInfInterval are infinite. So, the main purpose of using PosInfInterval is to create an infinite range which starts at a fixed point in time and goes to positive infinity. Functions Name Description begin The starting point of the interval. It is included in the interval. contains Whether the given time point is within this interval. fwdRange Returns a range which iterates forward over the interval, starting at begin , using $(D_PARAM func) to generate each successive time point. intersection Returns the intersection of two intervals intersects Whether the given interval overlaps this interval. isAdjacent Whether the given interval is adjacent to this interval. isAfter Whether this interval is after the given time point. isBefore Whether this interval is before the given time point. merge Returns the union of two intervals opAssign span Returns an interval that covers from the earliest time point of two intervals up to (but not including) the latest time point of two intervals. toString Variables Name Description empty Whether the interval's length is 0. Always returns false."
  },
  "phobos/std/datetime/interval/Structs/PosInfIntervalRange.html": {
    "href": "phobos/std/datetime/interval/Structs/PosInfIntervalRange.html",
    "title": "Struct - PosInfIntervalRange | Marmos Demo",
    "keywords": "Struct - PosInfIntervalRange Module std.datetime.interval public struct PosInfIntervalRange { // The first time point in the range. TP front( ) ; // The function used to generate the next time point in the range. <bug: unknown> func( ) ; // The interval that this range currently covers. PosInfInterval!(TP) interval( ) ; // PosInfIntervalRange opAssign( PosInfIntervalRange rhs ) ; // Ditto PosInfIntervalRange opAssign( PosInfIntervalRange rhs ) ; // Pops `front` from the range, using `func` to generate the next time point in the range. void popFront( ) ; // Returns a copy of `this` . PosInfIntervalRange save( ) ; // This is an infinite range, so it is never empty. bool empty; } About A range over a PosInfInterval . It is an infinite range. PosInfIntervalRange is only ever constructed by PosInfInterval . However, when it is constructed, it is given a function, func , which is used to generate the time points which are iterated over. func takes a time point and returns a time point of the same type. For instance, to iterate over all of the days in the interval PosInfInterval!Date , pass a function to PosInfInterval 's fwdRange where that function took a $(REF Date,std,datetime,date) and returned a $(REF Date,std,datetime,date) which was one day later. That function would then be used by PosInfIntervalRange 's popFront to iterate over the $(REF Date,std,datetime,date)s in the interval - though obviously, since the range is infinite, use a function such as std.range.take with it rather than iterating over $(I all) of the dates. As the interval goes to positive infinity, the range is always iterated over forwards, never backwards. func must generate a time point going in the proper direction of iteration, or a $(REF DateTimeException,std,datetime,date) will be thrown. So, the time points that func generates must be later in time than the one passed to it. If it's either identical or earlier in time, then a $(REF DateTimeException,std,datetime,date) will be thrown. Functions Name Description front The first time point in the range. func The function used to generate the next time point in the range. interval The interval that this range currently covers. opAssign popFront Pops front from the range, using func to generate the next time point in the range. save Returns a copy of this . Variables Name Description empty This is an infinite range, so it is never empty."
  },
  "phobos/std/datetime/stopwatch/Functions/benchmark.html": {
    "href": "phobos/std/datetime/stopwatch/Functions/benchmark.html",
    "title": "Overloads for - benchmark | Marmos Demo",
    "keywords": "Overloads for - benchmark Module std.datetime.stopwatch benchmark(n) <bug: unknown> benchmark( uint n ) Benchmarks code for speed assessment and comparison. Params fun <parameter not found> aliases of callable objects (e.g. function names). Each callable object should take no arguments. n uint The number of times each function is to be executed. Returns The amount of time (as a $(REF Duration,core,time)) that it took to call each function n times. The first value is the length of time that it took to call fun[0] n times. The second value is the length of time it took to call fun[1] n times. Etc."
  },
  "phobos/std/datetime/stopwatch/Overview.html": {
    "href": "phobos/std/datetime/stopwatch/Overview.html",
    "title": "Module - std.datetime.stopwatch | Marmos Demo",
    "keywords": "Module - std.datetime.stopwatch About Module containing some basic benchmarking and timing functionality. For convenience, this module publicly imports $(MREF core,time). $(SCRIPT inhibitQuickIndex = 1;) $(DIVC quickindex, $(BOOKTABLE, $(TR $(TH Category) $(TH Functions)) $(TR $(TD Main functionality) $(TD $(LREF StopWatch) $(LREF benchmark) )) $(TR $(TD Flags) $(TD $(LREF AutoStart) )) )) $(RED Unlike the other modules in std.datetime, this module is not currently publicly imported in std.datetime.package, because the old versions of this functionality which use $(REF TickDuration,core,time) are in std.datetime.package and would conflict with the symbols in this module. After the old symbols have gone through the deprecation cycle and have been fully removed, then this module will be publicly imported in std.datetime.package. The old, deprecated symbols has been removed from the documentation in December 2019 and currently scheduled to be fully removed from Phobos after 2.094.) So, for now, when using std.datetime.stopwatch, if other modules from std.datetime are needed, then either import them individually rather than importing std.datetime, or use selective or static imports to import std.datetime.stopwatch. e.g. ---------------------------------------------------------------------------- import std.datetime; import std.datetime.stopwatch : benchmark, StopWatch; ---------------------------------------------------------------------------- The compiler will then know to use the symbols from std.datetime.stopwatch rather than the deprecated ones from std.datetime.package. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP jmdavisprog.com, Jonathan M Davis) and Kato Shoichi Source: $(PHOBOSSRC std/datetime/stopwatch.d) Aliases Name Description AutoStart Used by StopWatch to indicate whether it should start immediately upon construction. Structs Name Description StopWatch StopWatch is used to measure time just like one would do with a physical stopwatch, including stopping, restarting, and/or resetting it. Functions Name Description benchmark Benchmarks code for speed assessment and comparison."
  },
  "phobos/std/datetime/stopwatch/StopWatch/Functions/peek.html": {
    "href": "phobos/std/datetime/stopwatch/StopWatch/Functions/peek.html",
    "title": "Overloads for - peek | Marmos Demo",
    "keywords": "Overloads for - peek Module std.datetime.stopwatch Parent StopWatch peek() Duration peek( ) Peek at the amount of time that the StopWatch has been running. This does not include any time during which the StopWatch was stopped but does include $(I all) of the time that it was running and not just the time since it was started last. Calling $(LREF reset) will reset this to Duration.zero ."
  },
  "phobos/std/datetime/stopwatch/StopWatch/Functions/reset.html": {
    "href": "phobos/std/datetime/stopwatch/StopWatch/Functions/reset.html",
    "title": "Overloads for - reset | Marmos Demo",
    "keywords": "Overloads for - reset Module std.datetime.stopwatch Parent StopWatch reset() void reset( ) Resets the StopWatch. The StopWatch can be reset while it's running, and resetting it while it's running will not cause it to stop."
  },
  "phobos/std/datetime/stopwatch/StopWatch/Functions/running.html": {
    "href": "phobos/std/datetime/stopwatch/StopWatch/Functions/running.html",
    "title": "Overloads for - running | Marmos Demo",
    "keywords": "Overloads for - running Module std.datetime.stopwatch Parent StopWatch running() bool running( ) Returns whether this StopWatch is currently running."
  },
  "phobos/std/datetime/stopwatch/StopWatch/Functions/setTimeElapsed.html": {
    "href": "phobos/std/datetime/stopwatch/StopWatch/Functions/setTimeElapsed.html",
    "title": "Overloads for - setTimeElapsed | Marmos Demo",
    "keywords": "Overloads for - setTimeElapsed Module std.datetime.stopwatch Parent StopWatch setTimeElapsed(timeElapsed) void setTimeElapsed( Duration timeElapsed ) Sets the total time which the StopWatch has been running (i.e. what peek returns). The StopWatch does not have to be stopped for setTimeElapsed to be called, nor will calling it cause the StopWatch to stop."
  },
  "phobos/std/datetime/stopwatch/StopWatch/Functions/start.html": {
    "href": "phobos/std/datetime/stopwatch/StopWatch/Functions/start.html",
    "title": "Overloads for - start | Marmos Demo",
    "keywords": "Overloads for - start Module std.datetime.stopwatch Parent StopWatch start() void start( ) Starts the StopWatch. start should not be called if the StopWatch is already running."
  },
  "phobos/std/datetime/stopwatch/StopWatch/Functions/stop.html": {
    "href": "phobos/std/datetime/stopwatch/StopWatch/Functions/stop.html",
    "title": "Overloads for - stop | Marmos Demo",
    "keywords": "Overloads for - stop Module std.datetime.stopwatch Parent StopWatch stop() void stop( ) Stops the StopWatch. stop should not be called if the StopWatch is not running."
  },
  "phobos/std/datetime/stopwatch/Structs/StopWatch.html": {
    "href": "phobos/std/datetime/stopwatch/Structs/StopWatch.html",
    "title": "Struct - StopWatch | Marmos Demo",
    "keywords": "Struct - StopWatch Module std.datetime.stopwatch public struct StopWatch { // Peek at the amount of time that the StopWatch has been running. Duration peek( ) ; // Resets the StopWatch. void reset( ) ; // Returns whether this StopWatch is currently running. bool running( ) ; // Sets the total time which the StopWatch has been running (i.e. what peek returns). void setTimeElapsed( Duration timeElapsed ) ; // Starts the StopWatch. void start( ) ; // Stops the StopWatch. void stop( ) ; } About StopWatch is used to measure time just like one would do with a physical stopwatch, including stopping, restarting, and/or resetting it. $(REF MonoTime,core,time) is used to hold the time, and it uses the system's monotonic clock, which is high precision and never counts backwards (unlike the wall clock time, which $(I can) count backwards, which is why $(REF SysTime,std,datetime,systime) should not be used for timing). Note that the precision of StopWatch differs from system to system. It is impossible for it to be the same for all systems, since the precision of the system clock and other system-dependent and situation-dependent factors (such as the overhead of a context switch between threads) varies from system to system and can affect StopWatch's accuracy. Functions Name Description peek Peek at the amount of time that the StopWatch has been running. reset Resets the StopWatch. running Returns whether this StopWatch is currently running. setTimeElapsed Sets the total time which the StopWatch has been running (i.e. what peek returns). start Starts the StopWatch. stop Stops the StopWatch."
  },
  "phobos/std/datetime/systime/Classes/Clock.html": {
    "href": "phobos/std/datetime/systime/Classes/Clock.html",
    "title": "Class - Clock | Marmos Demo",
    "keywords": "Class - Clock Module std.datetime.systime public class Clock { } About Effectively a namespace to make it clear that the methods it contains are getting the time from the system clock. It cannot be instantiated."
  },
  "phobos/std/datetime/systime/Functions/DosFileTimeToSysTime.html": {
    "href": "phobos/std/datetime/systime/Functions/DosFileTimeToSysTime.html",
    "title": "Overloads for - DosFileTimeToSysTime | Marmos Demo",
    "keywords": "Overloads for - DosFileTimeToSysTime Module std.datetime.systime DosFileTimeToSysTime(dft, tz) SysTime DosFileTimeToSysTime( DosFileTime dft, TimeZone tz ) Converts from DOS file date/time to $(LREF SysTime). Params dft DosFileTime The DOS file time to convert. tz TimeZone The time zone which the DOS file time is assumed to be in. Throws $(REF DateTimeException,std,datetime,date) if the DosFileTime is invalid."
  },
  "phobos/std/datetime/systime/Functions/FILETIMEToStdTime.html": {
    "href": "phobos/std/datetime/systime/Functions/FILETIMEToStdTime.html",
    "title": "Overloads for - FILETIMEToStdTime | Marmos Demo",
    "keywords": "Overloads for - FILETIMEToStdTime Module std.datetime.systime FILETIMEToStdTime(ft) long FILETIMEToStdTime( <bug: unknown> ft ) $(BLUE This function is Windows-Only.) Converts a FILETIME struct to the number of hnsecs since midnight, January 1st, 1 A.D. Params ft <bug: unknown> The FILETIME struct to convert. Throws $(REF DateTimeException,std,datetime,date) if the given FILETIME cannot be represented as the return value."
  },
  "phobos/std/datetime/systime/Functions/FILETIMEToSysTime.html": {
    "href": "phobos/std/datetime/systime/Functions/FILETIMEToSysTime.html",
    "title": "Overloads for - FILETIMEToSysTime | Marmos Demo",
    "keywords": "Overloads for - FILETIMEToSysTime Module std.datetime.systime FILETIMEToSysTime(ft, tz) SysTime FILETIMEToSysTime( <bug: unknown> ft, TimeZone tz ) $(BLUE This function is Windows-Only.) Converts a FILETIME struct to a $(LREF SysTime). Params ft <bug: unknown> The FILETIME struct to convert. tz TimeZone The time zone that the $(LREF SysTime) will be in (FILETIMEs are in UTC). Throws $(REF DateTimeException,std,datetime,date) if the given FILETIME will not fit in a $(LREF SysTime)."
  },
  "phobos/std/datetime/systime/Functions/SYSTEMTIMEToSysTime.html": {
    "href": "phobos/std/datetime/systime/Functions/SYSTEMTIMEToSysTime.html",
    "title": "Overloads for - SYSTEMTIMEToSysTime | Marmos Demo",
    "keywords": "Overloads for - SYSTEMTIMEToSysTime Module std.datetime.systime SYSTEMTIMEToSysTime(st, tz) SysTime SYSTEMTIMEToSysTime( <bug: unknown> st, TimeZone tz ) $(BLUE This function is Windows-Only.) Converts a SYSTEMTIME struct to a $(LREF SysTime). Params st <bug: unknown> The SYSTEMTIME struct to convert. tz TimeZone The time zone that the time in the SYSTEMTIME struct is assumed to be (if the SYSTEMTIME was supplied by a Windows system call, the SYSTEMTIME will either be in local time or UTC, depending on the call). Throws $(REF DateTimeException,std,datetime,date) if the given SYSTEMTIME will not fit in a $(LREF SysTime), which is highly unlikely to happen given that SysTime.max is in 29,228 A.D. and the maximum SYSTEMTIME is in 30,827 A.D."
  },
  "phobos/std/datetime/systime/Functions/SysTimeToDosFileTime.html": {
    "href": "phobos/std/datetime/systime/Functions/SysTimeToDosFileTime.html",
    "title": "Overloads for - SysTimeToDosFileTime | Marmos Demo",
    "keywords": "Overloads for - SysTimeToDosFileTime Module std.datetime.systime SysTimeToDosFileTime(sysTime) DosFileTime SysTimeToDosFileTime( SysTime sysTime ) Converts from $(LREF SysTime) to DOS file date/time. Params sysTime SysTime The $(LREF SysTime) to convert. Throws $(REF DateTimeException,std,datetime,date) if the given $(LREF SysTime) cannot be converted to a DosFileTime ."
  },
  "phobos/std/datetime/systime/Functions/SysTimeToFILETIME.html": {
    "href": "phobos/std/datetime/systime/Functions/SysTimeToFILETIME.html",
    "title": "Overloads for - SysTimeToFILETIME | Marmos Demo",
    "keywords": "Overloads for - SysTimeToFILETIME Module std.datetime.systime SysTimeToFILETIME(sysTime) FILETIME SysTimeToFILETIME( SysTime sysTime ) $(BLUE This function is Windows-Only.) Converts a $(LREF SysTime) to a FILETIME struct. FILETIME s are always in UTC. Params sysTime SysTime The $(LREF SysTime) to convert. Throws $(REF DateTimeException,std,datetime,date) if the given $(LREF SysTime) will not fit in a FILETIME ."
  },
  "phobos/std/datetime/systime/Functions/SysTimeToSYSTEMTIME.html": {
    "href": "phobos/std/datetime/systime/Functions/SysTimeToSYSTEMTIME.html",
    "title": "Overloads for - SysTimeToSYSTEMTIME | Marmos Demo",
    "keywords": "Overloads for - SysTimeToSYSTEMTIME Module std.datetime.systime SysTimeToSYSTEMTIME(sysTime) SYSTEMTIME SysTimeToSYSTEMTIME( SysTime sysTime ) $(BLUE This function is Windows-Only.) Converts a $(LREF SysTime) to a SYSTEMTIME struct. The SYSTEMTIME which is returned will be set using the given $(LREF SysTime)'s time zone, so to get the SYSTEMTIME in UTC, set the $(LREF SysTime)'s time zone to UTC. Params sysTime SysTime The $(LREF SysTime) to convert. Throws $(REF DateTimeException,std,datetime,date) if the given $(LREF SysTime) will not fit in a SYSTEMTIME . This will only happen if the $(LREF SysTime)'s date is prior to 1601 A.D."
  },
  "phobos/std/datetime/systime/Functions/clockSupported.html": {
    "href": "phobos/std/datetime/systime/Functions/clockSupported.html",
    "title": "Overloads for - clockSupported | Marmos Demo",
    "keywords": "Overloads for - clockSupported Module std.datetime.systime clockSupported(c) bool clockSupported( ClockType c )"
  },
  "phobos/std/datetime/systime/Functions/fracSecsFromISOString.html": {
    "href": "phobos/std/datetime/systime/Functions/fracSecsFromISOString.html",
    "title": "Overloads for - fracSecsFromISOString | Marmos Demo",
    "keywords": "Overloads for - fracSecsFromISOString Module std.datetime.systime fracSecsFromISOString(isoString) Duration fracSecsFromISOString( S isoString )"
  },
  "phobos/std/datetime/systime/Functions/fracSecsToISOString.html": {
    "href": "phobos/std/datetime/systime/Functions/fracSecsToISOString.html",
    "title": "Overloads for - fracSecsToISOString | Marmos Demo",
    "keywords": "Overloads for - fracSecsToISOString Module std.datetime.systime fracSecsToISOString(hnsecs, prec) string fracSecsToISOString( int hnsecs, int prec ) fracSecsToISOString(writer, hnsecs, prec) void fracSecsToISOString( W writer, int hnsecs, int prec )"
  },
  "phobos/std/datetime/systime/Functions/getUnitsFromHNSecs.html": {
    "href": "phobos/std/datetime/systime/Functions/getUnitsFromHNSecs.html",
    "title": "Overloads for - getUnitsFromHNSecs | Marmos Demo",
    "keywords": "Overloads for - getUnitsFromHNSecs Module std.datetime.systime getUnitsFromHNSecs(hnsecs) long getUnitsFromHNSecs( long hnsecs )"
  },
  "phobos/std/datetime/systime/Functions/initializeTests.html": {
    "href": "phobos/std/datetime/systime/Functions/initializeTests.html",
    "title": "Overloads for - initializeTests | Marmos Demo",
    "keywords": "Overloads for - initializeTests Module std.datetime.systime initializeTests() void initializeTests( )"
  },
  "phobos/std/datetime/systime/Functions/parseRFC822DateTime.html": {
    "href": "phobos/std/datetime/systime/Functions/parseRFC822DateTime.html",
    "title": "Overloads for - parseRFC822DateTime | Marmos Demo",
    "keywords": "Overloads for - parseRFC822DateTime Module std.datetime.systime parseRFC822DateTime(value) SysTime parseRFC822DateTime( <bug: unknown> value ) The given array of char or random-access range of char or ubyte is expected to be in the format specified in $(HTTP tools.ietf.org/html/rfc5322, RFC 5322) section 3.3 with the grammar rule $(I date-time). It is the date-time format commonly used in internet messages such as e-mail and HTTP. The corresponding $(LREF SysTime) will be returned. RFC 822 was the original spec (hence the function's name), whereas RFC 5322 is the current spec. The day of the week is ignored beyond verifying that it's a valid day of the week, as the day of the week can be inferred from the date. It is not checked whether the given day of the week matches the actual day of the week of the given date (though it is technically invalid per the spec if the day of the week doesn't match the actual day of the week of the given date). If the time zone is \"-0000\" (or considered to be equivalent to \"-0000\" by section 4.3 of the spec), a $(REF SimpleTimeZone,std,datetime,timezone) with a utc offset of 0 is used rather than $(REF UTC,std,datetime,timezone), whereas \"+0000\" uses $(REF UTC,std,datetime,timezone). Note that because $(LREF SysTime) does not currently support having a second value of 60 (as is sometimes done for leap seconds), if the date-time value does have a value of 60 for the seconds, it is treated as 59. The one area in which this function violates RFC 5322 is that it accepts \"\\n\" in folding whitespace in the place of \"\\r\\n\" , because the HTTP spec requires it. Throws $(REF DateTimeException,std,datetime,date) if the given string doesn't follow the grammar for a date-time field or if the resulting $(LREF SysTime) is invalid. parseRFC822DateTime(value) SysTime parseRFC822DateTime( R value ) Ditto"
  },
  "phobos/std/datetime/systime/Functions/removeUnitsFromHNSecs.html": {
    "href": "phobos/std/datetime/systime/Functions/removeUnitsFromHNSecs.html",
    "title": "Overloads for - removeUnitsFromHNSecs | Marmos Demo",
    "keywords": "Overloads for - removeUnitsFromHNSecs Module std.datetime.systime removeUnitsFromHNSecs(hnsecs) long removeUnitsFromHNSecs( long hnsecs )"
  },
  "phobos/std/datetime/systime/Functions/stdTimeToFILETIME.html": {
    "href": "phobos/std/datetime/systime/Functions/stdTimeToFILETIME.html",
    "title": "Overloads for - stdTimeToFILETIME | Marmos Demo",
    "keywords": "Overloads for - stdTimeToFILETIME Module std.datetime.systime stdTimeToFILETIME(stdTime) FILETIME stdTimeToFILETIME( long stdTime ) $(BLUE This function is Windows-Only.) Converts a number of hnsecs since midnight, January 1st, 1 A.D. to a FILETIME struct. Params stdTime long The number of hnsecs since midnight, January 1st, 1 A.D. UTC. Throws $(REF DateTimeException,std,datetime,date) if the given value will not fit in a FILETIME ."
  },
  "phobos/std/datetime/systime/Functions/stdTimeToUnixTime.html": {
    "href": "phobos/std/datetime/systime/Functions/stdTimeToUnixTime.html",
    "title": "Overloads for - stdTimeToUnixTime | Marmos Demo",
    "keywords": "Overloads for - stdTimeToUnixTime Module std.datetime.systime stdTimeToUnixTime(stdTime) T stdTimeToUnixTime( long stdTime ) Converts std time (which uses midnight, January 1st, 1 A.D. UTC as its epoch and hnsecs as its units) to unix time (which uses midnight, January 1st, 1970 UTC as its epoch and seconds as its units). The C standard does not specify the representation of time_t, so it is implementation defined. On POSIX systems, unix time is equivalent to time_t, but that's not necessarily true on other systems (e.g. it is not true for the Digital Mars C runtime). So, be careful when using unix time with C functions on non-POSIX systems. \"std time\"'s epoch is based on the Proleptic Gregorian Calendar per ISO 8601 and is what $(LREF SysTime) uses internally. However, holding the time as an integer in hnsecs since that epoch technically isn't actually part of the standard, much as it's based on it, so the name \"std time\" isn't particularly good, but there isn't an official name for it. C# uses \"ticks\" for the same thing, but they aren't actually clock ticks, and the term \"ticks\" $(I is) used for actual clock ticks for $(REF MonoTime, core,time), so it didn't make sense to use the term ticks here. So, for better or worse, std.datetime uses the term \"std time\" for this. By default, the return type is time_t (which is normally an alias for int on 32-bit systems and long on 64-bit systems), but if a different size is required than either int or long can be passed as a template argument to get the desired size. If the return type is int, and the result can't fit in an int, then the closest value that can be held in 32 bits will be used (so int.max if it goes over and int.min if it goes under). However, no attempt is made to deal with integer overflow if the return type is long. Params T <parameter not found> The return type (int or long). It defaults to time_t, which is normally 32 bits on a 32-bit system and 64 bits on a 64-bit system. stdTime long The std time to convert. Returns A signed integer representing the unix time which is equivalent to the given std time. See_Also SysTime.toUnixTime"
  },
  "phobos/std/datetime/systime/Functions/testBadParse822.html": {
    "href": "phobos/std/datetime/systime/Functions/testBadParse822.html",
    "title": "Overloads for - testBadParse822 | Marmos Demo",
    "keywords": "Overloads for - testBadParse822 Module std.datetime.systime testBadParse822(str, line) void testBadParse822( string str, size_t line )"
  },
  "phobos/std/datetime/systime/Functions/testDaysOfLeapYear.html": {
    "href": "phobos/std/datetime/systime/Functions/testDaysOfLeapYear.html",
    "title": "Overloads for - testDaysOfLeapYear | Marmos Demo",
    "keywords": "Overloads for - testDaysOfLeapYear Module std.datetime.systime testDaysOfLeapYear() <bug: unknown> testDaysOfLeapYear( )"
  },
  "phobos/std/datetime/systime/Functions/testDaysOfYear.html": {
    "href": "phobos/std/datetime/systime/Functions/testDaysOfYear.html",
    "title": "Overloads for - testDaysOfYear | Marmos Demo",
    "keywords": "Overloads for - testDaysOfYear Module std.datetime.systime testDaysOfYear() <bug: unknown> testDaysOfYear( )"
  },
  "phobos/std/datetime/systime/Functions/testGregDaysAD.html": {
    "href": "phobos/std/datetime/systime/Functions/testGregDaysAD.html",
    "title": "Overloads for - testGregDaysAD | Marmos Demo",
    "keywords": "Overloads for - testGregDaysAD Module std.datetime.systime testGregDaysAD() <bug: unknown> testGregDaysAD( )"
  },
  "phobos/std/datetime/systime/Functions/testGregDaysBC.html": {
    "href": "phobos/std/datetime/systime/Functions/testGregDaysBC.html",
    "title": "Overloads for - testGregDaysBC | Marmos Demo",
    "keywords": "Overloads for - testGregDaysBC Module std.datetime.systime testGregDaysBC() <bug: unknown> testGregDaysBC( )"
  },
  "phobos/std/datetime/systime/Functions/testMonthDays.html": {
    "href": "phobos/std/datetime/systime/Functions/testMonthDays.html",
    "title": "Overloads for - testMonthDays | Marmos Demo",
    "keywords": "Overloads for - testMonthDays Module std.datetime.systime testMonthDays() <bug: unknown> testMonthDays( )"
  },
  "phobos/std/datetime/systime/Functions/testParse822.html": {
    "href": "phobos/std/datetime/systime/Functions/testParse822.html",
    "title": "Overloads for - testParse822 | Marmos Demo",
    "keywords": "Overloads for - testParse822 Module std.datetime.systime testParse822(str, expected, line) void testParse822( string str, SysTime expected, size_t line )"
  },
  "phobos/std/datetime/systime/Functions/testTODs.html": {
    "href": "phobos/std/datetime/systime/Functions/testTODs.html",
    "title": "Overloads for - testTODs | Marmos Demo",
    "keywords": "Overloads for - testTODs Module std.datetime.systime testTODs() <bug: unknown> testTODs( )"
  },
  "phobos/std/datetime/systime/Functions/testTODsThrown.html": {
    "href": "phobos/std/datetime/systime/Functions/testTODsThrown.html",
    "title": "Overloads for - testTODsThrown | Marmos Demo",
    "keywords": "Overloads for - testTODsThrown Module std.datetime.systime testTODsThrown() <bug: unknown> testTODsThrown( )"
  },
  "phobos/std/datetime/systime/Functions/unixTimeToStdTime.html": {
    "href": "phobos/std/datetime/systime/Functions/unixTimeToStdTime.html",
    "title": "Overloads for - unixTimeToStdTime | Marmos Demo",
    "keywords": "Overloads for - unixTimeToStdTime Module std.datetime.systime unixTimeToStdTime(unixTime) long unixTimeToStdTime( long unixTime ) Converts from unix time (which uses midnight, January 1st, 1970 UTC as its epoch and seconds as its units) to \"std time\" (which uses midnight, January 1st, 1 A.D. UTC and hnsecs as its units). The C standard does not specify the representation of time_t, so it is implementation defined. On POSIX systems, unix time is equivalent to time_t, but that's not necessarily true on other systems (e.g. it is not true for the Digital Mars C runtime). So, be careful when using unix time with C functions on non-POSIX systems. \"std time\"'s epoch is based on the Proleptic Gregorian Calendar per ISO 8601 and is what $(LREF SysTime) uses internally. However, holding the time as an integer in hnsecs since that epoch technically isn't actually part of the standard, much as it's based on it, so the name \"std time\" isn't particularly good, but there isn't an official name for it. C# uses \"ticks\" for the same thing, but they aren't actually clock ticks, and the term \"ticks\" $(I is) used for actual clock ticks for $(REF MonoTime, core,time), so it didn't make sense to use the term ticks here. So, for better or worse, std.datetime uses the term \"std time\" for this. Params unixTime long The unix time to convert. See_Also SysTime.fromUnixTime"
  },
  "phobos/std/datetime/systime/Overview.html": {
    "href": "phobos/std/datetime/systime/Overview.html",
    "title": "Module - std.datetime.systime | Marmos Demo",
    "keywords": "Module - std.datetime.systime About $(DIVC quickindex, $(BOOKTABLE, $(TR $(TH Category) $(TH Functions)) $(TR $(TD Types) $(TD $(LREF Clock) $(LREF SysTime) $(LREF DosFileTime) )) $(TR $(TD Conversion) $(TD $(LREF parseRFC822DateTime) $(LREF DosFileTimeToSysTime) $(LREF FILETIMEToStdTime) $(LREF FILETIMEToSysTime) $(LREF stdTimeToFILETIME) $(LREF stdTimeToUnixTime) $(LREF SYSTEMTIMEToSysTime) $(LREF SysTimeToDosFileTime) $(LREF SysTimeToFILETIME) $(LREF SysTimeToSYSTEMTIME) $(LREF unixTimeToStdTime) )) )) License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP jmdavisprog.com, Jonathan M Davis) Source: $(PHOBOSSRC std/datetime/systime.d) Aliases Name Description DosFileTime Type representing the DOS file date/time format. Classes Name Description Clock Effectively a namespace to make it clear that the methods it contains are getting the time from the system clock. It cannot be instantiated. Structs Name Description DayOfYear GregDay MonthDay SysTime SysTime is the type used to get the current time from the system or doing anything that involves time zones. Unlike $(REF DateTime,std,datetime,date), the time zone is an integral part of SysTime (though for local time applications, time zones can be ignored and it will work, since it defaults to using the local time zone). It holds its internal time in std time (hnsecs since midnight, January 1st, 1 A.D. UTC), so it interfaces well with the system time. Functions Name Description clockSupported DosFileTimeToSysTime Converts from DOS file date/time to $(LREF SysTime). FILETIMEToStdTime $(BLUE This function is Windows-Only.) FILETIMEToSysTime $(BLUE This function is Windows-Only.) fracSecsFromISOString fracSecsToISOString getUnitsFromHNSecs initializeTests parseRFC822DateTime The given array of char or random-access range of char or ubyte is expected to be in the format specified in $(HTTP tools.ietf.org/html/rfc5322, RFC 5322) section 3.3 with the grammar rule $(I date-time). It is the date-time format commonly used in internet messages such as e-mail and HTTP. The corresponding $(LREF SysTime) will be returned. removeUnitsFromHNSecs stdTimeToFILETIME $(BLUE This function is Windows-Only.) stdTimeToUnixTime Converts std time (which uses midnight, January 1st, 1 A.D. UTC as its epoch and hnsecs as its units) to unix time (which uses midnight, January 1st, 1970 UTC as its epoch and seconds as its units). SYSTEMTIMEToSysTime $(BLUE This function is Windows-Only.) SysTimeToDosFileTime Converts from $(LREF SysTime) to DOS file date/time. SysTimeToFILETIME $(BLUE This function is Windows-Only.) SysTimeToSYSTEMTIME $(BLUE This function is Windows-Only.) testBadParse822 testDaysOfLeapYear testDaysOfYear testGregDaysAD testGregDaysBC testMonthDays testParse822 testTODs testTODsThrown unixTimeToStdTime Converts from unix time (which uses midnight, January 1st, 1970 UTC as its epoch and seconds as its units) to \"std time\" (which uses midnight, January 1st, 1 A.D. UTC and hnsecs as its units). Variables Name Description currLocalDiffFromUTC testDatesAD testDatesBC testDateTimesAD testDateTimesBC testDays testFracSecs testHours testMinSecs testSysTimesAD testSysTimesBC testTZs testYearsAD testYearsBC"
  },
  "phobos/std/datetime/systime/Structs/DayOfYear.html": {
    "href": "phobos/std/datetime/systime/Structs/DayOfYear.html",
    "title": "Struct - DayOfYear | Marmos Demo",
    "keywords": "Struct - DayOfYear Module std.datetime.systime public struct DayOfYear { // int day; // MonthDay md; } Variables Name Description day md"
  },
  "phobos/std/datetime/systime/Structs/GregDay.html": {
    "href": "phobos/std/datetime/systime/Structs/GregDay.html",
    "title": "Struct - GregDay | Marmos Demo",
    "keywords": "Struct - GregDay Module std.datetime.systime public struct GregDay { // Date date; // int day; } Variables Name Description date day"
  },
  "phobos/std/datetime/systime/Structs/MonthDay.html": {
    "href": "phobos/std/datetime/systime/Structs/MonthDay.html",
    "title": "Struct - MonthDay | Marmos Demo",
    "keywords": "Struct - MonthDay Module std.datetime.systime public struct MonthDay { // short day; // Month month; } Variables Name Description day month"
  },
  "phobos/std/datetime/systime/Structs/SysTime.html": {
    "href": "phobos/std/datetime/systime/Structs/SysTime.html",
    "title": "Struct - SysTime | Marmos Demo",
    "keywords": "Struct - SysTime Module std.datetime.systime public struct SysTime { // long adjTime( ) ; // void adjTime( long adjTime ) ; // Day of a Gregorian Month. ubyte day( ) ; // Day of a Gregorian Month. void day( int day ) ; // The Xth day of the Gregorian Calendar that this $(LREF SysTime) is on. int dayOfGregorianCal( ) ; // The Xth day of the Gregorian Calendar that this $(LREF SysTime) is on. Setting this property does not affect the time portion of $(LREF SysTime). void dayOfGregorianCal( int days ) ; // Day of the week this $(LREF SysTime) is on. DayOfWeek dayOfWeek( ) ; // Day of the year this $(LREF SysTime) is on. ushort dayOfYear( ) ; // Day of the year. void dayOfYear( int day ) ; // The last day in the month that this $(LREF SysTime) is in. ubyte daysInMonth( ) ; // Returns the difference between the two $(LREF SysTime)s in months. int diffMonths( SysTime rhs ) ; // Returns whether DST is in effect for this $(LREF SysTime). bool dstInEffect( ) ; // $(LREF SysTime) for the last day in the month that this Date is in. The time portion of endOfMonth is always 23:59:59.9999999. SysTime endOfMonth( ) ; // Fractional seconds past the second (i.e. the portion of a $(LREF SysTime) which is less than a second). Duration fracSecs( ) ; // Fractional seconds past the second (i.e. the portion of a $(LREF SysTime) which is less than a second). void fracSecs( Duration fracSecs ) ; // Converts from unix time (i.e. seconds from midnight, January 1st, 1970 in UTC) to a $(LREF SysTime). SysTime fromUnixTime( long unixTime, TimeZone tz ) static; // Hours past midnight. ubyte hour( ) ; // Hours past midnight. void hour( int hour ) ; // Whether the current year is a date in A.D. bool isAD( ) ; // Whether this $(LREF SysTime) is in a leap year. bool isLeapYear( ) ; // The ISO 8601 week of the year that this $(LREF SysTime) is in. ubyte isoWeek( ) ; // The $(HTTP en.wikipedia.org/wiki/Julian_day, Julian day) for this $(LREF SysTime) at the given time. For example, prior to noon, 1996-03-31 would be the Julian day number 2_450_173, so this function returns 2_450_173, while from noon onward, the Julian day number would be 2_450_174, so this function returns 2_450_174. long julianDay( ) ; // Returns the $(LREF SysTime) farthest in the future which is representable by $(LREF SysTime). SysTime max( ) static; // Returns the $(LREF SysTime) farthest in the past which is representable by $(LREF SysTime). SysTime min( ) static; // Minutes past the current hour. ubyte minute( ) ; // Minutes past the current hour. void minute( int minute ) ; // The modified $(HTTP en.wikipedia.org/wiki/Julian_day, Julian day) for any time on this date (since, the modified Julian day changes at midnight). long modJulianDay( ) ; // Month of a Gregorian Year. Month month( ) ; // Month of a Gregorian Year. void month( Month month ) ; // Seconds past the current minute. ubyte second( ) ; // Seconds past the current minute. void second( int second ) ; // The total hnsecs from midnight, January 1st, 1 A.D. UTC. This is the internal representation of $(LREF SysTime). long stdTime( ) ; // The total hnsecs from midnight, January 1st, 1 A.D. UTC. This is the internal representation of $(LREF SysTime). void stdTime( long stdTime ) ; // The current time zone of this $(LREF SysTime). Its internal time is always kept in UTC, so there are no conversion issues between time zones due to DST. Functions which return all or part of the time - such as hours - adjust the time to this $(LREF SysTime)'s time zone before returning. TimeZone timezone( ) ; // The current time zone of this $(LREF SysTime). It's internal time is always kept in UTC, so there are no conversion issues between time zones due to DST. Functions which return all or part of the time - such as hours - adjust the time to this $(LREF SysTime)'s time zone before returning. void timezone( TimeZone timezone ) ; // Returns: A hash of the $(LREF SysTime). size_t toHash( ) ; // Converts this $(LREF SysTime) to a string with the format YYYY-MM-DDTHH:MM:SS.FFFFFFFTZ (where F is fractional seconds and TZ is the time zone). string toISOExtString( int prec ) ; // Converts this $(LREF SysTime) to a string with the format YYYYMMDDTHHMMSS.FFFFFFFTZ (where F is fractional seconds and TZ is time zone). string toISOString( ) ; // Returns a $(LREF SysTime) with the same std time as this one, but with $(REF LocalTime,std,datetime,timezone) as its time zone. SysTime toLocalTime( ) ; // Returns a $(LREF SysTime) with the same std time as this one, but with given time zone as its time zone. SysTime toOtherTZ( TimeZone tz ) ; // Converts this $(LREF SysTime) to a string with the format YYYY-Mon-DD HH:MM:SS.FFFFFFFTZ (where F is fractional seconds and TZ is the time zone). string toSimpleString( ) ; // Converts this $(LREF SysTime) to a string. string toString( ) ; // Returns a `timespec` which represents this $(LREF SysTime). timespec toTimeSpec( ) ; // Returns a `timeval` which represents this $(LREF SysTime). timeval toTimeVal( ) ; // Returns a `tm` which represents this $(LREF SysTime). tm toTM( ) ; // Returns a $(LREF SysTime) with the same std time as this one, but with `UTC` as its time zone. SysTime toUTC( ) ; // Returns what the offset from UTC is for this $(LREF SysTime). It includes the DST offset in effect at that time (if any). Duration utcOffset( ) ; // Year of the Gregorian Calendar. Positive numbers are A.D. Non-positive are B.C. short year( ) ; // Year of the Gregorian Calendar. Positive numbers are A.D. Non-positive are B.C. void year( int year ) ; // Year B.C. of the Gregorian Calendar counting year 0 as 1 B.C. ushort yearBC( ) ; // Year B.C. of the Gregorian Calendar counting year 0 as 1 B.C. void yearBC( int year ) ; } About SysTime is the type used to get the current time from the system or doing anything that involves time zones. Unlike $(REF DateTime,std,datetime,date), the time zone is an integral part of SysTime (though for local time applications, time zones can be ignored and it will work, since it defaults to using the local time zone). It holds its internal time in std time (hnsecs since midnight, January 1st, 1 A.D. UTC), so it interfaces well with the system time. An $(I hnsec) (hecto-nanosecond) is 100 nanoseconds. There are 10,000,000 hnsecs in a second. $(PANEL Unlike $(REF_SHORT DateTime,std,datetime,date), SysTime is not optimized for calendar-based operations, and getting individual units from it such as years or days is going to involve conversions and be less efficient. For calendar-based operations that don't care about time zones, then $(REF_SHORT DateTime,std,datetime,date) would be the type to use. For system time, use SysTime . ) $(P Casting a SysTime to one of the following types will perform a conversion: ) $(REF Date,std,datetime,date) $(REF_SHORT DateTime,std,datetime,date) $(REF_SHORT TimeOfDay,std,datetime,date) $(P To convert a $(REF_SHORT Date,std,datetime,date) or $(REF_SHORT DateTime,std,datetime,date) to a SysTime , use SysTime 's constructor, and pass in the intended time zone with it (or don't pass in a $(REF TimeZone,std,datetime,timezone), and the local time zone will be used). Be aware, however, that converting from a $(REF_SHORT DateTime,std,datetime,date) to a SysTime will not necessarily be 100% accurate due to DST (one hour of the year doesn't exist and another occurs twice). To not risk any conversion errors, keep times as SysTime s. Aside from DST though, there shouldn't be any conversion problems. ) $(PANEL For using time zones other than local time or UTC, use $(REF PosixTimeZone,std,datetime,timezone) on Posix systems (or on Windows, if providing the TZ Database files), and use $(REF WindowsTimeZone,std,datetime,timezone) on Windows systems. The time in SysTime is kept internally in hnsecs from midnight, January 1st, 1 A.D. UTC. Conversion error cannot happen when changing the time zone of a SysTime . $(REF LocalTime,std,datetime,timezone) is the $(REF_SHORT TimeZone,std,datetime,timezone) class which represents the local time, and UTC is the $(REF_SHORT TimeZone,std,datetime,timezone) class which represents UTC. SysTime uses $(REF_SHORT LocalTime,std,datetime,timezone) if no $(REF_SHORT TimeZone,std,datetime,timezone) is provided. For more details on time zones, see the documentation for $(REF_SHORT TimeZone,std,datetime,timezone), $(REF_SHORT PosixTimeZone,std,datetime,timezone), and $(REF_SHORT WindowsTimeZone,std,datetime,timezone). ) $(P SysTime 's range is from approximately 29,000 B.C. to approximately 29,000 A.D. ) See_Also: $(RELATIVE_LINK2 .Clock.currTime, Clock.currTime ) will return the current time as a SysTime . Functions Name Description adjTime day Day of a Gregorian Month. dayOfGregorianCal The Xth day of the Gregorian Calendar that this $(LREF SysTime) is on. dayOfWeek Day of the week this $(LREF SysTime) is on. dayOfYear Day of the year this $(LREF SysTime) is on. daysInMonth The last day in the month that this $(LREF SysTime) is in. diffMonths Returns the difference between the two $(LREF SysTime)s in months. dstInEffect Returns whether DST is in effect for this $(LREF SysTime). endOfMonth $(LREF SysTime) for the last day in the month that this Date is in. The time portion of endOfMonth is always 23:59:59.9999999. fracSecs Fractional seconds past the second (i.e. the portion of a $(LREF SysTime) which is less than a second). fromUnixTime Converts from unix time (i.e. seconds from midnight, January 1st, 1970 in UTC) to a $(LREF SysTime). hour Hours past midnight. isAD Whether the current year is a date in A.D. isLeapYear Whether this $(LREF SysTime) is in a leap year. isoWeek The ISO 8601 week of the year that this $(LREF SysTime) is in. julianDay The $(HTTP en.wikipedia.org/wiki/Julian_day, Julian day) for this $(LREF SysTime) at the given time. For example, prior to noon, 1996-03-31 would be the Julian day number 2_450_173, so this function returns 2_450_173, while from noon onward, the Julian day number would be 2_450_174, so this function returns 2_450_174. max Returns the $(LREF SysTime) farthest in the future which is representable by $(LREF SysTime). min Returns the $(LREF SysTime) farthest in the past which is representable by $(LREF SysTime). minute Minutes past the current hour. modJulianDay The modified $(HTTP en.wikipedia.org/wiki/Julian_day, Julian day) for any time on this date (since, the modified Julian day changes at midnight). month Month of a Gregorian Year. second Seconds past the current minute. stdTime The total hnsecs from midnight, January 1st, 1 A.D. UTC. This is the internal representation of $(LREF SysTime). timezone The current time zone of this $(LREF SysTime). Its internal time is always kept in UTC, so there are no conversion issues between time zones due to DST. Functions which return all or part of the time - such as hours - adjust the time to this $(LREF SysTime)'s time zone before returning. toHash Returns: A hash of the $(LREF SysTime). toISOExtString Converts this $(LREF SysTime) to a string with the format YYYY-MM-DDTHH:MM:SS.FFFFFFFTZ (where F is fractional seconds and TZ is the time zone). toISOString Converts this $(LREF SysTime) to a string with the format YYYYMMDDTHHMMSS.FFFFFFFTZ (where F is fractional seconds and TZ is time zone). toLocalTime Returns a $(LREF SysTime) with the same std time as this one, but with $(REF LocalTime,std,datetime,timezone) as its time zone. toOtherTZ Returns a $(LREF SysTime) with the same std time as this one, but with given time zone as its time zone. toSimpleString Converts this $(LREF SysTime) to a string with the format YYYY-Mon-DD HH:MM:SS.FFFFFFFTZ (where F is fractional seconds and TZ is the time zone). toString Converts this $(LREF SysTime) to a string. toTimeSpec Returns a timespec which represents this $(LREF SysTime). toTimeVal Returns a timeval which represents this $(LREF SysTime). toTM Returns a tm which represents this $(LREF SysTime). toUTC Returns a $(LREF SysTime) with the same std time as this one, but with UTC as its time zone. utcOffset Returns what the offset from UTC is for this $(LREF SysTime). It includes the DST offset in effect at that time (if any). year Year of the Gregorian Calendar. Positive numbers are A.D. Non-positive are B.C. yearBC Year B.C. of the Gregorian Calendar counting year 0 as 1 B.C."
  },
  "phobos/std/datetime/systime/SysTime/Functions/adjTime.html": {
    "href": "phobos/std/datetime/systime/SysTime/Functions/adjTime.html",
    "title": "Overloads for - adjTime | Marmos Demo",
    "keywords": "Overloads for - adjTime Module std.datetime.systime Parent SysTime adjTime() long adjTime( ) adjTime(adjTime) void adjTime( long adjTime )"
  },
  "phobos/std/datetime/systime/SysTime/Functions/day.html": {
    "href": "phobos/std/datetime/systime/SysTime/Functions/day.html",
    "title": "Overloads for - day | Marmos Demo",
    "keywords": "Overloads for - day Module std.datetime.systime Parent SysTime day() ubyte day( ) Day of a Gregorian Month. day(day) void day( int day ) Day of a Gregorian Month. Params day int The day of the month to set this $(LREF SysTime)'s day to. Throws $(REF DateTimeException,std,datetime,date) if the given day is not a valid day of the current month."
  },
  "phobos/std/datetime/systime/SysTime/Functions/dayOfGregorianCal.html": {
    "href": "phobos/std/datetime/systime/SysTime/Functions/dayOfGregorianCal.html",
    "title": "Overloads for - dayOfGregorianCal | Marmos Demo",
    "keywords": "Overloads for - dayOfGregorianCal Module std.datetime.systime Parent SysTime dayOfGregorianCal() int dayOfGregorianCal( ) The Xth day of the Gregorian Calendar that this $(LREF SysTime) is on. dayOfGregorianCal(days) void dayOfGregorianCal( int days ) The Xth day of the Gregorian Calendar that this $(LREF SysTime) is on. Setting this property does not affect the time portion of $(LREF SysTime). Params days int The day of the Gregorian Calendar to set this $(LREF SysTime) to."
  },
  "phobos/std/datetime/systime/SysTime/Functions/dayOfWeek.html": {
    "href": "phobos/std/datetime/systime/SysTime/Functions/dayOfWeek.html",
    "title": "Overloads for - dayOfWeek | Marmos Demo",
    "keywords": "Overloads for - dayOfWeek Module std.datetime.systime Parent SysTime dayOfWeek() DayOfWeek dayOfWeek( ) Day of the week this $(LREF SysTime) is on."
  },
  "phobos/std/datetime/systime/SysTime/Functions/dayOfYear.html": {
    "href": "phobos/std/datetime/systime/SysTime/Functions/dayOfYear.html",
    "title": "Overloads for - dayOfYear | Marmos Demo",
    "keywords": "Overloads for - dayOfYear Module std.datetime.systime Parent SysTime dayOfYear() ushort dayOfYear( ) Day of the year this $(LREF SysTime) is on. dayOfYear(day) void dayOfYear( int day ) Day of the year. Params day int The day of the year to set which day of the year this $(LREF SysTime) is on."
  },
  "phobos/std/datetime/systime/SysTime/Functions/daysInMonth.html": {
    "href": "phobos/std/datetime/systime/SysTime/Functions/daysInMonth.html",
    "title": "Overloads for - daysInMonth | Marmos Demo",
    "keywords": "Overloads for - daysInMonth Module std.datetime.systime Parent SysTime daysInMonth() ubyte daysInMonth( ) The last day in the month that this $(LREF SysTime) is in."
  },
  "phobos/std/datetime/systime/SysTime/Functions/diffMonths.html": {
    "href": "phobos/std/datetime/systime/SysTime/Functions/diffMonths.html",
    "title": "Overloads for - diffMonths | Marmos Demo",
    "keywords": "Overloads for - diffMonths Module std.datetime.systime Parent SysTime diffMonths(rhs) int diffMonths( SysTime rhs ) Returns the difference between the two $(LREF SysTime)s in months. To get the difference in years, subtract the year property of two $(LREF SysTime)s. To get the difference in days or weeks, subtract the $(LREF SysTime)s themselves and use the $(REF Duration, core,time) that results. Because converting between months and smaller units requires a specific date (which $(REF Duration, core,time)s don't have), getting the difference in months requires some math using both the year and month properties, so this is a convenience function for getting the difference in months. Note that the number of days in the months or how far into the month either date is is irrelevant. It is the difference in the month property combined with the difference in years 12. So, for instance, December 31st and January 1st are one month apart just as December 1st and January 31st are one month apart. Params rhs SysTime The $(LREF SysTime) to subtract from this one."
  },
  "phobos/std/datetime/systime/SysTime/Functions/dstInEffect.html": {
    "href": "phobos/std/datetime/systime/SysTime/Functions/dstInEffect.html",
    "title": "Overloads for - dstInEffect | Marmos Demo",
    "keywords": "Overloads for - dstInEffect Module std.datetime.systime Parent SysTime dstInEffect() bool dstInEffect( ) Returns whether DST is in effect for this $(LREF SysTime)."
  },
  "phobos/std/datetime/systime/SysTime/Functions/endOfMonth.html": {
    "href": "phobos/std/datetime/systime/SysTime/Functions/endOfMonth.html",
    "title": "Overloads for - endOfMonth | Marmos Demo",
    "keywords": "Overloads for - endOfMonth Module std.datetime.systime Parent SysTime endOfMonth() SysTime endOfMonth( ) $(LREF SysTime) for the last day in the month that this Date is in. The time portion of endOfMonth is always 23:59:59.9999999."
  },
  "phobos/std/datetime/systime/SysTime/Functions/fracSecs.html": {
    "href": "phobos/std/datetime/systime/SysTime/Functions/fracSecs.html",
    "title": "Overloads for - fracSecs | Marmos Demo",
    "keywords": "Overloads for - fracSecs Module std.datetime.systime Parent SysTime fracSecs() Duration fracSecs( ) Fractional seconds past the second (i.e. the portion of a $(LREF SysTime) which is less than a second). fracSecs(fracSecs) void fracSecs( Duration fracSecs ) Fractional seconds past the second (i.e. the portion of a $(LREF SysTime) which is less than a second). Params fracSecs Duration The duration to set this $(LREF SysTime)'s fractional seconds to. Throws $(REF DateTimeException,std,datetime,date) if the given duration is negative or if it's greater than or equal to one second."
  },
  "phobos/std/datetime/systime/SysTime/Functions/fromUnixTime.html": {
    "href": "phobos/std/datetime/systime/SysTime/Functions/fromUnixTime.html",
    "title": "Overloads for - fromUnixTime | Marmos Demo",
    "keywords": "Overloads for - fromUnixTime Module std.datetime.systime Parent SysTime fromUnixTime(unixTime, tz) SysTime fromUnixTime( long unixTime, TimeZone tz ) static Converts from unix time (i.e. seconds from midnight, January 1st, 1970 in UTC) to a $(LREF SysTime). The C standard does not specify the representation of time_t, so it is implementation defined. On POSIX systems, unix time is equivalent to time_t, but that's not necessarily true on other systems (e.g. it is not true for the Digital Mars C runtime). So, be careful when using unix time with C functions on non-POSIX systems. Params unixTime long Seconds from midnight, January 1st, 1970 in UTC. tz TimeZone The time zone for the SysTime that's returned."
  },
  "phobos/std/datetime/systime/SysTime/Functions/hour.html": {
    "href": "phobos/std/datetime/systime/SysTime/Functions/hour.html",
    "title": "Overloads for - hour | Marmos Demo",
    "keywords": "Overloads for - hour Module std.datetime.systime Parent SysTime hour() ubyte hour( ) Hours past midnight. hour(hour) void hour( int hour ) Hours past midnight. Params hour int The hours to set this $(LREF SysTime)'s hour to. Throws $(REF DateTimeException,std,datetime,date) if the given hour are not a valid hour of the day."
  },
  "phobos/std/datetime/systime/SysTime/Functions/isAD.html": {
    "href": "phobos/std/datetime/systime/SysTime/Functions/isAD.html",
    "title": "Overloads for - isAD | Marmos Demo",
    "keywords": "Overloads for - isAD Module std.datetime.systime Parent SysTime isAD() bool isAD( ) Whether the current year is a date in A.D."
  },
  "phobos/std/datetime/systime/SysTime/Functions/isLeapYear.html": {
    "href": "phobos/std/datetime/systime/SysTime/Functions/isLeapYear.html",
    "title": "Overloads for - isLeapYear | Marmos Demo",
    "keywords": "Overloads for - isLeapYear Module std.datetime.systime Parent SysTime isLeapYear() bool isLeapYear( ) Whether this $(LREF SysTime) is in a leap year."
  },
  "phobos/std/datetime/systime/SysTime/Functions/isoWeek.html": {
    "href": "phobos/std/datetime/systime/SysTime/Functions/isoWeek.html",
    "title": "Overloads for - isoWeek | Marmos Demo",
    "keywords": "Overloads for - isoWeek Module std.datetime.systime Parent SysTime isoWeek() ubyte isoWeek( ) The ISO 8601 week of the year that this $(LREF SysTime) is in. See_Also $(HTTP en.wikipedia.org/wiki/ISO_week_date, ISO Week Date)."
  },
  "phobos/std/datetime/systime/SysTime/Functions/julianDay.html": {
    "href": "phobos/std/datetime/systime/SysTime/Functions/julianDay.html",
    "title": "Overloads for - julianDay | Marmos Demo",
    "keywords": "Overloads for - julianDay Module std.datetime.systime Parent SysTime julianDay() long julianDay( ) The $(HTTP en.wikipedia.org/wiki/Julian_day, Julian day) for this $(LREF SysTime) at the given time. For example, prior to noon, 1996-03-31 would be the Julian day number 2_450_173, so this function returns 2_450_173, while from noon onward, the Julian day number would be 2_450_174, so this function returns 2_450_174."
  },
  "phobos/std/datetime/systime/SysTime/Functions/max.html": {
    "href": "phobos/std/datetime/systime/SysTime/Functions/max.html",
    "title": "Overloads for - max | Marmos Demo",
    "keywords": "Overloads for - max Module std.datetime.systime Parent SysTime max() SysTime max( ) static Returns the $(LREF SysTime) farthest in the future which is representable by $(LREF SysTime). The $(LREF SysTime) which is returned is in UTC."
  },
  "phobos/std/datetime/systime/SysTime/Functions/min.html": {
    "href": "phobos/std/datetime/systime/SysTime/Functions/min.html",
    "title": "Overloads for - min | Marmos Demo",
    "keywords": "Overloads for - min Module std.datetime.systime Parent SysTime min() SysTime min( ) static Returns the $(LREF SysTime) farthest in the past which is representable by $(LREF SysTime). The $(LREF SysTime) which is returned is in UTC."
  },
  "phobos/std/datetime/systime/SysTime/Functions/minute.html": {
    "href": "phobos/std/datetime/systime/SysTime/Functions/minute.html",
    "title": "Overloads for - minute | Marmos Demo",
    "keywords": "Overloads for - minute Module std.datetime.systime Parent SysTime minute() ubyte minute( ) Minutes past the current hour. minute(minute) void minute( int minute ) Minutes past the current hour. Params minute int The minute to set this $(LREF SysTime)'s minute to. Throws $(REF DateTimeException,std,datetime,date) if the given minute are not a valid minute of an hour."
  },
  "phobos/std/datetime/systime/SysTime/Functions/modJulianDay.html": {
    "href": "phobos/std/datetime/systime/SysTime/Functions/modJulianDay.html",
    "title": "Overloads for - modJulianDay | Marmos Demo",
    "keywords": "Overloads for - modJulianDay Module std.datetime.systime Parent SysTime modJulianDay() long modJulianDay( ) The modified $(HTTP en.wikipedia.org/wiki/Julian_day, Julian day) for any time on this date (since, the modified Julian day changes at midnight)."
  },
  "phobos/std/datetime/systime/SysTime/Functions/month.html": {
    "href": "phobos/std/datetime/systime/SysTime/Functions/month.html",
    "title": "Overloads for - month | Marmos Demo",
    "keywords": "Overloads for - month Module std.datetime.systime Parent SysTime month() Month month( ) Month of a Gregorian Year. month(month) void month( Month month ) Month of a Gregorian Year. Params month Month The month to set this $(LREF SysTime)'s month to. Throws $(REF DateTimeException,std,datetime,date) if the given month is not a valid month."
  },
  "phobos/std/datetime/systime/SysTime/Functions/second.html": {
    "href": "phobos/std/datetime/systime/SysTime/Functions/second.html",
    "title": "Overloads for - second | Marmos Demo",
    "keywords": "Overloads for - second Module std.datetime.systime Parent SysTime second() ubyte second( ) Seconds past the current minute. second(second) void second( int second ) Seconds past the current minute. Params second int The second to set this $(LREF SysTime)'s second to. Throws $(REF DateTimeException,std,datetime,date) if the given second are not a valid second of a minute."
  },
  "phobos/std/datetime/systime/SysTime/Functions/stdTime.html": {
    "href": "phobos/std/datetime/systime/SysTime/Functions/stdTime.html",
    "title": "Overloads for - stdTime | Marmos Demo",
    "keywords": "Overloads for - stdTime Module std.datetime.systime Parent SysTime stdTime() long stdTime( ) The total hnsecs from midnight, January 1st, 1 A.D. UTC. This is the internal representation of $(LREF SysTime). stdTime(stdTime) void stdTime( long stdTime ) The total hnsecs from midnight, January 1st, 1 A.D. UTC. This is the internal representation of $(LREF SysTime). Params stdTime long The number of hnsecs since January 1st, 1 A.D. UTC."
  },
  "phobos/std/datetime/systime/SysTime/Functions/timezone.html": {
    "href": "phobos/std/datetime/systime/SysTime/Functions/timezone.html",
    "title": "Overloads for - timezone | Marmos Demo",
    "keywords": "Overloads for - timezone Module std.datetime.systime Parent SysTime timezone() TimeZone timezone( ) The current time zone of this $(LREF SysTime). Its internal time is always kept in UTC, so there are no conversion issues between time zones due to DST. Functions which return all or part of the time - such as hours - adjust the time to this $(LREF SysTime)'s time zone before returning. timezone(timezone) void timezone( TimeZone timezone ) The current time zone of this $(LREF SysTime). It's internal time is always kept in UTC, so there are no conversion issues between time zones due to DST. Functions which return all or part of the time - such as hours - adjust the time to this $(LREF SysTime)'s time zone before returning. Params timezone TimeZone The $(REF TimeZone,std,datetime, timezone) to set this $(LREF SysTime)'s time zone to."
  },
  "phobos/std/datetime/systime/SysTime/Functions/toHash.html": {
    "href": "phobos/std/datetime/systime/SysTime/Functions/toHash.html",
    "title": "Overloads for - toHash | Marmos Demo",
    "keywords": "Overloads for - toHash Module std.datetime.systime Parent SysTime toHash() size_t toHash( ) Returns: A hash of the $(LREF SysTime)."
  },
  "phobos/std/datetime/systime/SysTime/Functions/toISOExtString.html": {
    "href": "phobos/std/datetime/systime/SysTime/Functions/toISOExtString.html",
    "title": "Overloads for - toISOExtString | Marmos Demo",
    "keywords": "Overloads for - toISOExtString Module std.datetime.systime Parent SysTime toISOExtString(prec) string toISOExtString( int prec ) Converts this $(LREF SysTime) to a string with the format YYYY-MM-DDTHH:MM:SS.FFFFFFFTZ (where F is fractional seconds and TZ is the time zone). Default behaviour Note that the number of digits in the fractional seconds varies with the number of fractional seconds. It's a maximum of 7 (which would be hnsecs), but only has as many as are necessary to hold the correct value (so no trailing zeroes), and if there are no fractional seconds, then there is no decimal point. The optional parameter \"prec\" allows to change the default behavior by specifying the precision of the fractional seconds. The accepted values are in the range [-1, 7], where -1 represents the default behavior. If this $(LREF SysTime)'s time zone is $(REF LocalTime,std,datetime,timezone), then TZ is empty. If its time zone is UTC , then it is \"Z\". Otherwise, it is the offset from UTC (e.g. +01:00 or -07:00). Note that the offset from UTC is $(I not) enough to uniquely identify the time zone. Time zone offsets will be in the form +HH:MM or -HH:MM. Params writer <parameter not found> A char accepting $(REF_ALTTEXT output range, isOutputRange, std, range, primitives) prec = An int representing the desired precision. Acceptable values range from -1 to 7, where -1 represents the default behavior. Returns: A string when not using an output range; void otherwise."
  },
  "phobos/std/datetime/systime/SysTime/Functions/toISOString.html": {
    "href": "phobos/std/datetime/systime/SysTime/Functions/toISOString.html",
    "title": "Overloads for - toISOString | Marmos Demo",
    "keywords": "Overloads for - toISOString Module std.datetime.systime Parent SysTime toISOString() string toISOString( ) Converts this $(LREF SysTime) to a string with the format YYYYMMDDTHHMMSS.FFFFFFFTZ (where F is fractional seconds and TZ is time zone). Note that the number of digits in the fractional seconds varies with the number of fractional seconds. It's a maximum of 7 (which would be hnsecs), but only has as many as are necessary to hold the correct value (so no trailing zeroes), and if there are no fractional seconds, then there is no decimal point. If this $(LREF SysTime)'s time zone is $(REF LocalTime,std,datetime,timezone), then TZ is empty. If its time zone is UTC , then it is \"Z\". Otherwise, it is the offset from UTC (e.g. +0100 or -0700). Note that the offset from UTC is $(I not) enough to uniquely identify the time zone. Time zone offsets will be in the form +HHMM or -HHMM. $(RED Warning Previously, toISOString did the same as $(LREF toISOExtString) and generated +HH:MM or -HH:MM for the time zone when it was not $(REF LocalTime,std,datetime,timezone) or $(REF UTC,std,datetime,timezone), which is not in conformance with ISO 8601 for the non-extended string format. This has now been fixed. However, for now, fromISOString will continue to accept the extended format for the time zone so that any code which has been writing out the result of toISOString to read in later will continue to work. The current behavior will be kept until July 2019 at which point, fromISOString will be fixed to be standards compliant.) Params writer <parameter not found> A char accepting $(REF_ALTTEXT output range, isOutputRange, std, range, primitives) Returns: A string when not using an output range; void otherwise."
  },
  "phobos/std/datetime/systime/SysTime/Functions/toLocalTime.html": {
    "href": "phobos/std/datetime/systime/SysTime/Functions/toLocalTime.html",
    "title": "Overloads for - toLocalTime | Marmos Demo",
    "keywords": "Overloads for - toLocalTime Module std.datetime.systime Parent SysTime toLocalTime() SysTime toLocalTime( ) Returns a $(LREF SysTime) with the same std time as this one, but with $(REF LocalTime,std,datetime,timezone) as its time zone."
  },
  "phobos/std/datetime/systime/SysTime/Functions/toOtherTZ.html": {
    "href": "phobos/std/datetime/systime/SysTime/Functions/toOtherTZ.html",
    "title": "Overloads for - toOtherTZ | Marmos Demo",
    "keywords": "Overloads for - toOtherTZ Module std.datetime.systime Parent SysTime toOtherTZ(tz) SysTime toOtherTZ( TimeZone tz ) Returns a $(LREF SysTime) with the same std time as this one, but with given time zone as its time zone."
  },
  "phobos/std/datetime/systime/SysTime/Functions/toSimpleString.html": {
    "href": "phobos/std/datetime/systime/SysTime/Functions/toSimpleString.html",
    "title": "Overloads for - toSimpleString | Marmos Demo",
    "keywords": "Overloads for - toSimpleString Module std.datetime.systime Parent SysTime toSimpleString() string toSimpleString( ) Converts this $(LREF SysTime) to a string with the format YYYY-Mon-DD HH:MM:SS.FFFFFFFTZ (where F is fractional seconds and TZ is the time zone). Note that the number of digits in the fractional seconds varies with the number of fractional seconds. It's a maximum of 7 (which would be hnsecs), but only has as many as are necessary to hold the correct value (so no trailing zeroes), and if there are no fractional seconds, then there is no decimal point. If this $(LREF SysTime)'s time zone is $(REF LocalTime,std,datetime,timezone), then TZ is empty. If its time zone is UTC , then it is \"Z\". Otherwise, it is the offset from UTC (e.g. +01:00 or -07:00). Note that the offset from UTC is $(I not) enough to uniquely identify the time zone. Time zone offsets will be in the form +HH:MM or -HH:MM. Params writer <parameter not found> A char accepting $(REF_ALTTEXT output range, isOutputRange, std, range, primitives) Returns: A string when not using an output range; void otherwise."
  },
  "phobos/std/datetime/systime/SysTime/Functions/toString.html": {
    "href": "phobos/std/datetime/systime/SysTime/Functions/toString.html",
    "title": "Overloads for - toString | Marmos Demo",
    "keywords": "Overloads for - toString Module std.datetime.systime Parent SysTime toString() string toString( ) Converts this $(LREF SysTime) to a string. This function exists to make it easy to convert a $(LREF SysTime) to a string for code that does not care what the exact format is - just that it presents the information in a clear manner. It also makes it easy to simply convert a $(LREF SysTime) to a string when using functions such as to!string , format , or writeln which use toString to convert user-defined types. So, it is unlikely that much code will call toString directly. The format of the string is purposefully unspecified, and code that cares about the format of the string should use toISOString , toISOExtString , toSimpleString , or some other custom formatting function that explicitly generates the format that the code needs. The reason is that the code is then clear about what format it's using, making it less error-prone to maintain the code and interact with other software that consumes the generated strings. It's for this same reason that $(LREF SysTime) has no fromString function, whereas it does have fromISOString , fromISOExtString , and fromSimpleString . The format returned by toString may or may not change in the future. Params writer <parameter not found> A char accepting $(REF_ALTTEXT output range, isOutputRange, std, range, primitives) Returns: A string when not using an output range; void otherwise."
  },
  "phobos/std/datetime/systime/SysTime/Functions/toTM.html": {
    "href": "phobos/std/datetime/systime/SysTime/Functions/toTM.html",
    "title": "Overloads for - toTM | Marmos Demo",
    "keywords": "Overloads for - toTM Module std.datetime.systime Parent SysTime toTM() tm toTM( ) Returns a tm which represents this $(LREF SysTime)."
  },
  "phobos/std/datetime/systime/SysTime/Functions/toTimeSpec.html": {
    "href": "phobos/std/datetime/systime/SysTime/Functions/toTimeSpec.html",
    "title": "Overloads for - toTimeSpec | Marmos Demo",
    "keywords": "Overloads for - toTimeSpec Module std.datetime.systime Parent SysTime toTimeSpec() timespec toTimeSpec( ) Returns a timespec which represents this $(LREF SysTime). $(BLUE This function is Posix-Only.)"
  },
  "phobos/std/datetime/systime/SysTime/Functions/toTimeVal.html": {
    "href": "phobos/std/datetime/systime/SysTime/Functions/toTimeVal.html",
    "title": "Overloads for - toTimeVal | Marmos Demo",
    "keywords": "Overloads for - toTimeVal Module std.datetime.systime Parent SysTime toTimeVal() timeval toTimeVal( ) Returns a timeval which represents this $(LREF SysTime). Note that like all conversions in std.datetime, this is a truncating conversion. If timeval.tv_sec is int, and the result can't fit in an int, then the closest value that can be held in 32 bits will be used for tv_sec . (so int.max if it goes over and int.min if it goes under)."
  },
  "phobos/std/datetime/systime/SysTime/Functions/toUTC.html": {
    "href": "phobos/std/datetime/systime/SysTime/Functions/toUTC.html",
    "title": "Overloads for - toUTC | Marmos Demo",
    "keywords": "Overloads for - toUTC Module std.datetime.systime Parent SysTime toUTC() SysTime toUTC( ) Returns a $(LREF SysTime) with the same std time as this one, but with UTC as its time zone."
  },
  "phobos/std/datetime/systime/SysTime/Functions/utcOffset.html": {
    "href": "phobos/std/datetime/systime/SysTime/Functions/utcOffset.html",
    "title": "Overloads for - utcOffset | Marmos Demo",
    "keywords": "Overloads for - utcOffset Module std.datetime.systime Parent SysTime utcOffset() Duration utcOffset( ) Returns what the offset from UTC is for this $(LREF SysTime). It includes the DST offset in effect at that time (if any)."
  },
  "phobos/std/datetime/systime/SysTime/Functions/year.html": {
    "href": "phobos/std/datetime/systime/SysTime/Functions/year.html",
    "title": "Overloads for - year | Marmos Demo",
    "keywords": "Overloads for - year Module std.datetime.systime Parent SysTime year() short year( ) Year of the Gregorian Calendar. Positive numbers are A.D. Non-positive are B.C. year(year) void year( int year ) Year of the Gregorian Calendar. Positive numbers are A.D. Non-positive are B.C. Params year int The year to set this $(LREF SysTime)'s year to. Throws $(REF DateTimeException,std,datetime,date) if the new year is not a leap year and the resulting date would be on February 29th."
  },
  "phobos/std/datetime/systime/SysTime/Functions/yearBC.html": {
    "href": "phobos/std/datetime/systime/SysTime/Functions/yearBC.html",
    "title": "Overloads for - yearBC | Marmos Demo",
    "keywords": "Overloads for - yearBC Module std.datetime.systime Parent SysTime yearBC() ushort yearBC( ) Year B.C. of the Gregorian Calendar counting year 0 as 1 B.C. Throws $(REF DateTimeException,std,datetime,date) if isAD is true. yearBC(year) void yearBC( int year ) Year B.C. of the Gregorian Calendar counting year 0 as 1 B.C. Params year int The year B.C. to set this $(LREF SysTime)'s year to. Throws $(REF DateTimeException,std,datetime,date) if a non-positive value is given."
  },
  "phobos/std/datetime/timezone/Classes/LocalTime.html": {
    "href": "phobos/std/datetime/timezone/Classes/LocalTime.html",
    "title": "Class - LocalTime | Marmos Demo",
    "keywords": "Class - LocalTime Module std.datetime.timezone public class LocalTime { // Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D. in UTC time (i.e. std time) and returns whether DST is in effect in this time zone at the given point in time. bool dstInEffect( long stdTime ) override; // Typically, the abbreviation (generally 3 or 4 letters) for the time zone when DST $(I is) in effect (e.g. PDT). It is not necessarily unique. string dstName( ) override; // Whether this time zone has Daylight Savings Time at any point in time. Note that for some time zone types it may not have DST for current dates but will still return true for `hasDST` because the time zone did at some point have DST. bool hasDST( ) override; // In principle, this is the name of the local time zone. However, this always returns the empty string. This is because time zones cannot be uniquely identified by the attributes given by the OS (such as the `stdName` and `dstName` ), and neither Posix systems nor Windows systems provide an easy way to get the TZ Database name of the local time zone. string name( ) override; // $(LREF LocalTime) is a singleton class. $(LREF LocalTime) returns its only instance. LocalTime opCall( ) static; // LocalTime singleton( ) static; // Typically, the abbreviation (generally 3 or 4 letters) for the time zone when DST is $(I not) in effect (e.g. PST). It is not necessarily unique. string stdName( ) override; // long tm_gmtoff( long stdTime ) ; // Returns std time using the standard C function calls on Posix systems and the standard Windows system calls on Windows systems to adjust the time to UTC from the appropriate time zone. long tzToUTC( long adjTime ) override; // Returns hnsecs in the local time zone using the standard C function calls on Posix systems and the standard Windows system calls on Windows systems to adjust the time to the appropriate time zone from std time. long utcToTZ( long stdTime ) override; } About A TimeZone which represents the current local time zone on the system running your program. This uses the underlying C calls to adjust the time rather than using specific D code based off of system settings to calculate the time such as $(LREF PosixTimeZone) and $(LREF WindowsTimeZone) do. That also means that it will use whatever the current time zone is on the system, even if the system's time zone changes while the program is running. Functions Name Description dstInEffect Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D. in UTC time (i.e. std time) and returns whether DST is in effect in this time zone at the given point in time. dstName Typically, the abbreviation (generally 3 or 4 letters) for the time zone when DST $(I is) in effect (e.g. PDT). It is not necessarily unique. hasDST Whether this time zone has Daylight Savings Time at any point in time. Note that for some time zone types it may not have DST for current dates but will still return true for hasDST because the time zone did at some point have DST. name In principle, this is the name of the local time zone. However, this always returns the empty string. This is because time zones cannot be uniquely identified by the attributes given by the OS (such as the stdName and dstName ), and neither Posix systems nor Windows systems provide an easy way to get the TZ Database name of the local time zone. opCall $(LREF LocalTime) is a singleton class. $(LREF LocalTime) returns its only instance. singleton stdName Typically, the abbreviation (generally 3 or 4 letters) for the time zone when DST is $(I not) in effect (e.g. PST). It is not necessarily unique. tm_gmtoff tzToUTC Returns std time using the standard C function calls on Posix systems and the standard Windows system calls on Windows systems to adjust the time to UTC from the appropriate time zone. utcToTZ Returns hnsecs in the local time zone using the standard C function calls on Posix systems and the standard Windows system calls on Windows systems to adjust the time to the appropriate time zone from std time."
  },
  "phobos/std/datetime/timezone/Classes/PosixTimeZone.html": {
    "href": "phobos/std/datetime/timezone/Classes/PosixTimeZone.html",
    "title": "Class - PosixTimeZone | Marmos Demo",
    "keywords": "Class - PosixTimeZone Module std.datetime.timezone public class PosixTimeZone { // int calculateLeapSeconds( long stdTime ) ; // Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D. in UTC time (i.e. std time) and returns whether DST is in effect in this time zone at the given point in time. bool dstInEffect( long stdTime ) override; // Returns a list of the names of the time zones installed on the system. <bug: unknown> getInstalledTZNames( string subName, string tzDatabaseDir ) static; // Returns a $(LREF TimeZone) with the give name per the TZ Database. The time zone information is fetched from the TZ Database time zone files in the given directory. PosixTimeZone getTimeZone( string name, string tzDatabaseDir ) static; // Whether this time zone has Daylight Savings Time at any point in time. Note that for some time zone types it may not have DST for current dates but will still return true for `hasDST` because the time zone did at some point have DST. bool hasDST( ) override; // <bug: unknown> tzdataIndex( string tzDir ) static; // Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D. in this time zone's time and converts it to UTC (i.e. std time). long tzToUTC( long adjTime ) override; // Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D. in UTC time (i.e. std time) and converts it to this time zone's time. long utcToTZ( long stdTime ) override; // The default directory where the TZ Database files are stored. It's empty for Windows, since Windows doesn't have them. You can also use the TZDatabaseDir version to pass an arbitrary path at compile-time, rather than hard-coding it here. Android concatenates all time zone data into a single file called tzdata and stores it in the directory below. __enumMember defaultTZDatabaseDir; // static shared bool separate_index; } About Represents a time zone from a TZ Database time zone file. Files from the TZ Database are how Posix systems hold their time zone information. Unfortunately, Windows does not use the TZ Database. To use the TZ Database, use PosixTimeZone (which reads its information from the TZ Database files on disk) on Windows by providing the TZ Database files and telling PosixTimeZone.getTimeZone where the directory holding them is. To get a PosixTimeZone , call PosixTimeZone.getTimeZone (which allows specifying the location the time zone files). Note Unless your system's local time zone deals with leap seconds (which is highly unlikely), then the only way to get a time zone which takes leap seconds into account is to use PosixTimeZone with a time zone whose name starts with \"right/\". Those time zone files do include leap seconds, and PosixTimeZone will take them into account (though posix systems which use a \"right/\" time zone as their local time zone will $(I not) take leap seconds into account even though they're in the file). See_Also $(HTTP www.iana.org/time-zones, Home of the TZ Database files) $(HTTP en.wikipedia.org/wiki/Tz_database, Wikipedia entry on TZ Database) $(HTTP en.wikipedia.org/wiki/List_of_tz_database_time_zones, List of Time Zones) Functions Name Description calculateLeapSeconds dstInEffect Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D. in UTC time (i.e. std time) and returns whether DST is in effect in this time zone at the given point in time. getInstalledTZNames Returns a list of the names of the time zones installed on the system. getTimeZone Returns a $(LREF TimeZone) with the give name per the TZ Database. The time zone information is fetched from the TZ Database time zone files in the given directory. hasDST Whether this time zone has Daylight Savings Time at any point in time. Note that for some time zone types it may not have DST for current dates but will still return true for hasDST because the time zone did at some point have DST. tzdataIndex tzToUTC Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D. in this time zone's time and converts it to UTC (i.e. std time). utcToTZ Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D. in UTC time (i.e. std time) and converts it to this time zone's time. Variables Name Description defaultTZDatabaseDir The default directory where the TZ Database files are stored. It's empty for Windows, since Windows doesn't have them. You can also use the TZDatabaseDir version to pass an arbitrary path at compile-time, rather than hard-coding it here. Android concatenates all time zone data into a single file called tzdata and stores it in the directory below. separate_index"
  },
  "phobos/std/datetime/timezone/Classes/SimpleTimeZone.html": {
    "href": "phobos/std/datetime/timezone/Classes/SimpleTimeZone.html",
    "title": "Class - SimpleTimeZone | Marmos Demo",
    "keywords": "Class - SimpleTimeZone Module std.datetime.timezone public class SimpleTimeZone { // Always returns false. bool dstInEffect( long stdTime ) override; // Always returns false. bool hasDST( ) override; // string toISOExtString( Duration utcOffset ) static; // string toISOString( Duration utcOffset ) static; // Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D. in this time zone's time and converts it to UTC (i.e. std time). long tzToUTC( long adjTime ) override; // The amount of time the offset from UTC is (negative is west of UTC, positive is east). Duration utcOffset( ) ; // Returns utcOffset as a $(REF Duration, core,time). Duration utcOffsetAt( long stdTime ) override; // Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D. in UTC time (i.e. std time) and converts it to this time zone's time. long utcToTZ( long stdTime ) override; } About Represents a time zone with an offset (in minutes, west is negative) from UTC but no DST. It's primarily used as the time zone in the result of $(REF SysTime,std,datetime,systime)'s fromISOString , fromISOExtString , and fromSimpleString . name and dstName are always the empty string since this time zone has no DST, and while it may be meant to represent a time zone which is in the TZ Database, obviously it's not likely to be following the exact rules of any of the time zones in the TZ Database, so it makes no sense to set it. Functions Name Description dstInEffect Always returns false. hasDST Always returns false. toISOExtString toISOString tzToUTC Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D. in this time zone's time and converts it to UTC (i.e. std time). utcOffset The amount of time the offset from UTC is (negative is west of UTC, positive is east). utcOffsetAt Returns utcOffset as a $(REF Duration, core,time). utcToTZ Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D. in UTC time (i.e. std time) and converts it to this time zone's time."
  },
  "phobos/std/datetime/timezone/Classes/TimeZone.html": {
    "href": "phobos/std/datetime/timezone/Classes/TimeZone.html",
    "title": "Class - TimeZone | Marmos Demo",
    "keywords": "Class - TimeZone Module std.datetime.timezone public class TimeZone { // Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D. in UTC time (i.e. std time) and returns whether DST is effect in this time zone at the given point in time. bool dstInEffect( long stdTime ) abstract; // Typically, the abbreviation (generally 3 or 4 letters) for the time zone when DST $(I is) in effect (e.g. PDT). It is not necessarily unique. string dstName( ) ; // Whether this time zone has Daylight Savings Time at any point in time. Note that for some time zone types it may not have DST for current dates but will still return true for `hasDST` because the time zone did at some point have DST. bool hasDST( ) abstract; // The name of the time zone. Exactly how the time zone name is formatted depends on the derived class. In the case of $(LREF PosixTimeZone), it's the TZ Database name, whereas with $(LREF WindowsTimeZone), it's the name that Windows chose to give the registry key for that time zone (typically the name that they give $(LREF stdTime) if the OS is in English). For other time zone types, what it is depends on how they're implemented. string name( ) ; // Typically, the abbreviation (generally 3 or 4 letters) for the time zone when DST is $(I not) in effect (e.g. PST). It is not necessarily unique. string stdName( ) ; // Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D. in this time zone's time and converts it to UTC (i.e. std time). long tzToUTC( long adjTime ) abstract; // Returns what the offset from UTC is at the given std time. It includes the DST offset in effect at that time (if any). Duration utcOffsetAt( long stdTime ) ; // Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D. in UTC time (i.e. std time) and converts it to this time zone's time. long utcToTZ( long stdTime ) abstract; } About Represents a time zone. It is used with $(REF SysTime,std,datetime,systime) to indicate the time zone of a $(REF SysTime,std,datetime,systime). Functions Name Description dstInEffect Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D. in UTC time (i.e. std time) and returns whether DST is effect in this time zone at the given point in time. dstName Typically, the abbreviation (generally 3 or 4 letters) for the time zone when DST $(I is) in effect (e.g. PDT). It is not necessarily unique. hasDST Whether this time zone has Daylight Savings Time at any point in time. Note that for some time zone types it may not have DST for current dates but will still return true for hasDST because the time zone did at some point have DST. name The name of the time zone. Exactly how the time zone name is formatted depends on the derived class. In the case of $(LREF PosixTimeZone), it's the TZ Database name, whereas with $(LREF WindowsTimeZone), it's the name that Windows chose to give the registry key for that time zone (typically the name that they give $(LREF stdTime) if the OS is in English). For other time zone types, what it is depends on how they're implemented. stdName Typically, the abbreviation (generally 3 or 4 letters) for the time zone when DST is $(I not) in effect (e.g. PST). It is not necessarily unique. tzToUTC Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D. in this time zone's time and converts it to UTC (i.e. std time). utcOffsetAt Returns what the offset from UTC is at the given std time. It includes the DST offset in effect at that time (if any). utcToTZ Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D. in UTC time (i.e. std time) and converts it to this time zone's time."
  },
  "phobos/std/datetime/timezone/Classes/UTC.html": {
    "href": "phobos/std/datetime/timezone/Classes/UTC.html",
    "title": "Class - UTC | Marmos Demo",
    "keywords": "Class - UTC Module std.datetime.timezone public class UTC { // Always returns false. bool dstInEffect( long stdTime ) override; // Always returns false. bool hasDST( ) override; // `UTC` is a singleton class. `UTC` returns its only instance. UTC opCall( ) static; // Returns the given hnsecs without changing them at all. long tzToUTC( long adjTime ) override; // Returns a $(REF Duration, core,time) of 0. Duration utcOffsetAt( long stdTime ) override; // Returns the given hnsecs without changing them at all. long utcToTZ( long stdTime ) override; } About A $(LREF TimeZone) which represents UTC. Functions Name Description dstInEffect Always returns false. hasDST Always returns false. opCall UTC is a singleton class. UTC returns its only instance. tzToUTC Returns the given hnsecs without changing them at all. utcOffsetAt Returns a $(REF Duration, core,time) of 0. utcToTZ Returns the given hnsecs without changing them at all."
  },
  "phobos/std/datetime/timezone/Classes/WindowsTimeZone.html": {
    "href": "phobos/std/datetime/timezone/Classes/WindowsTimeZone.html",
    "title": "Class - WindowsTimeZone | Marmos Demo",
    "keywords": "Class - WindowsTimeZone Module std.datetime.timezone public class WindowsTimeZone { // Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D. in UTC time (i.e. std time) and returns whether DST is in effect in this time zone at the given point in time. bool dstInEffect( long stdTime ) override; // Returns a list of the names of the time zones installed on the system. The list returned by WindowsTimeZone contains the Windows TZ names, not the TZ Database names. However, `TimeZone.getinstalledTZNames` will return the TZ Database names which are equivalent to the Windows TZ names. <bug: unknown> getInstalledTZNames( ) static; // Returns a $(LREF TimeZone) with the given name per the Windows time zone names. The time zone information is fetched from the Windows registry. WindowsTimeZone getTimeZone( string name ) static; // Whether this time zone has Daylight Savings Time at any point in time. Note that for some time zone types it may not have DST for current dates but will still return true for `hasDST` because the time zone did at some point have DST. bool hasDST( ) override; // Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D. in this time zone's time and converts it to UTC (i.e. std time). long tzToUTC( long adjTime ) override; // Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D. in UTC time (i.e. std time) and converts it to this time zone's time. long utcToTZ( long stdTime ) override; } About $(BLUE This class is Windows-Only.) Represents a time zone from the Windows registry. Unfortunately, Windows does not use the TZ Database. To use the TZ Database, use $(LREF PosixTimeZone) (which reads its information from the TZ Database files on disk) on Windows by providing the TZ Database files and telling PosixTimeZone.getTimeZone where the directory holding them is. The TZ Database files and Windows' time zone information frequently do not match. Windows has many errors with regards to when DST switches occur (especially for historical dates). Also, the TZ Database files include far more time zones than Windows does. So, for accurate time zone information, use the TZ Database files with $(LREF PosixTimeZone) rather than WindowsTimeZone . However, because WindowsTimeZone uses Windows system calls to deal with the time, it's far more likely to match the behavior of other Windows programs. Be aware of the differences when selecting a method. WindowsTimeZone does not exist on Posix systems. To get a WindowsTimeZone , call WindowsTimeZone.getTimeZone . See_Also $(HTTP www.iana.org/time-zones, Home of the TZ Database files) Functions Name Description dstInEffect Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D. in UTC time (i.e. std time) and returns whether DST is in effect in this time zone at the given point in time. getInstalledTZNames Returns a list of the names of the time zones installed on the system. The list returned by WindowsTimeZone contains the Windows TZ names, not the TZ Database names. However, TimeZone.getinstalledTZNames will return the TZ Database names which are equivalent to the Windows TZ names. getTimeZone Returns a $(LREF TimeZone) with the given name per the Windows time zone names. The time zone information is fetched from the Windows registry. hasDST Whether this time zone has Daylight Savings Time at any point in time. Note that for some time zone types it may not have DST for current dates but will still return true for hasDST because the time zone did at some point have DST. tzToUTC Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D. in this time zone's time and converts it to UTC (i.e. std time). utcToTZ Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D. in UTC time (i.e. std time) and converts it to this time zone's time."
  },
  "phobos/std/datetime/timezone/Functions/clearTZEnvVar.html": {
    "href": "phobos/std/datetime/timezone/Functions/clearTZEnvVar.html",
    "title": "Overloads for - clearTZEnvVar | Marmos Demo",
    "keywords": "Overloads for - clearTZEnvVar Module std.datetime.timezone clearTZEnvVar() void clearTZEnvVar( ) $(BLUE This function is Posix-Only.) Clears the TZ environment variable."
  },
  "phobos/std/datetime/timezone/Functions/parseTZConversions.html": {
    "href": "phobos/std/datetime/timezone/Functions/parseTZConversions.html",
    "title": "Overloads for - parseTZConversions | Marmos Demo",
    "keywords": "Overloads for - parseTZConversions Module std.datetime.timezone parseTZConversions(windowsZonesXMLText) TZConversions parseTZConversions( string windowsZonesXMLText ) ditto"
  },
  "phobos/std/datetime/timezone/Functions/setTZEnvVar.html": {
    "href": "phobos/std/datetime/timezone/Functions/setTZEnvVar.html",
    "title": "Overloads for - setTZEnvVar | Marmos Demo",
    "keywords": "Overloads for - setTZEnvVar Module std.datetime.timezone setTZEnvVar(tzDatabaseName) void setTZEnvVar( string tzDatabaseName ) $(BLUE This function is Posix-Only.) Sets the local time zone on Posix systems with the TZ Database name by setting the TZ environment variable. Unfortunately, there is no way to do it on Windows using the TZ Database name, so this function only exists on Posix systems."
  },
  "phobos/std/datetime/timezone/LocalTime/Functions/dstInEffect.html": {
    "href": "phobos/std/datetime/timezone/LocalTime/Functions/dstInEffect.html",
    "title": "Overloads for - dstInEffect | Marmos Demo",
    "keywords": "Overloads for - dstInEffect Module std.datetime.timezone Parent LocalTime dstInEffect(stdTime) bool dstInEffect( long stdTime ) override Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D. in UTC time (i.e. std time) and returns whether DST is in effect in this time zone at the given point in time. Params stdTime long The UTC time that needs to be checked for DST in this time zone."
  },
  "phobos/std/datetime/timezone/LocalTime/Functions/dstName.html": {
    "href": "phobos/std/datetime/timezone/LocalTime/Functions/dstName.html",
    "title": "Overloads for - dstName | Marmos Demo",
    "keywords": "Overloads for - dstName Module std.datetime.timezone Parent LocalTime dstName() string dstName( ) override Typically, the abbreviation (generally 3 or 4 letters) for the time zone when DST $(I is) in effect (e.g. PDT). It is not necessarily unique. However, on Windows, it may be the unabbreviated name (e.g. Pacific Daylight Time). Regardless, it is not the same as name. This property is overridden because the local time of the system could change while the program is running and we need to determine it dynamically rather than it being fixed like it would be with most time zones."
  },
  "phobos/std/datetime/timezone/LocalTime/Functions/hasDST.html": {
    "href": "phobos/std/datetime/timezone/LocalTime/Functions/hasDST.html",
    "title": "Overloads for - hasDST | Marmos Demo",
    "keywords": "Overloads for - hasDST Module std.datetime.timezone Parent LocalTime hasDST() bool hasDST( ) override Whether this time zone has Daylight Savings Time at any point in time. Note that for some time zone types it may not have DST for current dates but will still return true for hasDST because the time zone did at some point have DST."
  },
  "phobos/std/datetime/timezone/LocalTime/Functions/name.html": {
    "href": "phobos/std/datetime/timezone/LocalTime/Functions/name.html",
    "title": "Overloads for - name | Marmos Demo",
    "keywords": "Overloads for - name Module std.datetime.timezone Parent LocalTime name() string name( ) override In principle, this is the name of the local time zone. However, this always returns the empty string. This is because time zones cannot be uniquely identified by the attributes given by the OS (such as the stdName and dstName ), and neither Posix systems nor Windows systems provide an easy way to get the TZ Database name of the local time zone. See_Also $(HTTP en.wikipedia.org/wiki/Tz_database, Wikipedia entry on TZ Database) $(HTTP en.wikipedia.org/wiki/List_of_tz_database_time_zones, List of Time Zones)"
  },
  "phobos/std/datetime/timezone/LocalTime/Functions/opCall.html": {
    "href": "phobos/std/datetime/timezone/LocalTime/Functions/opCall.html",
    "title": "Overloads for - opCall | Marmos Demo",
    "keywords": "Overloads for - opCall Module std.datetime.timezone Parent LocalTime opCall() LocalTime opCall( ) static $(LREF LocalTime) is a singleton class. $(LREF LocalTime) returns its only instance."
  },
  "phobos/std/datetime/timezone/LocalTime/Functions/singleton.html": {
    "href": "phobos/std/datetime/timezone/LocalTime/Functions/singleton.html",
    "title": "Overloads for - singleton | Marmos Demo",
    "keywords": "Overloads for - singleton Module std.datetime.timezone Parent LocalTime singleton() LocalTime singleton( ) static"
  },
  "phobos/std/datetime/timezone/LocalTime/Functions/stdName.html": {
    "href": "phobos/std/datetime/timezone/LocalTime/Functions/stdName.html",
    "title": "Overloads for - stdName | Marmos Demo",
    "keywords": "Overloads for - stdName Module std.datetime.timezone Parent LocalTime stdName() string stdName( ) override Typically, the abbreviation (generally 3 or 4 letters) for the time zone when DST is $(I not) in effect (e.g. PST). It is not necessarily unique. However, on Windows, it may be the unabbreviated name (e.g. Pacific Standard Time). Regardless, it is not the same as name. This property is overridden because the local time of the system could change while the program is running and we need to determine it dynamically rather than it being fixed like it would be with most time zones."
  },
  "phobos/std/datetime/timezone/LocalTime/Functions/tm_gmtoff.html": {
    "href": "phobos/std/datetime/timezone/LocalTime/Functions/tm_gmtoff.html",
    "title": "Overloads for - tm_gmtoff | Marmos Demo",
    "keywords": "Overloads for - tm_gmtoff Module std.datetime.timezone Parent LocalTime tm_gmtoff(stdTime) long tm_gmtoff( long stdTime )"
  },
  "phobos/std/datetime/timezone/LocalTime/Functions/tzToUTC.html": {
    "href": "phobos/std/datetime/timezone/LocalTime/Functions/tzToUTC.html",
    "title": "Overloads for - tzToUTC | Marmos Demo",
    "keywords": "Overloads for - tzToUTC Module std.datetime.timezone Parent LocalTime tzToUTC(adjTime) long tzToUTC( long adjTime ) override Returns std time using the standard C function calls on Posix systems and the standard Windows system calls on Windows systems to adjust the time to UTC from the appropriate time zone. See_Also TimeZone.tzToUTC Params adjTime long The time in this time zone that needs to be adjusted to UTC time."
  },
  "phobos/std/datetime/timezone/LocalTime/Functions/utcToTZ.html": {
    "href": "phobos/std/datetime/timezone/LocalTime/Functions/utcToTZ.html",
    "title": "Overloads for - utcToTZ | Marmos Demo",
    "keywords": "Overloads for - utcToTZ Module std.datetime.timezone Parent LocalTime utcToTZ(stdTime) long utcToTZ( long stdTime ) override Returns hnsecs in the local time zone using the standard C function calls on Posix systems and the standard Windows system calls on Windows systems to adjust the time to the appropriate time zone from std time. Params stdTime long The UTC time that needs to be adjusted to this time zone's time. See_Also TimeZone.utcToTZ"
  },
  "phobos/std/datetime/timezone/Overview.html": {
    "href": "phobos/std/datetime/timezone/Overview.html",
    "title": "Module - std.datetime.timezone | Marmos Demo",
    "keywords": "Module - std.datetime.timezone About $(SCRIPT inhibitQuickIndex = 1;) $(DIVC quickindex, $(BOOKTABLE, $(TR $(TH Category) $(TH Functions)) $(TR $(TD Time zones) $(TD $(LREF TimeZone) $(LREF UTC) $(LREF LocalTime) $(LREF PosixTimeZone) $(LREF WindowsTimeZone) $(LREF SimpleTimeZone) )) $(TR $(TD Utilities) $(TD $(LREF clearTZEnvVar) $(LREF parseTZConversions) $(LREF setTZEnvVar) $(LREF TZConversions) )) )) License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP jmdavisprog.com, Jonathan M Davis) Source: $(PHOBOSSRC std/datetime/timezone.d) Classes Name Description LocalTime A TimeZone which represents the current local time zone on the system running your program. PosixTimeZone Represents a time zone from a TZ Database time zone file. Files from the TZ Database are how Posix systems hold their time zone information. Unfortunately, Windows does not use the TZ Database. To use the TZ Database, use PosixTimeZone (which reads its information from the TZ Database files on disk) on Windows by providing the TZ Database files and telling PosixTimeZone.getTimeZone where the directory holding them is. SimpleTimeZone Represents a time zone with an offset (in minutes, west is negative) from UTC but no DST. TimeZone Represents a time zone. It is used with $(REF SysTime,std,datetime,systime) to indicate the time zone of a $(REF SysTime,std,datetime,systime). UTC A $(LREF TimeZone) which represents UTC. WindowsTimeZone $(BLUE This class is Windows-Only.) Structs Name Description TZConversions Provides the conversions between the IANA time zone database time zone names (which POSIX systems use) and the time zone names that Windows uses. Functions Name Description clearTZEnvVar $(BLUE This function is Posix-Only.) parseTZConversions ditto setTZEnvVar $(BLUE This function is Posix-Only.)"
  },
  "phobos/std/datetime/timezone/PosixTimeZone/Functions/calculateLeapSeconds.html": {
    "href": "phobos/std/datetime/timezone/PosixTimeZone/Functions/calculateLeapSeconds.html",
    "title": "Overloads for - calculateLeapSeconds | Marmos Demo",
    "keywords": "Overloads for - calculateLeapSeconds Module std.datetime.timezone Parent PosixTimeZone calculateLeapSeconds(stdTime) int calculateLeapSeconds( long stdTime )"
  },
  "phobos/std/datetime/timezone/PosixTimeZone/Functions/dstInEffect.html": {
    "href": "phobos/std/datetime/timezone/PosixTimeZone/Functions/dstInEffect.html",
    "title": "Overloads for - dstInEffect | Marmos Demo",
    "keywords": "Overloads for - dstInEffect Module std.datetime.timezone Parent PosixTimeZone dstInEffect(stdTime) bool dstInEffect( long stdTime ) override Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D. in UTC time (i.e. std time) and returns whether DST is in effect in this time zone at the given point in time. Params stdTime long The UTC time that needs to be checked for DST in this time zone."
  },
  "phobos/std/datetime/timezone/PosixTimeZone/Functions/getInstalledTZNames.html": {
    "href": "phobos/std/datetime/timezone/PosixTimeZone/Functions/getInstalledTZNames.html",
    "title": "Overloads for - getInstalledTZNames | Marmos Demo",
    "keywords": "Overloads for - getInstalledTZNames Module std.datetime.timezone Parent PosixTimeZone getInstalledTZNames(subName, tzDatabaseDir) <bug: unknown> getInstalledTZNames( string subName, string tzDatabaseDir ) static Returns a list of the names of the time zones installed on the system. Providing a sub-name narrows down the list of time zones (which can number in the thousands). For example, passing in \"America\" as the sub-name returns only the time zones which begin with \"America\". Params subName string The first part of the desired time zones. tzDatabaseDir string The directory where the TZ Database files are located. Throws FileException if it fails to read from disk."
  },
  "phobos/std/datetime/timezone/PosixTimeZone/Functions/getTimeZone.html": {
    "href": "phobos/std/datetime/timezone/PosixTimeZone/Functions/getTimeZone.html",
    "title": "Overloads for - getTimeZone | Marmos Demo",
    "keywords": "Overloads for - getTimeZone Module std.datetime.timezone Parent PosixTimeZone getTimeZone(name, tzDatabaseDir) PosixTimeZone getTimeZone( string name, string tzDatabaseDir ) static Returns a $(LREF TimeZone) with the give name per the TZ Database. The time zone information is fetched from the TZ Database time zone files in the given directory. See_Also $(HTTP en.wikipedia.org/wiki/Tz_database, Wikipedia entry on TZ Database) $(HTTP en.wikipedia.org/wiki/List_of_tz_database_time_zones, List of Time Zones) Params name string The TZ Database name of the desired time zone tzDatabaseDir string The directory where the TZ Database files are located. Because these files are not located on Windows systems, provide them and give their location here to use $(LREF PosixTimeZone)s. Throws $(REF DateTimeException,std,datetime,date) if the given time zone could not be found or FileException if the TZ Database file could not be opened."
  },
  "phobos/std/datetime/timezone/PosixTimeZone/Functions/hasDST.html": {
    "href": "phobos/std/datetime/timezone/PosixTimeZone/Functions/hasDST.html",
    "title": "Overloads for - hasDST | Marmos Demo",
    "keywords": "Overloads for - hasDST Module std.datetime.timezone Parent PosixTimeZone hasDST() bool hasDST( ) override Whether this time zone has Daylight Savings Time at any point in time. Note that for some time zone types it may not have DST for current dates but will still return true for hasDST because the time zone did at some point have DST."
  },
  "phobos/std/datetime/timezone/PosixTimeZone/Functions/tzToUTC.html": {
    "href": "phobos/std/datetime/timezone/PosixTimeZone/Functions/tzToUTC.html",
    "title": "Overloads for - tzToUTC | Marmos Demo",
    "keywords": "Overloads for - tzToUTC Module std.datetime.timezone Parent PosixTimeZone tzToUTC(adjTime) long tzToUTC( long adjTime ) override Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D. in this time zone's time and converts it to UTC (i.e. std time). Params adjTime long The time in this time zone that needs to be adjusted to UTC time."
  },
  "phobos/std/datetime/timezone/PosixTimeZone/Functions/tzdataIndex.html": {
    "href": "phobos/std/datetime/timezone/PosixTimeZone/Functions/tzdataIndex.html",
    "title": "Overloads for - tzdataIndex | Marmos Demo",
    "keywords": "Overloads for - tzdataIndex Module std.datetime.timezone Parent PosixTimeZone tzdataIndex(tzDir) <bug: unknown> tzdataIndex( string tzDir ) static"
  },
  "phobos/std/datetime/timezone/PosixTimeZone/Functions/utcToTZ.html": {
    "href": "phobos/std/datetime/timezone/PosixTimeZone/Functions/utcToTZ.html",
    "title": "Overloads for - utcToTZ | Marmos Demo",
    "keywords": "Overloads for - utcToTZ Module std.datetime.timezone Parent PosixTimeZone utcToTZ(stdTime) long utcToTZ( long stdTime ) override Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D. in UTC time (i.e. std time) and converts it to this time zone's time. Params stdTime long The UTC time that needs to be adjusted to this time zone's time."
  },
  "phobos/std/datetime/timezone/SimpleTimeZone/Functions/dstInEffect.html": {
    "href": "phobos/std/datetime/timezone/SimpleTimeZone/Functions/dstInEffect.html",
    "title": "Overloads for - dstInEffect | Marmos Demo",
    "keywords": "Overloads for - dstInEffect Module std.datetime.timezone Parent SimpleTimeZone dstInEffect(stdTime) bool dstInEffect( long stdTime ) override Always returns false."
  },
  "phobos/std/datetime/timezone/SimpleTimeZone/Functions/hasDST.html": {
    "href": "phobos/std/datetime/timezone/SimpleTimeZone/Functions/hasDST.html",
    "title": "Overloads for - hasDST | Marmos Demo",
    "keywords": "Overloads for - hasDST Module std.datetime.timezone Parent SimpleTimeZone hasDST() bool hasDST( ) override Always returns false."
  },
  "phobos/std/datetime/timezone/SimpleTimeZone/Functions/toISOExtString.html": {
    "href": "phobos/std/datetime/timezone/SimpleTimeZone/Functions/toISOExtString.html",
    "title": "Overloads for - toISOExtString | Marmos Demo",
    "keywords": "Overloads for - toISOExtString Module std.datetime.timezone Parent SimpleTimeZone toISOExtString(utcOffset) string toISOExtString( Duration utcOffset ) static"
  },
  "phobos/std/datetime/timezone/SimpleTimeZone/Functions/toISOString.html": {
    "href": "phobos/std/datetime/timezone/SimpleTimeZone/Functions/toISOString.html",
    "title": "Overloads for - toISOString | Marmos Demo",
    "keywords": "Overloads for - toISOString Module std.datetime.timezone Parent SimpleTimeZone toISOString(utcOffset) string toISOString( Duration utcOffset ) static"
  },
  "phobos/std/datetime/timezone/SimpleTimeZone/Functions/tzToUTC.html": {
    "href": "phobos/std/datetime/timezone/SimpleTimeZone/Functions/tzToUTC.html",
    "title": "Overloads for - tzToUTC | Marmos Demo",
    "keywords": "Overloads for - tzToUTC Module std.datetime.timezone Parent SimpleTimeZone tzToUTC(adjTime) long tzToUTC( long adjTime ) override Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D. in this time zone's time and converts it to UTC (i.e. std time). Params adjTime long The time in this time zone that needs to be adjusted to UTC time."
  },
  "phobos/std/datetime/timezone/SimpleTimeZone/Functions/utcOffset.html": {
    "href": "phobos/std/datetime/timezone/SimpleTimeZone/Functions/utcOffset.html",
    "title": "Overloads for - utcOffset | Marmos Demo",
    "keywords": "Overloads for - utcOffset Module std.datetime.timezone Parent SimpleTimeZone utcOffset() Duration utcOffset( ) The amount of time the offset from UTC is (negative is west of UTC, positive is east)."
  },
  "phobos/std/datetime/timezone/SimpleTimeZone/Functions/utcOffsetAt.html": {
    "href": "phobos/std/datetime/timezone/SimpleTimeZone/Functions/utcOffsetAt.html",
    "title": "Overloads for - utcOffsetAt | Marmos Demo",
    "keywords": "Overloads for - utcOffsetAt Module std.datetime.timezone Parent SimpleTimeZone utcOffsetAt(stdTime) Duration utcOffsetAt( long stdTime ) override Returns utcOffset as a $(REF Duration, core,time). Params stdTime long The UTC time for which to get the offset from UTC for this time zone."
  },
  "phobos/std/datetime/timezone/SimpleTimeZone/Functions/utcToTZ.html": {
    "href": "phobos/std/datetime/timezone/SimpleTimeZone/Functions/utcToTZ.html",
    "title": "Overloads for - utcToTZ | Marmos Demo",
    "keywords": "Overloads for - utcToTZ Module std.datetime.timezone Parent SimpleTimeZone utcToTZ(stdTime) long utcToTZ( long stdTime ) override Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D. in UTC time (i.e. std time) and converts it to this time zone's time. Params stdTime long The UTC time that needs to be adjusted to this time zone's time."
  },
  "phobos/std/datetime/timezone/Structs/TZConversions.html": {
    "href": "phobos/std/datetime/timezone/Structs/TZConversions.html",
    "title": "Struct - TZConversions | Marmos Demo",
    "keywords": "Struct - TZConversions Module std.datetime.timezone public struct TZConversions { // The key is the IANA time zone database name, and the value is a list of Windows time zone names which are close (usually only one, but it could be multiple). <bug: unknown> fromWindows; // The key is the Windows time zone name, and the value is a list of IANA TZ database names which are close (currently only ever one, but it allows for multiple in case it's ever necessary). <bug: unknown> toWindows; } About Provides the conversions between the IANA time zone database time zone names (which POSIX systems use) and the time zone names that Windows uses. Windows uses a different set of time zone names than the IANA time zone database does, and how they correspond to one another changes over time (particularly when Microsoft updates Windows). $(HTTP unicode.org/cldr/data/common/supplemental/windowsZones.xml, windowsZones.xml) provides the current conversions (which may or may not match up with what's on a particular Windows box depending on how up-to-date it is), and parseTZConversions reads in those conversions from windowsZones.xml so that a D program can use those conversions. However, it should be noted that the time zone information on Windows is frequently less accurate than that in the IANA time zone database, and if someone really wants accurate time zone information, they should use the IANA time zone database files with $(LREF PosixTimeZone) on Windows rather than $(LREF WindowsTimeZone), whereas $(LREF WindowsTimeZone) makes more sense when trying to match what Windows will think the time is in a specific time zone. Also, the IANA time zone database has a lot more time zones than Windows does. Params windowsZonesXMLText The text from $(HTTP unicode.org/cldr/data/common/supplemental/windowsZones.xml, windowsZones.xml) Throws Exception if there is an error while parsing the given XML. -------------------- // Parse the conversions from a local file. auto text = std.file.readText(\"path/to/windowsZones.xml\"); auto conversions = parseTZConversions(text); // Alternatively, grab the XML file from the web at runtime // and parse it so that it's guaranteed to be up-to-date, though // that has the downside that the code needs to worry about the // site being down or unicode.org changing the URL. auto url = \"http://unicode.org/cldr/data/common/supplemental/windowsZones.xml\"; auto conversions2 = parseTZConversions(std.net.curl.get(url)); -------------------- Variables Name Description fromWindows The key is the IANA time zone database name, and the value is a list of Windows time zone names which are close (usually only one, but it could be multiple). toWindows The key is the Windows time zone name, and the value is a list of IANA TZ database names which are close (currently only ever one, but it allows for multiple in case it's ever necessary)."
  },
  "phobos/std/datetime/timezone/TimeZone/Functions/dstInEffect.html": {
    "href": "phobos/std/datetime/timezone/TimeZone/Functions/dstInEffect.html",
    "title": "Overloads for - dstInEffect | Marmos Demo",
    "keywords": "Overloads for - dstInEffect Module std.datetime.timezone Parent TimeZone dstInEffect(stdTime) bool dstInEffect( long stdTime ) abstract Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D. in UTC time (i.e. std time) and returns whether DST is effect in this time zone at the given point in time. Params stdTime long The UTC time that needs to be checked for DST in this time zone."
  },
  "phobos/std/datetime/timezone/TimeZone/Functions/dstName.html": {
    "href": "phobos/std/datetime/timezone/TimeZone/Functions/dstName.html",
    "title": "Overloads for - dstName | Marmos Demo",
    "keywords": "Overloads for - dstName Module std.datetime.timezone Parent TimeZone dstName() string dstName( ) Typically, the abbreviation (generally 3 or 4 letters) for the time zone when DST $(I is) in effect (e.g. PDT). It is not necessarily unique. However, on Windows, it may be the unabbreviated name (e.g. Pacific Daylight Time). Regardless, it is not the same as name."
  },
  "phobos/std/datetime/timezone/TimeZone/Functions/hasDST.html": {
    "href": "phobos/std/datetime/timezone/TimeZone/Functions/hasDST.html",
    "title": "Overloads for - hasDST | Marmos Demo",
    "keywords": "Overloads for - hasDST Module std.datetime.timezone Parent TimeZone hasDST() bool hasDST( ) abstract Whether this time zone has Daylight Savings Time at any point in time. Note that for some time zone types it may not have DST for current dates but will still return true for hasDST because the time zone did at some point have DST."
  },
  "phobos/std/datetime/timezone/TimeZone/Functions/name.html": {
    "href": "phobos/std/datetime/timezone/TimeZone/Functions/name.html",
    "title": "Overloads for - name | Marmos Demo",
    "keywords": "Overloads for - name Module std.datetime.timezone Parent TimeZone name() string name( ) The name of the time zone. Exactly how the time zone name is formatted depends on the derived class. In the case of $(LREF PosixTimeZone), it's the TZ Database name, whereas with $(LREF WindowsTimeZone), it's the name that Windows chose to give the registry key for that time zone (typically the name that they give $(LREF stdTime) if the OS is in English). For other time zone types, what it is depends on how they're implemented. See_Also $(HTTP en.wikipedia.org/wiki/Tz_database, Wikipedia entry on TZ Database) $(HTTP en.wikipedia.org/wiki/List_of_tz_database_time_zones, List of Time Zones)"
  },
  "phobos/std/datetime/timezone/TimeZone/Functions/stdName.html": {
    "href": "phobos/std/datetime/timezone/TimeZone/Functions/stdName.html",
    "title": "Overloads for - stdName | Marmos Demo",
    "keywords": "Overloads for - stdName Module std.datetime.timezone Parent TimeZone stdName() string stdName( ) Typically, the abbreviation (generally 3 or 4 letters) for the time zone when DST is $(I not) in effect (e.g. PST). It is not necessarily unique. However, on Windows, it may be the unabbreviated name (e.g. Pacific Standard Time). Regardless, it is not the same as name."
  },
  "phobos/std/datetime/timezone/TimeZone/Functions/tzToUTC.html": {
    "href": "phobos/std/datetime/timezone/TimeZone/Functions/tzToUTC.html",
    "title": "Overloads for - tzToUTC | Marmos Demo",
    "keywords": "Overloads for - tzToUTC Module std.datetime.timezone Parent TimeZone tzToUTC(adjTime) long tzToUTC( long adjTime ) abstract Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D. in this time zone's time and converts it to UTC (i.e. std time). Params adjTime long The time in this time zone that needs to be adjusted to UTC time."
  },
  "phobos/std/datetime/timezone/TimeZone/Functions/utcOffsetAt.html": {
    "href": "phobos/std/datetime/timezone/TimeZone/Functions/utcOffsetAt.html",
    "title": "Overloads for - utcOffsetAt | Marmos Demo",
    "keywords": "Overloads for - utcOffsetAt Module std.datetime.timezone Parent TimeZone utcOffsetAt(stdTime) Duration utcOffsetAt( long stdTime ) Returns what the offset from UTC is at the given std time. It includes the DST offset in effect at that time (if any). Params stdTime long The UTC time for which to get the offset from UTC for this time zone."
  },
  "phobos/std/datetime/timezone/TimeZone/Functions/utcToTZ.html": {
    "href": "phobos/std/datetime/timezone/TimeZone/Functions/utcToTZ.html",
    "title": "Overloads for - utcToTZ | Marmos Demo",
    "keywords": "Overloads for - utcToTZ Module std.datetime.timezone Parent TimeZone utcToTZ(stdTime) long utcToTZ( long stdTime ) abstract Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D. in UTC time (i.e. std time) and converts it to this time zone's time. Params stdTime long The UTC time that needs to be adjusted to this time zone's time."
  },
  "phobos/std/datetime/timezone/UTC/Functions/dstInEffect.html": {
    "href": "phobos/std/datetime/timezone/UTC/Functions/dstInEffect.html",
    "title": "Overloads for - dstInEffect | Marmos Demo",
    "keywords": "Overloads for - dstInEffect Module std.datetime.timezone Parent UTC dstInEffect(stdTime) bool dstInEffect( long stdTime ) override Always returns false."
  },
  "phobos/std/datetime/timezone/UTC/Functions/hasDST.html": {
    "href": "phobos/std/datetime/timezone/UTC/Functions/hasDST.html",
    "title": "Overloads for - hasDST | Marmos Demo",
    "keywords": "Overloads for - hasDST Module std.datetime.timezone Parent UTC hasDST() bool hasDST( ) override Always returns false."
  },
  "phobos/std/datetime/timezone/UTC/Functions/opCall.html": {
    "href": "phobos/std/datetime/timezone/UTC/Functions/opCall.html",
    "title": "Overloads for - opCall | Marmos Demo",
    "keywords": "Overloads for - opCall Module std.datetime.timezone Parent UTC opCall() UTC opCall( ) static UTC is a singleton class. UTC returns its only instance."
  },
  "phobos/std/datetime/timezone/UTC/Functions/tzToUTC.html": {
    "href": "phobos/std/datetime/timezone/UTC/Functions/tzToUTC.html",
    "title": "Overloads for - tzToUTC | Marmos Demo",
    "keywords": "Overloads for - tzToUTC Module std.datetime.timezone Parent UTC tzToUTC(adjTime) long tzToUTC( long adjTime ) override Returns the given hnsecs without changing them at all. See_Also TimeZone.tzToUTC Params adjTime long The time in this time zone that needs to be adjusted to UTC time."
  },
  "phobos/std/datetime/timezone/UTC/Functions/utcOffsetAt.html": {
    "href": "phobos/std/datetime/timezone/UTC/Functions/utcOffsetAt.html",
    "title": "Overloads for - utcOffsetAt | Marmos Demo",
    "keywords": "Overloads for - utcOffsetAt Module std.datetime.timezone Parent UTC utcOffsetAt(stdTime) Duration utcOffsetAt( long stdTime ) override Returns a $(REF Duration, core,time) of 0. Params stdTime long The UTC time for which to get the offset from UTC for this time zone."
  },
  "phobos/std/datetime/timezone/UTC/Functions/utcToTZ.html": {
    "href": "phobos/std/datetime/timezone/UTC/Functions/utcToTZ.html",
    "title": "Overloads for - utcToTZ | Marmos Demo",
    "keywords": "Overloads for - utcToTZ Module std.datetime.timezone Parent UTC utcToTZ(stdTime) long utcToTZ( long stdTime ) override Returns the given hnsecs without changing them at all. Params stdTime long The UTC time that needs to be adjusted to this time zone's time. See_Also TimeZone.utcToTZ"
  },
  "phobos/std/datetime/timezone/WindowsTimeZone/Functions/dstInEffect.html": {
    "href": "phobos/std/datetime/timezone/WindowsTimeZone/Functions/dstInEffect.html",
    "title": "Overloads for - dstInEffect | Marmos Demo",
    "keywords": "Overloads for - dstInEffect Module std.datetime.timezone Parent WindowsTimeZone dstInEffect(stdTime) bool dstInEffect( long stdTime ) override Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D. in UTC time (i.e. std time) and returns whether DST is in effect in this time zone at the given point in time. Params stdTime long The UTC time that needs to be checked for DST in this time zone."
  },
  "phobos/std/datetime/timezone/WindowsTimeZone/Functions/getInstalledTZNames.html": {
    "href": "phobos/std/datetime/timezone/WindowsTimeZone/Functions/getInstalledTZNames.html",
    "title": "Overloads for - getInstalledTZNames | Marmos Demo",
    "keywords": "Overloads for - getInstalledTZNames Module std.datetime.timezone Parent WindowsTimeZone getInstalledTZNames() <bug: unknown> getInstalledTZNames( ) static Returns a list of the names of the time zones installed on the system. The list returned by WindowsTimeZone contains the Windows TZ names, not the TZ Database names. However, TimeZone.getinstalledTZNames will return the TZ Database names which are equivalent to the Windows TZ names."
  },
  "phobos/std/datetime/timezone/WindowsTimeZone/Functions/getTimeZone.html": {
    "href": "phobos/std/datetime/timezone/WindowsTimeZone/Functions/getTimeZone.html",
    "title": "Overloads for - getTimeZone | Marmos Demo",
    "keywords": "Overloads for - getTimeZone Module std.datetime.timezone Parent WindowsTimeZone getTimeZone(name) WindowsTimeZone getTimeZone( string name ) static Returns a $(LREF TimeZone) with the given name per the Windows time zone names. The time zone information is fetched from the Windows registry. See_Also $(HTTP en.wikipedia.org/wiki/Tz_database, Wikipedia entry on TZ Database) $(HTTP en.wikipedia.org/wiki/List_of_tz_database_time_zones, List of Time Zones) Params name string The TZ Database name of the desired time zone. Throws $(REF DateTimeException,std,datetime,date) if the given time zone could not be found. Example -------------------- auto tz = WindowsTimeZone.getTimeZone(\"Pacific Standard Time\"); --------------------"
  },
  "phobos/std/datetime/timezone/WindowsTimeZone/Functions/hasDST.html": {
    "href": "phobos/std/datetime/timezone/WindowsTimeZone/Functions/hasDST.html",
    "title": "Overloads for - hasDST | Marmos Demo",
    "keywords": "Overloads for - hasDST Module std.datetime.timezone Parent WindowsTimeZone hasDST() bool hasDST( ) override Whether this time zone has Daylight Savings Time at any point in time. Note that for some time zone types it may not have DST for current dates but will still return true for hasDST because the time zone did at some point have DST."
  },
  "phobos/std/datetime/timezone/WindowsTimeZone/Functions/tzToUTC.html": {
    "href": "phobos/std/datetime/timezone/WindowsTimeZone/Functions/tzToUTC.html",
    "title": "Overloads for - tzToUTC | Marmos Demo",
    "keywords": "Overloads for - tzToUTC Module std.datetime.timezone Parent WindowsTimeZone tzToUTC(adjTime) long tzToUTC( long adjTime ) override Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D. in this time zone's time and converts it to UTC (i.e. std time). Params adjTime long The time in this time zone that needs to be adjusted to UTC time."
  },
  "phobos/std/datetime/timezone/WindowsTimeZone/Functions/utcToTZ.html": {
    "href": "phobos/std/datetime/timezone/WindowsTimeZone/Functions/utcToTZ.html",
    "title": "Overloads for - utcToTZ | Marmos Demo",
    "keywords": "Overloads for - utcToTZ Module std.datetime.timezone Parent WindowsTimeZone utcToTZ(stdTime) long utcToTZ( long stdTime ) override Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D. in UTC time (i.e. std time) and converts it to this time zone's time. Params stdTime long The UTC time that needs to be adjusted to this time zone's time."
  },
  "phobos/std/demangle/Functions/demangle.html": {
    "href": "phobos/std/demangle/Functions/demangle.html",
    "title": "Overloads for - demangle | Marmos Demo",
    "keywords": "Overloads for - demangle Module std.demangle demangle(name) string demangle( string name ) Demangle D mangled names. Params name string the mangled name Returns A string . If it is not a D mangled name, it returns its argument name."
  },
  "phobos/std/demangle/Overview.html": {
    "href": "phobos/std/demangle/Overview.html",
    "title": "Module - std.demangle | Marmos Demo",
    "keywords": "Module - std.demangle About Demangle D mangled names. Copyright: Copyright The D Language Foundation 2000 - 2009. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: \\((HTTP digitalmars.com, Walter Bright), Thomas K\\)(UUML)hne, Frits van Bommel Source: $(PHOBOSSRC std/demangle.d) $(SCRIPT inhibitQuickIndex = 1;) Functions Name Description demangle Demangle D mangled names."
  },
  "phobos/std/digest/Classes/WrapperDigest.html": {
    "href": "phobos/std/digest/Classes/WrapperDigest.html",
    "title": "Class - WrapperDigest | Marmos Demo",
    "keywords": "Class - WrapperDigest Module std.digest public class WrapperDigest { // The finish function returns the hash value. It takes an optional buffer to copy the data into. If a buffer is passed, it must have a length at least $(LREF length) bytes. <bug: unknown> finish( <bug: unknown> buf ) ; // ditto <bug: unknown> finish( ) ; // This is the length in bytes of the hash value which is returned by $(LREF finish). It's also the required size of a buffer passed to $(LREF finish). size_t length( ) ; // Works like `finish` but does not reset the internal state, so it's possible to continue putting data into this WrapperDigest after a call to peek. <bug: unknown> peek( <bug: unknown> buf ) ; // ditto <bug: unknown> peek( ) ; // Use this to feed the digest with data. Also implements the $(REF isOutputRange, std,range,primitives) interface for `ubyte` and `const(ubyte)[]` . void put( <bug: unknown> data ) ; // Resets the internal state of the digest. Note: $(LREF finish) calls this internally, so it's not necessary to call `reset` manually after a call to $(LREF finish). void reset( ) ; } About Wraps a template API hash struct into a Digest interface. Modules providing digest implementations will usually provide an alias for this template (e.g. MD5Digest, SHA1Digest, ...). Functions Name Description finish The finish function returns the hash value. It takes an optional buffer to copy the data into. If a buffer is passed, it must have a length at least $(LREF length) bytes. length This is the length in bytes of the hash value which is returned by $(LREF finish). It's also the required size of a buffer passed to $(LREF finish). peek Works like finish but does not reset the internal state, so it's possible to continue putting data into this WrapperDigest after a call to peek. put Use this to feed the digest with data. Also implements the $(REF isOutputRange, std,range,primitives) interface for ubyte and const(ubyte)[] . reset Resets the internal state of the digest. Note: $(LREF finish) calls this internally, so it's not necessary to call reset manually after a call to $(LREF finish)."
  },
  "phobos/std/digest/ExampleDigest/Functions/finish.html": {
    "href": "phobos/std/digest/ExampleDigest/Functions/finish.html",
    "title": "Overloads for - finish | Marmos Demo",
    "keywords": "Overloads for - finish Module std.digest Parent ExampleDigest finish() <bug: unknown> finish( ) The finish function returns the final hash sum and resets the Digest. Note The actual type returned by finish depends on the digest implementation. ubyte[16] is just used as an example. It is guaranteed that the type is a static array of ubytes. $(UL $(LI Use $(LREF DigestType) to obtain the actual return type.) $(LI Use $(LREF digestLength) to obtain the length of the ubyte array.) )"
  },
  "phobos/std/digest/ExampleDigest/Functions/put.html": {
    "href": "phobos/std/digest/ExampleDigest/Functions/put.html",
    "title": "Overloads for - put | Marmos Demo",
    "keywords": "Overloads for - put Module std.digest Parent ExampleDigest put(data) void put( <bug: unknown> data ) Use this to feed the digest with data. Also implements the $(REF isOutputRange, std,range,primitives) interface for ubyte and const(ubyte)[] . The following usages of put must work for any type which passes $(LREF isDigest): Example: ---- ExampleDigest dig; dig.put(cast(ubyte) 0); //single ubyte dig.put(cast(ubyte) 0, cast(ubyte) 0); //variadic ubyte[10] buf; dig.put(buf); //buffer ----"
  },
  "phobos/std/digest/ExampleDigest/Functions/start.html": {
    "href": "phobos/std/digest/ExampleDigest/Functions/start.html",
    "title": "Overloads for - start | Marmos Demo",
    "keywords": "Overloads for - start Module std.digest Parent ExampleDigest start() void start( ) This function is used to (re)initialize the digest. It must be called before using the digest and it also works as a 'reset' function if the digest has already processed data."
  },
  "phobos/std/digest/Functions/asArray.html": {
    "href": "phobos/std/digest/Functions/asArray.html",
    "title": "Overloads for - asArray | Marmos Demo",
    "keywords": "Overloads for - asArray Module std.digest asArray(source, errorMsg) <bug: unknown> asArray( <bug: unknown> source, string errorMsg )"
  },
  "phobos/std/digest/Functions/digest.html": {
    "href": "phobos/std/digest/Functions/digest.html",
    "title": "Overloads for - digest | Marmos Demo",
    "keywords": "Overloads for - digest Module std.digest digest(range) DigestType!(Hash) digest( Range range ) This is a convenience function to calculate a hash using the template API. Every digest passing the $(LREF isDigest) test can be used with this function. Params range= an InputRange with ElementType ubyte , ubyte[] or ubyte[num] digest(data) DigestType!(Hash) digest( T data ) This overload of the digest function handles arrays. Params data= one or more arrays of any type"
  },
  "phobos/std/digest/Functions/hexDigest.html": {
    "href": "phobos/std/digest/Functions/hexDigest.html",
    "title": "Overloads for - hexDigest | Marmos Demo",
    "keywords": "Overloads for - hexDigest Module std.digest hexDigest(range) <bug: unknown> hexDigest( Range range ) This is a convenience function similar to $(LREF digest), but it returns the string representation of the hash. Every digest passing the $(LREF isDigest) test can be used with this function. Params order= the order in which the bytes are processed (see $(LREF toHexString)) range= an InputRange with ElementType ubyte , ubyte[] or ubyte[num] hexDigest(data) <bug: unknown> hexDigest( T data ) This overload of the hexDigest function handles arrays. Params order= the order in which the bytes are processed (see $(LREF toHexString)) data= one or more arrays of any type"
  },
  "phobos/std/digest/Functions/makeDigest.html": {
    "href": "phobos/std/digest/Functions/makeDigest.html",
    "title": "Overloads for - makeDigest | Marmos Demo",
    "keywords": "Overloads for - makeDigest Module std.digest makeDigest() Hash makeDigest( ) This is a convenience function which returns an initialized digest, so it's not necessary to call start manually."
  },
  "phobos/std/digest/Functions/secureEqual.html": {
    "href": "phobos/std/digest/Functions/secureEqual.html",
    "title": "Overloads for - secureEqual | Marmos Demo",
    "keywords": "Overloads for - secureEqual Module std.digest secureEqual(r1, r2) bool secureEqual( R1 r1, R2 r2 ) Securely compares two digest representations while protecting against timing attacks. Do not use == to compare digest representations. The attack happens as follows $(OL $(LI An attacker wants to send harmful data to your server, which requires a integrity HMAC SHA1 token signed with a secret.) $(LI The length of the token is known to be 40 characters long due to its format, so the attacker first sends \"0000000000000000000000000000000000000000\" , then \"1000000000000000000000000000000000000000\" , and so on.) $(LI The given HMAC token is compared with the expected token using the == string comparison, which returns false as soon as the first wrong element is found. If a wrong element is found, then a rejection is sent back to the sender.) $(LI Eventually, the attacker is able to determine the first character in the correct token because the sever takes slightly longer to return a rejection. This is due to the comparison moving on to second item in the two arrays, seeing they are different, and then sending the rejection.) $(LI It may seem like too small of a difference in time for the attacker to notice, but security researchers have shown that differences as small as $(LINK2 http://www.cs.rice.edu/~dwallach/pub/crosby-timing2009.pdf, 20µs can be reliably distinguished) even with network inconsistencies.) $(LI Repeat the process for each character until the attacker has the whole correct token and the server accepts the harmful data. This can be done in a week with the attacker pacing the attack to 10 requests per second with only one client.) ) This function defends against this attack by always comparing every single item in the array if the two arrays are the same length. Therefore, this function is always $(BIGOH n) for ranges of the same length. This attack can also be mitigated via rate limiting and banning IPs which have too many rejected requests. However, this does not completely solve the problem, as the attacker could be in control of a bot net. To fully defend against the timing attack, rate limiting, banning IPs, and using this function should be used together. Params r1 R1 A digest representation r2 R2 A digest representation r2 = A digest representation Returns: true if both representations are equal, false otherwise See_Also: $(LINK2 https://en.wikipedia.org/wiki/Timing_attack, The Wikipedia article on timing attacks)."
  },
  "phobos/std/digest/Functions/toHexString.html": {
    "href": "phobos/std/digest/Functions/toHexString.html",
    "title": "Overloads for - toHexString | Marmos Demo",
    "keywords": "Overloads for - toHexString Module std.digest toHexString(digest) <bug: unknown> toHexString( <bug: unknown> digest ) Used to convert a hash value (a static or dynamic array of ubytes) to a string. Can be used with the OOP and with the template API. The additional order parameter can be used to specify the order of the input data. By default the data is processed in increasing order, starting at index 0. To process it in the opposite order, pass Order.decreasing as a parameter. The additional letterCase parameter can be used to specify the case of the output data. By default the output is in upper case. To change it to the lower case pass LetterCase.lower as a parameter. Note The function overloads returning a string allocate their return values using the GC. The versions returning static arrays use pass-by-value for the return value, effectively avoiding dynamic allocation. toHexString(digest) <bug: unknown> toHexString( <bug: unknown> digest ) ditto toHexString(digest) string toHexString( <bug: unknown> digest ) ditto toHexString(digest) string toHexString( <bug: unknown> digest ) ditto"
  },
  "phobos/std/digest/Functions/toHexStringImpl.html": {
    "href": "phobos/std/digest/Functions/toHexStringImpl.html",
    "title": "Overloads for - toHexStringImpl | Marmos Demo",
    "keywords": "Overloads for - toHexStringImpl Module std.digest toHexStringImpl(byteBuffer, hexBuffer) void toHexStringImpl( BB byteBuffer, HB hexBuffer )"
  },
  "phobos/std/digest/Overview.html": {
    "href": "phobos/std/digest/Overview.html",
    "title": "Module - std.digest | Marmos Demo",
    "keywords": "Module - std.digest About This module describes the digest APIs used in Phobos. All digests follow these APIs. Additionally, this module contains useful helper methods which can be used with every digest type. $(SCRIPT inhibitQuickIndex = 1;) $(DIVC quickindex, $(BOOKTABLE , $(TR $(TH Category) $(TH Functions) ) $(TR $(TDNW Template API) $(TD $(MYREF isDigest) $(MYREF DigestType) $(MYREF hasPeek) $(MYREF hasBlockSize) $(MYREF ExampleDigest) $(MYREF digest) $(MYREF hexDigest) $(MYREF makeDigest) ) ) $(TR $(TDNW OOP API) $(TD $(MYREF Digest) ) ) $(TR $(TDNW Helper functions) $(TD $(MYREF toHexString) $(MYREF secureEqual)) ) $(TR $(TDNW Implementation helpers) $(TD $(MYREF digestLength) $(MYREF WrapperDigest)) ) ) ) APIs There are two APIs for digests: The template API and the OOP API. The template API uses structs and template helpers like $(LREF isDigest). The OOP API implements digests as classes inheriting the \\((LREF Digest) interface. All digests are named so that the template API struct is called \"\\)(B x)\" and the OOP API class is called \"$(B x)Digest\". For example we have MD5 <--> MD5Digest , CRC32 <--> CRC32Digest , etc. The template API is slightly more efficient. It does not have to allocate memory dynamically, all memory is allocated on the stack. The OOP API has to allocate in the finish method if no buffer was provided. If you provide a buffer to the OOP APIs finish function, it doesn't allocate, but the $(LREF Digest) classes still have to be created using new which allocates them using the GC. The OOP API is useful to change the digest function and/or digest backend at 'runtime'. The benefit here is that switching e.g. Phobos MD5Digest and an OpenSSLMD5Digest implementation is ABI compatible. If just one specific digest type and backend is needed, the template API is usually a good fit. In this simplest case, the template API can even be used without templates: Just use the \"$(B x)\" structs directly. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: Johannes Pfau Source: $(PHOBOSSRC std/digest/package.d) CTFE Digests do not work in CTFE TODO Digesting single bits (as opposed to bytes) is not implemented. This will be done as another template constraint helper (hasBitDigesting!T) and an additional interface (BitDigest) Classes Name Description WrapperDigest Wraps a template API hash struct into a Digest interface. Modules providing digest implementations will usually provide an alias for this template (e.g. MD5Digest, SHA1Digest, ...). Structs Name Description ExampleDigest This documents the general structure of a Digest in the template API. All digest implementations should implement the following members and therefore pass the $(LREF isDigest) test. Functions Name Description asArray digest This is a convenience function to calculate a hash using the template API. Every digest passing the $(LREF isDigest) test can be used with this function. hexDigest This is a convenience function similar to $(LREF digest), but it returns the string representation of the hash. Every digest passing the $(LREF isDigest) test can be used with this function. makeDigest This is a convenience function which returns an initialized digest, so it's not necessary to call start manually. secureEqual Securely compares two digest representations while protecting against timing attacks. Do not use == to compare digest representations. toHexString Used to convert a hash value (a static or dynamic array of ubytes) to a string. Can be used with the OOP and with the template API. toHexStringImpl Variables Name Description digestLength hasBlockSize Checks whether the digest has a blockSize member, which contains the digest's internal block size in bits. It is primarily used by $(REF HMAC, std,digest,hmac). hasPeek Used to check if a digest supports the peek method. Peek has exactly the same function signatures as finish, but it doesn't reset the digest's internal state. isDigest Use this to check if a type is a digest. See $(LREF ExampleDigest) to see what a type must provide to pass this check. isDigestibleRange"
  },
  "phobos/std/digest/Structs/ExampleDigest.html": {
    "href": "phobos/std/digest/Structs/ExampleDigest.html",
    "title": "Struct - ExampleDigest | Marmos Demo",
    "keywords": "Struct - ExampleDigest Module std.digest public struct ExampleDigest { // The finish function returns the final hash sum and resets the Digest. <bug: unknown> finish( ) ; // Use this to feed the digest with data. Also implements the $(REF isOutputRange, std,range,primitives) interface for `ubyte` and `const(ubyte)[]` . The following usages of `put` must work for any type which passes $(LREF isDigest): Example: ---- ExampleDigest dig; dig.put(cast(ubyte) 0); //single ubyte dig.put(cast(ubyte) 0, cast(ubyte) 0); //variadic ubyte[10] buf; dig.put(buf); //buffer ---- void put( <bug: unknown> data ) ; // This function is used to (re)initialize the digest. It must be called before using the digest and it also works as a 'reset' function if the digest has already processed data. void start( ) ; } About This documents the general structure of a Digest in the template API. All digest implementations should implement the following members and therefore pass the $(LREF isDigest) test. Note $(UL $(LI A digest must be a struct (value type) to pass the $(LREF isDigest) test.) $(LI A digest passing the $(LREF isDigest) test is always an OutputRange ) ) Functions Name Description finish The finish function returns the final hash sum and resets the Digest. put Use this to feed the digest with data. Also implements the $(REF isOutputRange, std,range,primitives) interface for ubyte and const(ubyte)[] . The following usages of put must work for any type which passes $(LREF isDigest): Example: ---- ExampleDigest dig; dig.put(cast(ubyte) 0); //single ubyte dig.put(cast(ubyte) 0, cast(ubyte) 0); //variadic ubyte[10] buf; dig.put(buf); //buffer ---- start This function is used to (re)initialize the digest. It must be called before using the digest and it also works as a 'reset' function if the digest has already processed data."
  },
  "phobos/std/digest/WrapperDigest/Functions/finish.html": {
    "href": "phobos/std/digest/WrapperDigest/Functions/finish.html",
    "title": "Overloads for - finish | Marmos Demo",
    "keywords": "Overloads for - finish Module std.digest Parent WrapperDigest finish(buf) <bug: unknown> finish( <bug: unknown> buf ) The finish function returns the hash value. It takes an optional buffer to copy the data into. If a buffer is passed, it must have a length at least $(LREF length) bytes. Example import std.digest.md; ubyte[16] buf; auto hash = new WrapperDigest!MD5(); hash.put(cast(ubyte) 0); auto result = hash.finish(buf[]); //The result is now in result (and in buf). If you pass a buffer which is bigger than //necessary, result will have the correct length, but buf will still have it's original //length -------- finish() <bug: unknown> finish( ) ditto"
  },
  "phobos/std/digest/WrapperDigest/Functions/length.html": {
    "href": "phobos/std/digest/WrapperDigest/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.digest Parent WrapperDigest length() size_t length( ) This is the length in bytes of the hash value which is returned by $(LREF finish). It's also the required size of a buffer passed to $(LREF finish)."
  },
  "phobos/std/digest/WrapperDigest/Functions/peek.html": {
    "href": "phobos/std/digest/WrapperDigest/Functions/peek.html",
    "title": "Overloads for - peek | Marmos Demo",
    "keywords": "Overloads for - peek Module std.digest Parent WrapperDigest peek(buf) <bug: unknown> peek( <bug: unknown> buf ) Works like finish but does not reset the internal state, so it's possible to continue putting data into this WrapperDigest after a call to peek. These functions are only available if hasPeek!T is true. peek() <bug: unknown> peek( ) ditto"
  },
  "phobos/std/digest/WrapperDigest/Functions/put.html": {
    "href": "phobos/std/digest/WrapperDigest/Functions/put.html",
    "title": "Overloads for - put | Marmos Demo",
    "keywords": "Overloads for - put Module std.digest Parent WrapperDigest put(data) void put( <bug: unknown> data ) Use this to feed the digest with data. Also implements the $(REF isOutputRange, std,range,primitives) interface for ubyte and const(ubyte)[] ."
  },
  "phobos/std/digest/WrapperDigest/Functions/reset.html": {
    "href": "phobos/std/digest/WrapperDigest/Functions/reset.html",
    "title": "Overloads for - reset | Marmos Demo",
    "keywords": "Overloads for - reset Module std.digest Parent WrapperDigest reset() void reset( ) Resets the internal state of the digest. Note: $(LREF finish) calls this internally, so it's not necessary to call reset manually after a call to $(LREF finish)."
  },
  "phobos/std/digest/crc/CRC/Functions/finish.html": {
    "href": "phobos/std/digest/crc/CRC/Functions/finish.html",
    "title": "Overloads for - finish | Marmos Demo",
    "keywords": "Overloads for - finish Module std.digest.crc Parent CRC finish() R finish( ) Returns the finished CRC hash. This also calls $(LREF start) to reset the internal state."
  },
  "phobos/std/digest/crc/CRC/Functions/peek.html": {
    "href": "phobos/std/digest/crc/CRC/Functions/peek.html",
    "title": "Overloads for - peek | Marmos Demo",
    "keywords": "Overloads for - peek Module std.digest.crc Parent CRC peek() R peek( ) Works like finish but does not reset the internal state, so it's possible to continue putting data into this CRC after a call to peek."
  },
  "phobos/std/digest/crc/CRC/Functions/put.html": {
    "href": "phobos/std/digest/crc/CRC/Functions/put.html",
    "title": "Overloads for - put | Marmos Demo",
    "keywords": "Overloads for - put Module std.digest.crc Parent CRC put(data) void put( <bug: unknown> data ) Use this to feed the digest with data. Also implements the $(REF isOutputRange, std,range,primitives) interface for ubyte and const(ubyte)[] ."
  },
  "phobos/std/digest/crc/CRC/Functions/start.html": {
    "href": "phobos/std/digest/crc/CRC/Functions/start.html",
    "title": "Overloads for - start | Marmos Demo",
    "keywords": "Overloads for - start Module std.digest.crc Parent CRC start() void start( ) Used to initialize the CRC32 digest. Note For this CRC32 Digest implementation calling start after default construction is not necessary. Calling start is only necessary to reset the Digest. Generic code which deals with different Digest types should always call start though."
  },
  "phobos/std/digest/crc/Functions/crc32Of.html": {
    "href": "phobos/std/digest/crc/Functions/crc32Of.html",
    "title": "Overloads for - crc32Of | Marmos Demo",
    "keywords": "Overloads for - crc32Of Module std.digest.crc crc32Of(data) <bug: unknown> crc32Of( T data ) This is a convenience alias for $(REF digest, std,digest) using the CRC32 implementation. Params data T InputRange of ElementType implicitly convertible to ubyte , ubyte[] or ubyte[num] or one or more arrays of any type. Returns CRC32 of data"
  },
  "phobos/std/digest/crc/Functions/crc64ECMAOf.html": {
    "href": "phobos/std/digest/crc/Functions/crc64ECMAOf.html",
    "title": "Overloads for - crc64ECMAOf | Marmos Demo",
    "keywords": "Overloads for - crc64ECMAOf Module std.digest.crc crc64ECMAOf(data) <bug: unknown> crc64ECMAOf( T data ) This is a convenience alias for $(REF digest, std,digest) using the CRC64-ECMA implementation. Params data T InputRange of ElementType implicitly convertible to ubyte , ubyte[] or ubyte[num] or one or more arrays of any type. Returns CRC64-ECMA of data"
  },
  "phobos/std/digest/crc/Functions/crc64ISOOf.html": {
    "href": "phobos/std/digest/crc/Functions/crc64ISOOf.html",
    "title": "Overloads for - crc64ISOOf | Marmos Demo",
    "keywords": "Overloads for - crc64ISOOf Module std.digest.crc crc64ISOOf(data) <bug: unknown> crc64ISOOf( T data ) This is a convenience alias for $(REF digest, std,digest) using the CRC64-ISO implementation. Params data T InputRange of ElementType implicitly convertible to ubyte , ubyte[] or ubyte[num] or one or more arrays of any type. Returns CRC64-ISO of data"
  },
  "phobos/std/digest/crc/Functions/genTables.html": {
    "href": "phobos/std/digest/crc/Functions/genTables.html",
    "title": "Overloads for - genTables | Marmos Demo",
    "keywords": "Overloads for - genTables Module std.digest.crc genTables(polynomial) <bug: unknown> genTables( T polynomial )"
  },
  "phobos/std/digest/crc/Overview.html": {
    "href": "phobos/std/digest/crc/Overview.html",
    "title": "Module - std.digest.crc | Marmos Demo",
    "keywords": "Module - std.digest.crc About Cyclic Redundancy Check (32-bit) implementation. $(SCRIPT inhibitQuickIndex = 1;) $(DIVC quickindex, $(BOOKTABLE , $(TR $(TH Category) $(TH Functions) ) $(TR $(TDNW Template API) $(TD $(MYREF CRC) $(MYREF CRC32) $(MYREF CRC64ECMA) $(MYREF CRC64ISO) ) ) $(TR $(TDNW OOP API) $(TD $(MYREF CRC32Digest) $(MYREF CRC64ECMADigest) $(MYREF CRC64ISODigest)) ) $(TR $(TDNW Helpers) $(TD $(MYREF crcHexString) $(MYREF crc32Of) $(MYREF crc64ECMAOf) $(MYREF crc64ISOOf)) ) ) ) This module conforms to the APIs defined in std.digest . To understand the differences between the template and the OOP API, see $(MREF std, digest). This module publicly imports $(MREF std, digest) and can be used as a stand-alone module. Note: CRCs are usually printed with the MSB first. When using $(REF toHexString, std,digest) the result will be in an unexpected order. Use $(REF toHexString, std,digest)'s optional order parameter to specify decreasing order for the correct result. The $(LREF crcHexString) alias can also be used for this purpose. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: Pavel \"EvilOne\" Minayev, Alex Rønne Petersen, Johannes Pfau References: $(LINK2 http://en.wikipedia.org/wiki/Cyclic_redundancy_check, Wikipedia on CRC) Source: $(PHOBOSSRC std/digest/crc.d) Standards: Implements the 'common' IEEE CRC32 variant (LSB-first order, Initial value uint.max, complement result) CTFE: Digests do not work in CTFE Aliases Name Description CRC32 Template API CRC32 implementation. See std.digest for differences between template and OOP API. CRC32Digest OOP API CRC32 implementation. See std.digest for differences between template and OOP API. CRC64ECMA Template API CRC64-ECMA implementation. See std.digest for differences between template and OOP API. CRC64ECMADigest OOP API CRC64-ECMA implementation. See std.digest for differences between template and OOP API. CRC64ISO Template API CRC64-ISO implementation. See std.digest for differences between template and OOP API. CRC64ISODigest OOP API CRC64-ISO implementation. See std.digest for differences between template and OOP API. crcHexString producing the usual CRC32 string output. crcHexString ditto Structs Name Description CRC Generic Template API used for CRC32 and CRC64 implementations. Functions Name Description crc32Of This is a convenience alias for $(REF digest, std,digest) using the CRC32 implementation. crc64ECMAOf This is a convenience alias for $(REF digest, std,digest) using the CRC64-ECMA implementation. crc64ISOOf This is a convenience alias for $(REF digest, std,digest) using the CRC64-ISO implementation. genTables"
  },
  "phobos/std/digest/crc/Structs/CRC.html": {
    "href": "phobos/std/digest/crc/Structs/CRC.html",
    "title": "Struct - CRC | Marmos Demo",
    "keywords": "Struct - CRC Module std.digest.crc public struct CRC { // Type of the finished CRC hash. ubyte[4] if N is 32, ubyte[8] if N is 64. alias R = <todo: marmos support pending>; // alias T = <todo: marmos support pending>; // Returns the finished CRC hash. This also calls $(LREF start) to reset the internal state. R finish( ) ; // Works like `finish` but does not reset the internal state, so it's possible to continue putting data into this CRC after a call to peek. R peek( ) ; // Use this to feed the digest with data. Also implements the $(REF isOutputRange, std,range,primitives) interface for `ubyte` and `const(ubyte)[]` . void put( <bug: unknown> data ) ; // Used to initialize the CRC32 digest. void start( ) ; // static immutable <bug: unknown> tables; } About Generic Template API used for CRC32 and CRC64 implementations. The N parameter indicate the size of the hash in bits. The parameter P specify the polynomial to be used for reduction. You may want to use the CRC32, CRC65ECMA and CRC64ISO aliases for convenience. See std.digest for differences between template and OOP API. Aliases Name Description R Type of the finished CRC hash. ubyte[4] if N is 32, ubyte[8] if N is 64. T Functions Name Description finish Returns the finished CRC hash. This also calls $(LREF start) to reset the internal state. peek Works like finish but does not reset the internal state, so it's possible to continue putting data into this CRC after a call to peek. put Use this to feed the digest with data. Also implements the $(REF isOutputRange, std,range,primitives) interface for ubyte and const(ubyte)[] . start Used to initialize the CRC32 digest. Variables Name Description tables"
  },
  "phobos/std/digest/hmac/Functions/hmac.html": {
    "href": "phobos/std/digest/hmac/Functions/hmac.html",
    "title": "Overloads for - hmac | Marmos Demo",
    "keywords": "Overloads for - hmac Module std.digest.hmac hmac(secret) <bug: unknown> hmac( <bug: unknown> secret ) auto ditto hmac(data, secret) DigestType!(H) hmac( T data, <bug: unknown> secret ) ditto"
  },
  "phobos/std/digest/hmac/HMAC/Functions/finish.html": {
    "href": "phobos/std/digest/hmac/HMAC/Functions/finish.html",
    "title": "Overloads for - finish | Marmos Demo",
    "keywords": "Overloads for - finish Module std.digest.hmac Parent HMAC finish() DigestType!(H) finish( ) Resets the digest and returns the finished hash."
  },
  "phobos/std/digest/hmac/HMAC/Functions/put.html": {
    "href": "phobos/std/digest/hmac/HMAC/Functions/put.html",
    "title": "Overloads for - put | Marmos Demo",
    "keywords": "Overloads for - put Module std.digest.hmac Parent HMAC put(data) HMAC!(HblockSize) put( <bug: unknown> data ) Feeds a piece of data into the hash computation. This method allows the type to be used as an $(REF OutputRange, std,range). Returns A reference to the digest for convenient chaining."
  },
  "phobos/std/digest/hmac/HMAC/Functions/start.html": {
    "href": "phobos/std/digest/hmac/HMAC/Functions/start.html",
    "title": "Overloads for - start | Marmos Demo",
    "keywords": "Overloads for - start Module std.digest.hmac Parent HMAC start() HMAC!(HblockSize) start( ) Reinitializes the digest, making it ready for reuse. Note The constructor leaves the digest in an initialized state, so that this method only needs to be called if an unfinished digest is to be reused. Returns A reference to the digest for convenient chaining."
  },
  "phobos/std/digest/hmac/Overview.html": {
    "href": "phobos/std/digest/hmac/Overview.html",
    "title": "Module - std.digest.hmac | Marmos Demo",
    "keywords": "Module - std.digest.hmac About This package implements the hash-based message authentication code (_HMAC) algorithm as defined in $(HTTP tools.ietf.org/html/rfc2104, RFC2104). See also the corresponding $(HTTP en.wikipedia.org/wiki/Hash-based_message_authentication_code, Wikipedia article). $(SCRIPT inhibitQuickIndex = 1;) Macros License: $(HTTP boost.org/LICENSE_1_0.txt, Boost License 1.0). Source: $(PHOBOSSRC std/digest/hmac.d) Aliases Name Description hmac ditto HMAC Structs Name Description HMAC Overload of HMAC to be used if H doesn't provide information about its block size. Functions Name Description hmac ditto"
  },
  "phobos/std/digest/hmac/Structs/HMAC.html": {
    "href": "phobos/std/digest/hmac/Structs/HMAC.html",
    "title": "Struct - HMAC | Marmos Demo",
    "keywords": "Struct - HMAC Module std.digest.hmac public struct HMAC { // Resets the digest and returns the finished hash. DigestType!(H) finish( ) ; // Feeds a piece of data into the hash computation. This method allows the type to be used as an $(REF OutputRange, std,range). HMAC!(HblockSize) put( <bug: unknown> data ) ; // Reinitializes the digest, making it ready for reuse. HMAC!(HblockSize) start( ) ; // __enumMember blockSize; // H digest; // <bug: unknown> key; } About Overload of HMAC to be used if H doesn't provide information about its block size. Functions Name Description finish Resets the digest and returns the finished hash. put Feeds a piece of data into the hash computation. This method allows the type to be used as an $(REF OutputRange, std,range). start Reinitializes the digest, making it ready for reuse. Variables Name Description blockSize digest key"
  },
  "phobos/std/digest/md/Functions/md5Of.html": {
    "href": "phobos/std/digest/md/Functions/md5Of.html",
    "title": "Overloads for - md5Of | Marmos Demo",
    "keywords": "Overloads for - md5Of Module std.digest.md md5Of(data) <bug: unknown> md5Of( T data ) auto This is a convenience alias for $(REF digest, std,digest) using the MD5 implementation."
  },
  "phobos/std/digest/md/MD5/Functions/F.html": {
    "href": "phobos/std/digest/md/MD5/Functions/F.html",
    "title": "Overloads for - F | Marmos Demo",
    "keywords": "Overloads for - F Module std.digest.md Parent MD5 F(x, y, z) uint F( uint x, uint y, uint z )"
  },
  "phobos/std/digest/md/MD5/Functions/FF.html": {
    "href": "phobos/std/digest/md/MD5/Functions/FF.html",
    "title": "Overloads for - FF | Marmos Demo",
    "keywords": "Overloads for - FF Module std.digest.md Parent MD5 FF(a, b, c, d, x, s, ac) void FF( uint a, uint b, uint c, uint d, uint x, uint s, uint ac ) static"
  },
  "phobos/std/digest/md/MD5/Functions/G.html": {
    "href": "phobos/std/digest/md/MD5/Functions/G.html",
    "title": "Overloads for - G | Marmos Demo",
    "keywords": "Overloads for - G Module std.digest.md Parent MD5 G(x, y, z) uint G( uint x, uint y, uint z )"
  },
  "phobos/std/digest/md/MD5/Functions/GG.html": {
    "href": "phobos/std/digest/md/MD5/Functions/GG.html",
    "title": "Overloads for - GG | Marmos Demo",
    "keywords": "Overloads for - GG Module std.digest.md Parent MD5 GG(a, b, c, d, x, s, ac) void GG( uint a, uint b, uint c, uint d, uint x, uint s, uint ac ) static"
  },
  "phobos/std/digest/md/MD5/Functions/H.html": {
    "href": "phobos/std/digest/md/MD5/Functions/H.html",
    "title": "Overloads for - H | Marmos Demo",
    "keywords": "Overloads for - H Module std.digest.md Parent MD5 H(x, y, z) uint H( uint x, uint y, uint z )"
  },
  "phobos/std/digest/md/MD5/Functions/HH.html": {
    "href": "phobos/std/digest/md/MD5/Functions/HH.html",
    "title": "Overloads for - HH | Marmos Demo",
    "keywords": "Overloads for - HH Module std.digest.md Parent MD5 HH(a, b, c, d, x, s, ac) void HH( uint a, uint b, uint c, uint d, uint x, uint s, uint ac ) static"
  },
  "phobos/std/digest/md/MD5/Functions/I.html": {
    "href": "phobos/std/digest/md/MD5/Functions/I.html",
    "title": "Overloads for - I | Marmos Demo",
    "keywords": "Overloads for - I Module std.digest.md Parent MD5 I(x, y, z) uint I( uint x, uint y, uint z )"
  },
  "phobos/std/digest/md/MD5/Functions/II.html": {
    "href": "phobos/std/digest/md/MD5/Functions/II.html",
    "title": "Overloads for - II | Marmos Demo",
    "keywords": "Overloads for - II Module std.digest.md Parent MD5 II(a, b, c, d, x, s, ac) void II( uint a, uint b, uint c, uint d, uint x, uint s, uint ac ) static"
  },
  "phobos/std/digest/md/MD5/Functions/finish.html": {
    "href": "phobos/std/digest/md/MD5/Functions/finish.html",
    "title": "Overloads for - finish | Marmos Demo",
    "keywords": "Overloads for - finish Module std.digest.md Parent MD5 finish() <bug: unknown> finish( ) Returns the finished MD5 hash. This also calls $(LREF start) to reset the internal state."
  },
  "phobos/std/digest/md/MD5/Functions/put.html": {
    "href": "phobos/std/digest/md/MD5/Functions/put.html",
    "title": "Overloads for - put | Marmos Demo",
    "keywords": "Overloads for - put Module std.digest.md Parent MD5 put(data) void put( <bug: unknown> data ) Use this to feed the digest with data. Also implements the $(REF isOutputRange, std,range,primitives) interface for ubyte and const(ubyte)[] . Example ---- MD5 dig; dig.put(cast(ubyte) 0); //single ubyte dig.put(cast(ubyte) 0, cast(ubyte) 0); //variadic ubyte[10] buf; dig.put(buf); //buffer ----"
  },
  "phobos/std/digest/md/MD5/Functions/start.html": {
    "href": "phobos/std/digest/md/MD5/Functions/start.html",
    "title": "Overloads for - start | Marmos Demo",
    "keywords": "Overloads for - start Module std.digest.md Parent MD5 start() void start( ) Used to (re)initialize the MD5 digest. Note For this MD5 Digest implementation calling start after default construction is not necessary. Calling start is only necessary to reset the Digest. Generic code which deals with different Digest types should always call start though. Example -------- MD5 digest; //digest.start(); //Not necessary digest.put(0); --------"
  },
  "phobos/std/digest/md/MD5/Functions/transform.html": {
    "href": "phobos/std/digest/md/MD5/Functions/transform.html",
    "title": "Overloads for - transform | Marmos Demo",
    "keywords": "Overloads for - transform Module std.digest.md Parent MD5 transform(block) void transform( <bug: unknown> block )"
  },
  "phobos/std/digest/md/Overview.html": {
    "href": "phobos/std/digest/md/Overview.html",
    "title": "Module - std.digest.md | Marmos Demo",
    "keywords": "Module - std.digest.md About Computes MD5 hashes of arbitrary data. MD5 hashes are 16 byte quantities that are like a checksum or CRC, but are more robust. $(SCRIPT inhibitQuickIndex = 1;) $(DIVC quickindex, $(BOOKTABLE , $(TR $(TH Category) $(TH Functions) ) $(TR $(TDNW Template API) $(TD $(MYREF MD5) ) ) $(TR $(TDNW OOP API) $(TD $(MYREF MD5Digest)) ) $(TR $(TDNW Helpers) $(TD $(MYREF md5Of)) ) ) ) This module conforms to the APIs defined in std.digest . To understand the differences between the template and the OOP API, see $(MREF std, digest). This module publicly imports $(MREF std, digest) and can be used as a stand-alone module. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). CTFE Digests do not work in CTFE Authors Piotr Szturmaj, Kai Nacke, Johannes Pfau $(BR) The routines and algorithms are derived from the $(I RSA Data Security, Inc. MD5 Message-Digest Algorithm). References $(LINK2 http://en.wikipedia.org/wiki/Md5, Wikipedia on MD5) Source: $(PHOBOSSRC std/digest/md.d) Aliases Name Description MD5Digest OOP API MD5 implementation. See std.digest for differences between template and OOP API. Structs Name Description MD5 Template API MD5 implementation. See std.digest for differences between template and OOP API. Functions Name Description md5Of This is a convenience alias for $(REF digest, std,digest) using the MD5 implementation."
  },
  "phobos/std/digest/md/Structs/MD5.html": {
    "href": "phobos/std/digest/md/Structs/MD5.html",
    "title": "Struct - MD5 | Marmos Demo",
    "keywords": "Struct - MD5 Module std.digest.md public struct MD5 { // uint F( uint x, uint y, uint z ) ; // void FF( uint a, uint b, uint c, uint d, uint x, uint s, uint ac ) static; // Returns the finished MD5 hash. This also calls $(LREF start) to reset the internal state. <bug: unknown> finish( ) ; // uint G( uint x, uint y, uint z ) ; // void GG( uint a, uint b, uint c, uint d, uint x, uint s, uint ac ) static; // uint H( uint x, uint y, uint z ) ; // void HH( uint a, uint b, uint c, uint d, uint x, uint s, uint ac ) static; // uint I( uint x, uint y, uint z ) ; // void II( uint a, uint b, uint c, uint d, uint x, uint s, uint ac ) static; // Use this to feed the digest with data. Also implements the $(REF isOutputRange, std,range,primitives) interface for `ubyte` and `const(ubyte)[]` . void put( <bug: unknown> data ) ; // Used to (re)initialize the MD5 digest. void start( ) ; // void transform( <bug: unknown> block ) ; // __enumMember blockSize; } About Template API MD5 implementation. See std.digest for differences between template and OOP API. Functions Name Description F FF finish Returns the finished MD5 hash. This also calls $(LREF start) to reset the internal state. G GG H HH I II put Use this to feed the digest with data. Also implements the $(REF isOutputRange, std,range,primitives) interface for ubyte and const(ubyte)[] . start Used to (re)initialize the MD5 digest. transform Variables Name Description blockSize"
  },
  "phobos/std/digest/murmurhash/Functions/checkResult.html": {
    "href": "phobos/std/digest/murmurhash/Functions/checkResult.html",
    "title": "Overloads for - checkResult | Marmos Demo",
    "keywords": "Overloads for - checkResult Module std.digest.murmurhash checkResult(groundtruth) void checkResult( <bug: unknown> groundtruth )"
  },
  "phobos/std/digest/murmurhash/Functions/hash.html": {
    "href": "phobos/std/digest/murmurhash/Functions/hash.html",
    "title": "Overloads for - hash | Marmos Demo",
    "keywords": "Overloads for - hash Module std.digest.murmurhash hash(data) <bug: unknown> hash( string data ) auto"
  },
  "phobos/std/digest/murmurhash/MurmurHash3/Functions/finalize.html": {
    "href": "phobos/std/digest/murmurhash/MurmurHash3/Functions/finalize.html",
    "title": "Overloads for - finalize | Marmos Demo",
    "keywords": "Overloads for - finalize Module std.digest.murmurhash Parent MurmurHash3 finalize() void finalize( ) Incorporate element_count and finalizes the hash."
  },
  "phobos/std/digest/murmurhash/MurmurHash3/Functions/finish.html": {
    "href": "phobos/std/digest/murmurhash/MurmurHash3/Functions/finish.html",
    "title": "Overloads for - finish | Marmos Demo",
    "keywords": "Overloads for - finish Module std.digest.murmurhash Parent MurmurHash3 finish() <bug: unknown> finish( ) Finalizes the computation of the hash and returns the computed value. Note that finish can be called only once and that no subsequent calls to put is allowed."
  },
  "phobos/std/digest/murmurhash/MurmurHash3/Functions/fmix.html": {
    "href": "phobos/std/digest/murmurhash/MurmurHash3/Functions/fmix.html",
    "title": "Overloads for - fmix | Marmos Demo",
    "keywords": "Overloads for - fmix Module std.digest.murmurhash Parent MurmurHash3 fmix(h) uint fmix( uint h ) fmix(k) ulong fmix( ulong k )"
  },
  "phobos/std/digest/murmurhash/MurmurHash3/Functions/get.html": {
    "href": "phobos/std/digest/murmurhash/MurmurHash3/Functions/get.html",
    "title": "Overloads for - get | Marmos Demo",
    "keywords": "Overloads for - get Module std.digest.murmurhash Parent MurmurHash3 get() Element get( ) Returns the hash as an uint value."
  },
  "phobos/std/digest/murmurhash/MurmurHash3/Functions/getBytes.html": {
    "href": "phobos/std/digest/murmurhash/MurmurHash3/Functions/getBytes.html",
    "title": "Overloads for - getBytes | Marmos Demo",
    "keywords": "Overloads for - getBytes Module std.digest.murmurhash Parent MurmurHash3 getBytes() <bug: unknown> getBytes( ) Returns the current hashed value as an ubyte array."
  },
  "phobos/std/digest/murmurhash/MurmurHash3/Functions/put.html": {
    "href": "phobos/std/digest/murmurhash/MurmurHash3/Functions/put.html",
    "title": "Overloads for - put | Marmos Demo",
    "keywords": "Overloads for - put Module std.digest.murmurhash Parent MurmurHash3 put(data) void put( <bug: unknown> data ) Adds data to the digester. This function can be called many times in a row after start but before finish."
  },
  "phobos/std/digest/murmurhash/MurmurHash3/Functions/putElement.html": {
    "href": "phobos/std/digest/murmurhash/MurmurHash3/Functions/putElement.html",
    "title": "Overloads for - putElement | Marmos Demo",
    "keywords": "Overloads for - putElement Module std.digest.murmurhash Parent MurmurHash3 putElement(block) void putElement( uint block ) Adds a single Element of data without increasing element_count . Make sure to increase element_count by Element.sizeof for each call to putElement ."
  },
  "phobos/std/digest/murmurhash/MurmurHash3/Functions/putElements.html": {
    "href": "phobos/std/digest/murmurhash/MurmurHash3/Functions/putElements.html",
    "title": "Overloads for - putElements | Marmos Demo",
    "keywords": "Overloads for - putElements Module std.digest.murmurhash Parent MurmurHash3 putElements(elements) void putElements( <bug: unknown> elements ) Pushes an array of elements at once. It is more efficient to push as much data as possible in a single call. On platforms that do not support unaligned reads (MIPS or old ARM chips), the compiler may produce slower code to ensure correctness."
  },
  "phobos/std/digest/murmurhash/MurmurHash3/Functions/putRemainder.html": {
    "href": "phobos/std/digest/murmurhash/MurmurHash3/Functions/putRemainder.html",
    "title": "Overloads for - putRemainder | Marmos Demo",
    "keywords": "Overloads for - putRemainder Module std.digest.murmurhash Parent MurmurHash3 putRemainder(data) void putRemainder( <bug: unknown> data ) Put remainder bytes. This must be called only once after putElement and before finalize ."
  },
  "phobos/std/digest/murmurhash/MurmurHash3/Functions/start.html": {
    "href": "phobos/std/digest/murmurhash/MurmurHash3/Functions/start.html",
    "title": "Overloads for - start | Marmos Demo",
    "keywords": "Overloads for - start Module std.digest.murmurhash Parent MurmurHash3 start() void start( )"
  },
  "phobos/std/digest/murmurhash/Overview.html": {
    "href": "phobos/std/digest/murmurhash/Overview.html",
    "title": "Module - std.digest.murmurhash | Marmos Demo",
    "keywords": "Module - std.digest.murmurhash About Computes $(LINK2 https://en.wikipedia.org/wiki/MurmurHash, MurmurHash) hashes of arbitrary data. MurmurHash is a non-cryptographic hash function suitable for general hash-based lookup. It is optimized for x86 but can be used on all architectures. The current version is MurmurHash3, which yields a 32-bit or 128-bit hash value. The older MurmurHash 1 and 2 are currently not supported. MurmurHash3 comes in three flavors, listed in increasing order of throughput $(UL $(LI MurmurHash3!32 produces a 32-bit value and is optimized for 32-bit architectures) $(LI $(D MurmurHash3!(128, 32)) produces a 128-bit value and is optimized for 32-bit architectures) $(LI $(D MurmurHash3!(128, 64)) produces a 128-bit value and is optimized for 64-bit architectures) ) Note $(UL $(LI $(D MurmurHash3!(128, 32)) and $(D MurmurHash3!(128, 64)) produce different values.) $(LI The current implementation is optimized for little endian architectures. It will exhibit different results on big endian architectures and a slightly less uniform distribution.) ) This module conforms to the APIs defined in $(MREF std, digest). This module publicly imports $(MREF std, digest) and can be used as a stand-alone module. Source: $(PHOBOSSRC std/digest/murmurhash.d) License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: Guillaume Chatelet References: $(LINK2 https://github.com/aappleby/smhasher, Reference implementation) $(BR) $(LINK2 https://en.wikipedia.org/wiki/MurmurHash, Wikipedia) Structs Name Description MurmurHash3 Implements the MurmurHash3 functions. You can specify the size of the hash in bit. For 128 bit hashes you can specify whether to optimize for 32 or 64 bit architectures. If you don't specify the opt value it will select the fastest version of the host platform. Functions Name Description checkResult hash"
  },
  "phobos/std/digest/murmurhash/Structs/MurmurHash3.html": {
    "href": "phobos/std/digest/murmurhash/Structs/MurmurHash3.html",
    "title": "Struct - MurmurHash3 | Marmos Demo",
    "keywords": "Struct - MurmurHash3 Module std.digest.murmurhash public struct MurmurHash3 { // The element type for 32-bit implementation. alias Element = <todo: marmos support pending>; // Incorporate `element_count` and finalizes the hash. void finalize( ) ; // Finalizes the computation of the hash and returns the computed value. Note that `finish` can be called only once and that no subsequent calls to `put` is allowed. <bug: unknown> finish( ) ; // uint fmix( uint h ) ; // ulong fmix( ulong k ) ; // Returns the hash as an uint value. Element get( ) ; // Returns the current hashed value as an ubyte array. <bug: unknown> getBytes( ) ; // Adds data to the digester. This function can be called many times in a row after start but before finish. void put( <bug: unknown> data ) ; // Adds a single Element of data without increasing `element_count` . Make sure to increase `element_count` by `Element.sizeof` for each call to `putElement` . void putElement( uint block ) ; // Pushes an array of elements at once. It is more efficient to push as much data as possible in a single call. On platforms that do not support unaligned reads (MIPS or old ARM chips), the compiler may produce slower code to ensure correctness. void putElements( <bug: unknown> elements ) ; // Put remainder bytes. This must be called only once after `putElement` and before `finalize` . void putRemainder( <bug: unknown> data ) ; // void start( ) ; // __enumMember blockSize; // BufferUnion buffer; // size_t bufferSize; // uint c1; // uint c2; // size_t element_count; // uint h1; } About Implements the MurmurHash3 functions. You can specify the size of the hash in bit. For 128 bit hashes you can specify whether to optimize for 32 or 64 bit architectures. If you don't specify the opt value it will select the fastest version of the host platform. This hasher is compatible with the `Digest` API $(UL $(LI void start() ) $(LI void put(scope const(ubyte)[] data...) ) $(LI ubyte[Element.sizeof] finish() ) ) It also provides a faster, low level API working with data of size Element.sizeof : $(UL $(LI void putElements(scope const(Element[]) elements...) ) $(LI void putRemainder(scope const(ubyte[]) data...) ) $(LI void finalize() ) $(LI Element get() ) $(LI ubyte[Element.sizeof] getBytes() ) ) Aliases Name Description Element The element type for 32-bit implementation. Functions Name Description finalize Incorporate element_count and finalizes the hash. finish Finalizes the computation of the hash and returns the computed value. Note that finish can be called only once and that no subsequent calls to put is allowed. fmix get Returns the hash as an uint value. getBytes Returns the current hashed value as an ubyte array. put Adds data to the digester. This function can be called many times in a row after start but before finish. putElement Adds a single Element of data without increasing element_count . Make sure to increase element_count by Element.sizeof for each call to putElement . putElements Pushes an array of elements at once. It is more efficient to push as much data as possible in a single call. On platforms that do not support unaligned reads (MIPS or old ARM chips), the compiler may produce slower code to ensure correctness. putRemainder Put remainder bytes. This must be called only once after putElement and before finalize . start Variables Name Description blockSize buffer bufferSize c1 c2 element_count h1"
  },
  "phobos/std/digest/ripemd/Functions/ripemd160Of.html": {
    "href": "phobos/std/digest/ripemd/Functions/ripemd160Of.html",
    "title": "Overloads for - ripemd160Of | Marmos Demo",
    "keywords": "Overloads for - ripemd160Of Module std.digest.ripemd ripemd160Of(data) <bug: unknown> ripemd160Of( T data ) auto This is a convenience alias for $(REF digest, std,digest) using the RIPEMD160 implementation."
  },
  "phobos/std/digest/ripemd/Overview.html": {
    "href": "phobos/std/digest/ripemd/Overview.html",
    "title": "Module - std.digest.ripemd | Marmos Demo",
    "keywords": "Module - std.digest.ripemd About Computes RIPEMD-160 hashes of arbitrary data. RIPEMD-160 hashes are 20 byte quantities that are like a checksum or CRC, but are more robust. $(SCRIPT inhibitQuickIndex = 1;) $(DIVC quickindex, $(BOOKTABLE , $(TR $(TH Category) $(TH Functions) ) $(TR $(TDNW Template API) $(TD $(MYREF RIPEMD160) ) ) $(TR $(TDNW OOP API) $(TD $(MYREF RIPEMD160Digest)) ) $(TR $(TDNW Helpers) $(TD $(MYREF ripemd160Of)) ) ) ) This module conforms to the APIs defined in $(MREF std, digest). To understand the differences between the template and the OOP API, see $(MREF std, digest). This module publicly imports std.digest and can be used as a stand-alone module. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). CTFE Digests do not work in CTFE Authors Kai Nacke $(BR) The algorithm was designed by Hans Dobbertin, Antoon Bosselaers, and Bart Preneel. $(BR) The D implementation is a direct translation of the ANSI C implementation by Antoon Bosselaers. References $(UL $(LI $(LINK2 http://homes.esat.kuleuven.be/~bosselae/ripemd160.html, The hash function RIPEMD-160)) $(LI $(LINK2 http://en.wikipedia.org/wiki/RIPEMD-160, Wikipedia on RIPEMD-160)) ) Source: $(PHOBOSSRC std/digest/ripemd.d) Aliases Name Description RIPEMD160Digest OOP API RIPEMD160 implementation. See std.digest for differences between template and OOP API. Structs Name Description RIPEMD160 Template API RIPEMD160 implementation. See std.digest for differences between template and OOP API. Functions Name Description ripemd160Of This is a convenience alias for $(REF digest, std,digest) using the RIPEMD160 implementation."
  },
  "phobos/std/digest/ripemd/RIPEMD160/Functions/F.html": {
    "href": "phobos/std/digest/ripemd/RIPEMD160/Functions/F.html",
    "title": "Overloads for - F | Marmos Demo",
    "keywords": "Overloads for - F Module std.digest.ripemd Parent RIPEMD160 F(x, y, z) uint F( uint x, uint y, uint z )"
  },
  "phobos/std/digest/ripemd/RIPEMD160/Functions/FF.html": {
    "href": "phobos/std/digest/ripemd/RIPEMD160/Functions/FF.html",
    "title": "Overloads for - FF | Marmos Demo",
    "keywords": "Overloads for - FF Module std.digest.ripemd Parent RIPEMD160 FF(a, b, c, d, e, x, s) void FF( uint a, uint b, uint c, uint d, uint e, uint x, uint s ) static"
  },
  "phobos/std/digest/ripemd/RIPEMD160/Functions/FFF.html": {
    "href": "phobos/std/digest/ripemd/RIPEMD160/Functions/FFF.html",
    "title": "Overloads for - FFF | Marmos Demo",
    "keywords": "Overloads for - FFF Module std.digest.ripemd Parent RIPEMD160 FFF(a, b, c, d, e, x, s) void FFF( uint a, uint b, uint c, uint d, uint e, uint x, uint s ) static"
  },
  "phobos/std/digest/ripemd/RIPEMD160/Functions/G.html": {
    "href": "phobos/std/digest/ripemd/RIPEMD160/Functions/G.html",
    "title": "Overloads for - G | Marmos Demo",
    "keywords": "Overloads for - G Module std.digest.ripemd Parent RIPEMD160 G(x, y, z) uint G( uint x, uint y, uint z )"
  },
  "phobos/std/digest/ripemd/RIPEMD160/Functions/GG.html": {
    "href": "phobos/std/digest/ripemd/RIPEMD160/Functions/GG.html",
    "title": "Overloads for - GG | Marmos Demo",
    "keywords": "Overloads for - GG Module std.digest.ripemd Parent RIPEMD160 GG(a, b, c, d, e, x, s) void GG( uint a, uint b, uint c, uint d, uint e, uint x, uint s ) static"
  },
  "phobos/std/digest/ripemd/RIPEMD160/Functions/GGG.html": {
    "href": "phobos/std/digest/ripemd/RIPEMD160/Functions/GGG.html",
    "title": "Overloads for - GGG | Marmos Demo",
    "keywords": "Overloads for - GGG Module std.digest.ripemd Parent RIPEMD160 GGG(a, b, c, d, e, x, s) void GGG( uint a, uint b, uint c, uint d, uint e, uint x, uint s ) static"
  },
  "phobos/std/digest/ripemd/RIPEMD160/Functions/H.html": {
    "href": "phobos/std/digest/ripemd/RIPEMD160/Functions/H.html",
    "title": "Overloads for - H | Marmos Demo",
    "keywords": "Overloads for - H Module std.digest.ripemd Parent RIPEMD160 H(x, y, z) uint H( uint x, uint y, uint z )"
  },
  "phobos/std/digest/ripemd/RIPEMD160/Functions/HH.html": {
    "href": "phobos/std/digest/ripemd/RIPEMD160/Functions/HH.html",
    "title": "Overloads for - HH | Marmos Demo",
    "keywords": "Overloads for - HH Module std.digest.ripemd Parent RIPEMD160 HH(a, b, c, d, e, x, s) void HH( uint a, uint b, uint c, uint d, uint e, uint x, uint s ) static"
  },
  "phobos/std/digest/ripemd/RIPEMD160/Functions/HHH.html": {
    "href": "phobos/std/digest/ripemd/RIPEMD160/Functions/HHH.html",
    "title": "Overloads for - HHH | Marmos Demo",
    "keywords": "Overloads for - HHH Module std.digest.ripemd Parent RIPEMD160 HHH(a, b, c, d, e, x, s) void HHH( uint a, uint b, uint c, uint d, uint e, uint x, uint s ) static"
  },
  "phobos/std/digest/ripemd/RIPEMD160/Functions/I.html": {
    "href": "phobos/std/digest/ripemd/RIPEMD160/Functions/I.html",
    "title": "Overloads for - I | Marmos Demo",
    "keywords": "Overloads for - I Module std.digest.ripemd Parent RIPEMD160 I(x, y, z) uint I( uint x, uint y, uint z )"
  },
  "phobos/std/digest/ripemd/RIPEMD160/Functions/II.html": {
    "href": "phobos/std/digest/ripemd/RIPEMD160/Functions/II.html",
    "title": "Overloads for - II | Marmos Demo",
    "keywords": "Overloads for - II Module std.digest.ripemd Parent RIPEMD160 II(a, b, c, d, e, x, s) void II( uint a, uint b, uint c, uint d, uint e, uint x, uint s ) static"
  },
  "phobos/std/digest/ripemd/RIPEMD160/Functions/III.html": {
    "href": "phobos/std/digest/ripemd/RIPEMD160/Functions/III.html",
    "title": "Overloads for - III | Marmos Demo",
    "keywords": "Overloads for - III Module std.digest.ripemd Parent RIPEMD160 III(a, b, c, d, e, x, s) void III( uint a, uint b, uint c, uint d, uint e, uint x, uint s ) static"
  },
  "phobos/std/digest/ripemd/RIPEMD160/Functions/J.html": {
    "href": "phobos/std/digest/ripemd/RIPEMD160/Functions/J.html",
    "title": "Overloads for - J | Marmos Demo",
    "keywords": "Overloads for - J Module std.digest.ripemd Parent RIPEMD160 J(x, y, z) uint J( uint x, uint y, uint z )"
  },
  "phobos/std/digest/ripemd/RIPEMD160/Functions/JJ.html": {
    "href": "phobos/std/digest/ripemd/RIPEMD160/Functions/JJ.html",
    "title": "Overloads for - JJ | Marmos Demo",
    "keywords": "Overloads for - JJ Module std.digest.ripemd Parent RIPEMD160 JJ(a, b, c, d, e, x, s) void JJ( uint a, uint b, uint c, uint d, uint e, uint x, uint s ) static"
  },
  "phobos/std/digest/ripemd/RIPEMD160/Functions/JJJ.html": {
    "href": "phobos/std/digest/ripemd/RIPEMD160/Functions/JJJ.html",
    "title": "Overloads for - JJJ | Marmos Demo",
    "keywords": "Overloads for - JJJ Module std.digest.ripemd Parent RIPEMD160 JJJ(a, b, c, d, e, x, s) void JJJ( uint a, uint b, uint c, uint d, uint e, uint x, uint s ) static"
  },
  "phobos/std/digest/ripemd/RIPEMD160/Functions/finish.html": {
    "href": "phobos/std/digest/ripemd/RIPEMD160/Functions/finish.html",
    "title": "Overloads for - finish | Marmos Demo",
    "keywords": "Overloads for - finish Module std.digest.ripemd Parent RIPEMD160 finish() <bug: unknown> finish( ) Returns the finished RIPEMD160 hash. This also calls $(LREF start) to reset the internal state. Example -------- //Simple example RIPEMD160 hash; hash.start(); hash.put(cast(ubyte) 0); ubyte[20] result = hash.finish(); assert(toHexString(result) == \"C81B94933420221A7AC004A90242D8B1D3E5070D\"); --------"
  },
  "phobos/std/digest/ripemd/RIPEMD160/Functions/put.html": {
    "href": "phobos/std/digest/ripemd/RIPEMD160/Functions/put.html",
    "title": "Overloads for - put | Marmos Demo",
    "keywords": "Overloads for - put Module std.digest.ripemd Parent RIPEMD160 put(data) void put( <bug: unknown> data ) Use this to feed the digest with data. Also implements the $(REF isOutputRange, std,range,primitives) interface for ubyte and const(ubyte)[] . Example ---- RIPEMD160 dig; dig.put(cast(ubyte) 0); //single ubyte dig.put(cast(ubyte) 0, cast(ubyte) 0); //variadic ubyte[10] buf; dig.put(buf); //buffer ----"
  },
  "phobos/std/digest/ripemd/RIPEMD160/Functions/start.html": {
    "href": "phobos/std/digest/ripemd/RIPEMD160/Functions/start.html",
    "title": "Overloads for - start | Marmos Demo",
    "keywords": "Overloads for - start Module std.digest.ripemd Parent RIPEMD160 start() void start( ) Used to (re)initialize the RIPEMD160 digest. Note For this RIPEMD160 Digest implementation calling start after default construction is not necessary. Calling start is only necessary to reset the Digest. Generic code which deals with different Digest types should always call start though. Example -------- RIPEMD160 digest; //digest.start(); //Not necessary digest.put(0); --------"
  },
  "phobos/std/digest/ripemd/RIPEMD160/Functions/transform.html": {
    "href": "phobos/std/digest/ripemd/RIPEMD160/Functions/transform.html",
    "title": "Overloads for - transform | Marmos Demo",
    "keywords": "Overloads for - transform Module std.digest.ripemd Parent RIPEMD160 transform(block) void transform( <bug: unknown> block )"
  },
  "phobos/std/digest/ripemd/Structs/RIPEMD160.html": {
    "href": "phobos/std/digest/ripemd/Structs/RIPEMD160.html",
    "title": "Struct - RIPEMD160 | Marmos Demo",
    "keywords": "Struct - RIPEMD160 Module std.digest.ripemd public struct RIPEMD160 { // uint F( uint x, uint y, uint z ) ; // void FF( uint a, uint b, uint c, uint d, uint e, uint x, uint s ) static; // void FFF( uint a, uint b, uint c, uint d, uint e, uint x, uint s ) static; // Returns the finished RIPEMD160 hash. This also calls $(LREF start) to reset the internal state. <bug: unknown> finish( ) ; // uint G( uint x, uint y, uint z ) ; // void GG( uint a, uint b, uint c, uint d, uint e, uint x, uint s ) static; // void GGG( uint a, uint b, uint c, uint d, uint e, uint x, uint s ) static; // uint H( uint x, uint y, uint z ) ; // void HH( uint a, uint b, uint c, uint d, uint e, uint x, uint s ) static; // void HHH( uint a, uint b, uint c, uint d, uint e, uint x, uint s ) static; // uint I( uint x, uint y, uint z ) ; // void II( uint a, uint b, uint c, uint d, uint e, uint x, uint s ) static; // void III( uint a, uint b, uint c, uint d, uint e, uint x, uint s ) static; // uint J( uint x, uint y, uint z ) ; // void JJ( uint a, uint b, uint c, uint d, uint e, uint x, uint s ) static; // void JJJ( uint a, uint b, uint c, uint d, uint e, uint x, uint s ) static; // Use this to feed the digest with data. Also implements the $(REF isOutputRange, std,range,primitives) interface for `ubyte` and `const(ubyte)[]` . void put( <bug: unknown> data ) ; // Used to (re)initialize the RIPEMD160 digest. void start( ) ; // void transform( <bug: unknown> block ) ; // __enumMember blockSize; } About Template API RIPEMD160 implementation. See std.digest for differences between template and OOP API. Functions Name Description F FF FFF finish Returns the finished RIPEMD160 hash. This also calls $(LREF start) to reset the internal state. G GG GGG H HH HHH I II III J JJ JJJ put Use this to feed the digest with data. Also implements the $(REF isOutputRange, std,range,primitives) interface for ubyte and const(ubyte)[] . start Used to (re)initialize the RIPEMD160 digest. transform Variables Name Description blockSize"
  },
  "phobos/std/digest/sha/Functions/sha1Of.html": {
    "href": "phobos/std/digest/sha/Functions/sha1Of.html",
    "title": "Overloads for - sha1Of | Marmos Demo",
    "keywords": "Overloads for - sha1Of Module std.digest.sha sha1Of(data) <bug: unknown> sha1Of( T data ) auto These are convenience aliases for $(REF digest, std,digest) using the SHA implementation."
  },
  "phobos/std/digest/sha/Functions/sha224Of.html": {
    "href": "phobos/std/digest/sha/Functions/sha224Of.html",
    "title": "Overloads for - sha224Of | Marmos Demo",
    "keywords": "Overloads for - sha224Of Module std.digest.sha sha224Of(data) <bug: unknown> sha224Of( T data ) auto ditto"
  },
  "phobos/std/digest/sha/Functions/sha256Of.html": {
    "href": "phobos/std/digest/sha/Functions/sha256Of.html",
    "title": "Overloads for - sha256Of | Marmos Demo",
    "keywords": "Overloads for - sha256Of Module std.digest.sha sha256Of(data) <bug: unknown> sha256Of( T data ) auto ditto"
  },
  "phobos/std/digest/sha/Functions/sha384Of.html": {
    "href": "phobos/std/digest/sha/Functions/sha384Of.html",
    "title": "Overloads for - sha384Of | Marmos Demo",
    "keywords": "Overloads for - sha384Of Module std.digest.sha sha384Of(data) <bug: unknown> sha384Of( T data ) auto ditto"
  },
  "phobos/std/digest/sha/Functions/sha512Of.html": {
    "href": "phobos/std/digest/sha/Functions/sha512Of.html",
    "title": "Overloads for - sha512Of | Marmos Demo",
    "keywords": "Overloads for - sha512Of Module std.digest.sha sha512Of(data) <bug: unknown> sha512Of( T data ) auto ditto"
  },
  "phobos/std/digest/sha/Functions/sha512_224Of.html": {
    "href": "phobos/std/digest/sha/Functions/sha512_224Of.html",
    "title": "Overloads for - sha512_224Of | Marmos Demo",
    "keywords": "Overloads for - sha512_224Of Module std.digest.sha sha512_224Of(data) <bug: unknown> sha512_224Of( T data ) auto ditto"
  },
  "phobos/std/digest/sha/Functions/sha512_256Of.html": {
    "href": "phobos/std/digest/sha/Functions/sha512_256Of.html",
    "title": "Overloads for - sha512_256Of | Marmos Demo",
    "keywords": "Overloads for - sha512_256Of Module std.digest.sha sha512_256Of(data) <bug: unknown> sha512_256Of( T data ) auto ditto"
  },
  "phobos/std/digest/sha/Overview.html": {
    "href": "phobos/std/digest/sha/Overview.html",
    "title": "Module - std.digest.sha | Marmos Demo",
    "keywords": "Module - std.digest.sha About Computes SHA1 and SHA2 hashes of arbitrary data. SHA hashes are 20 to 64 byte quantities (depending on the SHA algorithm) that are like a checksum or CRC, but are more robust. $(SCRIPT inhibitQuickIndex = 1;) $(DIVC quickindex, $(BOOKTABLE , $(TR $(TH Category) $(TH Functions) ) $(TR $(TDNW Template API) $(TD $(MYREF SHA1) ) ) $(TR $(TDNW OOP API) $(TD $(MYREF SHA1Digest)) ) $(TR $(TDNW Helpers) $(TD $(MYREF sha1Of)) ) ) ) SHA2 comes in several different versions, all supported by this module SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224 and SHA-512/256. This module conforms to the APIs defined in $(MREF std, digest). To understand the differences between the template and the OOP API, see $(MREF std, digest). This module publicly imports std.digest and can be used as a stand-alone module. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). CTFE Digests do not work in CTFE Authors The routines and algorithms are derived from the $(I Secure Hash Signature Standard (SHS) (FIPS PUB 180-2)). $(BR ) Kai Nacke, Johannes Pfau, Nick Sabalausky References $(UL $(LI $(LINK2 http://csrc.nist.gov/publications/fips/fips180-2/fips180-2withchangenotice.pdf, FIPS PUB180-2)) $(LI $(LINK2 http://software.intel.com/en-us/articles/improving-the-performance-of-the-secure-hash-algorithm-1/, Fast implementation of SHA1)) $(LI $(LINK2 http://en.wikipedia.org/wiki/Secure_Hash_Algorithm, Wikipedia article about SHA)) ) Source: $(PHOBOSSRC std/digest/sha.d) Aliases Name Description bigEndianToNative nativeToBigEndian SHA1 SHA alias for SHA-1, hash is ubyte[20] SHA1Digest OOP API SHA1 and SHA2 implementations. See std.digest for differences between template and OOP API. SHA224 SHA alias for SHA-224, hash is ubyte[28] SHA224Digest ditto SHA256 SHA alias for SHA-256, hash is ubyte[32] SHA256Digest ditto SHA384 SHA alias for SHA-384, hash is ubyte[48] SHA384Digest ditto SHA512 SHA alias for SHA-512, hash is ubyte[64] SHA512_224 SHA alias for SHA-512/224, hash is ubyte[28] SHA512_224Digest ditto SHA512_256 SHA alias for SHA-512/256, hash is ubyte[32] SHA512_256Digest ditto SHA512Digest ditto Structs Name Description SHA Template API SHA1/SHA2 implementation. Supports: SHA-1, SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224 and SHA-512/256. Functions Name Description sha1Of These are convenience aliases for $(REF digest, std,digest) using the SHA implementation. sha224Of ditto sha256Of ditto sha384Of ditto sha512_224Of ditto sha512_256Of ditto sha512Of ditto"
  },
  "phobos/std/digest/sha/SHA/Functions/BigSigma0.html": {
    "href": "phobos/std/digest/sha/SHA/Functions/BigSigma0.html",
    "title": "Overloads for - BigSigma0 | Marmos Demo",
    "keywords": "Overloads for - BigSigma0 Module std.digest.sha Parent SHA BigSigma0(x) uint BigSigma0( uint x ) BigSigma0(x) ulong BigSigma0( ulong x )"
  },
  "phobos/std/digest/sha/SHA/Functions/BigSigma1.html": {
    "href": "phobos/std/digest/sha/SHA/Functions/BigSigma1.html",
    "title": "Overloads for - BigSigma1 | Marmos Demo",
    "keywords": "Overloads for - BigSigma1 Module std.digest.sha Parent SHA BigSigma1(x) uint BigSigma1( uint x ) BigSigma1(x) ulong BigSigma1( ulong x )"
  },
  "phobos/std/digest/sha/SHA/Functions/Parity.html": {
    "href": "phobos/std/digest/sha/SHA/Functions/Parity.html",
    "title": "Overloads for - Parity | Marmos Demo",
    "keywords": "Overloads for - Parity Module std.digest.sha Parent SHA Parity(x, y, z) uint Parity( uint x, uint y, uint z )"
  },
  "phobos/std/digest/sha/SHA/Functions/SmSigma0.html": {
    "href": "phobos/std/digest/sha/SHA/Functions/SmSigma0.html",
    "title": "Overloads for - SmSigma0 | Marmos Demo",
    "keywords": "Overloads for - SmSigma0 Module std.digest.sha Parent SHA SmSigma0(x) uint SmSigma0( uint x ) SmSigma0(x) ulong SmSigma0( ulong x )"
  },
  "phobos/std/digest/sha/SHA/Functions/SmSigma1.html": {
    "href": "phobos/std/digest/sha/SHA/Functions/SmSigma1.html",
    "title": "Overloads for - SmSigma1 | Marmos Demo",
    "keywords": "Overloads for - SmSigma1 Module std.digest.sha Parent SHA SmSigma1(x) uint SmSigma1( uint x ) SmSigma1(x) ulong SmSigma1( ulong x )"
  },
  "phobos/std/digest/sha/SHA/Functions/T_0_15.html": {
    "href": "phobos/std/digest/sha/SHA/Functions/T_0_15.html",
    "title": "Overloads for - T_0_15 | Marmos Demo",
    "keywords": "Overloads for - T_0_15 Module std.digest.sha Parent SHA T_0_15(i, input, W, A, B, C, D, E, T) void T_0_15( int i, <bug: unknown> input, <bug: unknown> W, uint A, uint B, uint C, uint D, uint E, uint T ) static"
  },
  "phobos/std/digest/sha/SHA/Functions/T_16_19.html": {
    "href": "phobos/std/digest/sha/SHA/Functions/T_16_19.html",
    "title": "Overloads for - T_16_19 | Marmos Demo",
    "keywords": "Overloads for - T_16_19 Module std.digest.sha Parent SHA T_16_19(i, W, A, B, C, D, E, T) void T_16_19( int i, <bug: unknown> W, uint A, uint B, uint C, uint D, uint E, uint T ) static"
  },
  "phobos/std/digest/sha/SHA/Functions/T_20_39.html": {
    "href": "phobos/std/digest/sha/SHA/Functions/T_20_39.html",
    "title": "Overloads for - T_20_39 | Marmos Demo",
    "keywords": "Overloads for - T_20_39 Module std.digest.sha Parent SHA T_20_39(i, W, A, B, C, D, E, T) void T_20_39( int i, <bug: unknown> W, uint A, uint B, uint C, uint D, uint E, uint T ) static"
  },
  "phobos/std/digest/sha/SHA/Functions/T_40_59.html": {
    "href": "phobos/std/digest/sha/SHA/Functions/T_40_59.html",
    "title": "Overloads for - T_40_59 | Marmos Demo",
    "keywords": "Overloads for - T_40_59 Module std.digest.sha Parent SHA T_40_59(i, W, A, B, C, D, E, T) void T_40_59( int i, <bug: unknown> W, uint A, uint B, uint C, uint D, uint E, uint T ) static"
  },
  "phobos/std/digest/sha/SHA/Functions/T_60_79.html": {
    "href": "phobos/std/digest/sha/SHA/Functions/T_60_79.html",
    "title": "Overloads for - T_60_79 | Marmos Demo",
    "keywords": "Overloads for - T_60_79 Module std.digest.sha Parent SHA T_60_79(i, W, A, B, C, D, E, T) void T_60_79( int i, <bug: unknown> W, uint A, uint B, uint C, uint D, uint E, uint T ) static"
  },
  "phobos/std/digest/sha/SHA/Functions/finish.html": {
    "href": "phobos/std/digest/sha/SHA/Functions/finish.html",
    "title": "Overloads for - finish | Marmos Demo",
    "keywords": "Overloads for - finish Module std.digest.sha Parent SHA finish() <bug: unknown> finish( ) Returns the finished SHA hash. This also calls $(LREF start) to reset the internal state."
  },
  "phobos/std/digest/sha/SHA/Functions/put.html": {
    "href": "phobos/std/digest/sha/SHA/Functions/put.html",
    "title": "Overloads for - put | Marmos Demo",
    "keywords": "Overloads for - put Module std.digest.sha Parent SHA put(input) void put( <bug: unknown> input ) Use this to feed the digest with data. Also implements the $(REF isOutputRange, std,range,primitives) interface for ubyte and const(ubyte)[] ."
  },
  "phobos/std/digest/sha/SHA/Functions/start.html": {
    "href": "phobos/std/digest/sha/SHA/Functions/start.html",
    "title": "Overloads for - start | Marmos Demo",
    "keywords": "Overloads for - start Module std.digest.sha Parent SHA start() void start( ) SHA initialization. Begins an SHA1/SHA2 operation. Note For this SHA Digest implementation calling start after default construction is not necessary. Calling start is only necessary to reset the Digest. Generic code which deals with different Digest types should always call start though. Example -------- SHA1 digest; //digest.start(); //Not necessary digest.put(0); --------"
  },
  "phobos/std/digest/sha/SHA/Functions/transform.html": {
    "href": "phobos/std/digest/sha/SHA/Functions/transform.html",
    "title": "Overloads for - transform | Marmos Demo",
    "keywords": "Overloads for - transform Module std.digest.sha Parent SHA transform(state, block) void transform( <bug: unknown> state, <bug: unknown> block ) static"
  },
  "phobos/std/digest/sha/SHA/Functions/transformX86.html": {
    "href": "phobos/std/digest/sha/SHA/Functions/transformX86.html",
    "title": "Overloads for - transformX86 | Marmos Demo",
    "keywords": "Overloads for - transformX86 Module std.digest.sha Parent SHA transformX86(state, block) void transformX86( <bug: unknown> state, <bug: unknown> block ) static"
  },
  "phobos/std/digest/sha/Structs/SHA.html": {
    "href": "phobos/std/digest/sha/Structs/SHA.html",
    "title": "Struct - SHA | Marmos Demo",
    "keywords": "Struct - SHA Module std.digest.sha public struct SHA { // uint BigSigma0( uint x ) ; // ulong BigSigma0( ulong x ) ; // uint BigSigma1( uint x ) ; // ulong BigSigma1( ulong x ) ; // Returns the finished SHA hash. This also calls $(LREF start) to reset the internal state. <bug: unknown> finish( ) ; // uint Parity( uint x, uint y, uint z ) ; // Use this to feed the digest with data. Also implements the $(REF isOutputRange, std,range,primitives) interface for `ubyte` and `const(ubyte)[]` . void put( <bug: unknown> input ) ; // uint SmSigma0( uint x ) ; // ulong SmSigma0( ulong x ) ; // uint SmSigma1( uint x ) ; // ulong SmSigma1( ulong x ) ; // SHA initialization. Begins an SHA1/SHA2 operation. void start( ) ; // void T_0_15( int i, <bug: unknown> input, <bug: unknown> W, uint A, uint B, uint C, uint D, uint E, uint T ) static; // void T_16_19( int i, <bug: unknown> W, uint A, uint B, uint C, uint D, uint E, uint T ) static; // void T_20_39( int i, <bug: unknown> W, uint A, uint B, uint C, uint D, uint E, uint T ) static; // void T_40_59( int i, <bug: unknown> W, uint A, uint B, uint C, uint D, uint E, uint T ) static; // void T_60_79( int i, <bug: unknown> W, uint A, uint B, uint C, uint D, uint E, uint T ) static; // void transform( <bug: unknown> state, <bug: unknown> block ) static; // void transformX86( <bug: unknown> state, <bug: unknown> block ) static; // __enumMember blockSize; // <bug: unknown> buffer; // static immutable <bug: unknown> constants; // <bug: unknown> count; // static immutable <bug: unknown> padding; // <bug: unknown> state; } About Template API SHA1/SHA2 implementation. Supports: SHA-1, SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224 and SHA-512/256. The hashBlockSize and digestSize are in bits. However, it's likely easier to simply use the convenience aliases: SHA1, SHA224, SHA256, SHA384, SHA512, SHA512_224 and SHA512_256. See std.digest for differences between template and OOP API. Functions Name Description BigSigma0 BigSigma1 finish Returns the finished SHA hash. This also calls $(LREF start) to reset the internal state. Parity put Use this to feed the digest with data. Also implements the $(REF isOutputRange, std,range,primitives) interface for ubyte and const(ubyte)[] . SmSigma0 SmSigma1 start SHA initialization. Begins an SHA1/SHA2 operation. T_0_15 T_16_19 T_20_39 T_40_59 T_60_79 transform transformX86 Variables Name Description blockSize buffer constants count padding state"
  },
  "phobos/std/encoding/Classes/EncodingException.html": {
    "href": "phobos/std/encoding/Classes/EncodingException.html",
    "title": "Class - EncodingException | Marmos Demo",
    "keywords": "Class - EncodingException Module std.encoding public class EncodingException { } About The base class for exceptions thrown by this module"
  },
  "phobos/std/encoding/Classes/EncodingScheme.html": {
    "href": "phobos/std/encoding/Classes/EncodingScheme.html",
    "title": "Class - EncodingScheme | Marmos Demo",
    "keywords": "Class - EncodingScheme Module std.encoding public class EncodingScheme { // Returns true if the character c can be represented in this encoding scheme. bool canEncode( dchar c ) abstract; // Obtains a subclass of EncodingScheme which is capable of encoding and decoding the named encoding scheme. EncodingScheme create( string encodingName ) static; // Decodes a single code point. dchar decode( <bug: unknown> s ) abstract; // Encodes a single code point into a user-supplied, fixed-size buffer. size_t encode( dchar c, <bug: unknown> buffer ) abstract; // Returns the number of ubytes required to encode this code point. size_t encodedLength( dchar c ) abstract; // Returns true if the array is encoded correctly bool isValid( <bug: unknown> s ) ; // Returns an array of all known names for this encoding scheme <bug: unknown> names( ) abstract; // void register( string className ) static; // Returns the sequence of ubytes to be used to represent any character which cannot be represented in the encoding scheme. <bug: unknown> replacementSequence( ) abstract; // Decodes a single code point. The input does not have to be valid. dchar safeDecode( <bug: unknown> s ) abstract; // Returns the standard name of the encoding scheme string toString( ) abstract override; // __gshared <bug: unknown> supported; // __gshared <bug: unknown> supportedFactories; } About Abstract base class of all encoding schemes Functions Name Description canEncode Returns true if the character c can be represented in this encoding scheme. create Obtains a subclass of EncodingScheme which is capable of encoding and decoding the named encoding scheme. decode Decodes a single code point. encode Encodes a single code point into a user-supplied, fixed-size buffer. encodedLength Returns the number of ubytes required to encode this code point. isValid Returns true if the array is encoded correctly names Returns an array of all known names for this encoding scheme register replacementSequence Returns the sequence of ubytes to be used to represent any character which cannot be represented in the encoding scheme. safeDecode Decodes a single code point. The input does not have to be valid. toString Returns the standard name of the encoding scheme Variables Name Description supported supportedFactories"
  },
  "phobos/std/encoding/Classes/EncodingSchemeASCII.html": {
    "href": "phobos/std/encoding/Classes/EncodingSchemeASCII.html",
    "title": "Class - EncodingSchemeASCII | Marmos Demo",
    "keywords": "Class - EncodingSchemeASCII Module std.encoding public class EncodingSchemeASCII { // bool canEncode( dchar c ) override; // dchar decode( <bug: unknown> s ) override; // size_t encode( dchar c, <bug: unknown> buffer ) override; // size_t encodedLength( dchar c ) override; // <bug: unknown> names( ) override; // <bug: unknown> replacementSequence( ) override; // dchar safeDecode( <bug: unknown> s ) override; // string toString( ) override; } About EncodingScheme to handle ASCII This scheme recognises the following names \"ANSI_X3.4-1968\", \"ANSI_X3.4-1986\", \"ASCII\", \"IBM367\", \"ISO646-US\", \"ISO_646.irv:1991\", \"US-ASCII\", \"cp367\", \"csASCII\" \"iso-ir-6\", \"us\" Functions Name Description canEncode decode encode encodedLength names replacementSequence safeDecode toString"
  },
  "phobos/std/encoding/Classes/EncodingSchemeLatin1.html": {
    "href": "phobos/std/encoding/Classes/EncodingSchemeLatin1.html",
    "title": "Class - EncodingSchemeLatin1 | Marmos Demo",
    "keywords": "Class - EncodingSchemeLatin1 Module std.encoding public class EncodingSchemeLatin1 { // bool canEncode( dchar c ) override; // dchar decode( <bug: unknown> s ) override; // size_t encode( dchar c, <bug: unknown> buffer ) override; // size_t encodedLength( dchar c ) override; // <bug: unknown> names( ) override; // <bug: unknown> replacementSequence( ) override; // dchar safeDecode( <bug: unknown> s ) override; // string toString( ) override; } About EncodingScheme to handle Latin-1 This scheme recognises the following names \"CP819\", \"IBM819\", \"ISO-8859-1\", \"ISO_8859-1\", \"ISO_8859-1:1987\", \"csISOLatin1\", \"iso-ir-100\", \"l1\", \"latin1\" Functions Name Description canEncode decode encode encodedLength names replacementSequence safeDecode toString"
  },
  "phobos/std/encoding/Classes/EncodingSchemeLatin2.html": {
    "href": "phobos/std/encoding/Classes/EncodingSchemeLatin2.html",
    "title": "Class - EncodingSchemeLatin2 | Marmos Demo",
    "keywords": "Class - EncodingSchemeLatin2 Module std.encoding public class EncodingSchemeLatin2 { // bool canEncode( dchar c ) override; // dchar decode( <bug: unknown> s ) override; // size_t encode( dchar c, <bug: unknown> buffer ) override; // size_t encodedLength( dchar c ) override; // <bug: unknown> names( ) override; // <bug: unknown> replacementSequence( ) override; // dchar safeDecode( <bug: unknown> s ) override; // string toString( ) override; } About EncodingScheme to handle Latin-2 This scheme recognises the following names \"Latin 2\", \"ISO-8859-2\", \"ISO_8859-2\", \"ISO_8859-2:1999\", \"Windows-28592\" Functions Name Description canEncode decode encode encodedLength names replacementSequence safeDecode toString"
  },
  "phobos/std/encoding/Classes/EncodingSchemeUtf16Native.html": {
    "href": "phobos/std/encoding/Classes/EncodingSchemeUtf16Native.html",
    "title": "Class - EncodingSchemeUtf16Native | Marmos Demo",
    "keywords": "Class - EncodingSchemeUtf16Native Module std.encoding public class EncodingSchemeUtf16Native { // bool canEncode( dchar c ) override; // dchar decode( <bug: unknown> s ) override; // size_t encode( dchar c, <bug: unknown> buffer ) override; // size_t encodedLength( dchar c ) override; // <bug: unknown> names( ) override; // <bug: unknown> replacementSequence( ) override; // dchar safeDecode( <bug: unknown> s ) override; // string toString( ) override; // string NAME; // string NAME; } About EncodingScheme to handle UTF-16 in native byte order This scheme recognises the following names \"UTF-16LE\" (little-endian architecture only) \"UTF-16BE\" (big-endian architecture only) Functions Name Description canEncode decode encode encodedLength names replacementSequence safeDecode toString Variables Name Description NAME NAME"
  },
  "phobos/std/encoding/Classes/EncodingSchemeUtf32Native.html": {
    "href": "phobos/std/encoding/Classes/EncodingSchemeUtf32Native.html",
    "title": "Class - EncodingSchemeUtf32Native | Marmos Demo",
    "keywords": "Class - EncodingSchemeUtf32Native Module std.encoding public class EncodingSchemeUtf32Native { // bool canEncode( dchar c ) override; // dchar decode( <bug: unknown> s ) override; // size_t encode( dchar c, <bug: unknown> buffer ) override; // size_t encodedLength( dchar c ) override; // <bug: unknown> names( ) override; // <bug: unknown> replacementSequence( ) override; // dchar safeDecode( <bug: unknown> s ) override; // string toString( ) override; // string NAME; // string NAME; } About EncodingScheme to handle UTF-32 in native byte order This scheme recognises the following names \"UTF-32LE\" (little-endian architecture only) \"UTF-32BE\" (big-endian architecture only) Functions Name Description canEncode decode encode encodedLength names replacementSequence safeDecode toString Variables Name Description NAME NAME"
  },
  "phobos/std/encoding/Classes/EncodingSchemeUtf8.html": {
    "href": "phobos/std/encoding/Classes/EncodingSchemeUtf8.html",
    "title": "Class - EncodingSchemeUtf8 | Marmos Demo",
    "keywords": "Class - EncodingSchemeUtf8 Module std.encoding public class EncodingSchemeUtf8 { // bool canEncode( dchar c ) override; // dchar decode( <bug: unknown> s ) override; // size_t encode( dchar c, <bug: unknown> buffer ) override; // size_t encodedLength( dchar c ) override; // <bug: unknown> names( ) override; // <bug: unknown> replacementSequence( ) override; // dchar safeDecode( <bug: unknown> s ) override; // string toString( ) override; } About EncodingScheme to handle UTF-8 This scheme recognises the following names \"UTF-8\" Functions Name Description canEncode decode encode encodedLength names replacementSequence safeDecode toString"
  },
  "phobos/std/encoding/Classes/EncodingSchemeWindows1250.html": {
    "href": "phobos/std/encoding/Classes/EncodingSchemeWindows1250.html",
    "title": "Class - EncodingSchemeWindows1250 | Marmos Demo",
    "keywords": "Class - EncodingSchemeWindows1250 Module std.encoding public class EncodingSchemeWindows1250 { // bool canEncode( dchar c ) override; // dchar decode( <bug: unknown> s ) override; // size_t encode( dchar c, <bug: unknown> buffer ) override; // size_t encodedLength( dchar c ) override; // <bug: unknown> names( ) override; // <bug: unknown> replacementSequence( ) override; // dchar safeDecode( <bug: unknown> s ) override; // string toString( ) override; } About EncodingScheme to handle Windows-1250 This scheme recognises the following names \"windows-1250\" Functions Name Description canEncode decode encode encodedLength names replacementSequence safeDecode toString"
  },
  "phobos/std/encoding/Classes/EncodingSchemeWindows1251.html": {
    "href": "phobos/std/encoding/Classes/EncodingSchemeWindows1251.html",
    "title": "Class - EncodingSchemeWindows1251 | Marmos Demo",
    "keywords": "Class - EncodingSchemeWindows1251 Module std.encoding public class EncodingSchemeWindows1251 { // bool canEncode( dchar c ) override; // dchar decode( <bug: unknown> s ) override; // size_t encode( dchar c, <bug: unknown> buffer ) override; // size_t encodedLength( dchar c ) override; // <bug: unknown> names( ) override; // <bug: unknown> replacementSequence( ) override; // dchar safeDecode( <bug: unknown> s ) override; // string toString( ) override; } About EncodingScheme to handle Windows-1251 This scheme recognises the following names \"windows-1251\" Functions Name Description canEncode decode encode encodedLength names replacementSequence safeDecode toString"
  },
  "phobos/std/encoding/Classes/EncodingSchemeWindows1252.html": {
    "href": "phobos/std/encoding/Classes/EncodingSchemeWindows1252.html",
    "title": "Class - EncodingSchemeWindows1252 | Marmos Demo",
    "keywords": "Class - EncodingSchemeWindows1252 Module std.encoding public class EncodingSchemeWindows1252 { // bool canEncode( dchar c ) override; // dchar decode( <bug: unknown> s ) override; // size_t encode( dchar c, <bug: unknown> buffer ) override; // size_t encodedLength( dchar c ) override; // <bug: unknown> names( ) override; // <bug: unknown> replacementSequence( ) override; // dchar safeDecode( <bug: unknown> s ) override; // string toString( ) override; } About EncodingScheme to handle Windows-1252 This scheme recognises the following names \"windows-1252\" Functions Name Description canEncode decode encode encodedLength names replacementSequence safeDecode toString"
  },
  "phobos/std/encoding/Classes/UnrecognizedEncodingException.html": {
    "href": "phobos/std/encoding/Classes/UnrecognizedEncodingException.html",
    "title": "Class - UnrecognizedEncodingException | Marmos Demo",
    "keywords": "Class - UnrecognizedEncodingException Module std.encoding public class UnrecognizedEncodingException { }"
  },
  "phobos/std/encoding/CodePoints/Functions/opApply.html": {
    "href": "phobos/std/encoding/CodePoints/Functions/opApply.html",
    "title": "Overloads for - opApply | Marmos Demo",
    "keywords": "Overloads for - opApply Module std.encoding Parent CodePoints opApply(dg) int opApply( <bug: unknown> dg ) opApply(dg) int opApply( <bug: unknown> dg )"
  },
  "phobos/std/encoding/CodePoints/Functions/opApplyReverse.html": {
    "href": "phobos/std/encoding/CodePoints/Functions/opApplyReverse.html",
    "title": "Overloads for - opApplyReverse | Marmos Demo",
    "keywords": "Overloads for - opApplyReverse Module std.encoding Parent CodePoints opApplyReverse(dg) int opApplyReverse( <bug: unknown> dg ) opApplyReverse(dg) int opApplyReverse( <bug: unknown> dg )"
  },
  "phobos/std/encoding/CodeUnits/Functions/opApply.html": {
    "href": "phobos/std/encoding/CodeUnits/Functions/opApply.html",
    "title": "Overloads for - opApply | Marmos Demo",
    "keywords": "Overloads for - opApply Module std.encoding Parent CodeUnits opApply(dg) int opApply( <bug: unknown> dg )"
  },
  "phobos/std/encoding/CodeUnits/Functions/opApplyReverse.html": {
    "href": "phobos/std/encoding/CodeUnits/Functions/opApplyReverse.html",
    "title": "Overloads for - opApplyReverse | Marmos Demo",
    "keywords": "Overloads for - opApplyReverse Module std.encoding Parent CodeUnits opApplyReverse(dg) int opApplyReverse( <bug: unknown> dg )"
  },
  "phobos/std/encoding/EncodingScheme/Functions/canEncode.html": {
    "href": "phobos/std/encoding/EncodingScheme/Functions/canEncode.html",
    "title": "Overloads for - canEncode | Marmos Demo",
    "keywords": "Overloads for - canEncode Module std.encoding Parent EncodingScheme canEncode(c) bool canEncode( dchar c ) abstract Returns true if the character c can be represented in this encoding scheme."
  },
  "phobos/std/encoding/EncodingScheme/Functions/create.html": {
    "href": "phobos/std/encoding/EncodingScheme/Functions/create.html",
    "title": "Overloads for - create | Marmos Demo",
    "keywords": "Overloads for - create Module std.encoding Parent EncodingScheme create(encodingName) EncodingScheme create( string encodingName ) static Obtains a subclass of EncodingScheme which is capable of encoding and decoding the named encoding scheme. This function is only aware of EncodingSchemes which have been registered with the register() function. Example --------------------------------------------------- auto scheme = EncodingScheme.create(\"Amiga-1251\"); ---------------------------------------------------"
  },
  "phobos/std/encoding/EncodingScheme/Functions/decode.html": {
    "href": "phobos/std/encoding/EncodingScheme/Functions/decode.html",
    "title": "Overloads for - decode | Marmos Demo",
    "keywords": "Overloads for - decode Module std.encoding Parent EncodingScheme decode(s) dchar decode( <bug: unknown> s ) abstract Decodes a single code point. This function removes one or more ubytes from the start of an array, and returns the decoded code point which those ubytes represent. The input to this function MUST be validly encoded. Params s <bug: unknown> the array whose first code point is to be decoded"
  },
  "phobos/std/encoding/EncodingScheme/Functions/encode.html": {
    "href": "phobos/std/encoding/EncodingScheme/Functions/encode.html",
    "title": "Overloads for - encode | Marmos Demo",
    "keywords": "Overloads for - encode Module std.encoding Parent EncodingScheme encode(c, buffer) size_t encode( dchar c, <bug: unknown> buffer ) abstract Encodes a single code point into a user-supplied, fixed-size buffer. This function encodes a single code point into one or more ubytes. The supplied buffer must be code unit aligned. (For example, UTF-16LE or UTF-16BE must be wchar-aligned, UTF-32LE or UTF-32BE must be dchar-aligned, etc.) The input to this function MUST be a valid code point. Params c dchar the code point to be encoded buffer <bug: unknown> the destination array Returns the number of ubytes written."
  },
  "phobos/std/encoding/EncodingScheme/Functions/encodedLength.html": {
    "href": "phobos/std/encoding/EncodingScheme/Functions/encodedLength.html",
    "title": "Overloads for - encodedLength | Marmos Demo",
    "keywords": "Overloads for - encodedLength Module std.encoding Parent EncodingScheme encodedLength(c) size_t encodedLength( dchar c ) abstract Returns the number of ubytes required to encode this code point. The input to this function MUST be a valid code point. Params c dchar the code point to be encoded Returns the number of ubytes required."
  },
  "phobos/std/encoding/EncodingScheme/Functions/isValid.html": {
    "href": "phobos/std/encoding/EncodingScheme/Functions/isValid.html",
    "title": "Overloads for - isValid | Marmos Demo",
    "keywords": "Overloads for - isValid Module std.encoding Parent EncodingScheme isValid(s) bool isValid( <bug: unknown> s ) Returns true if the array is encoded correctly Params s <bug: unknown> the array to be tested"
  },
  "phobos/std/encoding/EncodingScheme/Functions/names.html": {
    "href": "phobos/std/encoding/EncodingScheme/Functions/names.html",
    "title": "Overloads for - names | Marmos Demo",
    "keywords": "Overloads for - names Module std.encoding Parent EncodingScheme names() <bug: unknown> names( ) abstract Returns an array of all known names for this encoding scheme"
  },
  "phobos/std/encoding/EncodingScheme/Functions/register.html": {
    "href": "phobos/std/encoding/EncodingScheme/Functions/register.html",
    "title": "Overloads for - register | Marmos Demo",
    "keywords": "Overloads for - register Module std.encoding Parent EncodingScheme register(className) void register( string className ) static"
  },
  "phobos/std/encoding/EncodingScheme/Functions/replacementSequence.html": {
    "href": "phobos/std/encoding/EncodingScheme/Functions/replacementSequence.html",
    "title": "Overloads for - replacementSequence | Marmos Demo",
    "keywords": "Overloads for - replacementSequence Module std.encoding Parent EncodingScheme replacementSequence() <bug: unknown> replacementSequence( ) abstract Returns the sequence of ubytes to be used to represent any character which cannot be represented in the encoding scheme. Normally this will be a representation of some substitution character, such as U+FFFD or '?'."
  },
  "phobos/std/encoding/EncodingScheme/Functions/safeDecode.html": {
    "href": "phobos/std/encoding/EncodingScheme/Functions/safeDecode.html",
    "title": "Overloads for - safeDecode | Marmos Demo",
    "keywords": "Overloads for - safeDecode Module std.encoding Parent EncodingScheme safeDecode(s) dchar safeDecode( <bug: unknown> s ) abstract Decodes a single code point. The input does not have to be valid. This function removes one or more ubytes from the start of an array, and returns the decoded code point which those ubytes represent. This function will accept an invalidly encoded array as input. If an invalid sequence is found at the start of the string, this function will remove it, and return the value INVALID_SEQUENCE. Params s <bug: unknown> the array whose first code point is to be decoded"
  },
  "phobos/std/encoding/EncodingScheme/Functions/toString.html": {
    "href": "phobos/std/encoding/EncodingScheme/Functions/toString.html",
    "title": "Overloads for - toString | Marmos Demo",
    "keywords": "Overloads for - toString Module std.encoding Parent EncodingScheme toString() string toString( ) abstract override Returns the standard name of the encoding scheme"
  },
  "phobos/std/encoding/EncodingSchemeASCII/Functions/canEncode.html": {
    "href": "phobos/std/encoding/EncodingSchemeASCII/Functions/canEncode.html",
    "title": "Overloads for - canEncode | Marmos Demo",
    "keywords": "Overloads for - canEncode Module std.encoding Parent EncodingSchemeASCII canEncode(c) bool canEncode( dchar c ) override"
  },
  "phobos/std/encoding/EncodingSchemeASCII/Functions/decode.html": {
    "href": "phobos/std/encoding/EncodingSchemeASCII/Functions/decode.html",
    "title": "Overloads for - decode | Marmos Demo",
    "keywords": "Overloads for - decode Module std.encoding Parent EncodingSchemeASCII decode(s) dchar decode( <bug: unknown> s ) override"
  },
  "phobos/std/encoding/EncodingSchemeASCII/Functions/encode.html": {
    "href": "phobos/std/encoding/EncodingSchemeASCII/Functions/encode.html",
    "title": "Overloads for - encode | Marmos Demo",
    "keywords": "Overloads for - encode Module std.encoding Parent EncodingSchemeASCII encode(c, buffer) size_t encode( dchar c, <bug: unknown> buffer ) override"
  },
  "phobos/std/encoding/EncodingSchemeASCII/Functions/encodedLength.html": {
    "href": "phobos/std/encoding/EncodingSchemeASCII/Functions/encodedLength.html",
    "title": "Overloads for - encodedLength | Marmos Demo",
    "keywords": "Overloads for - encodedLength Module std.encoding Parent EncodingSchemeASCII encodedLength(c) size_t encodedLength( dchar c ) override"
  },
  "phobos/std/encoding/EncodingSchemeASCII/Functions/names.html": {
    "href": "phobos/std/encoding/EncodingSchemeASCII/Functions/names.html",
    "title": "Overloads for - names | Marmos Demo",
    "keywords": "Overloads for - names Module std.encoding Parent EncodingSchemeASCII names() <bug: unknown> names( ) override"
  },
  "phobos/std/encoding/EncodingSchemeASCII/Functions/replacementSequence.html": {
    "href": "phobos/std/encoding/EncodingSchemeASCII/Functions/replacementSequence.html",
    "title": "Overloads for - replacementSequence | Marmos Demo",
    "keywords": "Overloads for - replacementSequence Module std.encoding Parent EncodingSchemeASCII replacementSequence() <bug: unknown> replacementSequence( ) override"
  },
  "phobos/std/encoding/EncodingSchemeASCII/Functions/safeDecode.html": {
    "href": "phobos/std/encoding/EncodingSchemeASCII/Functions/safeDecode.html",
    "title": "Overloads for - safeDecode | Marmos Demo",
    "keywords": "Overloads for - safeDecode Module std.encoding Parent EncodingSchemeASCII safeDecode(s) dchar safeDecode( <bug: unknown> s ) override"
  },
  "phobos/std/encoding/EncodingSchemeASCII/Functions/toString.html": {
    "href": "phobos/std/encoding/EncodingSchemeASCII/Functions/toString.html",
    "title": "Overloads for - toString | Marmos Demo",
    "keywords": "Overloads for - toString Module std.encoding Parent EncodingSchemeASCII toString() string toString( ) override"
  },
  "phobos/std/encoding/EncodingSchemeLatin1/Functions/canEncode.html": {
    "href": "phobos/std/encoding/EncodingSchemeLatin1/Functions/canEncode.html",
    "title": "Overloads for - canEncode | Marmos Demo",
    "keywords": "Overloads for - canEncode Module std.encoding Parent EncodingSchemeLatin1 canEncode(c) bool canEncode( dchar c ) override"
  },
  "phobos/std/encoding/EncodingSchemeLatin1/Functions/decode.html": {
    "href": "phobos/std/encoding/EncodingSchemeLatin1/Functions/decode.html",
    "title": "Overloads for - decode | Marmos Demo",
    "keywords": "Overloads for - decode Module std.encoding Parent EncodingSchemeLatin1 decode(s) dchar decode( <bug: unknown> s ) override"
  },
  "phobos/std/encoding/EncodingSchemeLatin1/Functions/encode.html": {
    "href": "phobos/std/encoding/EncodingSchemeLatin1/Functions/encode.html",
    "title": "Overloads for - encode | Marmos Demo",
    "keywords": "Overloads for - encode Module std.encoding Parent EncodingSchemeLatin1 encode(c, buffer) size_t encode( dchar c, <bug: unknown> buffer ) override"
  },
  "phobos/std/encoding/EncodingSchemeLatin1/Functions/encodedLength.html": {
    "href": "phobos/std/encoding/EncodingSchemeLatin1/Functions/encodedLength.html",
    "title": "Overloads for - encodedLength | Marmos Demo",
    "keywords": "Overloads for - encodedLength Module std.encoding Parent EncodingSchemeLatin1 encodedLength(c) size_t encodedLength( dchar c ) override"
  },
  "phobos/std/encoding/EncodingSchemeLatin1/Functions/names.html": {
    "href": "phobos/std/encoding/EncodingSchemeLatin1/Functions/names.html",
    "title": "Overloads for - names | Marmos Demo",
    "keywords": "Overloads for - names Module std.encoding Parent EncodingSchemeLatin1 names() <bug: unknown> names( ) override"
  },
  "phobos/std/encoding/EncodingSchemeLatin1/Functions/replacementSequence.html": {
    "href": "phobos/std/encoding/EncodingSchemeLatin1/Functions/replacementSequence.html",
    "title": "Overloads for - replacementSequence | Marmos Demo",
    "keywords": "Overloads for - replacementSequence Module std.encoding Parent EncodingSchemeLatin1 replacementSequence() <bug: unknown> replacementSequence( ) override"
  },
  "phobos/std/encoding/EncodingSchemeLatin1/Functions/safeDecode.html": {
    "href": "phobos/std/encoding/EncodingSchemeLatin1/Functions/safeDecode.html",
    "title": "Overloads for - safeDecode | Marmos Demo",
    "keywords": "Overloads for - safeDecode Module std.encoding Parent EncodingSchemeLatin1 safeDecode(s) dchar safeDecode( <bug: unknown> s ) override"
  },
  "phobos/std/encoding/EncodingSchemeLatin1/Functions/toString.html": {
    "href": "phobos/std/encoding/EncodingSchemeLatin1/Functions/toString.html",
    "title": "Overloads for - toString | Marmos Demo",
    "keywords": "Overloads for - toString Module std.encoding Parent EncodingSchemeLatin1 toString() string toString( ) override"
  },
  "phobos/std/encoding/EncodingSchemeLatin2/Functions/canEncode.html": {
    "href": "phobos/std/encoding/EncodingSchemeLatin2/Functions/canEncode.html",
    "title": "Overloads for - canEncode | Marmos Demo",
    "keywords": "Overloads for - canEncode Module std.encoding Parent EncodingSchemeLatin2 canEncode(c) bool canEncode( dchar c ) override"
  },
  "phobos/std/encoding/EncodingSchemeLatin2/Functions/decode.html": {
    "href": "phobos/std/encoding/EncodingSchemeLatin2/Functions/decode.html",
    "title": "Overloads for - decode | Marmos Demo",
    "keywords": "Overloads for - decode Module std.encoding Parent EncodingSchemeLatin2 decode(s) dchar decode( <bug: unknown> s ) override"
  },
  "phobos/std/encoding/EncodingSchemeLatin2/Functions/encode.html": {
    "href": "phobos/std/encoding/EncodingSchemeLatin2/Functions/encode.html",
    "title": "Overloads for - encode | Marmos Demo",
    "keywords": "Overloads for - encode Module std.encoding Parent EncodingSchemeLatin2 encode(c, buffer) size_t encode( dchar c, <bug: unknown> buffer ) override"
  },
  "phobos/std/encoding/EncodingSchemeLatin2/Functions/encodedLength.html": {
    "href": "phobos/std/encoding/EncodingSchemeLatin2/Functions/encodedLength.html",
    "title": "Overloads for - encodedLength | Marmos Demo",
    "keywords": "Overloads for - encodedLength Module std.encoding Parent EncodingSchemeLatin2 encodedLength(c) size_t encodedLength( dchar c ) override"
  },
  "phobos/std/encoding/EncodingSchemeLatin2/Functions/names.html": {
    "href": "phobos/std/encoding/EncodingSchemeLatin2/Functions/names.html",
    "title": "Overloads for - names | Marmos Demo",
    "keywords": "Overloads for - names Module std.encoding Parent EncodingSchemeLatin2 names() <bug: unknown> names( ) override"
  },
  "phobos/std/encoding/EncodingSchemeLatin2/Functions/replacementSequence.html": {
    "href": "phobos/std/encoding/EncodingSchemeLatin2/Functions/replacementSequence.html",
    "title": "Overloads for - replacementSequence | Marmos Demo",
    "keywords": "Overloads for - replacementSequence Module std.encoding Parent EncodingSchemeLatin2 replacementSequence() <bug: unknown> replacementSequence( ) override"
  },
  "phobos/std/encoding/EncodingSchemeLatin2/Functions/safeDecode.html": {
    "href": "phobos/std/encoding/EncodingSchemeLatin2/Functions/safeDecode.html",
    "title": "Overloads for - safeDecode | Marmos Demo",
    "keywords": "Overloads for - safeDecode Module std.encoding Parent EncodingSchemeLatin2 safeDecode(s) dchar safeDecode( <bug: unknown> s ) override"
  },
  "phobos/std/encoding/EncodingSchemeLatin2/Functions/toString.html": {
    "href": "phobos/std/encoding/EncodingSchemeLatin2/Functions/toString.html",
    "title": "Overloads for - toString | Marmos Demo",
    "keywords": "Overloads for - toString Module std.encoding Parent EncodingSchemeLatin2 toString() string toString( ) override"
  },
  "phobos/std/encoding/EncodingSchemeUtf16Native/Functions/canEncode.html": {
    "href": "phobos/std/encoding/EncodingSchemeUtf16Native/Functions/canEncode.html",
    "title": "Overloads for - canEncode | Marmos Demo",
    "keywords": "Overloads for - canEncode Module std.encoding Parent EncodingSchemeUtf16Native canEncode(c) bool canEncode( dchar c ) override"
  },
  "phobos/std/encoding/EncodingSchemeUtf16Native/Functions/decode.html": {
    "href": "phobos/std/encoding/EncodingSchemeUtf16Native/Functions/decode.html",
    "title": "Overloads for - decode | Marmos Demo",
    "keywords": "Overloads for - decode Module std.encoding Parent EncodingSchemeUtf16Native decode(s) dchar decode( <bug: unknown> s ) override"
  },
  "phobos/std/encoding/EncodingSchemeUtf16Native/Functions/encode.html": {
    "href": "phobos/std/encoding/EncodingSchemeUtf16Native/Functions/encode.html",
    "title": "Overloads for - encode | Marmos Demo",
    "keywords": "Overloads for - encode Module std.encoding Parent EncodingSchemeUtf16Native encode(c, buffer) size_t encode( dchar c, <bug: unknown> buffer ) override"
  },
  "phobos/std/encoding/EncodingSchemeUtf16Native/Functions/encodedLength.html": {
    "href": "phobos/std/encoding/EncodingSchemeUtf16Native/Functions/encodedLength.html",
    "title": "Overloads for - encodedLength | Marmos Demo",
    "keywords": "Overloads for - encodedLength Module std.encoding Parent EncodingSchemeUtf16Native encodedLength(c) size_t encodedLength( dchar c ) override"
  },
  "phobos/std/encoding/EncodingSchemeUtf16Native/Functions/names.html": {
    "href": "phobos/std/encoding/EncodingSchemeUtf16Native/Functions/names.html",
    "title": "Overloads for - names | Marmos Demo",
    "keywords": "Overloads for - names Module std.encoding Parent EncodingSchemeUtf16Native names() <bug: unknown> names( ) override"
  },
  "phobos/std/encoding/EncodingSchemeUtf16Native/Functions/replacementSequence.html": {
    "href": "phobos/std/encoding/EncodingSchemeUtf16Native/Functions/replacementSequence.html",
    "title": "Overloads for - replacementSequence | Marmos Demo",
    "keywords": "Overloads for - replacementSequence Module std.encoding Parent EncodingSchemeUtf16Native replacementSequence() <bug: unknown> replacementSequence( ) override"
  },
  "phobos/std/encoding/EncodingSchemeUtf16Native/Functions/safeDecode.html": {
    "href": "phobos/std/encoding/EncodingSchemeUtf16Native/Functions/safeDecode.html",
    "title": "Overloads for - safeDecode | Marmos Demo",
    "keywords": "Overloads for - safeDecode Module std.encoding Parent EncodingSchemeUtf16Native safeDecode(s) dchar safeDecode( <bug: unknown> s ) override"
  },
  "phobos/std/encoding/EncodingSchemeUtf16Native/Functions/toString.html": {
    "href": "phobos/std/encoding/EncodingSchemeUtf16Native/Functions/toString.html",
    "title": "Overloads for - toString | Marmos Demo",
    "keywords": "Overloads for - toString Module std.encoding Parent EncodingSchemeUtf16Native toString() string toString( ) override"
  },
  "phobos/std/encoding/EncodingSchemeUtf32Native/Functions/canEncode.html": {
    "href": "phobos/std/encoding/EncodingSchemeUtf32Native/Functions/canEncode.html",
    "title": "Overloads for - canEncode | Marmos Demo",
    "keywords": "Overloads for - canEncode Module std.encoding Parent EncodingSchemeUtf32Native canEncode(c) bool canEncode( dchar c ) override"
  },
  "phobos/std/encoding/EncodingSchemeUtf32Native/Functions/decode.html": {
    "href": "phobos/std/encoding/EncodingSchemeUtf32Native/Functions/decode.html",
    "title": "Overloads for - decode | Marmos Demo",
    "keywords": "Overloads for - decode Module std.encoding Parent EncodingSchemeUtf32Native decode(s) dchar decode( <bug: unknown> s ) override"
  },
  "phobos/std/encoding/EncodingSchemeUtf32Native/Functions/encode.html": {
    "href": "phobos/std/encoding/EncodingSchemeUtf32Native/Functions/encode.html",
    "title": "Overloads for - encode | Marmos Demo",
    "keywords": "Overloads for - encode Module std.encoding Parent EncodingSchemeUtf32Native encode(c, buffer) size_t encode( dchar c, <bug: unknown> buffer ) override"
  },
  "phobos/std/encoding/EncodingSchemeUtf32Native/Functions/encodedLength.html": {
    "href": "phobos/std/encoding/EncodingSchemeUtf32Native/Functions/encodedLength.html",
    "title": "Overloads for - encodedLength | Marmos Demo",
    "keywords": "Overloads for - encodedLength Module std.encoding Parent EncodingSchemeUtf32Native encodedLength(c) size_t encodedLength( dchar c ) override"
  },
  "phobos/std/encoding/EncodingSchemeUtf32Native/Functions/names.html": {
    "href": "phobos/std/encoding/EncodingSchemeUtf32Native/Functions/names.html",
    "title": "Overloads for - names | Marmos Demo",
    "keywords": "Overloads for - names Module std.encoding Parent EncodingSchemeUtf32Native names() <bug: unknown> names( ) override"
  },
  "phobos/std/encoding/EncodingSchemeUtf32Native/Functions/replacementSequence.html": {
    "href": "phobos/std/encoding/EncodingSchemeUtf32Native/Functions/replacementSequence.html",
    "title": "Overloads for - replacementSequence | Marmos Demo",
    "keywords": "Overloads for - replacementSequence Module std.encoding Parent EncodingSchemeUtf32Native replacementSequence() <bug: unknown> replacementSequence( ) override"
  },
  "phobos/std/encoding/EncodingSchemeUtf32Native/Functions/safeDecode.html": {
    "href": "phobos/std/encoding/EncodingSchemeUtf32Native/Functions/safeDecode.html",
    "title": "Overloads for - safeDecode | Marmos Demo",
    "keywords": "Overloads for - safeDecode Module std.encoding Parent EncodingSchemeUtf32Native safeDecode(s) dchar safeDecode( <bug: unknown> s ) override"
  },
  "phobos/std/encoding/EncodingSchemeUtf32Native/Functions/toString.html": {
    "href": "phobos/std/encoding/EncodingSchemeUtf32Native/Functions/toString.html",
    "title": "Overloads for - toString | Marmos Demo",
    "keywords": "Overloads for - toString Module std.encoding Parent EncodingSchemeUtf32Native toString() string toString( ) override"
  },
  "phobos/std/encoding/EncodingSchemeUtf8/Functions/canEncode.html": {
    "href": "phobos/std/encoding/EncodingSchemeUtf8/Functions/canEncode.html",
    "title": "Overloads for - canEncode | Marmos Demo",
    "keywords": "Overloads for - canEncode Module std.encoding Parent EncodingSchemeUtf8 canEncode(c) bool canEncode( dchar c ) override"
  },
  "phobos/std/encoding/EncodingSchemeUtf8/Functions/decode.html": {
    "href": "phobos/std/encoding/EncodingSchemeUtf8/Functions/decode.html",
    "title": "Overloads for - decode | Marmos Demo",
    "keywords": "Overloads for - decode Module std.encoding Parent EncodingSchemeUtf8 decode(s) dchar decode( <bug: unknown> s ) override"
  },
  "phobos/std/encoding/EncodingSchemeUtf8/Functions/encode.html": {
    "href": "phobos/std/encoding/EncodingSchemeUtf8/Functions/encode.html",
    "title": "Overloads for - encode | Marmos Demo",
    "keywords": "Overloads for - encode Module std.encoding Parent EncodingSchemeUtf8 encode(c, buffer) size_t encode( dchar c, <bug: unknown> buffer ) override"
  },
  "phobos/std/encoding/EncodingSchemeUtf8/Functions/encodedLength.html": {
    "href": "phobos/std/encoding/EncodingSchemeUtf8/Functions/encodedLength.html",
    "title": "Overloads for - encodedLength | Marmos Demo",
    "keywords": "Overloads for - encodedLength Module std.encoding Parent EncodingSchemeUtf8 encodedLength(c) size_t encodedLength( dchar c ) override"
  },
  "phobos/std/encoding/EncodingSchemeUtf8/Functions/names.html": {
    "href": "phobos/std/encoding/EncodingSchemeUtf8/Functions/names.html",
    "title": "Overloads for - names | Marmos Demo",
    "keywords": "Overloads for - names Module std.encoding Parent EncodingSchemeUtf8 names() <bug: unknown> names( ) override"
  },
  "phobos/std/encoding/EncodingSchemeUtf8/Functions/replacementSequence.html": {
    "href": "phobos/std/encoding/EncodingSchemeUtf8/Functions/replacementSequence.html",
    "title": "Overloads for - replacementSequence | Marmos Demo",
    "keywords": "Overloads for - replacementSequence Module std.encoding Parent EncodingSchemeUtf8 replacementSequence() <bug: unknown> replacementSequence( ) override"
  },
  "phobos/std/encoding/EncodingSchemeUtf8/Functions/safeDecode.html": {
    "href": "phobos/std/encoding/EncodingSchemeUtf8/Functions/safeDecode.html",
    "title": "Overloads for - safeDecode | Marmos Demo",
    "keywords": "Overloads for - safeDecode Module std.encoding Parent EncodingSchemeUtf8 safeDecode(s) dchar safeDecode( <bug: unknown> s ) override"
  },
  "phobos/std/encoding/EncodingSchemeUtf8/Functions/toString.html": {
    "href": "phobos/std/encoding/EncodingSchemeUtf8/Functions/toString.html",
    "title": "Overloads for - toString | Marmos Demo",
    "keywords": "Overloads for - toString Module std.encoding Parent EncodingSchemeUtf8 toString() string toString( ) override"
  },
  "phobos/std/encoding/EncodingSchemeWindows1250/Functions/canEncode.html": {
    "href": "phobos/std/encoding/EncodingSchemeWindows1250/Functions/canEncode.html",
    "title": "Overloads for - canEncode | Marmos Demo",
    "keywords": "Overloads for - canEncode Module std.encoding Parent EncodingSchemeWindows1250 canEncode(c) bool canEncode( dchar c ) override"
  },
  "phobos/std/encoding/EncodingSchemeWindows1250/Functions/decode.html": {
    "href": "phobos/std/encoding/EncodingSchemeWindows1250/Functions/decode.html",
    "title": "Overloads for - decode | Marmos Demo",
    "keywords": "Overloads for - decode Module std.encoding Parent EncodingSchemeWindows1250 decode(s) dchar decode( <bug: unknown> s ) override"
  },
  "phobos/std/encoding/EncodingSchemeWindows1250/Functions/encode.html": {
    "href": "phobos/std/encoding/EncodingSchemeWindows1250/Functions/encode.html",
    "title": "Overloads for - encode | Marmos Demo",
    "keywords": "Overloads for - encode Module std.encoding Parent EncodingSchemeWindows1250 encode(c, buffer) size_t encode( dchar c, <bug: unknown> buffer ) override"
  },
  "phobos/std/encoding/EncodingSchemeWindows1250/Functions/encodedLength.html": {
    "href": "phobos/std/encoding/EncodingSchemeWindows1250/Functions/encodedLength.html",
    "title": "Overloads for - encodedLength | Marmos Demo",
    "keywords": "Overloads for - encodedLength Module std.encoding Parent EncodingSchemeWindows1250 encodedLength(c) size_t encodedLength( dchar c ) override"
  },
  "phobos/std/encoding/EncodingSchemeWindows1250/Functions/names.html": {
    "href": "phobos/std/encoding/EncodingSchemeWindows1250/Functions/names.html",
    "title": "Overloads for - names | Marmos Demo",
    "keywords": "Overloads for - names Module std.encoding Parent EncodingSchemeWindows1250 names() <bug: unknown> names( ) override"
  },
  "phobos/std/encoding/EncodingSchemeWindows1250/Functions/replacementSequence.html": {
    "href": "phobos/std/encoding/EncodingSchemeWindows1250/Functions/replacementSequence.html",
    "title": "Overloads for - replacementSequence | Marmos Demo",
    "keywords": "Overloads for - replacementSequence Module std.encoding Parent EncodingSchemeWindows1250 replacementSequence() <bug: unknown> replacementSequence( ) override"
  },
  "phobos/std/encoding/EncodingSchemeWindows1250/Functions/safeDecode.html": {
    "href": "phobos/std/encoding/EncodingSchemeWindows1250/Functions/safeDecode.html",
    "title": "Overloads for - safeDecode | Marmos Demo",
    "keywords": "Overloads for - safeDecode Module std.encoding Parent EncodingSchemeWindows1250 safeDecode(s) dchar safeDecode( <bug: unknown> s ) override"
  },
  "phobos/std/encoding/EncodingSchemeWindows1250/Functions/toString.html": {
    "href": "phobos/std/encoding/EncodingSchemeWindows1250/Functions/toString.html",
    "title": "Overloads for - toString | Marmos Demo",
    "keywords": "Overloads for - toString Module std.encoding Parent EncodingSchemeWindows1250 toString() string toString( ) override"
  },
  "phobos/std/encoding/EncodingSchemeWindows1251/Functions/canEncode.html": {
    "href": "phobos/std/encoding/EncodingSchemeWindows1251/Functions/canEncode.html",
    "title": "Overloads for - canEncode | Marmos Demo",
    "keywords": "Overloads for - canEncode Module std.encoding Parent EncodingSchemeWindows1251 canEncode(c) bool canEncode( dchar c ) override"
  },
  "phobos/std/encoding/EncodingSchemeWindows1251/Functions/decode.html": {
    "href": "phobos/std/encoding/EncodingSchemeWindows1251/Functions/decode.html",
    "title": "Overloads for - decode | Marmos Demo",
    "keywords": "Overloads for - decode Module std.encoding Parent EncodingSchemeWindows1251 decode(s) dchar decode( <bug: unknown> s ) override"
  },
  "phobos/std/encoding/EncodingSchemeWindows1251/Functions/encode.html": {
    "href": "phobos/std/encoding/EncodingSchemeWindows1251/Functions/encode.html",
    "title": "Overloads for - encode | Marmos Demo",
    "keywords": "Overloads for - encode Module std.encoding Parent EncodingSchemeWindows1251 encode(c, buffer) size_t encode( dchar c, <bug: unknown> buffer ) override"
  },
  "phobos/std/encoding/EncodingSchemeWindows1251/Functions/encodedLength.html": {
    "href": "phobos/std/encoding/EncodingSchemeWindows1251/Functions/encodedLength.html",
    "title": "Overloads for - encodedLength | Marmos Demo",
    "keywords": "Overloads for - encodedLength Module std.encoding Parent EncodingSchemeWindows1251 encodedLength(c) size_t encodedLength( dchar c ) override"
  },
  "phobos/std/encoding/EncodingSchemeWindows1251/Functions/names.html": {
    "href": "phobos/std/encoding/EncodingSchemeWindows1251/Functions/names.html",
    "title": "Overloads for - names | Marmos Demo",
    "keywords": "Overloads for - names Module std.encoding Parent EncodingSchemeWindows1251 names() <bug: unknown> names( ) override"
  },
  "phobos/std/encoding/EncodingSchemeWindows1251/Functions/replacementSequence.html": {
    "href": "phobos/std/encoding/EncodingSchemeWindows1251/Functions/replacementSequence.html",
    "title": "Overloads for - replacementSequence | Marmos Demo",
    "keywords": "Overloads for - replacementSequence Module std.encoding Parent EncodingSchemeWindows1251 replacementSequence() <bug: unknown> replacementSequence( ) override"
  },
  "phobos/std/encoding/EncodingSchemeWindows1251/Functions/safeDecode.html": {
    "href": "phobos/std/encoding/EncodingSchemeWindows1251/Functions/safeDecode.html",
    "title": "Overloads for - safeDecode | Marmos Demo",
    "keywords": "Overloads for - safeDecode Module std.encoding Parent EncodingSchemeWindows1251 safeDecode(s) dchar safeDecode( <bug: unknown> s ) override"
  },
  "phobos/std/encoding/EncodingSchemeWindows1251/Functions/toString.html": {
    "href": "phobos/std/encoding/EncodingSchemeWindows1251/Functions/toString.html",
    "title": "Overloads for - toString | Marmos Demo",
    "keywords": "Overloads for - toString Module std.encoding Parent EncodingSchemeWindows1251 toString() string toString( ) override"
  },
  "phobos/std/encoding/EncodingSchemeWindows1252/Functions/canEncode.html": {
    "href": "phobos/std/encoding/EncodingSchemeWindows1252/Functions/canEncode.html",
    "title": "Overloads for - canEncode | Marmos Demo",
    "keywords": "Overloads for - canEncode Module std.encoding Parent EncodingSchemeWindows1252 canEncode(c) bool canEncode( dchar c ) override"
  },
  "phobos/std/encoding/EncodingSchemeWindows1252/Functions/decode.html": {
    "href": "phobos/std/encoding/EncodingSchemeWindows1252/Functions/decode.html",
    "title": "Overloads for - decode | Marmos Demo",
    "keywords": "Overloads for - decode Module std.encoding Parent EncodingSchemeWindows1252 decode(s) dchar decode( <bug: unknown> s ) override"
  },
  "phobos/std/encoding/EncodingSchemeWindows1252/Functions/encode.html": {
    "href": "phobos/std/encoding/EncodingSchemeWindows1252/Functions/encode.html",
    "title": "Overloads for - encode | Marmos Demo",
    "keywords": "Overloads for - encode Module std.encoding Parent EncodingSchemeWindows1252 encode(c, buffer) size_t encode( dchar c, <bug: unknown> buffer ) override"
  },
  "phobos/std/encoding/EncodingSchemeWindows1252/Functions/encodedLength.html": {
    "href": "phobos/std/encoding/EncodingSchemeWindows1252/Functions/encodedLength.html",
    "title": "Overloads for - encodedLength | Marmos Demo",
    "keywords": "Overloads for - encodedLength Module std.encoding Parent EncodingSchemeWindows1252 encodedLength(c) size_t encodedLength( dchar c ) override"
  },
  "phobos/std/encoding/EncodingSchemeWindows1252/Functions/names.html": {
    "href": "phobos/std/encoding/EncodingSchemeWindows1252/Functions/names.html",
    "title": "Overloads for - names | Marmos Demo",
    "keywords": "Overloads for - names Module std.encoding Parent EncodingSchemeWindows1252 names() <bug: unknown> names( ) override"
  },
  "phobos/std/encoding/EncodingSchemeWindows1252/Functions/replacementSequence.html": {
    "href": "phobos/std/encoding/EncodingSchemeWindows1252/Functions/replacementSequence.html",
    "title": "Overloads for - replacementSequence | Marmos Demo",
    "keywords": "Overloads for - replacementSequence Module std.encoding Parent EncodingSchemeWindows1252 replacementSequence() <bug: unknown> replacementSequence( ) override"
  },
  "phobos/std/encoding/EncodingSchemeWindows1252/Functions/safeDecode.html": {
    "href": "phobos/std/encoding/EncodingSchemeWindows1252/Functions/safeDecode.html",
    "title": "Overloads for - safeDecode | Marmos Demo",
    "keywords": "Overloads for - safeDecode Module std.encoding Parent EncodingSchemeWindows1252 safeDecode(s) dchar safeDecode( <bug: unknown> s ) override"
  },
  "phobos/std/encoding/EncodingSchemeWindows1252/Functions/toString.html": {
    "href": "phobos/std/encoding/EncodingSchemeWindows1252/Functions/toString.html",
    "title": "Overloads for - toString | Marmos Demo",
    "keywords": "Overloads for - toString Module std.encoding Parent EncodingSchemeWindows1252 toString() string toString( ) override"
  },
  "phobos/std/encoding/Functions/canEncode.html": {
    "href": "phobos/std/encoding/Functions/canEncode.html",
    "title": "Overloads for - canEncode | Marmos Demo",
    "keywords": "Overloads for - canEncode Module std.encoding canEncode(c) bool canEncode( dchar c ) Returns true iff it is possible to represent the specified codepoint in the encoding. The type of encoding cannot be deduced. Therefore, it is necessary to explicitly specify the encoding type. Standards: Unicode 5.0, ASCII, ISO-8859-1, ISO-8859-2, WINDOWS-1250, WINDOWS-1251, WINDOWS-1252"
  },
  "phobos/std/encoding/Functions/codePoints.html": {
    "href": "phobos/std/encoding/Functions/codePoints.html",
    "title": "Overloads for - codePoints | Marmos Demo",
    "keywords": "Overloads for - codePoints Module std.encoding codePoints(s) CodePoints!(E) codePoints( <bug: unknown> s ) Returns a foreachable struct which can bidirectionally iterate over all code points in a string. The input to this function MUST be validly encoded. This is enforced by the function's in-contract. You can foreach either with or without an index. If an index is specified, it will be initialized at each iteration with the offset into the string at which the code point begins. Supersedes This function supersedes std.utf.decode(). Standards: Unicode 5.0, ASCII, ISO-8859-1, ISO-8859-2, WINDOWS-1250, WINDOWS-1251, WINDOWS-1252 Params s <bug: unknown> the string to be decoded Example -------------------------------------------------------- string s = \"hello world\"; foreach (c;codePoints(s)) { // do something with c (which will always be a dchar) } -------------------------------------------------------- Note that, currently, foreach (c:codePoints(s)) is superior to foreach (c;s) in that the latter will fall over on encountering U+FFFF."
  },
  "phobos/std/encoding/Functions/codeUnits.html": {
    "href": "phobos/std/encoding/Functions/codeUnits.html",
    "title": "Overloads for - codeUnits | Marmos Demo",
    "keywords": "Overloads for - codeUnits Module std.encoding codeUnits(c) CodeUnits!(E) codeUnits( dchar c ) Returns a foreachable struct which can bidirectionally iterate over all code units in a code point. The input to this function MUST be a valid code point. This is enforced by the function's in-contract. The type of the output cannot be deduced. Therefore, it is necessary to explicitly specify the encoding type in the template parameter. Supersedes This function supersedes std.utf.encode(). Standards: Unicode 5.0, ASCII, ISO-8859-1, ISO-8859-2, WINDOWS-1250, WINDOWS-1251, WINDOWS-1252 Params c dchar the code point to be encoded"
  },
  "phobos/std/encoding/Functions/decode.html": {
    "href": "phobos/std/encoding/Functions/decode.html",
    "title": "Overloads for - decode | Marmos Demo",
    "keywords": "Overloads for - decode Module std.encoding decode(s) dchar decode( S s ) Decodes a single code point. This function removes one or more code units from the start of a string, and returns the decoded code point which those code units represent. The input to this function MUST be validly encoded. This is enforced by the function's in-contract. Supersedes This function supersedes std.utf.decode(), however, note that the function codePoints() supersedes it more conveniently. Standards: Unicode 5.0, ASCII, ISO-8859-1, ISO-8859-2, WINDOWS-1250, WINDOWS-1251, WINDOWS-1252 Params s S the string whose first code point is to be decoded"
  },
  "phobos/std/encoding/Functions/decodeReverse.html": {
    "href": "phobos/std/encoding/Functions/decodeReverse.html",
    "title": "Overloads for - decodeReverse | Marmos Demo",
    "keywords": "Overloads for - decodeReverse Module std.encoding decodeReverse(s) dchar decodeReverse( <bug: unknown> s ) Decodes a single code point from the end of a string. This function removes one or more code units from the end of a string, and returns the decoded code point which those code units represent. The input to this function MUST be validly encoded. This is enforced by the function's in-contract. Standards: Unicode 5.0, ASCII, ISO-8859-1, ISO-8859-2, WINDOWS-1250, WINDOWS-1251, WINDOWS-1252 Params s <bug: unknown> the string whose first code point is to be decoded"
  },
  "phobos/std/encoding/Functions/encode.html": {
    "href": "phobos/std/encoding/Functions/encode.html",
    "title": "Overloads for - encode | Marmos Demo",
    "keywords": "Overloads for - encode Module std.encoding encode(c) <bug: unknown> encode( dchar c ) Encodes a single code point. This function encodes a single code point into one or more code units. It returns a string containing those code units. The input to this function MUST be a valid code point. This is enforced by the function's in-contract. The type of the output cannot be deduced. Therefore, it is necessary to explicitly specify the encoding as a template parameter. Supersedes This function supersedes std.utf.encode(), however, note that the function codeUnits() supersedes it more conveniently. Standards: Unicode 5.0, ASCII, ISO-8859-1, ISO-8859-2, WINDOWS-1250, WINDOWS-1251, WINDOWS-1252 Params c dchar the code point to be encoded encode(c, array) size_t encode( dchar c, <bug: unknown> array ) Encodes a single code point into an array. This function encodes a single code point into one or more code units The code units are stored in a user-supplied fixed-size array, which must be passed by reference. The input to this function MUST be a valid code point. This is enforced by the function's in-contract. The type of the output cannot be deduced. Therefore, it is necessary to explicitly specify the encoding as a template parameter. Supersedes This function supersedes std.utf.encode(), however, note that the function codeUnits() supersedes it more conveniently. Standards: Unicode 5.0, ASCII, ISO-8859-1, ISO-8859-2, WINDOWS-1250, WINDOWS-1251, WINDOWS-1252 Params c dchar the code point to be encoded array <bug: unknown> the destination array Returns the number of code units written to the array encode(c, range) size_t encode( dchar c, R range ) encode(c, dg) void encode( dchar c, <bug: unknown> dg ) Encodes a single code point to a delegate. This function encodes a single code point into one or more code units. The code units are passed one at a time to the supplied delegate. The input to this function MUST be a valid code point. This is enforced by the function's in-contract. The type of the output cannot be deduced. Therefore, it is necessary to explicitly specify the encoding as a template parameter. Supersedes This function supersedes std.utf.encode(), however, note that the function codeUnits() supersedes it more conveniently. Standards: Unicode 5.0, ASCII, ISO-8859-1, ISO-8859-2, WINDOWS-1250, WINDOWS-1251, WINDOWS-1252 Params c dchar the code point to be encoded dg <bug: unknown> the delegate to invoke for each code unit encode(s, range) size_t encode( <bug: unknown> s, R range ) Encodes the contents of s in units of type Tgt , writing the result to an output range. Returns: The number of Tgt elements written. Params: Tgt = Element type of range . s = Input array. range = Output range."
  },
  "phobos/std/encoding/Functions/encodedLength.html": {
    "href": "phobos/std/encoding/Functions/encodedLength.html",
    "title": "Overloads for - encodedLength | Marmos Demo",
    "keywords": "Overloads for - encodedLength Module std.encoding encodedLength(c) size_t encodedLength( dchar c ) Returns the number of code units required to encode a single code point. The input to this function MUST be a valid code point. This is enforced by the function's in-contract. The type of the output cannot be deduced. Therefore, it is necessary to explicitly specify the encoding as a template parameter. Standards: Unicode 5.0, ASCII, ISO-8859-1, ISO-8859-2, WINDOWS-1250, WINDOWS-1251, WINDOWS-1252 Params c dchar the code point to be encoded"
  },
  "phobos/std/encoding/Functions/encodingName.html": {
    "href": "phobos/std/encoding/Functions/encodingName.html",
    "title": "Overloads for - encodingName | Marmos Demo",
    "keywords": "Overloads for - encodingName Module std.encoding encodingName() string encodingName( ) Returns the name of an encoding. The type of encoding cannot be deduced. Therefore, it is necessary to explicitly specify the encoding type. Standards: Unicode 5.0, ASCII, ISO-8859-1, ISO-8859-2, WINDOWS-1250, WINDOWS-1251, WINDOWS-1252"
  },
  "phobos/std/encoding/Functions/firstSequence.html": {
    "href": "phobos/std/encoding/Functions/firstSequence.html",
    "title": "Overloads for - firstSequence | Marmos Demo",
    "keywords": "Overloads for - firstSequence Module std.encoding firstSequence(s) size_t firstSequence( <bug: unknown> s ) Returns the length of the first encoded sequence. The input to this function MUST be validly encoded. This is enforced by the function's in-contract. Standards: Unicode 5.0, ASCII, ISO-8859-1, ISO-8859-2, WINDOWS-1250, WINDOWS-1251, WINDOWS-1252 Params s <bug: unknown> the string to be sliced"
  },
  "phobos/std/encoding/Functions/getBOM.html": {
    "href": "phobos/std/encoding/Functions/getBOM.html",
    "title": "Overloads for - getBOM | Marmos Demo",
    "keywords": "Overloads for - getBOM Module std.encoding getBOM(input) BOMSeq getBOM( Range input ) Returns a BOMSeq for a given input . If no BOM is present the BOMSeq for BOM.none is returned. The BOM sequence at the beginning of the range will not be comsumed from the passed range. If you pass a reference type range make sure that save creates a deep copy. Params: input = The sequence to check for the BOM Returns: the found BOMSeq corresponding to the passed input ."
  },
  "phobos/std/encoding/Functions/index.html": {
    "href": "phobos/std/encoding/Functions/index.html",
    "title": "Overloads for - index | Marmos Demo",
    "keywords": "Overloads for - index Module std.encoding index(s, n) ptrdiff_t index( <bug: unknown> s, int n ) Returns the array index at which the (n+1)th code point begins. The input to this function MUST be validly encoded. This is enforced by the function's in-contract. Supersedes This function supersedes std.utf.toUTFindex(). Standards: Unicode 5.0, ASCII, ISO-8859-1, ISO-8859-2, WINDOWS-1250, WINDOWS-1251, WINDOWS-1252 Params s <bug: unknown> the string to be counted n int the current code point index"
  },
  "phobos/std/encoding/Functions/isValid.html": {
    "href": "phobos/std/encoding/Functions/isValid.html",
    "title": "Overloads for - isValid | Marmos Demo",
    "keywords": "Overloads for - isValid Module std.encoding isValid(s) bool isValid( <bug: unknown> s ) Returns true if the string is encoded correctly Supersedes This function supersedes std.utf.validate(), however note that this function returns a bool indicating whether the input was valid or not, whereas the older function would throw an exception. Standards: Unicode 5.0, ASCII, ISO-8859-1, ISO-8859-2, WINDOWS-1250, WINDOWS-1251, WINDOWS-1252 Params s <bug: unknown> the string to be tested"
  },
  "phobos/std/encoding/Functions/isValidCodePoint.html": {
    "href": "phobos/std/encoding/Functions/isValidCodePoint.html",
    "title": "Overloads for - isValidCodePoint | Marmos Demo",
    "keywords": "Overloads for - isValidCodePoint Module std.encoding isValidCodePoint(c) bool isValidCodePoint( dchar c ) Returns true if c is a valid code point Note that this includes the non-character code points U+FFFE and U+FFFF, since these are valid code points (even though they are not valid characters). Supersedes: This function supersedes std.utf.startsValidDchar() . Standards: Unicode 5.0, ASCII, ISO-8859-1, ISO-8859-2, WINDOWS-1250, WINDOWS-1251, WINDOWS-1252 Params: c = the code point to be tested"
  },
  "phobos/std/encoding/Functions/isValidCodeUnit.html": {
    "href": "phobos/std/encoding/Functions/isValidCodeUnit.html",
    "title": "Overloads for - isValidCodeUnit | Marmos Demo",
    "keywords": "Overloads for - isValidCodeUnit Module std.encoding isValidCodeUnit(c) bool isValidCodeUnit( E c ) Returns true if the code unit is legal. For example, the byte 0x80 would not be legal in ASCII, because ASCII code units must always be in the range 0x00 to 0x7F. Standards: Unicode 5.0, ASCII, ISO-8859-1, ISO-8859-2, WINDOWS-1250, WINDOWS-1251, WINDOWS-1252 Params c E the code unit to be tested"
  },
  "phobos/std/encoding/Functions/lastSequence.html": {
    "href": "phobos/std/encoding/Functions/lastSequence.html",
    "title": "Overloads for - lastSequence | Marmos Demo",
    "keywords": "Overloads for - lastSequence Module std.encoding lastSequence(s) size_t lastSequence( <bug: unknown> s ) Returns the length of the last encoded sequence. The input to this function MUST be validly encoded. This is enforced by the function's in-contract. Standards: Unicode 5.0, ASCII, ISO-8859-1, ISO-8859-2, WINDOWS-1250, WINDOWS-1251, WINDOWS-1252 Params s <bug: unknown> the string to be sliced"
  },
  "phobos/std/encoding/Functions/safeDecode.html": {
    "href": "phobos/std/encoding/Functions/safeDecode.html",
    "title": "Overloads for - safeDecode | Marmos Demo",
    "keywords": "Overloads for - safeDecode Module std.encoding safeDecode(s) dchar safeDecode( S s ) Decodes a single code point. The input does not have to be valid. This function removes one or more code units from the start of a string, and returns the decoded code point which those code units represent. This function will accept an invalidly encoded string as input. If an invalid sequence is found at the start of the string, this function will remove it, and return the value INVALID_SEQUENCE. Standards: Unicode 5.0, ASCII, ISO-8859-1, ISO-8859-2, WINDOWS-1250, WINDOWS-1251, WINDOWS-1252 Params s S the string whose first code point is to be decoded"
  },
  "phobos/std/encoding/Functions/sanitize.html": {
    "href": "phobos/std/encoding/Functions/sanitize.html",
    "title": "Overloads for - sanitize | Marmos Demo",
    "keywords": "Overloads for - sanitize Module std.encoding sanitize(s) <bug: unknown> sanitize( <bug: unknown> s ) Sanitizes a string by replacing malformed code unit sequences with valid code unit sequences. The result is guaranteed to be valid for this encoding. If the input string is already valid, this function returns the original, otherwise it constructs a new string by replacing all illegal code unit sequences with the encoding's replacement character, Invalid sequences will be replaced with the Unicode replacement character (U+FFFD) if the character repertoire contains it, otherwise invalid sequences will be replaced with '?'. Standards: Unicode 5.0, ASCII, ISO-8859-1, ISO-8859-2, WINDOWS-1250, WINDOWS-1251, WINDOWS-1252 Params s <bug: unknown> the string to be sanitized"
  },
  "phobos/std/encoding/Functions/transcode.html": {
    "href": "phobos/std/encoding/Functions/transcode.html",
    "title": "Overloads for - transcode | Marmos Demo",
    "keywords": "Overloads for - transcode Module std.encoding transcode(s, r) void transcode( <bug: unknown> s, <bug: unknown> r ) Convert a string from one encoding to another. Supersedes This function supersedes std.utf.toUTF8(), std.utf.toUTF16() and std.utf.toUTF32() (but note that to!() supersedes it more conveniently). Standards: Unicode 5.0, ASCII, ISO-8859-1, ISO-8859-2, WINDOWS-1250, WINDOWS-1251, WINDOWS-1252 Params s <bug: unknown> Source string. $(B Must) be validly encoded. This is enforced by the function's in-contract. r <bug: unknown> Destination string See_Also $(REF to, std,conv)"
  },
  "phobos/std/encoding/Functions/validLength.html": {
    "href": "phobos/std/encoding/Functions/validLength.html",
    "title": "Overloads for - validLength | Marmos Demo",
    "keywords": "Overloads for - validLength Module std.encoding validLength(s) size_t validLength( <bug: unknown> s ) Returns the length of the longest possible substring, starting from the first code unit, which is validly encoded. Standards: Unicode 5.0, ASCII, ISO-8859-1, ISO-8859-2, WINDOWS-1250, WINDOWS-1251, WINDOWS-1252 Params s <bug: unknown> the string to be tested"
  },
  "phobos/std/encoding/Overview.html": {
    "href": "phobos/std/encoding/Overview.html",
    "title": "Module - std.encoding | Marmos Demo",
    "keywords": "Module - std.encoding About Classes and functions for handling and transcoding between various encodings. For cases where the encoding is known at compile-time, functions are provided for arbitrary encoding and decoding of characters, arbitrary transcoding between strings of different type, as well as validation and sanitization. Encodings currently supported are UTF-8, UTF-16, UTF-32, ASCII, ISO-8859-1 (also known as LATIN-1), ISO-8859-2 (LATIN-2), WINDOWS-1250, WINDOWS-1251 and WINDOWS-1252. $(SCRIPT inhibitQuickIndex = 1;) $(DIVC quickindex, $(BOOKTABLE, $(TR $(TH Category) $(TH Functions)) $(TR $(TD Decode) $(TD $(LREF codePoints) $(LREF decode) $(LREF decodeReverse) $(LREF safeDecode) )) $(TR $(TD Conversion) $(TD $(LREF codeUnits) $(LREF sanitize) $(LREF transcode) )) $(TR $(TD Classification) $(TD $(LREF canEncode) $(LREF isValid) $(LREF isValidCodePoint) $(LREF isValidCodeUnit) )) $(TR $(TD BOM) $(TD $(LREF BOM) $(LREF BOMSeq) $(LREF getBOM) $(LREF utfBOM) )) $(TR $(TD Length & Index) $(TD $(LREF firstSequence) $(LREF encodedLength) $(LREF index) $(LREF lastSequence) $(LREF validLength) )) $(TR $(TD Encoding schemes) $(TD $(LREF encodingName) $(LREF EncodingScheme) $(LREF EncodingSchemeASCII) $(LREF EncodingSchemeLatin1) $(LREF EncodingSchemeLatin2) $(LREF EncodingSchemeUtf16Native) $(LREF EncodingSchemeUtf32Native) $(LREF EncodingSchemeUtf8) $(LREF EncodingSchemeWindows1250) $(LREF EncodingSchemeWindows1251) $(LREF EncodingSchemeWindows1252) )) $(TR $(TD Representation) $(TD $(LREF AsciiChar) $(LREF AsciiString) $(LREF Latin1Char) $(LREF Latin1String) $(LREF Latin2Char) $(LREF Latin2String) $(LREF Windows1250Char) $(LREF Windows1250String) $(LREF Windows1251Char) $(LREF Windows1251String) $(LREF Windows1252Char) $(LREF Windows1252String) )) $(TR $(TD Exceptions) $(TD $(LREF INVALID_SEQUENCE) $(LREF EncodingException) )) )) For cases where the encoding is not known at compile-time, but is known at run-time, the abstract class $(LREF EncodingScheme) and its subclasses is provided. To construct a run-time encoder/decoder, one does e.g. ---------------------------------------------------- auto e = EncodingScheme.create(\"utf-8\"); ---------------------------------------------------- This library supplies $(LREF EncodingScheme) subclasses for ASCII, ISO-8859-1 (also known as LATIN-1), ISO-8859-2 (LATIN-2), WINDOWS-1250, WINDOWS-1251, WINDOWS-1252, UTF-8, and (on little-endian architectures) UTF-16LE and UTF-32LE; or (on big-endian architectures) UTF-16BE and UTF-32BE. This library provides a mechanism whereby other modules may add $(LREF EncodingScheme) subclasses for any other encoding. Copyright: Copyright Janice Caron 2008 - 2009. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: Janice Caron Source: $(PHOBOSSRC std/encoding.d) Aliases Name Description AsciiString Ditto BOMSeq The type stored inside bomTable . Latin1String Defines an Latin1-encoded string (as an array of $(D immutable(Latin1Char))). Latin2String Defines an Latin2-encoded string (as an array of $(D immutable(Latin2Char))). Windows1250String Defines an Windows1250-encoded string (as an array of $(D immutable(Windows1250Char))). Windows1251String Defines an Windows1251-encoded string (as an array of $(D immutable(Windows1251Char))). Windows1252String Defines an Windows1252-encoded string (as an array of $(D immutable(Windows1252Char))). Classes Name Description EncodingException The base class for exceptions thrown by this module EncodingScheme Abstract base class of all encoding schemes EncodingSchemeASCII EncodingScheme to handle ASCII EncodingSchemeLatin1 EncodingScheme to handle Latin-1 EncodingSchemeLatin2 EncodingScheme to handle Latin-2 EncodingSchemeUtf16Native EncodingScheme to handle UTF-16 in native byte order EncodingSchemeUtf32Native EncodingScheme to handle UTF-32 in native byte order EncodingSchemeUtf8 EncodingScheme to handle UTF-8 EncodingSchemeWindows1250 EncodingScheme to handle Windows-1250 EncodingSchemeWindows1251 EncodingScheme to handle Windows-1251 EncodingSchemeWindows1252 EncodingScheme to handle Windows-1252 UnrecognizedEncodingException Structs Name Description CodePoints CodeUnits Functions Name Description canEncode Returns true iff it is possible to represent the specified codepoint in the encoding. codePoints Returns a foreachable struct which can bidirectionally iterate over all code points in a string. codeUnits Returns a foreachable struct which can bidirectionally iterate over all code units in a code point. decode Decodes a single code point. decodeReverse Decodes a single code point from the end of a string. encode Encodes a single code point. encodedLength Returns the number of code units required to encode a single code point. encodingName Returns the name of an encoding. firstSequence Returns the length of the first encoded sequence. getBOM Returns a BOMSeq for a given input . If no BOM is present the BOMSeq for BOM.none is returned. The BOM sequence at the beginning of the range will not be comsumed from the passed range. If you pass a reference type range make sure that save creates a deep copy. index Returns the array index at which the (n+1)th code point begins. isValid Returns true if the string is encoded correctly isValidCodePoint Returns true if c is a valid code point isValidCodeUnit Returns true if the code unit is legal. For example, the byte 0x80 would not be legal in ASCII, because ASCII code units must always be in the range 0x00 to 0x7F. lastSequence Returns the length of the last encoded sequence. safeDecode Decodes a single code point. The input does not have to be valid. sanitize Sanitizes a string by replacing malformed code unit sequences with valid code unit sequences. The result is guaranteed to be valid for this encoding. transcode Convert a string from one encoding to another. validLength Returns the length of the longest possible substring, starting from the first code unit, which is validly encoded. Variables Name Description bomTable Mapping of a byte sequence to $(B Byte Order Mark (BOM)) INVALID_SEQUENCE Special value returned by safeDecode utfBOM Constant defining a fully decoded BOM"
  },
  "phobos/std/encoding/Structs/CodePoints.html": {
    "href": "phobos/std/encoding/Structs/CodePoints.html",
    "title": "Struct - CodePoints | Marmos Demo",
    "keywords": "Struct - CodePoints Module std.encoding public struct CodePoints { // int opApply( <bug: unknown> dg ) ; // int opApply( <bug: unknown> dg ) ; // int opApplyReverse( <bug: unknown> dg ) ; // int opApplyReverse( <bug: unknown> dg ) ; // <bug: unknown> s; } Functions Name Description opApply opApplyReverse Variables Name Description s"
  },
  "phobos/std/encoding/Structs/CodeUnits.html": {
    "href": "phobos/std/encoding/Structs/CodeUnits.html",
    "title": "Struct - CodeUnits | Marmos Demo",
    "keywords": "Struct - CodeUnits Module std.encoding public struct CodeUnits { // int opApply( <bug: unknown> dg ) ; // int opApplyReverse( <bug: unknown> dg ) ; // <bug: unknown> s; } Functions Name Description opApply opApplyReverse Variables Name Description s"
  },
  "phobos/std/exception/Classes/ErrnoException.html": {
    "href": "phobos/std/exception/Classes/ErrnoException.html",
    "title": "Class - ErrnoException | Marmos Demo",
    "keywords": "Class - ErrnoException Module std.exception public class ErrnoException { // Operating system error code. uint errno( ) final; // Localized error message generated through $(REF strerror_r, core,stdc,string) or $(REF strerror, core,stdc,string). string errnoMsg( ) final; } About Thrown if errors that set errno occur. Functions Name Description errno Operating system error code. errnoMsg Localized error message generated through $(REF strerror_r, core,stdc,string) or $(REF strerror, core,stdc,string)."
  },
  "phobos/std/exception/ErrnoException/Functions/errno.html": {
    "href": "phobos/std/exception/ErrnoException/Functions/errno.html",
    "title": "Overloads for - errno | Marmos Demo",
    "keywords": "Overloads for - errno Module std.exception Parent ErrnoException errno() uint errno( ) final Operating system error code."
  },
  "phobos/std/exception/ErrnoException/Functions/errnoMsg.html": {
    "href": "phobos/std/exception/ErrnoException/Functions/errnoMsg.html",
    "title": "Overloads for - errnoMsg | Marmos Demo",
    "keywords": "Overloads for - errnoMsg Module std.exception Parent ErrnoException errnoMsg() string errnoMsg( ) final Localized error message generated through $(REF strerror_r, core,stdc,string) or $(REF strerror, core,stdc,string)."
  },
  "phobos/std/exception/Functions/assertCTFEable.html": {
    "href": "phobos/std/exception/Functions/assertCTFEable.html",
    "title": "Overloads for - assertCTFEable | Marmos Demo",
    "keywords": "Overloads for - assertCTFEable Module std.exception assertCTFEable() void assertCTFEable( )"
  },
  "phobos/std/exception/Functions/assertNotThrown.html": {
    "href": "phobos/std/exception/Functions/assertNotThrown.html",
    "title": "Overloads for - assertNotThrown | Marmos Demo",
    "keywords": "Overloads for - assertNotThrown Module std.exception assertNotThrown(expression, msg, file, line) <bug: unknown> assertNotThrown( E expression, string msg, string file, size_t line ) auto Asserts that the given expression does $(I not) throw the given type of Throwable . If a Throwable of the given type is thrown, it is caught and does not escape assertNotThrown. Rather, an AssertError is thrown. However, any other Throwable s will escape. Params T <parameter not found> The Throwable to test for. expression E The expression to test. msg string Optional message to output on test failure. If msg is empty, and the thrown exception has a non-empty msg field, the exception's msg field will be output on test failure. file string The file where the error occurred. Defaults to __FILE__ . line size_t The line where the error occurred. Defaults to __LINE__ . Throws AssertError if the given Throwable is thrown. Returns the result of expression ."
  },
  "phobos/std/exception/Functions/assertThrown.html": {
    "href": "phobos/std/exception/Functions/assertThrown.html",
    "title": "Overloads for - assertThrown | Marmos Demo",
    "keywords": "Overloads for - assertThrown Module std.exception assertThrown(expression, msg, file, line) void assertThrown( E expression, string msg, string file, size_t line ) Asserts that the given expression throws the given type of Throwable . The Throwable is caught and does not escape assertThrown. However, any other Throwable s $(I will) escape, and if no Throwable of the given type is thrown, then an AssertError is thrown. Params T <parameter not found> The Throwable to test for. expression E The expression to test. msg string Optional message to output on test failure. file string The file where the error occurred. Defaults to __FILE__ . line size_t The line where the error occurred. Defaults to __LINE__ . Throws AssertError if the given Throwable is not thrown."
  },
  "phobos/std/exception/Functions/assumeUnique.html": {
    "href": "phobos/std/exception/Functions/assumeUnique.html",
    "title": "Overloads for - assumeUnique | Marmos Demo",
    "keywords": "Overloads for - assumeUnique Module std.exception assumeUnique(array) <bug: unknown> assumeUnique( <bug: unknown> array ) Casts a mutable array to an immutable array in an idiomatic manner. Technically, assumeUnique just inserts a cast, but its name documents assumptions on the part of the caller. assumeUnique(arr) should only be called when there are no more active mutable aliases to elements of $(D arr). To strengthen this assumption, assumeUnique(arr) also clears arr before returning. Essentially $(D assumeUnique(arr)) indicates commitment from the caller that there is no more mutable access to any of arr 's elements (transitively), and that all future accesses will be done through the immutable array returned by assumeUnique . Typically, assumeUnique is used to return arrays from functions that have allocated and built them. Params array <bug: unknown> The array to cast to immutable. Returns: The immutable array. Example $(RUNNABLE_EXAMPLE ---- string letters() { char[] result = new char['z' - 'a' + 1]; foreach (i, ref e; result) { e = cast(char)('a' + i); } return assumeUnique(result); } ---- ) The use in the example above is correct because result was private to letters and the memory it referenced can no longer be written to after the function returns. The following example shows an incorrect use of assumeUnique . Bad $(RUNNABLE_EXAMPLE ---- char[] buffer; string letters(char first, char last) { if (first >= last) return null; // fine auto sneaky = buffer; sneaky.length = last - first + 1; foreach (i, ref e; sneaky) { e = cast(char)('a' + i); } return assumeUnique(sneaky); // BAD } ---- ) The example above wreaks havoc on client code because it modifies the returned array that the previous caller considered immutable. To obtain an immutable array from the writable array buffer , replace the last line with: ---- return to!(string)(sneaky); // not that sneaky anymore ---- The to call will duplicate the array appropriately. $(PANEL $(NOTE Checking for uniqueness during compilation is possible in certain cases, especially when a function is marked (or inferred) as pure . The following example does not need to call assumeUnique because the compiler can infer the uniqueness of the array in the pure function:) $(RUNNABLE_EXAMPLE ---- static string letters() pure { char[] result = new char['z' - 'a' + 1]; foreach (i, ref e; result) { e = cast(char)('a' + i); } return result; } ---- ) For more on infering uniqueness see the $(B unique) and $(B lent) keywords in the $(HTTP www.cs.cmu.edu/~aldrich/papers/aldrich-dissertation.pdf, ArchJava) language. ) The downside of using assumeUnique 's convention-based usage is that at this time there is no formal checking of the correctness of the assumption; on the upside, the idiomatic use of assumeUnique is simple and rare enough to be tolerable. assumeUnique(array) <bug: unknown> assumeUnique( <bug: unknown> array ) ditto assumeUnique(array) <bug: unknown> assumeUnique( <bug: unknown> array ) ditto"
  },
  "phobos/std/exception/Functions/assumeWontThrow.html": {
    "href": "phobos/std/exception/Functions/assumeWontThrow.html",
    "title": "Overloads for - assumeWontThrow | Marmos Demo",
    "keywords": "Overloads for - assumeWontThrow Module std.exception assumeWontThrow(expr, msg, file, line) T assumeWontThrow( T expr, string msg, string file, size_t line ) Wraps a possibly-throwing expression in a nothrow wrapper so that it can be called by a nothrow function. This wrapper function documents commitment on the part of the caller that the appropriate steps have been taken to avoid whatever conditions may trigger an exception during the evaluation of expr . If it turns out that the expression $(I does) throw at runtime, the wrapper will throw an AssertError . (Note that Throwable objects such as AssertError that do not subclass Exception may be thrown even from nothrow functions, since they are considered to be serious runtime problems that cannot be recovered from.) Params expr T The expression asserted not to throw. msg string The message to include in the AssertError if the assumption turns out to be false. file string The source file name of the caller. line size_t The line number of the caller. Returns The value of expr , if any."
  },
  "phobos/std/exception/Functions/bailOut.html": {
    "href": "phobos/std/exception/Functions/bailOut.html",
    "title": "Overloads for - bailOut | Marmos Demo",
    "keywords": "Overloads for - bailOut Module std.exception bailOut(file, line, msg) noreturn bailOut( string file, size_t line, <bug: unknown> msg )"
  },
  "phobos/std/exception/Functions/collectException.html": {
    "href": "phobos/std/exception/Functions/collectException.html",
    "title": "Overloads for - collectException | Marmos Demo",
    "keywords": "Overloads for - collectException Module std.exception collectException(expression, result) T collectException( E expression, E result ) Catches and returns the exception thrown from the given expression. If no exception is thrown, then null is returned and result is set to the result of the expression. Note that while collectException $(I can) be used to collect any Throwable and not just Exception s, it is generally ill-advised to catch anything that is neither an Exception nor a type derived from Exception . So, do not use collectException to collect non-Exceptions unless you're sure that that's what you really want to do. Params T <parameter not found> The type of exception to catch. expression E The expression which may throw an exception. result E The result of the expression if no exception is thrown. collectException(expression) T collectException( E expression ) Catches and returns the exception thrown from the given expression. If no exception is thrown, then null is returned. E can be void . Note that while collectException $(I can) be used to collect any Throwable and not just Exception s, it is generally ill-advised to catch anything that is neither an Exception nor a type derived from Exception . So, do not use collectException to collect non-Exceptions unless you're sure that that's what you really want to do. Params T <parameter not found> The type of exception to catch. expression E The expression which may throw an exception."
  },
  "phobos/std/exception/Functions/collectExceptionMsg.html": {
    "href": "phobos/std/exception/Functions/collectExceptionMsg.html",
    "title": "Overloads for - collectExceptionMsg | Marmos Demo",
    "keywords": "Overloads for - collectExceptionMsg Module std.exception collectExceptionMsg(expression) string collectExceptionMsg( E expression ) Catches the exception thrown from the given expression and returns the msg property of that exception. If no exception is thrown, then null is returned. E can be void . If an exception is thrown but it has an empty message, then emptyExceptionMsg is returned. Note that while collectExceptionMsg $(I can) be used to collect any Throwable and not just Exception s, it is generally ill-advised to catch anything that is neither an Exception nor a type derived from Exception . So, do not use collectExceptionMsg to collect non-Exceptions unless you're sure that that's what you really want to do. Params T <parameter not found> The type of exception to catch. expression E The expression which may throw an exception."
  },
  "phobos/std/exception/Functions/doesPointTo.html": {
    "href": "phobos/std/exception/Functions/doesPointTo.html",
    "title": "Overloads for - doesPointTo | Marmos Demo",
    "keywords": "Overloads for - doesPointTo Module std.exception doesPointTo(source, target) bool doesPointTo( S source, T target ) Checks whether a given source object contains pointers or references to a given target object. Params source S The source object target T The target object Bugs The function is explicitly annotated @nogc because inference could fail, see $(LINK2 https://issues.dlang.org/show_bug.cgi?id=17084, Bugzilla issue 17084). Returns: true if source 's representation embeds a pointer that points to target 's representation or somewhere inside it. If source is or contains a dynamic array, then, then these functions will check if there is overlap between the dynamic array and target 's representation. If source is a class, then it will be handled as a pointer. If target is a pointer, a dynamic array or a class, then these functions will only check if source points to target , $(I not) what target references. If source is or contains a union or void[n] , then there may be either false positives or false negatives: doesPointTo will return true if it is absolutely certain source points to target . It may produce false negatives, but never false positives. This function should be prefered when trying to validate input data. mayPointTo will return false if it is absolutely certain source does not point to target . It may produce false positives, but never false negatives. This function should be prefered for defensively choosing a code path. Note: Evaluating $(D doesPointTo(x, x)) checks whether x has internal pointers. This should only be done as an assertive test, as the language is free to assume objects don't have internal pointers (TDPL 7.1.3.5). doesPointTo(source, target) bool doesPointTo( S source, T target ) ditto"
  },
  "phobos/std/exception/Functions/enforce.html": {
    "href": "phobos/std/exception/Functions/enforce.html",
    "title": "Overloads for - enforce | Marmos Demo",
    "keywords": "Overloads for - enforce Module std.exception enforce(value, dg) T enforce( T value, Dg dg ) ditto enforce(value, ex) T enforce( T value, Throwable ex ) ditto enforce(value, msg, file, line) T enforce( T value, <bug: unknown> msg, string file, size_t line ) Enforces that the given value is true. If the given value is false, an exception is thrown. The $(UL $(LI msg - error message as a string ) $(LI dg - custom delegate that return a string and is only called if an exception occurred) $(LI ex - custom exception to be thrown. It is lazy and is only created if an exception occurred) ) Params value T The value to test. E <parameter not found> Exception type to throw if the value evaluates to false. msg <bug: unknown> The error message to put in the exception if it is thrown. dg <parameter not found> The delegate to be called if the value evaluates to false. ex <parameter not found> The exception to throw if the value evaluates to false. file string The source file of the caller. line size_t The line number of the caller. Returns: value , if cast(bool) value is true. Otherwise, depending on the chosen overload, new Exception(msg) , dg() or ex is thrown. $(PANEL $(NOTE enforce is used to throw exceptions and is therefore intended to aid in error handling. It is $(I not) intended for verifying the logic of your program - that is what assert is for.) Do not use enforce inside of contracts (i.e. inside of in and out blocks and invariant s), because contracts are compiled out when compiling with $(I -release). ) If a delegate is passed, the safety and purity of this function are inferred from Dg 's safety and purity."
  },
  "phobos/std/exception/Functions/errnoString.html": {
    "href": "phobos/std/exception/Functions/errnoString.html",
    "title": "Overloads for - errnoString | Marmos Demo",
    "keywords": "Overloads for - errnoString Module std.exception errnoString(errno) string errnoString( int errno )"
  },
  "phobos/std/exception/Functions/handle.html": {
    "href": "phobos/std/exception/Functions/handle.html",
    "title": "Overloads for - handle | Marmos Demo",
    "keywords": "Overloads for - handle Module std.exception handle(input) <bug: unknown> handle( Range input ) auto Handle exceptions thrown from range primitives. Use the $(LREF RangePrimitive) enum to specify which primitives to handle. Multiple range primitives can be handled at once by using the OR operator or the pseudo-primitives RangePrimitive.access and RangePrimitive.pop . All handled primitives must have return types or values compatible with the user-supplied handler. Params: E = The type of Throwable to handle. primitivesToHandle = Set of range primitives to handle. handler = The callable that is called when a handled primitive throws a Throwable of type E . The handler must accept arguments of the form $(D E, ref IRange) and its return value is used as the primitive's return value whenever E is thrown. For opIndex , the handler can optionally recieve a third argument; the index that caused the exception. input = The range to handle. Returns: A wrapper struct that preserves the range interface of input . Note: Infinite ranges with slicing support must return an instance of $(REF Take, std,range) when sliced with a specific lower and upper bound (see $(REF hasSlicing, std,range,primitives)); handle deals with this by take ing 0 from the return value of the handler function and returning that when an exception is caught."
  },
  "phobos/std/exception/Functions/ifThrown.html": {
    "href": "phobos/std/exception/Functions/ifThrown.html",
    "title": "Overloads for - ifThrown | Marmos Demo",
    "keywords": "Overloads for - ifThrown Module std.exception ifThrown(expression, errorHandler) CommonType!(T1T2) ifThrown( T1 expression, T2 errorHandler ) ML-style functional exception handling. Runs the supplied expression and returns its result. If the expression throws a Throwable , runs the supplied error handler instead and return its result. The error handler's type must be the same as the expression's type. Params E <parameter not found> The type of Throwable s to catch. Defaults to Exception T1 <parameter not found> The type of the expression. T2 <parameter not found> The return type of the error handler. expression T1 The expression to run and return its result. errorHandler T2 The handler to run if the expression throwed. Returns expression, if it does not throw. Otherwise, returns the result of errorHandler. ifThrown(expression, errorHandler) CommonType!(T1T2) ifThrown( T1 expression, <bug: unknown> errorHandler ) ditto ifThrown(expression, errorHandler) CommonType!(T1T2) ifThrown( T1 expression, <bug: unknown> errorHandler ) ditto"
  },
  "phobos/std/exception/Functions/isUnionAliasedImpl.html": {
    "href": "phobos/std/exception/Functions/isUnionAliasedImpl.html",
    "title": "Overloads for - isUnionAliasedImpl | Marmos Demo",
    "keywords": "Overloads for - isUnionAliasedImpl Module std.exception isUnionAliasedImpl(offset) bool isUnionAliasedImpl( size_t offset )"
  },
  "phobos/std/exception/Functions/mayPointTo.html": {
    "href": "phobos/std/exception/Functions/mayPointTo.html",
    "title": "Overloads for - mayPointTo | Marmos Demo",
    "keywords": "Overloads for - mayPointTo Module std.exception mayPointTo(source, target) bool mayPointTo( S source, T target ) ditto mayPointTo(source, target) bool mayPointTo( S source, T target ) ditto"
  },
  "phobos/std/exception/Overview.html": {
    "href": "phobos/std/exception/Overview.html",
    "title": "Module - std.exception | Marmos Demo",
    "keywords": "Module - std.exception About This module defines functions related to exceptions and general error handling. It also defines functions intended to aid in unit testing. $(SCRIPT inhibitQuickIndex = 1;) $(DIVC quickindex, $(BOOKTABLE, $(TR $(TH Category) $(TH Functions)) $(TR $(TD Assumptions) $(TD $(LREF assertNotThrown) $(LREF assertThrown) $(LREF assumeUnique) $(LREF assumeWontThrow) $(LREF mayPointTo) )) $(TR $(TD Enforce) $(TD $(LREF doesPointTo) $(LREF enforce) $(LREF errnoEnforce) )) $(TR $(TD Handlers) $(TD $(LREF collectException) $(LREF collectExceptionMsg) $(LREF ifThrown) $(LREF handle) )) $(TR $(TD Other) $(TD $(LREF basicExceptionCtors) $(LREF emptyExceptionMsg) $(LREF ErrnoException) $(LREF RangePrimitive) )) )) Copyright: Copyright Andrei Alexandrescu 2008-, Jonathan M Davis 2011-. License: $(HTTP boost.org/LICENSE_1_0.txt, Boost License 1.0) Authors: $(HTTP erdani.org, Andrei Alexandrescu) and $(HTTP jmdavisprog.com, Jonathan M Davis) Source: $(PHOBOSSRC std/exception.d) Aliases Name Description errnoEnforce Enforces that the given value is true, throwing an ErrnoException if it is not. Classes Name Description ErrnoException Thrown if errors that set errno occur. Structs Name Description Page17084 URL17084 Functions Name Description assertCTFEable assertNotThrown Asserts that the given expression does $(I not) throw the given type of Throwable . If a Throwable of the given type is thrown, it is caught and does not escape assertNotThrown. Rather, an AssertError is thrown. However, any other Throwable s will escape. assertThrown Asserts that the given expression throws the given type of Throwable . The Throwable is caught and does not escape assertThrown. However, any other Throwable s $(I will) escape, and if no Throwable of the given type is thrown, then an AssertError is thrown. assumeUnique Casts a mutable array to an immutable array in an idiomatic manner. Technically, assumeUnique just inserts a cast, but its name documents assumptions on the part of the caller. assumeUnique(arr) should only be called when there are no more active mutable aliases to elements of $(D arr). To strengthen this assumption, assumeUnique(arr) also clears arr before returning. Essentially $(D assumeUnique(arr)) indicates commitment from the caller that there is no more mutable access to any of arr 's elements (transitively), and that all future accesses will be done through the immutable array returned by assumeUnique . assumeWontThrow Wraps a possibly-throwing expression in a nothrow wrapper so that it can be called by a nothrow function. bailOut collectException Catches and returns the exception thrown from the given expression. If no exception is thrown, then null is returned and result is set to the result of the expression. collectExceptionMsg Catches the exception thrown from the given expression and returns the msg property of that exception. If no exception is thrown, then null is returned. E can be void . doesPointTo Checks whether a given source object contains pointers or references to a given target object. enforce ditto errnoString handle Handle exceptions thrown from range primitives. ifThrown ML-style functional exception handling. Runs the supplied expression and returns its result. If the expression throws a Throwable , runs the supplied error handler instead and return its result. The error handler's type must be the same as the expression's type. isUnionAliasedImpl mayPointTo ditto Variables Name Description emptyExceptionMsg Value that collectExceptionMsg returns when it catches an exception with an empty exception message. isUnionAliased"
  },
  "phobos/std/exception/Structs/Page17084.html": {
    "href": "phobos/std/exception/Structs/Page17084.html",
    "title": "Struct - Page17084 | Marmos Demo",
    "keywords": "Struct - Page17084 Module std.exception public struct Page17084 { // URL17084 url; } Variables Name Description url"
  },
  "phobos/std/exception/Structs/URL17084.html": {
    "href": "phobos/std/exception/Structs/URL17084.html",
    "title": "Struct - URL17084 | Marmos Demo",
    "keywords": "Struct - URL17084 Module std.exception public struct URL17084 { // <bug: unknown> queryParams; } Variables Name Description queryParams"
  },
  "phobos/std/experimental/allocator/CAllocatorImpl/Functions/alignedAllocate.html": {
    "href": "phobos/std/experimental/allocator/CAllocatorImpl/Functions/alignedAllocate.html",
    "title": "Overloads for - alignedAllocate | Marmos Demo",
    "keywords": "Overloads for - alignedAllocate Module std.experimental.allocator Parent CAllocatorImpl alignedAllocate(s, a) <bug: unknown> alignedAllocate( size_t s, uint a ) override If impl.alignedAllocate exists, calls it and returns the result. Otherwise, always returns null ."
  },
  "phobos/std/experimental/allocator/CAllocatorImpl/Functions/alignedReallocate.html": {
    "href": "phobos/std/experimental/allocator/CAllocatorImpl/Functions/alignedReallocate.html",
    "title": "Overloads for - alignedReallocate | Marmos Demo",
    "keywords": "Overloads for - alignedReallocate Module std.experimental.allocator Parent CAllocatorImpl alignedReallocate(b, s, a) bool alignedReallocate( <bug: unknown> b, size_t s, uint a ) Forwards to impl.alignedReallocate if defined, false otherwise."
  },
  "phobos/std/experimental/allocator/CAllocatorImpl/Functions/alignment.html": {
    "href": "phobos/std/experimental/allocator/CAllocatorImpl/Functions/alignment.html",
    "title": "Overloads for - alignment | Marmos Demo",
    "keywords": "Overloads for - alignment Module std.experimental.allocator Parent CAllocatorImpl alignment() uint alignment( ) override Returns impl.alignment ."
  },
  "phobos/std/experimental/allocator/CAllocatorImpl/Functions/allocate.html": {
    "href": "phobos/std/experimental/allocator/CAllocatorImpl/Functions/allocate.html",
    "title": "Overloads for - allocate | Marmos Demo",
    "keywords": "Overloads for - allocate Module std.experimental.allocator Parent CAllocatorImpl allocate(s, ti) <bug: unknown> allocate( size_t s, TypeInfo ti ) override Returns impl.allocate(s) ."
  },
  "phobos/std/experimental/allocator/CAllocatorImpl/Functions/allocateAll.html": {
    "href": "phobos/std/experimental/allocator/CAllocatorImpl/Functions/allocateAll.html",
    "title": "Overloads for - allocateAll | Marmos Demo",
    "keywords": "Overloads for - allocateAll Module std.experimental.allocator Parent CAllocatorImpl allocateAll() <bug: unknown> allocateAll( ) override Returns impl.allocateAll() if present, null otherwise."
  },
  "phobos/std/experimental/allocator/CAllocatorImpl/Functions/deallocate.html": {
    "href": "phobos/std/experimental/allocator/CAllocatorImpl/Functions/deallocate.html",
    "title": "Overloads for - deallocate | Marmos Demo",
    "keywords": "Overloads for - deallocate Module std.experimental.allocator Parent CAllocatorImpl deallocate(b) bool deallocate( <bug: unknown> b ) override If impl.deallocate is not defined, returns false . Otherwise it forwards the call."
  },
  "phobos/std/experimental/allocator/CAllocatorImpl/Functions/deallocateAll.html": {
    "href": "phobos/std/experimental/allocator/CAllocatorImpl/Functions/deallocateAll.html",
    "title": "Overloads for - deallocateAll | Marmos Demo",
    "keywords": "Overloads for - deallocateAll Module std.experimental.allocator Parent CAllocatorImpl deallocateAll() bool deallocateAll( ) override Calls impl.deallocateAll() and returns the result if defined, otherwise returns false ."
  },
  "phobos/std/experimental/allocator/CAllocatorImpl/Functions/decRef.html": {
    "href": "phobos/std/experimental/allocator/CAllocatorImpl/Functions/decRef.html",
    "title": "Overloads for - decRef | Marmos Demo",
    "keywords": "Overloads for - decRef Module std.experimental.allocator Parent CAllocatorImpl decRef() bool decRef( ) override"
  },
  "phobos/std/experimental/allocator/CAllocatorImpl/Functions/empty.html": {
    "href": "phobos/std/experimental/allocator/CAllocatorImpl/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.experimental.allocator Parent CAllocatorImpl empty() Ternary empty( ) override Forwards to impl.empty() if defined, otherwise returns Ternary.unknown ."
  },
  "phobos/std/experimental/allocator/CAllocatorImpl/Functions/expand.html": {
    "href": "phobos/std/experimental/allocator/CAllocatorImpl/Functions/expand.html",
    "title": "Overloads for - expand | Marmos Demo",
    "keywords": "Overloads for - expand Module std.experimental.allocator Parent CAllocatorImpl expand(b, s) bool expand( <bug: unknown> b, size_t s ) override Returns $(D impl.expand(b, s)) if defined, false otherwise."
  },
  "phobos/std/experimental/allocator/CAllocatorImpl/Functions/goodAllocSize.html": {
    "href": "phobos/std/experimental/allocator/CAllocatorImpl/Functions/goodAllocSize.html",
    "title": "Overloads for - goodAllocSize | Marmos Demo",
    "keywords": "Overloads for - goodAllocSize Module std.experimental.allocator Parent CAllocatorImpl goodAllocSize(s) size_t goodAllocSize( size_t s ) override Returns impl.goodAllocSize(s) ."
  },
  "phobos/std/experimental/allocator/CAllocatorImpl/Functions/impl.html": {
    "href": "phobos/std/experimental/allocator/CAllocatorImpl/Functions/impl.html",
    "title": "Overloads for - impl | Marmos Demo",
    "keywords": "Overloads for - impl Module std.experimental.allocator Parent CAllocatorImpl impl() Allocator impl( ) The implementation is available as a public member."
  },
  "phobos/std/experimental/allocator/CAllocatorImpl/Functions/incRef.html": {
    "href": "phobos/std/experimental/allocator/CAllocatorImpl/Functions/incRef.html",
    "title": "Overloads for - incRef | Marmos Demo",
    "keywords": "Overloads for - incRef Module std.experimental.allocator Parent CAllocatorImpl incRef() void incRef( ) override"
  },
  "phobos/std/experimental/allocator/CAllocatorImpl/Functions/owns.html": {
    "href": "phobos/std/experimental/allocator/CAllocatorImpl/Functions/owns.html",
    "title": "Overloads for - owns | Marmos Demo",
    "keywords": "Overloads for - owns Module std.experimental.allocator Parent CAllocatorImpl owns(b) Ternary owns( <bug: unknown> b ) override If Allocator implements owns , forwards to it. Otherwise, returns Ternary.unknown ."
  },
  "phobos/std/experimental/allocator/CAllocatorImpl/Functions/reallocate.html": {
    "href": "phobos/std/experimental/allocator/CAllocatorImpl/Functions/reallocate.html",
    "title": "Overloads for - reallocate | Marmos Demo",
    "keywords": "Overloads for - reallocate Module std.experimental.allocator Parent CAllocatorImpl reallocate(b, s) bool reallocate( <bug: unknown> b, size_t s ) override Returns $(D impl.reallocate(b, s))."
  },
  "phobos/std/experimental/allocator/CAllocatorImpl/Functions/resolveInternalPointer.html": {
    "href": "phobos/std/experimental/allocator/CAllocatorImpl/Functions/resolveInternalPointer.html",
    "title": "Overloads for - resolveInternalPointer | Marmos Demo",
    "keywords": "Overloads for - resolveInternalPointer Module std.experimental.allocator Parent CAllocatorImpl resolveInternalPointer(p, result) Ternary resolveInternalPointer( <bug: unknown> p, <bug: unknown> result )"
  },
  "phobos/std/experimental/allocator/CSharedAllocatorImpl/Functions/alignedAllocate.html": {
    "href": "phobos/std/experimental/allocator/CSharedAllocatorImpl/Functions/alignedAllocate.html",
    "title": "Overloads for - alignedAllocate | Marmos Demo",
    "keywords": "Overloads for - alignedAllocate Module std.experimental.allocator Parent CSharedAllocatorImpl alignedAllocate(s, a) <bug: unknown> alignedAllocate( size_t s, uint a ) override If impl.alignedAllocate exists, calls it and returns the result. Otherwise, always returns null ."
  },
  "phobos/std/experimental/allocator/CSharedAllocatorImpl/Functions/alignedReallocate.html": {
    "href": "phobos/std/experimental/allocator/CSharedAllocatorImpl/Functions/alignedReallocate.html",
    "title": "Overloads for - alignedReallocate | Marmos Demo",
    "keywords": "Overloads for - alignedReallocate Module std.experimental.allocator Parent CSharedAllocatorImpl alignedReallocate(b, s, a) bool alignedReallocate( <bug: unknown> b, size_t s, uint a ) Forwards to impl.alignedReallocate if defined, false otherwise."
  },
  "phobos/std/experimental/allocator/CSharedAllocatorImpl/Functions/alignment.html": {
    "href": "phobos/std/experimental/allocator/CSharedAllocatorImpl/Functions/alignment.html",
    "title": "Overloads for - alignment | Marmos Demo",
    "keywords": "Overloads for - alignment Module std.experimental.allocator Parent CSharedAllocatorImpl alignment() uint alignment( ) override Returns impl.alignment ."
  },
  "phobos/std/experimental/allocator/CSharedAllocatorImpl/Functions/allocate.html": {
    "href": "phobos/std/experimental/allocator/CSharedAllocatorImpl/Functions/allocate.html",
    "title": "Overloads for - allocate | Marmos Demo",
    "keywords": "Overloads for - allocate Module std.experimental.allocator Parent CSharedAllocatorImpl allocate(s, ti) <bug: unknown> allocate( size_t s, TypeInfo ti ) override Returns impl.allocate(s) ."
  },
  "phobos/std/experimental/allocator/CSharedAllocatorImpl/Functions/allocateAll.html": {
    "href": "phobos/std/experimental/allocator/CSharedAllocatorImpl/Functions/allocateAll.html",
    "title": "Overloads for - allocateAll | Marmos Demo",
    "keywords": "Overloads for - allocateAll Module std.experimental.allocator Parent CSharedAllocatorImpl allocateAll() <bug: unknown> allocateAll( ) override Returns impl.allocateAll() if present, null otherwise."
  },
  "phobos/std/experimental/allocator/CSharedAllocatorImpl/Functions/deallocate.html": {
    "href": "phobos/std/experimental/allocator/CSharedAllocatorImpl/Functions/deallocate.html",
    "title": "Overloads for - deallocate | Marmos Demo",
    "keywords": "Overloads for - deallocate Module std.experimental.allocator Parent CSharedAllocatorImpl deallocate(b) bool deallocate( <bug: unknown> b ) override If impl.deallocate is not defined, returns false . Otherwise it forwards the call."
  },
  "phobos/std/experimental/allocator/CSharedAllocatorImpl/Functions/deallocateAll.html": {
    "href": "phobos/std/experimental/allocator/CSharedAllocatorImpl/Functions/deallocateAll.html",
    "title": "Overloads for - deallocateAll | Marmos Demo",
    "keywords": "Overloads for - deallocateAll Module std.experimental.allocator Parent CSharedAllocatorImpl deallocateAll() bool deallocateAll( ) override Calls impl.deallocateAll() and returns the result if defined, otherwise returns false ."
  },
  "phobos/std/experimental/allocator/CSharedAllocatorImpl/Functions/decRef.html": {
    "href": "phobos/std/experimental/allocator/CSharedAllocatorImpl/Functions/decRef.html",
    "title": "Overloads for - decRef | Marmos Demo",
    "keywords": "Overloads for - decRef Module std.experimental.allocator Parent CSharedAllocatorImpl decRef() bool decRef( ) override"
  },
  "phobos/std/experimental/allocator/CSharedAllocatorImpl/Functions/empty.html": {
    "href": "phobos/std/experimental/allocator/CSharedAllocatorImpl/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.experimental.allocator Parent CSharedAllocatorImpl empty() Ternary empty( ) override Forwards to impl.empty() if defined, otherwise returns Ternary.unknown ."
  },
  "phobos/std/experimental/allocator/CSharedAllocatorImpl/Functions/expand.html": {
    "href": "phobos/std/experimental/allocator/CSharedAllocatorImpl/Functions/expand.html",
    "title": "Overloads for - expand | Marmos Demo",
    "keywords": "Overloads for - expand Module std.experimental.allocator Parent CSharedAllocatorImpl expand(b, s) bool expand( <bug: unknown> b, size_t s ) override Returns $(D impl.expand(b, s)) if defined, false otherwise."
  },
  "phobos/std/experimental/allocator/CSharedAllocatorImpl/Functions/goodAllocSize.html": {
    "href": "phobos/std/experimental/allocator/CSharedAllocatorImpl/Functions/goodAllocSize.html",
    "title": "Overloads for - goodAllocSize | Marmos Demo",
    "keywords": "Overloads for - goodAllocSize Module std.experimental.allocator Parent CSharedAllocatorImpl goodAllocSize(s) size_t goodAllocSize( size_t s ) override Returns impl.goodAllocSize(s) ."
  },
  "phobos/std/experimental/allocator/CSharedAllocatorImpl/Functions/impl.html": {
    "href": "phobos/std/experimental/allocator/CSharedAllocatorImpl/Functions/impl.html",
    "title": "Overloads for - impl | Marmos Demo",
    "keywords": "Overloads for - impl Module std.experimental.allocator Parent CSharedAllocatorImpl impl() Allocator impl( ) The implementation is available as a public member."
  },
  "phobos/std/experimental/allocator/CSharedAllocatorImpl/Functions/incRef.html": {
    "href": "phobos/std/experimental/allocator/CSharedAllocatorImpl/Functions/incRef.html",
    "title": "Overloads for - incRef | Marmos Demo",
    "keywords": "Overloads for - incRef Module std.experimental.allocator Parent CSharedAllocatorImpl incRef() void incRef( ) override"
  },
  "phobos/std/experimental/allocator/CSharedAllocatorImpl/Functions/owns.html": {
    "href": "phobos/std/experimental/allocator/CSharedAllocatorImpl/Functions/owns.html",
    "title": "Overloads for - owns | Marmos Demo",
    "keywords": "Overloads for - owns Module std.experimental.allocator Parent CSharedAllocatorImpl owns(b) Ternary owns( <bug: unknown> b ) override If Allocator implements owns , forwards to it. Otherwise, returns Ternary.unknown ."
  },
  "phobos/std/experimental/allocator/CSharedAllocatorImpl/Functions/reallocate.html": {
    "href": "phobos/std/experimental/allocator/CSharedAllocatorImpl/Functions/reallocate.html",
    "title": "Overloads for - reallocate | Marmos Demo",
    "keywords": "Overloads for - reallocate Module std.experimental.allocator Parent CSharedAllocatorImpl reallocate(b, s) bool reallocate( <bug: unknown> b, size_t s ) override Returns $(D impl.reallocate(b, s))."
  },
  "phobos/std/experimental/allocator/CSharedAllocatorImpl/Functions/resolveInternalPointer.html": {
    "href": "phobos/std/experimental/allocator/CSharedAllocatorImpl/Functions/resolveInternalPointer.html",
    "title": "Overloads for - resolveInternalPointer | Marmos Demo",
    "keywords": "Overloads for - resolveInternalPointer Module std.experimental.allocator Parent CSharedAllocatorImpl resolveInternalPointer(p, result) Ternary resolveInternalPointer( <bug: unknown> p, <bug: unknown> result )"
  },
  "phobos/std/experimental/allocator/Classes/CAllocatorImpl.html": {
    "href": "phobos/std/experimental/allocator/Classes/CAllocatorImpl.html",
    "title": "Class - CAllocatorImpl | Marmos Demo",
    "keywords": "Class - CAllocatorImpl Module std.experimental.allocator public class CAllocatorImpl { // If `impl.alignedAllocate` exists, calls it and returns the result. Otherwise, always returns `null` . <bug: unknown> alignedAllocate( size_t s, uint a ) override; // Forwards to `impl.alignedReallocate` if defined, `false` otherwise. bool alignedReallocate( <bug: unknown> b, size_t s, uint a ) ; // Returns `impl.alignment` . uint alignment( ) override; // Returns `impl.allocate(s)` . <bug: unknown> allocate( size_t s, TypeInfo ti ) override; // Returns `impl.allocateAll()` if present, `null` otherwise. <bug: unknown> allocateAll( ) override; // If `impl.deallocate` is not defined, returns `false` . Otherwise it forwards the call. bool deallocate( <bug: unknown> b ) override; // Calls `impl.deallocateAll()` and returns the result if defined, otherwise returns `false` . bool deallocateAll( ) override; // bool decRef( ) override; // Forwards to `impl.empty()` if defined, otherwise returns `Ternary.unknown` . Ternary empty( ) override; // Returns $(D impl.expand(b, s)) if defined, `false` otherwise. bool expand( <bug: unknown> b, size_t s ) override; // Returns `impl.goodAllocSize(s)` . size_t goodAllocSize( size_t s ) override; // The implementation is available as a public member. Allocator impl( ) ; // void incRef( ) override; // If `Allocator` implements `owns` , forwards to it. Otherwise, returns `Ternary.unknown` . Ternary owns( <bug: unknown> b ) override; // Returns $(D impl.reallocate(b, s)). bool reallocate( <bug: unknown> b, size_t s ) override; // Ternary resolveInternalPointer( <bug: unknown> p, <bug: unknown> result ) ; // The implementation is available as a public member. <bug: unknown> pimpl; // size_t rc; } About Implementation of IAllocator using Allocator . This adapts a statically-built allocator type to IAllocator that is directly usable by non-templated code. Usually CAllocatorImpl is used indirectly by calling $(LREF theAllocator). Functions Name Description alignedAllocate If impl.alignedAllocate exists, calls it and returns the result. Otherwise, always returns null . alignedReallocate Forwards to impl.alignedReallocate if defined, false otherwise. alignment Returns impl.alignment . allocate Returns impl.allocate(s) . allocateAll Returns impl.allocateAll() if present, null otherwise. deallocate If impl.deallocate is not defined, returns false . Otherwise it forwards the call. deallocateAll Calls impl.deallocateAll() and returns the result if defined, otherwise returns false . decRef empty Forwards to impl.empty() if defined, otherwise returns Ternary.unknown . expand Returns $(D impl.expand(b, s)) if defined, false otherwise. goodAllocSize Returns impl.goodAllocSize(s) . impl The implementation is available as a public member. incRef owns If Allocator implements owns , forwards to it. Otherwise, returns Ternary.unknown . reallocate Returns $(D impl.reallocate(b, s)). resolveInternalPointer Variables Name Description pimpl The implementation is available as a public member. rc"
  },
  "phobos/std/experimental/allocator/Classes/CSharedAllocatorImpl.html": {
    "href": "phobos/std/experimental/allocator/Classes/CSharedAllocatorImpl.html",
    "title": "Class - CSharedAllocatorImpl | Marmos Demo",
    "keywords": "Class - CSharedAllocatorImpl Module std.experimental.allocator public class CSharedAllocatorImpl { // If `impl.alignedAllocate` exists, calls it and returns the result. Otherwise, always returns `null` . <bug: unknown> alignedAllocate( size_t s, uint a ) override; // Forwards to `impl.alignedReallocate` if defined, `false` otherwise. bool alignedReallocate( <bug: unknown> b, size_t s, uint a ) ; // Returns `impl.alignment` . uint alignment( ) override; // Returns `impl.allocate(s)` . <bug: unknown> allocate( size_t s, TypeInfo ti ) override; // Returns `impl.allocateAll()` if present, `null` otherwise. <bug: unknown> allocateAll( ) override; // If `impl.deallocate` is not defined, returns `false` . Otherwise it forwards the call. bool deallocate( <bug: unknown> b ) override; // Calls `impl.deallocateAll()` and returns the result if defined, otherwise returns `false` . bool deallocateAll( ) override; // bool decRef( ) override; // Forwards to `impl.empty()` if defined, otherwise returns `Ternary.unknown` . Ternary empty( ) override; // Returns $(D impl.expand(b, s)) if defined, `false` otherwise. bool expand( <bug: unknown> b, size_t s ) override; // Returns `impl.goodAllocSize(s)` . size_t goodAllocSize( size_t s ) override; // The implementation is available as a public member. Allocator impl( ) ; // void incRef( ) override; // If `Allocator` implements `owns` , forwards to it. Otherwise, returns `Ternary.unknown` . Ternary owns( <bug: unknown> b ) override; // Returns $(D impl.reallocate(b, s)). bool reallocate( <bug: unknown> b, size_t s ) override; // Ternary resolveInternalPointer( <bug: unknown> p, <bug: unknown> result ) ; // The implementation is available as a public member. shared <bug: unknown> pimpl; // shared size_t rc; } About Implementation of ISharedAllocator using Allocator . This adapts a statically-built, shareable across threads, allocator type to ISharedAllocator that is directly usable by non-templated code. Usually CSharedAllocatorImpl is used indirectly by calling $(LREF processAllocator). Functions Name Description alignedAllocate If impl.alignedAllocate exists, calls it and returns the result. Otherwise, always returns null . alignedReallocate Forwards to impl.alignedReallocate if defined, false otherwise. alignment Returns impl.alignment . allocate Returns impl.allocate(s) . allocateAll Returns impl.allocateAll() if present, null otherwise. deallocate If impl.deallocate is not defined, returns false . Otherwise it forwards the call. deallocateAll Calls impl.deallocateAll() and returns the result if defined, otherwise returns false . decRef empty Forwards to impl.empty() if defined, otherwise returns Ternary.unknown . expand Returns $(D impl.expand(b, s)) if defined, false otherwise. goodAllocSize Returns impl.goodAllocSize(s) . impl The implementation is available as a public member. incRef owns If Allocator implements owns , forwards to it. Otherwise, returns Ternary.unknown . reallocate Returns $(D impl.reallocate(b, s)). resolveInternalPointer Variables Name Description pimpl The implementation is available as a public member. rc"
  },
  "phobos/std/experimental/allocator/EmbeddedTree/Functions/assertSane.html": {
    "href": "phobos/std/experimental/allocator/EmbeddedTree/Functions/assertSane.html",
    "title": "Overloads for - assertSane | Marmos Demo",
    "keywords": "Overloads for - assertSane Module std.experimental.allocator Parent EmbeddedTree assertSane() void assertSane( )"
  },
  "phobos/std/experimental/allocator/EmbeddedTree/Functions/dump.html": {
    "href": "phobos/std/experimental/allocator/EmbeddedTree/Functions/dump.html",
    "title": "Overloads for - dump | Marmos Demo",
    "keywords": "Overloads for - dump Module std.experimental.allocator Parent EmbeddedTree dump() void dump( ) dump(r, indent) void dump( <bug: unknown> r, uint indent )"
  },
  "phobos/std/experimental/allocator/EmbeddedTree/Functions/empty.html": {
    "href": "phobos/std/experimental/allocator/EmbeddedTree/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.experimental.allocator Parent EmbeddedTree empty() Ternary empty( )"
  },
  "phobos/std/experimental/allocator/EmbeddedTree/Functions/find.html": {
    "href": "phobos/std/experimental/allocator/EmbeddedTree/Functions/find.html",
    "title": "Overloads for - find | Marmos Demo",
    "keywords": "Overloads for - find Module std.experimental.allocator Parent EmbeddedTree find(data) <bug: unknown> find( <bug: unknown> data )"
  },
  "phobos/std/experimental/allocator/EmbeddedTree/Functions/insert.html": {
    "href": "phobos/std/experimental/allocator/EmbeddedTree/Functions/insert.html",
    "title": "Overloads for - insert | Marmos Demo",
    "keywords": "Overloads for - insert Module std.experimental.allocator Parent EmbeddedTree insert(n, backref) <bug: unknown> insert( <bug: unknown> n, <bug: unknown> backref ) insert(data) <bug: unknown> insert( <bug: unknown> data )"
  },
  "phobos/std/experimental/allocator/EmbeddedTree/Functions/remove.html": {
    "href": "phobos/std/experimental/allocator/EmbeddedTree/Functions/remove.html",
    "title": "Overloads for - remove | Marmos Demo",
    "keywords": "Overloads for - remove Module std.experimental.allocator Parent EmbeddedTree remove(data) <bug: unknown> remove( <bug: unknown> data ) remove(n, parent) void remove( <bug: unknown> n, <bug: unknown> parent )"
  },
  "phobos/std/experimental/allocator/ForcedInputRange/Functions/empty.html": {
    "href": "phobos/std/experimental/allocator/ForcedInputRange/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.experimental.allocator Parent ForcedInputRange empty() bool empty( )"
  },
  "phobos/std/experimental/allocator/ForcedInputRange/Functions/front.html": {
    "href": "phobos/std/experimental/allocator/ForcedInputRange/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.experimental.allocator Parent ForcedInputRange front() T front( )"
  },
  "phobos/std/experimental/allocator/ForcedInputRange/Functions/popFront.html": {
    "href": "phobos/std/experimental/allocator/ForcedInputRange/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.experimental.allocator Parent ForcedInputRange popFront() void popFront( )"
  },
  "phobos/std/experimental/allocator/Functions/allocatorObject.html": {
    "href": "phobos/std/experimental/allocator/Functions/allocatorObject.html",
    "title": "Overloads for - allocatorObject | Marmos Demo",
    "keywords": "Overloads for - allocatorObject Module std.experimental.allocator allocatorObject(a) RCIAllocator allocatorObject( A a ) Returns a dynamically-typed CAllocator built around a given statically- typed allocator a of type A . Passing a pointer to the allocator creates a dynamic allocator around the allocator pointed to by the pointer, without attempting to copy or move it. Passing the allocator by value or reference behaves as follows. $(UL $(LI If A has no state, the resulting object is allocated in static shared storage.) $(LI If A has state, the result will $(REF move, std,algorithm,mutation) the supplied allocator $(D A a) within. The result itself is allocated in its own statically-typed allocator.) ) allocatorObject(pa) RCIAllocator allocatorObject( <bug: unknown> pa ) Ditto"
  },
  "phobos/std/experimental/allocator/Functions/dispose.html": {
    "href": "phobos/std/experimental/allocator/Functions/dispose.html",
    "title": "Overloads for - dispose | Marmos Demo",
    "keywords": "Overloads for - dispose Module std.experimental.allocator dispose(alloc, p) void dispose( A alloc, <bug: unknown> p ) Destroys and then deallocates (using alloc ) the object pointed to by a pointer, the class object referred to by a class or interface reference, or an entire array. It is assumed the respective entities had been allocated with the same allocator. dispose(alloc, p) void dispose( A alloc, T p ) Ditto dispose(alloc, array) void dispose( A alloc, <bug: unknown> array ) Ditto"
  },
  "phobos/std/experimental/allocator/Functions/disposeMultidimensionalArray.html": {
    "href": "phobos/std/experimental/allocator/Functions/disposeMultidimensionalArray.html",
    "title": "Overloads for - disposeMultidimensionalArray | Marmos Demo",
    "keywords": "Overloads for - disposeMultidimensionalArray Module std.experimental.allocator disposeMultidimensionalArray(alloc, array) void disposeMultidimensionalArray( Allocator alloc, <bug: unknown> array ) Destroys and then deallocates a multidimensional array, assuming it was created with makeMultidimensionalArray and the same allocator was used. Params T <parameter not found> element type of an element of the multidimensional array alloc Allocator the allocator used for getting memory array <bug: unknown> the multidimensional array that is to be deallocated"
  },
  "phobos/std/experimental/allocator/Functions/expandArray.html": {
    "href": "phobos/std/experimental/allocator/Functions/expandArray.html",
    "title": "Overloads for - expandArray | Marmos Demo",
    "keywords": "Overloads for - expandArray Module std.experimental.allocator expandArray(alloc, array, delta) bool expandArray( Allocator alloc, <bug: unknown> array, size_t delta ) Grows array by appending delta more elements. The needed memory is allocated using alloc . The extra elements added are either default- initialized, filled with copies of init , or initialized with values fetched from range . Params T <parameter not found> element type of the array being created alloc Allocator the allocator used for getting memory array <bug: unknown> a reference to the array being grown delta size_t number of elements to add (upon success the new length of array is alloc = the allocator used for getting memory array = a reference to the array being grown delta = number of elements to add (upon success the new length of array is $(D array.length + delta)) init = element used for filling the array range = range used for initializing the array elements Returns true upon success, false if memory could not be allocated. In the latter case array is left unaffected. Throws The first two overloads throw only if alloc 's primitives do. The overloads that involve copy initialization deallocate memory and propagate the exception if the copy operation throws. expandArray(alloc, array, delta, init) bool expandArray( Allocator alloc, <bug: unknown> array, size_t delta, T init ) Ditto expandArray(alloc, array, range) bool expandArray( Allocator alloc, <bug: unknown> array, R range ) Ditto"
  },
  "phobos/std/experimental/allocator/Functions/fillWithMemcpy.html": {
    "href": "phobos/std/experimental/allocator/Functions/fillWithMemcpy.html",
    "title": "Overloads for - fillWithMemcpy | Marmos Demo",
    "keywords": "Overloads for - fillWithMemcpy Module std.experimental.allocator fillWithMemcpy(array, filler) void fillWithMemcpy( <bug: unknown> array, T filler ) fillWithMemcpy(array, filler) void fillWithMemcpy( <bug: unknown> array, T filler )"
  },
  "phobos/std/experimental/allocator/Functions/make.html": {
    "href": "phobos/std/experimental/allocator/Functions/make.html",
    "title": "Overloads for - make | Marmos Demo",
    "keywords": "Overloads for - make Module std.experimental.allocator make(alloc, args) <bug: unknown> make( Allocator alloc, A args ) auto Dynamically allocates (using alloc ) and then creates in the memory allocated an object of type T , using args (if any) for its initialization. Initialization occurs in the memory allocated and is otherwise semantically the same as T(args) . (Note that using alloc.make!(T[]) creates a pointer to an (empty) array of T s, not an array. To use an allocator to allocate and initialize an array, use alloc.makeArray!T described below.) Params T <parameter not found> Type of the object being created. alloc Allocator The allocator used for getting the needed memory. It may be an object alloc = The allocator used for getting the needed memory. It may be an object implementing the static interface for allocators, or an IAllocator reference. args = Optional arguments used for initializing the created object. If not present, the object is default constructed. Returns: If T is a class type, returns a reference to the created T object. Otherwise, returns a T* pointing to the created object. In all cases, returns null if allocation failed. Throws: If T 's constructor throws, deallocates the allocated memory and propagates the exception."
  },
  "phobos/std/experimental/allocator/Functions/makeArray.html": {
    "href": "phobos/std/experimental/allocator/Functions/makeArray.html",
    "title": "Overloads for - makeArray | Marmos Demo",
    "keywords": "Overloads for - makeArray Module std.experimental.allocator makeArray(alloc, length) <bug: unknown> makeArray( Allocator alloc, size_t length ) Create an array of T with length elements using alloc . The array is either default-initialized, filled with copies of init , or initialized with values fetched from range . Params T <parameter not found> element type of the array being created alloc Allocator the allocator used for getting memory length size_t length of the newly created array init <parameter not found> element used for filling the array range <parameter not found> range used for initializing the array elements Returns The newly-created array, or null if either length was 0 or allocation failed. Throws The first two overloads throw only if alloc 's primitives do. The overloads that involve copy initialization deallocate memory and propagate the exception if the copy operation throws. makeArray(alloc, length, init) <bug: unknown> makeArray( Allocator alloc, size_t length, T init ) Ditto makeArray(alloc, range) <bug: unknown> makeArray( Allocator alloc, R range ) Ditto makeArray(alloc, range) <bug: unknown> makeArray( Allocator alloc, R range ) Ditto"
  },
  "phobos/std/experimental/allocator/Functions/makeMultidimensionalArray.html": {
    "href": "phobos/std/experimental/allocator/Functions/makeMultidimensionalArray.html",
    "title": "Overloads for - makeMultidimensionalArray | Marmos Demo",
    "keywords": "Overloads for - makeMultidimensionalArray Module std.experimental.allocator makeMultidimensionalArray(alloc, lengths) <bug: unknown> makeMultidimensionalArray( Allocator alloc, <bug: unknown> lengths ) auto Allocates a multidimensional array of elements of type T. Params N <parameter not found> number of dimensions T <parameter not found> element type of an element of the multidimensional arrat alloc Allocator the allocator used for getting memory lengths <bug: unknown> static array containing the size of each dimension Returns An N-dimensional array with individual elements of type T."
  },
  "phobos/std/experimental/allocator/Functions/processAllocator.html": {
    "href": "phobos/std/experimental/allocator/Functions/processAllocator.html",
    "title": "Overloads for - processAllocator | Marmos Demo",
    "keywords": "Overloads for - processAllocator Module std.experimental.allocator processAllocator() RCISharedAllocator processAllocator( ) Gets/sets the allocator for the current process. This allocator must be used for allocating memory shared across threads. Objects created using this allocator can be cast to shared . processAllocator(a) void processAllocator( RCISharedAllocator a ) Ditto"
  },
  "phobos/std/experimental/allocator/Functions/setupThreadAllocator.html": {
    "href": "phobos/std/experimental/allocator/Functions/setupThreadAllocator.html",
    "title": "Overloads for - setupThreadAllocator | Marmos Demo",
    "keywords": "Overloads for - setupThreadAllocator Module std.experimental.allocator setupThreadAllocator() RCIAllocator setupThreadAllocator( )"
  },
  "phobos/std/experimental/allocator/Functions/sharedAllocatorObject.html": {
    "href": "phobos/std/experimental/allocator/Functions/sharedAllocatorObject.html",
    "title": "Overloads for - sharedAllocatorObject | Marmos Demo",
    "keywords": "Overloads for - sharedAllocatorObject Module std.experimental.allocator sharedAllocatorObject(a) RCISharedAllocator sharedAllocatorObject( A a ) Returns a dynamically-typed CSharedAllocator built around a given statically- typed allocator a of type A . Passing a pointer to the allocator creates a dynamic allocator around the allocator pointed to by the pointer, without attempting to copy or move it. Passing the allocator by value or reference behaves as follows. $(UL $(LI If A has no state, the resulting object is allocated in static shared storage.) $(LI If A has state and is copyable, the result will $(REF move, std,algorithm,mutation) the supplied allocator $(D A a) within. The result itself is allocated in its own statically-typed allocator.) $(LI If A has state and is not copyable, the result will move the passed-in argument into the result. The result itself is allocated in its own statically-typed allocator.) ) sharedAllocatorObject(pa) RCISharedAllocator sharedAllocatorObject( <bug: unknown> pa ) Ditto"
  },
  "phobos/std/experimental/allocator/Functions/shrinkArray.html": {
    "href": "phobos/std/experimental/allocator/Functions/shrinkArray.html",
    "title": "Overloads for - shrinkArray | Marmos Demo",
    "keywords": "Overloads for - shrinkArray Module std.experimental.allocator shrinkArray(alloc, array, delta) bool shrinkArray( Allocator alloc, <bug: unknown> array, size_t delta ) Shrinks an array by delta elements. If $(D array.length < delta), does nothing and returns false . Otherwise, destroys the last $(D array.length - delta) elements in the array and then reallocates the array's buffer. If reallocation fails, fills the array with default-initialized data. Params T <parameter not found> element type of the array being created alloc Allocator the allocator used for getting memory array <bug: unknown> a reference to the array being shrunk delta size_t number of elements to remove (upon success the new length of array is $(D array.length - delta)) Returns true upon success, false if memory could not be reallocated. In the latter case, the slice \\((D array[\\) - delta .. $]) is left with default-initialized elements. Throws The first two overloads throw only if alloc 's primitives do. The overloads that involve copy initialization deallocate memory and propagate the exception if the copy operation throws."
  },
  "phobos/std/experimental/allocator/Functions/theAllocator.html": {
    "href": "phobos/std/experimental/allocator/Functions/theAllocator.html",
    "title": "Overloads for - theAllocator | Marmos Demo",
    "keywords": "Overloads for - theAllocator Module std.experimental.allocator theAllocator() RCIAllocator theAllocator( ) Gets/sets the allocator for the current thread. This is the default allocator that should be used for allocating thread-local memory. For allocating memory to be shared across threads, use processAllocator (below). By default, theAllocator ultimately fetches memory from processAllocator , which in turn uses the garbage collected heap. theAllocator(a) void theAllocator( RCIAllocator a ) Ditto"
  },
  "phobos/std/experimental/allocator/Functions/uninitializedFillDefault.html": {
    "href": "phobos/std/experimental/allocator/Functions/uninitializedFillDefault.html",
    "title": "Overloads for - uninitializedFillDefault | Marmos Demo",
    "keywords": "Overloads for - uninitializedFillDefault Module std.experimental.allocator uninitializedFillDefault(array) <bug: unknown> uninitializedFillDefault( <bug: unknown> array )"
  },
  "phobos/std/experimental/allocator/InternalPointersTree/Functions/allocate.html": {
    "href": "phobos/std/experimental/allocator/InternalPointersTree/Functions/allocate.html",
    "title": "Overloads for - allocate | Marmos Demo",
    "keywords": "Overloads for - allocate Module std.experimental.allocator Parent InternalPointersTree allocate(bytes) <bug: unknown> allocate( size_t bytes ) Allocator API."
  },
  "phobos/std/experimental/allocator/InternalPointersTree/Functions/deallocate.html": {
    "href": "phobos/std/experimental/allocator/InternalPointersTree/Functions/deallocate.html",
    "title": "Overloads for - deallocate | Marmos Demo",
    "keywords": "Overloads for - deallocate Module std.experimental.allocator Parent InternalPointersTree deallocate(b) bool deallocate( <bug: unknown> b ) Ditto"
  },
  "phobos/std/experimental/allocator/InternalPointersTree/Functions/empty.html": {
    "href": "phobos/std/experimental/allocator/InternalPointersTree/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.experimental.allocator Parent InternalPointersTree empty() Ternary empty( ) Ditto"
  },
  "phobos/std/experimental/allocator/InternalPointersTree/Functions/owns.html": {
    "href": "phobos/std/experimental/allocator/InternalPointersTree/Functions/owns.html",
    "title": "Overloads for - owns | Marmos Demo",
    "keywords": "Overloads for - owns Module std.experimental.allocator Parent InternalPointersTree owns(b) Ternary owns( <bug: unknown> b ) Ditto"
  },
  "phobos/std/experimental/allocator/InternalPointersTree/Functions/reallocate.html": {
    "href": "phobos/std/experimental/allocator/InternalPointersTree/Functions/reallocate.html",
    "title": "Overloads for - reallocate | Marmos Demo",
    "keywords": "Overloads for - reallocate Module std.experimental.allocator Parent InternalPointersTree reallocate(b, s) bool reallocate( <bug: unknown> b, size_t s ) Ditto"
  },
  "phobos/std/experimental/allocator/InternalPointersTree/Functions/resolveInternalPointer.html": {
    "href": "phobos/std/experimental/allocator/InternalPointersTree/Functions/resolveInternalPointer.html",
    "title": "Overloads for - resolveInternalPointer | Marmos Demo",
    "keywords": "Overloads for - resolveInternalPointer Module std.experimental.allocator Parent InternalPointersTree resolveInternalPointer(p, result) Ternary resolveInternalPointer( <bug: unknown> p, <bug: unknown> result ) Returns the block inside which p resides, or null if the pointer does not belong."
  },
  "phobos/std/experimental/allocator/Overview.html": {
    "href": "phobos/std/experimental/allocator/Overview.html",
    "title": "Module - std.experimental.allocator | Marmos Demo",
    "keywords": "Module - std.experimental.allocator About High-level interface for allocators. Implements bundled allocation/creation and destruction/deallocation of data including struct s and class es, and also array primitives related to allocation. This module is the entry point for both making use of allocators and for their documentation. $(SCRIPT inhibitQuickIndex = 1;) $(BOOKTABLE, $(TR $(TH Category) $(TH Functions)) $(TR $(TD Make) $(TD $(LREF make) $(LREF makeArray) $(LREF makeMultidimensionalArray) )) $(TR $(TD Dispose) $(TD $(LREF dispose) $(LREF disposeMultidimensionalArray) )) $(TR $(TD Modify) $(TD $(LREF expandArray) $(LREF shrinkArray) )) $(TR $(TD Global) $(TD $(LREF processAllocator) $(LREF theAllocator) )) $(TR $(TD Class interface) $(TD $(LREF CAllocatorImpl) $(LREF CSharedAllocatorImpl) $(LREF IAllocator) $(LREF ISharedAllocator) )) $(TR $(TD Structs) $(TD $(LREF allocatorObject) $(LREF RCIAllocator) $(LREF RCISharedAllocator) $(LREF sharedAllocatorObject) $(LREF ThreadLocal) )) ) Synopsis $(RUNNABLE_EXAMPLE --- // Allocate an int, initialize it with 42 int* p = theAllocator.make!int(42); assert(*p == 42); // Destroy and deallocate it theAllocator.dispose(p); // Allocate using the global process allocator p = processAllocator.make!int(100); assert(*p == 100); // Destroy and deallocate processAllocator.dispose(p); --- ) $(RUNNABLE_EXAMPLE --- // Create an array of 50 doubles initialized to -1.0 double[] arr = theAllocator.makeArray!double(50, -1.0); // Append two zeros to it theAllocator.expandArray(arr, 2, 0.0); // On second thought, take that back theAllocator.shrinkArray(arr, 2); // Destroy and deallocate theAllocator.dispose(arr); --- ) $(H2 Layered Structure) D's allocators have a layered structure in both implementation and documentation $(OL $(LI A high-level, dynamically-typed layer (described further down in this module). It consists of an interface called $(LREF IAllocator), which concrete allocators need to implement. The interface primitives themselves are oblivious to the type of the objects being allocated; they only deal in void[] , by necessity of the interface being dynamic (as opposed to type-parameterized). Each thread has a current allocator it uses by default, which is a thread-local variable $(LREF theAllocator) of type $(LREF IAllocator). The process has a global allocator called $(LREF processAllocator), also of type $(LREF IAllocator). When a new thread is created, $(LREF processAllocator) is copied into $(LREF theAllocator). An application can change the objects to which these references point. By default, at application startup, $(LREF processAllocator) refers to an object that uses D's garbage collected heap. This layer also include high-level functions such as $(LREF make) and $(LREF dispose) that comfortably allocate/create and respectively destroy/deallocate objects. This layer is all needed for most casual uses of allocation primitives.) $(LI A mid-level, statically-typed layer for assembling several allocators into one. It uses properties of the type of the objects being created to route allocation requests to possibly specialized allocators. This layer is relatively thin and implemented and documented in the $(MREF std,experimental,allocator,typed) module. It allows an interested user to e.g. use different allocators for arrays versus fixed-sized objects, to the end of better overall performance.) $(LI A low-level collection of highly generic \\((I heap building blocks)\\)(MDASH) Lego-like pieces that can be used to assemble application-specific allocators. The real allocation smarts are occurring at this level. This layer is of interest to advanced applications that want to configure their own allocators. A good illustration of typical uses of these building blocks is module $(MREF std,experimental,allocator,showcase) which defines a collection of frequently- used preassembled allocator objects. The implementation and documentation entry point is $(MREF std,experimental,allocator,building_blocks). By design, the primitives of the static interface have the same signatures as the $(LREF IAllocator) primitives but are for the most part optional and driven by static introspection. The parameterized class $(LREF CAllocatorImpl) offers an immediate and useful means to package a static low-level allocator into an implementation of $(LREF IAllocator).) \\((LI Core allocator objects that interface with D's garbage collected heap (\\)(MREF std,experimental,allocator,gc_allocator)), the C malloc family (\\((MREF std,experimental,allocator,mallocator)), and the OS (\\)(MREF std,experimental,allocator,mmap_allocator)). Most custom allocators would ultimately obtain memory from one of these core allocators.) ) $(H2 Idiomatic Use of std.experimental.allocator ) As of this time, std.experimental.allocator is not integrated with D's built-in operators that allocate memory, such as new , array literals, or array concatenation operators. That means std.experimental.allocator is opt-in$(MDASH)applications need to make explicit use of it. For casual creation and disposal of dynamically-allocated objects, use $(LREF make), $(LREF dispose), and the array-specific functions $(LREF makeArray), $(LREF expandArray), and $(LREF shrinkArray). These use by default D's garbage collected heap, but open the application to better configuration options. These primitives work either with theAllocator but also with any allocator obtained by combining heap building blocks. For example: ---- void fun(size_t n) { // Use the current allocator int[] a1 = theAllocator.makeArray!int(n); scope(exit) theAllocator.dispose(a1); ... } ---- To experiment with alternative allocators, set $(LREF theAllocator) for the current thread. For example, consider an application that allocates many 8-byte objects. These are not well supported by the default allocator, so a $(MREF_ALTTEXT free list allocator, std,experimental,allocator,building_blocks,free_list) would be recommended. To install one in main , the application would use: ---- void main() { import std.experimental.allocator.building_blocks.free_list : FreeList; theAllocator = allocatorObject(FreeList!8()); ... } ---- $(H3 Saving the IAllocator Reference For Later Use) As with any global resource, setting theAllocator and processAllocator should not be done often and casually. In particular, allocating memory with one allocator and deallocating with another causes undefined behavior. Typically, these variables are set during application initialization phase and last through the application. To avoid this, long-lived objects that need to perform allocations, reallocations, and deallocations relatively often may want to store a reference to the allocator object they use throughout their lifetime. Then, instead of using theAllocator for internal allocation-related tasks, they'd use the internally held reference. For example, consider a user-defined hash table: ---- struct HashTable { private IAllocator allocator; this(size_t buckets, IAllocator allocator = theAllocator) { this.allocator = allocator; ... } // Getter and setter IAllocator allocator() { return allocator; } void allocator(IAllocator a) { assert(empty); allocator = a; } } ---- Following initialization, the HashTable object would consistently use its allocator object for acquiring memory. Furthermore, setting HashTable.allocator to point to a different allocator should be legal but only if the object is empty; otherwise, the object wouldn't be able to deallocate its existing state. $(H3 Using Allocators without IAllocator ) Allocators assembled from the heap building blocks don't need to go through IAllocator to be usable. They have the same primitives as IAllocator and they work with $(LREF make), $(LREF makeArray), $(LREF dispose) etc. So it suffice to create allocator objects wherever fit and use them appropriately: ---- void fun(size_t n) { // Use a stack-installed allocator for up to 64KB StackFront!65536 myAllocator; int[] a2 = myAllocator.makeArray!int(n); scope(exit) myAllocator.dispose(a2); ... } ---- In this case, myAllocator does not obey the IAllocator interface, but implements its primitives so it can work with makeArray by means of duck typing. One important thing to note about this setup is that statically-typed assembled allocators are almost always faster than allocators that go through IAllocator . An important rule of thumb is: \"assemble allocator first, adapt to IAllocator after\". A good allocator implements intricate logic by means of template assembly, and gets wrapped with IAllocator (usually by means of $(LREF allocatorObject)) only once, at client level. Copyright: Andrei Alexandrescu 2013-. License: $(HTTP boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP erdani.com, Andrei Alexandrescu) Source: $(PHOBOSSRC std/experimental/allocator) Classes Name Description CAllocatorImpl Implementation of IAllocator using Allocator . This adapts a statically-built allocator type to IAllocator that is directly usable by non-templated code. CSharedAllocatorImpl Implementation of ISharedAllocator using Allocator . This adapts a statically-built, shareable across threads, allocator type to ISharedAllocator that is directly usable by non-templated code. Structs Name Description EmbeddedTree ForcedInputRange InternalPointersTree RCIAllocator A reference counted struct that wraps the dynamic allocator interface. This should be used wherever a uniform type is required for encapsulating various allocator implementations. RCISharedAllocator A reference counted struct that wraps the dynamic shared allocator interface. This should be used wherever a uniform type is required for encapsulating various allocator implementations. ThreadLocal Stores an allocator object in thread-local storage (i.e. non-shared D global). ThreadLocal!A is a subtype of A so it appears to implement A 's allocator primitives. Functions Name Description allocatorObject Returns a dynamically-typed CAllocator built around a given statically- typed allocator a of type A . Passing a pointer to the allocator creates a dynamic allocator around the allocator pointed to by the pointer, without attempting to copy or move it. Passing the allocator by value or reference behaves as follows. dispose Destroys and then deallocates (using alloc ) the object pointed to by a pointer, the class object referred to by a class or interface reference, or an entire array. It is assumed the respective entities had been allocated with the same allocator. disposeMultidimensionalArray Destroys and then deallocates a multidimensional array, assuming it was created with makeMultidimensionalArray and the same allocator was used. expandArray Grows array by appending delta more elements. The needed memory is allocated using alloc . The extra elements added are either default- initialized, filled with copies of init , or initialized with values fetched from range . fillWithMemcpy make Dynamically allocates (using alloc ) and then creates in the memory allocated an object of type T , using args (if any) for its initialization. Initialization occurs in the memory allocated and is otherwise semantically the same as T(args) . (Note that using alloc.make!(T[]) creates a pointer to an (empty) array of T s, not an array. To use an allocator to allocate and initialize an array, use alloc.makeArray!T described below.) makeArray Create an array of T with length elements using alloc . The array is either default-initialized, filled with copies of init , or initialized with values fetched from range . makeMultidimensionalArray Allocates a multidimensional array of elements of type T. processAllocator Gets/sets the allocator for the current process. This allocator must be used for allocating memory shared across threads. Objects created using this allocator can be cast to shared . setupThreadAllocator sharedAllocatorObject Returns a dynamically-typed CSharedAllocator built around a given statically- typed allocator a of type A . Passing a pointer to the allocator creates a dynamic allocator around the allocator pointed to by the pointer, without attempting to copy or move it. Passing the allocator by value or reference behaves as follows. shrinkArray Shrinks an array by delta elements. theAllocator Gets/sets the allocator for the current thread. This is the default allocator that should be used for allocating thread-local memory. For allocating memory to be shared across threads, use processAllocator (below). By default, theAllocator ultimately fetches memory from processAllocator , which in turn uses the garbage collected heap. uninitializedFillDefault Variables Name Description canSafelyDeallocPostRewind hasPureDtor hasPurePostblit"
  },
  "phobos/std/experimental/allocator/RCIAllocator/Functions/alignedAllocate.html": {
    "href": "phobos/std/experimental/allocator/RCIAllocator/Functions/alignedAllocate.html",
    "title": "Overloads for - alignedAllocate | Marmos Demo",
    "keywords": "Overloads for - alignedAllocate Module std.experimental.allocator Parent RCIAllocator alignedAllocate(n, a) <bug: unknown> alignedAllocate( size_t n, uint a )"
  },
  "phobos/std/experimental/allocator/RCIAllocator/Functions/alignedReallocate.html": {
    "href": "phobos/std/experimental/allocator/RCIAllocator/Functions/alignedReallocate.html",
    "title": "Overloads for - alignedReallocate | Marmos Demo",
    "keywords": "Overloads for - alignedReallocate Module std.experimental.allocator Parent RCIAllocator alignedReallocate(b, size, alignment) bool alignedReallocate( <bug: unknown> b, size_t size, uint alignment )"
  },
  "phobos/std/experimental/allocator/RCIAllocator/Functions/alignment.html": {
    "href": "phobos/std/experimental/allocator/RCIAllocator/Functions/alignment.html",
    "title": "Overloads for - alignment | Marmos Demo",
    "keywords": "Overloads for - alignment Module std.experimental.allocator Parent RCIAllocator alignment() uint alignment( )"
  },
  "phobos/std/experimental/allocator/RCIAllocator/Functions/allocate.html": {
    "href": "phobos/std/experimental/allocator/RCIAllocator/Functions/allocate.html",
    "title": "Overloads for - allocate | Marmos Demo",
    "keywords": "Overloads for - allocate Module std.experimental.allocator Parent RCIAllocator allocate(n, ti) <bug: unknown> allocate( size_t n, TypeInfo ti )"
  },
  "phobos/std/experimental/allocator/RCIAllocator/Functions/allocateAll.html": {
    "href": "phobos/std/experimental/allocator/RCIAllocator/Functions/allocateAll.html",
    "title": "Overloads for - allocateAll | Marmos Demo",
    "keywords": "Overloads for - allocateAll Module std.experimental.allocator Parent RCIAllocator allocateAll() <bug: unknown> allocateAll( )"
  },
  "phobos/std/experimental/allocator/RCIAllocator/Functions/deallocate.html": {
    "href": "phobos/std/experimental/allocator/RCIAllocator/Functions/deallocate.html",
    "title": "Overloads for - deallocate | Marmos Demo",
    "keywords": "Overloads for - deallocate Module std.experimental.allocator Parent RCIAllocator deallocate(b) bool deallocate( <bug: unknown> b )"
  },
  "phobos/std/experimental/allocator/RCIAllocator/Functions/deallocateAll.html": {
    "href": "phobos/std/experimental/allocator/RCIAllocator/Functions/deallocateAll.html",
    "title": "Overloads for - deallocateAll | Marmos Demo",
    "keywords": "Overloads for - deallocateAll Module std.experimental.allocator Parent RCIAllocator deallocateAll() bool deallocateAll( )"
  },
  "phobos/std/experimental/allocator/RCIAllocator/Functions/empty.html": {
    "href": "phobos/std/experimental/allocator/RCIAllocator/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.experimental.allocator Parent RCIAllocator empty() Ternary empty( )"
  },
  "phobos/std/experimental/allocator/RCIAllocator/Functions/expand.html": {
    "href": "phobos/std/experimental/allocator/RCIAllocator/Functions/expand.html",
    "title": "Overloads for - expand | Marmos Demo",
    "keywords": "Overloads for - expand Module std.experimental.allocator Parent RCIAllocator expand(b, size) bool expand( <bug: unknown> b, size_t size )"
  },
  "phobos/std/experimental/allocator/RCIAllocator/Functions/goodAllocSize.html": {
    "href": "phobos/std/experimental/allocator/RCIAllocator/Functions/goodAllocSize.html",
    "title": "Overloads for - goodAllocSize | Marmos Demo",
    "keywords": "Overloads for - goodAllocSize Module std.experimental.allocator Parent RCIAllocator goodAllocSize(s) size_t goodAllocSize( size_t s )"
  },
  "phobos/std/experimental/allocator/RCIAllocator/Functions/owns.html": {
    "href": "phobos/std/experimental/allocator/RCIAllocator/Functions/owns.html",
    "title": "Overloads for - owns | Marmos Demo",
    "keywords": "Overloads for - owns Module std.experimental.allocator Parent RCIAllocator owns(b) Ternary owns( <bug: unknown> b )"
  },
  "phobos/std/experimental/allocator/RCIAllocator/Functions/reallocate.html": {
    "href": "phobos/std/experimental/allocator/RCIAllocator/Functions/reallocate.html",
    "title": "Overloads for - reallocate | Marmos Demo",
    "keywords": "Overloads for - reallocate Module std.experimental.allocator Parent RCIAllocator reallocate(b, size) bool reallocate( <bug: unknown> b, size_t size )"
  },
  "phobos/std/experimental/allocator/RCIAllocator/Functions/resolveInternalPointer.html": {
    "href": "phobos/std/experimental/allocator/RCIAllocator/Functions/resolveInternalPointer.html",
    "title": "Overloads for - resolveInternalPointer | Marmos Demo",
    "keywords": "Overloads for - resolveInternalPointer Module std.experimental.allocator Parent RCIAllocator resolveInternalPointer(p, result) Ternary resolveInternalPointer( <bug: unknown> p, <bug: unknown> result )"
  },
  "phobos/std/experimental/allocator/RCISharedAllocator/Functions/alignedAllocate.html": {
    "href": "phobos/std/experimental/allocator/RCISharedAllocator/Functions/alignedAllocate.html",
    "title": "Overloads for - alignedAllocate | Marmos Demo",
    "keywords": "Overloads for - alignedAllocate Module std.experimental.allocator Parent RCISharedAllocator alignedAllocate(n, a) <bug: unknown> alignedAllocate( size_t n, uint a )"
  },
  "phobos/std/experimental/allocator/RCISharedAllocator/Functions/alignedReallocate.html": {
    "href": "phobos/std/experimental/allocator/RCISharedAllocator/Functions/alignedReallocate.html",
    "title": "Overloads for - alignedReallocate | Marmos Demo",
    "keywords": "Overloads for - alignedReallocate Module std.experimental.allocator Parent RCISharedAllocator alignedReallocate(b, size, alignment) bool alignedReallocate( <bug: unknown> b, size_t size, uint alignment )"
  },
  "phobos/std/experimental/allocator/RCISharedAllocator/Functions/alignment.html": {
    "href": "phobos/std/experimental/allocator/RCISharedAllocator/Functions/alignment.html",
    "title": "Overloads for - alignment | Marmos Demo",
    "keywords": "Overloads for - alignment Module std.experimental.allocator Parent RCISharedAllocator alignment() uint alignment( )"
  },
  "phobos/std/experimental/allocator/RCISharedAllocator/Functions/allocate.html": {
    "href": "phobos/std/experimental/allocator/RCISharedAllocator/Functions/allocate.html",
    "title": "Overloads for - allocate | Marmos Demo",
    "keywords": "Overloads for - allocate Module std.experimental.allocator Parent RCISharedAllocator allocate(n, ti) <bug: unknown> allocate( size_t n, TypeInfo ti )"
  },
  "phobos/std/experimental/allocator/RCISharedAllocator/Functions/allocateAll.html": {
    "href": "phobos/std/experimental/allocator/RCISharedAllocator/Functions/allocateAll.html",
    "title": "Overloads for - allocateAll | Marmos Demo",
    "keywords": "Overloads for - allocateAll Module std.experimental.allocator Parent RCISharedAllocator allocateAll() <bug: unknown> allocateAll( )"
  },
  "phobos/std/experimental/allocator/RCISharedAllocator/Functions/deallocate.html": {
    "href": "phobos/std/experimental/allocator/RCISharedAllocator/Functions/deallocate.html",
    "title": "Overloads for - deallocate | Marmos Demo",
    "keywords": "Overloads for - deallocate Module std.experimental.allocator Parent RCISharedAllocator deallocate(b) bool deallocate( <bug: unknown> b )"
  },
  "phobos/std/experimental/allocator/RCISharedAllocator/Functions/deallocateAll.html": {
    "href": "phobos/std/experimental/allocator/RCISharedAllocator/Functions/deallocateAll.html",
    "title": "Overloads for - deallocateAll | Marmos Demo",
    "keywords": "Overloads for - deallocateAll Module std.experimental.allocator Parent RCISharedAllocator deallocateAll() bool deallocateAll( )"
  },
  "phobos/std/experimental/allocator/RCISharedAllocator/Functions/empty.html": {
    "href": "phobos/std/experimental/allocator/RCISharedAllocator/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.experimental.allocator Parent RCISharedAllocator empty() Ternary empty( )"
  },
  "phobos/std/experimental/allocator/RCISharedAllocator/Functions/expand.html": {
    "href": "phobos/std/experimental/allocator/RCISharedAllocator/Functions/expand.html",
    "title": "Overloads for - expand | Marmos Demo",
    "keywords": "Overloads for - expand Module std.experimental.allocator Parent RCISharedAllocator expand(b, size) bool expand( <bug: unknown> b, size_t size )"
  },
  "phobos/std/experimental/allocator/RCISharedAllocator/Functions/goodAllocSize.html": {
    "href": "phobos/std/experimental/allocator/RCISharedAllocator/Functions/goodAllocSize.html",
    "title": "Overloads for - goodAllocSize | Marmos Demo",
    "keywords": "Overloads for - goodAllocSize Module std.experimental.allocator Parent RCISharedAllocator goodAllocSize(s) size_t goodAllocSize( size_t s )"
  },
  "phobos/std/experimental/allocator/RCISharedAllocator/Functions/owns.html": {
    "href": "phobos/std/experimental/allocator/RCISharedAllocator/Functions/owns.html",
    "title": "Overloads for - owns | Marmos Demo",
    "keywords": "Overloads for - owns Module std.experimental.allocator Parent RCISharedAllocator owns(b) Ternary owns( <bug: unknown> b )"
  },
  "phobos/std/experimental/allocator/RCISharedAllocator/Functions/reallocate.html": {
    "href": "phobos/std/experimental/allocator/RCISharedAllocator/Functions/reallocate.html",
    "title": "Overloads for - reallocate | Marmos Demo",
    "keywords": "Overloads for - reallocate Module std.experimental.allocator Parent RCISharedAllocator reallocate(b, size) bool reallocate( <bug: unknown> b, size_t size )"
  },
  "phobos/std/experimental/allocator/RCISharedAllocator/Functions/resolveInternalPointer.html": {
    "href": "phobos/std/experimental/allocator/RCISharedAllocator/Functions/resolveInternalPointer.html",
    "title": "Overloads for - resolveInternalPointer | Marmos Demo",
    "keywords": "Overloads for - resolveInternalPointer Module std.experimental.allocator Parent RCISharedAllocator resolveInternalPointer(p, result) Ternary resolveInternalPointer( <bug: unknown> p, <bug: unknown> result )"
  },
  "phobos/std/experimental/allocator/Structs/EmbeddedTree.html": {
    "href": "phobos/std/experimental/allocator/Structs/EmbeddedTree.html",
    "title": "Struct - EmbeddedTree | Marmos Demo",
    "keywords": "Struct - EmbeddedTree Module std.experimental.allocator public struct EmbeddedTree { // void assertSane( ) ; // void dump( ) ; // void dump( <bug: unknown> r, uint indent ) ; // Ternary empty( ) ; // <bug: unknown> find( <bug: unknown> data ) ; // <bug: unknown> insert( <bug: unknown> n, <bug: unknown> backref ) ; // <bug: unknown> insert( <bug: unknown> data ) ; // <bug: unknown> remove( <bug: unknown> data ) ; // void remove( <bug: unknown> n, <bug: unknown> parent ) ; // <bug: unknown> root; } Functions Name Description assertSane dump empty find insert remove Variables Name Description root"
  },
  "phobos/std/experimental/allocator/Structs/ForcedInputRange.html": {
    "href": "phobos/std/experimental/allocator/Structs/ForcedInputRange.html",
    "title": "Struct - ForcedInputRange | Marmos Demo",
    "keywords": "Struct - ForcedInputRange Module std.experimental.allocator public struct ForcedInputRange { // bool empty( ) ; // T front( ) ; // void popFront( ) ; // <bug: unknown> array; } Functions Name Description empty front popFront Variables Name Description array"
  },
  "phobos/std/experimental/allocator/Structs/InternalPointersTree.html": {
    "href": "phobos/std/experimental/allocator/Structs/InternalPointersTree.html",
    "title": "Struct - InternalPointersTree | Marmos Demo",
    "keywords": "Struct - InternalPointersTree Module std.experimental.allocator public struct InternalPointersTree { // alias alignment = <todo: marmos support pending>; // alias Parent = <todo: marmos support pending>; // alias Tree = <todo: marmos support pending>; // Allocator API. <bug: unknown> allocate( size_t bytes ) ; // Ditto bool deallocate( <bug: unknown> b ) ; // Ditto Ternary empty( ) ; // Ditto Ternary owns( <bug: unknown> b ) ; // Ditto bool reallocate( <bug: unknown> b, size_t s ) ; // Returns the block inside which `p` resides, or `null` if the pointer does not belong. Ternary resolveInternalPointer( <bug: unknown> p, <bug: unknown> result ) ; // Tree blockMap; // The implementation is available as a public member. Parent parent; } Aliases Name Description alignment Parent Tree Functions Name Description allocate Allocator API. deallocate Ditto empty Ditto owns Ditto reallocate Ditto resolveInternalPointer Returns the block inside which p resides, or null if the pointer does not belong. Variables Name Description blockMap parent The implementation is available as a public member."
  },
  "phobos/std/experimental/allocator/Structs/RCIAllocator.html": {
    "href": "phobos/std/experimental/allocator/Structs/RCIAllocator.html",
    "title": "Struct - RCIAllocator | Marmos Demo",
    "keywords": "Struct - RCIAllocator Module std.experimental.allocator public struct RCIAllocator { // <bug: unknown> alignedAllocate( size_t n, uint a ) ; // bool alignedReallocate( <bug: unknown> b, size_t size, uint alignment ) ; // uint alignment( ) ; // <bug: unknown> allocate( size_t n, TypeInfo ti ) ; // <bug: unknown> allocateAll( ) ; // bool deallocate( <bug: unknown> b ) ; // bool deallocateAll( ) ; // Ternary empty( ) ; // bool expand( <bug: unknown> b, size_t size ) ; // size_t goodAllocSize( size_t s ) ; // Ternary owns( <bug: unknown> b ) ; // bool reallocate( <bug: unknown> b, size_t size ) ; // Ternary resolveInternalPointer( <bug: unknown> p, <bug: unknown> result ) ; } About A reference counted struct that wraps the dynamic allocator interface. This should be used wherever a uniform type is required for encapsulating various allocator implementations. Code that defines allocators ultimately implements the $(LREF IAllocator) interface, possibly by using $(LREF CAllocatorImpl) below, and then build a RCIAllocator out of this. Composition of allocators is not recommended at this level due to inflexibility of dynamic interfaces and inefficiencies caused by cascaded multiple calls. Instead, compose allocators using the static interface defined in $(A std_experimental_allocator_building_blocks.html, std.experimental.allocator.building_blocks ), then adapt the composed allocator to RCIAllocator (possibly by using $(LREF allocatorObject) below). Functions Name Description alignedAllocate alignedReallocate alignment allocate allocateAll deallocate deallocateAll empty expand goodAllocSize owns reallocate resolveInternalPointer"
  },
  "phobos/std/experimental/allocator/Structs/RCISharedAllocator.html": {
    "href": "phobos/std/experimental/allocator/Structs/RCISharedAllocator.html",
    "title": "Struct - RCISharedAllocator | Marmos Demo",
    "keywords": "Struct - RCISharedAllocator Module std.experimental.allocator public struct RCISharedAllocator { // <bug: unknown> alignedAllocate( size_t n, uint a ) ; // bool alignedReallocate( <bug: unknown> b, size_t size, uint alignment ) ; // uint alignment( ) ; // <bug: unknown> allocate( size_t n, TypeInfo ti ) ; // <bug: unknown> allocateAll( ) ; // bool deallocate( <bug: unknown> b ) ; // bool deallocateAll( ) ; // Ternary empty( ) ; // bool expand( <bug: unknown> b, size_t size ) ; // size_t goodAllocSize( size_t s ) ; // Ternary owns( <bug: unknown> b ) ; // bool reallocate( <bug: unknown> b, size_t size ) ; // Ternary resolveInternalPointer( <bug: unknown> p, <bug: unknown> result ) ; } About A reference counted struct that wraps the dynamic shared allocator interface. This should be used wherever a uniform type is required for encapsulating various allocator implementations. Code that defines allocators shareable across threads ultimately implements the $(LREF ISharedAllocator) interface, possibly by using $(LREF CSharedAllocatorImpl) below, and then build a RCISharedAllocator out of this. Composition of allocators is not recommended at this level due to inflexibility of dynamic interfaces and inefficiencies caused by cascaded multiple calls. Instead, compose allocators using the static interface defined in $(A std_experimental_allocator_building_blocks.html, std.experimental.allocator.building_blocks ), then adapt the composed allocator to RCISharedAllocator (possibly by using $(LREF sharedAllocatorObject) below). Functions Name Description alignedAllocate alignedReallocate alignment allocate allocateAll deallocate deallocateAll empty expand goodAllocSize owns reallocate resolveInternalPointer"
  },
  "phobos/std/experimental/allocator/Structs/ThreadLocal.html": {
    "href": "phobos/std/experimental/allocator/Structs/ThreadLocal.html",
    "title": "Struct - ThreadLocal | Marmos Demo",
    "keywords": "Struct - ThreadLocal Module std.experimental.allocator public struct ThreadLocal { // The allocator instance. static A instance; } About Stores an allocator object in thread-local storage (i.e. non-shared D global). ThreadLocal!A is a subtype of A so it appears to implement A 's allocator primitives. A must hold state, otherwise ThreadLocal!A refuses instantiation. This means e.g. ThreadLocal!Mallocator does not work because Mallocator 's state is not stored as members of Mallocator , but instead is hidden in the C library implementation. Variables Name Description instance The allocator instance."
  },
  "phobos/std/experimental/allocator/building_blocks/Overview.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/Overview.html",
    "title": "Module - std.experimental.allocator.building_blocks | Marmos Demo",
    "keywords": "Module - std.experimental.allocator.building_blocks About $(H2 Assembling Your Own Allocator) This package also implements untyped composable memory allocators. They are $(I untyped) because they deal exclusively in void[] and have no notion of what type the memory allocated would be destined for. They are $(I composable) because the included allocators are building blocks that can be assembled in complex nontrivial allocators. $(P Unlike the allocators for the C and C++ programming languages, which manage the allocated size internally, these allocators require that the client maintains (or knows $(I a priori)) the allocation size for each piece of memory allocated. Put simply, the client must pass the allocated size upon deallocation. Storing the size in the allocator has significant negative performance implications, and is virtually always redundant because client code needs knowledge of the allocated size in order to avoid buffer overruns. (See more discussion in a $(HTTP open- std.org/JTC1/SC22/WG21/docs/papers/2013/n3536.html, proposal) for sized deallocation in C++.) For this reason, allocators herein traffic in void[] as opposed to void* .) $(P In order to be usable as an allocator, a type should implement the following methods with their respective semantics. Only alignment and $(D allocate) are required. If any of the other methods is missing, the allocator is assumed to not have that capability (for example some allocators do not offer manual deallocation of memory). Allocators should NOT implement unsupported methods to always fail. For example, an allocator that lacks the capability to implement alignedAllocate should not define it at all (as opposed to defining it to always return null or throw an exception). The missing implementation statically informs other components about the allocator's capabilities and allows them to make design decisions accordingly.) $(BOOKTABLE , $(TR $(TH Method name) $(TH Semantics)) $(TR $(TDC uint alignment;, $(POST $(RES) > 0)) $(TD Returns the minimum alignment of all data returned by the allocator. An allocator may implement $(D alignment) as a statically-known enum value only. Applications that need dynamically-chosen alignment values should use the alignedAllocate and $(D alignedReallocate) APIs.)) $(TR $(TDC size_t goodAllocSize(size_t n);, $(POST $(RES) >= n)) $(TD Allocators customarily allocate memory in discretely-sized chunks. Therefore, a request for n bytes may result in a larger allocation. The extra memory allocated goes unused and adds to the so-called $(HTTP goo.gl/YoKffF,internal fragmentation). The function goodAllocSize(n) returns the actual number of bytes that would be allocated upon a request for n bytes. This module defines a default implementation that returns n rounded up to a multiple of the allocator's alignment.)) $(TR $(TDC void[] allocate(size_t s);, $(POST $(RES) is null || $(RES).length == s)) $(TD If $(D s == 0), the call may return any empty slice (including $(D null)). Otherwise, the call allocates s bytes of memory and returns the allocated block, or null if the request could not be satisfied.)) $(TR $(TDC void[] alignedAllocate(size_t s, uint a);, $(POST $(RES) is null || $(RES).length == s)) $(TD Similar to allocate , with the additional guarantee that the memory returned is aligned to at least a bytes. a must be a power of 2.)) $(TR $(TDC void[] allocateAll();) $(TD Offers all of allocator's memory to the caller, so it's usually defined by fixed-size allocators. If the allocator is currently NOT managing any memory, then allocateAll() shall allocate and return all memory available to the allocator, and subsequent calls to all allocation primitives should not succeed (e.g. allocate shall return $(D null) etc). Otherwise, allocateAll only works on a best-effort basis, and the allocator is allowed to return null even if does have available memory. Memory allocated with allocateAll is not otherwise special (e.g. can be reallocated or deallocated with the usual primitives, if defined).)) $(TR $(TDC bool expand(ref void[] b, size_t delta);, \\((POST !\\)(RES) || b.length == $(I old)(b).length + delta)) $(TD Expands b by delta bytes. If $(D delta == 0), succeeds without changing b . If $(D b is null), returns false (the null pointer cannot be expanded in place). Otherwise, $(D b) must be a buffer previously allocated with the same allocator. If expansion was successful, expand changes b 's length to $(D b.length + delta) and returns true . Upon failure, the call effects no change upon the allocator object, leaves b unchanged, and returns false .)) $(TR $(TDC bool reallocate(ref void[] b, size_t s);, \\((POST !\\)(RES) || b.length == s)) $(TD Reallocates b to size s , possibly moving memory around. b must be null or a buffer allocated with the same allocator. If reallocation was successful, reallocate changes b appropriately and returns true . Upon failure, the call effects no change upon the allocator object, leaves b unchanged, and returns false . An allocator should implement reallocate if it can derive some advantage from doing so; otherwise, this module defines a reallocate free function implemented in terms of expand , allocate , and deallocate .)) $(TR \\((TDC bool alignedReallocate(ref void[] b,\\)(BR) size_t s, uint a);, \\((POST !\\)(RES) || b.length == s)) $(TD Similar to reallocate , but guarantees the reallocated memory is aligned at a bytes. The buffer must have been originated with a call to alignedAllocate . a must be a power of 2 greater than (void*).sizeof . An allocator should implement $(D alignedReallocate) if it can derive some advantage from doing so; otherwise, this module defines a alignedReallocate free function implemented in terms of expand , alignedAllocate , and deallocate .)) $(TR $(TDC Ternary owns(void[] b);) $(TD Returns Ternary.yes if b has been allocated with this allocator. An allocator should define this method only if it can decide on ownership precisely and fast (in constant time, logarithmic time, or linear time with a low multiplication factor). Traditional allocators such as the C heap do not define such functionality. If $(D b is null), the allocator shall return Ternary.no , i.e. no allocator owns the null slice.)) $(TR $(TDC Ternary resolveInternalPointer(void* p, ref void[] result);) $(TD If p is a pointer somewhere inside a block allocated with this allocator, result holds a pointer to the beginning of the allocated block and returns Ternary.yes . Otherwise, result holds null and returns Ternary.no . If the pointer points immediately after an allocated block, the result is implementation defined.)) $(TR $(TDC bool deallocate(void[] b);) $(TD If $(D b is null), does nothing and returns true . Otherwise, deallocates memory previously allocated with this allocator and returns true if successful, false otherwise. An implementation that would not support deallocation (i.e. would always return false should not define this primitive at all.))) $(TR $(TDC bool deallocateAll();, $(POST empty)) $(TD Deallocates all memory allocated with this allocator. If an allocator implements this method, it must specify whether its destructor calls it, too.)) $(TR $(TDC Ternary empty();) $(TD Returns Ternary.yes if and only if the allocator holds no memory (i.e. no allocation has occurred, or all allocations have been deallocated).)) $(TR $(TDC static Allocator instance;, $(POST instance $(I is a valid) Allocator $(I object))) $(TD Some allocators are $(I monostate), i.e. have only an instance and hold only global state. (Notable examples are C's own malloc -based allocator and D's garbage-collected heap.) Such allocators must define a static instance instance that serves as the symbolic placeholder for the global instance of the allocator. An allocator should not hold state and define instance simultaneously. Depending on whether the allocator is thread-safe or not, this instance may be shared .)) ) $(H2 Sample Assembly) The example below features an allocator modeled after $(HTTP goo.gl/m7329l, jemalloc), which uses a battery of free-list allocators spaced so as to keep internal fragmentation to a minimum. The FList definitions specify no bounds for the freelist because the Segregator does all size selection in advance. Sizes through 3584 bytes are handled via freelists of staggered sizes. Sizes from 3585 bytes through 4072 KB are handled by a BitmappedBlock with a block size of 4 KB. Sizes above that are passed direct to the GCAllocator . $(RUNNABLE_EXAMPLE ---- import std.experimental.allocator; import std.algorithm.comparison : max; alias FList = FreeList!(GCAllocator, 0, unbounded); alias A = Segregator!( 8, FreeList!(GCAllocator, 0, 8), 128, Bucketizer!(FList, 1, 128, 16), 256, Bucketizer!(FList, 129, 256, 32), 512, Bucketizer!(FList, 257, 512, 64), 1024, Bucketizer!(FList, 513, 1024, 128), 2048, Bucketizer!(FList, 1025, 2048, 256), 3584, Bucketizer!(FList, 2049, 3584, 512), 4072 **1024, AllocatorList!(n => Region!GCAllocator(max(n, 1024 ** 4096))), GCAllocator ); A tuMalloc; auto b = tuMalloc.allocate(500); assert(b.length == 500); auto c = tuMalloc.allocate(113); assert(c.length == 113); assert(tuMalloc.expand(c, 14)); tuMalloc.deallocate(b); tuMalloc.deallocate(c); ---- ) $(H2 Allocating memory for sharing across threads) One allocation pattern used in multithreaded applications is to share memory across threads, and to deallocate blocks in a different thread than the one that allocated it. All allocators in this module accept and return void[] (as opposed to $(D shared void[])). This is because at the time of allocation, deallocation, or reallocation, the memory is effectively not shared (if it were, it would reveal a bug at the application level). The issue remains of calling a.deallocate(b) from a different thread than the one that allocated b . It follows that both threads must have access to the same instance a of the respective allocator type. By definition of D, this is possible only if a has the shared qualifier. It follows that the allocator type must implement allocate and deallocate as $(D shared) methods. That way, the allocator commits to allowing usable shared instances. Conversely, allocating memory with one non-shared allocator, passing it across threads (by casting the obtained buffer to shared ), and later deallocating it in a different thread (either with a different allocator object or with the same allocator object after casting it to shared ) is illegal. $(H2 Building Blocks) $(P The table below gives a synopsis of predefined allocator building blocks, with their respective modules. Either import the needed modules individually, or import std.experimental.building_blocks , which imports them all public ly. The building blocks can be assembled in unbounded ways and also combined with your own. For a collection of typical and useful preassembled allocators and for inspiration in defining more such assemblies, refer to $(MREF std,experimental,allocator,showcase).) $(BOOKTABLE, $(TR \\((TH Allocator\\)(BR)) $(TH Description)) $(TR $(TDC2 NullAllocator, null_allocator) $(TD Very good at doing absolutely nothing. A good starting point for defining other allocators or for studying the API.)) $(TR $(TDC3 GCAllocator, gc_allocator) $(TD The system-provided garbage-collector allocator. This should be the default fallback allocator tapping into system memory. It offers manual free and dutifully collects litter.)) $(TR $(TDC3 Mallocator, mallocator) $(TD The C heap allocator, a.k.a. $(D malloc)/realloc/free. Use sparingly and only for code that is unlikely to leak.)) $(TR $(TDC3 AlignedMallocator, mallocator) $(TD Interface to OS-specific allocators that support specifying alignment: $(HTTP man7.org/linux/man-pages/man3/posix_memalign.3.html, posix_memalign ) on Posix and $(HTTP msdn.microsoft.com/en-us/library/fs9stz4e(v=vs.80).aspx, __aligned_xxx ) on Windows.)) $(TR $(TDC2 AlignedBlockList, aligned_block_list) $(TD A wrapper around a list of allocators which allow for very fast deallocations.)) $(TR $(TDC2 AffixAllocator, affix_allocator) $(TD Allocator that allows and manages allocating extra prefix and/or a suffix bytes for each block allocated.)) $(TR $(TDC2 BitmappedBlock, bitmapped_block) $(TD Organizes one contiguous chunk of memory in equal-size blocks and tracks allocation status at the cost of one bit per block.)) $(TR $(TDC2 FallbackAllocator, fallback_allocator) $(TD Allocator that combines two other allocators - primary and fallback. Allocation requests are first tried with primary, and upon failure are passed to the fallback. Useful for small and fast allocators fronting general-purpose ones.)) $(TR $(TDC2 FreeList, free_list) $(TD Allocator that implements a $(HTTP wikipedia.org/wiki/Free_list, free list) on top of any other allocator. The preferred size, tolerance, and maximum elements are configurable at compile- and run time.)) $(TR $(TDC2 SharedFreeList, free_list) $(TD Same features as FreeList , but packaged as a shared structure that is accessible to several threads.)) $(TR $(TDC2 FreeTree, free_tree) $(TD Allocator similar to FreeList that uses a binary search tree to adaptively store not one, but many free lists.)) $(TR $(TDC2 Region, region) $(TD Region allocator organizes a chunk of memory as a simple bump-the-pointer allocator.)) $(TR $(TDC2 InSituRegion, region) $(TD Region holding its own allocation, most often on the stack. Has statically-determined size.)) $(TR $(TDC2 SbrkRegion, region) $(TD Region using $(D $(LINK2 https://en.wikipedia.org/wiki/Sbrk, sbrk)) for allocating memory.)) $(TR $(TDC3 MmapAllocator, mmap_allocator) $(TD Allocator using $(D $(LINK2 https://en.wikipedia.org/wiki/Mmap, mmap)) directly.)) $(TR $(TDC2 StatsCollector, stats_collector) $(TD Collect statistics about any other allocator.)) $(TR $(TDC2 Quantizer, quantizer) $(TD Allocates in coarse-grained quantas, thus improving performance of reallocations by often reallocating in place. The drawback is higher memory consumption because of allocated and unused memory.)) $(TR $(TDC2 AllocatorList, allocator_list) $(TD Given an allocator factory, lazily creates as many allocators as needed to satisfy allocation requests. The allocators are stored in a linked list. Requests for allocation are satisfied by searching the list in a linear manner.)) $(TR $(TDC2 Segregator, segregator) $(TD Segregates allocation requests by size and dispatches them to distinct allocators.)) $(TR $(TDC2 Bucketizer, bucketizer) $(TD Divides allocation sizes in discrete buckets and uses an array of allocators, one per bucket, to satisfy requests.)) $(TR $(TDC2 AscendingPageAllocator, ascending_page_allocator) $(TD A memory safe allocator where sizes are rounded to a multiple of the page size and allocations are satisfied at increasing addresses.)) $(COMMENT $(TR $(TDC2 InternalPointersTree) $(TD Adds support for resolving internal pointers on top of another allocator.))) ) Source: $(PHOBOSSRC std/experimental/allocator/building_blocks/package.d) Macros MYREF2 $(REF_SHORT $1, std,experimental,allocator,building_blocks,$2) MYREF3 $(REF_SHORT $1, std,experimental,allocator,$2) TDC $(TDNW $1 $+) TDC2 $(TDNW $(D $(MYREF2 \\(1,\\)+))\\((BR)\\)(SMALL MYREF3 = $(REF_SHORT $1, std,experimental,allocator,$2) TDC = $(TDNW $1 $+) TDC2 = $(TDNW $(D $(MYREF2 \\(1,\\)+))\\((BR)\\)(SMALL std.experimental.allocator.building_blocks.$2 )) TDC3 = $(TDNW $(D $(MYREF3 \\(1,\\)+))\\((BR)\\)(SMALL std.experimental.allocator.$2 )) RES = $(I result) POST = \\((BR)\\)(SMALL $(I Post:) $(BLUE $0 ))"
  },
  "phobos/std/experimental/allocator/building_blocks/affix_allocator/AffixAllocator/Functions/allocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/affix_allocator/AffixAllocator/Functions/allocate.html",
    "title": "Overloads for - allocate | Marmos Demo",
    "keywords": "Overloads for - allocate Module std.experimental.allocator.building_blocks.affix_allocator Parent AffixAllocator allocate(__anonymous) <bug: unknown> allocate( size_t __anonymous ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/affix_allocator/AffixAllocator/Functions/deallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/affix_allocator/AffixAllocator/Functions/deallocate.html",
    "title": "Overloads for - deallocate | Marmos Demo",
    "keywords": "Overloads for - deallocate Module std.experimental.allocator.building_blocks.affix_allocator Parent AffixAllocator deallocate(b) bool deallocate( <bug: unknown> b ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/affix_allocator/AffixAllocator/Functions/deallocateAll.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/affix_allocator/AffixAllocator/Functions/deallocateAll.html",
    "title": "Overloads for - deallocateAll | Marmos Demo",
    "keywords": "Overloads for - deallocateAll Module std.experimental.allocator.building_blocks.affix_allocator Parent AffixAllocator deallocateAll() bool deallocateAll( ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/affix_allocator/AffixAllocator/Functions/empty.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/affix_allocator/AffixAllocator/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.experimental.allocator.building_blocks.affix_allocator Parent AffixAllocator empty() Ternary empty( ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/affix_allocator/AffixAllocator/Functions/expand.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/affix_allocator/AffixAllocator/Functions/expand.html",
    "title": "Overloads for - expand | Marmos Demo",
    "keywords": "Overloads for - expand Module std.experimental.allocator.building_blocks.affix_allocator Parent AffixAllocator expand(b, delta) bool expand( <bug: unknown> b, size_t delta ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/affix_allocator/AffixAllocator/Functions/goodAllocSize.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/affix_allocator/AffixAllocator/Functions/goodAllocSize.html",
    "title": "Overloads for - goodAllocSize | Marmos Demo",
    "keywords": "Overloads for - goodAllocSize Module std.experimental.allocator.building_blocks.affix_allocator Parent AffixAllocator goodAllocSize(__anonymous) size_t goodAllocSize( size_t __anonymous ) Standard allocator methods. Each is defined if and only if the parent allocator defines the homonym method (except for goodAllocSize , which may use the global default). Also, the methods will be $(D shared) if the parent allocator defines them as such."
  },
  "phobos/std/experimental/allocator/building_blocks/affix_allocator/AffixAllocator/Functions/owns.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/affix_allocator/AffixAllocator/Functions/owns.html",
    "title": "Overloads for - owns | Marmos Demo",
    "keywords": "Overloads for - owns Module std.experimental.allocator.building_blocks.affix_allocator Parent AffixAllocator owns(__anonymous) Ternary owns( <bug: unknown> __anonymous ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/affix_allocator/AffixAllocator/Functions/parent.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/affix_allocator/AffixAllocator/Functions/parent.html",
    "title": "Overloads for - parent | Marmos Demo",
    "keywords": "Overloads for - parent Module std.experimental.allocator.building_blocks.affix_allocator Parent AffixAllocator parent() Allocator parent( ) If the parent allocator Allocator is stateful, an instance of it is stored as a member. Otherwise, AffixAllocator uses Allocator.instance . In either case, the name _parent is uniformly used for accessing the parent allocator."
  },
  "phobos/std/experimental/allocator/building_blocks/affix_allocator/AffixAllocator/Functions/reallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/affix_allocator/AffixAllocator/Functions/reallocate.html",
    "title": "Overloads for - reallocate | Marmos Demo",
    "keywords": "Overloads for - reallocate Module std.experimental.allocator.building_blocks.affix_allocator Parent AffixAllocator reallocate(b, s) bool reallocate( <bug: unknown> b, size_t s ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/affix_allocator/Overview.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/affix_allocator/Overview.html",
    "title": "Module - std.experimental.allocator.building_blocks.affix_allocator | Marmos Demo",
    "keywords": "Module - std.experimental.allocator.building_blocks.affix_allocator About Source: $(PHOBOSSRC std/experimental/allocator/building_blocks/affix_allocator.d) Structs Name Description AffixAllocator Allocator that adds some extra data before (of type Prefix ) and/or after (of type Suffix ) any allocation made with its parent allocator. This is useful for uses where additional allocation-related information is needed, such as mutexes, reference counts, or walls for debugging memory corruption errors."
  },
  "phobos/std/experimental/allocator/building_blocks/affix_allocator/Structs/AffixAllocator.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/affix_allocator/Structs/AffixAllocator.html",
    "title": "Struct - AffixAllocator | Marmos Demo",
    "keywords": "Struct - AffixAllocator Module std.experimental.allocator.building_blocks.affix_allocator public struct AffixAllocator { // Ditto <bug: unknown> allocate( size_t __anonymous ) ; // Ditto bool deallocate( <bug: unknown> b ) ; // Ditto bool deallocateAll( ) ; // Ditto Ternary empty( ) ; // Ditto bool expand( <bug: unknown> b, size_t delta ) ; // Standard allocator methods. Each is defined if and only if the parent allocator defines the homonym method (except for `goodAllocSize` , which may use the global default). Also, the methods will be $(D shared) if the parent allocator defines them as such. size_t goodAllocSize( size_t __anonymous ) ; // Ditto Ternary owns( <bug: unknown> __anonymous ) ; // If the parent allocator `Allocator` is stateful, an instance of it is stored as a member. Otherwise, `AffixAllocator` uses `Allocator.instance` . In either case, the name `_parent` is uniformly used for accessing the parent allocator. Allocator parent( ) ; // Ditto bool reallocate( <bug: unknown> b, size_t s ) ; // If `Prefix` is `void` , the alignment is that of the parent. Otherwise, the alignment is the same as the `Prefix` 's alignment. uint alignment; // The `instance` singleton is defined if and only if the parent allocator has no state and defines its own `it` object. static AffixAllocator instance; } About Allocator that adds some extra data before (of type Prefix ) and/or after (of type Suffix ) any allocation made with its parent allocator. This is useful for uses where additional allocation-related information is needed, such as mutexes, reference counts, or walls for debugging memory corruption errors. If Prefix is not void , Allocator must guarantee an alignment at least as large as Prefix.alignof . Suffixes are slower to get at because of alignment rounding, so prefixes should be preferred. However, small prefixes blunt the alignment so if a large alignment with a small affix is needed, suffixes should be chosen. The following methods are defined if Allocator defines them, and forward to it: deallocateAll , empty , owns . Functions Name Description allocate Ditto deallocate Ditto deallocateAll Ditto empty Ditto expand Ditto goodAllocSize Standard allocator methods. Each is defined if and only if the parent allocator defines the homonym method (except for goodAllocSize , which may use the global default). Also, the methods will be $(D shared) if the parent allocator defines them as such. owns Ditto parent If the parent allocator Allocator is stateful, an instance of it is stored as a member. Otherwise, AffixAllocator uses Allocator.instance . In either case, the name _parent is uniformly used for accessing the parent allocator. reallocate Ditto Variables Name Description alignment If Prefix is void , the alignment is that of the parent. Otherwise, the alignment is the same as the Prefix 's alignment. instance The instance singleton is defined if and only if the parent allocator has no state and defines its own it object."
  },
  "phobos/std/experimental/allocator/building_blocks/aligned_block_list/AlignedBlockList/Functions/allocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/aligned_block_list/AlignedBlockList/Functions/allocate.html",
    "title": "Overloads for - allocate | Marmos Demo",
    "keywords": "Overloads for - allocate Module std.experimental.allocator.building_blocks.aligned_block_list Parent AlignedBlockList allocate(n) <bug: unknown> allocate( size_t n ) Returns a chunk of memory of size n It finds the first node in the AlignedBlockNode list which has available memory, and moves it to the front of the list. All empty nodes which cannot return new memory, are removed from the list. Params n size_t bytes to allocate Returns A chunk of memory of the required length or null on failure or"
  },
  "phobos/std/experimental/allocator/building_blocks/aligned_block_list/AlignedBlockList/Functions/deallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/aligned_block_list/AlignedBlockList/Functions/deallocate.html",
    "title": "Overloads for - deallocate | Marmos Demo",
    "keywords": "Overloads for - deallocate Module std.experimental.allocator.building_blocks.aligned_block_list Parent AlignedBlockList deallocate(b) bool deallocate( <bug: unknown> b ) Deallocates the buffer b given as parameter. Deallocations take place in constant time, regardless of the number of nodes in the list. b.ptr is rounded down to the nearest multiple of the alignment to quickly find the corresponding AlignedBlockNode . Params b <bug: unknown> buffer candidate for deallocation Returns true on success and false on failure"
  },
  "phobos/std/experimental/allocator/building_blocks/aligned_block_list/AlignedBlockList/Functions/owns.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/aligned_block_list/AlignedBlockList/Functions/owns.html",
    "title": "Overloads for - owns | Marmos Demo",
    "keywords": "Overloads for - owns Module std.experimental.allocator.building_blocks.aligned_block_list Parent AlignedBlockList owns(b) Ternary owns( <bug: unknown> b ) Returns Ternary.yes if the buffer belongs to the parent allocator and Ternary.no otherwise. Params b <bug: unknown> buffer tested if owned by this allocator Returns Ternary.yes if owned by this allocator and Ternary.no otherwise"
  },
  "phobos/std/experimental/allocator/building_blocks/aligned_block_list/Functions/testrw.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/aligned_block_list/Functions/testrw.html",
    "title": "Overloads for - testrw | Marmos Demo",
    "keywords": "Overloads for - testrw Module std.experimental.allocator.building_blocks.aligned_block_list testrw(b) void testrw( <bug: unknown> b ) static"
  },
  "phobos/std/experimental/allocator/building_blocks/aligned_block_list/Overview.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/aligned_block_list/Overview.html",
    "title": "Module - std.experimental.allocator.building_blocks.aligned_block_list | Marmos Demo",
    "keywords": "Module - std.experimental.allocator.building_blocks.aligned_block_list About AlignedBlockList represents a wrapper around a chain of allocators, allowing for fast deallocations and preserving a low degree of fragmentation by means of aligned allocations. Source: $(PHOBOSSRC std/experimental/allocator/building_blocks/aligned_block_list.d) Structs Name Description AlignedBlockList AlignedBlockList represents a wrapper around a chain of allocators, allowing for fast deallocations and preserving a low degree of fragmentation. The allocator holds internally a doubly linked list of Allocator objects, which will serve allocations in a most-recently-used fashion. Most recent allocators used for allocate calls, will be moved to the front of the list. SharedAlignedBlockList SharedAlignedBlockList is the threadsafe version of AlignedBlockList . The Allocator template parameter must refer a shared allocator. Also, ParentAllocator must be a shared allocator, supporting alignedAllocate . Functions Name Description testrw"
  },
  "phobos/std/experimental/allocator/building_blocks/aligned_block_list/SharedAlignedBlockList/Functions/allocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/aligned_block_list/SharedAlignedBlockList/Functions/allocate.html",
    "title": "Overloads for - allocate | Marmos Demo",
    "keywords": "Overloads for - allocate Module std.experimental.allocator.building_blocks.aligned_block_list Parent SharedAlignedBlockList allocate(n) <bug: unknown> allocate( size_t n ) Returns a chunk of memory of size n It finds the first node in the AlignedBlockNode list which has available memory, and moves it to the front of the list. All empty nodes which cannot return new memory, are removed from the list. Params n size_t bytes to allocate Returns A chunk of memory of the required length or null on failure or"
  },
  "phobos/std/experimental/allocator/building_blocks/aligned_block_list/SharedAlignedBlockList/Functions/deallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/aligned_block_list/SharedAlignedBlockList/Functions/deallocate.html",
    "title": "Overloads for - deallocate | Marmos Demo",
    "keywords": "Overloads for - deallocate Module std.experimental.allocator.building_blocks.aligned_block_list Parent SharedAlignedBlockList deallocate(b) bool deallocate( <bug: unknown> b ) Deallocates the buffer b given as parameter. Deallocations take place in constant time, regardless of the number of nodes in the list. b.ptr is rounded down to the nearest multiple of the alignment to quickly find the corresponding AlignedBlockNode . Params b <bug: unknown> buffer candidate for deallocation Returns true on success and false on failure"
  },
  "phobos/std/experimental/allocator/building_blocks/aligned_block_list/SharedAlignedBlockList/Functions/owns.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/aligned_block_list/SharedAlignedBlockList/Functions/owns.html",
    "title": "Overloads for - owns | Marmos Demo",
    "keywords": "Overloads for - owns Module std.experimental.allocator.building_blocks.aligned_block_list Parent SharedAlignedBlockList owns(b) Ternary owns( <bug: unknown> b ) Returns Ternary.yes if the buffer belongs to the parent allocator and Ternary.no otherwise. Params b <bug: unknown> buffer tested if owned by this allocator Returns Ternary.yes if owned by this allocator and Ternary.no otherwise"
  },
  "phobos/std/experimental/allocator/building_blocks/aligned_block_list/Structs/AlignedBlockList.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/aligned_block_list/Structs/AlignedBlockList.html",
    "title": "Struct - AlignedBlockList | Marmos Demo",
    "keywords": "Struct - AlignedBlockList Module std.experimental.allocator.building_blocks.aligned_block_list public struct AlignedBlockList { // Returns a chunk of memory of size `n` It finds the first node in the `AlignedBlockNode` list which has available memory, and moves it to the front of the list. <bug: unknown> allocate( size_t n ) ; // Deallocates the buffer `b` given as parameter. Deallocations take place in constant time, regardless of the number of nodes in the list. `b.ptr` is rounded down to the nearest multiple of the `alignment` to quickly find the corresponding `AlignedBlockNode` . bool deallocate( <bug: unknown> b ) ; // Returns `Ternary.yes` if the buffer belongs to the parent allocator and `Ternary.no` otherwise. Ternary owns( <bug: unknown> b ) ; } About AlignedBlockList represents a wrapper around a chain of allocators, allowing for fast deallocations and preserving a low degree of fragmentation. The allocator holds internally a doubly linked list of Allocator objects, which will serve allocations in a most-recently-used fashion. Most recent allocators used for allocate calls, will be moved to the front of the list. Although allocations are in theory served in linear searching time, deallocate calls take $(BIGOH 1) time, by using aligned allocations. ParentAllocator must implement alignedAllocate and it must be able to allocate theAlignment bytes at the same alignment. Each aligned allocation done by ParentAllocator will contain metadata for an Allocator , followed by its payload. Params Allocator the allocator which is used to manage each node; it must have a constructor which receives ubyte[] and it must not have any parent allocators, except for the NullAllocator ParentAllocator each node draws memory from the parent allocator; it must support alignedAllocate theAlignment alignment of each block and at the same time length of each node Functions Name Description allocate Returns a chunk of memory of size n It finds the first node in the AlignedBlockNode list which has available memory, and moves it to the front of the list. deallocate Deallocates the buffer b given as parameter. Deallocations take place in constant time, regardless of the number of nodes in the list. b.ptr is rounded down to the nearest multiple of the alignment to quickly find the corresponding AlignedBlockNode . owns Returns Ternary.yes if the buffer belongs to the parent allocator and Ternary.no otherwise."
  },
  "phobos/std/experimental/allocator/building_blocks/aligned_block_list/Structs/SharedAlignedBlockList.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/aligned_block_list/Structs/SharedAlignedBlockList.html",
    "title": "Struct - SharedAlignedBlockList | Marmos Demo",
    "keywords": "Struct - SharedAlignedBlockList Module std.experimental.allocator.building_blocks.aligned_block_list public struct SharedAlignedBlockList { // Returns a chunk of memory of size `n` It finds the first node in the `AlignedBlockNode` list which has available memory, and moves it to the front of the list. <bug: unknown> allocate( size_t n ) ; // Deallocates the buffer `b` given as parameter. Deallocations take place in constant time, regardless of the number of nodes in the list. `b.ptr` is rounded down to the nearest multiple of the `alignment` to quickly find the corresponding `AlignedBlockNode` . bool deallocate( <bug: unknown> b ) ; // Returns `Ternary.yes` if the buffer belongs to the parent allocator and `Ternary.no` otherwise. Ternary owns( <bug: unknown> b ) ; } About SharedAlignedBlockList is the threadsafe version of AlignedBlockList . The Allocator template parameter must refer a shared allocator. Also, ParentAllocator must be a shared allocator, supporting alignedAllocate . Params Allocator the shared allocator which is used to manage each node; it must have a constructor which receives ubyte[] and it must not have any parent allocators, except for the NullAllocator ParentAllocator each node draws memory from the parent allocator; it must be shared and support alignedAllocate theAlignment alignment of each block and at the same time length of each node Functions Name Description allocate Returns a chunk of memory of size n It finds the first node in the AlignedBlockNode list which has available memory, and moves it to the front of the list. deallocate Deallocates the buffer b given as parameter. Deallocations take place in constant time, regardless of the number of nodes in the list. b.ptr is rounded down to the nearest multiple of the alignment to quickly find the corresponding AlignedBlockNode . owns Returns Ternary.yes if the buffer belongs to the parent allocator and Ternary.no otherwise."
  },
  "phobos/std/experimental/allocator/building_blocks/allocator_list/AllocatorList/Functions/addAllocator.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/allocator_list/AllocatorList/Functions/addAllocator.html",
    "title": "Overloads for - addAllocator | Marmos Demo",
    "keywords": "Overloads for - addAllocator Module std.experimental.allocator.building_blocks.allocator_list Parent AllocatorList addAllocator(atLeastBytes) <bug: unknown> addAllocator( size_t atLeastBytes ) addAllocator(atLeastBytes) <bug: unknown> addAllocator( size_t atLeastBytes )"
  },
  "phobos/std/experimental/allocator/building_blocks/allocator_list/AllocatorList/Functions/alignedAllocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/allocator_list/AllocatorList/Functions/alignedAllocate.html",
    "title": "Overloads for - alignedAllocate | Marmos Demo",
    "keywords": "Overloads for - alignedAllocate Module std.experimental.allocator.building_blocks.allocator_list Parent AllocatorList alignedAllocate(s, theAlignment) <bug: unknown> alignedAllocate( size_t s, uint theAlignment ) Allocate a block of size s with alignment a . First tries to allocate from the existing list of already-created allocators. If neither can satisfy the request, creates a new allocator by calling make(s + a - 1) and delegates the request to it. However, if the allocation fresh off a newly created allocator fails, subsequent calls to alignedAllocate will not cause more calls to make ."
  },
  "phobos/std/experimental/allocator/building_blocks/allocator_list/AllocatorList/Functions/allocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/allocator_list/AllocatorList/Functions/allocate.html",
    "title": "Overloads for - allocate | Marmos Demo",
    "keywords": "Overloads for - allocate Module std.experimental.allocator.building_blocks.allocator_list Parent AllocatorList allocate(s) <bug: unknown> allocate( size_t s ) Allocate a block of size s . First tries to allocate from the existing list of already-created allocators. If neither can satisfy the request, creates a new allocator by calling make(s) and delegates the request to it. However, if the allocation fresh off a newly created allocator fails, subsequent calls to allocate will not cause more calls to $(D make)."
  },
  "phobos/std/experimental/allocator/building_blocks/allocator_list/AllocatorList/Functions/deallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/allocator_list/AllocatorList/Functions/deallocate.html",
    "title": "Overloads for - deallocate | Marmos Demo",
    "keywords": "Overloads for - deallocate Module std.experimental.allocator.building_blocks.allocator_list Parent AllocatorList deallocate(b) bool deallocate( <bug: unknown> b ) Defined if Allocator.deallocate and Allocator.owns are defined."
  },
  "phobos/std/experimental/allocator/building_blocks/allocator_list/AllocatorList/Functions/deallocateAll.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/allocator_list/AllocatorList/Functions/deallocateAll.html",
    "title": "Overloads for - deallocateAll | Marmos Demo",
    "keywords": "Overloads for - deallocateAll Module std.experimental.allocator.building_blocks.allocator_list Parent AllocatorList deallocateAll() bool deallocateAll( ) Defined only if Allocator.owns and Allocator.deallocateAll are defined. deallocateAll() bool deallocateAll( )"
  },
  "phobos/std/experimental/allocator/building_blocks/allocator_list/AllocatorList/Functions/empty.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/allocator_list/AllocatorList/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.experimental.allocator.building_blocks.allocator_list Parent AllocatorList empty() Ternary empty( ) Returns Ternary.yes if no allocators are currently active, Ternary.no otherwise. This methods never returns Ternary.unknown ."
  },
  "phobos/std/experimental/allocator/building_blocks/allocator_list/AllocatorList/Functions/expand.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/allocator_list/AllocatorList/Functions/expand.html",
    "title": "Overloads for - expand | Marmos Demo",
    "keywords": "Overloads for - expand Module std.experimental.allocator.building_blocks.allocator_list Parent AllocatorList expand(b, delta) bool expand( <bug: unknown> b, size_t delta ) Defined only if Allocator.expand is defined. Finds the owner of b and calls expand for it. The owner is not brought to the head of the list."
  },
  "phobos/std/experimental/allocator/building_blocks/allocator_list/AllocatorList/Functions/make.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/allocator_list/AllocatorList/Functions/make.html",
    "title": "Overloads for - make | Marmos Demo",
    "keywords": "Overloads for - make Module std.experimental.allocator.building_blocks.allocator_list Parent AllocatorList make(n) <bug: unknown> make( size_t n ) auto"
  },
  "phobos/std/experimental/allocator/building_blocks/allocator_list/AllocatorList/Functions/moveAllocators.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/allocator_list/AllocatorList/Functions/moveAllocators.html",
    "title": "Overloads for - moveAllocators | Marmos Demo",
    "keywords": "Overloads for - moveAllocators Module std.experimental.allocator.building_blocks.allocator_list Parent AllocatorList moveAllocators(newPlace) void moveAllocators( <bug: unknown> newPlace )"
  },
  "phobos/std/experimental/allocator/building_blocks/allocator_list/AllocatorList/Functions/owns.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/allocator_list/AllocatorList/Functions/owns.html",
    "title": "Overloads for - owns | Marmos Demo",
    "keywords": "Overloads for - owns Module std.experimental.allocator.building_blocks.allocator_list Parent AllocatorList owns(b) Ternary owns( <bug: unknown> b ) Defined only if Allocator defines owns . Tries each allocator in turn, in most-recently-used order. If the owner is found, it is moved to the front of the list as a side effect under the assumption it will be used soon. Returns: Ternary.yes if one allocator was found to return Ternary.yes , Ternary.no if all component allocators returned Ternary.no , and Ternary.unknown if no allocator returned Ternary.yes and at least one returned Ternary.unknown ."
  },
  "phobos/std/experimental/allocator/building_blocks/allocator_list/AllocatorList/Functions/reallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/allocator_list/AllocatorList/Functions/reallocate.html",
    "title": "Overloads for - reallocate | Marmos Demo",
    "keywords": "Overloads for - reallocate Module std.experimental.allocator.building_blocks.allocator_list Parent AllocatorList reallocate(b, s) bool reallocate( <bug: unknown> b, size_t s ) Defined only if Allocator.reallocate is defined. Finds the owner of b and calls reallocate for it. If that fails, calls the global reallocate , which allocates a new block and moves memory."
  },
  "phobos/std/experimental/allocator/building_blocks/allocator_list/Factory/Functions/opCall.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/allocator_list/Factory/Functions/opCall.html",
    "title": "Overloads for - opCall | Marmos Demo",
    "keywords": "Overloads for - opCall Module std.experimental.allocator.building_blocks.allocator_list Parent Factory opCall(n) A opCall( size_t n )"
  },
  "phobos/std/experimental/allocator/building_blocks/allocator_list/Overview.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/allocator_list/Overview.html",
    "title": "Module - std.experimental.allocator.building_blocks.allocator_list | Marmos Demo",
    "keywords": "Module - std.experimental.allocator.building_blocks.allocator_list About Source: $(PHOBOSSRC std/experimental/allocator/building_blocks/allocator_list.d) Aliases Name Description A Ditto AllocatorList Ditto Structs Name Description AllocatorList Given an $(LINK2 https://en.wikipedia.org/wiki/Factory_(object-oriented_programming), object factory) of type Factory or a factory function factoryFunction , and optionally also BookkeepingAllocator as a supplemental allocator for bookkeeping, AllocatorList creates an allocator that lazily creates as many allocators are needed for satisfying client allocation requests. Factory Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/allocator_list/Structs/AllocatorList.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/allocator_list/Structs/AllocatorList.html",
    "title": "Struct - AllocatorList | Marmos Demo",
    "keywords": "Struct - AllocatorList Module std.experimental.allocator.building_blocks.allocator_list public struct AllocatorList { // Alias for `typeof(Factory()(1))` , i.e. the type of the individual allocators. alias Allocator = <todo: marmos support pending>; // alias SAllocator = <todo: marmos support pending>; // <bug: unknown> addAllocator( size_t atLeastBytes ) ; // <bug: unknown> addAllocator( size_t atLeastBytes ) ; // Allocate a block of size `s` with alignment `a` . First tries to allocate from the existing list of already-created allocators. If neither can satisfy the request, creates a new allocator by calling `make(s + a - 1)` and delegates the request to it. However, if the allocation fresh off a newly created allocator fails, subsequent calls to `alignedAllocate` will not cause more calls to `make` . <bug: unknown> alignedAllocate( size_t s, uint theAlignment ) ; // Allocate a block of size `s` . First tries to allocate from the existing list of already-created allocators. If neither can satisfy the request, creates a new allocator by calling `make(s)` and delegates the request to it. However, if the allocation fresh off a newly created allocator fails, subsequent calls to `allocate` will not cause more calls to $(D make). <bug: unknown> allocate( size_t s ) ; // Defined if `Allocator.deallocate` and `Allocator.owns` are defined. bool deallocate( <bug: unknown> b ) ; // Defined only if `Allocator.owns` and `Allocator.deallocateAll` are defined. bool deallocateAll( ) ; // bool deallocateAll( ) ; // Returns `Ternary.yes` if no allocators are currently active, `Ternary.no` otherwise. This methods never returns `Ternary.unknown` . Ternary empty( ) ; // Defined only if `Allocator.expand` is defined. Finds the owner of `b` and calls `expand` for it. The owner is not brought to the head of the list. bool expand( <bug: unknown> b, size_t delta ) ; // <bug: unknown> make( size_t n ) auto; // void moveAllocators( <bug: unknown> newPlace ) ; // Defined only if `Allocator` defines `owns` . Tries each allocator in turn, in most-recently-used order. If the owner is found, it is moved to the front of the list as a side effect under the assumption it will be used soon. Ternary owns( <bug: unknown> b ) ; // Defined only if `Allocator.reallocate` is defined. Finds the owner of `b` and calls `reallocate` for it. If that fails, calls the global `reallocate` , which allocates a new block and moves memory. bool reallocate( <bug: unknown> b, size_t s ) ; // The alignment offered. uint alignment; // <bug: unknown> allocators; // If `BookkeepingAllocator` is not `NullAllocator` , `bkalloc` is defined and accessible. BookkeepingAllocator bkalloc; // Factory factory; // __enumMember ouroboros; // <bug: unknown> root; } About Given an $(LINK2 https://en.wikipedia.org/wiki/Factory_(object-oriented_programming), object factory) of type Factory or a factory function factoryFunction , and optionally also BookkeepingAllocator as a supplemental allocator for bookkeeping, AllocatorList creates an allocator that lazily creates as many allocators are needed for satisfying client allocation requests. An embedded list builds a most-recently-used strategy: the most recent allocators used in calls to either allocate , owns (successful calls only), or deallocate are tried for new allocations in order of their most recent use. Thus, although core operations take in theory $(BIGOH k) time for k allocators in current use, in many workloads the factor is sublinear. Details of the actual strategy may change in future releases. AllocatorList is primarily intended for coarse-grained handling of allocators, i.e. the number of allocators in the list is expected to be relatively small compared to the number of allocations handled by each allocator. However, the per-allocator overhead is small so using AllocatorList with a large number of allocators should be satisfactory as long as the most-recently-used strategy is fast enough for the application. AllocatorList makes an effort to return allocated memory back when no longer used. It does so by destroying empty allocators. However, in order to avoid thrashing (excessive creation/destruction of allocators under certain use patterns), it keeps unused allocators for a while. Params factoryFunction A function or template function (including function literals). New allocators are created by calling factoryFunction(n) with strictly positive numbers n . Delegates that capture their enviroment are not created amid concerns regarding garbage creation for the environment. When the factory needs state, a Factory object should be used. BookkeepingAllocator = Allocator used for storing bookkeeping data. The size of bookkeeping data is proportional to the number of allocators. If $(D BookkeepingAllocator) is NullAllocator , then AllocatorList is \"ouroboros-style\", i.e. it keeps the bookkeeping data in memory obtained from the allocators themselves. Note that for ouroboros-style management, the size n passed to make will be occasionally different from the size requested by client code. Factory = Type of a factory object that returns new allocators on a need basis. For an object sweatshop of type Factory , sweatshop(n) should return an allocator able to allocate at least n bytes (i.e. Factory must define opCall(size_t) to return an allocator object). Usually the capacity of allocators created should be much larger than n such that an allocator can be used for many subsequent allocations. n is passed only to ensure the minimum necessary for the next allocation. The factory object is allowed to hold state, which will be stored inside AllocatorList as a direct public member called factory . Aliases Name Description Allocator Alias for typeof(Factory()(1)) , i.e. the type of the individual allocators. SAllocator Functions Name Description addAllocator alignedAllocate Allocate a block of size s with alignment a . First tries to allocate from the existing list of already-created allocators. If neither can satisfy the request, creates a new allocator by calling make(s + a - 1) and delegates the request to it. However, if the allocation fresh off a newly created allocator fails, subsequent calls to alignedAllocate will not cause more calls to make . allocate Allocate a block of size s . First tries to allocate from the existing list of already-created allocators. If neither can satisfy the request, creates a new allocator by calling make(s) and delegates the request to it. However, if the allocation fresh off a newly created allocator fails, subsequent calls to allocate will not cause more calls to $(D make). deallocate Defined if Allocator.deallocate and Allocator.owns are defined. deallocateAll Defined only if Allocator.owns and Allocator.deallocateAll are defined. empty Returns Ternary.yes if no allocators are currently active, Ternary.no otherwise. This methods never returns Ternary.unknown . expand Defined only if Allocator.expand is defined. Finds the owner of b and calls expand for it. The owner is not brought to the head of the list. make moveAllocators owns Defined only if Allocator defines owns . Tries each allocator in turn, in most-recently-used order. If the owner is found, it is moved to the front of the list as a side effect under the assumption it will be used soon. reallocate Defined only if Allocator.reallocate is defined. Finds the owner of b and calls reallocate for it. If that fails, calls the global reallocate , which allocates a new block and moves memory. Variables Name Description alignment The alignment offered. allocators bkalloc If BookkeepingAllocator is not NullAllocator , bkalloc is defined and accessible. factory ouroboros root"
  },
  "phobos/std/experimental/allocator/building_blocks/allocator_list/Structs/Factory.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/allocator_list/Structs/Factory.html",
    "title": "Struct - Factory | Marmos Demo",
    "keywords": "Struct - Factory Module std.experimental.allocator.building_blocks.allocator_list public struct Factory { // A opCall( size_t n ) ; } About Ditto Functions Name Description opCall"
  },
  "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/AscendingPageAllocator/Functions/alignedAllocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/AscendingPageAllocator/Functions/alignedAllocate.html",
    "title": "Overloads for - alignedAllocate | Marmos Demo",
    "keywords": "Overloads for - alignedAllocate Module std.experimental.allocator.building_blocks.ascending_page_allocator Parent AscendingPageAllocator alignedAllocate(n, a) <bug: unknown> alignedAllocate( size_t n, uint a ) Rounds the allocation size to the next multiple of the page size. The allocation only reserves a range of virtual pages but the actual physical memory is allocated on demand, when accessing the memory. The allocated memory is aligned to the specified alignment a . Params n size_t Bytes to allocate a uint Alignment Returns null on failure or if the requested size exceeds the remaining capacity."
  },
  "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/AscendingPageAllocator/Functions/allocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/AscendingPageAllocator/Functions/allocate.html",
    "title": "Overloads for - allocate | Marmos Demo",
    "keywords": "Overloads for - allocate Module std.experimental.allocator.building_blocks.ascending_page_allocator Parent AscendingPageAllocator allocate(n) <bug: unknown> allocate( size_t n ) Rounds the allocation size to the next multiple of the page size. The allocation only reserves a range of virtual pages but the actual physical memory is allocated on demand, when accessing the memory. Params n size_t Bytes to allocate Returns null on failure or if the requested size exceeds the remaining capacity."
  },
  "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/AscendingPageAllocator/Functions/deallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/AscendingPageAllocator/Functions/deallocate.html",
    "title": "Overloads for - deallocate | Marmos Demo",
    "keywords": "Overloads for - deallocate Module std.experimental.allocator.building_blocks.ascending_page_allocator Parent AscendingPageAllocator deallocate(b) void deallocate( <bug: unknown> b ) Decommit all physical memory associated with the buffer given as parameter, but keep the range of virtual addresses. On POSIX systems deallocate calls mmap with MAP_FIXED' a second time to decommit the memory. On Windows, it uses VirtualFree with MEM_DECOMMIT ."
  },
  "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/AscendingPageAllocator/Functions/deallocateAll.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/AscendingPageAllocator/Functions/deallocateAll.html",
    "title": "Overloads for - deallocateAll | Marmos Demo",
    "keywords": "Overloads for - deallocateAll Module std.experimental.allocator.building_blocks.ascending_page_allocator Parent AscendingPageAllocator deallocateAll() bool deallocateAll( ) Removes the memory mapping causing all physical memory to be decommited and the virtual address space to be reclaimed."
  },
  "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/AscendingPageAllocator/Functions/empty.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/AscendingPageAllocator/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.experimental.allocator.building_blocks.ascending_page_allocator Parent AscendingPageAllocator empty() Ternary empty( ) Returns Ternary.yes if the allocator does not contain any alive objects and Ternary.no otherwise."
  },
  "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/AscendingPageAllocator/Functions/expand.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/AscendingPageAllocator/Functions/expand.html",
    "title": "Overloads for - expand | Marmos Demo",
    "keywords": "Overloads for - expand Module std.experimental.allocator.building_blocks.ascending_page_allocator Parent AscendingPageAllocator expand(b, delta) bool expand( <bug: unknown> b, size_t delta ) If the passed buffer is not the last allocation, then delta can be at most the number of bytes left on the last page. Otherwise, we can expand the last allocation until the end of the virtual address range."
  },
  "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/AscendingPageAllocator/Functions/getAvailableSize.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/AscendingPageAllocator/Functions/getAvailableSize.html",
    "title": "Overloads for - getAvailableSize | Marmos Demo",
    "keywords": "Overloads for - getAvailableSize Module std.experimental.allocator.building_blocks.ascending_page_allocator Parent AscendingPageAllocator getAvailableSize() size_t getAvailableSize( ) Returns the available size for further allocations in bytes."
  },
  "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/AscendingPageAllocator/Functions/goodAllocSize.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/AscendingPageAllocator/Functions/goodAllocSize.html",
    "title": "Overloads for - goodAllocSize | Marmos Demo",
    "keywords": "Overloads for - goodAllocSize Module std.experimental.allocator.building_blocks.ascending_page_allocator Parent AscendingPageAllocator goodAllocSize(n) size_t goodAllocSize( size_t n ) Rounds the requested size to the next multiple of the page size."
  },
  "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/AscendingPageAllocator/Functions/owns.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/AscendingPageAllocator/Functions/owns.html",
    "title": "Overloads for - owns | Marmos Demo",
    "keywords": "Overloads for - owns Module std.experimental.allocator.building_blocks.ascending_page_allocator Parent AscendingPageAllocator owns(buf) Ternary owns( <bug: unknown> buf ) Returns Ternary.yes if the passed buffer is inside the range of virtual adresses. Does not guarantee that the passed buffer is still valid."
  },
  "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/Functions/testrw.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/Functions/testrw.html",
    "title": "Overloads for - testrw | Marmos Demo",
    "keywords": "Overloads for - testrw Module std.experimental.allocator.building_blocks.ascending_page_allocator testrw(b) void testrw( <bug: unknown> b ) static"
  },
  "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/Overview.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/Overview.html",
    "title": "Module - std.experimental.allocator.building_blocks.ascending_page_allocator | Marmos Demo",
    "keywords": "Module - std.experimental.allocator.building_blocks.ascending_page_allocator About Source: $(PHOBOSSRC std/experimental/allocator/building_blocks/ascending_page_allocator.d) Structs Name Description AscendingPageAllocator AscendingPageAllocator is a fast and safe allocator that rounds all allocations to multiples of the system's page size. It reserves a range of virtual addresses (using mmap on Posix and VirtualAlloc on Windows) and allocates memory at consecutive virtual addresses. SharedAscendingPageAllocator SharedAscendingPageAllocator is the threadsafe version of AscendingPageAllocator . Functions Name Description testrw"
  },
  "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/SharedAscendingPageAllocator/Functions/alignedAllocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/SharedAscendingPageAllocator/Functions/alignedAllocate.html",
    "title": "Overloads for - alignedAllocate | Marmos Demo",
    "keywords": "Overloads for - alignedAllocate Module std.experimental.allocator.building_blocks.ascending_page_allocator Parent SharedAscendingPageAllocator alignedAllocate(n, a) <bug: unknown> alignedAllocate( size_t n, uint a ) Rounds the allocation size to the next multiple of the page size. The allocation only reserves a range of virtual pages but the actual physical memory is allocated on demand, when accessing the memory. The allocated memory is aligned to the specified alignment a . Params n size_t Bytes to allocate a uint Alignment Returns null on failure or if the requested size exceeds the remaining capacity."
  },
  "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/SharedAscendingPageAllocator/Functions/allocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/SharedAscendingPageAllocator/Functions/allocate.html",
    "title": "Overloads for - allocate | Marmos Demo",
    "keywords": "Overloads for - allocate Module std.experimental.allocator.building_blocks.ascending_page_allocator Parent SharedAscendingPageAllocator allocate(n) <bug: unknown> allocate( size_t n ) Rounds the allocation size to the next multiple of the page size. The allocation only reserves a range of virtual pages but the actual physical memory is allocated on demand, when accessing the memory. Params n size_t Bytes to allocate Returns null on failure or if the requested size exceeds the remaining capacity."
  },
  "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/SharedAscendingPageAllocator/Functions/allocateImpl.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/SharedAscendingPageAllocator/Functions/allocateImpl.html",
    "title": "Overloads for - allocateImpl | Marmos Demo",
    "keywords": "Overloads for - allocateImpl Module std.experimental.allocator.building_blocks.ascending_page_allocator Parent SharedAscendingPageAllocator allocateImpl(n, a) <bug: unknown> allocateImpl( size_t n, uint a )"
  },
  "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/SharedAscendingPageAllocator/Functions/deallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/SharedAscendingPageAllocator/Functions/deallocate.html",
    "title": "Overloads for - deallocate | Marmos Demo",
    "keywords": "Overloads for - deallocate Module std.experimental.allocator.building_blocks.ascending_page_allocator Parent SharedAscendingPageAllocator deallocate(b) void deallocate( <bug: unknown> b ) Decommit all physical memory associated with the buffer given as parameter, but keep the range of virtual addresses. On POSIX systems deallocate calls mmap with MAP_FIXED' a second time to decommit the memory. On Windows, it uses VirtualFree with MEM_DECOMMIT ."
  },
  "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/SharedAscendingPageAllocator/Functions/deallocateAll.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/SharedAscendingPageAllocator/Functions/deallocateAll.html",
    "title": "Overloads for - deallocateAll | Marmos Demo",
    "keywords": "Overloads for - deallocateAll Module std.experimental.allocator.building_blocks.ascending_page_allocator Parent SharedAscendingPageAllocator deallocateAll() bool deallocateAll( ) Removes the memory mapping causing all physical memory to be decommited and the virtual address space to be reclaimed."
  },
  "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/SharedAscendingPageAllocator/Functions/expand.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/SharedAscendingPageAllocator/Functions/expand.html",
    "title": "Overloads for - expand | Marmos Demo",
    "keywords": "Overloads for - expand Module std.experimental.allocator.building_blocks.ascending_page_allocator Parent SharedAscendingPageAllocator expand(b, delta) bool expand( <bug: unknown> b, size_t delta ) If the passed buffer is not the last allocation, then delta can be at most the number of bytes left on the last page. Otherwise, we can expand the last allocation until the end of the virtual address range."
  },
  "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/SharedAscendingPageAllocator/Functions/getAvailableSize.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/SharedAscendingPageAllocator/Functions/getAvailableSize.html",
    "title": "Overloads for - getAvailableSize | Marmos Demo",
    "keywords": "Overloads for - getAvailableSize Module std.experimental.allocator.building_blocks.ascending_page_allocator Parent SharedAscendingPageAllocator getAvailableSize() size_t getAvailableSize( ) Returns the available size for further allocations in bytes."
  },
  "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/SharedAscendingPageAllocator/Functions/goodAllocSize.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/SharedAscendingPageAllocator/Functions/goodAllocSize.html",
    "title": "Overloads for - goodAllocSize | Marmos Demo",
    "keywords": "Overloads for - goodAllocSize Module std.experimental.allocator.building_blocks.ascending_page_allocator Parent SharedAscendingPageAllocator goodAllocSize(n) size_t goodAllocSize( size_t n ) Rounds the requested size to the next multiple of the page size."
  },
  "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/SharedAscendingPageAllocator/Functions/owns.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/SharedAscendingPageAllocator/Functions/owns.html",
    "title": "Overloads for - owns | Marmos Demo",
    "keywords": "Overloads for - owns Module std.experimental.allocator.building_blocks.ascending_page_allocator Parent SharedAscendingPageAllocator owns(buf) Ternary owns( <bug: unknown> buf ) Returns Ternary.yes if the passed buffer is inside the range of virtual adresses. Does not guarantee that the passed buffer is still valid."
  },
  "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/Structs/AscendingPageAllocator.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/Structs/AscendingPageAllocator.html",
    "title": "Struct - AscendingPageAllocator | Marmos Demo",
    "keywords": "Struct - AscendingPageAllocator Module std.experimental.allocator.building_blocks.ascending_page_allocator public struct AscendingPageAllocator { // Rounds the allocation size to the next multiple of the page size. The allocation only reserves a range of virtual pages but the actual physical memory is allocated on demand, when accessing the memory. <bug: unknown> alignedAllocate( size_t n, uint a ) ; // Rounds the allocation size to the next multiple of the page size. The allocation only reserves a range of virtual pages but the actual physical memory is allocated on demand, when accessing the memory. <bug: unknown> allocate( size_t n ) ; // Decommit all physical memory associated with the buffer given as parameter, but keep the range of virtual addresses. void deallocate( <bug: unknown> b ) ; // Removes the memory mapping causing all physical memory to be decommited and the virtual address space to be reclaimed. bool deallocateAll( ) ; // Returns `Ternary.yes` if the allocator does not contain any alive objects and `Ternary.no` otherwise. Ternary empty( ) ; // If the passed buffer is not the last allocation, then `delta` can be at most the number of bytes left on the last page. Otherwise, we can expand the last allocation until the end of the virtual address range. bool expand( <bug: unknown> b, size_t delta ) ; // Returns the available size for further allocations in bytes. size_t getAvailableSize( ) ; // Rounds the requested size to the next multiple of the page size. size_t goodAllocSize( size_t n ) ; // Returns `Ternary.yes` if the passed buffer is inside the range of virtual adresses. Does not guarantee that the passed buffer is still valid. Ternary owns( <bug: unknown> buf ) ; // uint alignment; // <bug: unknown> data; // __enumMember extraAllocPages; // size_t numPages; // <bug: unknown> offset; // size_t pageSize; // size_t pagesUsed; // <bug: unknown> readWriteLimit; } About AscendingPageAllocator is a fast and safe allocator that rounds all allocations to multiples of the system's page size. It reserves a range of virtual addresses (using mmap on Posix and VirtualAlloc on Windows) and allocates memory at consecutive virtual addresses. When a chunk of memory is requested, the allocator finds a range of virtual pages that satisfy the requested size, changing their protection to read/write using OS primitives (mprotect and VirtualProtect , respectively). The physical memory is allocated on demand, when the pages are accessed. Deallocation removes any read/write permissions from the target pages and notifies the OS to reclaim the physical memory, while keeping the virtual memory. Because the allocator does not reuse memory, any dangling references to deallocated memory will always result in deterministically crashing the process. See_Also $(HTTPS microsoft.com/en-us/research/wp-content/uploads/2017/03/kedia2017mem.pdf, Simple Fast and Safe Manual Memory Management) for the general approach. Functions Name Description alignedAllocate Rounds the allocation size to the next multiple of the page size. The allocation only reserves a range of virtual pages but the actual physical memory is allocated on demand, when accessing the memory. allocate Rounds the allocation size to the next multiple of the page size. The allocation only reserves a range of virtual pages but the actual physical memory is allocated on demand, when accessing the memory. deallocate Decommit all physical memory associated with the buffer given as parameter, but keep the range of virtual addresses. deallocateAll Removes the memory mapping causing all physical memory to be decommited and the virtual address space to be reclaimed. empty Returns Ternary.yes if the allocator does not contain any alive objects and Ternary.no otherwise. expand If the passed buffer is not the last allocation, then delta can be at most the number of bytes left on the last page. Otherwise, we can expand the last allocation until the end of the virtual address range. getAvailableSize Returns the available size for further allocations in bytes. goodAllocSize Rounds the requested size to the next multiple of the page size. owns Returns Ternary.yes if the passed buffer is inside the range of virtual adresses. Does not guarantee that the passed buffer is still valid. Variables Name Description alignment data extraAllocPages numPages offset pageSize pagesUsed readWriteLimit"
  },
  "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/Structs/SharedAscendingPageAllocator.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/ascending_page_allocator/Structs/SharedAscendingPageAllocator.html",
    "title": "Struct - SharedAscendingPageAllocator | Marmos Demo",
    "keywords": "Struct - SharedAscendingPageAllocator Module std.experimental.allocator.building_blocks.ascending_page_allocator public struct SharedAscendingPageAllocator { // Rounds the allocation size to the next multiple of the page size. The allocation only reserves a range of virtual pages but the actual physical memory is allocated on demand, when accessing the memory. <bug: unknown> alignedAllocate( size_t n, uint a ) ; // Rounds the allocation size to the next multiple of the page size. The allocation only reserves a range of virtual pages but the actual physical memory is allocated on demand, when accessing the memory. <bug: unknown> allocate( size_t n ) ; // <bug: unknown> allocateImpl( size_t n, uint a ) ; // Decommit all physical memory associated with the buffer given as parameter, but keep the range of virtual addresses. void deallocate( <bug: unknown> b ) ; // Removes the memory mapping causing all physical memory to be decommited and the virtual address space to be reclaimed. bool deallocateAll( ) ; // If the passed buffer is not the last allocation, then `delta` can be at most the number of bytes left on the last page. Otherwise, we can expand the last allocation until the end of the virtual address range. bool expand( <bug: unknown> b, size_t delta ) ; // Returns the available size for further allocations in bytes. size_t getAvailableSize( ) ; // Rounds the requested size to the next multiple of the page size. size_t goodAllocSize( size_t n ) ; // Returns `Ternary.yes` if the passed buffer is inside the range of virtual adresses. Does not guarantee that the passed buffer is still valid. Ternary owns( <bug: unknown> buf ) ; // uint alignment; // shared <bug: unknown> data; // __enumMember extraAllocPages; // SpinLock lock; // size_t numPages; // shared <bug: unknown> offset; // size_t pageSize; // shared <bug: unknown> readWriteLimit; } About SharedAscendingPageAllocator is the threadsafe version of AscendingPageAllocator . Functions Name Description alignedAllocate Rounds the allocation size to the next multiple of the page size. The allocation only reserves a range of virtual pages but the actual physical memory is allocated on demand, when accessing the memory. allocate Rounds the allocation size to the next multiple of the page size. The allocation only reserves a range of virtual pages but the actual physical memory is allocated on demand, when accessing the memory. allocateImpl deallocate Decommit all physical memory associated with the buffer given as parameter, but keep the range of virtual addresses. deallocateAll Removes the memory mapping causing all physical memory to be decommited and the virtual address space to be reclaimed. expand If the passed buffer is not the last allocation, then delta can be at most the number of bytes left on the last page. Otherwise, we can expand the last allocation until the end of the virtual address range. getAvailableSize Returns the available size for further allocations in bytes. goodAllocSize Rounds the requested size to the next multiple of the page size. owns Returns Ternary.yes if the passed buffer is inside the range of virtual adresses. Does not guarantee that the passed buffer is still valid. Variables Name Description alignment data extraAllocPages lock numPages offset pageSize readWriteLimit"
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitVector/Functions/allAre0.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitVector/Functions/allAre0.html",
    "title": "Overloads for - allAre0 | Marmos Demo",
    "keywords": "Overloads for - allAre0 Module std.experimental.allocator.building_blocks.bitmapped_block Parent BitVector allAre0() bool allAre0( ) Are all bits zero?"
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitVector/Functions/allAre1.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitVector/Functions/allAre1.html",
    "title": "Overloads for - allAre1 | Marmos Demo",
    "keywords": "Overloads for - allAre1 Module std.experimental.allocator.building_blocks.bitmapped_block Parent BitVector allAre1() bool allAre1( ) Are all bits one?"
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitVector/Functions/find1.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitVector/Functions/find1.html",
    "title": "Overloads for - find1 | Marmos Demo",
    "keywords": "Overloads for - find1 Module std.experimental.allocator.building_blocks.bitmapped_block Parent BitVector find1(i) ulong find1( ulong i )"
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitVector/Functions/find1Backward.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitVector/Functions/find1Backward.html",
    "title": "Overloads for - find1Backward | Marmos Demo",
    "keywords": "Overloads for - find1Backward Module std.experimental.allocator.building_blocks.bitmapped_block Parent BitVector find1Backward(i) ulong find1Backward( ulong i )"
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitVector/Functions/findZeros.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitVector/Functions/findZeros.html",
    "title": "Overloads for - findZeros | Marmos Demo",
    "keywords": "Overloads for - findZeros Module std.experimental.allocator.building_blocks.bitmapped_block Parent BitVector findZeros(howMany, start) ulong findZeros( size_t howMany, ulong start )"
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitVector/Functions/length.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitVector/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.experimental.allocator.building_blocks.bitmapped_block Parent BitVector length() ulong length( )"
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitVector/Functions/opIndex.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitVector/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.experimental.allocator.building_blocks.bitmapped_block Parent BitVector opIndex(x) bool opIndex( ulong x )"
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitVector/Functions/opIndexAssign.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitVector/Functions/opIndexAssign.html",
    "title": "Overloads for - opIndexAssign | Marmos Demo",
    "keywords": "Overloads for - opIndexAssign Module std.experimental.allocator.building_blocks.bitmapped_block Parent BitVector opIndexAssign(b, x) void opIndexAssign( bool b, ulong x )"
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitVector/Functions/opSliceAssign.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitVector/Functions/opSliceAssign.html",
    "title": "Overloads for - opSliceAssign | Marmos Demo",
    "keywords": "Overloads for - opSliceAssign Module std.experimental.allocator.building_blocks.bitmapped_block Parent BitVector opSliceAssign(b) void opSliceAssign( bool b ) opSliceAssign(b, x, y) void opSliceAssign( bool b, ulong x, ulong y )"
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlock/Functions/alignedAllocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlock/Functions/alignedAllocate.html",
    "title": "Overloads for - alignedAllocate | Marmos Demo",
    "keywords": "Overloads for - alignedAllocate Module std.experimental.allocator.building_blocks.bitmapped_block Parent BitmappedBlock alignedAllocate(n, a) <bug: unknown> alignedAllocate( size_t n, uint a ) Allocates a block with specified alignment a . The alignment must be a power of 2. If a <= alignment , function forwards to allocate . Otherwise, it attempts to overallocate and then adjust the result for proper alignment. In the worst case the slack memory is around two blocks."
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlock/Functions/alignedReallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlock/Functions/alignedReallocate.html",
    "title": "Overloads for - alignedReallocate | Marmos Demo",
    "keywords": "Overloads for - alignedReallocate Module std.experimental.allocator.building_blocks.bitmapped_block Parent BitmappedBlock alignedReallocate(b, newSize, a) bool alignedReallocate( <bug: unknown> b, size_t newSize, uint a ) Reallocates a block previously allocated with alignedAllocate . Contractions do not occur in place."
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlock/Functions/allocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlock/Functions/allocate.html",
    "title": "Overloads for - allocate | Marmos Demo",
    "keywords": "Overloads for - allocate Module std.experimental.allocator.building_blocks.bitmapped_block Parent BitmappedBlock allocate(s) <bug: unknown> allocate( size_t s ) Allocates s bytes of memory and returns it, or null if memory could not be allocated. The following information might be of help with choosing the appropriate block size. Actual allocation occurs in sizes multiple of the block size. Allocating one block is the fastest because only one 0 bit needs to be found in the metadata. Allocating 2 through 64 blocks is the next cheapest because it affects a maximum of two ulong in the metadata. Allocations greater than 64 blocks require a multiword search through the metadata. If instantiated with No.multiblock , it performs a search for the first zero bit in the bitmap and sets it."
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlock/Functions/allocateAll.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlock/Functions/allocateAll.html",
    "title": "Overloads for - allocateAll | Marmos Demo",
    "keywords": "Overloads for - allocateAll Module std.experimental.allocator.building_blocks.bitmapped_block Parent BitmappedBlock allocateAll() <bug: unknown> allocateAll( ) If the BitmappedBlock object is empty (has no active allocation), allocates all memory within and returns a slice to it. Otherwise, returns null (i.e. no attempt is made to allocate the largest available block)."
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlock/Functions/allocateFresh.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlock/Functions/allocateFresh.html",
    "title": "Overloads for - allocateFresh | Marmos Demo",
    "keywords": "Overloads for - allocateFresh Module std.experimental.allocator.building_blocks.bitmapped_block Parent BitmappedBlock allocateFresh(s) <bug: unknown> allocateFresh( size_t s ) Allocates s bytes of memory and returns it, or null if memory could not be allocated. allocateFresh behaves just like allocate, the only difference being that this always returns unused(fresh) memory. Although there may still be available space in the BitmappedBlock , allocateFresh could still return null, because all the available blocks have been previously deallocated."
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlock/Functions/deallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlock/Functions/deallocate.html",
    "title": "Overloads for - deallocate | Marmos Demo",
    "keywords": "Overloads for - deallocate Module std.experimental.allocator.building_blocks.bitmapped_block Parent BitmappedBlock deallocate(b) bool deallocate( <bug: unknown> b ) Deallocates a block previously allocated with this allocator."
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlock/Functions/deallocateAll.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlock/Functions/deallocateAll.html",
    "title": "Overloads for - deallocateAll | Marmos Demo",
    "keywords": "Overloads for - deallocateAll Module std.experimental.allocator.building_blocks.bitmapped_block Parent BitmappedBlock deallocateAll() bool deallocateAll( ) Forcibly deallocates all memory allocated by this allocator, making it available for further allocations. Does not return memory to ParentAllocator ."
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlock/Functions/empty.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlock/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.experimental.allocator.building_blocks.bitmapped_block Parent BitmappedBlock empty() Ternary empty( ) Returns Ternary.yes if no memory is currently allocated with this allocator, otherwise Ternary.no . This method never returns Ternary.unknown ."
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlock/Functions/expand.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlock/Functions/expand.html",
    "title": "Overloads for - expand | Marmos Demo",
    "keywords": "Overloads for - expand Module std.experimental.allocator.building_blocks.bitmapped_block Parent BitmappedBlock expand(b, delta) bool expand( <bug: unknown> b, size_t delta ) Expands in place a buffer previously allocated by BitmappedBlock . If instantiated with No.multiblock , the expansion fails if the new length exceeds theBlockSize ."
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlock/Functions/goodAllocSize.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlock/Functions/goodAllocSize.html",
    "title": "Overloads for - goodAllocSize | Marmos Demo",
    "keywords": "Overloads for - goodAllocSize Module std.experimental.allocator.building_blocks.bitmapped_block Parent BitmappedBlock goodAllocSize(n) size_t goodAllocSize( size_t n ) Returns the actual bytes allocated when n bytes are requested, i.e. n.roundUpToMultipleOf(blockSize) ."
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlock/Functions/owns.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlock/Functions/owns.html",
    "title": "Overloads for - owns | Marmos Demo",
    "keywords": "Overloads for - owns Module std.experimental.allocator.building_blocks.bitmapped_block Parent BitmappedBlock owns(b) Ternary owns( <bug: unknown> b ) Returns Ternary.yes if b belongs to the BitmappedBlock object, Ternary.no otherwise. Never returns Ternary.unkown . (This method is somewhat tolerant in that accepts an interior slice.)"
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlock/Functions/reallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlock/Functions/reallocate.html",
    "title": "Overloads for - reallocate | Marmos Demo",
    "keywords": "Overloads for - reallocate Module std.experimental.allocator.building_blocks.bitmapped_block Parent BitmappedBlock reallocate(b, newSize) bool reallocate( <bug: unknown> b, size_t newSize ) Reallocates a previously-allocated block. Contractions occur in place."
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlockWithInternalPointers/Functions/allocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlockWithInternalPointers/Functions/allocate.html",
    "title": "Overloads for - allocate | Marmos Demo",
    "keywords": "Overloads for - allocate Module std.experimental.allocator.building_blocks.bitmapped_block Parent BitmappedBlockWithInternalPointers allocate(bytes) <bug: unknown> allocate( size_t bytes ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlockWithInternalPointers/Functions/allocateAll.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlockWithInternalPointers/Functions/allocateAll.html",
    "title": "Overloads for - allocateAll | Marmos Demo",
    "keywords": "Overloads for - allocateAll Module std.experimental.allocator.building_blocks.bitmapped_block Parent BitmappedBlockWithInternalPointers allocateAll() <bug: unknown> allocateAll( ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlockWithInternalPointers/Functions/deallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlockWithInternalPointers/Functions/deallocate.html",
    "title": "Overloads for - deallocate | Marmos Demo",
    "keywords": "Overloads for - deallocate Module std.experimental.allocator.building_blocks.bitmapped_block Parent BitmappedBlockWithInternalPointers deallocate(b) bool deallocate( <bug: unknown> b ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlockWithInternalPointers/Functions/doneMarking.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlockWithInternalPointers/Functions/doneMarking.html",
    "title": "Overloads for - doneMarking | Marmos Demo",
    "keywords": "Overloads for - doneMarking Module std.experimental.allocator.building_blocks.bitmapped_block Parent BitmappedBlockWithInternalPointers doneMarking() void doneMarking( )"
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlockWithInternalPointers/Functions/empty.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlockWithInternalPointers/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.experimental.allocator.building_blocks.bitmapped_block Parent BitmappedBlockWithInternalPointers empty() Ternary empty( ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlockWithInternalPointers/Functions/ensureRoomForAllocStart.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlockWithInternalPointers/Functions/ensureRoomForAllocStart.html",
    "title": "Overloads for - ensureRoomForAllocStart | Marmos Demo",
    "keywords": "Overloads for - ensureRoomForAllocStart Module std.experimental.allocator.building_blocks.bitmapped_block Parent BitmappedBlockWithInternalPointers ensureRoomForAllocStart(len) bool ensureRoomForAllocStart( size_t len )"
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlockWithInternalPointers/Functions/expand.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlockWithInternalPointers/Functions/expand.html",
    "title": "Overloads for - expand | Marmos Demo",
    "keywords": "Overloads for - expand Module std.experimental.allocator.building_blocks.bitmapped_block Parent BitmappedBlockWithInternalPointers expand(b, bytes) bool expand( <bug: unknown> b, size_t bytes ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlockWithInternalPointers/Functions/goodAllocSize.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlockWithInternalPointers/Functions/goodAllocSize.html",
    "title": "Overloads for - goodAllocSize | Marmos Demo",
    "keywords": "Overloads for - goodAllocSize Module std.experimental.allocator.building_blocks.bitmapped_block Parent BitmappedBlockWithInternalPointers goodAllocSize(n) size_t goodAllocSize( size_t n ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlockWithInternalPointers/Functions/markAllAsUnused.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlockWithInternalPointers/Functions/markAllAsUnused.html",
    "title": "Overloads for - markAllAsUnused | Marmos Demo",
    "keywords": "Overloads for - markAllAsUnused Module std.experimental.allocator.building_blocks.bitmapped_block Parent BitmappedBlockWithInternalPointers markAllAsUnused() void markAllAsUnused( )"
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlockWithInternalPointers/Functions/markAsUsed.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlockWithInternalPointers/Functions/markAsUsed.html",
    "title": "Overloads for - markAsUsed | Marmos Demo",
    "keywords": "Overloads for - markAsUsed Module std.experimental.allocator.building_blocks.bitmapped_block Parent BitmappedBlockWithInternalPointers markAsUsed(b) bool markAsUsed( <bug: unknown> b )"
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlockWithInternalPointers/Functions/resolveInternalPointer.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/BitmappedBlockWithInternalPointers/Functions/resolveInternalPointer.html",
    "title": "Overloads for - resolveInternalPointer | Marmos Demo",
    "keywords": "Overloads for - resolveInternalPointer Module std.experimental.allocator.building_blocks.bitmapped_block Parent BitmappedBlockWithInternalPointers resolveInternalPointer(p, result) Ternary resolveInternalPointer( <bug: unknown> p, <bug: unknown> result ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/Functions/findContigOnes.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/Functions/findContigOnes.html",
    "title": "Overloads for - findContigOnes | Marmos Demo",
    "keywords": "Overloads for - findContigOnes Module std.experimental.allocator.building_blocks.bitmapped_block findContigOnes(x, n) uint findContigOnes( ulong x, uint n ) Finds a run of contiguous ones in x of length at least n ."
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/Functions/leadingOnes.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/Functions/leadingOnes.html",
    "title": "Overloads for - leadingOnes | Marmos Demo",
    "keywords": "Overloads for - leadingOnes Module std.experimental.allocator.building_blocks.bitmapped_block leadingOnes(x) uint leadingOnes( ulong x ) Returns the number of most significant ones before a zero can be found in x . If x contains no zeros (i.e. is equal to ulong.max ), returns 64."
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/Functions/resetBits.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/Functions/resetBits.html",
    "title": "Overloads for - resetBits | Marmos Demo",
    "keywords": "Overloads for - resetBits Module std.experimental.allocator.building_blocks.bitmapped_block resetBits(w, lsb, msb) void resetBits( ulong w, uint lsb, uint msb )"
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/Functions/setBits.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/Functions/setBits.html",
    "title": "Overloads for - setBits | Marmos Demo",
    "keywords": "Overloads for - setBits Module std.experimental.allocator.building_blocks.bitmapped_block setBits(w, lsb, msb) void setBits( ulong w, uint lsb, uint msb )"
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/Functions/setBitsIfZero.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/Functions/setBitsIfZero.html",
    "title": "Overloads for - setBitsIfZero | Marmos Demo",
    "keywords": "Overloads for - setBitsIfZero Module std.experimental.allocator.building_blocks.bitmapped_block setBitsIfZero(w, lsb, msb) bool setBitsIfZero( ulong w, uint lsb, uint msb )"
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/Overview.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/Overview.html",
    "title": "Module - std.experimental.allocator.building_blocks.bitmapped_block | Marmos Demo",
    "keywords": "Module - std.experimental.allocator.building_blocks.bitmapped_block About Source: $(PHOBOSSRC std/experimental/allocator/building_blocks/bitmapped_block.d) Structs Name Description BitmappedBlock BitmappedBlock implements a simple heap consisting of one contiguous area of memory organized in blocks, each of size theBlockSize . A block is a unit of allocation. A bitmap serves as bookkeeping data, more precisely one bit per block indicating whether that block is currently allocated or not. BitmappedBlockWithInternalPointers A BitmappedBlock with additional structure for supporting resolveInternalPointer . To that end, BitmappedBlockWithInternalPointers adds a bitmap (one bit per block) that marks object starts. The bitmap itself has variable size and is allocated together with regular allocations. BitVector SharedBitmappedBlock The threadsafe version of the $(LREF BitmappedBlock). The semantics of the SharedBitmappedBlock are identical to the regular $(LREF BitmappedBlock). Functions Name Description findContigOnes Finds a run of contiguous ones in x of length at least n . leadingOnes Returns the number of most significant ones before a zero can be found in x . If x contains no zeros (i.e. is equal to ulong.max ), returns 64. resetBits setBits setBitsIfZero"
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/SharedBitmappedBlock/Functions/alignedAllocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/SharedBitmappedBlock/Functions/alignedAllocate.html",
    "title": "Overloads for - alignedAllocate | Marmos Demo",
    "keywords": "Overloads for - alignedAllocate Module std.experimental.allocator.building_blocks.bitmapped_block Parent SharedBitmappedBlock alignedAllocate(n, a) <bug: unknown> alignedAllocate( size_t n, uint a ) Allocates a block with specified alignment a . The alignment must be a power of 2. If a <= alignment , function forwards to allocate . Otherwise, it attempts to overallocate and then adjust the result for proper alignment. In the worst case the slack memory is around two blocks."
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/SharedBitmappedBlock/Functions/alignedReallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/SharedBitmappedBlock/Functions/alignedReallocate.html",
    "title": "Overloads for - alignedReallocate | Marmos Demo",
    "keywords": "Overloads for - alignedReallocate Module std.experimental.allocator.building_blocks.bitmapped_block Parent SharedBitmappedBlock alignedReallocate(b, newSize, a) bool alignedReallocate( <bug: unknown> b, size_t newSize, uint a ) Reallocates a block previously allocated with alignedAllocate . Contractions do not occur in place."
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/SharedBitmappedBlock/Functions/allocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/SharedBitmappedBlock/Functions/allocate.html",
    "title": "Overloads for - allocate | Marmos Demo",
    "keywords": "Overloads for - allocate Module std.experimental.allocator.building_blocks.bitmapped_block Parent SharedBitmappedBlock allocate(s) <bug: unknown> allocate( size_t s ) Allocates s bytes of memory and returns it, or null if memory could not be allocated. The SharedBitmappedBlock cannot allocate more than the given block size. Allocations are satisfied by searching the first unset bit in the bitmap, and atomically setting it. In rare memory pressure scenarios, the allocation could fail."
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/SharedBitmappedBlock/Functions/allocateAll.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/SharedBitmappedBlock/Functions/allocateAll.html",
    "title": "Overloads for - allocateAll | Marmos Demo",
    "keywords": "Overloads for - allocateAll Module std.experimental.allocator.building_blocks.bitmapped_block Parent SharedBitmappedBlock allocateAll() <bug: unknown> allocateAll( ) If the SharedBitmappedBlock object is empty (has no active allocation), allocates all memory within and returns a slice to it. Otherwise, returns null (i.e. no attempt is made to allocate the largest available block)."
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/SharedBitmappedBlock/Functions/allocateFresh.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/SharedBitmappedBlock/Functions/allocateFresh.html",
    "title": "Overloads for - allocateFresh | Marmos Demo",
    "keywords": "Overloads for - allocateFresh Module std.experimental.allocator.building_blocks.bitmapped_block Parent SharedBitmappedBlock allocateFresh(s) <bug: unknown> allocateFresh( size_t s ) Allocates s bytes of memory and returns it, or null if memory could not be allocated. allocateFresh behaves just like allocate, the only difference being that this always returns unused(fresh) memory. Although there may still be available space in the SharedBitmappedBlock , allocateFresh could still return null, because all the available blocks have been previously deallocated."
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/SharedBitmappedBlock/Functions/deallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/SharedBitmappedBlock/Functions/deallocate.html",
    "title": "Overloads for - deallocate | Marmos Demo",
    "keywords": "Overloads for - deallocate Module std.experimental.allocator.building_blocks.bitmapped_block Parent SharedBitmappedBlock deallocate(b) bool deallocate( <bug: unknown> b ) Deallocates the given buffer b , by atomically setting the corresponding bit to 0 . b must be valid, and cannot contain multiple adjacent blocks ."
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/SharedBitmappedBlock/Functions/deallocateAll.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/SharedBitmappedBlock/Functions/deallocateAll.html",
    "title": "Overloads for - deallocateAll | Marmos Demo",
    "keywords": "Overloads for - deallocateAll Module std.experimental.allocator.building_blocks.bitmapped_block Parent SharedBitmappedBlock deallocateAll() bool deallocateAll( ) Forcibly deallocates all memory allocated by this allocator, making it available for further allocations. Does not return memory to ParentAllocator ."
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/SharedBitmappedBlock/Functions/empty.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/SharedBitmappedBlock/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.experimental.allocator.building_blocks.bitmapped_block Parent SharedBitmappedBlock empty() Ternary empty( ) Returns Ternary.yes if no memory is currently allocated with this allocator, otherwise Ternary.no . This method never returns Ternary.unknown ."
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/SharedBitmappedBlock/Functions/expand.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/SharedBitmappedBlock/Functions/expand.html",
    "title": "Overloads for - expand | Marmos Demo",
    "keywords": "Overloads for - expand Module std.experimental.allocator.building_blocks.bitmapped_block Parent SharedBitmappedBlock expand(b, delta) bool expand( <bug: unknown> b, size_t delta ) Expands in place a buffer previously allocated by SharedBitmappedBlock . Expansion fails if the new length exceeds the block size."
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/SharedBitmappedBlock/Functions/goodAllocSize.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/SharedBitmappedBlock/Functions/goodAllocSize.html",
    "title": "Overloads for - goodAllocSize | Marmos Demo",
    "keywords": "Overloads for - goodAllocSize Module std.experimental.allocator.building_blocks.bitmapped_block Parent SharedBitmappedBlock goodAllocSize(n) size_t goodAllocSize( size_t n ) Returns the actual bytes allocated when n bytes are requested, i.e. n.roundUpToMultipleOf(blockSize) ."
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/SharedBitmappedBlock/Functions/owns.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/SharedBitmappedBlock/Functions/owns.html",
    "title": "Overloads for - owns | Marmos Demo",
    "keywords": "Overloads for - owns Module std.experimental.allocator.building_blocks.bitmapped_block Parent SharedBitmappedBlock owns(b) Ternary owns( <bug: unknown> b ) Returns Ternary.yes if b belongs to the SharedBitmappedBlock object, Ternary.no otherwise. Never returns Ternary.unkown . (This method is somewhat tolerant in that accepts an interior slice.)"
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/SharedBitmappedBlock/Functions/reallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/SharedBitmappedBlock/Functions/reallocate.html",
    "title": "Overloads for - reallocate | Marmos Demo",
    "keywords": "Overloads for - reallocate Module std.experimental.allocator.building_blocks.bitmapped_block Parent SharedBitmappedBlock reallocate(b, newSize) bool reallocate( <bug: unknown> b, size_t newSize ) Reallocates a previously-allocated block. Contractions occur in place."
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/Structs/BitVector.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/Structs/BitVector.html",
    "title": "Struct - BitVector | Marmos Demo",
    "keywords": "Struct - BitVector Module std.experimental.allocator.building_blocks.bitmapped_block public struct BitVector { // Are all bits zero? bool allAre0( ) ; // Are all bits one? bool allAre1( ) ; // ulong find1( ulong i ) ; // ulong find1Backward( ulong i ) ; // ulong findZeros( size_t howMany, ulong start ) ; // ulong length( ) ; // bool opIndex( ulong x ) ; // void opIndexAssign( bool b, ulong x ) ; // void opSliceAssign( bool b ) ; // void opSliceAssign( bool b, ulong x, ulong y ) ; } Functions Name Description allAre0 Are all bits zero? allAre1 Are all bits one? find1 find1Backward findZeros length opIndex opIndexAssign opSliceAssign"
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/Structs/BitmappedBlock.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/Structs/BitmappedBlock.html",
    "title": "Struct - BitmappedBlock | Marmos Demo",
    "keywords": "Struct - BitmappedBlock Module std.experimental.allocator.building_blocks.bitmapped_block public struct BitmappedBlock { // The alignment offered is user-configurable statically through parameter `theAlignment` , defaulted to `platformAlignment` . alias alignment = <todo: marmos support pending>; // If `blockSize == chooseAtRuntime` , `BitmappedBlock` offers a read/write property `blockSize` . It must be set before any use of the allocator. Otherwise (i.e. `theBlockSize` is a legit constant), `blockSize` is an alias for `theBlockSize` . Whether constant or variable, must also be a multiple of `alignment` . This constraint is `assert` ed statically and dynamically. alias blockSize = <todo: marmos support pending>; // Allocates a block with specified alignment `a` . The alignment must be a power of 2. If `a <= alignment` , function forwards to `allocate` . Otherwise, it attempts to overallocate and then adjust the result for proper alignment. In the worst case the slack memory is around two blocks. <bug: unknown> alignedAllocate( size_t n, uint a ) ; // Reallocates a block previously allocated with `alignedAllocate` . Contractions do not occur in place. bool alignedReallocate( <bug: unknown> b, size_t newSize, uint a ) ; // Allocates `s` bytes of memory and returns it, or `null` if memory could not be allocated. <bug: unknown> allocate( size_t s ) ; // If the `BitmappedBlock` object is empty (has no active allocation), allocates all memory within and returns a slice to it. Otherwise, returns `null` (i.e. no attempt is made to allocate the largest available block). <bug: unknown> allocateAll( ) ; // Allocates s bytes of memory and returns it, or `null` if memory could not be allocated. `allocateFresh` behaves just like allocate, the only difference being that this always returns unused(fresh) memory. Although there may still be available space in the `BitmappedBlock` , `allocateFresh` could still return null, because all the available blocks have been previously deallocated. <bug: unknown> allocateFresh( size_t s ) ; // Deallocates a block previously allocated with this allocator. bool deallocate( <bug: unknown> b ) ; // Forcibly deallocates all memory allocated by this allocator, making it available for further allocations. Does not return memory to `ParentAllocator` . bool deallocateAll( ) ; // Returns `Ternary.yes` if no memory is currently allocated with this allocator, otherwise `Ternary.no` . This method never returns `Ternary.unknown` . Ternary empty( ) ; // Expands in place a buffer previously allocated by `BitmappedBlock` . If instantiated with `No.multiblock` , the expansion fails if the new length exceeds `theBlockSize` . bool expand( <bug: unknown> b, size_t delta ) ; // Returns the actual bytes allocated when `n` bytes are requested, i.e. `n.roundUpToMultipleOf(blockSize)` . size_t goodAllocSize( size_t n ) ; // Returns `Ternary.yes` if `b` belongs to the `BitmappedBlock` object, `Ternary.no` otherwise. Never returns `Ternary.unkown` . (This method is somewhat tolerant in that accepts an interior slice.) Ternary owns( <bug: unknown> b ) ; // Reallocates a previously-allocated block. Contractions occur in place. bool reallocate( <bug: unknown> b, size_t newSize ) ; // The parent allocator. Depending on whether `ParentAllocator` holds state or not, this is a member variable or an alias for `ParentAllocator.instance` . ParentAllocator parent; } About BitmappedBlock implements a simple heap consisting of one contiguous area of memory organized in blocks, each of size theBlockSize . A block is a unit of allocation. A bitmap serves as bookkeeping data, more precisely one bit per block indicating whether that block is currently allocated or not. Passing NullAllocator as ParentAllocator (the default) means user code manages allocation of the memory block from the outside; in that case BitmappedBlock must be constructed with a ubyte[] preallocated block and has no responsibility regarding the lifetime of its support underlying storage. If another allocator type is passed, BitmappedBlock defines a destructor that uses the parent allocator to release the memory block. That makes the combination of AllocatorList , BitmappedBlock , and a back-end allocator such as MmapAllocator a simple and scalable solution for memory allocation. There are advantages to storing bookkeeping data separated from the payload (as opposed to e.g. using AffixAllocator to store metadata together with each allocation). The layout is more compact (overhead is one bit per block), searching for a free block during allocation enjoys better cache locality, and deallocation does not touch memory around the payload being deallocated (which is often cold). Allocation requests are handled on a first-fit basis. Although linear in complexity, allocation is in practice fast because of the compact bookkeeping representation, use of simple and fast bitwise routines, and caching of the first available block position. A known issue with this general approach is fragmentation, partially mitigated by coalescing. Since BitmappedBlock does not need to maintain the allocated size, freeing memory implicitly coalesces free blocks together. Also, tuning blockSize has a considerable impact on both internal and external fragmentation. If the last template parameter is set to No.multiblock , the allocator will only serve allocations which require at most theBlockSize . The BitmappedBlock has a specialized implementation for single-block allocations which allows for greater performance, at the cost of not being able to allocate more than one block at a time. The size of each block can be selected either during compilation or at run time. Statically-known block sizes are frequent in practice and yield slightly better performance. To choose a block size statically, pass it as the blockSize parameter as in BitmappedBlock!(4096) . To choose a block size parameter, use BitmappedBlock!(chooseAtRuntime) and pass the block size to the constructor. Params theBlockSize the length of a block, which must be a multiple of theAlignment theAlignment = alignment of each block ParentAllocator = allocator from which the BitmappedBlock will draw memory. If set to NullAllocator , the storage must be passed via the constructor f = Yes.multiblock to support allocations spanning across multiple blocks and No.multiblock to support single block allocations. Although limited by single block allocations, No.multiblock will generally provide higher performance. Aliases Name Description alignment The alignment offered is user-configurable statically through parameter theAlignment , defaulted to platformAlignment . blockSize If blockSize == chooseAtRuntime , BitmappedBlock offers a read/write property blockSize . It must be set before any use of the allocator. Otherwise (i.e. theBlockSize is a legit constant), blockSize is an alias for theBlockSize . Whether constant or variable, must also be a multiple of alignment . This constraint is assert ed statically and dynamically. Functions Name Description alignedAllocate Allocates a block with specified alignment a . The alignment must be a power of 2. If a <= alignment , function forwards to allocate . Otherwise, it attempts to overallocate and then adjust the result for proper alignment. In the worst case the slack memory is around two blocks. alignedReallocate Reallocates a block previously allocated with alignedAllocate . Contractions do not occur in place. allocate Allocates s bytes of memory and returns it, or null if memory could not be allocated. allocateAll If the BitmappedBlock object is empty (has no active allocation), allocates all memory within and returns a slice to it. Otherwise, returns null (i.e. no attempt is made to allocate the largest available block). allocateFresh Allocates s bytes of memory and returns it, or null if memory could not be allocated. allocateFresh behaves just like allocate, the only difference being that this always returns unused(fresh) memory. Although there may still be available space in the BitmappedBlock , allocateFresh could still return null, because all the available blocks have been previously deallocated. deallocate Deallocates a block previously allocated with this allocator. deallocateAll Forcibly deallocates all memory allocated by this allocator, making it available for further allocations. Does not return memory to ParentAllocator . empty Returns Ternary.yes if no memory is currently allocated with this allocator, otherwise Ternary.no . This method never returns Ternary.unknown . expand Expands in place a buffer previously allocated by BitmappedBlock . If instantiated with No.multiblock , the expansion fails if the new length exceeds theBlockSize . goodAllocSize Returns the actual bytes allocated when n bytes are requested, i.e. n.roundUpToMultipleOf(blockSize) . owns Returns Ternary.yes if b belongs to the BitmappedBlock object, Ternary.no otherwise. Never returns Ternary.unkown . (This method is somewhat tolerant in that accepts an interior slice.) reallocate Reallocates a previously-allocated block. Contractions occur in place. Variables Name Description parent The parent allocator. Depending on whether ParentAllocator holds state or not, this is a member variable or an alias for ParentAllocator.instance ."
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/Structs/BitmappedBlockWithInternalPointers.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/Structs/BitmappedBlockWithInternalPointers.html",
    "title": "Struct - BitmappedBlockWithInternalPointers | Marmos Demo",
    "keywords": "Struct - BitmappedBlockWithInternalPointers Module std.experimental.allocator.building_blocks.bitmapped_block public struct BitmappedBlockWithInternalPointers { // Allocator primitives. alias alignment = <todo: marmos support pending>; // Ditto <bug: unknown> allocate( size_t bytes ) ; // Ditto <bug: unknown> allocateAll( ) ; // Ditto bool deallocate( <bug: unknown> b ) ; // void doneMarking( ) ; // Ditto Ternary empty( ) ; // bool ensureRoomForAllocStart( size_t len ) ; // Ditto bool expand( <bug: unknown> b, size_t bytes ) ; // Ditto size_t goodAllocSize( size_t n ) ; // void markAllAsUnused( ) ; // bool markAsUsed( <bug: unknown> b ) ; // Ditto Ternary resolveInternalPointer( <bug: unknown> p, <bug: unknown> result ) ; } About A BitmappedBlock with additional structure for supporting resolveInternalPointer . To that end, BitmappedBlockWithInternalPointers adds a bitmap (one bit per block) that marks object starts. The bitmap itself has variable size and is allocated together with regular allocations. The time complexity of resolveInternalPointer is $(BIGOH k), where k is the size of the object within which the internal pointer is looked up. Aliases Name Description alignment Allocator primitives. Functions Name Description allocate Ditto allocateAll Ditto deallocate Ditto doneMarking empty Ditto ensureRoomForAllocStart expand Ditto goodAllocSize Ditto markAllAsUnused markAsUsed resolveInternalPointer Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/bitmapped_block/Structs/SharedBitmappedBlock.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bitmapped_block/Structs/SharedBitmappedBlock.html",
    "title": "Struct - SharedBitmappedBlock | Marmos Demo",
    "keywords": "Struct - SharedBitmappedBlock Module std.experimental.allocator.building_blocks.bitmapped_block public struct SharedBitmappedBlock { // The alignment offered is user-configurable statically through parameter `theAlignment` , defaulted to `platformAlignment` . alias alignment = <todo: marmos support pending>; // If `blockSize == chooseAtRuntime` , `SharedBitmappedBlock` offers a read/write property `blockSize` . It must be set before any use of the allocator. Otherwise (i.e. `theBlockSize` is a legit constant), `blockSize` is an alias for `theBlockSize` . Whether constant or variable, must also be a multiple of `alignment` . This constraint is `assert` ed statically and dynamically. alias blockSize = <todo: marmos support pending>; // Allocates a block with specified alignment `a` . The alignment must be a power of 2. If `a <= alignment` , function forwards to `allocate` . Otherwise, it attempts to overallocate and then adjust the result for proper alignment. In the worst case the slack memory is around two blocks. <bug: unknown> alignedAllocate( size_t n, uint a ) ; // Reallocates a block previously allocated with `alignedAllocate` . Contractions do not occur in place. bool alignedReallocate( <bug: unknown> b, size_t newSize, uint a ) ; // Allocates `s` bytes of memory and returns it, or `null` if memory could not be allocated. <bug: unknown> allocate( size_t s ) ; // If the `SharedBitmappedBlock` object is empty (has no active allocation), allocates all memory within and returns a slice to it. Otherwise, returns `null` (i.e. no attempt is made to allocate the largest available block). <bug: unknown> allocateAll( ) ; // Allocates s bytes of memory and returns it, or `null` if memory could not be allocated. `allocateFresh` behaves just like allocate, the only difference being that this always returns unused(fresh) memory. Although there may still be available space in the `SharedBitmappedBlock` , `allocateFresh` could still return null, because all the available blocks have been previously deallocated. <bug: unknown> allocateFresh( size_t s ) ; // Deallocates the given buffer `b` , by atomically setting the corresponding bit to `0` . `b` must be valid, and cannot contain multiple adjacent `blocks` . bool deallocate( <bug: unknown> b ) ; // Forcibly deallocates all memory allocated by this allocator, making it available for further allocations. Does not return memory to `ParentAllocator` . bool deallocateAll( ) ; // Returns `Ternary.yes` if no memory is currently allocated with this allocator, otherwise `Ternary.no` . This method never returns `Ternary.unknown` . Ternary empty( ) ; // Expands in place a buffer previously allocated by `SharedBitmappedBlock` . Expansion fails if the new length exceeds the block size. bool expand( <bug: unknown> b, size_t delta ) ; // Returns the actual bytes allocated when `n` bytes are requested, i.e. `n.roundUpToMultipleOf(blockSize)` . size_t goodAllocSize( size_t n ) ; // Returns `Ternary.yes` if `b` belongs to the `SharedBitmappedBlock` object, `Ternary.no` otherwise. Never returns `Ternary.unkown` . (This method is somewhat tolerant in that accepts an interior slice.) Ternary owns( <bug: unknown> b ) ; // Reallocates a previously-allocated block. Contractions occur in place. bool reallocate( <bug: unknown> b, size_t newSize ) ; // The parent allocator. Depending on whether `ParentAllocator` holds state or not, this is a member variable or an alias for `ParentAllocator.instance` . ParentAllocator parent; } About The threadsafe version of the $(LREF BitmappedBlock). The semantics of the SharedBitmappedBlock are identical to the regular $(LREF BitmappedBlock). Params theBlockSize the length of a block, which must be a multiple of theAlignment theAlignment = alignment of each block ParentAllocator = allocator from which the BitmappedBlock will draw memory. If set to NullAllocator , the storage must be passed via the constructor f = Yes.multiblock to support allocations spanning across multiple blocks and No.multiblock to support single block allocations. Although limited by single block allocations, No.multiblock will generally provide higher performance. Aliases Name Description alignment The alignment offered is user-configurable statically through parameter theAlignment , defaulted to platformAlignment . blockSize If blockSize == chooseAtRuntime , SharedBitmappedBlock offers a read/write property blockSize . It must be set before any use of the allocator. Otherwise (i.e. theBlockSize is a legit constant), blockSize is an alias for theBlockSize . Whether constant or variable, must also be a multiple of alignment . This constraint is assert ed statically and dynamically. Functions Name Description alignedAllocate Allocates a block with specified alignment a . The alignment must be a power of 2. If a <= alignment , function forwards to allocate . Otherwise, it attempts to overallocate and then adjust the result for proper alignment. In the worst case the slack memory is around two blocks. alignedReallocate Reallocates a block previously allocated with alignedAllocate . Contractions do not occur in place. allocate Allocates s bytes of memory and returns it, or null if memory could not be allocated. allocateAll If the SharedBitmappedBlock object is empty (has no active allocation), allocates all memory within and returns a slice to it. Otherwise, returns null (i.e. no attempt is made to allocate the largest available block). allocateFresh Allocates s bytes of memory and returns it, or null if memory could not be allocated. allocateFresh behaves just like allocate, the only difference being that this always returns unused(fresh) memory. Although there may still be available space in the SharedBitmappedBlock , allocateFresh could still return null, because all the available blocks have been previously deallocated. deallocate Deallocates the given buffer b , by atomically setting the corresponding bit to 0 . b must be valid, and cannot contain multiple adjacent blocks . deallocateAll Forcibly deallocates all memory allocated by this allocator, making it available for further allocations. Does not return memory to ParentAllocator . empty Returns Ternary.yes if no memory is currently allocated with this allocator, otherwise Ternary.no . This method never returns Ternary.unknown . expand Expands in place a buffer previously allocated by SharedBitmappedBlock . Expansion fails if the new length exceeds the block size. goodAllocSize Returns the actual bytes allocated when n bytes are requested, i.e. n.roundUpToMultipleOf(blockSize) . owns Returns Ternary.yes if b belongs to the SharedBitmappedBlock object, Ternary.no otherwise. Never returns Ternary.unkown . (This method is somewhat tolerant in that accepts an interior slice.) reallocate Reallocates a previously-allocated block. Contractions occur in place. Variables Name Description parent The parent allocator. Depending on whether ParentAllocator holds state or not, this is a member variable or an alias for ParentAllocator.instance ."
  },
  "phobos/std/experimental/allocator/building_blocks/bucketizer/Bucketizer/Functions/alignedAllocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bucketizer/Bucketizer/Functions/alignedAllocate.html",
    "title": "Overloads for - alignedAllocate | Marmos Demo",
    "keywords": "Overloads for - alignedAllocate Module std.experimental.allocator.building_blocks.bucketizer Parent Bucketizer alignedAllocate(bytes, alignment) <bug: unknown> alignedAllocate( size_t bytes, uint alignment ) Allocates the requested bytes of memory with specified alignment . Directs the call to either one of the buckets allocators. Defined only if Allocator defines alignedAllocate ."
  },
  "phobos/std/experimental/allocator/building_blocks/bucketizer/Bucketizer/Functions/alignedReallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bucketizer/Bucketizer/Functions/alignedReallocate.html",
    "title": "Overloads for - alignedReallocate | Marmos Demo",
    "keywords": "Overloads for - alignedReallocate Module std.experimental.allocator.building_blocks.bucketizer Parent Bucketizer alignedReallocate(b, size, a) bool alignedReallocate( <bug: unknown> b, size_t size, uint a ) Similar to reallocate , with alignment. Defined only if Allocator defines alignedReallocate ."
  },
  "phobos/std/experimental/allocator/building_blocks/bucketizer/Bucketizer/Functions/allocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bucketizer/Bucketizer/Functions/allocate.html",
    "title": "Overloads for - allocate | Marmos Demo",
    "keywords": "Overloads for - allocate Module std.experimental.allocator.building_blocks.bucketizer Parent Bucketizer allocate(bytes) <bug: unknown> allocate( size_t bytes ) Directs the call to either one of the buckets allocators."
  },
  "phobos/std/experimental/allocator/building_blocks/bucketizer/Bucketizer/Functions/allocatorFor.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bucketizer/Bucketizer/Functions/allocatorFor.html",
    "title": "Overloads for - allocatorFor | Marmos Demo",
    "keywords": "Overloads for - allocatorFor Module std.experimental.allocator.building_blocks.bucketizer Parent Bucketizer allocatorFor(n) <bug: unknown> allocatorFor( size_t n )"
  },
  "phobos/std/experimental/allocator/building_blocks/bucketizer/Bucketizer/Functions/deallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bucketizer/Bucketizer/Functions/deallocate.html",
    "title": "Overloads for - deallocate | Marmos Demo",
    "keywords": "Overloads for - deallocate Module std.experimental.allocator.building_blocks.bucketizer Parent Bucketizer deallocate(b) bool deallocate( <bug: unknown> b ) This method is only defined if Allocator defines deallocate ."
  },
  "phobos/std/experimental/allocator/building_blocks/bucketizer/Bucketizer/Functions/deallocateAll.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bucketizer/Bucketizer/Functions/deallocateAll.html",
    "title": "Overloads for - deallocateAll | Marmos Demo",
    "keywords": "Overloads for - deallocateAll Module std.experimental.allocator.building_blocks.bucketizer Parent Bucketizer deallocateAll() bool deallocateAll( ) This method is only defined if all allocators involved define $(D deallocateAll), and calls it for each bucket in turn. Returns true if all allocators could deallocate all."
  },
  "phobos/std/experimental/allocator/building_blocks/bucketizer/Bucketizer/Functions/expand.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bucketizer/Bucketizer/Functions/expand.html",
    "title": "Overloads for - expand | Marmos Demo",
    "keywords": "Overloads for - expand Module std.experimental.allocator.building_blocks.bucketizer Parent Bucketizer expand(b, delta) bool expand( <bug: unknown> b, size_t delta ) This method allows expansion within the respective bucket range. It succeeds if both b.length and $(D b.length + delta) fall in a range of the form $(D [min + k **step, min + (k + 1) ** step - 1])."
  },
  "phobos/std/experimental/allocator/building_blocks/bucketizer/Bucketizer/Functions/goodAllocSize.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bucketizer/Bucketizer/Functions/goodAllocSize.html",
    "title": "Overloads for - goodAllocSize | Marmos Demo",
    "keywords": "Overloads for - goodAllocSize Module std.experimental.allocator.building_blocks.bucketizer Parent Bucketizer goodAllocSize(bytes) size_t goodAllocSize( size_t bytes ) Rounds up to the maximum size of the bucket in which bytes falls."
  },
  "phobos/std/experimental/allocator/building_blocks/bucketizer/Bucketizer/Functions/owns.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bucketizer/Bucketizer/Functions/owns.html",
    "title": "Overloads for - owns | Marmos Demo",
    "keywords": "Overloads for - owns Module std.experimental.allocator.building_blocks.bucketizer Parent Bucketizer owns(b) Ternary owns( <bug: unknown> b ) Defined only if Allocator defines owns . Finds the owner of b and forwards the call to it."
  },
  "phobos/std/experimental/allocator/building_blocks/bucketizer/Bucketizer/Functions/reallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bucketizer/Bucketizer/Functions/reallocate.html",
    "title": "Overloads for - reallocate | Marmos Demo",
    "keywords": "Overloads for - reallocate Module std.experimental.allocator.building_blocks.bucketizer Parent Bucketizer reallocate(b, size) bool reallocate( <bug: unknown> b, size_t size ) This method allows reallocation within the respective bucket range. If both b.length and size fall in a range of the form $(D [min + k step, min + (k + 1) step - 1]), then reallocation is in place. Otherwise, reallocation with moving is attempted."
  },
  "phobos/std/experimental/allocator/building_blocks/bucketizer/Bucketizer/Functions/resolveInternalPointer.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bucketizer/Bucketizer/Functions/resolveInternalPointer.html",
    "title": "Overloads for - resolveInternalPointer | Marmos Demo",
    "keywords": "Overloads for - resolveInternalPointer Module std.experimental.allocator.building_blocks.bucketizer Parent Bucketizer resolveInternalPointer(p, result) Ternary resolveInternalPointer( <bug: unknown> p, <bug: unknown> result ) This method is only defined if all allocators involved define $(D resolveInternalPointer), and tries it for each bucket in turn."
  },
  "phobos/std/experimental/allocator/building_blocks/bucketizer/Overview.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bucketizer/Overview.html",
    "title": "Module - std.experimental.allocator.building_blocks.bucketizer | Marmos Demo",
    "keywords": "Module - std.experimental.allocator.building_blocks.bucketizer About Source: $(PHOBOSSRC std/experimental/allocator/building_blocks/bucketizer.d) Structs Name Description Bucketizer A Bucketizer uses distinct allocators for handling allocations of sizes in the intervals $(D [min, min + step - 1]), $(D [min + step, min + 2 step - 1]), $(D [min + 2 **step, min + 3 ** step - 1]), ... , $(D [max - step + 1, max])."
  },
  "phobos/std/experimental/allocator/building_blocks/bucketizer/Structs/Bucketizer.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/bucketizer/Structs/Bucketizer.html",
    "title": "Struct - Bucketizer | Marmos Demo",
    "keywords": "Struct - Bucketizer Module std.experimental.allocator.building_blocks.bucketizer public struct Bucketizer { // Allocates the requested `bytes` of memory with specified `alignment` . Directs the call to either one of the `buckets` allocators. Defined only if `Allocator` defines `alignedAllocate` . <bug: unknown> alignedAllocate( size_t bytes, uint alignment ) ; // Similar to `reallocate` , with alignment. Defined only if `Allocator` defines `alignedReallocate` . bool alignedReallocate( <bug: unknown> b, size_t size, uint a ) ; // Directs the call to either one of the `buckets` allocators. <bug: unknown> allocate( size_t bytes ) ; // <bug: unknown> allocatorFor( size_t n ) ; // This method is only defined if `Allocator` defines `deallocate` . bool deallocate( <bug: unknown> b ) ; // This method is only defined if all allocators involved define $(D deallocateAll), and calls it for each bucket in turn. Returns `true` if all allocators could deallocate all. bool deallocateAll( ) ; // This method allows expansion within the respective bucket range. It succeeds if both `b.length` and $(D b.length + delta) fall in a range of the form $(D [min + k **step, min + (k + 1) ** step - 1]). bool expand( <bug: unknown> b, size_t delta ) ; // Rounds up to the maximum size of the bucket in which `bytes` falls. size_t goodAllocSize( size_t bytes ) ; // Defined only if `Allocator` defines `owns` . Finds the owner of `b` and forwards the call to it. Ternary owns( <bug: unknown> b ) ; // This method allows reallocation within the respective bucket range. If both `b.length` and `size` fall in a range of the form $(D [min + k step, min + (k + 1) step - 1]), then reallocation is in place. Otherwise, reallocation with moving is attempted. bool reallocate( <bug: unknown> b, size_t size ) ; // This method is only defined if all allocators involved define $(D resolveInternalPointer), and tries it for each bucket in turn. Ternary resolveInternalPointer( <bug: unknown> p, <bug: unknown> result ) ; // The alignment offered is the same as `Allocator.alignment` . uint alignment; // The array of allocators is publicly available for e.g. initialization and inspection. <bug: unknown> buckets; } About A Bucketizer uses distinct allocators for handling allocations of sizes in the intervals $(D [min, min + step - 1]), $(D [min + step, min + 2 step - 1]), $(D [min + 2 **step, min + 3 ** step - 1]), ... , $(D [max - step + 1, max]). Bucketizer holds a fixed-size array of allocators and dispatches calls to them appropriately. The size of the array is $(D (max + 1 - min) / step), which must be an exact division. Allocations for sizes smaller than min or larger than max are illegal for Bucketizer . To handle them separately, Segregator may be of use. Functions Name Description alignedAllocate Allocates the requested bytes of memory with specified alignment . Directs the call to either one of the buckets allocators. Defined only if Allocator defines alignedAllocate . alignedReallocate Similar to reallocate , with alignment. Defined only if Allocator defines alignedReallocate . allocate Directs the call to either one of the buckets allocators. allocatorFor deallocate This method is only defined if Allocator defines deallocate . deallocateAll This method is only defined if all allocators involved define $(D deallocateAll), and calls it for each bucket in turn. Returns true if all allocators could deallocate all. expand This method allows expansion within the respective bucket range. It succeeds if both b.length and $(D b.length + delta) fall in a range of the form $(D [min + k **step, min + (k + 1) ** step - 1]). goodAllocSize Rounds up to the maximum size of the bucket in which bytes falls. owns Defined only if Allocator defines owns . Finds the owner of b and forwards the call to it. reallocate This method allows reallocation within the respective bucket range. If both b.length and size fall in a range of the form $(D [min + k step, min + (k + 1) step - 1]), then reallocation is in place. Otherwise, reallocation with moving is attempted. resolveInternalPointer This method is only defined if all allocators involved define $(D resolveInternalPointer), and tries it for each bucket in turn. Variables Name Description alignment The alignment offered is the same as Allocator.alignment . buckets The array of allocators is publicly available for e.g. initialization and inspection."
  },
  "phobos/std/experimental/allocator/building_blocks/fallback_allocator/FallbackAllocator/Functions/alignedAllocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/fallback_allocator/FallbackAllocator/Functions/alignedAllocate.html",
    "title": "Overloads for - alignedAllocate | Marmos Demo",
    "keywords": "Overloads for - alignedAllocate Module std.experimental.allocator.building_blocks.fallback_allocator Parent FallbackAllocator alignedAllocate(s, a) <bug: unknown> alignedAllocate( size_t s, uint a ) FallbackAllocator offers alignedAllocate iff at least one of the allocators also offers it. It attempts to allocate using either or both."
  },
  "phobos/std/experimental/allocator/building_blocks/fallback_allocator/FallbackAllocator/Functions/alignedReallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/fallback_allocator/FallbackAllocator/Functions/alignedReallocate.html",
    "title": "Overloads for - alignedReallocate | Marmos Demo",
    "keywords": "Overloads for - alignedReallocate Module std.experimental.allocator.building_blocks.fallback_allocator Parent FallbackAllocator alignedReallocate(b, newSize, a) bool alignedReallocate( <bug: unknown> b, size_t newSize, uint a )"
  },
  "phobos/std/experimental/allocator/building_blocks/fallback_allocator/FallbackAllocator/Functions/allocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/fallback_allocator/FallbackAllocator/Functions/allocate.html",
    "title": "Overloads for - allocate | Marmos Demo",
    "keywords": "Overloads for - allocate Module std.experimental.allocator.building_blocks.fallback_allocator Parent FallbackAllocator allocate(s) <bug: unknown> allocate( size_t s ) Allocates memory trying the primary allocator first. If it returns $(D null), the fallback allocator is tried."
  },
  "phobos/std/experimental/allocator/building_blocks/fallback_allocator/FallbackAllocator/Functions/deallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/fallback_allocator/FallbackAllocator/Functions/deallocate.html",
    "title": "Overloads for - deallocate | Marmos Demo",
    "keywords": "Overloads for - deallocate Module std.experimental.allocator.building_blocks.fallback_allocator Parent FallbackAllocator deallocate(b) bool deallocate( <bug: unknown> b ) deallocate is defined if and only if at least one of the allocators define deallocate . It works as follows. If primary.owns(b) , then the request is forwarded to primary.deallocate if it is defined, or is a no-op otherwise. If primary does not own b , then the request is forwarded to fallback.deallocate if it is defined, or is a no-op otherwise."
  },
  "phobos/std/experimental/allocator/building_blocks/fallback_allocator/FallbackAllocator/Functions/empty.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/fallback_allocator/FallbackAllocator/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.experimental.allocator.building_blocks.fallback_allocator Parent FallbackAllocator empty() Ternary empty( ) empty is defined if both allocators also define it. Returns: $(D primary.empty & fallback.empty)"
  },
  "phobos/std/experimental/allocator/building_blocks/fallback_allocator/FallbackAllocator/Functions/expand.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/fallback_allocator/FallbackAllocator/Functions/expand.html",
    "title": "Overloads for - expand | Marmos Demo",
    "keywords": "Overloads for - expand Module std.experimental.allocator.building_blocks.fallback_allocator Parent FallbackAllocator expand(b, delta) bool expand( <bug: unknown> b, size_t delta ) expand is defined if and only if at least one of the allocators defines expand . It works as follows. If primary.owns(b) , then the request is forwarded to primary.expand if it is defined, or fails (returning false ) otherwise. If primary does not own b , then the request is forwarded to fallback.expand if it is defined, or fails (returning false ) otherwise."
  },
  "phobos/std/experimental/allocator/building_blocks/fallback_allocator/FallbackAllocator/Functions/owns.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/fallback_allocator/FallbackAllocator/Functions/owns.html",
    "title": "Overloads for - owns | Marmos Demo",
    "keywords": "Overloads for - owns Module std.experimental.allocator.building_blocks.fallback_allocator Parent FallbackAllocator owns(b) Ternary owns( <bug: unknown> b ) owns is defined if and only if both allocators define owns . Returns $(D primary.owns(b) | fallback.owns(b))."
  },
  "phobos/std/experimental/allocator/building_blocks/fallback_allocator/FallbackAllocator/Functions/reallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/fallback_allocator/FallbackAllocator/Functions/reallocate.html",
    "title": "Overloads for - reallocate | Marmos Demo",
    "keywords": "Overloads for - reallocate Module std.experimental.allocator.building_blocks.fallback_allocator Parent FallbackAllocator reallocate(b, newSize) bool reallocate( <bug: unknown> b, size_t newSize ) reallocate works as follows. If primary.owns(b) , then $(D primary.reallocate(b, newSize)) is attempted. If it fails, an attempt is made to move the allocation from primary to fallback . If primary does not own b , then $(D fallback.reallocate(b, newSize)) is attempted. If that fails, an attempt is made to move the allocation from fallback to primary ."
  },
  "phobos/std/experimental/allocator/building_blocks/fallback_allocator/FallbackAllocator/Functions/resolveInternalPointer.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/fallback_allocator/FallbackAllocator/Functions/resolveInternalPointer.html",
    "title": "Overloads for - resolveInternalPointer | Marmos Demo",
    "keywords": "Overloads for - resolveInternalPointer Module std.experimental.allocator.building_blocks.fallback_allocator Parent FallbackAllocator resolveInternalPointer(p, result) Ternary resolveInternalPointer( <bug: unknown> p, <bug: unknown> result ) resolveInternalPointer is defined if and only if both allocators define it."
  },
  "phobos/std/experimental/allocator/building_blocks/fallback_allocator/Functions/fallbackAllocator.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/fallback_allocator/Functions/fallbackAllocator.html",
    "title": "Overloads for - fallbackAllocator | Marmos Demo",
    "keywords": "Overloads for - fallbackAllocator Module std.experimental.allocator.building_blocks.fallback_allocator fallbackAllocator(p, f) FallbackAllocator!(PrimaryFallback) fallbackAllocator( Primary p, Fallback f ) Convenience function that uses type deduction to return the appropriate FallbackAllocator instance. To initialize with allocators that don't have state, use their it static member."
  },
  "phobos/std/experimental/allocator/building_blocks/fallback_allocator/Functions/forward.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/fallback_allocator/Functions/forward.html",
    "title": "Overloads for - forward | Marmos Demo",
    "keywords": "Overloads for - forward Module std.experimental.allocator.building_blocks.fallback_allocator forward() <bug: unknown> forward( ) auto"
  },
  "phobos/std/experimental/allocator/building_blocks/fallback_allocator/Overview.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/fallback_allocator/Overview.html",
    "title": "Module - std.experimental.allocator.building_blocks.fallback_allocator | Marmos Demo",
    "keywords": "Module - std.experimental.allocator.building_blocks.fallback_allocator About Source: $(PHOBOSSRC std/experimental/allocator/building_blocks/fallback_allocator.d) Structs Name Description FallbackAllocator FallbackAllocator is the allocator equivalent of an \"or\" operator in algebra. An allocation request is first attempted with the Primary allocator. If that returns null , the request is forwarded to the $(D Fallback) allocator. All other requests are dispatched appropriately to one of the two allocators. Functions Name Description fallbackAllocator Convenience function that uses type deduction to return the appropriate FallbackAllocator instance. To initialize with allocators that don't have state, use their it static member. forward"
  },
  "phobos/std/experimental/allocator/building_blocks/fallback_allocator/Structs/FallbackAllocator.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/fallback_allocator/Structs/FallbackAllocator.html",
    "title": "Struct - FallbackAllocator | Marmos Demo",
    "keywords": "Struct - FallbackAllocator Module std.experimental.allocator.building_blocks.fallback_allocator public struct FallbackAllocator { // `FallbackAllocator` offers `alignedAllocate` iff at least one of the allocators also offers it. It attempts to allocate using either or both. <bug: unknown> alignedAllocate( size_t s, uint a ) ; // bool alignedReallocate( <bug: unknown> b, size_t newSize, uint a ) ; // Allocates memory trying the primary allocator first. If it returns $(D null), the fallback allocator is tried. <bug: unknown> allocate( size_t s ) ; // `deallocate` is defined if and only if at least one of the allocators define `deallocate` . It works as follows. If `primary.owns(b)` , then the request is forwarded to `primary.deallocate` if it is defined, or is a no-op otherwise. If `primary` does not own `b` , then the request is forwarded to `fallback.deallocate` if it is defined, or is a no-op otherwise. bool deallocate( <bug: unknown> b ) ; // `empty` is defined if both allocators also define it. Ternary empty( ) ; // `expand` is defined if and only if at least one of the allocators defines `expand` . It works as follows. If `primary.owns(b)` , then the request is forwarded to `primary.expand` if it is defined, or fails (returning `false` ) otherwise. If `primary` does not own `b` , then the request is forwarded to `fallback.expand` if it is defined, or fails (returning `false` ) otherwise. bool expand( <bug: unknown> b, size_t delta ) ; // `owns` is defined if and only if both allocators define `owns` . Returns $(D primary.owns(b) | fallback.owns(b)). Ternary owns( <bug: unknown> b ) ; // `reallocate` works as follows. If `primary.owns(b)` , then $(D primary.reallocate(b, newSize)) is attempted. If it fails, an attempt is made to move the allocation from `primary` to `fallback` . bool reallocate( <bug: unknown> b, size_t newSize ) ; // `resolveInternalPointer` is defined if and only if both allocators define it. Ternary resolveInternalPointer( <bug: unknown> p, <bug: unknown> result ) ; // The alignment offered is the minimum of the two allocators' alignment. uint alignment; // The fallback allocator. Fallback fallback; // If both `Primary` and `Fallback` are stateless, `FallbackAllocator` defines a static instance called `instance` . static FallbackAllocator instance; // The primary allocator. Primary primary; } About FallbackAllocator is the allocator equivalent of an \"or\" operator in algebra. An allocation request is first attempted with the Primary allocator. If that returns null , the request is forwarded to the $(D Fallback) allocator. All other requests are dispatched appropriately to one of the two allocators. In order to work, FallbackAllocator requires that Primary defines the owns method. This is needed in order to decide which allocator was responsible for a given allocation. FallbackAllocator is useful for fast, special-purpose allocators backed up by general-purpose allocators. The example below features a stack region backed up by the GCAllocator . Functions Name Description alignedAllocate FallbackAllocator offers alignedAllocate iff at least one of the allocators also offers it. It attempts to allocate using either or both. alignedReallocate allocate Allocates memory trying the primary allocator first. If it returns $(D null), the fallback allocator is tried. deallocate deallocate is defined if and only if at least one of the allocators define deallocate . It works as follows. If primary.owns(b) , then the request is forwarded to primary.deallocate if it is defined, or is a no-op otherwise. If primary does not own b , then the request is forwarded to fallback.deallocate if it is defined, or is a no-op otherwise. empty empty is defined if both allocators also define it. expand expand is defined if and only if at least one of the allocators defines expand . It works as follows. If primary.owns(b) , then the request is forwarded to primary.expand if it is defined, or fails (returning false ) otherwise. If primary does not own b , then the request is forwarded to fallback.expand if it is defined, or fails (returning false ) otherwise. owns owns is defined if and only if both allocators define owns . Returns $(D primary.owns(b) | fallback.owns(b)). reallocate reallocate works as follows. If primary.owns(b) , then $(D primary.reallocate(b, newSize)) is attempted. If it fails, an attempt is made to move the allocation from primary to fallback . resolveInternalPointer resolveInternalPointer is defined if and only if both allocators define it. Variables Name Description alignment The alignment offered is the minimum of the two allocators' alignment. fallback The fallback allocator. instance If both Primary and Fallback are stateless, FallbackAllocator defines a static instance called instance . primary The primary allocator."
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/ContiguousFreeList/Functions/allocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/ContiguousFreeList/Functions/allocate.html",
    "title": "Overloads for - allocate | Marmos Demo",
    "keywords": "Overloads for - allocate Module std.experimental.allocator.building_blocks.free_list Parent ContiguousFreeList allocate(n) <bug: unknown> allocate( size_t n ) Allocate n bytes of memory. If n is eligible for freelist and the freelist is not empty, pops the memory off the free list. In all other cases, uses the parent allocator."
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/ContiguousFreeList/Functions/deallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/ContiguousFreeList/Functions/deallocate.html",
    "title": "Overloads for - deallocate | Marmos Demo",
    "keywords": "Overloads for - deallocate Module std.experimental.allocator.building_blocks.free_list Parent ContiguousFreeList deallocate(b) bool deallocate( <bug: unknown> b ) Deallocates b . If it's of eligible size, it's put on the free list. Otherwise, it's returned to parent . Precondition: b has been allocated with this allocator, or is $(D null)."
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/ContiguousFreeList/Functions/deallocateAll.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/ContiguousFreeList/Functions/deallocateAll.html",
    "title": "Overloads for - deallocateAll | Marmos Demo",
    "keywords": "Overloads for - deallocateAll Module std.experimental.allocator.building_blocks.free_list Parent ContiguousFreeList deallocateAll() bool deallocateAll( ) Deallocates everything from the parent."
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/ContiguousFreeList/Functions/empty.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/ContiguousFreeList/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.experimental.allocator.building_blocks.free_list Parent ContiguousFreeList empty() Ternary empty( ) Returns Ternary.yes if no memory is currently allocated with this allocator, Ternary.no otherwise. This method never returns Ternary.unknown ."
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/ContiguousFreeList/Functions/goodAllocSize.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/ContiguousFreeList/Functions/goodAllocSize.html",
    "title": "Overloads for - goodAllocSize | Marmos Demo",
    "keywords": "Overloads for - goodAllocSize Module std.experimental.allocator.building_blocks.free_list Parent ContiguousFreeList goodAllocSize(n) size_t goodAllocSize( size_t n ) If n is eligible for freelisting, returns max . Otherwise, returns parent.goodAllocSize(n) . Precondition If set at runtime, min and/or max must be initialized appropriately. Postcondition $(D result >= bytes)"
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/ContiguousFreeList/Functions/initialize.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/ContiguousFreeList/Functions/initialize.html",
    "title": "Overloads for - initialize | Marmos Demo",
    "keywords": "Overloads for - initialize Module std.experimental.allocator.building_blocks.free_list Parent ContiguousFreeList initialize(buffer, itemSize) void initialize( <bug: unknown> buffer, size_t itemSize )"
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/ContiguousFreeList/Functions/owns.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/ContiguousFreeList/Functions/owns.html",
    "title": "Overloads for - owns | Marmos Demo",
    "keywords": "Overloads for - owns Module std.experimental.allocator.building_blocks.free_list Parent ContiguousFreeList owns(b) Ternary owns( <bug: unknown> b ) Defined if ParentAllocator defines it. Checks whether the block belongs to this allocator."
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/FreeList/Functions/allocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/FreeList/Functions/allocate.html",
    "title": "Overloads for - allocate | Marmos Demo",
    "keywords": "Overloads for - allocate Module std.experimental.allocator.building_blocks.free_list Parent FreeList allocate(n) <bug: unknown> allocate( size_t n ) Allocates memory either off of the free list or from the parent allocator. If n is within \\((D [min, max]) or if the free list is unchecked (\\)(D minSize == 0 && maxSize == size_t.max)), then the free list is consulted first. If not empty (hit), the block at the front of the free list is removed from the list and returned. Otherwise (miss), a new block of max bytes is allocated, truncated to n bytes, and returned. Params n size_t number of bytes to allocate Returns The allocated block, or null . Precondition If set at runtime, min and/or max must be initialized appropriately. Postcondition: $(D result.length == bytes || result is null)"
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/FreeList/Functions/blockFor.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/FreeList/Functions/blockFor.html",
    "title": "Overloads for - blockFor | Marmos Demo",
    "keywords": "Overloads for - blockFor Module std.experimental.allocator.building_blocks.free_list Parent FreeList blockFor(p) <bug: unknown> blockFor( <bug: unknown> p )"
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/FreeList/Functions/deallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/FreeList/Functions/deallocate.html",
    "title": "Overloads for - deallocate | Marmos Demo",
    "keywords": "Overloads for - deallocate Module std.experimental.allocator.building_blocks.free_list Parent FreeList deallocate(block) bool deallocate( <bug: unknown> block ) If block.length is within \\((D [min, max]) or if the free list is unchecked (\\)(D minSize == 0 && maxSize == size_t.max)), then inserts the block at the front of the free list. For all others, forwards to $(D parent.deallocate) if Parent.deallocate is defined. Params block <bug: unknown> Block to deallocate. Precondition If set at runtime, min and/or max must be initialized appropriately. The block must have been allocated with this freelist, and no dynamic changing of min or max is allowed to occur between allocation and deallocation."
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/FreeList/Functions/deallocateAll.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/FreeList/Functions/deallocateAll.html",
    "title": "Overloads for - deallocateAll | Marmos Demo",
    "keywords": "Overloads for - deallocateAll Module std.experimental.allocator.building_blocks.free_list Parent FreeList deallocateAll() bool deallocateAll( ) Defined only if ParentAllocator defines deallocateAll . If so, forwards to it and resets the freelist."
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/FreeList/Functions/freeListEligible.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/FreeList/Functions/freeListEligible.html",
    "title": "Overloads for - freeListEligible | Marmos Demo",
    "keywords": "Overloads for - freeListEligible Module std.experimental.allocator.building_blocks.free_list Parent FreeList freeListEligible(n) bool freeListEligible( size_t n )"
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/FreeList/Functions/goodAllocSize.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/FreeList/Functions/goodAllocSize.html",
    "title": "Overloads for - goodAllocSize | Marmos Demo",
    "keywords": "Overloads for - goodAllocSize Module std.experimental.allocator.building_blocks.free_list Parent FreeList goodAllocSize(bytes) size_t goodAllocSize( size_t bytes ) If $(D maxSize == unbounded), returns parent.goodAllocSize(bytes) . Otherwise, returns max for sizes in the interval $(D [min, max]), and parent.goodAllocSize(bytes) otherwise. Precondition If set at runtime, min and/or max must be initialized appropriately. Postcondition $(D result >= bytes)"
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/FreeList/Functions/max.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/FreeList/Functions/max.html",
    "title": "Overloads for - max | Marmos Demo",
    "keywords": "Overloads for - max Module std.experimental.allocator.building_blocks.free_list Parent FreeList max() size_t max( ) Returns the largest allocation size eligible for allocation from the freelist. (If $(D maxSize != chooseAtRuntime), this is simply an alias for maxSize .) All allocation requests for sizes greater than or equal to min and less than or equal to max are rounded to $(D max) and forwarded to the parent allocator. When the block fitting the same constraint gets deallocated, it is put in the freelist with the allocated size assumed to be max . max(high) void max( size_t high ) If FreeList has been instantiated with $(D maxSize == chooseAtRuntime), then the max property is writable. Setting it must precede any allocation. Params high size_t new value for max Precondition: $(D high >= min), or $(D minSize == chooseAtRuntime) and min has not yet been initialized. Also $(D high >= (void*).sizeof). Also, no allocation has been yet done with this allocator. Postcondition: $(D max == high)"
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/FreeList/Functions/min.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/FreeList/Functions/min.html",
    "title": "Overloads for - min | Marmos Demo",
    "keywords": "Overloads for - min Module std.experimental.allocator.building_blocks.free_list Parent FreeList min() size_t min( ) Returns the smallest allocation size eligible for allocation from the freelist. (If $(D minSize != chooseAtRuntime), this is simply an alias for minSize .) min(low) void min( size_t low ) If FreeList has been instantiated with $(D minSize == chooseAtRuntime), then the min property is writable. Setting it must precede any allocation. Params low size_t new value for min Precondition: $(D low <= max), or $(D maxSize == chooseAtRuntime) and max has not yet been initialized. Also, no allocation has been yet done with this allocator. Postcondition: $(D min == low)"
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/FreeList/Functions/minimize.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/FreeList/Functions/minimize.html",
    "title": "Overloads for - minimize | Marmos Demo",
    "keywords": "Overloads for - minimize Module std.experimental.allocator.building_blocks.free_list Parent FreeList minimize() void minimize( ) Nonstandard function that minimizes the memory usage of the freelist by freeing each element in turn. Defined only if ParentAllocator defines deallocate . $(D FreeList!(0, unbounded)) does not have this function."
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/FreeList/Functions/tooLarge.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/FreeList/Functions/tooLarge.html",
    "title": "Overloads for - tooLarge | Marmos Demo",
    "keywords": "Overloads for - tooLarge Module std.experimental.allocator.building_blocks.free_list Parent FreeList tooLarge(n) bool tooLarge( size_t n )"
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/FreeList/Functions/tooSmall.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/FreeList/Functions/tooSmall.html",
    "title": "Overloads for - tooSmall | Marmos Demo",
    "keywords": "Overloads for - tooSmall Module std.experimental.allocator.building_blocks.free_list Parent FreeList tooSmall(n) bool tooSmall( size_t n )"
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/FreeList/Functions/updateStats.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/FreeList/Functions/updateStats.html",
    "title": "Overloads for - updateStats | Marmos Demo",
    "keywords": "Overloads for - updateStats Module std.experimental.allocator.building_blocks.free_list Parent FreeList updateStats() void updateStats( )"
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/Overview.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/Overview.html",
    "title": "Module - std.experimental.allocator.building_blocks.free_list | Marmos Demo",
    "keywords": "Module - std.experimental.allocator.building_blocks.free_list About Source: $(PHOBOSSRC std/experimental/allocator/building_blocks/free_list.d) Structs Name Description ContiguousFreeList Free list built on top of exactly one contiguous block of memory. The block is assumed to have been allocated with ParentAllocator , and is released in ContiguousFreeList 's destructor (unless ParentAllocator is $(D NullAllocator)). FreeList $(HTTP en.wikipedia.org/wiki/Free_list, Free list allocator), stackable on top of another allocator. Allocation requests between min and max bytes are rounded up to max and served from a singly-linked list of buffers deallocated in the past. All other allocations are directed to $(D ParentAllocator). Due to the simplicity of free list management, allocations from the free list are fast. If adaptive is set to Yes.adaptive , the free list gradually reduces its size if allocations tend to use the parent allocator much more than the lists' available nodes. SharedFreeList FreeList shared across threads. Allocation and deallocation are lock-free. The parameters have the same semantics as for FreeList ."
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/SharedFreeList/Functions/allocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/SharedFreeList/Functions/allocate.html",
    "title": "Overloads for - allocate | Marmos Demo",
    "keywords": "Overloads for - allocate Module std.experimental.allocator.building_blocks.free_list Parent SharedFreeList allocate(bytes) <bug: unknown> allocate( size_t bytes ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/SharedFreeList/Functions/allocateFresh.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/SharedFreeList/Functions/allocateFresh.html",
    "title": "Overloads for - allocateFresh | Marmos Demo",
    "keywords": "Overloads for - allocateFresh Module std.experimental.allocator.building_blocks.free_list Parent SharedFreeList allocateFresh(bytes) <bug: unknown> allocateFresh( size_t bytes )"
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/SharedFreeList/Functions/approxMaxLength.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/SharedFreeList/Functions/approxMaxLength.html",
    "title": "Overloads for - approxMaxLength | Marmos Demo",
    "keywords": "Overloads for - approxMaxLength Module std.experimental.allocator.building_blocks.free_list Parent SharedFreeList approxMaxLength() size_t approxMaxLength( ) Properties for getting (and possibly setting) the approximate maximum length of a shared freelist. approxMaxLength(x) void approxMaxLength( size_t x ) ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/SharedFreeList/Functions/deallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/SharedFreeList/Functions/deallocate.html",
    "title": "Overloads for - deallocate | Marmos Demo",
    "keywords": "Overloads for - deallocate Module std.experimental.allocator.building_blocks.free_list Parent SharedFreeList deallocate(b) bool deallocate( <bug: unknown> b ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/SharedFreeList/Functions/deallocateAll.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/SharedFreeList/Functions/deallocateAll.html",
    "title": "Overloads for - deallocateAll | Marmos Demo",
    "keywords": "Overloads for - deallocateAll Module std.experimental.allocator.building_blocks.free_list Parent SharedFreeList deallocateAll() bool deallocateAll( ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/SharedFreeList/Functions/decNodes.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/SharedFreeList/Functions/decNodes.html",
    "title": "Overloads for - decNodes | Marmos Demo",
    "keywords": "Overloads for - decNodes Module std.experimental.allocator.building_blocks.free_list Parent SharedFreeList decNodes() void decNodes( )"
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/SharedFreeList/Functions/freeListEligible.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/SharedFreeList/Functions/freeListEligible.html",
    "title": "Overloads for - freeListEligible | Marmos Demo",
    "keywords": "Overloads for - freeListEligible Module std.experimental.allocator.building_blocks.free_list Parent SharedFreeList freeListEligible(n) bool freeListEligible( size_t n )"
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/SharedFreeList/Functions/goodAllocSize.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/SharedFreeList/Functions/goodAllocSize.html",
    "title": "Overloads for - goodAllocSize | Marmos Demo",
    "keywords": "Overloads for - goodAllocSize Module std.experimental.allocator.building_blocks.free_list Parent SharedFreeList goodAllocSize(bytes) size_t goodAllocSize( size_t bytes ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/SharedFreeList/Functions/incNodes.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/SharedFreeList/Functions/incNodes.html",
    "title": "Overloads for - incNodes | Marmos Demo",
    "keywords": "Overloads for - incNodes Module std.experimental.allocator.building_blocks.free_list Parent SharedFreeList incNodes() void incNodes( )"
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/SharedFreeList/Functions/max.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/SharedFreeList/Functions/max.html",
    "title": "Overloads for - max | Marmos Demo",
    "keywords": "Overloads for - max Module std.experimental.allocator.building_blocks.free_list Parent SharedFreeList max() size_t max( ) Ditto max(newMaxSize) void max( size_t newMaxSize ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/SharedFreeList/Functions/min.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/SharedFreeList/Functions/min.html",
    "title": "Overloads for - min | Marmos Demo",
    "keywords": "Overloads for - min Module std.experimental.allocator.building_blocks.free_list Parent SharedFreeList min() size_t min( ) Properties for getting (and possibly setting) the bounds. Setting bounds is allowed only once , and before any allocation takes place. Otherwise, the primitives have the same semantics as those of FreeList . min(newMinSize) void min( size_t newMinSize ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/SharedFreeList/Functions/minimize.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/SharedFreeList/Functions/minimize.html",
    "title": "Overloads for - minimize | Marmos Demo",
    "keywords": "Overloads for - minimize Module std.experimental.allocator.building_blocks.free_list Parent SharedFreeList minimize() void minimize( ) Nonstandard function that minimizes the memory usage of the freelist by freeing each element in turn. Defined only if ParentAllocator defines deallocate ."
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/SharedFreeList/Functions/nodesFull.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/SharedFreeList/Functions/nodesFull.html",
    "title": "Overloads for - nodesFull | Marmos Demo",
    "keywords": "Overloads for - nodesFull Module std.experimental.allocator.building_blocks.free_list Parent SharedFreeList nodesFull() bool nodesFull( )"
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/SharedFreeList/Functions/owns.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/SharedFreeList/Functions/owns.html",
    "title": "Overloads for - owns | Marmos Demo",
    "keywords": "Overloads for - owns Module std.experimental.allocator.building_blocks.free_list Parent SharedFreeList owns(b) Ternary owns( <bug: unknown> b ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/SharedFreeList/Functions/reallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/SharedFreeList/Functions/reallocate.html",
    "title": "Overloads for - reallocate | Marmos Demo",
    "keywords": "Overloads for - reallocate Module std.experimental.allocator.building_blocks.free_list Parent SharedFreeList reallocate(b, s) bool reallocate( <bug: unknown> b, size_t s ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/SharedFreeList/Functions/resetNodes.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/SharedFreeList/Functions/resetNodes.html",
    "title": "Overloads for - resetNodes | Marmos Demo",
    "keywords": "Overloads for - resetNodes Module std.experimental.allocator.building_blocks.free_list Parent SharedFreeList resetNodes() void resetNodes( )"
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/SharedFreeList/Functions/setBounds.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/SharedFreeList/Functions/setBounds.html",
    "title": "Overloads for - setBounds | Marmos Demo",
    "keywords": "Overloads for - setBounds Module std.experimental.allocator.building_blocks.free_list Parent SharedFreeList setBounds(newMin, newMax) void setBounds( size_t newMin, size_t newMax ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/SharedFreeList/Functions/tooLarge.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/SharedFreeList/Functions/tooLarge.html",
    "title": "Overloads for - tooLarge | Marmos Demo",
    "keywords": "Overloads for - tooLarge Module std.experimental.allocator.building_blocks.free_list Parent SharedFreeList tooLarge(n) bool tooLarge( size_t n )"
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/SharedFreeList/Functions/tooSmall.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/SharedFreeList/Functions/tooSmall.html",
    "title": "Overloads for - tooSmall | Marmos Demo",
    "keywords": "Overloads for - tooSmall Module std.experimental.allocator.building_blocks.free_list Parent SharedFreeList tooSmall(n) bool tooSmall( size_t n )"
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/Structs/ContiguousFreeList.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/Structs/ContiguousFreeList.html",
    "title": "Struct - ContiguousFreeList | Marmos Demo",
    "keywords": "Struct - ContiguousFreeList Module std.experimental.allocator.building_blocks.free_list public struct ContiguousFreeList { // alias Impl = <todo: marmos support pending>; // alias Node = <todo: marmos support pending>; // alias SParent = <todo: marmos support pending>; // Allocate `n` bytes of memory. If `n` is eligible for freelist and the freelist is not empty, pops the memory off the free list. In all other cases, uses the parent allocator. <bug: unknown> allocate( size_t n ) ; // Deallocates `b` . If it's of eligible size, it's put on the free list. Otherwise, it's returned to `parent` . bool deallocate( <bug: unknown> b ) ; // Deallocates everything from the parent. bool deallocateAll( ) ; // Returns `Ternary.yes` if no memory is currently allocated with this allocator, `Ternary.no` otherwise. This method never returns `Ternary.unknown` . Ternary empty( ) ; // If `n` is eligible for freelisting, returns `max` . Otherwise, returns `parent.goodAllocSize(n)` . size_t goodAllocSize( size_t n ) ; // void initialize( <bug: unknown> buffer, size_t itemSize ) ; // Defined if `ParentAllocator` defines it. Checks whether the block belongs to this allocator. Ternary owns( <bug: unknown> b ) ; // Alignment offered. uint alignment; // size_t allocated; // FreeList!(NullAllocatorminSizemaxSize) fl; // The parent allocator. Depending on whether `ParentAllocator` holds state or not, this is a member variable or an alias for `ParentAllocator.instance` . SParent parent; // <bug: unknown> support; // __enumMember unchecked; } About Free list built on top of exactly one contiguous block of memory. The block is assumed to have been allocated with ParentAllocator , and is released in ContiguousFreeList 's destructor (unless ParentAllocator is $(D NullAllocator)). ContiguousFreeList has most advantages of FreeList but fewer disadvantages. It has better cache locality because items are closer to one another. It imposes less fragmentation on its parent allocator. The disadvantages of ContiguousFreeList over FreeList are its pay upfront model (as opposed to FreeList 's pay-as-you-go approach), and a hard limit on the number of nodes in the list. Thus, a large number of long- lived objects may occupy the entire block, making it unavailable for serving allocations from the free list. However, an absolute cap on the free list size may be beneficial. The options $(D minSize == unbounded) and $(D maxSize == unbounded) are not available for ContiguousFreeList . Aliases Name Description Impl Node SParent Functions Name Description allocate Allocate n bytes of memory. If n is eligible for freelist and the freelist is not empty, pops the memory off the free list. In all other cases, uses the parent allocator. deallocate Deallocates b . If it's of eligible size, it's put on the free list. Otherwise, it's returned to parent . deallocateAll Deallocates everything from the parent. empty Returns Ternary.yes if no memory is currently allocated with this allocator, Ternary.no otherwise. This method never returns Ternary.unknown . goodAllocSize If n is eligible for freelisting, returns max . Otherwise, returns parent.goodAllocSize(n) . initialize owns Defined if ParentAllocator defines it. Checks whether the block belongs to this allocator. Variables Name Description alignment Alignment offered. allocated fl parent The parent allocator. Depending on whether ParentAllocator holds state or not, this is a member variable or an alias for ParentAllocator.instance . support unchecked"
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/Structs/FreeList.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/Structs/FreeList.html",
    "title": "Struct - FreeList | Marmos Demo",
    "keywords": "Struct - FreeList Module std.experimental.allocator.building_blocks.free_list public struct FreeList { // Alignment offered. alias alignment = <todo: marmos support pending>; // Allocates memory either off of the free list or from the parent allocator. If `n` is within $(D [min, max]) or if the free list is unchecked ($(D minSize == 0 && maxSize == size_t.max)), then the free list is consulted first. If not empty (hit), the block at the front of the free list is removed from the list and returned. Otherwise (miss), a new block of `max` bytes is allocated, truncated to `n` bytes, and returned. <bug: unknown> allocate( size_t n ) ; // <bug: unknown> blockFor( <bug: unknown> p ) ; // If `block.length` is within $(D [min, max]) or if the free list is unchecked ($(D minSize == 0 && maxSize == size_t.max)), then inserts the block at the front of the free list. For all others, forwards to $(D parent.deallocate) if `Parent.deallocate` is defined. bool deallocate( <bug: unknown> block ) ; // Defined only if `ParentAllocator` defines `deallocateAll` . If so, forwards to it and resets the freelist. bool deallocateAll( ) ; // bool freeListEligible( size_t n ) ; // If $(D maxSize == unbounded), returns `parent.goodAllocSize(bytes)` . Otherwise, returns `max` for sizes in the interval $(D [min, max]), and `parent.goodAllocSize(bytes)` otherwise. size_t goodAllocSize( size_t bytes ) ; // Returns the largest allocation size eligible for allocation from the freelist. (If $(D maxSize != chooseAtRuntime), this is simply an alias for `maxSize` .) All allocation requests for sizes greater than or equal to `min` and less than or equal to `max` are rounded to $(D max) and forwarded to the parent allocator. When the block fitting the same constraint gets deallocated, it is put in the freelist with the allocated size assumed to be `max` . size_t max( ) ; // If `FreeList` has been instantiated with $(D maxSize == chooseAtRuntime), then the `max` property is writable. Setting it must precede any allocation. void max( size_t high ) ; // Returns the smallest allocation size eligible for allocation from the freelist. (If $(D minSize != chooseAtRuntime), this is simply an alias for `minSize` .) size_t min( ) ; // If `FreeList` has been instantiated with $(D minSize == chooseAtRuntime), then the `min` property is writable. Setting it must precede any allocation. void min( size_t low ) ; // Nonstandard function that minimizes the memory usage of the freelist by freeing each element in turn. Defined only if `ParentAllocator` defines `deallocate` . $(D FreeList!(0, unbounded)) does not have this function. void minimize( ) ; // bool tooLarge( size_t n ) ; // bool tooSmall( size_t n ) ; // void updateStats( ) ; // uint accumMisses; // uint accumSamples; // __enumMember hasTolerance; // The parent allocator. Depending on whether `ParentAllocator` holds state or not, this is a member variable or an alias for `ParentAllocator.instance` . ParentAllocator parent; // double probMiss; // <bug: unknown> root; // double tooFewMisses; // __enumMember unchecked; // double windowLength; } About $(HTTP en.wikipedia.org/wiki/Free_list, Free list allocator), stackable on top of another allocator. Allocation requests between min and max bytes are rounded up to max and served from a singly-linked list of buffers deallocated in the past. All other allocations are directed to $(D ParentAllocator). Due to the simplicity of free list management, allocations from the free list are fast. If adaptive is set to Yes.adaptive , the free list gradually reduces its size if allocations tend to use the parent allocator much more than the lists' available nodes. One instantiation is of particular interest: $(D FreeList!(0, unbounded)) puts every deallocation in the freelist, and subsequently serves any allocation from the freelist (if not empty). There is no checking of size matching, which would be incorrect for a freestanding allocator but is both correct and fast when an owning allocator on top of the free list allocator (such as Segregator ) is already in charge of handling size checking. The following methods are defined if ParentAllocator defines them, and forward to it: expand , owns , reallocate . Aliases Name Description alignment Alignment offered. Functions Name Description allocate Allocates memory either off of the free list or from the parent allocator. If n is within \\((D [min, max]) or if the free list is unchecked (\\)(D minSize == 0 && maxSize == size_t.max)), then the free list is consulted first. If not empty (hit), the block at the front of the free list is removed from the list and returned. Otherwise (miss), a new block of max bytes is allocated, truncated to n bytes, and returned. blockFor deallocate If block.length is within \\((D [min, max]) or if the free list is unchecked (\\)(D minSize == 0 && maxSize == size_t.max)), then inserts the block at the front of the free list. For all others, forwards to $(D parent.deallocate) if Parent.deallocate is defined. deallocateAll Defined only if ParentAllocator defines deallocateAll . If so, forwards to it and resets the freelist. freeListEligible goodAllocSize If $(D maxSize == unbounded), returns parent.goodAllocSize(bytes) . Otherwise, returns max for sizes in the interval $(D [min, max]), and parent.goodAllocSize(bytes) otherwise. max Returns the largest allocation size eligible for allocation from the freelist. (If $(D maxSize != chooseAtRuntime), this is simply an alias for maxSize .) All allocation requests for sizes greater than or equal to min and less than or equal to max are rounded to $(D max) and forwarded to the parent allocator. When the block fitting the same constraint gets deallocated, it is put in the freelist with the allocated size assumed to be max . min Returns the smallest allocation size eligible for allocation from the freelist. (If $(D minSize != chooseAtRuntime), this is simply an alias for minSize .) minimize Nonstandard function that minimizes the memory usage of the freelist by freeing each element in turn. Defined only if ParentAllocator defines deallocate . $(D FreeList!(0, unbounded)) does not have this function. tooLarge tooSmall updateStats Variables Name Description accumMisses accumSamples hasTolerance parent The parent allocator. Depending on whether ParentAllocator holds state or not, this is a member variable or an alias for ParentAllocator.instance . probMiss root tooFewMisses unchecked windowLength"
  },
  "phobos/std/experimental/allocator/building_blocks/free_list/Structs/SharedFreeList.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_list/Structs/SharedFreeList.html",
    "title": "Struct - SharedFreeList | Marmos Demo",
    "keywords": "Struct - SharedFreeList Module std.experimental.allocator.building_blocks.free_list public struct SharedFreeList { // alias approxMaxLength = <todo: marmos support pending>; // alias max = <todo: marmos support pending>; // alias min = <todo: marmos support pending>; // Ditto <bug: unknown> allocate( size_t bytes ) ; // <bug: unknown> allocateFresh( size_t bytes ) ; // Properties for getting (and possibly setting) the approximate maximum length of a shared freelist. size_t approxMaxLength( ) ; // ditto void approxMaxLength( size_t x ) ; // Ditto bool deallocate( <bug: unknown> b ) ; // Ditto bool deallocateAll( ) ; // void decNodes( ) ; // bool freeListEligible( size_t n ) ; // Ditto size_t goodAllocSize( size_t bytes ) ; // void incNodes( ) ; // Ditto size_t max( ) ; // Ditto void max( size_t newMaxSize ) ; // Properties for getting (and possibly setting) the bounds. Setting bounds is allowed only once , and before any allocation takes place. Otherwise, the primitives have the same semantics as those of `FreeList` . size_t min( ) ; // Ditto void min( size_t newMinSize ) ; // Nonstandard function that minimizes the memory usage of the freelist by freeing each element in turn. Defined only if `ParentAllocator` defines `deallocate` . void minimize( ) ; // bool nodesFull( ) ; // Ditto Ternary owns( <bug: unknown> b ) ; // Ditto bool reallocate( <bug: unknown> b, size_t s ) ; // void resetNodes( ) ; // Ditto void setBounds( size_t newMin, size_t newMax ) ; // bool tooLarge( size_t n ) ; // bool tooSmall( size_t n ) ; // Standard primitives. uint alignment; // SpinLock lock; // shared size_t nodes; // The parent allocator. Depending on whether `ParentAllocator` holds state or not, this is a member variable or an alias for `ParentAllocator.instance` . shared ParentAllocator parent; // __enumMember unchecked; } About FreeList shared across threads. Allocation and deallocation are lock-free. The parameters have the same semantics as for FreeList . expand is defined to forward to ParentAllocator.expand (it must be also shared ). Aliases Name Description approxMaxLength max min Functions Name Description allocate Ditto allocateFresh approxMaxLength Properties for getting (and possibly setting) the approximate maximum length of a shared freelist. deallocate Ditto deallocateAll Ditto decNodes freeListEligible goodAllocSize Ditto incNodes max Ditto min Properties for getting (and possibly setting) the bounds. Setting bounds is allowed only once , and before any allocation takes place. Otherwise, the primitives have the same semantics as those of FreeList . minimize Nonstandard function that minimizes the memory usage of the freelist by freeing each element in turn. Defined only if ParentAllocator defines deallocate . nodesFull owns Ditto reallocate Ditto resetNodes setBounds Ditto tooLarge tooSmall Variables Name Description alignment Standard primitives. lock nodes parent The parent allocator. Depending on whether ParentAllocator holds state or not, this is a member variable or an alias for ParentAllocator.instance . unchecked"
  },
  "phobos/std/experimental/allocator/building_blocks/free_tree/FreeTree/Functions/allocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_tree/FreeTree/Functions/allocate.html",
    "title": "Overloads for - allocate | Marmos Demo",
    "keywords": "Overloads for - allocate Module std.experimental.allocator.building_blocks.free_tree Parent FreeTree allocate(n) <bug: unknown> allocate( size_t n ) Allocates n bytes of memory. First consults the free tree, and returns from it if a suitably sized block is found. Otherwise, the parent allocator is tried. If allocation from the parent succeeds, the allocated block is returned. Otherwise, the free tree tries an alternate strategy: If $(D ParentAllocator) defines deallocate , FreeTree releases all of its contents and tries again. TODO: Splitting and coalescing should be implemented if ParentAllocator does not defined deallocate ."
  },
  "phobos/std/experimental/allocator/building_blocks/free_tree/FreeTree/Functions/assertValid.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_tree/FreeTree/Functions/assertValid.html",
    "title": "Overloads for - assertValid | Marmos Demo",
    "keywords": "Overloads for - assertValid Module std.experimental.allocator.building_blocks.free_tree Parent FreeTree assertValid() void assertValid( )"
  },
  "phobos/std/experimental/allocator/building_blocks/free_tree/FreeTree/Functions/clear.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_tree/FreeTree/Functions/clear.html",
    "title": "Overloads for - clear | Marmos Demo",
    "keywords": "Overloads for - clear Module std.experimental.allocator.building_blocks.free_tree Parent FreeTree clear() void clear( ) Defined if ParentAllocator.deallocate exists, and returns to it all memory held in the free tree."
  },
  "phobos/std/experimental/allocator/building_blocks/free_tree/FreeTree/Functions/deallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_tree/FreeTree/Functions/deallocate.html",
    "title": "Overloads for - deallocate | Marmos Demo",
    "keywords": "Overloads for - deallocate Module std.experimental.allocator.building_blocks.free_tree Parent FreeTree deallocate(b) bool deallocate( <bug: unknown> b ) Places b into the free tree."
  },
  "phobos/std/experimental/allocator/building_blocks/free_tree/FreeTree/Functions/deallocateAll.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_tree/FreeTree/Functions/deallocateAll.html",
    "title": "Overloads for - deallocateAll | Marmos Demo",
    "keywords": "Overloads for - deallocateAll Module std.experimental.allocator.building_blocks.free_tree Parent FreeTree deallocateAll() bool deallocateAll( ) Defined if ParentAllocator.deallocateAll exists, and forwards to it. Also nullifies the free tree (it's assumed the parent frees all memory stil managed by the free tree)."
  },
  "phobos/std/experimental/allocator/building_blocks/free_tree/FreeTree/Functions/dump.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_tree/FreeTree/Functions/dump.html",
    "title": "Overloads for - dump | Marmos Demo",
    "keywords": "Overloads for - dump Module std.experimental.allocator.building_blocks.free_tree Parent FreeTree dump() void dump( )"
  },
  "phobos/std/experimental/allocator/building_blocks/free_tree/FreeTree/Functions/findAndRemove.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_tree/FreeTree/Functions/findAndRemove.html",
    "title": "Overloads for - findAndRemove | Marmos Demo",
    "keywords": "Overloads for - findAndRemove Module std.experimental.allocator.building_blocks.free_tree Parent FreeTree findAndRemove(n, s) <bug: unknown> findAndRemove( <bug: unknown> n, size_t s )"
  },
  "phobos/std/experimental/allocator/building_blocks/free_tree/FreeTree/Functions/formatSizes.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_tree/FreeTree/Functions/formatSizes.html",
    "title": "Overloads for - formatSizes | Marmos Demo",
    "keywords": "Overloads for - formatSizes Module std.experimental.allocator.building_blocks.free_tree Parent FreeTree formatSizes() string formatSizes( )"
  },
  "phobos/std/experimental/allocator/building_blocks/free_tree/FreeTree/Functions/goodAllocSize.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_tree/FreeTree/Functions/goodAllocSize.html",
    "title": "Overloads for - goodAllocSize | Marmos Demo",
    "keywords": "Overloads for - goodAllocSize Module std.experimental.allocator.building_blocks.free_tree Parent FreeTree goodAllocSize(s) size_t goodAllocSize( size_t s ) Returns $(D parent.goodAllocSize(max(Node.sizeof, s)))."
  },
  "phobos/std/experimental/allocator/building_blocks/free_tree/FreeTree/Functions/insertAsRoot.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_tree/FreeTree/Functions/insertAsRoot.html",
    "title": "Overloads for - insertAsRoot | Marmos Demo",
    "keywords": "Overloads for - insertAsRoot Module std.experimental.allocator.building_blocks.free_tree Parent FreeTree insertAsRoot(which) void insertAsRoot( <bug: unknown> which )"
  },
  "phobos/std/experimental/allocator/building_blocks/free_tree/FreeTree/Functions/remove.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_tree/FreeTree/Functions/remove.html",
    "title": "Overloads for - remove | Marmos Demo",
    "keywords": "Overloads for - remove Module std.experimental.allocator.building_blocks.free_tree Parent FreeTree remove(which) <bug: unknown> remove( <bug: unknown> which )"
  },
  "phobos/std/experimental/allocator/building_blocks/free_tree/FreeTree/Functions/rotate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_tree/FreeTree/Functions/rotate.html",
    "title": "Overloads for - rotate | Marmos Demo",
    "keywords": "Overloads for - rotate Module std.experimental.allocator.building_blocks.free_tree Parent FreeTree rotate(parent, toRight) void rotate( <bug: unknown> parent, bool toRight ) static"
  },
  "phobos/std/experimental/allocator/building_blocks/free_tree/Overview.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_tree/Overview.html",
    "title": "Module - std.experimental.allocator.building_blocks.free_tree | Marmos Demo",
    "keywords": "Module - std.experimental.allocator.building_blocks.free_tree About Source: $(PHOBOSSRC std/experimental/allocator/building_blocks/_free_tree.d) Structs Name Description FreeTree The Free Tree allocator, stackable on top of any other allocator, bears similarity with the free list allocator. Instead of a singly-linked list of previously freed blocks, it maintains a binary search tree. This allows the Free Tree allocator to manage blocks of arbitrary lengths and search them efficiently."
  },
  "phobos/std/experimental/allocator/building_blocks/free_tree/Structs/FreeTree.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/free_tree/Structs/FreeTree.html",
    "title": "Struct - FreeTree | Marmos Demo",
    "keywords": "Struct - FreeTree Module std.experimental.allocator.building_blocks.free_tree public struct FreeTree { // Allocates `n` bytes of memory. First consults the free tree, and returns from it if a suitably sized block is found. Otherwise, the parent allocator is tried. If allocation from the parent succeeds, the allocated block is returned. Otherwise, the free tree tries an alternate strategy: If $(D ParentAllocator) defines `deallocate` , `FreeTree` releases all of its contents and tries again. <bug: unknown> allocate( size_t n ) ; // void assertValid( ) ; // Defined if `ParentAllocator.deallocate` exists, and returns to it all memory held in the free tree. void clear( ) ; // Places `b` into the free tree. bool deallocate( <bug: unknown> b ) ; // Defined if `ParentAllocator.deallocateAll` exists, and forwards to it. Also nullifies the free tree (it's assumed the parent frees all memory stil managed by the free tree). bool deallocateAll( ) ; // void dump( ) ; // <bug: unknown> findAndRemove( <bug: unknown> n, size_t s ) ; // string formatSizes( ) ; // Returns $(D parent.goodAllocSize(max(Node.sizeof, s))). size_t goodAllocSize( size_t s ) ; // void insertAsRoot( <bug: unknown> which ) ; // <bug: unknown> remove( <bug: unknown> which ) ; // void rotate( <bug: unknown> parent, bool toRight ) static; // The `FreeTree` is word aligned. uint alignment; // ParentAllocator parent; // <bug: unknown> root; } About The Free Tree allocator, stackable on top of any other allocator, bears similarity with the free list allocator. Instead of a singly-linked list of previously freed blocks, it maintains a binary search tree. This allows the Free Tree allocator to manage blocks of arbitrary lengths and search them efficiently. Common uses of `FreeTree` include $(UL $(LI Adding deallocate capability to an allocator that lacks it (such as simple regions).) $(LI Getting the benefits of multiple adaptable freelists that do not need to be tuned for one specific size but insted automatically adapts itself to frequently used sizes.) ) The free tree has special handling of duplicates (a singly-linked list per node) in anticipation of large number of duplicates. Allocation time from the free tree is expected to be $(BIGOH log n) where n is the number of distinct sizes (not total nodes) kept in the free tree. Allocation requests first search the tree for a buffer of suitable size deallocated in the past. If a match is found, the node is removed from the tree and the memory is returned. Otherwise, the allocation is directed to $(D ParentAllocator). If at this point ParentAllocator also fails to allocate, FreeTree frees everything and then tries the parent allocator again. Upon deallocation, the deallocated block is inserted in the internally maintained free tree (not returned to the parent). The free tree is not kept balanced. Instead, it has a last-in-first-out flavor because newly inserted blocks are rotated to the root of the tree. That way allocations are cache friendly and also frequently used sizes are more likely to be found quickly, whereas seldom used sizes migrate to the leaves of the tree. FreeTree rounds up small allocations to at least $(D 4 size_t.sizeof), which on 64-bit system is one cache line size. If very small objects need to be efficiently allocated, the FreeTree should be fronted with an appropriate small object allocator. The following methods are defined if ParentAllocator defines them, and forward to it: allocateAll , expand , owns , reallocate . Functions Name Description allocate Allocates n bytes of memory. First consults the free tree, and returns from it if a suitably sized block is found. Otherwise, the parent allocator is tried. If allocation from the parent succeeds, the allocated block is returned. Otherwise, the free tree tries an alternate strategy: If $(D ParentAllocator) defines deallocate , FreeTree releases all of its contents and tries again. assertValid clear Defined if ParentAllocator.deallocate exists, and returns to it all memory held in the free tree. deallocate Places b into the free tree. deallocateAll Defined if ParentAllocator.deallocateAll exists, and forwards to it. Also nullifies the free tree (it's assumed the parent frees all memory stil managed by the free tree). dump findAndRemove formatSizes goodAllocSize Returns $(D parent.goodAllocSize(max(Node.sizeof, s))). insertAsRoot remove rotate Variables Name Description alignment The FreeTree is word aligned. parent root"
  },
  "phobos/std/experimental/allocator/building_blocks/kernighan_ritchie/KRRegion/Functions/allocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/kernighan_ritchie/KRRegion/Functions/allocate.html",
    "title": "Overloads for - allocate | Marmos Demo",
    "keywords": "Overloads for - allocate Module std.experimental.allocator.building_blocks.kernighan_ritchie Parent KRRegion allocate(n) <bug: unknown> allocate( size_t n ) Allocates n bytes. Allocation searches the list of available blocks until a free block with n or more bytes is found (first fit strategy). The block is split (if larger) and returned. Params: n = number of bytes to allocate Returns: A word-aligned buffer of n bytes, or null ."
  },
  "phobos/std/experimental/allocator/building_blocks/kernighan_ritchie/KRRegion/Functions/allocateAll.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/kernighan_ritchie/KRRegion/Functions/allocateAll.html",
    "title": "Overloads for - allocateAll | Marmos Demo",
    "keywords": "Overloads for - allocateAll Module std.experimental.allocator.building_blocks.kernighan_ritchie Parent KRRegion allocateAll() <bug: unknown> allocateAll( ) Allocates all memory available to this allocator. If the allocator is empty, returns the entire available block of memory. Otherwise, it still performs a best-effort allocation: if there is no fragmentation (e.g. allocate has been used but not deallocate ), allocates and returns the only available block of memory. The operation takes time proportional to the number of adjacent free blocks at the front of the free list. These blocks get coalesced, whether allocateAll succeeds or fails due to fragmentation."
  },
  "phobos/std/experimental/allocator/building_blocks/kernighan_ritchie/KRRegion/Functions/assertValid.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/kernighan_ritchie/KRRegion/Functions/assertValid.html",
    "title": "Overloads for - assertValid | Marmos Demo",
    "keywords": "Overloads for - assertValid Module std.experimental.allocator.building_blocks.kernighan_ritchie Parent KRRegion assertValid(s) void assertValid( string s )"
  },
  "phobos/std/experimental/allocator/building_blocks/kernighan_ritchie/KRRegion/Functions/byNodePtr.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/kernighan_ritchie/KRRegion/Functions/byNodePtr.html",
    "title": "Overloads for - byNodePtr | Marmos Demo",
    "keywords": "Overloads for - byNodePtr Module std.experimental.allocator.building_blocks.kernighan_ritchie Parent KRRegion byNodePtr() <bug: unknown> byNodePtr( ) auto"
  },
  "phobos/std/experimental/allocator/building_blocks/kernighan_ritchie/KRRegion/Functions/cancelRegionMode.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/kernighan_ritchie/KRRegion/Functions/cancelRegionMode.html",
    "title": "Overloads for - cancelRegionMode | Marmos Demo",
    "keywords": "Overloads for - cancelRegionMode Module std.experimental.allocator.building_blocks.kernighan_ritchie Parent KRRegion cancelRegionMode() void cancelRegionMode( )"
  },
  "phobos/std/experimental/allocator/building_blocks/kernighan_ritchie/KRRegion/Functions/coalesceAndMakeCircular.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/kernighan_ritchie/KRRegion/Functions/coalesceAndMakeCircular.html",
    "title": "Overloads for - coalesceAndMakeCircular | Marmos Demo",
    "keywords": "Overloads for - coalesceAndMakeCircular Module std.experimental.allocator.building_blocks.kernighan_ritchie Parent KRRegion coalesceAndMakeCircular() void coalesceAndMakeCircular( )"
  },
  "phobos/std/experimental/allocator/building_blocks/kernighan_ritchie/KRRegion/Functions/deallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/kernighan_ritchie/KRRegion/Functions/deallocate.html",
    "title": "Overloads for - deallocate | Marmos Demo",
    "keywords": "Overloads for - deallocate Module std.experimental.allocator.building_blocks.kernighan_ritchie Parent KRRegion deallocate(b) bool deallocate( <bug: unknown> b ) Deallocates b , which is assumed to have been previously allocated with this allocator. Deallocation performs a linear search in the free list to preserve its sorting order. It follows that blocks with higher addresses in allocators with many free blocks are slower to deallocate. Params: b = block to be deallocated"
  },
  "phobos/std/experimental/allocator/building_blocks/kernighan_ritchie/KRRegion/Functions/deallocateAll.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/kernighan_ritchie/KRRegion/Functions/deallocateAll.html",
    "title": "Overloads for - deallocateAll | Marmos Demo",
    "keywords": "Overloads for - deallocateAll Module std.experimental.allocator.building_blocks.kernighan_ritchie Parent KRRegion deallocateAll() bool deallocateAll( ) Deallocates all memory currently allocated, making the allocator ready for other allocations. This is a $(BIGOH 1) operation."
  },
  "phobos/std/experimental/allocator/building_blocks/kernighan_ritchie/KRRegion/Functions/empty.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/kernighan_ritchie/KRRegion/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.experimental.allocator.building_blocks.kernighan_ritchie Parent KRRegion empty() Ternary empty( ) Returns: Ternary.yes if the allocator is empty, Ternary.no otherwise. Never returns Ternary.unknown ."
  },
  "phobos/std/experimental/allocator/building_blocks/kernighan_ritchie/KRRegion/Functions/goodAllocSize.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/kernighan_ritchie/KRRegion/Functions/goodAllocSize.html",
    "title": "Overloads for - goodAllocSize | Marmos Demo",
    "keywords": "Overloads for - goodAllocSize Module std.experimental.allocator.building_blocks.kernighan_ritchie Parent KRRegion goodAllocSize(n) size_t goodAllocSize( size_t n ) static Adjusts n to a size suitable for allocation (two words or larger, word-aligned)."
  },
  "phobos/std/experimental/allocator/building_blocks/kernighan_ritchie/KRRegion/Functions/merge.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/kernighan_ritchie/KRRegion/Functions/merge.html",
    "title": "Overloads for - merge | Marmos Demo",
    "keywords": "Overloads for - merge Module std.experimental.allocator.building_blocks.kernighan_ritchie Parent KRRegion merge(left, right) <bug: unknown> merge( <bug: unknown> left, <bug: unknown> right )"
  },
  "phobos/std/experimental/allocator/building_blocks/kernighan_ritchie/KRRegion/Functions/owns.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/kernighan_ritchie/KRRegion/Functions/owns.html",
    "title": "Overloads for - owns | Marmos Demo",
    "keywords": "Overloads for - owns Module std.experimental.allocator.building_blocks.kernighan_ritchie Parent KRRegion owns(b) Ternary owns( <bug: unknown> b ) Checks whether the allocator is responsible for the allocation of b . It does a simple $(BIGOH 1) range check. b should be a buffer either allocated with this or obtained through other means."
  },
  "phobos/std/experimental/allocator/building_blocks/kernighan_ritchie/KRRegion/Functions/regionMode.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/kernighan_ritchie/KRRegion/Functions/regionMode.html",
    "title": "Overloads for - regionMode | Marmos Demo",
    "keywords": "Overloads for - regionMode Module std.experimental.allocator.building_blocks.kernighan_ritchie Parent KRRegion regionMode() bool regionMode( )"
  },
  "phobos/std/experimental/allocator/building_blocks/kernighan_ritchie/KRRegion/Functions/sortFreelist.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/kernighan_ritchie/KRRegion/Functions/sortFreelist.html",
    "title": "Overloads for - sortFreelist | Marmos Demo",
    "keywords": "Overloads for - sortFreelist Module std.experimental.allocator.building_blocks.kernighan_ritchie Parent KRRegion sortFreelist(root) <bug: unknown> sortFreelist( <bug: unknown> root )"
  },
  "phobos/std/experimental/allocator/building_blocks/kernighan_ritchie/KRRegion/Functions/switchToFreeList.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/kernighan_ritchie/KRRegion/Functions/switchToFreeList.html",
    "title": "Overloads for - switchToFreeList | Marmos Demo",
    "keywords": "Overloads for - switchToFreeList Module std.experimental.allocator.building_blocks.kernighan_ritchie Parent KRRegion switchToFreeList() void switchToFreeList( ) Forces free list mode. If already in free list mode, does nothing. Otherwise, sorts the free list accumulated so far and switches strategy for future allocations to KR style."
  },
  "phobos/std/experimental/allocator/building_blocks/kernighan_ritchie/KRRegion/Functions/toString.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/kernighan_ritchie/KRRegion/Functions/toString.html",
    "title": "Overloads for - toString | Marmos Demo",
    "keywords": "Overloads for - toString Module std.experimental.allocator.building_blocks.kernighan_ritchie Parent KRRegion toString() string toString( )"
  },
  "phobos/std/experimental/allocator/building_blocks/kernighan_ritchie/Overview.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/kernighan_ritchie/Overview.html",
    "title": "Module - std.experimental.allocator.building_blocks.kernighan_ritchie | Marmos Demo",
    "keywords": "Module - std.experimental.allocator.building_blocks.kernighan_ritchie About Source: $(PHOBOSSRC std/experimental/allocator/building_blocks/kernighan_ritchie.d) Structs Name Description KRRegion KRRegion draws inspiration from the $(MREF_ALTTEXT region allocation strategy, std,experimental,allocator,building_blocks,region) and also the $(HTTP stackoverflow.com/questions/13159564/explain-this-implementation-of-malloc-from-the-kr-book, famed allocator) described by Brian Kernighan and Dennis Ritchie in section 8.7 of the book $(HTTP amazon.com/exec/obidos/ASIN/0131103628/classicempire, \"The C Programming Language\"), Second Edition, Prentice Hall, 1988."
  },
  "phobos/std/experimental/allocator/building_blocks/kernighan_ritchie/Structs/KRRegion.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/kernighan_ritchie/Structs/KRRegion.html",
    "title": "Struct - KRRegion | Marmos Demo",
    "keywords": "Struct - KRRegion Module std.experimental.allocator.building_blocks.kernighan_ritchie public struct KRRegion { // Allocates `n` bytes. Allocation searches the list of available blocks until a free block with `n` or more bytes is found (first fit strategy). The block is split (if larger) and returned. <bug: unknown> allocate( size_t n ) ; // Allocates all memory available to this allocator. If the allocator is empty, returns the entire available block of memory. Otherwise, it still performs a best-effort allocation: if there is no fragmentation (e.g. `allocate` has been used but not `deallocate` ), allocates and returns the only available block of memory. <bug: unknown> allocateAll( ) ; // void assertValid( string s ) ; // <bug: unknown> byNodePtr( ) auto; // void cancelRegionMode( ) ; // void coalesceAndMakeCircular( ) ; // Deallocates `b` , which is assumed to have been previously allocated with this allocator. Deallocation performs a linear search in the free list to preserve its sorting order. It follows that blocks with higher addresses in allocators with many free blocks are slower to deallocate. bool deallocate( <bug: unknown> b ) ; // Deallocates all memory currently allocated, making the allocator ready for other allocations. This is a $(BIGOH 1) operation. bool deallocateAll( ) ; // Returns: `Ternary.yes` if the allocator is empty, `Ternary.no` otherwise. Never returns `Ternary.unknown` . Ternary empty( ) ; // Adjusts `n` to a size suitable for allocation (two words or larger, word-aligned). size_t goodAllocSize( size_t n ) static; // <bug: unknown> merge( <bug: unknown> left, <bug: unknown> right ) ; // Checks whether the allocator is responsible for the allocation of `b` . It does a simple $(BIGOH 1) range check. `b` should be a buffer either allocated with `this` or obtained through other means. Ternary owns( <bug: unknown> b ) ; // bool regionMode( ) ; // <bug: unknown> sortFreelist( <bug: unknown> root ) ; // Forces free list mode. If already in free list mode, does nothing. Otherwise, sorts the free list accumulated so far and switches strategy for future allocations to KR style. void switchToFreeList( ) ; // string toString( ) ; // Word-level alignment. __enumMember alignment; // size_t bytesUsedRegionMode; // If `ParentAllocator` holds state, `parent` is a public member of type `KRRegion` . Otherwise, `parent` is an `alias` for `ParentAllocator.instance` . ParentAllocator parent; // <bug: unknown> payload; // <bug: unknown> root; } About KRRegion draws inspiration from the $(MREF_ALTTEXT region allocation strategy, std,experimental,allocator,building_blocks,region) and also the $(HTTP stackoverflow.com/questions/13159564/explain-this-implementation-of-malloc-from-the-kr-book, famed allocator) described by Brian Kernighan and Dennis Ritchie in section 8.7 of the book $(HTTP amazon.com/exec/obidos/ASIN/0131103628/classicempire, \"The C Programming Language\"), Second Edition, Prentice Hall, 1988. $(H4 KRRegion = Region + Kernighan-Ritchie Allocator) Initially, KRRegion starts in \"region\" mode: allocations are served from the memory chunk in a region fashion. Thus, as long as there is enough memory left, KRRegion.allocate has the performance profile of a region allocator. Deallocation inserts (in $(BIGOH 1) time) the deallocated blocks in an unstructured freelist, which is not read in region mode. Once the region cannot serve an allocate request, KRRegion switches to \"free list\" mode. It sorts the list of previously deallocated blocks by address and serves allocation requests off that free list. The allocation and deallocation follow the pattern described by Kernighan and Ritchie. The recommended use of KRRegion is as a $(I region with deallocation). If the KRRegion is dimensioned appropriately, it could often not enter free list mode during its lifetime. Thus it is as fast as a simple region, whilst offering deallocation at a small cost. When the region memory is exhausted, the previously deallocated memory is still usable, at a performance cost. If the region is not excessively large and fragmented, the linear allocation and deallocation cost may still be compensated for by the good locality characteristics. If the chunk of memory managed is large, it may be desirable to switch management to free list from the beginning. That way, memory may be used in a more compact manner than region mode. To force free list mode, call $(D switchToFreeList) shortly after construction or when deemed appropriate. The smallest size that can be allocated is two words (16 bytes on 64-bit systems, 8 bytes on 32-bit systems). This is because the free list management needs two words (one for the length, the other for the next pointer in the singly-linked list). The ParentAllocator type parameter is the type of the allocator used to allocate the memory chunk underlying the KRRegion object. Choosing the default (NullAllocator) means the user is responsible for passing a buffer at construction (and for deallocating it if necessary). Otherwise, KRRegion automatically deallocates the buffer during destruction. For that reason, if ParentAllocator is not NullAllocator , then KRRegion is not copyable. $(H4 Implementation Details) In free list mode, KRRegion embeds a free blocks list onto the chunk of memory. The free list is circular, coalesced, and sorted by address at all times. Allocations and deallocations take time proportional to the number of previously deallocated blocks. (In practice the cost may be lower, e.g. if memory is deallocated in reverse order of allocation, all operations take constant time.) Memory utilization is good (small control structure and no per-allocation overhead). The disadvantages of freelist mode include proneness to fragmentation, a minimum allocation size of two words, and linear worst-case allocation and deallocation times. Similarities of KRRegion (in free list mode) with the Kernighan-Ritchie allocator: $(UL $(LI Free blocks have variable size and are linked in a singly-linked list.) $(LI The freelist is maintained in increasing address order, which makes coalescing easy.) $(LI The strategy for finding the next available block is first fit.) $(LI The free list is circular, with the last node pointing back to the first.) $(LI Coalescing is carried during deallocation.) ) Differences from the Kernighan-Ritchie allocator $(UL $(LI Once the chunk is exhausted, the Kernighan-Ritchie allocator allocates another chunk using operating system primitives. For better composability, $(D KRRegion) just gets full (returns null on new allocation requests). The decision to allocate more blocks is deferred to a higher-level entity. For an example, see the example below using AllocatorList in conjunction with $(D KRRegion).) $(LI Allocated blocks do not hold a size prefix. This is because in D the size information is available in client code at deallocation time.) ) Functions Name Description allocate Allocates n bytes. Allocation searches the list of available blocks until a free block with n or more bytes is found (first fit strategy). The block is split (if larger) and returned. allocateAll Allocates all memory available to this allocator. If the allocator is empty, returns the entire available block of memory. Otherwise, it still performs a best-effort allocation: if there is no fragmentation (e.g. allocate has been used but not deallocate ), allocates and returns the only available block of memory. assertValid byNodePtr cancelRegionMode coalesceAndMakeCircular deallocate Deallocates b , which is assumed to have been previously allocated with this allocator. Deallocation performs a linear search in the free list to preserve its sorting order. It follows that blocks with higher addresses in allocators with many free blocks are slower to deallocate. deallocateAll Deallocates all memory currently allocated, making the allocator ready for other allocations. This is a $(BIGOH 1) operation. empty Returns: Ternary.yes if the allocator is empty, Ternary.no otherwise. Never returns Ternary.unknown . goodAllocSize Adjusts n to a size suitable for allocation (two words or larger, word-aligned). merge owns Checks whether the allocator is responsible for the allocation of b . It does a simple $(BIGOH 1) range check. b should be a buffer either allocated with this or obtained through other means. regionMode sortFreelist switchToFreeList Forces free list mode. If already in free list mode, does nothing. Otherwise, sorts the free list accumulated so far and switches strategy for future allocations to KR style. toString Variables Name Description alignment Word-level alignment. bytesUsedRegionMode parent If ParentAllocator holds state, parent is a public member of type KRRegion . Otherwise, parent is an alias for ParentAllocator.instance . payload root"
  },
  "phobos/std/experimental/allocator/building_blocks/null_allocator/NullAllocator/Functions/alignedAllocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/null_allocator/NullAllocator/Functions/alignedAllocate.html",
    "title": "Overloads for - alignedAllocate | Marmos Demo",
    "keywords": "Overloads for - alignedAllocate Module std.experimental.allocator.building_blocks.null_allocator Parent NullAllocator alignedAllocate(__anonymous, __anonymous) <bug: unknown> alignedAllocate( size_t __anonymous, uint __anonymous ) Always returns null ."
  },
  "phobos/std/experimental/allocator/building_blocks/null_allocator/NullAllocator/Functions/alignedReallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/null_allocator/NullAllocator/Functions/alignedReallocate.html",
    "title": "Overloads for - alignedReallocate | Marmos Demo",
    "keywords": "Overloads for - alignedReallocate Module std.experimental.allocator.building_blocks.null_allocator Parent NullAllocator alignedReallocate(b, __anonymous, __anonymous) bool alignedReallocate( <bug: unknown> b, size_t __anonymous, uint __anonymous ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/null_allocator/NullAllocator/Functions/allocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/null_allocator/NullAllocator/Functions/allocate.html",
    "title": "Overloads for - allocate | Marmos Demo",
    "keywords": "Overloads for - allocate Module std.experimental.allocator.building_blocks.null_allocator Parent NullAllocator allocate(__anonymous) <bug: unknown> allocate( size_t __anonymous ) Always returns null ."
  },
  "phobos/std/experimental/allocator/building_blocks/null_allocator/NullAllocator/Functions/allocateAll.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/null_allocator/NullAllocator/Functions/allocateAll.html",
    "title": "Overloads for - allocateAll | Marmos Demo",
    "keywords": "Overloads for - allocateAll Module std.experimental.allocator.building_blocks.null_allocator Parent NullAllocator allocateAll() <bug: unknown> allocateAll( ) Always returns null ."
  },
  "phobos/std/experimental/allocator/building_blocks/null_allocator/NullAllocator/Functions/deallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/null_allocator/NullAllocator/Functions/deallocate.html",
    "title": "Overloads for - deallocate | Marmos Demo",
    "keywords": "Overloads for - deallocate Module std.experimental.allocator.building_blocks.null_allocator Parent NullAllocator deallocate(b) bool deallocate( <bug: unknown> b ) No-op. Precondition: $(D b is null)"
  },
  "phobos/std/experimental/allocator/building_blocks/null_allocator/NullAllocator/Functions/deallocateAll.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/null_allocator/NullAllocator/Functions/deallocateAll.html",
    "title": "Overloads for - deallocateAll | Marmos Demo",
    "keywords": "Overloads for - deallocateAll Module std.experimental.allocator.building_blocks.null_allocator Parent NullAllocator deallocateAll() bool deallocateAll( ) No-op."
  },
  "phobos/std/experimental/allocator/building_blocks/null_allocator/NullAllocator/Functions/empty.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/null_allocator/NullAllocator/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.experimental.allocator.building_blocks.null_allocator Parent NullAllocator empty() Ternary empty( ) Returns Ternary.yes ."
  },
  "phobos/std/experimental/allocator/building_blocks/null_allocator/NullAllocator/Functions/expand.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/null_allocator/NullAllocator/Functions/expand.html",
    "title": "Overloads for - expand | Marmos Demo",
    "keywords": "Overloads for - expand Module std.experimental.allocator.building_blocks.null_allocator Parent NullAllocator expand(b, s) bool expand( <bug: unknown> b, size_t s ) These methods return false . Precondition: $(D b is null). This is because there is no other possible legitimate input."
  },
  "phobos/std/experimental/allocator/building_blocks/null_allocator/NullAllocator/Functions/owns.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/null_allocator/NullAllocator/Functions/owns.html",
    "title": "Overloads for - owns | Marmos Demo",
    "keywords": "Overloads for - owns Module std.experimental.allocator.building_blocks.null_allocator Parent NullAllocator owns(__anonymous) Ternary owns( <bug: unknown> __anonymous ) Returns Ternary.no ."
  },
  "phobos/std/experimental/allocator/building_blocks/null_allocator/NullAllocator/Functions/reallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/null_allocator/NullAllocator/Functions/reallocate.html",
    "title": "Overloads for - reallocate | Marmos Demo",
    "keywords": "Overloads for - reallocate Module std.experimental.allocator.building_blocks.null_allocator Parent NullAllocator reallocate(b, __anonymous) bool reallocate( <bug: unknown> b, size_t __anonymous ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/null_allocator/NullAllocator/Functions/resolveInternalPointer.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/null_allocator/NullAllocator/Functions/resolveInternalPointer.html",
    "title": "Overloads for - resolveInternalPointer | Marmos Demo",
    "keywords": "Overloads for - resolveInternalPointer Module std.experimental.allocator.building_blocks.null_allocator Parent NullAllocator resolveInternalPointer(__anonymous, __anonymous) Ternary resolveInternalPointer( <bug: unknown> __anonymous, <bug: unknown> __anonymous ) Returns Ternary.no ."
  },
  "phobos/std/experimental/allocator/building_blocks/null_allocator/Overview.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/null_allocator/Overview.html",
    "title": "Module - std.experimental.allocator.building_blocks.null_allocator | Marmos Demo",
    "keywords": "Module - std.experimental.allocator.building_blocks.null_allocator About Source: $(PHOBOSSRC std/experimental/allocator/building_blocks/null_allocator.d) Structs Name Description NullAllocator NullAllocator is an emphatically empty implementation of the allocator interface. Although it has no direct use, it is useful as a \"terminator\" in composite allocators."
  },
  "phobos/std/experimental/allocator/building_blocks/null_allocator/Structs/NullAllocator.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/null_allocator/Structs/NullAllocator.html",
    "title": "Struct - NullAllocator | Marmos Demo",
    "keywords": "Struct - NullAllocator Module std.experimental.allocator.building_blocks.null_allocator public struct NullAllocator { // Always returns `null` . <bug: unknown> alignedAllocate( size_t __anonymous, uint __anonymous ) ; // Ditto bool alignedReallocate( <bug: unknown> b, size_t __anonymous, uint __anonymous ) ; // Always returns `null` . <bug: unknown> allocate( size_t __anonymous ) ; // Always returns `null` . <bug: unknown> allocateAll( ) ; // No-op. Precondition: $(D b is null) bool deallocate( <bug: unknown> b ) ; // No-op. bool deallocateAll( ) ; // Returns `Ternary.yes` . Ternary empty( ) ; // These methods return `false` . Precondition: $(D b is null). This is because there is no other possible legitimate input. bool expand( <bug: unknown> b, size_t s ) ; // Returns `Ternary.no` . Ternary owns( <bug: unknown> __anonymous ) ; // Ditto bool reallocate( <bug: unknown> b, size_t __anonymous ) ; // Returns `Ternary.no` . Ternary resolveInternalPointer( <bug: unknown> __anonymous, <bug: unknown> __anonymous ) ; // `NullAllocator` advertises a relatively large alignment equal to 64 KB. This is because `NullAllocator` never actually needs to honor this alignment and because composite allocators using `NullAllocator` shouldn't be unnecessarily constrained. uint alignment; // Returns the `shared` global instance of the `NullAllocator` . static shared NullAllocator instance; } About NullAllocator is an emphatically empty implementation of the allocator interface. Although it has no direct use, it is useful as a \"terminator\" in composite allocators. Functions Name Description alignedAllocate Always returns null . alignedReallocate Ditto allocate Always returns null . allocateAll Always returns null . deallocate No-op. Precondition: $(D b is null) deallocateAll No-op. empty Returns Ternary.yes . expand These methods return false . Precondition: $(D b is null). This is because there is no other possible legitimate input. owns Returns Ternary.no . reallocate Ditto resolveInternalPointer Returns Ternary.no . Variables Name Description alignment NullAllocator advertises a relatively large alignment equal to 64 KB. This is because NullAllocator never actually needs to honor this alignment and because composite allocators using NullAllocator shouldn't be unnecessarily constrained. instance Returns the shared global instance of the NullAllocator ."
  },
  "phobos/std/experimental/allocator/building_blocks/quantizer/Overview.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/quantizer/Overview.html",
    "title": "Module - std.experimental.allocator.building_blocks.quantizer | Marmos Demo",
    "keywords": "Module - std.experimental.allocator.building_blocks.quantizer About Source: $(PHOBOSSRC std/experimental/allocator/building_blocks/quantizer.d) Structs Name Description Quantizer This allocator sits on top of ParentAllocator and quantizes allocation sizes, usually from arbitrary positive numbers to a small set of round numbers (e.g. powers of two, page sizes etc). This technique is commonly used to:"
  },
  "phobos/std/experimental/allocator/building_blocks/quantizer/Quantizer/Functions/alignedAllocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/quantizer/Quantizer/Functions/alignedAllocate.html",
    "title": "Overloads for - alignedAllocate | Marmos Demo",
    "keywords": "Overloads for - alignedAllocate Module std.experimental.allocator.building_blocks.quantizer Parent Quantizer alignedAllocate(n, a) <bug: unknown> alignedAllocate( size_t n, uint a ) Defined only if parent.alignedAllocate exists and works similarly to allocate by forwarding to $(D parent.alignedAllocate(goodAllocSize(n), a))."
  },
  "phobos/std/experimental/allocator/building_blocks/quantizer/Quantizer/Functions/alignedReallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/quantizer/Quantizer/Functions/alignedReallocate.html",
    "title": "Overloads for - alignedReallocate | Marmos Demo",
    "keywords": "Overloads for - alignedReallocate Module std.experimental.allocator.building_blocks.quantizer Parent Quantizer alignedReallocate(b, s, a) bool alignedReallocate( <bug: unknown> b, size_t s, uint a ) Defined only if ParentAllocator.alignedAllocate exists. Expansion occurs in place under the conditions required by expand . Shrinking occurs in place if $(D goodAllocSize(b.length) == goodAllocSize(s))."
  },
  "phobos/std/experimental/allocator/building_blocks/quantizer/Quantizer/Functions/allocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/quantizer/Quantizer/Functions/allocate.html",
    "title": "Overloads for - allocate | Marmos Demo",
    "keywords": "Overloads for - allocate Module std.experimental.allocator.building_blocks.quantizer Parent Quantizer allocate(n) <bug: unknown> allocate( size_t n ) Gets a larger buffer buf by calling parent.allocate(goodAllocSize(n)) . If buf is null , returns null . Otherwise, returns $(D buf[0 .. n])."
  },
  "phobos/std/experimental/allocator/building_blocks/quantizer/Quantizer/Functions/deallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/quantizer/Quantizer/Functions/deallocate.html",
    "title": "Overloads for - deallocate | Marmos Demo",
    "keywords": "Overloads for - deallocate Module std.experimental.allocator.building_blocks.quantizer Parent Quantizer deallocate(b) bool deallocate( <bug: unknown> b ) Defined if ParentAllocator.deallocate exists and forwards to $(D parent.deallocate(b.ptr[0 .. goodAllocSize(b.length)]))."
  },
  "phobos/std/experimental/allocator/building_blocks/quantizer/Quantizer/Functions/expand.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/quantizer/Quantizer/Functions/expand.html",
    "title": "Overloads for - expand | Marmos Demo",
    "keywords": "Overloads for - expand Module std.experimental.allocator.building_blocks.quantizer Parent Quantizer expand(b, delta) bool expand( <bug: unknown> b, size_t delta ) First checks whether there's enough slack memory preallocated for b by evaluating $(D b.length + delta <= goodAllocSize(b.length)). If that's the case, expands b in place. Otherwise, attempts to use parent.expand appropriately if present."
  },
  "phobos/std/experimental/allocator/building_blocks/quantizer/Quantizer/Functions/goodAllocSize.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/quantizer/Quantizer/Functions/goodAllocSize.html",
    "title": "Overloads for - goodAllocSize | Marmos Demo",
    "keywords": "Overloads for - goodAllocSize Module std.experimental.allocator.building_blocks.quantizer Parent Quantizer goodAllocSize(n) size_t goodAllocSize( size_t n ) Returns roundingFunction(n) ."
  },
  "phobos/std/experimental/allocator/building_blocks/quantizer/Quantizer/Functions/reallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/quantizer/Quantizer/Functions/reallocate.html",
    "title": "Overloads for - reallocate | Marmos Demo",
    "keywords": "Overloads for - reallocate Module std.experimental.allocator.building_blocks.quantizer Parent Quantizer reallocate(b, s) bool reallocate( <bug: unknown> b, size_t s ) Expands or shrinks allocated block to an allocated size of $(D goodAllocSize(s)). Expansion occurs in place under the conditions required by expand . Shrinking occurs in place if $(D goodAllocSize(b.length) == goodAllocSize(s))."
  },
  "phobos/std/experimental/allocator/building_blocks/quantizer/Structs/Quantizer.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/quantizer/Structs/Quantizer.html",
    "title": "Struct - Quantizer | Marmos Demo",
    "keywords": "Struct - Quantizer Module std.experimental.allocator.building_blocks.quantizer public struct Quantizer { // Defined only if `parent.alignedAllocate` exists and works similarly to `allocate` by forwarding to $(D parent.alignedAllocate(goodAllocSize(n), a)). <bug: unknown> alignedAllocate( size_t n, uint a ) ; // Defined only if `ParentAllocator.alignedAllocate` exists. Expansion occurs in place under the conditions required by `expand` . Shrinking occurs in place if $(D goodAllocSize(b.length) == goodAllocSize(s)). bool alignedReallocate( <bug: unknown> b, size_t s, uint a ) ; // Gets a larger buffer `buf` by calling `parent.allocate(goodAllocSize(n))` . If `buf` is `null` , returns `null` . Otherwise, returns $(D buf[0 .. n]). <bug: unknown> allocate( size_t n ) ; // Defined if `ParentAllocator.deallocate` exists and forwards to $(D parent.deallocate(b.ptr[0 .. goodAllocSize(b.length)])). bool deallocate( <bug: unknown> b ) ; // First checks whether there's enough slack memory preallocated for `b` by evaluating $(D b.length + delta <= goodAllocSize(b.length)). If that's the case, expands `b` in place. Otherwise, attempts to use `parent.expand` appropriately if present. bool expand( <bug: unknown> b, size_t delta ) ; // Returns `roundingFunction(n)` . size_t goodAllocSize( size_t n ) ; // Expands or shrinks allocated block to an allocated size of $(D goodAllocSize(s)). Expansion occurs in place under the conditions required by `expand` . Shrinking occurs in place if $(D goodAllocSize(b.length) == goodAllocSize(s)). bool reallocate( <bug: unknown> b, size_t s ) ; // Alignment is identical to that of the parent. __enumMember alignment; // The parent allocator. Depending on whether `ParentAllocator` holds state or not, this is a member variable or an alias for `ParentAllocator.instance` . ParentAllocator parent; } About This allocator sits on top of ParentAllocator and quantizes allocation sizes, usually from arbitrary positive numbers to a small set of round numbers (e.g. powers of two, page sizes etc). This technique is commonly used to: $(UL $(LI Preallocate more memory than requested such that later on, when reallocation is needed (e.g. to grow an array), expansion can be done quickly in place. Reallocation to smaller sizes is also fast (in-place) when the new size requested is within the same quantum as the existing size. Code that's reallocation-heavy can therefore benefit from fronting a generic allocator with a Quantizer . These advantages are present even if ParentAllocator does not support reallocation at all.) $(LI Improve behavior of allocators sensitive to allocation sizes, such as FreeList and FreeTree . Rounding allocation requests up makes for smaller free lists/trees at the cost of slack memory (internal fragmentation).) ) The following methods are forwarded to the parent allocator if present allocateAll , owns , deallocateAll , empty . Preconditions: roundingFunction must satisfy three constraints. These are not enforced (save for the use of assert ) for the sake of efficiency. $(OL $(LI $(D roundingFunction(n) >= n) for all n of type size_t ;) $(LI roundingFunction must be monotonically increasing, i.e. $(D roundingFunction(n1) <= roundingFunction(n2)) for all $(D n1 < n2);) $(LI roundingFunction must be nothrow , @safe , @nogc and pure , i.e. always return the same value for a given n .) ) Functions Name Description alignedAllocate Defined only if parent.alignedAllocate exists and works similarly to allocate by forwarding to $(D parent.alignedAllocate(goodAllocSize(n), a)). alignedReallocate Defined only if ParentAllocator.alignedAllocate exists. Expansion occurs in place under the conditions required by expand . Shrinking occurs in place if $(D goodAllocSize(b.length) == goodAllocSize(s)). allocate Gets a larger buffer buf by calling parent.allocate(goodAllocSize(n)) . If buf is null , returns null . Otherwise, returns $(D buf[0 .. n]). deallocate Defined if ParentAllocator.deallocate exists and forwards to $(D parent.deallocate(b.ptr[0 .. goodAllocSize(b.length)])). expand First checks whether there's enough slack memory preallocated for b by evaluating $(D b.length + delta <= goodAllocSize(b.length)). If that's the case, expands b in place. Otherwise, attempts to use parent.expand appropriately if present. goodAllocSize Returns roundingFunction(n) . reallocate Expands or shrinks allocated block to an allocated size of $(D goodAllocSize(s)). Expansion occurs in place under the conditions required by expand . Shrinking occurs in place if $(D goodAllocSize(b.length) == goodAllocSize(s)). Variables Name Description alignment Alignment is identical to that of the parent. parent The parent allocator. Depending on whether ParentAllocator holds state or not, this is a member variable or an alias for ParentAllocator.instance ."
  },
  "phobos/std/experimental/allocator/building_blocks/region/BorrowedRegion/Functions/alignedAllocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/BorrowedRegion/Functions/alignedAllocate.html",
    "title": "Overloads for - alignedAllocate | Marmos Demo",
    "keywords": "Overloads for - alignedAllocate Module std.experimental.allocator.building_blocks.region Parent BorrowedRegion alignedAllocate(n, a) <bug: unknown> alignedAllocate( size_t n, uint a ) Allocates n bytes of memory aligned at alignment a . Params n size_t number of bytes to allocate a uint alignment for the allocated block Returns Either a suitable block of n bytes aligned at a , or null ."
  },
  "phobos/std/experimental/allocator/building_blocks/region/BorrowedRegion/Functions/allocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/BorrowedRegion/Functions/allocate.html",
    "title": "Overloads for - allocate | Marmos Demo",
    "keywords": "Overloads for - allocate Module std.experimental.allocator.building_blocks.region Parent BorrowedRegion allocate(n) <bug: unknown> allocate( size_t n ) Allocates n bytes of memory. The shortest path involves an alignment adjustment (if $(D alignment > 1)), an increment, and a comparison. Params n size_t number of bytes to allocate Returns A properly-aligned buffer of size n or null if request could not be satisfied."
  },
  "phobos/std/experimental/allocator/building_blocks/region/BorrowedRegion/Functions/allocateAll.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/BorrowedRegion/Functions/allocateAll.html",
    "title": "Overloads for - allocateAll | Marmos Demo",
    "keywords": "Overloads for - allocateAll Module std.experimental.allocator.building_blocks.region Parent BorrowedRegion allocateAll() <bug: unknown> allocateAll( ) Allocates and returns all memory available to this region."
  },
  "phobos/std/experimental/allocator/building_blocks/region/BorrowedRegion/Functions/available.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/BorrowedRegion/Functions/available.html",
    "title": "Overloads for - available | Marmos Demo",
    "keywords": "Overloads for - available Module std.experimental.allocator.building_blocks.region Parent BorrowedRegion available() size_t available( ) Nonstandard property that returns bytes available for allocation."
  },
  "phobos/std/experimental/allocator/building_blocks/region/BorrowedRegion/Functions/deallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/BorrowedRegion/Functions/deallocate.html",
    "title": "Overloads for - deallocate | Marmos Demo",
    "keywords": "Overloads for - deallocate Module std.experimental.allocator.building_blocks.region Parent BorrowedRegion deallocate(b) bool deallocate( <bug: unknown> b ) Deallocates b . This works only if b was obtained as the last call to allocate ; otherwise (i.e. another allocation has occurred since) it does nothing. Params b <bug: unknown> Block previously obtained by a call to allocate against this allocator (null is allowed)."
  },
  "phobos/std/experimental/allocator/building_blocks/region/BorrowedRegion/Functions/deallocateAll.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/BorrowedRegion/Functions/deallocateAll.html",
    "title": "Overloads for - deallocateAll | Marmos Demo",
    "keywords": "Overloads for - deallocateAll Module std.experimental.allocator.building_blocks.region Parent BorrowedRegion deallocateAll() bool deallocateAll( ) Deallocates all memory allocated by this region, which can be subsequently reused for new allocations."
  },
  "phobos/std/experimental/allocator/building_blocks/region/BorrowedRegion/Functions/empty.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/BorrowedRegion/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.experimental.allocator.building_blocks.region Parent BorrowedRegion empty() Ternary empty( ) Returns Ternary.yes if no memory has been allocated in this region, Ternary.no otherwise. (Never returns Ternary.unknown .)"
  },
  "phobos/std/experimental/allocator/building_blocks/region/BorrowedRegion/Functions/expand.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/BorrowedRegion/Functions/expand.html",
    "title": "Overloads for - expand | Marmos Demo",
    "keywords": "Overloads for - expand Module std.experimental.allocator.building_blocks.region Parent BorrowedRegion expand(b, delta) bool expand( <bug: unknown> b, size_t delta ) Expands an allocated block in place. Expansion will succeed only if the block is the last allocated. Defined only if growDownwards is No.growDownwards ."
  },
  "phobos/std/experimental/allocator/building_blocks/region/BorrowedRegion/Functions/goodAllocSize.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/BorrowedRegion/Functions/goodAllocSize.html",
    "title": "Overloads for - goodAllocSize | Marmos Demo",
    "keywords": "Overloads for - goodAllocSize Module std.experimental.allocator.building_blocks.region Parent BorrowedRegion goodAllocSize(n) size_t goodAllocSize( size_t n ) Rounds the given size to a multiple of the alignment"
  },
  "phobos/std/experimental/allocator/building_blocks/region/BorrowedRegion/Functions/owns.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/BorrowedRegion/Functions/owns.html",
    "title": "Overloads for - owns | Marmos Demo",
    "keywords": "Overloads for - owns Module std.experimental.allocator.building_blocks.region Parent BorrowedRegion owns(b) Ternary owns( <bug: unknown> b ) Queries whether b has been allocated with this region. Params b <bug: unknown> Arbitrary block of memory (null is allowed; owns(null) returns false ). Returns true if b has been allocated with this region, false otherwise."
  },
  "phobos/std/experimental/allocator/building_blocks/region/BorrowedRegion/Functions/roundedBegin.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/BorrowedRegion/Functions/roundedBegin.html",
    "title": "Overloads for - roundedBegin | Marmos Demo",
    "keywords": "Overloads for - roundedBegin Module std.experimental.allocator.building_blocks.region Parent BorrowedRegion roundedBegin() <bug: unknown> roundedBegin( )"
  },
  "phobos/std/experimental/allocator/building_blocks/region/BorrowedRegion/Functions/roundedEnd.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/BorrowedRegion/Functions/roundedEnd.html",
    "title": "Overloads for - roundedEnd | Marmos Demo",
    "keywords": "Overloads for - roundedEnd Module std.experimental.allocator.building_blocks.region Parent BorrowedRegion roundedEnd() <bug: unknown> roundedEnd( )"
  },
  "phobos/std/experimental/allocator/building_blocks/region/InSituRegion/Functions/alignedAllocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/InSituRegion/Functions/alignedAllocate.html",
    "title": "Overloads for - alignedAllocate | Marmos Demo",
    "keywords": "Overloads for - alignedAllocate Module std.experimental.allocator.building_blocks.region Parent InSituRegion alignedAllocate(n, a) <bug: unknown> alignedAllocate( size_t n, uint a ) As above, but the memory allocated is aligned at a bytes."
  },
  "phobos/std/experimental/allocator/building_blocks/region/InSituRegion/Functions/allocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/InSituRegion/Functions/allocate.html",
    "title": "Overloads for - allocate | Marmos Demo",
    "keywords": "Overloads for - allocate Module std.experimental.allocator.building_blocks.region Parent InSituRegion allocate(n) <bug: unknown> allocate( size_t n ) Allocates bytes and returns them, or null if the region cannot accommodate the request. For efficiency reasons, if $(D bytes == 0) the function returns an empty non-null slice."
  },
  "phobos/std/experimental/allocator/building_blocks/region/InSituRegion/Functions/allocateAll.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/InSituRegion/Functions/allocateAll.html",
    "title": "Overloads for - allocateAll | Marmos Demo",
    "keywords": "Overloads for - allocateAll Module std.experimental.allocator.building_blocks.region Parent InSituRegion allocateAll() <bug: unknown> allocateAll( ) Allocates all memory available with this allocator."
  },
  "phobos/std/experimental/allocator/building_blocks/region/InSituRegion/Functions/available.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/InSituRegion/Functions/available.html",
    "title": "Overloads for - available | Marmos Demo",
    "keywords": "Overloads for - available Module std.experimental.allocator.building_blocks.region Parent InSituRegion available() size_t available( ) Nonstandard function that returns the bytes available for allocation."
  },
  "phobos/std/experimental/allocator/building_blocks/region/InSituRegion/Functions/deallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/InSituRegion/Functions/deallocate.html",
    "title": "Overloads for - deallocate | Marmos Demo",
    "keywords": "Overloads for - deallocate Module std.experimental.allocator.building_blocks.region Parent InSituRegion deallocate(b) bool deallocate( <bug: unknown> b ) Deallocates b . This works only if b was obtained as the last call to allocate ; otherwise (i.e. another allocation has occurred since) it does nothing. This semantics is tricky and therefore deallocate is defined only if Region is instantiated with Yes.defineDeallocate as the third template argument. Params b <bug: unknown> Block previously obtained by a call to allocate against this allocator (null is allowed)."
  },
  "phobos/std/experimental/allocator/building_blocks/region/InSituRegion/Functions/deallocateAll.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/InSituRegion/Functions/deallocateAll.html",
    "title": "Overloads for - deallocateAll | Marmos Demo",
    "keywords": "Overloads for - deallocateAll Module std.experimental.allocator.building_blocks.region Parent InSituRegion deallocateAll() bool deallocateAll( ) Deallocates all memory allocated with this allocator."
  },
  "phobos/std/experimental/allocator/building_blocks/region/InSituRegion/Functions/expand.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/InSituRegion/Functions/expand.html",
    "title": "Overloads for - expand | Marmos Demo",
    "keywords": "Overloads for - expand Module std.experimental.allocator.building_blocks.region Parent InSituRegion expand(b, delta) bool expand( <bug: unknown> b, size_t delta ) Expands an allocated block in place. Expansion will succeed only if the block is the last allocated."
  },
  "phobos/std/experimental/allocator/building_blocks/region/InSituRegion/Functions/lazyInit.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/InSituRegion/Functions/lazyInit.html",
    "title": "Overloads for - lazyInit | Marmos Demo",
    "keywords": "Overloads for - lazyInit Module std.experimental.allocator.building_blocks.region Parent InSituRegion lazyInit() void lazyInit( )"
  },
  "phobos/std/experimental/allocator/building_blocks/region/InSituRegion/Functions/owns.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/InSituRegion/Functions/owns.html",
    "title": "Overloads for - owns | Marmos Demo",
    "keywords": "Overloads for - owns Module std.experimental.allocator.building_blocks.region Parent InSituRegion owns(b) Ternary owns( <bug: unknown> b ) Returns Ternary.yes if b is the result of a previous allocation, Ternary.no otherwise."
  },
  "phobos/std/experimental/allocator/building_blocks/region/Overview.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/Overview.html",
    "title": "Module - std.experimental.allocator.building_blocks.region | Marmos Demo",
    "keywords": "Module - std.experimental.allocator.building_blocks.region About Source: $(PHOBOSSRC std/experimental/allocator/building_blocks/region.d) Structs Name Description BorrowedRegion A BorrowedRegion allocates directly from a user-provided block of memory. InSituRegion InSituRegion is a convenient region that carries its storage within itself (in the form of a statically-sized array). Region A Region allocator allocates memory straight from one contiguous chunk. There is no deallocation, and once the region is full, allocation requests return null . Therefore, Region s are often used (a) in conjunction with more sophisticated allocators; or (b) for batch-style very fast allocations that deallocate everything at once. SharedBorrowedRegion A SharedBorrowedRegion allocates directly from a user-provided block of memory. SharedRegion The threadsafe version of the Region allocator. Allocations and deallocations are lock-free based using $(REF cas, core,atomic)."
  },
  "phobos/std/experimental/allocator/building_blocks/region/Region/Functions/alignedAllocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/Region/Functions/alignedAllocate.html",
    "title": "Overloads for - alignedAllocate | Marmos Demo",
    "keywords": "Overloads for - alignedAllocate Module std.experimental.allocator.building_blocks.region Parent Region alignedAllocate(n, a) <bug: unknown> alignedAllocate( size_t n, uint a ) Allocates n bytes of memory aligned at alignment a . Params n size_t number of bytes to allocate a uint alignment for the allocated block Returns Either a suitable block of n bytes aligned at a , or null ."
  },
  "phobos/std/experimental/allocator/building_blocks/region/Region/Functions/allocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/Region/Functions/allocate.html",
    "title": "Overloads for - allocate | Marmos Demo",
    "keywords": "Overloads for - allocate Module std.experimental.allocator.building_blocks.region Parent Region allocate(n) <bug: unknown> allocate( size_t n ) Allocates n bytes of memory. The shortest path involves an alignment adjustment (if $(D alignment > 1)), an increment, and a comparison. Params n size_t number of bytes to allocate Returns A properly-aligned buffer of size n or null if request could not be satisfied."
  },
  "phobos/std/experimental/allocator/building_blocks/region/Region/Functions/allocateAll.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/Region/Functions/allocateAll.html",
    "title": "Overloads for - allocateAll | Marmos Demo",
    "keywords": "Overloads for - allocateAll Module std.experimental.allocator.building_blocks.region Parent Region allocateAll() <bug: unknown> allocateAll( ) Allocates and returns all memory available to this region."
  },
  "phobos/std/experimental/allocator/building_blocks/region/Region/Functions/available.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/Region/Functions/available.html",
    "title": "Overloads for - available | Marmos Demo",
    "keywords": "Overloads for - available Module std.experimental.allocator.building_blocks.region Parent Region available() size_t available( ) Nonstandard property that returns bytes available for allocation."
  },
  "phobos/std/experimental/allocator/building_blocks/region/Region/Functions/deallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/Region/Functions/deallocate.html",
    "title": "Overloads for - deallocate | Marmos Demo",
    "keywords": "Overloads for - deallocate Module std.experimental.allocator.building_blocks.region Parent Region deallocate(b) bool deallocate( <bug: unknown> b ) Deallocates b . This works only if b was obtained as the last call to allocate ; otherwise (i.e. another allocation has occurred since) it does nothing. Params b <bug: unknown> Block previously obtained by a call to allocate against this allocator (null is allowed)."
  },
  "phobos/std/experimental/allocator/building_blocks/region/Region/Functions/deallocateAll.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/Region/Functions/deallocateAll.html",
    "title": "Overloads for - deallocateAll | Marmos Demo",
    "keywords": "Overloads for - deallocateAll Module std.experimental.allocator.building_blocks.region Parent Region deallocateAll() bool deallocateAll( ) Deallocates all memory allocated by this region, which can be subsequently reused for new allocations."
  },
  "phobos/std/experimental/allocator/building_blocks/region/Region/Functions/empty.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/Region/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.experimental.allocator.building_blocks.region Parent Region empty() Ternary empty( ) Returns Ternary.yes if no memory has been allocated in this region, Ternary.no otherwise. (Never returns Ternary.unknown .)"
  },
  "phobos/std/experimental/allocator/building_blocks/region/Region/Functions/expand.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/Region/Functions/expand.html",
    "title": "Overloads for - expand | Marmos Demo",
    "keywords": "Overloads for - expand Module std.experimental.allocator.building_blocks.region Parent Region expand(b, delta) bool expand( <bug: unknown> b, size_t delta ) Expands an allocated block in place. Expansion will succeed only if the block is the last allocated. Defined only if growDownwards is No.growDownwards ."
  },
  "phobos/std/experimental/allocator/building_blocks/region/Region/Functions/goodAllocSize.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/Region/Functions/goodAllocSize.html",
    "title": "Overloads for - goodAllocSize | Marmos Demo",
    "keywords": "Overloads for - goodAllocSize Module std.experimental.allocator.building_blocks.region Parent Region goodAllocSize(n) size_t goodAllocSize( size_t n ) Rounds the given size to a multiple of the alignment"
  },
  "phobos/std/experimental/allocator/building_blocks/region/Region/Functions/owns.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/Region/Functions/owns.html",
    "title": "Overloads for - owns | Marmos Demo",
    "keywords": "Overloads for - owns Module std.experimental.allocator.building_blocks.region Parent Region owns(b) Ternary owns( <bug: unknown> b ) Queries whether b has been allocated with this region. Params b <bug: unknown> Arbitrary block of memory (null is allowed; owns(null) returns false ). Returns true if b has been allocated with this region, false otherwise."
  },
  "phobos/std/experimental/allocator/building_blocks/region/Region/Functions/roundedBegin.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/Region/Functions/roundedBegin.html",
    "title": "Overloads for - roundedBegin | Marmos Demo",
    "keywords": "Overloads for - roundedBegin Module std.experimental.allocator.building_blocks.region Parent Region roundedBegin() <bug: unknown> roundedBegin( )"
  },
  "phobos/std/experimental/allocator/building_blocks/region/Region/Functions/roundedEnd.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/Region/Functions/roundedEnd.html",
    "title": "Overloads for - roundedEnd | Marmos Demo",
    "keywords": "Overloads for - roundedEnd Module std.experimental.allocator.building_blocks.region Parent Region roundedEnd() <bug: unknown> roundedEnd( )"
  },
  "phobos/std/experimental/allocator/building_blocks/region/SharedBorrowedRegion/Functions/alignedAllocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/SharedBorrowedRegion/Functions/alignedAllocate.html",
    "title": "Overloads for - alignedAllocate | Marmos Demo",
    "keywords": "Overloads for - alignedAllocate Module std.experimental.allocator.building_blocks.region Parent SharedBorrowedRegion alignedAllocate(n, a) <bug: unknown> alignedAllocate( size_t n, uint a ) Allocates n bytes of memory aligned at alignment a . Params n size_t number of bytes to allocate a uint alignment for the allocated block Returns Either a suitable block of n bytes aligned at a , or null ."
  },
  "phobos/std/experimental/allocator/building_blocks/region/SharedBorrowedRegion/Functions/allocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/SharedBorrowedRegion/Functions/allocate.html",
    "title": "Overloads for - allocate | Marmos Demo",
    "keywords": "Overloads for - allocate Module std.experimental.allocator.building_blocks.region Parent SharedBorrowedRegion allocate(n) <bug: unknown> allocate( size_t n ) Allocates n bytes of memory. The allocation is served by atomically incrementing a pointer which keeps track of the current used space. Params n size_t number of bytes to allocate Returns A properly-aligned buffer of size n , or null if request could not be satisfied."
  },
  "phobos/std/experimental/allocator/building_blocks/region/SharedBorrowedRegion/Functions/deallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/SharedBorrowedRegion/Functions/deallocate.html",
    "title": "Overloads for - deallocate | Marmos Demo",
    "keywords": "Overloads for - deallocate Module std.experimental.allocator.building_blocks.region Parent SharedBorrowedRegion deallocate(b) bool deallocate( <bug: unknown> b ) Deallocates b . This works only if b was obtained as the last call to allocate ; otherwise (i.e. another allocation has occurred since) it does nothing. Params b <bug: unknown> Block previously obtained by a call to allocate against this allocator (null is allowed)."
  },
  "phobos/std/experimental/allocator/building_blocks/region/SharedBorrowedRegion/Functions/deallocateAll.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/SharedBorrowedRegion/Functions/deallocateAll.html",
    "title": "Overloads for - deallocateAll | Marmos Demo",
    "keywords": "Overloads for - deallocateAll Module std.experimental.allocator.building_blocks.region Parent SharedBorrowedRegion deallocateAll() bool deallocateAll( ) Deallocates all memory allocated by this region, which can be subsequently reused for new allocations."
  },
  "phobos/std/experimental/allocator/building_blocks/region/SharedBorrowedRegion/Functions/empty.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/SharedBorrowedRegion/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.experimental.allocator.building_blocks.region Parent SharedBorrowedRegion empty() Ternary empty( ) Returns Ternary.yes if no memory has been allocated in this region, Ternary.no otherwise. (Never returns Ternary.unknown .)"
  },
  "phobos/std/experimental/allocator/building_blocks/region/SharedBorrowedRegion/Functions/goodAllocSize.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/SharedBorrowedRegion/Functions/goodAllocSize.html",
    "title": "Overloads for - goodAllocSize | Marmos Demo",
    "keywords": "Overloads for - goodAllocSize Module std.experimental.allocator.building_blocks.region Parent SharedBorrowedRegion goodAllocSize(n) size_t goodAllocSize( size_t n ) Rounds the given size to a multiple of the alignment"
  },
  "phobos/std/experimental/allocator/building_blocks/region/SharedBorrowedRegion/Functions/owns.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/SharedBorrowedRegion/Functions/owns.html",
    "title": "Overloads for - owns | Marmos Demo",
    "keywords": "Overloads for - owns Module std.experimental.allocator.building_blocks.region Parent SharedBorrowedRegion owns(b) Ternary owns( <bug: unknown> b ) Queries whether b has been allocated with this region. Params b <bug: unknown> Arbitrary block of memory (null is allowed; owns(null) returns false ). Returns true if b has been allocated with this region, false otherwise."
  },
  "phobos/std/experimental/allocator/building_blocks/region/SharedBorrowedRegion/Functions/roundedBegin.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/SharedBorrowedRegion/Functions/roundedBegin.html",
    "title": "Overloads for - roundedBegin | Marmos Demo",
    "keywords": "Overloads for - roundedBegin Module std.experimental.allocator.building_blocks.region Parent SharedBorrowedRegion roundedBegin() <bug: unknown> roundedBegin( )"
  },
  "phobos/std/experimental/allocator/building_blocks/region/SharedBorrowedRegion/Functions/roundedEnd.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/SharedBorrowedRegion/Functions/roundedEnd.html",
    "title": "Overloads for - roundedEnd | Marmos Demo",
    "keywords": "Overloads for - roundedEnd Module std.experimental.allocator.building_blocks.region Parent SharedBorrowedRegion roundedEnd() <bug: unknown> roundedEnd( )"
  },
  "phobos/std/experimental/allocator/building_blocks/region/SharedRegion/Functions/alignedAllocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/SharedRegion/Functions/alignedAllocate.html",
    "title": "Overloads for - alignedAllocate | Marmos Demo",
    "keywords": "Overloads for - alignedAllocate Module std.experimental.allocator.building_blocks.region Parent SharedRegion alignedAllocate(n, a) <bug: unknown> alignedAllocate( size_t n, uint a ) Allocates n bytes of memory aligned at alignment a . Params: n = number of bytes to allocate a = alignment for the allocated block Returns Either a suitable block of n bytes aligned at a , or null ."
  },
  "phobos/std/experimental/allocator/building_blocks/region/SharedRegion/Functions/allocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/SharedRegion/Functions/allocate.html",
    "title": "Overloads for - allocate | Marmos Demo",
    "keywords": "Overloads for - allocate Module std.experimental.allocator.building_blocks.region Parent SharedRegion allocate(n) <bug: unknown> allocate( size_t n ) Allocates n bytes of memory. The allocation is served by atomically incrementing a pointer which keeps track of the current used space. Params n size_t number of bytes to allocate Returns A properly-aligned buffer of size n , or null if request could not be satisfied."
  },
  "phobos/std/experimental/allocator/building_blocks/region/SharedRegion/Functions/deallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/SharedRegion/Functions/deallocate.html",
    "title": "Overloads for - deallocate | Marmos Demo",
    "keywords": "Overloads for - deallocate Module std.experimental.allocator.building_blocks.region Parent SharedRegion deallocate(b) bool deallocate( <bug: unknown> b ) Deallocates b . This works only if b was obtained as the last call to allocate ; otherwise (i.e. another allocation has occurred since) it does nothing. Params b <bug: unknown> Block previously obtained by a call to allocate against this allocator (null is allowed)."
  },
  "phobos/std/experimental/allocator/building_blocks/region/SharedRegion/Functions/deallocateAll.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/SharedRegion/Functions/deallocateAll.html",
    "title": "Overloads for - deallocateAll | Marmos Demo",
    "keywords": "Overloads for - deallocateAll Module std.experimental.allocator.building_blocks.region Parent SharedRegion deallocateAll() bool deallocateAll( ) Deallocates all memory allocated by this region, which can be subsequently reused for new allocations."
  },
  "phobos/std/experimental/allocator/building_blocks/region/SharedRegion/Functions/empty.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/SharedRegion/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.experimental.allocator.building_blocks.region Parent SharedRegion empty() Ternary empty( ) Returns Ternary.yes if no memory has been allocated in this region, Ternary.no otherwise. (Never returns Ternary.unknown .)"
  },
  "phobos/std/experimental/allocator/building_blocks/region/SharedRegion/Functions/goodAllocSize.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/SharedRegion/Functions/goodAllocSize.html",
    "title": "Overloads for - goodAllocSize | Marmos Demo",
    "keywords": "Overloads for - goodAllocSize Module std.experimental.allocator.building_blocks.region Parent SharedRegion goodAllocSize(n) size_t goodAllocSize( size_t n ) Rounds the given size to a multiple of the alignment"
  },
  "phobos/std/experimental/allocator/building_blocks/region/SharedRegion/Functions/owns.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/SharedRegion/Functions/owns.html",
    "title": "Overloads for - owns | Marmos Demo",
    "keywords": "Overloads for - owns Module std.experimental.allocator.building_blocks.region Parent SharedRegion owns(b) Ternary owns( <bug: unknown> b ) Queries whether b has been allocated with this region. Params b <bug: unknown> Arbitrary block of memory (null is allowed; owns(null) returns false ). Returns true if b has been allocated with this region, false otherwise."
  },
  "phobos/std/experimental/allocator/building_blocks/region/SharedRegion/Functions/roundedBegin.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/SharedRegion/Functions/roundedBegin.html",
    "title": "Overloads for - roundedBegin | Marmos Demo",
    "keywords": "Overloads for - roundedBegin Module std.experimental.allocator.building_blocks.region Parent SharedRegion roundedBegin() <bug: unknown> roundedBegin( )"
  },
  "phobos/std/experimental/allocator/building_blocks/region/SharedRegion/Functions/roundedEnd.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/SharedRegion/Functions/roundedEnd.html",
    "title": "Overloads for - roundedEnd | Marmos Demo",
    "keywords": "Overloads for - roundedEnd Module std.experimental.allocator.building_blocks.region Parent SharedRegion roundedEnd() <bug: unknown> roundedEnd( )"
  },
  "phobos/std/experimental/allocator/building_blocks/region/Structs/BorrowedRegion.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/Structs/BorrowedRegion.html",
    "title": "Struct - BorrowedRegion | Marmos Demo",
    "keywords": "Struct - BorrowedRegion Module std.experimental.allocator.building_blocks.region public struct BorrowedRegion { // Alignment offered. alias alignment = <todo: marmos support pending>; // Allocates `n` bytes of memory aligned at alignment `a` . <bug: unknown> alignedAllocate( size_t n, uint a ) ; // Allocates `n` bytes of memory. The shortest path involves an alignment adjustment (if $(D alignment > 1)), an increment, and a comparison. <bug: unknown> allocate( size_t n ) ; // Allocates and returns all memory available to this region. <bug: unknown> allocateAll( ) ; // Nonstandard property that returns bytes available for allocation. size_t available( ) ; // Deallocates `b` . This works only if `b` was obtained as the last call to `allocate` ; otherwise (i.e. another allocation has occurred since) it does nothing. bool deallocate( <bug: unknown> b ) ; // Deallocates all memory allocated by this region, which can be subsequently reused for new allocations. bool deallocateAll( ) ; // Returns `Ternary.yes` if no memory has been allocated in this region, `Ternary.no` otherwise. (Never returns `Ternary.unknown` .) Ternary empty( ) ; // Expands an allocated block in place. Expansion will succeed only if the block is the last allocated. Defined only if `growDownwards` is `No.growDownwards` . bool expand( <bug: unknown> b, size_t delta ) ; // Rounds the given size to a multiple of the `alignment` size_t goodAllocSize( size_t n ) ; // Queries whether `b` has been allocated with this region. Ternary owns( <bug: unknown> b ) ; // <bug: unknown> roundedBegin( ) ; // <bug: unknown> roundedEnd( ) ; } About A BorrowedRegion allocates directly from a user-provided block of memory. Unlike a Region , a BorrowedRegion does not own the memory it allocates from and will not deallocate that memory upon destruction. Instead, it is the user's responsibility to ensure that the memory is properly disposed of. In all other respects, a BorrowedRegion behaves exactly like a Region . Aliases Name Description alignment Alignment offered. Functions Name Description alignedAllocate Allocates n bytes of memory aligned at alignment a . allocate Allocates n bytes of memory. The shortest path involves an alignment adjustment (if $(D alignment > 1)), an increment, and a comparison. allocateAll Allocates and returns all memory available to this region. available Nonstandard property that returns bytes available for allocation. deallocate Deallocates b . This works only if b was obtained as the last call to allocate ; otherwise (i.e. another allocation has occurred since) it does nothing. deallocateAll Deallocates all memory allocated by this region, which can be subsequently reused for new allocations. empty Returns Ternary.yes if no memory has been allocated in this region, Ternary.no otherwise. (Never returns Ternary.unknown .) expand Expands an allocated block in place. Expansion will succeed only if the block is the last allocated. Defined only if growDownwards is No.growDownwards . goodAllocSize Rounds the given size to a multiple of the alignment owns Queries whether b has been allocated with this region. roundedBegin roundedEnd"
  },
  "phobos/std/experimental/allocator/building_blocks/region/Structs/InSituRegion.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/Structs/InSituRegion.html",
    "title": "Struct - InSituRegion | Marmos Demo",
    "keywords": "Struct - InSituRegion Module std.experimental.allocator.building_blocks.region public struct InSituRegion { // An alias for `minAlign` , which must be a valid alignment (nonzero power of 2). The start of the region and all allocation requests will be rounded up to a multiple of the alignment. alias alignment = <todo: marmos support pending>; // As above, but the memory allocated is aligned at `a` bytes. <bug: unknown> alignedAllocate( size_t n, uint a ) ; // Allocates `bytes` and returns them, or `null` if the region cannot accommodate the request. For efficiency reasons, if $(D bytes == 0) the function returns an empty non-null slice. <bug: unknown> allocate( size_t n ) ; // Allocates all memory available with this allocator. <bug: unknown> allocateAll( ) ; // Nonstandard function that returns the bytes available for allocation. size_t available( ) ; // Deallocates `b` . This works only if `b` was obtained as the last call to `allocate` ; otherwise (i.e. another allocation has occurred since) it does nothing. This semantics is tricky and therefore `deallocate` is defined only if `Region` is instantiated with `Yes.defineDeallocate` as the third template argument. bool deallocate( <bug: unknown> b ) ; // Deallocates all memory allocated with this allocator. bool deallocateAll( ) ; // Expands an allocated block in place. Expansion will succeed only if the block is the last allocated. bool expand( <bug: unknown> b, size_t delta ) ; // void lazyInit( ) ; // Returns `Ternary.yes` if `b` is the result of a previous allocation, `Ternary.no` otherwise. Ternary owns( <bug: unknown> b ) ; // __enumMember growDownwards; } About InSituRegion is a convenient region that carries its storage within itself (in the form of a statically-sized array). The first template argument is the size of the region and the second is the needed alignment. Depending on the alignment requested and platform details, the actual available storage may be smaller than the compile-time parameter. To make sure that at least n bytes are available in the region, use $(D InSituRegion!(n + a - 1, a)). Given that the most frequent use of InSituRegion is as a stack allocator, it allocates starting at the end on systems where stack grows downwards, such that hot memory is used first. Aliases Name Description alignment An alias for minAlign , which must be a valid alignment (nonzero power of 2). The start of the region and all allocation requests will be rounded up to a multiple of the alignment. Functions Name Description alignedAllocate As above, but the memory allocated is aligned at a bytes. allocate Allocates bytes and returns them, or null if the region cannot accommodate the request. For efficiency reasons, if $(D bytes == 0) the function returns an empty non-null slice. allocateAll Allocates all memory available with this allocator. available Nonstandard function that returns the bytes available for allocation. deallocate Deallocates b . This works only if b was obtained as the last call to allocate ; otherwise (i.e. another allocation has occurred since) it does nothing. This semantics is tricky and therefore deallocate is defined only if Region is instantiated with Yes.defineDeallocate as the third template argument. deallocateAll Deallocates all memory allocated with this allocator. expand Expands an allocated block in place. Expansion will succeed only if the block is the last allocated. lazyInit owns Returns Ternary.yes if b is the result of a previous allocation, Ternary.no otherwise. Variables Name Description growDownwards"
  },
  "phobos/std/experimental/allocator/building_blocks/region/Structs/Region.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/Structs/Region.html",
    "title": "Struct - Region | Marmos Demo",
    "keywords": "Struct - Region Module std.experimental.allocator.building_blocks.region public struct Region { // Alignment offered. alias alignment = <todo: marmos support pending>; // Allocates `n` bytes of memory aligned at alignment `a` . <bug: unknown> alignedAllocate( size_t n, uint a ) ; // Allocates `n` bytes of memory. The shortest path involves an alignment adjustment (if $(D alignment > 1)), an increment, and a comparison. <bug: unknown> allocate( size_t n ) ; // Allocates and returns all memory available to this region. <bug: unknown> allocateAll( ) ; // Nonstandard property that returns bytes available for allocation. size_t available( ) ; // Deallocates `b` . This works only if `b` was obtained as the last call to `allocate` ; otherwise (i.e. another allocation has occurred since) it does nothing. bool deallocate( <bug: unknown> b ) ; // Deallocates all memory allocated by this region, which can be subsequently reused for new allocations. bool deallocateAll( ) ; // Returns `Ternary.yes` if no memory has been allocated in this region, `Ternary.no` otherwise. (Never returns `Ternary.unknown` .) Ternary empty( ) ; // Expands an allocated block in place. Expansion will succeed only if the block is the last allocated. Defined only if `growDownwards` is `No.growDownwards` . bool expand( <bug: unknown> b, size_t delta ) ; // Rounds the given size to a multiple of the `alignment` size_t goodAllocSize( size_t n ) ; // Queries whether `b` has been allocated with this region. Ternary owns( <bug: unknown> b ) ; // <bug: unknown> roundedBegin( ) ; // <bug: unknown> roundedEnd( ) ; // The parent allocator. Depending on whether `ParentAllocator` holds state or not, this is a member variable or an alias for `ParentAllocator.instance` . ParentAllocator parent; } About A Region allocator allocates memory straight from one contiguous chunk. There is no deallocation, and once the region is full, allocation requests return null . Therefore, Region s are often used (a) in conjunction with more sophisticated allocators; or (b) for batch-style very fast allocations that deallocate everything at once. The region only stores three pointers, corresponding to the current position in the store and the limits. One allocation entails rounding up the allocation size for alignment purposes, bumping the current pointer, and comparing it against the limit. Region deallocates the chunk of memory during destruction. The minAlign parameter establishes alignment. If $(D minAlign > 1), the sizes of all allocation requests are rounded up to a multiple of minAlign . Applications aiming at maximum speed may want to choose $(D minAlign = 1) and control alignment externally. Aliases Name Description alignment Alignment offered. Functions Name Description alignedAllocate Allocates n bytes of memory aligned at alignment a . allocate Allocates n bytes of memory. The shortest path involves an alignment adjustment (if $(D alignment > 1)), an increment, and a comparison. allocateAll Allocates and returns all memory available to this region. available Nonstandard property that returns bytes available for allocation. deallocate Deallocates b . This works only if b was obtained as the last call to allocate ; otherwise (i.e. another allocation has occurred since) it does nothing. deallocateAll Deallocates all memory allocated by this region, which can be subsequently reused for new allocations. empty Returns Ternary.yes if no memory has been allocated in this region, Ternary.no otherwise. (Never returns Ternary.unknown .) expand Expands an allocated block in place. Expansion will succeed only if the block is the last allocated. Defined only if growDownwards is No.growDownwards . goodAllocSize Rounds the given size to a multiple of the alignment owns Queries whether b has been allocated with this region. roundedBegin roundedEnd Variables Name Description parent The parent allocator. Depending on whether ParentAllocator holds state or not, this is a member variable or an alias for ParentAllocator.instance ."
  },
  "phobos/std/experimental/allocator/building_blocks/region/Structs/SharedBorrowedRegion.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/Structs/SharedBorrowedRegion.html",
    "title": "Struct - SharedBorrowedRegion | Marmos Demo",
    "keywords": "Struct - SharedBorrowedRegion Module std.experimental.allocator.building_blocks.region public struct SharedBorrowedRegion { // Alignment offered. alias alignment = <todo: marmos support pending>; // Allocates `n` bytes of memory aligned at alignment `a` . <bug: unknown> alignedAllocate( size_t n, uint a ) ; // Allocates `n` bytes of memory. The allocation is served by atomically incrementing a pointer which keeps track of the current used space. <bug: unknown> allocate( size_t n ) ; // Deallocates `b` . This works only if `b` was obtained as the last call to `allocate` ; otherwise (i.e. another allocation has occurred since) it does nothing. bool deallocate( <bug: unknown> b ) ; // Deallocates all memory allocated by this region, which can be subsequently reused for new allocations. bool deallocateAll( ) ; // Returns `Ternary.yes` if no memory has been allocated in this region, `Ternary.no` otherwise. (Never returns `Ternary.unknown` .) Ternary empty( ) ; // Rounds the given size to a multiple of the `alignment` size_t goodAllocSize( size_t n ) ; // Queries whether `b` has been allocated with this region. Ternary owns( <bug: unknown> b ) ; // <bug: unknown> roundedBegin( ) ; // <bug: unknown> roundedEnd( ) ; } About A SharedBorrowedRegion allocates directly from a user-provided block of memory. Unlike a SharedRegion , a SharedBorrowedRegion does not own the memory it allocates from and will not deallocate that memory upon destruction. Instead, it is the user's responsibility to ensure that the memory is properly disposed of. In all other respects, a SharedBorrowedRegion behaves exactly like a SharedRegion . Aliases Name Description alignment Alignment offered. Functions Name Description alignedAllocate Allocates n bytes of memory aligned at alignment a . allocate Allocates n bytes of memory. The allocation is served by atomically incrementing a pointer which keeps track of the current used space. deallocate Deallocates b . This works only if b was obtained as the last call to allocate ; otherwise (i.e. another allocation has occurred since) it does nothing. deallocateAll Deallocates all memory allocated by this region, which can be subsequently reused for new allocations. empty Returns Ternary.yes if no memory has been allocated in this region, Ternary.no otherwise. (Never returns Ternary.unknown .) goodAllocSize Rounds the given size to a multiple of the alignment owns Queries whether b has been allocated with this region. roundedBegin roundedEnd"
  },
  "phobos/std/experimental/allocator/building_blocks/region/Structs/SharedRegion.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/region/Structs/SharedRegion.html",
    "title": "Struct - SharedRegion | Marmos Demo",
    "keywords": "Struct - SharedRegion Module std.experimental.allocator.building_blocks.region public struct SharedRegion { // Alignment offered. alias alignment = <todo: marmos support pending>; // Allocates `n` bytes of memory aligned at alignment `a` . Params: n = number of bytes to allocate a = alignment for the allocated block <bug: unknown> alignedAllocate( size_t n, uint a ) ; // Allocates `n` bytes of memory. The allocation is served by atomically incrementing a pointer which keeps track of the current used space. <bug: unknown> allocate( size_t n ) ; // Deallocates `b` . This works only if `b` was obtained as the last call to `allocate` ; otherwise (i.e. another allocation has occurred since) it does nothing. bool deallocate( <bug: unknown> b ) ; // Deallocates all memory allocated by this region, which can be subsequently reused for new allocations. bool deallocateAll( ) ; // Returns `Ternary.yes` if no memory has been allocated in this region, `Ternary.no` otherwise. (Never returns `Ternary.unknown` .) Ternary empty( ) ; // Rounds the given size to a multiple of the `alignment` size_t goodAllocSize( size_t n ) ; // Queries whether `b` has been allocated with this region. Ternary owns( <bug: unknown> b ) ; // <bug: unknown> roundedBegin( ) ; // <bug: unknown> roundedEnd( ) ; // The parent allocator. Depending on whether `ParentAllocator` holds state or not, this is a member variable or an alias for `ParentAllocator.instance` . ParentAllocator parent; } About The threadsafe version of the Region allocator. Allocations and deallocations are lock-free based using $(REF cas, core,atomic). Aliases Name Description alignment Alignment offered. Functions Name Description alignedAllocate Allocates n bytes of memory aligned at alignment a . Params: n = number of bytes to allocate a = alignment for the allocated block allocate Allocates n bytes of memory. The allocation is served by atomically incrementing a pointer which keeps track of the current used space. deallocate Deallocates b . This works only if b was obtained as the last call to allocate ; otherwise (i.e. another allocation has occurred since) it does nothing. deallocateAll Deallocates all memory allocated by this region, which can be subsequently reused for new allocations. empty Returns Ternary.yes if no memory has been allocated in this region, Ternary.no otherwise. (Never returns Ternary.unknown .) goodAllocSize Rounds the given size to a multiple of the alignment owns Queries whether b has been allocated with this region. roundedBegin roundedEnd Variables Name Description parent The parent allocator. Depending on whether ParentAllocator holds state or not, this is a member variable or an alias for ParentAllocator.instance ."
  },
  "phobos/std/experimental/allocator/building_blocks/scoped_allocator/Overview.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/scoped_allocator/Overview.html",
    "title": "Module - std.experimental.allocator.building_blocks.scoped_allocator | Marmos Demo",
    "keywords": "Module - std.experimental.allocator.building_blocks.scoped_allocator About Source: $(PHOBOSSRC std/experimental/allocator/building_blocks/scoped_allocator.d) Structs Name Description ScopedAllocator ScopedAllocator delegates all allocation requests to ParentAllocator . When destroyed, the ScopedAllocator object automatically calls $(D deallocate) for all memory allocated through its lifetime. (The $(D deallocateAll) function is also implemented with the same semantics.)"
  },
  "phobos/std/experimental/allocator/building_blocks/scoped_allocator/ScopedAllocator/Functions/allocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/scoped_allocator/ScopedAllocator/Functions/allocate.html",
    "title": "Overloads for - allocate | Marmos Demo",
    "keywords": "Overloads for - allocate Module std.experimental.allocator.building_blocks.scoped_allocator Parent ScopedAllocator allocate(n) <bug: unknown> allocate( size_t n ) Allocates memory. For management it actually allocates extra memory from the parent."
  },
  "phobos/std/experimental/allocator/building_blocks/scoped_allocator/ScopedAllocator/Functions/deallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/scoped_allocator/ScopedAllocator/Functions/deallocate.html",
    "title": "Overloads for - deallocate | Marmos Demo",
    "keywords": "Overloads for - deallocate Module std.experimental.allocator.building_blocks.scoped_allocator Parent ScopedAllocator deallocate(b) bool deallocate( <bug: unknown> b ) Deallocates b ."
  },
  "phobos/std/experimental/allocator/building_blocks/scoped_allocator/ScopedAllocator/Functions/deallocateAll.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/scoped_allocator/ScopedAllocator/Functions/deallocateAll.html",
    "title": "Overloads for - deallocateAll | Marmos Demo",
    "keywords": "Overloads for - deallocateAll Module std.experimental.allocator.building_blocks.scoped_allocator Parent ScopedAllocator deallocateAll() bool deallocateAll( ) Deallocates all memory allocated."
  },
  "phobos/std/experimental/allocator/building_blocks/scoped_allocator/ScopedAllocator/Functions/empty.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/scoped_allocator/ScopedAllocator/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.experimental.allocator.building_blocks.scoped_allocator Parent ScopedAllocator empty() Ternary empty( ) Returns Ternary.yes if this allocator is not responsible for any memory, Ternary.no otherwise. (Never returns Ternary.unknown .)"
  },
  "phobos/std/experimental/allocator/building_blocks/scoped_allocator/ScopedAllocator/Functions/expand.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/scoped_allocator/ScopedAllocator/Functions/expand.html",
    "title": "Overloads for - expand | Marmos Demo",
    "keywords": "Overloads for - expand Module std.experimental.allocator.building_blocks.scoped_allocator Parent ScopedAllocator expand(b, delta) bool expand( <bug: unknown> b, size_t delta ) Forwards to $(D parent.expand(b, delta))."
  },
  "phobos/std/experimental/allocator/building_blocks/scoped_allocator/ScopedAllocator/Functions/goodAllocSize.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/scoped_allocator/ScopedAllocator/Functions/goodAllocSize.html",
    "title": "Overloads for - goodAllocSize | Marmos Demo",
    "keywords": "Overloads for - goodAllocSize Module std.experimental.allocator.building_blocks.scoped_allocator Parent ScopedAllocator goodAllocSize(n) size_t goodAllocSize( size_t n ) Forwards to parent.goodAllocSize (which accounts for the management overhead)."
  },
  "phobos/std/experimental/allocator/building_blocks/scoped_allocator/ScopedAllocator/Functions/owns.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/scoped_allocator/ScopedAllocator/Functions/owns.html",
    "title": "Overloads for - owns | Marmos Demo",
    "keywords": "Overloads for - owns Module std.experimental.allocator.building_blocks.scoped_allocator Parent ScopedAllocator owns(b) Ternary owns( <bug: unknown> b ) Forwards to parent.owns(b) ."
  },
  "phobos/std/experimental/allocator/building_blocks/scoped_allocator/ScopedAllocator/Functions/reallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/scoped_allocator/ScopedAllocator/Functions/reallocate.html",
    "title": "Overloads for - reallocate | Marmos Demo",
    "keywords": "Overloads for - reallocate Module std.experimental.allocator.building_blocks.scoped_allocator Parent ScopedAllocator reallocate(b, s) bool reallocate( <bug: unknown> b, size_t s ) Reallocates b to new size s ."
  },
  "phobos/std/experimental/allocator/building_blocks/scoped_allocator/Structs/ScopedAllocator.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/scoped_allocator/Structs/ScopedAllocator.html",
    "title": "Struct - ScopedAllocator | Marmos Demo",
    "keywords": "Struct - ScopedAllocator Module std.experimental.allocator.building_blocks.scoped_allocator public struct ScopedAllocator { // alias Allocator = <todo: marmos support pending>; // Allocates memory. For management it actually allocates extra memory from the parent. <bug: unknown> allocate( size_t n ) ; // Deallocates `b` . bool deallocate( <bug: unknown> b ) ; // Deallocates all memory allocated. bool deallocateAll( ) ; // Returns `Ternary.yes` if this allocator is not responsible for any memory, `Ternary.no` otherwise. (Never returns `Ternary.unknown` .) Ternary empty( ) ; // Forwards to $(D parent.expand(b, delta)). bool expand( <bug: unknown> b, size_t delta ) ; // Forwards to `parent.goodAllocSize` (which accounts for the management overhead). size_t goodAllocSize( size_t n ) ; // Forwards to `parent.owns(b)` . Ternary owns( <bug: unknown> b ) ; // Reallocates `b` to new size `s` . bool reallocate( <bug: unknown> b, size_t s ) ; // Alignment offered __enumMember alignment; // If `ParentAllocator` is stateful, `parent` is a property giving access to an `AffixAllocator!ParentAllocator` . Otherwise, `parent` is an alias for `AffixAllocator!ParentAllocator.instance` . Allocator parent; // <bug: unknown> root; } About ScopedAllocator delegates all allocation requests to ParentAllocator . When destroyed, the ScopedAllocator object automatically calls $(D deallocate) for all memory allocated through its lifetime. (The $(D deallocateAll) function is also implemented with the same semantics.) deallocate is also supported, which is where most implementation effort and overhead of ScopedAllocator go. If deallocate is not needed, a simpler design combining AllocatorList with Region is recommended. Aliases Name Description Allocator Functions Name Description allocate Allocates memory. For management it actually allocates extra memory from the parent. deallocate Deallocates b . deallocateAll Deallocates all memory allocated. empty Returns Ternary.yes if this allocator is not responsible for any memory, Ternary.no otherwise. (Never returns Ternary.unknown .) expand Forwards to $(D parent.expand(b, delta)). goodAllocSize Forwards to parent.goodAllocSize (which accounts for the management overhead). owns Forwards to parent.owns(b) . reallocate Reallocates b to new size s . Variables Name Description alignment Alignment offered parent If ParentAllocator is stateful, parent is a property giving access to an AffixAllocator!ParentAllocator . Otherwise, parent is an alias for AffixAllocator!ParentAllocator.instance . root"
  },
  "phobos/std/experimental/allocator/building_blocks/segregator/Overview.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/segregator/Overview.html",
    "title": "Module - std.experimental.allocator.building_blocks.segregator | Marmos Demo",
    "keywords": "Module - std.experimental.allocator.building_blocks.segregator About Source: $(PHOBOSSRC std/experimental/allocator/building_blocks/segregator.d) Structs Name Description Segregator Dispatches allocations (and deallocations) between two allocators ($(D SmallAllocator) and LargeAllocator ) depending on the size allocated, as follows. All allocations smaller than or equal to threshold will be dispatched to SmallAllocator . The others will go to LargeAllocator ."
  },
  "phobos/std/experimental/allocator/building_blocks/segregator/Segregator/Functions/alignedAllocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/segregator/Segregator/Functions/alignedAllocate.html",
    "title": "Overloads for - alignedAllocate | Marmos Demo",
    "keywords": "Overloads for - alignedAllocate Module std.experimental.allocator.building_blocks.segregator Parent Segregator alignedAllocate(__anonymous, __anonymous) <bug: unknown> alignedAllocate( size_t __anonymous, uint __anonymous ) This method is defined if both allocators define it, and forwards to SmallAllocator or LargeAllocator appropriately."
  },
  "phobos/std/experimental/allocator/building_blocks/segregator/Segregator/Functions/alignedReallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/segregator/Segregator/Functions/alignedReallocate.html",
    "title": "Overloads for - alignedReallocate | Marmos Demo",
    "keywords": "Overloads for - alignedReallocate Module std.experimental.allocator.building_blocks.segregator Parent Segregator alignedReallocate(b, s, a) bool alignedReallocate( <bug: unknown> b, size_t s, uint a ) This method is defined only if at least one of the allocators defines it, and work similarly to reallocate ."
  },
  "phobos/std/experimental/allocator/building_blocks/segregator/Segregator/Functions/allocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/segregator/Segregator/Functions/allocate.html",
    "title": "Overloads for - allocate | Marmos Demo",
    "keywords": "Overloads for - allocate Module std.experimental.allocator.building_blocks.segregator Parent Segregator allocate(__anonymous) <bug: unknown> allocate( size_t __anonymous ) The memory is obtained from SmallAllocator if $(D s <= threshold), or LargeAllocator otherwise."
  },
  "phobos/std/experimental/allocator/building_blocks/segregator/Segregator/Functions/deallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/segregator/Segregator/Functions/deallocate.html",
    "title": "Overloads for - deallocate | Marmos Demo",
    "keywords": "Overloads for - deallocate Module std.experimental.allocator.building_blocks.segregator Parent Segregator deallocate(b) bool deallocate( <bug: unknown> b ) This function is defined only if both allocators define it, and forwards appropriately depending on b.length ."
  },
  "phobos/std/experimental/allocator/building_blocks/segregator/Segregator/Functions/deallocateAll.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/segregator/Segregator/Functions/deallocateAll.html",
    "title": "Overloads for - deallocateAll | Marmos Demo",
    "keywords": "Overloads for - deallocateAll Module std.experimental.allocator.building_blocks.segregator Parent Segregator deallocateAll() bool deallocateAll( ) This function is defined only if both allocators define it, and calls deallocateAll for them in turn."
  },
  "phobos/std/experimental/allocator/building_blocks/segregator/Segregator/Functions/empty.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/segregator/Segregator/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.experimental.allocator.building_blocks.segregator Parent Segregator empty() Ternary empty( ) This function is defined only if both allocators define it, and returns the conjunction of empty calls for the two."
  },
  "phobos/std/experimental/allocator/building_blocks/segregator/Segregator/Functions/expand.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/segregator/Segregator/Functions/expand.html",
    "title": "Overloads for - expand | Marmos Demo",
    "keywords": "Overloads for - expand Module std.experimental.allocator.building_blocks.segregator Parent Segregator expand(b, delta) bool expand( <bug: unknown> b, size_t delta ) This method is defined only if at least one of the allocators defines it. If SmallAllocator defines expand and $(D b.length + delta <= threshold), the call is forwarded to SmallAllocator . If $(D LargeAllocator) defines expand and $(D b.length > threshold), the call is forwarded to LargeAllocator . Otherwise, the call returns false ."
  },
  "phobos/std/experimental/allocator/building_blocks/segregator/Segregator/Functions/goodAllocSize.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/segregator/Segregator/Functions/goodAllocSize.html",
    "title": "Overloads for - goodAllocSize | Marmos Demo",
    "keywords": "Overloads for - goodAllocSize Module std.experimental.allocator.building_blocks.segregator Parent Segregator goodAllocSize(s) size_t goodAllocSize( size_t s ) static This method is defined only if at least one of the allocators defines it. The good allocation size is obtained from SmallAllocator if $(D s <= threshold), or LargeAllocator otherwise. (If one of the allocators does not define goodAllocSize , the default implementation in this module applies.)"
  },
  "phobos/std/experimental/allocator/building_blocks/segregator/Segregator/Functions/owns.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/segregator/Segregator/Functions/owns.html",
    "title": "Overloads for - owns | Marmos Demo",
    "keywords": "Overloads for - owns Module std.experimental.allocator.building_blocks.segregator Parent Segregator owns(b) Ternary owns( <bug: unknown> b ) This method is defined only if both allocators define it. The call is forwarded to SmallAllocator if $(D b.length <= threshold), or $(D LargeAllocator) otherwise."
  },
  "phobos/std/experimental/allocator/building_blocks/segregator/Segregator/Functions/reallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/segregator/Segregator/Functions/reallocate.html",
    "title": "Overloads for - reallocate | Marmos Demo",
    "keywords": "Overloads for - reallocate Module std.experimental.allocator.building_blocks.segregator Parent Segregator reallocate(b, s) bool reallocate( <bug: unknown> b, size_t s ) This method is defined only if at least one of the allocators defines it. If SmallAllocator defines reallocate and $(D b.length <= threshold && s <= threshold), the call is forwarded to $(D SmallAllocator). If LargeAllocator defines expand and $(D b.length > threshold && s > threshold), the call is forwarded to $(D LargeAllocator). Otherwise, the call returns false ."
  },
  "phobos/std/experimental/allocator/building_blocks/segregator/Structs/Segregator.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/segregator/Structs/Segregator.html",
    "title": "Struct - Segregator | Marmos Demo",
    "keywords": "Struct - Segregator Module std.experimental.allocator.building_blocks.segregator public struct Segregator { // This method is defined if both allocators define it, and forwards to `SmallAllocator` or `LargeAllocator` appropriately. <bug: unknown> alignedAllocate( size_t __anonymous, uint __anonymous ) ; // This method is defined only if at least one of the allocators defines it, and work similarly to `reallocate` . bool alignedReallocate( <bug: unknown> b, size_t s, uint a ) ; // The memory is obtained from `SmallAllocator` if $(D s <= threshold), or `LargeAllocator` otherwise. <bug: unknown> allocate( size_t __anonymous ) ; // This function is defined only if both allocators define it, and forwards appropriately depending on `b.length` . bool deallocate( <bug: unknown> b ) ; // This function is defined only if both allocators define it, and calls `deallocateAll` for them in turn. bool deallocateAll( ) ; // This function is defined only if both allocators define it, and returns the conjunction of `empty` calls for the two. Ternary empty( ) ; // This method is defined only if at least one of the allocators defines it. If `SmallAllocator` defines `expand` and $(D b.length + delta <= threshold), the call is forwarded to `SmallAllocator` . If $(D LargeAllocator) defines `expand` and $(D b.length > threshold), the call is forwarded to `LargeAllocator` . Otherwise, the call returns `false` . bool expand( <bug: unknown> b, size_t delta ) ; // This method is defined only if at least one of the allocators defines it. The good allocation size is obtained from `SmallAllocator` if $(D s <= threshold), or `LargeAllocator` otherwise. (If one of the allocators does not define `goodAllocSize` , the default implementation in this module applies.) size_t goodAllocSize( size_t s ) static; // This method is defined only if both allocators define it. The call is forwarded to `SmallAllocator` if $(D b.length <= threshold), or $(D LargeAllocator) otherwise. Ternary owns( <bug: unknown> b ) ; // This method is defined only if at least one of the allocators defines it. If `SmallAllocator` defines `reallocate` and $(D b.length <= threshold && s <= threshold), the call is forwarded to $(D SmallAllocator). If `LargeAllocator` defines `expand` and $(D b.length > threshold && s > threshold), the call is forwarded to $(D LargeAllocator). Otherwise, the call returns `false` . bool reallocate( <bug: unknown> b, size_t s ) ; // The alignment offered is the minimum of the two allocators' alignment. uint alignment; // uint alignment; // static shared Segregator instance; // __enumMember sharedMethods; } About Dispatches allocations (and deallocations) between two allocators ($(D SmallAllocator) and LargeAllocator ) depending on the size allocated, as follows. All allocations smaller than or equal to threshold will be dispatched to SmallAllocator . The others will go to LargeAllocator . If both allocators are shared , the Segregator will also offer $(D shared) methods. Functions Name Description alignedAllocate This method is defined if both allocators define it, and forwards to SmallAllocator or LargeAllocator appropriately. alignedReallocate This method is defined only if at least one of the allocators defines it, and work similarly to reallocate . allocate The memory is obtained from SmallAllocator if $(D s <= threshold), or LargeAllocator otherwise. deallocate This function is defined only if both allocators define it, and forwards appropriately depending on b.length . deallocateAll This function is defined only if both allocators define it, and calls deallocateAll for them in turn. empty This function is defined only if both allocators define it, and returns the conjunction of empty calls for the two. expand This method is defined only if at least one of the allocators defines it. If SmallAllocator defines expand and $(D b.length + delta <= threshold), the call is forwarded to SmallAllocator . If $(D LargeAllocator) defines expand and $(D b.length > threshold), the call is forwarded to LargeAllocator . Otherwise, the call returns false . goodAllocSize This method is defined only if at least one of the allocators defines it. The good allocation size is obtained from SmallAllocator if $(D s <= threshold), or LargeAllocator otherwise. (If one of the allocators does not define goodAllocSize , the default implementation in this module applies.) owns This method is defined only if both allocators define it. The call is forwarded to SmallAllocator if $(D b.length <= threshold), or $(D LargeAllocator) otherwise. reallocate This method is defined only if at least one of the allocators defines it. If SmallAllocator defines reallocate and $(D b.length <= threshold && s <= threshold), the call is forwarded to $(D SmallAllocator). If LargeAllocator defines expand and $(D b.length > threshold && s > threshold), the call is forwarded to $(D LargeAllocator). Otherwise, the call returns false . Variables Name Description alignment The alignment offered is the minimum of the two allocators' alignment. alignment instance sharedMethods"
  },
  "phobos/std/experimental/allocator/building_blocks/stats_collector/Overview.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/stats_collector/Overview.html",
    "title": "Module - std.experimental.allocator.building_blocks.stats_collector | Marmos Demo",
    "keywords": "Module - std.experimental.allocator.building_blocks.stats_collector About Allocator that collects useful statistics about allocations, both global and per calling point. The statistics collected can be configured statically by choosing combinations of Options appropriately. Source: $(PHOBOSSRC std/experimental/allocator/building_blocks/stats_collector.d) Structs Name Description StatsCollector Allocator that collects extra data about allocations. Since each piece of information adds size and time overhead, statistics can be individually enabled or disabled through compile-time flags ."
  },
  "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/alignedAllocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/alignedAllocate.html",
    "title": "Overloads for - alignedAllocate | Marmos Demo",
    "keywords": "Overloads for - alignedAllocate Module std.experimental.allocator.building_blocks.stats_collector Parent StatsCollector alignedAllocate(n, a) <bug: unknown> alignedAllocate( size_t n, uint a ) Forwards to parent.alignedAllocate . Affects per instance: numAlignedAllocate , bytesUsed , bytesAllocated , bytesSlack , numAlignedAllocateOk , and bytesHighTide . Affects per call: numAlignedAllocate , numAlignedAllocateOk , and bytesAllocated ."
  },
  "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/allocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/allocate.html",
    "title": "Overloads for - allocate | Marmos Demo",
    "keywords": "Overloads for - allocate Module std.experimental.allocator.building_blocks.stats_collector Parent StatsCollector allocate(n) <bug: unknown> allocate( size_t n ) Forwards to parent.allocate . Affects per instance: numAllocate , bytesUsed , bytesAllocated , bytesSlack , numAllocateOK , and bytesHighTide . Affects per call: numAllocate , $(D numAllocateOK), and bytesAllocated ."
  },
  "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/byFileLine.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/byFileLine.html",
    "title": "Overloads for - byFileLine | Marmos Demo",
    "keywords": "Overloads for - byFileLine Module std.experimental.allocator.building_blocks.stats_collector Parent StatsCollector byFileLine() <bug: unknown> byFileLine( ) static auto Defined if perCallFlags is nonzero. Iterates all monitored file/line instances. The order of iteration is not meaningful (items are inserted at the front of a list upon the first call), so preprocessing the statistics after collection might be appropriate."
  },
  "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/bytesAllocated.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/bytesAllocated.html",
    "title": "Overloads for - bytesAllocated | Marmos Demo",
    "keywords": "Overloads for - bytesAllocated Module std.experimental.allocator.building_blocks.stats_collector Parent StatsCollector bytesAllocated() ulong bytesAllocated( ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/bytesContracted.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/bytesContracted.html",
    "title": "Overloads for - bytesContracted | Marmos Demo",
    "keywords": "Overloads for - bytesContracted Module std.experimental.allocator.building_blocks.stats_collector Parent StatsCollector bytesContracted() ulong bytesContracted( ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/bytesExpanded.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/bytesExpanded.html",
    "title": "Overloads for - bytesExpanded | Marmos Demo",
    "keywords": "Overloads for - bytesExpanded Module std.experimental.allocator.building_blocks.stats_collector Parent StatsCollector bytesExpanded() ulong bytesExpanded( ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/bytesHighTide.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/bytesHighTide.html",
    "title": "Overloads for - bytesHighTide | Marmos Demo",
    "keywords": "Overloads for - bytesHighTide Module std.experimental.allocator.building_blocks.stats_collector Parent StatsCollector bytesHighTide() ulong bytesHighTide( ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/bytesMoved.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/bytesMoved.html",
    "title": "Overloads for - bytesMoved | Marmos Demo",
    "keywords": "Overloads for - bytesMoved Module std.experimental.allocator.building_blocks.stats_collector Parent StatsCollector bytesMoved() ulong bytesMoved( ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/bytesNotMoved.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/bytesNotMoved.html",
    "title": "Overloads for - bytesNotMoved | Marmos Demo",
    "keywords": "Overloads for - bytesNotMoved Module std.experimental.allocator.building_blocks.stats_collector Parent StatsCollector bytesNotMoved() ulong bytesNotMoved( ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/bytesSlack.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/bytesSlack.html",
    "title": "Overloads for - bytesSlack | Marmos Demo",
    "keywords": "Overloads for - bytesSlack Module std.experimental.allocator.building_blocks.stats_collector Parent StatsCollector bytesSlack() ulong bytesSlack( ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/bytesUsed.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/bytesUsed.html",
    "title": "Overloads for - bytesUsed | Marmos Demo",
    "keywords": "Overloads for - bytesUsed Module std.experimental.allocator.building_blocks.stats_collector Parent StatsCollector bytesUsed() ulong bytesUsed( ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/deallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/deallocate.html",
    "title": "Overloads for - deallocate | Marmos Demo",
    "keywords": "Overloads for - deallocate Module std.experimental.allocator.building_blocks.stats_collector Parent StatsCollector deallocate(b) bool deallocate( <bug: unknown> b ) Defined whether or not Allocator.deallocate is defined. Affects per instance: numDeallocate , bytesUsed , and bytesSlack . Affects per call: numDeallocate and bytesContracted ."
  },
  "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/deallocateAll.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/deallocateAll.html",
    "title": "Overloads for - deallocateAll | Marmos Demo",
    "keywords": "Overloads for - deallocateAll Module std.experimental.allocator.building_blocks.stats_collector Parent StatsCollector deallocateAll() bool deallocateAll( ) Defined only if Allocator.deallocateAll is defined. Affects per instance and per call numDeallocateAll ."
  },
  "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/define.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/define.html",
    "title": "Overloads for - define | Marmos Demo",
    "keywords": "Overloads for - define Module std.experimental.allocator.building_blocks.stats_collector Parent StatsCollector define(type, names) string define( string type, <bug: unknown> names ) static"
  },
  "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/empty.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.experimental.allocator.building_blocks.stats_collector Parent StatsCollector empty() Ternary empty( ) Defined only if Options.bytesUsed is defined. Returns $(D bytesUsed == 0)."
  },
  "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/expand.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/expand.html",
    "title": "Overloads for - expand | Marmos Demo",
    "keywords": "Overloads for - expand Module std.experimental.allocator.building_blocks.stats_collector Parent StatsCollector expand(b, delta) bool expand( <bug: unknown> b, size_t delta ) Defined whether or not Allocator.expand is defined. Affects per instance: numExpand , numExpandOK , bytesExpanded , bytesSlack , bytesAllocated , and bytesUsed . Affects per call: numExpand , numExpandOK , bytesExpanded , and bytesAllocated ."
  },
  "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/numAlignedAllocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/numAlignedAllocate.html",
    "title": "Overloads for - numAlignedAllocate | Marmos Demo",
    "keywords": "Overloads for - numAlignedAllocate Module std.experimental.allocator.building_blocks.stats_collector Parent StatsCollector numAlignedAllocate() ulong numAlignedAllocate( ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/numAlignedAllocateOk.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/numAlignedAllocateOk.html",
    "title": "Overloads for - numAlignedAllocateOk | Marmos Demo",
    "keywords": "Overloads for - numAlignedAllocateOk Module std.experimental.allocator.building_blocks.stats_collector Parent StatsCollector numAlignedAllocateOk() ulong numAlignedAllocateOk( ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/numAllocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/numAllocate.html",
    "title": "Overloads for - numAllocate | Marmos Demo",
    "keywords": "Overloads for - numAllocate Module std.experimental.allocator.building_blocks.stats_collector Parent StatsCollector numAllocate() ulong numAllocate( ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/numAllocateOK.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/numAllocateOK.html",
    "title": "Overloads for - numAllocateOK | Marmos Demo",
    "keywords": "Overloads for - numAllocateOK Module std.experimental.allocator.building_blocks.stats_collector Parent StatsCollector numAllocateOK() ulong numAllocateOK( ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/numDeallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/numDeallocate.html",
    "title": "Overloads for - numDeallocate | Marmos Demo",
    "keywords": "Overloads for - numDeallocate Module std.experimental.allocator.building_blocks.stats_collector Parent StatsCollector numDeallocate() ulong numDeallocate( ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/numDeallocateAll.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/numDeallocateAll.html",
    "title": "Overloads for - numDeallocateAll | Marmos Demo",
    "keywords": "Overloads for - numDeallocateAll Module std.experimental.allocator.building_blocks.stats_collector Parent StatsCollector numDeallocateAll() ulong numDeallocateAll( ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/numExpand.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/numExpand.html",
    "title": "Overloads for - numExpand | Marmos Demo",
    "keywords": "Overloads for - numExpand Module std.experimental.allocator.building_blocks.stats_collector Parent StatsCollector numExpand() ulong numExpand( ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/numExpandOK.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/numExpandOK.html",
    "title": "Overloads for - numExpandOK | Marmos Demo",
    "keywords": "Overloads for - numExpandOK Module std.experimental.allocator.building_blocks.stats_collector Parent StatsCollector numExpandOK() ulong numExpandOK( ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/numOwns.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/numOwns.html",
    "title": "Overloads for - numOwns | Marmos Demo",
    "keywords": "Overloads for - numOwns Module std.experimental.allocator.building_blocks.stats_collector Parent StatsCollector numOwns() ulong numOwns( ) Read-only properties enabled by the homonym flags chosen by the user. Example ---- StatsCollector!(Mallocator, Options.bytesUsed | Options.bytesAllocated) a; auto d1 = a.allocate(10); auto d2 = a.allocate(11); a.deallocate(d1); assert(a.bytesAllocated == 21); assert(a.bytesUsed == 11); a.deallocate(d2); assert(a.bytesAllocated == 21); assert(a.bytesUsed == 0); ----"
  },
  "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/numReallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/numReallocate.html",
    "title": "Overloads for - numReallocate | Marmos Demo",
    "keywords": "Overloads for - numReallocate Module std.experimental.allocator.building_blocks.stats_collector Parent StatsCollector numReallocate() ulong numReallocate( ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/numReallocateInPlace.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/numReallocateInPlace.html",
    "title": "Overloads for - numReallocateInPlace | Marmos Demo",
    "keywords": "Overloads for - numReallocateInPlace Module std.experimental.allocator.building_blocks.stats_collector Parent StatsCollector numReallocateInPlace() ulong numReallocateInPlace( ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/numReallocateOK.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/numReallocateOK.html",
    "title": "Overloads for - numReallocateOK | Marmos Demo",
    "keywords": "Overloads for - numReallocateOK Module std.experimental.allocator.building_blocks.stats_collector Parent StatsCollector numReallocateOK() ulong numReallocateOK( ) Ditto"
  },
  "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/owns.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/owns.html",
    "title": "Overloads for - owns | Marmos Demo",
    "keywords": "Overloads for - owns Module std.experimental.allocator.building_blocks.stats_collector Parent StatsCollector owns(b) Ternary owns( <bug: unknown> b ) Increments numOwns (per instance and and per call) and forwards to $(D parent.owns(b))."
  },
  "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/reallocate.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/stats_collector/StatsCollector/Functions/reallocate.html",
    "title": "Overloads for - reallocate | Marmos Demo",
    "keywords": "Overloads for - reallocate Module std.experimental.allocator.building_blocks.stats_collector Parent StatsCollector reallocate(b, s) bool reallocate( <bug: unknown> b, size_t s ) Defined whether or not Allocator.reallocate is defined. Affects per instance: numReallocate , numReallocateOK , $(D numReallocateInPlace), bytesNotMoved , bytesAllocated , $(D bytesSlack), bytesExpanded , and bytesContracted . Affects per call: numReallocate , numReallocateOK , numReallocateInPlace , bytesNotMoved , bytesExpanded , bytesContracted , and bytesMoved ."
  },
  "phobos/std/experimental/allocator/building_blocks/stats_collector/Structs/StatsCollector.html": {
    "href": "phobos/std/experimental/allocator/building_blocks/stats_collector/Structs/StatsCollector.html",
    "title": "Struct - StatsCollector | Marmos Demo",
    "keywords": "Struct - StatsCollector Module std.experimental.allocator.building_blocks.stats_collector public struct StatsCollector { // Alignment offered is equal to `Allocator.alignment` . alias alignment = <todo: marmos support pending>; // Forwards to `parent.alignedAllocate` . Affects per instance: `numAlignedAllocate` , `bytesUsed` , `bytesAllocated` , `bytesSlack` , `numAlignedAllocateOk` , and `bytesHighTide` . Affects per call: `numAlignedAllocate` , `numAlignedAllocateOk` , and `bytesAllocated` . <bug: unknown> alignedAllocate( size_t n, uint a ) ; // Forwards to `parent.allocate` . Affects per instance: `numAllocate` , `bytesUsed` , `bytesAllocated` , `bytesSlack` , `numAllocateOK` , and `bytesHighTide` . Affects per call: `numAllocate` , $(D numAllocateOK), and `bytesAllocated` . <bug: unknown> allocate( size_t n ) ; // Defined if `perCallFlags` is nonzero. Iterates all monitored file/line instances. The order of iteration is not meaningful (items are inserted at the front of a list upon the first call), so preprocessing the statistics after collection might be appropriate. <bug: unknown> byFileLine( ) static auto; // Ditto ulong bytesAllocated( ) ; // Ditto ulong bytesContracted( ) ; // Ditto ulong bytesExpanded( ) ; // Ditto ulong bytesHighTide( ) ; // Ditto ulong bytesMoved( ) ; // Ditto ulong bytesNotMoved( ) ; // Ditto ulong bytesSlack( ) ; // Ditto ulong bytesUsed( ) ; // Defined whether or not `Allocator.deallocate` is defined. Affects per instance: `numDeallocate` , `bytesUsed` , and `bytesSlack` . Affects per call: `numDeallocate` and `bytesContracted` . bool deallocate( <bug: unknown> b ) ; // Defined only if `Allocator.deallocateAll` is defined. Affects per instance and per call `numDeallocateAll` . bool deallocateAll( ) ; // string define( string type, <bug: unknown> names ) static; // Defined only if `Options.bytesUsed` is defined. Returns $(D bytesUsed == 0). Ternary empty( ) ; // Defined whether or not `Allocator.expand` is defined. Affects per instance: `numExpand` , `numExpandOK` , `bytesExpanded` , `bytesSlack` , `bytesAllocated` , and `bytesUsed` . Affects per call: `numExpand` , `numExpandOK` , `bytesExpanded` , and `bytesAllocated` . bool expand( <bug: unknown> b, size_t delta ) ; // Ditto ulong numAlignedAllocate( ) ; // Ditto ulong numAlignedAllocateOk( ) ; // Ditto ulong numAllocate( ) ; // Ditto ulong numAllocateOK( ) ; // Ditto ulong numDeallocate( ) ; // Ditto ulong numDeallocateAll( ) ; // Ditto ulong numExpand( ) ; // Ditto ulong numExpandOK( ) ; // Read-only properties enabled by the homonym `flags` chosen by the user. ulong numOwns( ) ; // Ditto ulong numReallocate( ) ; // Ditto ulong numReallocateInPlace( ) ; // Ditto ulong numReallocateOK( ) ; // Increments `numOwns` (per instance and and per call) and forwards to $(D parent.owns(b)). Ternary owns( <bug: unknown> b ) ; // Defined whether or not `Allocator.reallocate` is defined. Affects per instance: `numReallocate` , `numReallocateOK` , $(D numReallocateInPlace), `bytesNotMoved` , `bytesAllocated` , $(D bytesSlack), `bytesExpanded` , and `bytesContracted` . Affects per call: `numReallocate` , `numReallocateOK` , `numReallocateInPlace` , `bytesNotMoved` , `bytesExpanded` , `bytesContracted` , and `bytesMoved` . bool reallocate( <bug: unknown> b, size_t s ) ; // The parent allocator is publicly accessible either as a direct member if it holds state, or as an alias to `Allocator.instance` otherwise. One may use it for making calls that won't count toward statistics collection. Allocator parent; // static <bug: unknown> root; } About Allocator that collects extra data about allocations. Since each piece of information adds size and time overhead, statistics can be individually enabled or disabled through compile-time flags . All stats of the form numXxx record counts of events occurring, such as calls to functions and specific results. The stats of the form bytesXxx collect cumulative sizes. In addition, the data callerSize , callerModule , callerFile , $(D callerLine), and callerTime is associated with each specific allocation. This data prefixes each allocation. Aliases Name Description alignment Alignment offered is equal to Allocator.alignment . Functions Name Description alignedAllocate Forwards to parent.alignedAllocate . Affects per instance: numAlignedAllocate , bytesUsed , bytesAllocated , bytesSlack , numAlignedAllocateOk , and bytesHighTide . Affects per call: numAlignedAllocate , numAlignedAllocateOk , and bytesAllocated . allocate Forwards to parent.allocate . Affects per instance: numAllocate , bytesUsed , bytesAllocated , bytesSlack , numAllocateOK , and bytesHighTide . Affects per call: numAllocate , $(D numAllocateOK), and bytesAllocated . byFileLine Defined if perCallFlags is nonzero. Iterates all monitored file/line instances. The order of iteration is not meaningful (items are inserted at the front of a list upon the first call), so preprocessing the statistics after collection might be appropriate. bytesAllocated Ditto bytesContracted Ditto bytesExpanded Ditto bytesHighTide Ditto bytesMoved Ditto bytesNotMoved Ditto bytesSlack Ditto bytesUsed Ditto deallocate Defined whether or not Allocator.deallocate is defined. Affects per instance: numDeallocate , bytesUsed , and bytesSlack . Affects per call: numDeallocate and bytesContracted . deallocateAll Defined only if Allocator.deallocateAll is defined. Affects per instance and per call numDeallocateAll . define empty Defined only if Options.bytesUsed is defined. Returns $(D bytesUsed == 0). expand Defined whether or not Allocator.expand is defined. Affects per instance: numExpand , numExpandOK , bytesExpanded , bytesSlack , bytesAllocated , and bytesUsed . Affects per call: numExpand , numExpandOK , bytesExpanded , and bytesAllocated . numAlignedAllocate Ditto numAlignedAllocateOk Ditto numAllocate Ditto numAllocateOK Ditto numDeallocate Ditto numDeallocateAll Ditto numExpand Ditto numExpandOK Ditto numOwns Read-only properties enabled by the homonym flags chosen by the user. numReallocate Ditto numReallocateInPlace Ditto numReallocateOK Ditto owns Increments numOwns (per instance and and per call) and forwards to $(D parent.owns(b)). reallocate Defined whether or not Allocator.reallocate is defined. Affects per instance: numReallocate , numReallocateOK , $(D numReallocateInPlace), bytesNotMoved , bytesAllocated , $(D bytesSlack), bytesExpanded , and bytesContracted . Affects per call: numReallocate , numReallocateOK , numReallocateInPlace , bytesNotMoved , bytesExpanded , bytesContracted , and bytesMoved . Variables Name Description parent The parent allocator is publicly accessible either as a direct member if it holds state, or as an alias to Allocator.instance otherwise. One may use it for making calls that won't count toward statistics collection. root"
  },
  "phobos/std/experimental/allocator/common/Functions/alignDownTo.html": {
    "href": "phobos/std/experimental/allocator/common/Functions/alignDownTo.html",
    "title": "Overloads for - alignDownTo | Marmos Demo",
    "keywords": "Overloads for - alignDownTo Module std.experimental.allocator.common alignDownTo(ptr, alignment) <bug: unknown> alignDownTo( <bug: unknown> ptr, uint alignment )"
  },
  "phobos/std/experimental/allocator/common/Functions/alignUpTo.html": {
    "href": "phobos/std/experimental/allocator/common/Functions/alignUpTo.html",
    "title": "Overloads for - alignUpTo | Marmos Demo",
    "keywords": "Overloads for - alignUpTo Module std.experimental.allocator.common alignUpTo(ptr, alignment) <bug: unknown> alignUpTo( <bug: unknown> ptr, uint alignment )"
  },
  "phobos/std/experimental/allocator/common/Functions/alignedAt.html": {
    "href": "phobos/std/experimental/allocator/common/Functions/alignedAt.html",
    "title": "Overloads for - alignedAt | Marmos Demo",
    "keywords": "Overloads for - alignedAt Module std.experimental.allocator.common alignedAt(ptr, alignment) bool alignedAt( <bug: unknown> ptr, uint alignment )"
  },
  "phobos/std/experimental/allocator/common/Functions/alignedReallocate.html": {
    "href": "phobos/std/experimental/allocator/common/Functions/alignedReallocate.html",
    "title": "Overloads for - alignedReallocate | Marmos Demo",
    "keywords": "Overloads for - alignedReallocate Module std.experimental.allocator.common alignedReallocate(alloc, b, s, a) bool alignedReallocate( Allocator alloc, <bug: unknown> b, size_t s, uint a ) The default alignedReallocate function first attempts to use expand . If Allocator.expand is not defined or returns false , $(D alignedReallocate) allocates a new block of memory of appropriate size and copies data from the old block to the new block. Finally, if Allocator defines deallocate , alignedReallocate uses it to free the old memory block. alignedReallocate does not attempt to use Allocator.reallocate even if defined. This is deliberate so allocators may use it internally within their own implementation of reallocate ."
  },
  "phobos/std/experimental/allocator/common/Functions/divideRoundUp.html": {
    "href": "phobos/std/experimental/allocator/common/Functions/divideRoundUp.html",
    "title": "Overloads for - divideRoundUp | Marmos Demo",
    "keywords": "Overloads for - divideRoundUp Module std.experimental.allocator.common divideRoundUp(a, b) size_t divideRoundUp( size_t a, size_t b )"
  },
  "phobos/std/experimental/allocator/common/Functions/effectiveAlignment.html": {
    "href": "phobos/std/experimental/allocator/common/Functions/effectiveAlignment.html",
    "title": "Overloads for - effectiveAlignment | Marmos Demo",
    "keywords": "Overloads for - effectiveAlignment Module std.experimental.allocator.common effectiveAlignment(ptr) size_t effectiveAlignment( <bug: unknown> ptr )"
  },
  "phobos/std/experimental/allocator/common/Functions/forwardToMember.html": {
    "href": "phobos/std/experimental/allocator/common/Functions/forwardToMember.html",
    "title": "Overloads for - forwardToMember | Marmos Demo",
    "keywords": "Overloads for - forwardToMember Module std.experimental.allocator.common forwardToMember(member, funs) string forwardToMember( string member, <bug: unknown> funs ) Forwards each of the methods in funs (if defined) to member ."
  },
  "phobos/std/experimental/allocator/common/Functions/goodAllocSize.html": {
    "href": "phobos/std/experimental/allocator/common/Functions/goodAllocSize.html",
    "title": "Overloads for - goodAllocSize | Marmos Demo",
    "keywords": "Overloads for - goodAllocSize Module std.experimental.allocator.common goodAllocSize(a, n) size_t goodAllocSize( A a, size_t n ) The default good size allocation is deduced as n rounded up to the allocator's alignment."
  },
  "phobos/std/experimental/allocator/common/Functions/isGoodDynamicAlignment.html": {
    "href": "phobos/std/experimental/allocator/common/Functions/isGoodDynamicAlignment.html",
    "title": "Overloads for - isGoodDynamicAlignment | Marmos Demo",
    "keywords": "Overloads for - isGoodDynamicAlignment Module std.experimental.allocator.common isGoodDynamicAlignment(x) bool isGoodDynamicAlignment( uint x )"
  },
  "phobos/std/experimental/allocator/common/Functions/isGoodStaticAlignment.html": {
    "href": "phobos/std/experimental/allocator/common/Functions/isGoodStaticAlignment.html",
    "title": "Overloads for - isGoodStaticAlignment | Marmos Demo",
    "keywords": "Overloads for - isGoodStaticAlignment Module std.experimental.allocator.common isGoodStaticAlignment(x) bool isGoodStaticAlignment( uint x )"
  },
  "phobos/std/experimental/allocator/common/Functions/reallocate.html": {
    "href": "phobos/std/experimental/allocator/common/Functions/reallocate.html",
    "title": "Overloads for - reallocate | Marmos Demo",
    "keywords": "Overloads for - reallocate Module std.experimental.allocator.common reallocate(a, b, s) bool reallocate( Allocator a, <bug: unknown> b, size_t s ) The default reallocate function first attempts to use expand . If $(D Allocator.expand) is not defined or returns false , reallocate allocates a new block of memory of appropriate size and copies data from the old block to the new block. Finally, if Allocator defines deallocate , $(D reallocate) uses it to free the old memory block. reallocate does not attempt to use Allocator.reallocate even if defined. This is deliberate so allocators may use it internally within their own implementation of reallocate ."
  },
  "phobos/std/experimental/allocator/common/Functions/roundDownToAlignment.html": {
    "href": "phobos/std/experimental/allocator/common/Functions/roundDownToAlignment.html",
    "title": "Overloads for - roundDownToAlignment | Marmos Demo",
    "keywords": "Overloads for - roundDownToAlignment Module std.experimental.allocator.common roundDownToAlignment(n, alignment) size_t roundDownToAlignment( size_t n, uint alignment )"
  },
  "phobos/std/experimental/allocator/common/Functions/roundStartToMultipleOf.html": {
    "href": "phobos/std/experimental/allocator/common/Functions/roundStartToMultipleOf.html",
    "title": "Overloads for - roundStartToMultipleOf | Marmos Demo",
    "keywords": "Overloads for - roundStartToMultipleOf Module std.experimental.allocator.common roundStartToMultipleOf(s, base) <bug: unknown> roundStartToMultipleOf( <bug: unknown> s, uint base )"
  },
  "phobos/std/experimental/allocator/common/Functions/roundUpToAlignment.html": {
    "href": "phobos/std/experimental/allocator/common/Functions/roundUpToAlignment.html",
    "title": "Overloads for - roundUpToAlignment | Marmos Demo",
    "keywords": "Overloads for - roundUpToAlignment Module std.experimental.allocator.common roundUpToAlignment(n, alignment) size_t roundUpToAlignment( size_t n, uint alignment ) roundUpToAlignment(b, a) <bug: unknown> roundUpToAlignment( <bug: unknown> b, uint a )"
  },
  "phobos/std/experimental/allocator/common/Functions/roundUpToMultipleOf.html": {
    "href": "phobos/std/experimental/allocator/common/Functions/roundUpToMultipleOf.html",
    "title": "Overloads for - roundUpToMultipleOf | Marmos Demo",
    "keywords": "Overloads for - roundUpToMultipleOf Module std.experimental.allocator.common roundUpToMultipleOf(s, base) size_t roundUpToMultipleOf( size_t s, uint base )"
  },
  "phobos/std/experimental/allocator/common/Functions/roundUpToPowerOf2.html": {
    "href": "phobos/std/experimental/allocator/common/Functions/roundUpToPowerOf2.html",
    "title": "Overloads for - roundUpToPowerOf2 | Marmos Demo",
    "keywords": "Overloads for - roundUpToPowerOf2 Module std.experimental.allocator.common roundUpToPowerOf2(s) size_t roundUpToPowerOf2( size_t s )"
  },
  "phobos/std/experimental/allocator/common/Functions/testAllocator.html": {
    "href": "phobos/std/experimental/allocator/common/Functions/testAllocator.html",
    "title": "Overloads for - testAllocator | Marmos Demo",
    "keywords": "Overloads for - testAllocator Module std.experimental.allocator.common testAllocator() void testAllocator( )"
  },
  "phobos/std/experimental/allocator/common/Functions/testAllocatorObject.html": {
    "href": "phobos/std/experimental/allocator/common/Functions/testAllocatorObject.html",
    "title": "Overloads for - testAllocatorObject | Marmos Demo",
    "keywords": "Overloads for - testAllocatorObject Module std.experimental.allocator.common testAllocatorObject(a) void testAllocatorObject( RCAllocInterface a )"
  },
  "phobos/std/experimental/allocator/common/Functions/trailingZeros.html": {
    "href": "phobos/std/experimental/allocator/common/Functions/trailingZeros.html",
    "title": "Overloads for - trailingZeros | Marmos Demo",
    "keywords": "Overloads for - trailingZeros Module std.experimental.allocator.common trailingZeros(x) uint trailingZeros( ulong x )"
  },
  "phobos/std/experimental/allocator/common/Overview.html": {
    "href": "phobos/std/experimental/allocator/common/Overview.html",
    "title": "Module - std.experimental.allocator.common | Marmos Demo",
    "keywords": "Module - std.experimental.allocator.common About Utility and ancillary artifacts of std.experimental.allocator . This module shouldn't be used directly; its functionality will be migrated into more appropriate parts of std . Authors: $(HTTP erdani.com, Andrei Alexandrescu), Timon Gehr (Ternary) Source: $(PHOBOSSRC std/experimental/allocator/common.d) Functions Name Description alignDownTo alignedAt alignedReallocate The default alignedReallocate function first attempts to use expand . If Allocator.expand is not defined or returns false , $(D alignedReallocate) allocates a new block of memory of appropriate size and copies data from the old block to the new block. Finally, if Allocator defines deallocate , alignedReallocate uses it to free the old memory block. alignUpTo divideRoundUp effectiveAlignment forwardToMember Forwards each of the methods in funs (if defined) to member . goodAllocSize The default good size allocation is deduced as n rounded up to the allocator's alignment. isGoodDynamicAlignment isGoodStaticAlignment reallocate The default reallocate function first attempts to use expand . If $(D Allocator.expand) is not defined or returns false , reallocate allocates a new block of memory of appropriate size and copies data from the old block to the new block. Finally, if Allocator defines deallocate , $(D reallocate) uses it to free the old memory block. roundDownToAlignment roundStartToMultipleOf roundUpToAlignment roundUpToMultipleOf roundUpToPowerOf2 testAllocator testAllocatorObject trailingZeros Variables Name Description chooseAtRuntime chooseAtRuntime is a compile-time constant of type size_t that several parameterized structures in this module recognize to mean deferral to runtime of the exact value. For example, $(D BitmappedBlock!(Allocator, 4096)) (described in detail below) defines a block allocator with block size of 4096 bytes, whereas $(D BitmappedBlock!(Allocator, chooseAtRuntime)) defines a block allocator that has a field storing the block size, initialized by the user. hasStaticallyKnownAlignment Returns true if the Allocator has the alignment known at compile time; otherwise it returns false . isAllocator Is true iff A is an allocator. platformAlignment The alignment that is guaranteed to accommodate any D object allocation on the current platform. unbounded unbounded is a compile-time constant of type size_t that several parameterized structures in this module recognize to mean \"infinite\" bounds for the parameter. For example, Freelist (described in detail below) accepts a maxNodes parameter limiting the number of freelist items. If unbounded is passed for maxNodes , then there is no limit and no checking for the number of nodes."
  },
  "phobos/std/experimental/allocator/gc_allocator/GCAllocator/Functions/allocate.html": {
    "href": "phobos/std/experimental/allocator/gc_allocator/GCAllocator/Functions/allocate.html",
    "title": "Overloads for - allocate | Marmos Demo",
    "keywords": "Overloads for - allocate Module std.experimental.allocator.gc_allocator Parent GCAllocator allocate(bytes) <bug: unknown> allocate( size_t bytes ) Standard allocator methods per the semantics defined above. The $(D deallocate) and reallocate methods are @system because they may move memory around, leaving dangling pointers in user code."
  },
  "phobos/std/experimental/allocator/gc_allocator/GCAllocator/Functions/collect.html": {
    "href": "phobos/std/experimental/allocator/gc_allocator/GCAllocator/Functions/collect.html",
    "title": "Overloads for - collect | Marmos Demo",
    "keywords": "Overloads for - collect Module std.experimental.allocator.gc_allocator Parent GCAllocator collect() void collect( )"
  },
  "phobos/std/experimental/allocator/gc_allocator/GCAllocator/Functions/deallocate.html": {
    "href": "phobos/std/experimental/allocator/gc_allocator/GCAllocator/Functions/deallocate.html",
    "title": "Overloads for - deallocate | Marmos Demo",
    "keywords": "Overloads for - deallocate Module std.experimental.allocator.gc_allocator Parent GCAllocator deallocate(b) bool deallocate( <bug: unknown> b ) Ditto"
  },
  "phobos/std/experimental/allocator/gc_allocator/GCAllocator/Functions/expand.html": {
    "href": "phobos/std/experimental/allocator/gc_allocator/GCAllocator/Functions/expand.html",
    "title": "Overloads for - expand | Marmos Demo",
    "keywords": "Overloads for - expand Module std.experimental.allocator.gc_allocator Parent GCAllocator expand(b, delta) bool expand( <bug: unknown> b, size_t delta ) Ditto"
  },
  "phobos/std/experimental/allocator/gc_allocator/GCAllocator/Functions/goodAllocSize.html": {
    "href": "phobos/std/experimental/allocator/gc_allocator/GCAllocator/Functions/goodAllocSize.html",
    "title": "Overloads for - goodAllocSize | Marmos Demo",
    "keywords": "Overloads for - goodAllocSize Module std.experimental.allocator.gc_allocator Parent GCAllocator goodAllocSize(n) size_t goodAllocSize( size_t n ) Ditto"
  },
  "phobos/std/experimental/allocator/gc_allocator/GCAllocator/Functions/reallocate.html": {
    "href": "phobos/std/experimental/allocator/gc_allocator/GCAllocator/Functions/reallocate.html",
    "title": "Overloads for - reallocate | Marmos Demo",
    "keywords": "Overloads for - reallocate Module std.experimental.allocator.gc_allocator Parent GCAllocator reallocate(b, newSize) bool reallocate( <bug: unknown> b, size_t newSize ) Ditto"
  },
  "phobos/std/experimental/allocator/gc_allocator/GCAllocator/Functions/resolveInternalPointer.html": {
    "href": "phobos/std/experimental/allocator/gc_allocator/GCAllocator/Functions/resolveInternalPointer.html",
    "title": "Overloads for - resolveInternalPointer | Marmos Demo",
    "keywords": "Overloads for - resolveInternalPointer Module std.experimental.allocator.gc_allocator Parent GCAllocator resolveInternalPointer(p, result) Ternary resolveInternalPointer( <bug: unknown> p, <bug: unknown> result ) Ditto"
  },
  "phobos/std/experimental/allocator/gc_allocator/Overview.html": {
    "href": "phobos/std/experimental/allocator/gc_allocator/Overview.html",
    "title": "Module - std.experimental.allocator.gc_allocator | Marmos Demo",
    "keywords": "Module - std.experimental.allocator.gc_allocator About D's built-in garbage-collected allocator. Source: $(PHOBOSSRC std/experimental/allocator/_gc_allocator.d) Structs Name Description GCAllocator D's built-in garbage-collected allocator."
  },
  "phobos/std/experimental/allocator/gc_allocator/Structs/GCAllocator.html": {
    "href": "phobos/std/experimental/allocator/gc_allocator/Structs/GCAllocator.html",
    "title": "Struct - GCAllocator | Marmos Demo",
    "keywords": "Struct - GCAllocator Module std.experimental.allocator.gc_allocator public struct GCAllocator { // Standard allocator methods per the semantics defined above. The $(D deallocate) and `reallocate` methods are `@system` because they may move memory around, leaving dangling pointers in user code. <bug: unknown> allocate( size_t bytes ) ; // void collect( ) ; // Ditto bool deallocate( <bug: unknown> b ) ; // Ditto bool expand( <bug: unknown> b, size_t delta ) ; // Ditto size_t goodAllocSize( size_t n ) ; // Ditto bool reallocate( <bug: unknown> b, size_t newSize ) ; // Ditto Ternary resolveInternalPointer( <bug: unknown> p, <bug: unknown> result ) ; // The alignment is a static constant equal to `platformAlignment` , which ensures proper alignment for any D data type. uint alignment; // Returns the global instance of this allocator type. The garbage collected allocator is thread-safe, therefore all of its methods and `instance` itself are `shared` . static const shared GCAllocator instance; } About D's built-in garbage-collected allocator. Functions Name Description allocate Standard allocator methods per the semantics defined above. The $(D deallocate) and reallocate methods are @system because they may move memory around, leaving dangling pointers in user code. collect deallocate Ditto expand Ditto goodAllocSize Ditto reallocate Ditto resolveInternalPointer Ditto Variables Name Description alignment The alignment is a static constant equal to platformAlignment , which ensures proper alignment for any D data type. instance Returns the global instance of this allocator type. The garbage collected allocator is thread-safe, therefore all of its methods and instance itself are shared ."
  },
  "phobos/std/experimental/allocator/mallocator/AlignedMallocator/Functions/alignedAllocate.html": {
    "href": "phobos/std/experimental/allocator/mallocator/AlignedMallocator/Functions/alignedAllocate.html",
    "title": "Overloads for - alignedAllocate | Marmos Demo",
    "keywords": "Overloads for - alignedAllocate Module std.experimental.allocator.mallocator Parent AlignedMallocator alignedAllocate(bytes, a) <bug: unknown> alignedAllocate( size_t bytes, uint a ) Uses $(HTTP man7.org/linux/man-pages/man3/posix_memalign.3.html, posix_memalign ) on Posix and $(HTTP msdn.microsoft.com/en-us/library/8z34s9c6(v=vs.80).aspx, __aligned_malloc ) on Windows."
  },
  "phobos/std/experimental/allocator/mallocator/AlignedMallocator/Functions/alignedReallocate.html": {
    "href": "phobos/std/experimental/allocator/mallocator/AlignedMallocator/Functions/alignedReallocate.html",
    "title": "Overloads for - alignedReallocate | Marmos Demo",
    "keywords": "Overloads for - alignedReallocate Module std.experimental.allocator.mallocator Parent AlignedMallocator alignedReallocate(b, s, a) bool alignedReallocate( <bug: unknown> b, size_t s, uint a ) On Posix there is no realloc for aligned memory, so alignedReallocate emulates the needed behavior by using alignedAllocate to get a new block. The existing block is copied to the new block and then freed. On Windows, calls $(HTTPS msdn.microsoft.com/en-us/library/y69db7sx.aspx, $(D aligned_realloc(b.ptr, newSize, a))). alignedReallocate(b, s, a) bool alignedReallocate( <bug: unknown> b, size_t s, uint a ) ditto"
  },
  "phobos/std/experimental/allocator/mallocator/AlignedMallocator/Functions/allocate.html": {
    "href": "phobos/std/experimental/allocator/mallocator/AlignedMallocator/Functions/allocate.html",
    "title": "Overloads for - allocate | Marmos Demo",
    "keywords": "Overloads for - allocate Module std.experimental.allocator.mallocator Parent AlignedMallocator allocate(bytes) <bug: unknown> allocate( size_t bytes ) Forwards to $(D alignedAllocate(bytes, platformAlignment))."
  },
  "phobos/std/experimental/allocator/mallocator/AlignedMallocator/Functions/deallocate.html": {
    "href": "phobos/std/experimental/allocator/mallocator/AlignedMallocator/Functions/deallocate.html",
    "title": "Overloads for - deallocate | Marmos Demo",
    "keywords": "Overloads for - deallocate Module std.experimental.allocator.mallocator Parent AlignedMallocator deallocate(b) bool deallocate( <bug: unknown> b ) Calls free(b.ptr) on Posix and $(HTTP msdn.microsoft.com/en-US/library/17b5h8td(v=vs.80).aspx, __aligned_free(b.ptr) ) on Windows."
  },
  "phobos/std/experimental/allocator/mallocator/AlignedMallocator/Functions/reallocate.html": {
    "href": "phobos/std/experimental/allocator/mallocator/AlignedMallocator/Functions/reallocate.html",
    "title": "Overloads for - reallocate | Marmos Demo",
    "keywords": "Overloads for - reallocate Module std.experimental.allocator.mallocator Parent AlignedMallocator reallocate(b, newSize) bool reallocate( <bug: unknown> b, size_t newSize ) Forwards to $(D alignedReallocate(b, newSize, platformAlignment)). Should be used with blocks obtained with allocate otherwise the custom alignment passed with alignedAllocate can be lost."
  },
  "phobos/std/experimental/allocator/mallocator/Mallocator/Functions/allocate.html": {
    "href": "phobos/std/experimental/allocator/mallocator/Mallocator/Functions/allocate.html",
    "title": "Overloads for - allocate | Marmos Demo",
    "keywords": "Overloads for - allocate Module std.experimental.allocator.mallocator Parent Mallocator allocate(bytes) <bug: unknown> allocate( size_t bytes ) Standard allocator methods per the semantics defined above. The deallocate and reallocate methods are @system because they may move memory around, leaving dangling pointers in user code. Somewhat paradoxically, malloc is @safe but that's only useful to safe programs that can afford to leak memory allocated."
  },
  "phobos/std/experimental/allocator/mallocator/Mallocator/Functions/deallocate.html": {
    "href": "phobos/std/experimental/allocator/mallocator/Mallocator/Functions/deallocate.html",
    "title": "Overloads for - deallocate | Marmos Demo",
    "keywords": "Overloads for - deallocate Module std.experimental.allocator.mallocator Parent Mallocator deallocate(b) bool deallocate( <bug: unknown> b ) Ditto"
  },
  "phobos/std/experimental/allocator/mallocator/Mallocator/Functions/reallocate.html": {
    "href": "phobos/std/experimental/allocator/mallocator/Mallocator/Functions/reallocate.html",
    "title": "Overloads for - reallocate | Marmos Demo",
    "keywords": "Overloads for - reallocate Module std.experimental.allocator.mallocator Parent Mallocator reallocate(b, s) bool reallocate( <bug: unknown> b, size_t s ) Ditto"
  },
  "phobos/std/experimental/allocator/mallocator/Overview.html": {
    "href": "phobos/std/experimental/allocator/mallocator/Overview.html",
    "title": "Module - std.experimental.allocator.mallocator | Marmos Demo",
    "keywords": "Module - std.experimental.allocator.mallocator About The C heap allocator. Source: $(PHOBOSSRC std/experimental/allocator/mallocator.d) Structs Name Description AlignedMallocator Aligned allocator using OS-specific primitives, under a uniform API. Mallocator The C heap allocator."
  },
  "phobos/std/experimental/allocator/mallocator/Structs/AlignedMallocator.html": {
    "href": "phobos/std/experimental/allocator/mallocator/Structs/AlignedMallocator.html",
    "title": "Struct - AlignedMallocator | Marmos Demo",
    "keywords": "Struct - AlignedMallocator Module std.experimental.allocator.mallocator public struct AlignedMallocator { // Uses $(HTTP man7.org/linux/man-pages/man3/posix_memalign.3.html, `posix_memalign` ) on Posix and $(HTTP msdn.microsoft.com/en-us/library/8z34s9c6(v=vs.80).aspx, `__aligned_malloc` ) on Windows. <bug: unknown> alignedAllocate( size_t bytes, uint a ) ; // On Posix there is no `realloc` for aligned memory, so `alignedReallocate` emulates the needed behavior by using `alignedAllocate` to get a new block. The existing block is copied to the new block and then freed. On Windows, calls $(HTTPS msdn.microsoft.com/en-us/library/y69db7sx.aspx, $(D aligned_realloc(b.ptr, newSize, a))). bool alignedReallocate( <bug: unknown> b, size_t s, uint a ) ; // ditto bool alignedReallocate( <bug: unknown> b, size_t s, uint a ) ; // Forwards to $(D alignedAllocate(bytes, platformAlignment)). <bug: unknown> allocate( size_t bytes ) ; // Calls `free(b.ptr)` on Posix and $(HTTP msdn.microsoft.com/en-US/library/17b5h8td(v=vs.80).aspx, `__aligned_free(b.ptr)` ) on Windows. bool deallocate( <bug: unknown> b ) ; // Forwards to $(D alignedReallocate(b, newSize, platformAlignment)). Should be used with blocks obtained with `allocate` otherwise the custom alignment passed with `alignedAllocate` can be lost. bool reallocate( <bug: unknown> b, size_t newSize ) ; // The default alignment is `platformAlignment` . uint alignment; // Returns the global instance of this allocator type. The C heap allocator is thread-safe, therefore all of its methods and `instance` itself are `shared` . static shared AlignedMallocator instance; } About Aligned allocator using OS-specific primitives, under a uniform API. Functions Name Description alignedAllocate Uses $(HTTP man7.org/linux/man-pages/man3/posix_memalign.3.html, posix_memalign ) on Posix and $(HTTP msdn.microsoft.com/en-us/library/8z34s9c6(v=vs.80).aspx, __aligned_malloc ) on Windows. alignedReallocate On Posix there is no realloc for aligned memory, so alignedReallocate emulates the needed behavior by using alignedAllocate to get a new block. The existing block is copied to the new block and then freed. On Windows, calls $(HTTPS msdn.microsoft.com/en-us/library/y69db7sx.aspx, $(D aligned_realloc(b.ptr, newSize, a))). allocate Forwards to $(D alignedAllocate(bytes, platformAlignment)). deallocate Calls free(b.ptr) on Posix and $(HTTP msdn.microsoft.com/en-US/library/17b5h8td(v=vs.80).aspx, __aligned_free(b.ptr) ) on Windows. reallocate Forwards to $(D alignedReallocate(b, newSize, platformAlignment)). Should be used with blocks obtained with allocate otherwise the custom alignment passed with alignedAllocate can be lost. Variables Name Description alignment The default alignment is platformAlignment . instance Returns the global instance of this allocator type. The C heap allocator is thread-safe, therefore all of its methods and instance itself are shared ."
  },
  "phobos/std/experimental/allocator/mallocator/Structs/Mallocator.html": {
    "href": "phobos/std/experimental/allocator/mallocator/Structs/Mallocator.html",
    "title": "Struct - Mallocator | Marmos Demo",
    "keywords": "Struct - Mallocator Module std.experimental.allocator.mallocator public struct Mallocator { // Standard allocator methods per the semantics defined above. The `deallocate` and `reallocate` methods are `@system` because they may move memory around, leaving dangling pointers in user code. Somewhat paradoxically, `malloc` is `@safe` but that's only useful to safe programs that can afford to leak memory allocated. <bug: unknown> allocate( size_t bytes ) ; // Ditto bool deallocate( <bug: unknown> b ) ; // Ditto bool reallocate( <bug: unknown> b, size_t s ) ; // The alignment is a static constant equal to `platformAlignment` , which ensures proper alignment for any D data type. uint alignment; // Returns the global instance of this allocator type. The C heap allocator is thread-safe, therefore all of its methods and `it` itself are `shared` . static shared Mallocator instance; } About The C heap allocator. Functions Name Description allocate Standard allocator methods per the semantics defined above. The deallocate and reallocate methods are @system because they may move memory around, leaving dangling pointers in user code. Somewhat paradoxically, malloc is @safe but that's only useful to safe programs that can afford to leak memory allocated. deallocate Ditto reallocate Ditto Variables Name Description alignment The alignment is a static constant equal to platformAlignment , which ensures proper alignment for any D data type. instance Returns the global instance of this allocator type. The C heap allocator is thread-safe, therefore all of its methods and it itself are shared ."
  },
  "phobos/std/experimental/allocator/mmap_allocator/Functions/GetLastError.html": {
    "href": "phobos/std/experimental/allocator/mmap_allocator/Functions/GetLastError.html",
    "title": "Overloads for - GetLastError | Marmos Demo",
    "keywords": "Overloads for - GetLastError Module std.experimental.allocator.mmap_allocator GetLastError() DWORD GetLastError( )"
  },
  "phobos/std/experimental/allocator/mmap_allocator/Functions/SetLastError.html": {
    "href": "phobos/std/experimental/allocator/mmap_allocator/Functions/SetLastError.html",
    "title": "Overloads for - SetLastError | Marmos Demo",
    "keywords": "Overloads for - SetLastError Module std.experimental.allocator.mmap_allocator SetLastError(__anonymous) void SetLastError( DWORD __anonymous )"
  },
  "phobos/std/experimental/allocator/mmap_allocator/Functions/VirtualAlloc.html": {
    "href": "phobos/std/experimental/allocator/mmap_allocator/Functions/VirtualAlloc.html",
    "title": "Overloads for - VirtualAlloc | Marmos Demo",
    "keywords": "Overloads for - VirtualAlloc Module std.experimental.allocator.mmap_allocator VirtualAlloc(__anonymous, __anonymous, __anonymous, __anonymous) PVOID VirtualAlloc( PVOID __anonymous, SIZE_T __anonymous, DWORD __anonymous, DWORD __anonymous )"
  },
  "phobos/std/experimental/allocator/mmap_allocator/Functions/VirtualFree.html": {
    "href": "phobos/std/experimental/allocator/mmap_allocator/Functions/VirtualFree.html",
    "title": "Overloads for - VirtualFree | Marmos Demo",
    "keywords": "Overloads for - VirtualFree Module std.experimental.allocator.mmap_allocator VirtualFree(__anonymous, __anonymous, __anonymous) BOOL VirtualFree( PVOID __anonymous, SIZE_T __anonymous, DWORD __anonymous )"
  },
  "phobos/std/experimental/allocator/mmap_allocator/Functions/fakePureErrno.html": {
    "href": "phobos/std/experimental/allocator/mmap_allocator/Functions/fakePureErrno.html",
    "title": "Overloads for - fakePureErrno | Marmos Demo",
    "keywords": "Overloads for - fakePureErrno Module std.experimental.allocator.mmap_allocator fakePureErrno() int fakePureErrno( )"
  },
  "phobos/std/experimental/allocator/mmap_allocator/Functions/fakePureMmap.html": {
    "href": "phobos/std/experimental/allocator/mmap_allocator/Functions/fakePureMmap.html",
    "title": "Overloads for - fakePureMmap | Marmos Demo",
    "keywords": "Overloads for - fakePureMmap Module std.experimental.allocator.mmap_allocator fakePureMmap(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous, __anonymous) <bug: unknown> fakePureMmap( <bug: unknown> __anonymous, size_t __anonymous, int __anonymous, int __anonymous, int __anonymous, off_t __anonymous )"
  },
  "phobos/std/experimental/allocator/mmap_allocator/Functions/fakePureMunmap.html": {
    "href": "phobos/std/experimental/allocator/mmap_allocator/Functions/fakePureMunmap.html",
    "title": "Overloads for - fakePureMunmap | Marmos Demo",
    "keywords": "Overloads for - fakePureMunmap Module std.experimental.allocator.mmap_allocator fakePureMunmap(__anonymous, __anonymous) int fakePureMunmap( <bug: unknown> __anonymous, size_t __anonymous )"
  },
  "phobos/std/experimental/allocator/mmap_allocator/MmapAllocator/Functions/allocate.html": {
    "href": "phobos/std/experimental/allocator/mmap_allocator/MmapAllocator/Functions/allocate.html",
    "title": "Overloads for - allocate | Marmos Demo",
    "keywords": "Overloads for - allocate Module std.experimental.allocator.mmap_allocator Parent MmapAllocator allocate(bytes) <bug: unknown> allocate( size_t bytes ) Allocator API."
  },
  "phobos/std/experimental/allocator/mmap_allocator/MmapAllocator/Functions/deallocate.html": {
    "href": "phobos/std/experimental/allocator/mmap_allocator/MmapAllocator/Functions/deallocate.html",
    "title": "Overloads for - deallocate | Marmos Demo",
    "keywords": "Overloads for - deallocate Module std.experimental.allocator.mmap_allocator Parent MmapAllocator deallocate(b) bool deallocate( <bug: unknown> b ) Ditto"
  },
  "phobos/std/experimental/allocator/mmap_allocator/Overview.html": {
    "href": "phobos/std/experimental/allocator/mmap_allocator/Overview.html",
    "title": "Module - std.experimental.allocator.mmap_allocator | Marmos Demo",
    "keywords": "Module - std.experimental.allocator.mmap_allocator About Source: $(PHOBOSSRC std/experimental/allocator/_mmap_allocator.d) Structs Name Description MmapAllocator Allocator (currently defined only for Posix and Windows) using $(D $(LINK2 https://en.wikipedia.org/wiki/Mmap, mmap)) and $(D $(LUCKY munmap)) directly (or their Windows equivalents). There is no additional structure: each call to allocate(s) issues a call to $(D mmap(null, s, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0)), and each call to deallocate(b) issues $(D munmap(b.ptr, b.length)). So MmapAllocator is usually intended for allocating large chunks to be managed by fine-granular allocators. Functions Name Description fakePureErrno fakePureMmap fakePureMunmap GetLastError SetLastError VirtualAlloc VirtualFree"
  },
  "phobos/std/experimental/allocator/mmap_allocator/Structs/MmapAllocator.html": {
    "href": "phobos/std/experimental/allocator/mmap_allocator/Structs/MmapAllocator.html",
    "title": "Struct - MmapAllocator | Marmos Demo",
    "keywords": "Struct - MmapAllocator Module std.experimental.allocator.mmap_allocator public struct MmapAllocator { // alias allocateZeroed = <todo: marmos support pending>; // Allocator API. <bug: unknown> allocate( size_t bytes ) ; // Ditto bool deallocate( <bug: unknown> b ) ; // Alignment is page-size and hardcoded to 4096 (even though on certain systems it could be larger). size_t alignment; // The one shared instance. static const shared MmapAllocator instance; } About Allocator (currently defined only for Posix and Windows) using $(D $(LINK2 https://en.wikipedia.org/wiki/Mmap, mmap)) and $(D $(LUCKY munmap)) directly (or their Windows equivalents). There is no additional structure: each call to allocate(s) issues a call to $(D mmap(null, s, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0)), and each call to deallocate(b) issues $(D munmap(b.ptr, b.length)). So MmapAllocator is usually intended for allocating large chunks to be managed by fine-granular allocators. Aliases Name Description allocateZeroed Functions Name Description allocate Allocator API. deallocate Ditto Variables Name Description alignment Alignment is page-size and hardcoded to 4096 (even though on certain systems it could be larger). instance The one shared instance."
  },
  "phobos/std/experimental/allocator/showcase/Functions/mmapRegionList.html": {
    "href": "phobos/std/experimental/allocator/showcase/Functions/mmapRegionList.html",
    "title": "Overloads for - mmapRegionList | Marmos Demo",
    "keywords": "Overloads for - mmapRegionList Module std.experimental.allocator.showcase mmapRegionList(bytesPerRegion) <bug: unknown> mmapRegionList( size_t bytesPerRegion ) auto Creates a scalable AllocatorList of Regions , each having at least bytesPerRegion bytes. Allocation is very fast. This allocator does not offer deallocate but does free all regions in its destructor. It is recommended for short-lived batch applications that count on never running out of memory."
  },
  "phobos/std/experimental/allocator/showcase/Overview.html": {
    "href": "phobos/std/experimental/allocator/showcase/Overview.html",
    "title": "Module - std.experimental.allocator.showcase | Marmos Demo",
    "keywords": "Module - std.experimental.allocator.showcase About Collection of typical and useful prebuilt allocators using the given components. User code would typically import this module and use its facilities, or import individual heap building blocks and assemble them. Source: $(PHOBOSSRC std/experimental/allocator/_showcase.d) Aliases Name Description StackFront Allocator that uses stack allocation for up to stackSize bytes and then falls back to Allocator . Defined as: Functions Name Description mmapRegionList Creates a scalable AllocatorList of Regions , each having at least bytesPerRegion bytes. Allocation is very fast. This allocator does not offer deallocate but does free all regions in its destructor. It is recommended for short-lived batch applications that count on never running out of memory."
  },
  "phobos/std/experimental/allocator/typed/Overview.html": {
    "href": "phobos/std/experimental/allocator/typed/Overview.html",
    "title": "Module - std.experimental.allocator.typed | Marmos Demo",
    "keywords": "Module - std.experimental.allocator.typed About This module defines TypedAllocator , a statically-typed allocator that aggregates multiple untyped allocators and uses them depending on the static properties of the types allocated. For example, distinct allocators may be used for thread-local vs. thread-shared data, or for fixed-size data (struct, class objects) vs. resizable data (arrays). Source: $(PHOBOSSRC std/experimental/allocator/typed.d) Macros T2=$(TR $1 $(TD $(ARGS $+))) Structs Name Description TypedAllocator TypedAllocator acts like a chassis on which several specialized allocators can be assembled. To let the system make a choice about a particular kind of allocation, use Default for the respective parameters."
  },
  "phobos/std/experimental/allocator/typed/Structs/TypedAllocator.html": {
    "href": "phobos/std/experimental/allocator/typed/Structs/TypedAllocator.html",
    "title": "Struct - TypedAllocator | Marmos Demo",
    "keywords": "Struct - TypedAllocator Module std.experimental.allocator.typed public struct TypedAllocator { // bool match( uint have, uint want ) static; // Tuple!(Stride2!(Policies[1 .. __dollar])) extras; // PrimaryAllocator primary; } About TypedAllocator acts like a chassis on which several specialized allocators can be assembled. To let the system make a choice about a particular kind of allocation, use Default for the respective parameters. There is a hierarchy of allocation kinds. When an allocator is implemented for a given combination of flags, it is used. Otherwise, the next down the list is chosen. $(BOOKTABLE , $(TR $(TH AllocFlag combination) $(TH Description)) \\((T2 AllocFlag.threadLocal |\\)(NBSP)AllocFlag.hasNoIndirections |$(NBSP)AllocFlag.fixedSize, This is the most specific allocation policy: the memory being allocated is thread local, has no indirections at all, and will not be reallocated. Examples of types fitting this description: int , double , $(D Tuple!(int, long)), but not $(D Tuple!(int, string)), which contains an indirection.) \\((T2 AllocFlag.threadLocal |\\)(NBSP)AllocFlag.hasNoIndirections, As above, but may be reallocated later. Examples of types fitting this description are int[] , double[] , $(D Tuple!(int, long)[]), but not $(D Tuple!(int, string)[]), which contains an indirection.) $(T2 AllocFlag.threadLocal, As above, but may embed indirections. Examples of types fitting this description are int*[] , Object[] , $(D Tuple!(int, string)[]).) \\((T2 AllocFlag.immutableShared |\\)(NBSP)AllocFlag.hasNoIndirections |$(NBSP)AllocFlag.fixedSize, The type being allocated is immutable and has no pointers. The thread that allocated it must also deallocate it. Example: immutable(int) .) \\((T2 AllocFlag.immutableShared |\\)(NBSP)AllocFlag.hasNoIndirections, As above, but the type may be appended to in the future. Example: string .) $(T2 AllocFlag.immutableShared, As above, but the type may embed references. Example: immutable(Object)[] .) \\((T2 AllocFlag.hasNoIndirections |\\)(NBSP)AllocFlag.fixedSize, The type being allocated may be shared across threads, embeds no indirections, and has fixed size.) $(T2 AllocFlag.hasNoIndirections, The type being allocated may be shared across threads, may embed indirections, and has variable size.) $(T2 AllocFlag.fixedSize, The type being allocated may be shared across threads, may embed indirections, and has fixed size.) $(T2 0, The most conservative/general allocation: memory may be shared, deallocated in a different thread, may or may not be resized, and may embed references.) ) Params PrimaryAllocator The default allocator. Policies Zero or more pairs consisting of an AllocFlag and an allocator Policies = Zero or more pairs consisting of an AllocFlag and an allocator type. Functions Name Description match Variables Name Description extras primary"
  },
  "phobos/std/experimental/allocator/typed/TypedAllocator/Functions/match.html": {
    "href": "phobos/std/experimental/allocator/typed/TypedAllocator/Functions/match.html",
    "title": "Overloads for - match | Marmos Demo",
    "keywords": "Overloads for - match Module std.experimental.allocator.typed Parent TypedAllocator match(have, want) bool match( uint have, uint want ) static"
  },
  "phobos/std/experimental/checkedint/Overview.html": {
    "href": "phobos/std/experimental/checkedint/Overview.html",
    "title": "Module - std.experimental.checkedint | Marmos Demo",
    "keywords": "Module - std.experimental.checkedint About This module is now deprecated, use $(MREF std, checkedint) instead. Copyright: Copyright The D Language Foundation 2005 - 2015. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: Source: $(PHOBOSSRC std/experimental/checkedint.d) $(SCRIPT inhibitQuickIndex = 1;)"
  },
  "phobos/std/experimental/logger/Overview.html": {
    "href": "phobos/std/experimental/logger/Overview.html",
    "title": "Module - std.experimental.logger | Marmos Demo",
    "keywords": "Module - std.experimental.logger About This module is now deprecated, use $(MREF std, logger) instead. Copyright: Copyright The D Language Foundation 2005 - 2015. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: Source: $(PHOBOSSRC std/experimental/logger/package.d) $(SCRIPT inhibitQuickIndex = 1;)"
  },
  "phobos/std/experimental/logger/core/Overview.html": {
    "href": "phobos/std/experimental/logger/core/Overview.html",
    "title": "Module - std.experimental.logger.core | Marmos Demo",
    "keywords": "Module - std.experimental.logger.core About This module is now deprecated, use $(MREF std, logger, core) instead. Copyright: Copyright The D Language Foundation 2005 - 2015. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: Source: $(PHOBOSSRC std/experimental/logger/core.d) $(SCRIPT inhibitQuickIndex = 1;)"
  },
  "phobos/std/experimental/logger/filelogger/Overview.html": {
    "href": "phobos/std/experimental/logger/filelogger/Overview.html",
    "title": "Module - std.experimental.logger.filelogger | Marmos Demo",
    "keywords": "Module - std.experimental.logger.filelogger About This module is now deprecated, use $(MREF std, logger, filelogger) instead. Copyright: Copyright The D Language Foundation 2005 - 2015. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: Source: $(PHOBOSSRC std/experimental/logger/filelogger.d) $(SCRIPT inhibitQuickIndex = 1;)"
  },
  "phobos/std/experimental/logger/multilogger/Overview.html": {
    "href": "phobos/std/experimental/logger/multilogger/Overview.html",
    "title": "Module - std.experimental.logger.multilogger | Marmos Demo",
    "keywords": "Module - std.experimental.logger.multilogger About This module is now deprecated, use $(MREF std, logger, multilogger) instead. Copyright: Copyright The D Language Foundation 2005 - 2015. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: Source: $(PHOBOSSRC std/experimental/logger/multilogger.d) $(SCRIPT inhibitQuickIndex = 1;)"
  },
  "phobos/std/experimental/logger/nulllogger/Overview.html": {
    "href": "phobos/std/experimental/logger/nulllogger/Overview.html",
    "title": "Module - std.experimental.logger.nulllogger | Marmos Demo",
    "keywords": "Module - std.experimental.logger.nulllogger About This module is now deprecated, use $(MREF std, logger, nulllogger) instead. Copyright: Copyright The D Language Foundation 2005 - 2015. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: Source: $(PHOBOSSRC std/experimental/logger/nulllogger.d) $(SCRIPT inhibitQuickIndex = 1;)"
  },
  "phobos/std/file/Classes/FileException.html": {
    "href": "phobos/std/file/Classes/FileException.html",
    "title": "Class - FileException | Marmos Demo",
    "keywords": "Class - FileException Module std.file public class FileException { // OS error code. immutable uint errno; } About Exception thrown for file I/O errors. Variables Name Description errno OS error code."
  },
  "phobos/std/file/DirEntry/Functions/attributes.html": {
    "href": "phobos/std/file/DirEntry/Functions/attributes.html",
    "title": "Overloads for - attributes | Marmos Demo",
    "keywords": "Overloads for - attributes Module std.file Parent DirEntry attributes() uint attributes( ) Returns the attributes of the file represented by this DirEntry. Note that the file attributes on Windows and POSIX systems are completely different. On, Windows, they're what is returned by GetFileAttributes $(HTTP msdn.microsoft.com/en-us/library/aa364944(v=vs.85).aspx, GetFileAttributes) Whereas, an POSIX systems, they're the st_mode value which is part of the stat struct gotten by calling stat . On POSIX systems, if the file represented by this DirEntry is a symbolic link, then *attributes are the * attributes of the file pointed to by the symbolic link."
  },
  "phobos/std/file/DirEntry/Functions/isDir.html": {
    "href": "phobos/std/file/DirEntry/Functions/isDir.html",
    "title": "Overloads for - isDir | Marmos Demo",
    "keywords": "Overloads for - isDir Module std.file Parent DirEntry isDir() bool isDir( ) Returns whether the file represented by this DirEntry is a directory. Example: -------------------- auto de1 = DirEntry(\"/etc/fonts/fonts.conf\"); assert(!de1.isDir); auto de2 = DirEntry(\"/usr/share/include\"); assert(de2.isDir); --------------------"
  },
  "phobos/std/file/DirEntry/Functions/isFile.html": {
    "href": "phobos/std/file/DirEntry/Functions/isFile.html",
    "title": "Overloads for - isFile | Marmos Demo",
    "keywords": "Overloads for - isFile Module std.file Parent DirEntry isFile() bool isFile( ) Returns whether the file represented by this DirEntry is a file. On Windows, if a file is not a directory, then it's a file. So, either isFile or isDir will return true . On POSIX systems, if isFile is true , that indicates that the file is a regular file (e.g. not a block not device). So, on POSIX systems, it's possible for both isFile and isDir to be false for a particular file (in which case, it's a special file). You can use attributes or statBuf to get more information about a special file (see the stat man page for more details). Example: -------------------- auto de1 = DirEntry(\"/etc/fonts/fonts.conf\"); assert(de1.isFile); auto de2 = DirEntry(\"/usr/share/include\"); assert(!de2.isFile); --------------------"
  },
  "phobos/std/file/DirEntry/Functions/isSymlink.html": {
    "href": "phobos/std/file/DirEntry/Functions/isSymlink.html",
    "title": "Overloads for - isSymlink | Marmos Demo",
    "keywords": "Overloads for - isSymlink Module std.file Parent DirEntry isSymlink() bool isSymlink( ) Returns whether the file represented by this DirEntry is a symbolic link. On Windows, return true when the file is either a symbolic link or a junction point."
  },
  "phobos/std/file/DirEntry/Functions/linkAttributes.html": {
    "href": "phobos/std/file/DirEntry/Functions/linkAttributes.html",
    "title": "Overloads for - linkAttributes | Marmos Demo",
    "keywords": "Overloads for - linkAttributes Module std.file Parent DirEntry linkAttributes() uint linkAttributes( ) On POSIX systems, if the file represented by this DirEntry is a symbolic link, then linkAttributes are the attributes of the symbolic link itself. Otherwise, linkAttributes is identical to attributes . On Windows, linkAttributes is identical to attributes . It exists on Windows so that you don't have to special-case code for Windows when dealing with symbolic links."
  },
  "phobos/std/file/DirEntry/Functions/name.html": {
    "href": "phobos/std/file/DirEntry/Functions/name.html",
    "title": "Overloads for - name | Marmos Demo",
    "keywords": "Overloads for - name Module std.file Parent DirEntry name() string name( ) Returns the path to the file represented by this DirEntry . Example: -------------------- auto de1 = DirEntry(\"/etc/fonts/fonts.conf\"); assert(de1.name == \"/etc/fonts/fonts.conf\"); auto de2 = DirEntry(\"/usr/share/include\"); assert(de2.name == \"/usr/share/include\"); --------------------"
  },
  "phobos/std/file/DirEntry/Functions/size.html": {
    "href": "phobos/std/file/DirEntry/Functions/size.html",
    "title": "Overloads for - size | Marmos Demo",
    "keywords": "Overloads for - size Module std.file Parent DirEntry size() ulong size( ) Returns the size of the file represented by this DirEntry in bytes."
  },
  "phobos/std/file/DirEntry/Functions/statBuf.html": {
    "href": "phobos/std/file/DirEntry/Functions/statBuf.html",
    "title": "Overloads for - statBuf | Marmos Demo",
    "keywords": "Overloads for - statBuf Module std.file Parent DirEntry statBuf() stat_t statBuf( ) $(BLUE This function is POSIX-Only.) The stat struct gotten from calling stat ."
  },
  "phobos/std/file/DirEntry/Functions/timeCreated.html": {
    "href": "phobos/std/file/DirEntry/Functions/timeCreated.html",
    "title": "Overloads for - timeCreated | Marmos Demo",
    "keywords": "Overloads for - timeCreated Module std.file Parent DirEntry timeCreated() SysTime timeCreated( ) $(BLUE This function is Windows-Only.) Returns the creation time of the file represented by this DirEntry ."
  },
  "phobos/std/file/DirEntry/Functions/timeLastAccessed.html": {
    "href": "phobos/std/file/DirEntry/Functions/timeLastAccessed.html",
    "title": "Overloads for - timeLastAccessed | Marmos Demo",
    "keywords": "Overloads for - timeLastAccessed Module std.file Parent DirEntry timeLastAccessed() SysTime timeLastAccessed( ) Returns the time that the file represented by this DirEntry was last accessed. Note that many file systems do not update the access time for files (generally for performance reasons), so there's a good chance that timeLastAccessed will return the same value as timeLastModified ."
  },
  "phobos/std/file/DirEntry/Functions/timeLastModified.html": {
    "href": "phobos/std/file/DirEntry/Functions/timeLastModified.html",
    "title": "Overloads for - timeLastModified | Marmos Demo",
    "keywords": "Overloads for - timeLastModified Module std.file Parent DirEntry timeLastModified() SysTime timeLastModified( ) Returns the time that the file represented by this DirEntry was last modified."
  },
  "phobos/std/file/DirEntry/Functions/timeStatusChanged.html": {
    "href": "phobos/std/file/DirEntry/Functions/timeStatusChanged.html",
    "title": "Overloads for - timeStatusChanged | Marmos Demo",
    "keywords": "Overloads for - timeStatusChanged Module std.file Parent DirEntry timeStatusChanged() SysTime timeStatusChanged( ) $(BLUE This function is POSIX-Only.) Returns the time that the file represented by this DirEntry was last changed (not only in contents, but also in permissions or ownership)."
  },
  "phobos/std/file/DirIteratorImpl/Functions/empty.html": {
    "href": "phobos/std/file/DirIteratorImpl/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.file Parent DirIteratorImpl empty() bool empty( )"
  },
  "phobos/std/file/DirIteratorImpl/Functions/front.html": {
    "href": "phobos/std/file/DirIteratorImpl/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.file Parent DirIteratorImpl front() DirEntry front( )"
  },
  "phobos/std/file/DirIteratorImpl/Functions/hasExtra.html": {
    "href": "phobos/std/file/DirIteratorImpl/Functions/hasExtra.html",
    "title": "Overloads for - hasExtra | Marmos Demo",
    "keywords": "Overloads for - hasExtra Module std.file Parent DirIteratorImpl hasExtra() bool hasExtra( )"
  },
  "phobos/std/file/DirIteratorImpl/Functions/mayStepIn.html": {
    "href": "phobos/std/file/DirIteratorImpl/Functions/mayStepIn.html",
    "title": "Overloads for - mayStepIn | Marmos Demo",
    "keywords": "Overloads for - mayStepIn Module std.file Parent DirIteratorImpl mayStepIn() bool mayStepIn( )"
  },
  "phobos/std/file/DirIteratorImpl/Functions/next.html": {
    "href": "phobos/std/file/DirIteratorImpl/Functions/next.html",
    "title": "Overloads for - next | Marmos Demo",
    "keywords": "Overloads for - next Module std.file Parent DirIteratorImpl next() bool next( )"
  },
  "phobos/std/file/DirIteratorImpl/Functions/popDirStack.html": {
    "href": "phobos/std/file/DirIteratorImpl/Functions/popDirStack.html",
    "title": "Overloads for - popDirStack | Marmos Demo",
    "keywords": "Overloads for - popDirStack Module std.file Parent DirIteratorImpl popDirStack() void popDirStack( )"
  },
  "phobos/std/file/DirIteratorImpl/Functions/popExtra.html": {
    "href": "phobos/std/file/DirIteratorImpl/Functions/popExtra.html",
    "title": "Overloads for - popExtra | Marmos Demo",
    "keywords": "Overloads for - popExtra Module std.file Parent DirIteratorImpl popExtra() DirEntry popExtra( )"
  },
  "phobos/std/file/DirIteratorImpl/Functions/popFront.html": {
    "href": "phobos/std/file/DirIteratorImpl/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.file Parent DirIteratorImpl popFront() void popFront( )"
  },
  "phobos/std/file/DirIteratorImpl/Functions/pushExtra.html": {
    "href": "phobos/std/file/DirIteratorImpl/Functions/pushExtra.html",
    "title": "Overloads for - pushExtra | Marmos Demo",
    "keywords": "Overloads for - pushExtra Module std.file Parent DirIteratorImpl pushExtra(de) void pushExtra( DirEntry de )"
  },
  "phobos/std/file/DirIteratorImpl/Functions/releaseDirStack.html": {
    "href": "phobos/std/file/DirIteratorImpl/Functions/releaseDirStack.html",
    "title": "Overloads for - releaseDirStack | Marmos Demo",
    "keywords": "Overloads for - releaseDirStack Module std.file Parent DirIteratorImpl releaseDirStack() void releaseDirStack( )"
  },
  "phobos/std/file/DirIteratorImpl/Functions/stepIn.html": {
    "href": "phobos/std/file/DirIteratorImpl/Functions/stepIn.html",
    "title": "Overloads for - stepIn | Marmos Demo",
    "keywords": "Overloads for - stepIn Module std.file Parent DirIteratorImpl stepIn(directory) bool stepIn( string directory )"
  },
  "phobos/std/file/DirIteratorImpl/Functions/toNext.html": {
    "href": "phobos/std/file/DirIteratorImpl/Functions/toNext.html",
    "title": "Overloads for - toNext | Marmos Demo",
    "keywords": "Overloads for - toNext Module std.file Parent DirIteratorImpl toNext(fetch, findinfo) bool toNext( bool fetch, <bug: unknown> findinfo )"
  },
  "phobos/std/file/Functions/append.html": {
    "href": "phobos/std/file/Functions/append.html",
    "title": "Overloads for - append | Marmos Demo",
    "keywords": "Overloads for - append Module std.file append(name, buffer) void append( R name, <bug: unknown> buffer ) Appends buffer to file name . Creates the file if it does not already exist. Params name R string or range of characters representing the file name buffer <bug: unknown> data to be appended to file Throws: $(LREF FileException) on error. append(name, buffer) void append( R name, <bug: unknown> buffer ) ditto"
  },
  "phobos/std/file/Functions/attrIsDir.html": {
    "href": "phobos/std/file/Functions/attrIsDir.html",
    "title": "Overloads for - attrIsDir | Marmos Demo",
    "keywords": "Overloads for - attrIsDir Module std.file attrIsDir(attributes) bool attrIsDir( uint attributes ) Returns whether the given file attributes are for a directory. Params attributes uint The file attributes. Returns true if attributes specifies a directory"
  },
  "phobos/std/file/Functions/attrIsFile.html": {
    "href": "phobos/std/file/Functions/attrIsFile.html",
    "title": "Overloads for - attrIsFile | Marmos Demo",
    "keywords": "Overloads for - attrIsFile Module std.file attrIsFile(attributes) bool attrIsFile( uint attributes ) Returns whether the given file attributes are for a file. On Windows, if a file is not a directory, it's a file. So, either attrIsFile or attrIsDir will return true for the attributes of any given file. On POSIX systems, if attrIsFile is true , that indicates that the file is a regular file (e.g. not a block not device). So, on POSIX systems, it's possible for both attrIsFile and attrIsDir to be false for a particular file (in which case, it's a special file). If a file is a special file, you can use the attributes to check what type of special file it is (see the man page for stat for more information). Params attributes uint The file attributes. Returns true if the given file attributes are for a file Example: -------------------- assert(attrIsFile(getAttributes(\"/etc/fonts/fonts.conf\"))); assert(attrIsFile(getLinkAttributes(\"/etc/fonts/fonts.conf\"))); --------------------"
  },
  "phobos/std/file/Functions/attrIsSymlink.html": {
    "href": "phobos/std/file/Functions/attrIsSymlink.html",
    "title": "Overloads for - attrIsSymlink | Marmos Demo",
    "keywords": "Overloads for - attrIsSymlink Module std.file attrIsSymlink(attributes) bool attrIsSymlink( uint attributes ) Returns whether the given file attributes are for a symbolic link. On Windows, return true when the file is either a symbolic link or a junction point. Params attributes uint The file attributes. Returns true if attributes are for a symbolic link Example: -------------------- core.sys.posix.unistd.symlink(\"/etc/fonts/fonts.conf\", \"/tmp/alink\"); assert(!getAttributes(\"/tmp/alink\").isSymlink); assert(getLinkAttributes(\"/tmp/alink\").isSymlink); --------------------"
  },
  "phobos/std/file/Functions/cenforce.html": {
    "href": "phobos/std/file/Functions/cenforce.html",
    "title": "Overloads for - cenforce | Marmos Demo",
    "keywords": "Overloads for - cenforce Module std.file cenforce(condition, name, file, line) T cenforce( T condition, <bug: unknown> name, string file, size_t line ) cenforce(condition, name, namez, file, line) T cenforce( T condition, <bug: unknown> name, <bug: unknown> namez, string file, size_t line ) cenforce(condition, name, namez, file, line) T cenforce( T condition, <bug: unknown> name, <bug: unknown> namez, string file, size_t line )"
  },
  "phobos/std/file/Functions/chdir.html": {
    "href": "phobos/std/file/Functions/chdir.html",
    "title": "Overloads for - chdir | Marmos Demo",
    "keywords": "Overloads for - chdir Module std.file chdir(pathname) void chdir( R pathname ) Change directory to pathname . Equivalent to cd on Windows and POSIX. Params pathname R the directory to step into Throws: $(LREF FileException) on error. chdir(pathname) void chdir( R pathname ) ditto"
  },
  "phobos/std/file/Functions/copy.html": {
    "href": "phobos/std/file/Functions/copy.html",
    "title": "Overloads for - copy | Marmos Demo",
    "keywords": "Overloads for - copy Module std.file copy(from, to, preserve) void copy( RF from, RT to, PreserveAttributes preserve ) Copy file from to file to. File timestamps are preserved. File attributes are preserved, if preserve equals Yes.preserveAttributes . On Windows only Yes.preserveAttributes (the default on Windows) is supported. If the target file exists, it is overwritten. Params from RF string or range of characters representing the existing file name to RT string or range of characters representing the target file name preserve PreserveAttributes whether to preserve the file attributes Throws: $(LREF FileException) on error. copy(from, to, preserve) void copy( RF from, RT to, PreserveAttributes preserve ) ditto"
  },
  "phobos/std/file/Functions/copyImpl.html": {
    "href": "phobos/std/file/Functions/copyImpl.html",
    "title": "Overloads for - copyImpl | Marmos Demo",
    "keywords": "Overloads for - copyImpl Module std.file copyImpl(f, t, fromz, toz, preserve) void copyImpl( <bug: unknown> f, <bug: unknown> t, <bug: unknown> fromz, <bug: unknown> toz, PreserveAttributes preserve )"
  },
  "phobos/std/file/Functions/deleteme.html": {
    "href": "phobos/std/file/Functions/deleteme.html",
    "title": "Overloads for - deleteme | Marmos Demo",
    "keywords": "Overloads for - deleteme Module std.file deleteme() string deleteme( )"
  },
  "phobos/std/file/Functions/dirEntries.html": {
    "href": "phobos/std/file/Functions/dirEntries.html",
    "title": "Overloads for - dirEntries | Marmos Demo",
    "keywords": "Overloads for - dirEntries Module std.file dirEntries(path, mode, followSymlink) <bug: unknown> dirEntries( string path, SpanMode mode, bool followSymlink ) auto Returns an $(REF_ALTTEXT input range, isInputRange, std,range,primitives) of DirEntry that lazily iterates a given directory, also provides two ways of foreach iteration. The iteration variable can be of type string if only the name is needed, or DirEntry if additional details are needed. The span mode dictates how the directory is traversed. The name of each iterated directory entry contains the absolute or relative *path (depending on * pathname). Note: The order of returned directory entries is as it is provided by the operating system / filesystem, and may not follow any particular sorting. Params useDIP1000 <parameter not found> used to instantiate this function separately for code with and without -preview=dip1000 compiler switch, because it affects the ABI of this function. Set automatically - don't touch. path = The directory to iterate over. If empty, the current directory will be iterated. pattern = Optional string with wildcards, such as $(RED \"*.d\"). When present, it is used to filter the results by their file name. The supported wildcard strings are described under $(REF globMatch, std,_path). mode = Whether the directory's sub-directories should be iterated in depth-first post-order (\\((LREF depth)), depth-first pre-order (\\)(LREF breadth)), or not at all ($(LREF shallow)). followSymlink = Whether symbolic links which point to directories should be treated as directories and their contents iterated over. Returns An $(REF_ALTTEXT input range, isInputRange,std,range,primitives) of $(LREF DirEntry). Throws $(UL $(LI $(LREF FileException) if the $(B path) directory does not exist or read permission is denied.) $(LI $(LREF FileException) if $(B mode) is not shallow and a subdirectory cannot be read.) ) Example: -------------------- // Iterate a directory in depth foreach (string name; dirEntries(\"destroy/me\", SpanMode.depth)) { remove(name); } // Iterate the current directory in breadth foreach (string name; dirEntries(\"\", SpanMode.breadth)) { writeln(name); } // Iterate a directory and get detailed info about it foreach (DirEntry e; dirEntries(\"dmd-testing\", SpanMode.breadth)) { writeln(e.name, \"\\t\", e.size); } // Iterate over all .d files in current directory and all its subdirectories auto dFiles = dirEntries(\"\", SpanMode.depth).filter!(f => f.name.endsWith(\".d\")); foreach (d; dFiles) writeln(d.name); // Hook it up with std.parallelism to compile them all in parallel: foreach (d; parallel(dFiles, 1)) //passes by 1 file to each thread { string cmd = \"dmd -c \" ~ d.name; writeln(cmd); std.process.executeShell(cmd); } // Iterate over all D source files in current directory and all its // subdirectories auto dFiles = dirEntries(\"\",\"*.{d,di}\",SpanMode.depth); foreach (d; dFiles) writeln(d.name); -------------------- To handle subdirectories with denied read permission, use SpanMode.shallow : --- void scan(string path) { foreach (DirEntry entry; dirEntries(path, SpanMode.shallow)) { try { writeln(entry.name); if (entry.isDir) scan(entry.name); } catch (FileException fe) { continue; } // ignore } } scan(\"\"); --- dirEntries(path, pattern, mode, followSymlink) <bug: unknown> dirEntries( string path, string pattern, SpanMode mode, bool followSymlink ) auto Ditto"
  },
  "phobos/std/file/Functions/ensureDirExists.html": {
    "href": "phobos/std/file/Functions/ensureDirExists.html",
    "title": "Overloads for - ensureDirExists | Marmos Demo",
    "keywords": "Overloads for - ensureDirExists Module std.file ensureDirExists(pathname) bool ensureDirExists( <bug: unknown> pathname )"
  },
  "phobos/std/file/Functions/exists.html": {
    "href": "phobos/std/file/Functions/exists.html",
    "title": "Overloads for - exists | Marmos Demo",
    "keywords": "Overloads for - exists Module std.file exists(name) bool exists( R name ) Determine whether the given file (or directory) exists. Params: name = string or range of characters representing the file name Returns: true if the file *name specified as input * exists exists(name) bool exists( R name ) ditto"
  },
  "phobos/std/file/Functions/existsImpl.html": {
    "href": "phobos/std/file/Functions/existsImpl.html",
    "title": "Overloads for - existsImpl | Marmos Demo",
    "keywords": "Overloads for - existsImpl Module std.file existsImpl(namez) bool existsImpl( <bug: unknown> namez )"
  },
  "phobos/std/file/Functions/getAttributes.html": {
    "href": "phobos/std/file/Functions/getAttributes.html",
    "title": "Overloads for - getAttributes | Marmos Demo",
    "keywords": "Overloads for - getAttributes Module std.file getAttributes(name) uint getAttributes( R name ) Returns the attributes of the given file. Note that the file attributes on Windows and POSIX systems are completely different. On Windows, they're what is returned by $(HTTP msdn.microsoft.com/en-us/library/aa364944(v=vs.85).aspx, GetFileAttributes), whereas on POSIX systems, they're the st_mode value which is part of the $(D stat struct) gotten by calling the $(HTTP en.wikipedia.org/wiki/Stat_%28Unix%29, stat ) function. On POSIX systems, if the given file is a symbolic link, then attributes are the attributes of the file pointed to by the symbolic link. Params name R The file to get the attributes of. Returns The attributes of the file as a uint . Throws: $(LREF FileException) on error. getAttributes(name) uint getAttributes( R name ) ditto"
  },
  "phobos/std/file/Functions/getAvailableDiskSpace.html": {
    "href": "phobos/std/file/Functions/getAvailableDiskSpace.html",
    "title": "Overloads for - getAvailableDiskSpace | Marmos Demo",
    "keywords": "Overloads for - getAvailableDiskSpace Module std.file getAvailableDiskSpace(path) ulong getAvailableDiskSpace( <bug: unknown> path ) Returns the available disk space based on a given path. On Windows, path must be a directory; on POSIX systems, it can be a file or directory. Params path <bug: unknown> on Windows, it must be a directory; on POSIX it can be a file or directory Returns Available space in bytes Throws $(LREF FileException) in case of failure"
  },
  "phobos/std/file/Functions/getFileAttributesWin.html": {
    "href": "phobos/std/file/Functions/getFileAttributesWin.html",
    "title": "Overloads for - getFileAttributesWin | Marmos Demo",
    "keywords": "Overloads for - getFileAttributesWin Module std.file getFileAttributesWin(name) WIN32_FILE_ATTRIBUTE_DATA getFileAttributesWin( R name )"
  },
  "phobos/std/file/Functions/getLinkAttributes.html": {
    "href": "phobos/std/file/Functions/getLinkAttributes.html",
    "title": "Overloads for - getLinkAttributes | Marmos Demo",
    "keywords": "Overloads for - getLinkAttributes Module std.file getLinkAttributes(name) uint getLinkAttributes( R name ) If the given file is a symbolic link, then this returns the attributes of the symbolic link itself rather than file that it points to. If the given file is $(I not) a symbolic link, then this function returns the same result as getAttributes. On Windows, getLinkAttributes is identical to getAttributes. It exists on Windows so that you don't have to special-case code for Windows when dealing with symbolic links. Params name R The file to get the symbolic link attributes of. Returns the attributes Throws $(LREF FileException) on error. getLinkAttributes(name) uint getLinkAttributes( R name ) ditto"
  },
  "phobos/std/file/Functions/getSize.html": {
    "href": "phobos/std/file/Functions/getSize.html",
    "title": "Overloads for - getSize | Marmos Demo",
    "keywords": "Overloads for - getSize Module std.file getSize(name) ulong getSize( R name ) Get size of file name in bytes. Params name R string or range of characters representing the file name Returns The size of file in bytes. Throws: $(LREF FileException) on error (e.g., file not found). getSize(name) ulong getSize( R name ) ditto"
  },
  "phobos/std/file/Functions/getTimes.html": {
    "href": "phobos/std/file/Functions/getTimes.html",
    "title": "Overloads for - getTimes | Marmos Demo",
    "keywords": "Overloads for - getTimes Module std.file getTimes(name, accessTime, modificationTime) void getTimes( R name, SysTime accessTime, SysTime modificationTime ) Get the access and modified times of file or folder name . Params name R File/Folder name to get times for. accessTime SysTime Time the file/folder was last accessed. modificationTime SysTime Time the file/folder was last modified. Throws $(LREF FileException) on error. getTimes(name, accessTime, modificationTime) void getTimes( R name, SysTime accessTime, SysTime modificationTime ) ditto"
  },
  "phobos/std/file/Functions/getTimesWin.html": {
    "href": "phobos/std/file/Functions/getTimesWin.html",
    "title": "Overloads for - getTimesWin | Marmos Demo",
    "keywords": "Overloads for - getTimesWin Module std.file getTimesWin(name, fileCreationTime, fileAccessTime, fileModificationTime) void getTimesWin( R name, SysTime fileCreationTime, SysTime fileAccessTime, SysTime fileModificationTime ) $(BLUE This function is Windows-Only.) Get creation/access/modified times of file name . This is the same as getTimes except that it also gives you the file creation time - which isn't possible on POSIX systems. Params name R File name to get times for. fileCreationTime SysTime Time the file was created. fileAccessTime SysTime Time the file was last accessed. fileModificationTime SysTime Time the file was last modified. Throws $(LREF FileException) on error."
  },
  "phobos/std/file/Functions/getcwd.html": {
    "href": "phobos/std/file/Functions/getcwd.html",
    "title": "Overloads for - getcwd | Marmos Demo",
    "keywords": "Overloads for - getcwd Module std.file getcwd() string getcwd( ) Get the current working directory. Throws: $(LREF FileException) on error."
  },
  "phobos/std/file/Functions/isDir.html": {
    "href": "phobos/std/file/Functions/isDir.html",
    "title": "Overloads for - isDir | Marmos Demo",
    "keywords": "Overloads for - isDir Module std.file isDir(name) bool isDir( R name ) Returns whether the given file is a directory. Params name R The path to the file. Returns true if name specifies a directory Throws $(LREF FileException) if the given file does not exist. isDir(name) bool isDir( R name ) ditto"
  },
  "phobos/std/file/Functions/isFile.html": {
    "href": "phobos/std/file/Functions/isFile.html",
    "title": "Overloads for - isFile | Marmos Demo",
    "keywords": "Overloads for - isFile Module std.file isFile(name) bool isFile( R name ) Returns whether the given file (or directory) is a file. On Windows, if a file is not a directory, then it's a file. So, either isFile or isDir will return true for any given file. On POSIX systems, if isFile is true , that indicates that the file is a regular file (e.g. not a block not device). So, on POSIX systems, it's possible for both isFile and isDir to be false for a particular file (in which case, it's a special file). You can use getAttributes to get the attributes to figure out what type of special it is, or you can use DirEntry to get at its statBuf , which is the result from stat . In either case, see the man page for stat for more information. Params name R The path to the file. Returns true if name specifies a file Throws $(LREF FileException) if the given file does not exist. isFile(name) bool isFile( R name ) ditto"
  },
  "phobos/std/file/Functions/isSymlink.html": {
    "href": "phobos/std/file/Functions/isSymlink.html",
    "title": "Overloads for - isSymlink | Marmos Demo",
    "keywords": "Overloads for - isSymlink Module std.file isSymlink(name) bool isSymlink( R name ) Returns whether the given file is a symbolic link. On Windows, returns true when the file is either a symbolic link or a junction point. Params name R The path to the file. Returns true if name is a symbolic link Throws $(LREF FileException) if the given file does not exist. isSymlink(name) bool isSymlink( R name ) ditto"
  },
  "phobos/std/file/Functions/makeUlong.html": {
    "href": "phobos/std/file/Functions/makeUlong.html",
    "title": "Overloads for - makeUlong | Marmos Demo",
    "keywords": "Overloads for - makeUlong Module std.file makeUlong(dwLow, dwHigh) ulong makeUlong( DWORD dwLow, DWORD dwHigh )"
  },
  "phobos/std/file/Functions/mkdir.html": {
    "href": "phobos/std/file/Functions/mkdir.html",
    "title": "Overloads for - mkdir | Marmos Demo",
    "keywords": "Overloads for - mkdir Module std.file mkdir(pathname) void mkdir( R pathname ) Make a new directory pathname . Params pathname R the path of the directory to make Throws $(LREF FileException) on POSIX or $(LREF WindowsException) on Windows if an error occured. mkdir(pathname) void mkdir( R pathname ) ditto"
  },
  "phobos/std/file/Functions/mkdirRecurse.html": {
    "href": "phobos/std/file/Functions/mkdirRecurse.html",
    "title": "Overloads for - mkdirRecurse | Marmos Demo",
    "keywords": "Overloads for - mkdirRecurse Module std.file mkdirRecurse(pathname) void mkdirRecurse( <bug: unknown> pathname ) Make directory and all parent directories as needed. Does nothing if the directory specified by pathname already exists. Params pathname <bug: unknown> the full path of the directory to create Throws: $(LREF FileException) on error."
  },
  "phobos/std/file/Functions/read.html": {
    "href": "phobos/std/file/Functions/read.html",
    "title": "Overloads for - read | Marmos Demo",
    "keywords": "Overloads for - read Module std.file read(name, upTo) <bug: unknown> read( R name, size_t upTo ) Read entire contents of file name and returns it as an untyped array. If the file size is larger than upTo , only upTo bytes are read. Params name R string or range of characters representing the file name upTo size_t if present, the maximum number of bytes to read Returns: Untyped array of bytes read. Throws: $(LREF FileException) on error. See_Also: $(REF readText, std,file) for reading and validating a text file. read(name, upTo) <bug: unknown> read( R name, size_t upTo ) ditto"
  },
  "phobos/std/file/Functions/readImpl.html": {
    "href": "phobos/std/file/Functions/readImpl.html",
    "title": "Overloads for - readImpl | Marmos Demo",
    "keywords": "Overloads for - readImpl Module std.file readImpl(name, namez, upTo) <bug: unknown> readImpl( <bug: unknown> name, <bug: unknown> namez, size_t upTo ) readImpl(name, namez, upTo) <bug: unknown> readImpl( <bug: unknown> name, <bug: unknown> namez, size_t upTo )"
  },
  "phobos/std/file/Functions/readLink.html": {
    "href": "phobos/std/file/Functions/readLink.html",
    "title": "Overloads for - readLink | Marmos Demo",
    "keywords": "Overloads for - readLink Module std.file readLink(link) string readLink( R link ) $(BLUE This function is POSIX-Only.) Returns the path to the file pointed to by a symlink. Note that the path could be either relative or absolute depending on the symlink. If the path is relative, it's relative to the symlink, not the current working directory. Throws $(LREF FileException) on error."
  },
  "phobos/std/file/Functions/readText.html": {
    "href": "phobos/std/file/Functions/readText.html",
    "title": "Overloads for - readText | Marmos Demo",
    "keywords": "Overloads for - readText Module std.file readText(name) S readText( R name ) Reads and validates (using $(REF validate, std, utf)) a text file. S can be an array of any character type. However, no width or endian conversions are performed. So, if the width or endianness of the characters in the given file differ from the width or endianness of the element type of S, then validation will fail. Params S <parameter not found> the string type of the file name R string or range of characters representing the file name Returns: Array of characters read. Throws: $(LREF FileException) if there is an error reading the file, $(REF UTFException, std, utf) on UTF decoding error. See_Also: $(REF read, std,file) for reading a binary file."
  },
  "phobos/std/file/Functions/remove.html": {
    "href": "phobos/std/file/Functions/remove.html",
    "title": "Overloads for - remove | Marmos Demo",
    "keywords": "Overloads for - remove Module std.file remove(name) void remove( R name ) Delete file name . Params name R string or range of characters representing the file name Throws: $(LREF FileException) on error. remove(name) void remove( R name ) ditto"
  },
  "phobos/std/file/Functions/removeImpl.html": {
    "href": "phobos/std/file/Functions/removeImpl.html",
    "title": "Overloads for - removeImpl | Marmos Demo",
    "keywords": "Overloads for - removeImpl Module std.file removeImpl(name, namez) void removeImpl( <bug: unknown> name, <bug: unknown> namez )"
  },
  "phobos/std/file/Functions/rename.html": {
    "href": "phobos/std/file/Functions/rename.html",
    "title": "Overloads for - rename | Marmos Demo",
    "keywords": "Overloads for - rename Module std.file rename(from, to) void rename( RF from, RT to ) Rename file from to to, moving it between directories if required. If the target file exists, it is overwritten. It is not possible to rename a file across different mount points or drives. On POSIX, the operation is atomic. That means, if to already exists there will be no time period during the operation where to is missing. See $(HTTP man7.org/linux/man-pages/man2/rename.2.html, manpage for rename) for more details. Params from RF string or range of characters representing the existing file name to RT string or range of characters representing the target file name Throws: $(LREF FileException) on error. rename(from, to) void rename( RF from, RT to ) ditto"
  },
  "phobos/std/file/Functions/renameImpl.html": {
    "href": "phobos/std/file/Functions/renameImpl.html",
    "title": "Overloads for - renameImpl | Marmos Demo",
    "keywords": "Overloads for - renameImpl Module std.file renameImpl(f, t, fromz, toz) void renameImpl( <bug: unknown> f, <bug: unknown> t, <bug: unknown> fromz, <bug: unknown> toz )"
  },
  "phobos/std/file/Functions/rmdir.html": {
    "href": "phobos/std/file/Functions/rmdir.html",
    "title": "Overloads for - rmdir | Marmos Demo",
    "keywords": "Overloads for - rmdir Module std.file rmdir(pathname) void rmdir( R pathname ) Remove directory pathname . Params pathname R Range or string specifying the directory name Throws: $(LREF FileException) on error. rmdir(pathname) void rmdir( R pathname ) ditto"
  },
  "phobos/std/file/Functions/rmdirRecurse.html": {
    "href": "phobos/std/file/Functions/rmdirRecurse.html",
    "title": "Overloads for - rmdirRecurse | Marmos Demo",
    "keywords": "Overloads for - rmdirRecurse Module std.file rmdirRecurse(pathname) void rmdirRecurse( <bug: unknown> pathname ) Remove directory and all of its content and subdirectories, recursively. Params pathname <bug: unknown> the path of the directory to completely remove de <parameter not found> The $(LREF DirEntry) to remove Throws $(LREF FileException) if there is an error (including if the given file is not a directory). rmdirRecurse(de) void rmdirRecurse( DirEntry de ) ditto rmdirRecurse(de) void rmdirRecurse( DirEntry de ) ditto"
  },
  "phobos/std/file/Functions/setAttributes.html": {
    "href": "phobos/std/file/Functions/setAttributes.html",
    "title": "Overloads for - setAttributes | Marmos Demo",
    "keywords": "Overloads for - setAttributes Module std.file setAttributes(name, attributes) void setAttributes( R name, uint attributes ) Set the attributes of the given file. For example, a programmatic equivalent of Unix's chmod +x name to make a file executable is name.setAttributes(name.getAttributes | octal!700) . Params name R the file name attributes uint the attributes to set the file to Throws $(LREF FileException) if the given file does not exist. setAttributes(name, attributes) void setAttributes( R name, uint attributes ) ditto"
  },
  "phobos/std/file/Functions/setTimes.html": {
    "href": "phobos/std/file/Functions/setTimes.html",
    "title": "Overloads for - setTimes | Marmos Demo",
    "keywords": "Overloads for - setTimes Module std.file setTimes(name, accessTime, modificationTime) void setTimes( R name, SysTime accessTime, SysTime modificationTime ) Set access/modified times of file or folder name . Params name R File/Folder name to get times for. accessTime SysTime Time the file/folder was last accessed. modificationTime SysTime Time the file/folder was last modified. Throws $(LREF FileException) on error. setTimes(name, accessTime, modificationTime) void setTimes( R name, SysTime accessTime, SysTime modificationTime ) ditto"
  },
  "phobos/std/file/Functions/setTimesImpl.html": {
    "href": "phobos/std/file/Functions/setTimesImpl.html",
    "title": "Overloads for - setTimesImpl | Marmos Demo",
    "keywords": "Overloads for - setTimesImpl Module std.file setTimesImpl(names, namez, accessTime, modificationTime) void setTimesImpl( <bug: unknown> names, <bug: unknown> namez, SysTime accessTime, SysTime modificationTime )"
  },
  "phobos/std/file/Functions/setattrlist.html": {
    "href": "phobos/std/file/Functions/setattrlist.html",
    "title": "Overloads for - setattrlist | Marmos Demo",
    "keywords": "Overloads for - setattrlist Module std.file setattrlist(path, attrs, attrbuf, attrBufSize, options) int setattrlist( <bug: unknown> path, attrlist attrs, <bug: unknown> attrbuf, size_t attrBufSize, c_ulong options )"
  },
  "phobos/std/file/Functions/slurp.html": {
    "href": "phobos/std/file/Functions/slurp.html",
    "title": "Overloads for - slurp | Marmos Demo",
    "keywords": "Overloads for - slurp Module std.file slurp(filename, format) Select!(Types.length == 1Types[0][]Tuple!Types[]) slurp( string filename, <bug: unknown> format ) Reads a file line by line and parses the line into a single value or a $(REF Tuple, std,typecons) of values depending on the length of Types . The lines are parsed using the specified format string. The format string is passed to $(REF formattedRead, std,_format), and therefore must conform to the *format string specification outlined in $(MREF std, * format). Params Types <parameter not found> the types that each of the elements in the line should be returned as filename string the name of the file to read format <bug: unknown> the format string to use when reading Returns If only one type is passed, then an array of that type. Otherwise, an array of $(REF Tuple, std,typecons)s. Throws Exception if the format string is malformed. Also, throws Exception if any of the lines in the file are not fully consumed by the call to $(REF formattedRead, std,_format). Meaning that no empty lines or lines with extra characters are allowed."
  },
  "phobos/std/file/Functions/statTimeToStdTime.html": {
    "href": "phobos/std/file/Functions/statTimeToStdTime.html",
    "title": "Overloads for - statTimeToStdTime | Marmos Demo",
    "keywords": "Overloads for - statTimeToStdTime Module std.file statTimeToStdTime(statbuf) SysTime statTimeToStdTime( stat_t statbuf )"
  },
  "phobos/std/file/Functions/symlink.html": {
    "href": "phobos/std/file/Functions/symlink.html",
    "title": "Overloads for - symlink | Marmos Demo",
    "keywords": "Overloads for - symlink Module std.file symlink(original, link) void symlink( RO original, RL link ) $(BLUE This function is POSIX-Only.) Creates a symbolic link ( symlink). Params original RO The file that is being linked. This is the target path that's stored in the symlink. A relative path is relative to the created symlink. link RL The symlink to create. A relative path is relative to the current working directory. Throws $(LREF FileException) on error (which includes if the symlink already exists)."
  },
  "phobos/std/file/Functions/tempDir.html": {
    "href": "phobos/std/file/Functions/tempDir.html",
    "title": "Overloads for - tempDir | Marmos Demo",
    "keywords": "Overloads for - tempDir Module std.file tempDir() string tempDir( ) Returns the path to a directory for temporary files. On POSIX platforms, it searches through the following list of directories and returns the first one which is found to exist: $(OL $(LI The directory given by the TMPDIR environment variable.) $(LI The directory given by the TEMP environment variable.) $(LI The directory given by the TMP environment variable.) $(LI /tmp/ ) $(LI /var/tmp/ ) $(LI /usr/tmp/ ) ) On all platforms, tempDir returns the current working directory on failure. The return value of the function is cached, so the procedures described below will only be performed the first time the function is called. All subsequent runs will return the same string, regardless of whether environment variables and directory structures have changed in the meantime. The POSIX tempDir algorithm is inspired by Python's $(LINK2 http://docs.python.org/library/tempfile.html#tempfile.tempdir, tempfile.tempdir ). Returns On Windows, this function returns the result of calling the Windows API function $(LINK2 http://msdn.microsoft.com/en-us/library/windows/desktop/aa364992.aspx, GetTempPath ). On POSIX platforms, it searches through the following list of directories and returns the first one which is found to exist: $(OL $(LI The directory given by the TMPDIR environment variable.) $(LI The directory given by the TEMP environment variable.) $(LI The directory given by the TMP environment variable.) $(LI /tmp ) $(LI /var/tmp ) $(LI /usr/tmp ) ) On all platforms, tempDir returns \".\" on failure, representing the current working directory."
  },
  "phobos/std/file/Functions/thisExePath.html": {
    "href": "phobos/std/file/Functions/thisExePath.html",
    "title": "Overloads for - thisExePath | Marmos Demo",
    "keywords": "Overloads for - thisExePath Module std.file thisExePath() string thisExePath( ) Returns the full path of the current executable. Returns The path of the executable as a string . Throws $(REF1 Exception, object)"
  },
  "phobos/std/file/Functions/timeLastAccessed.html": {
    "href": "phobos/std/file/Functions/timeLastAccessed.html",
    "title": "Overloads for - timeLastAccessed | Marmos Demo",
    "keywords": "Overloads for - timeLastAccessed Module std.file timeLastAccessed(statbuf) SysTime timeLastAccessed( stat_t statbuf ) $(BLUE This function is POSIX-Only.) Returns the time that the given file was last accessed. Params: statbuf = stat_t retrieved from file."
  },
  "phobos/std/file/Functions/timeLastModified.html": {
    "href": "phobos/std/file/Functions/timeLastModified.html",
    "title": "Overloads for - timeLastModified | Marmos Demo",
    "keywords": "Overloads for - timeLastModified Module std.file timeLastModified(name) SysTime timeLastModified( R name ) Returns the time that the given file was last modified. Params name R the name of the file to check Returns A $(REF SysTime,std,datetime,systime). Throws: $(LREF FileException) if the given file does not exist. timeLastModified(name) SysTime timeLastModified( R name ) ditto timeLastModified(name, returnIfMissing) SysTime timeLastModified( R name, SysTime returnIfMissing ) Returns the time that the given file was last modified. If the file does not exist, returns returnIfMissing . A frequent usage pattern occurs in build automation tools such as $(HTTP gnu.org/software/make, make) or $(HTTP en.wikipedia.org/wiki/Apache_Ant, ant). To check whether file $(D target) must be rebuilt from file source (i.e., target is older than source or does not exist), use the comparison below. The code throws a $(LREF FileException) if source does not exist (as it should). On the other hand, the SysTime.min default makes a non-existing target seem infinitely old so the test correctly prompts building it. Params name R The name of the file to get the modification time for. returnIfMissing SysTime The time to return if the given file does not exist. returnIfMissing = The time to return if the given file does not exist. Returns: A $(REF SysTime,std,datetime,systime). Example: -------------------- if (source.timeLastModified >= target.timeLastModified(SysTime.min)) { // must (re)build } else { // target is up-to-date } -------------------- timeLastModified(statbuf) SysTime timeLastModified( stat_t statbuf ) $(BLUE This function is POSIX-Only.) Returns the time that the given file was last modified. Params: statbuf = stat_t retrieved from file."
  },
  "phobos/std/file/Functions/timeStatusChanged.html": {
    "href": "phobos/std/file/Functions/timeStatusChanged.html",
    "title": "Overloads for - timeStatusChanged | Marmos Demo",
    "keywords": "Overloads for - timeStatusChanged Module std.file timeStatusChanged(statbuf) SysTime timeStatusChanged( stat_t statbuf ) $(BLUE This function is POSIX-Only.) Returns the time that the given file was last changed. Params: statbuf = stat_t retrieved from file."
  },
  "phobos/std/file/Functions/trustedCloseHandle.html": {
    "href": "phobos/std/file/Functions/trustedCloseHandle.html",
    "title": "Overloads for - trustedCloseHandle | Marmos Demo",
    "keywords": "Overloads for - trustedCloseHandle Module std.file trustedCloseHandle(__anonymous) BOOL trustedCloseHandle( HANDLE __anonymous )"
  },
  "phobos/std/file/Functions/trustedCreateFileW.html": {
    "href": "phobos/std/file/Functions/trustedCreateFileW.html",
    "title": "Overloads for - trustedCreateFileW | Marmos Demo",
    "keywords": "Overloads for - trustedCreateFileW Module std.file trustedCreateFileW(namez, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile) HANDLE trustedCreateFileW( <bug: unknown> namez, DWORD dwDesiredAccess, DWORD dwShareMode, <bug: unknown> lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile )"
  },
  "phobos/std/file/Functions/trustedStat.html": {
    "href": "phobos/std/file/Functions/trustedStat.html",
    "title": "Overloads for - trustedStat | Marmos Demo",
    "keywords": "Overloads for - trustedStat Module std.file trustedStat(namez, buf) int trustedStat( <bug: unknown> namez, stat_t buf )"
  },
  "phobos/std/file/Functions/write.html": {
    "href": "phobos/std/file/Functions/write.html",
    "title": "Overloads for - write | Marmos Demo",
    "keywords": "Overloads for - write Module std.file write(name, buffer) void write( R name, <bug: unknown> buffer ) Write buffer to file name . Creates the file if it does not already exist. Params name R string or range of characters representing the file name buffer <bug: unknown> data to be written to file Throws: $(LREF FileException) on error. See_also: $(REF toFile, std,stdio) write(name, buffer) void write( R name, <bug: unknown> buffer ) ditto"
  },
  "phobos/std/file/Functions/writeImpl.html": {
    "href": "phobos/std/file/Functions/writeImpl.html",
    "title": "Overloads for - writeImpl | Marmos Demo",
    "keywords": "Overloads for - writeImpl Module std.file writeImpl(name, namez, buffer, append) void writeImpl( <bug: unknown> name, <bug: unknown> namez, <bug: unknown> buffer, bool append ) writeImpl(name, namez, buffer, append) void writeImpl( <bug: unknown> name, <bug: unknown> namez, <bug: unknown> buffer, bool append )"
  },
  "phobos/std/file/Overview.html": {
    "href": "phobos/std/file/Overview.html",
    "title": "Module - std.file | Marmos Demo",
    "keywords": "Module - std.file About Utilities for manipulating files and scanning directories. Functions in this module handle files as a unit, e.g., read or write one file at a time. For opening files and manipulating them via handles refer to module $(MREF std, stdio). $(SCRIPT inhibitQuickIndex = 1;) $(DIVC quickindex, $(BOOKTABLE, $(TR $(TH Category) $(TH Functions)) $(TR $(TD General) $(TD $(LREF exists) $(LREF isDir) $(LREF isFile) $(LREF isSymlink) $(LREF rename) $(LREF thisExePath) )) $(TR $(TD Directories) $(TD $(LREF chdir) $(LREF dirEntries) $(LREF getcwd) $(LREF mkdir) $(LREF mkdirRecurse) $(LREF rmdir) $(LREF rmdirRecurse) $(LREF tempDir) )) $(TR $(TD Files) $(TD $(LREF append) $(LREF copy) $(LREF read) $(LREF readText) $(LREF remove) $(LREF slurp) $(LREF write) )) $(TR $(TD Symlinks) $(TD $(LREF symlink) $(LREF readLink) )) $(TR $(TD Attributes) $(TD $(LREF attrIsDir) $(LREF attrIsFile) $(LREF attrIsSymlink) $(LREF getAttributes) $(LREF getLinkAttributes) $(LREF getSize) $(LREF setAttributes) )) $(TR $(TD Timestamp) $(TD $(LREF getTimes) $(LREF getTimesWin) $(LREF setTimes) $(LREF timeLastModified) $(LREF timeLastAccessed) $(LREF timeStatusChanged) )) $(TR $(TD Other) $(TD $(LREF DirEntry) $(LREF FileException) $(LREF PreserveAttributes) $(LREF SpanMode) $(LREF getAvailableDiskSpace) )) )) Copyright: Copyright The D Language Foundation 2007 - 2011. See_Also: The $(HTTP ddili.org/ders/d.en/files.html, official tutorial) for an introduction to working with files in D, module $(MREF std, stdio) for opening files and manipulating them via handles, and module $(MREF std, path) for manipulating path strings. License: $(HTTP boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP digitalmars.com, Walter Bright), $(HTTP erdani.org, Andrei Alexandrescu), $(HTTP jmdavisprog.com, Jonathan M Davis) Source: $(PHOBOSSRC std/file.d) Aliases Name Description attrgroup_t DirIterator FSChar PreserveAttributes Classes Name Description FileException Exception thrown for file I/O errors. Structs Name Description attrlist DirEntry Info on a file, similar to what you'd get from stat on a POSIX system. DirIteratorImpl TestAliasedString Functions Name Description append Appends buffer to file name . attrIsDir Returns whether the given file attributes are for a directory. attrIsFile Returns whether the given file attributes are for a file. attrIsSymlink Returns whether the given file attributes are for a symbolic link. cenforce chdir Change directory to pathname . Equivalent to cd on Windows and POSIX. copy Copy file from to file to. File timestamps are preserved. File attributes are preserved, if preserve equals Yes.preserveAttributes . On Windows only Yes.preserveAttributes (the default on Windows) is supported. If the target file exists, it is overwritten. copyImpl deleteme dirEntries Returns an $(REF_ALTTEXT input range, isInputRange, std,range,primitives) of DirEntry that lazily iterates a given directory, also provides two ways of foreach iteration. The iteration variable can be of type string if only the name is needed, or DirEntry if additional details are needed. The span mode dictates how the directory is traversed. The name of each iterated directory entry contains the absolute or relative *path (depending on * pathname). ensureDirExists exists Determine whether the given file (or directory) exists. Params: name = string or range of characters representing the file name Returns: true if the file *name specified as input * exists existsImpl getAttributes Returns the attributes of the given file. getAvailableDiskSpace Returns the available disk space based on a given path. On Windows, path must be a directory; on POSIX systems, it can be a file or directory. getcwd Get the current working directory. Throws: $(LREF FileException) on error. getFileAttributesWin getLinkAttributes If the given file is a symbolic link, then this returns the attributes of the symbolic link itself rather than file that it points to. If the given file is $(I not) a symbolic link, then this function returns the same result as getAttributes. getSize Get size of file name in bytes. getTimes Get the access and modified times of file or folder name . getTimesWin $(BLUE This function is Windows-Only.) isDir Returns whether the given file is a directory. isFile Returns whether the given file (or directory) is a file. isSymlink Returns whether the given file is a symbolic link. makeUlong mkdir Make a new directory pathname . mkdirRecurse Make directory and all parent directories as needed. read Read entire contents of file name and returns it as an untyped array. If the file size is larger than upTo , only upTo bytes are read. readImpl readLink $(BLUE This function is POSIX-Only.) readText Reads and validates (using $(REF validate, std, utf)) a text file. S can be an array of any character type. However, no width or endian conversions are performed. So, if the width or endianness of the characters in the given file differ from the width or endianness of the element type of S, then validation will fail. remove Delete file name . removeImpl rename Rename file from to to, moving it between directories if required. If the target file exists, it is overwritten. renameImpl rmdir Remove directory pathname . rmdirRecurse Remove directory and all of its content and subdirectories, recursively. setAttributes Set the attributes of the given file. setattrlist setTimes Set access/modified times of file or folder name . setTimesImpl slurp Reads a file line by line and parses the line into a single value or a $(REF Tuple, std,typecons) of values depending on the length of Types . The lines are parsed using the specified format string. The format string is passed to $(REF formattedRead, std,_format), and therefore must conform to the *format string specification outlined in $(MREF std, * format). statTimeToStdTime symlink $(BLUE This function is POSIX-Only.) tempDir Returns the path to a directory for temporary files. On POSIX platforms, it searches through the following list of directories and returns the first one which is found to exist: $(OL $(LI The directory given by the TMPDIR environment variable.) $(LI The directory given by the TEMP environment variable.) $(LI The directory given by the TMP environment variable.) $(LI /tmp/ ) $(LI /var/tmp/ ) $(LI /usr/tmp/ ) ) thisExePath Returns the full path of the current executable. timeLastAccessed $(BLUE This function is POSIX-Only.) timeLastModified Returns the time that the given file was last modified. timeStatusChanged $(BLUE This function is POSIX-Only.) trustedCloseHandle trustedCreateFileW trustedStat write Write buffer to file name . writeImpl Variables Name Description ATTR_CMN_ACCTIME ATTR_CMN_MODTIME preserveAttributesDefault Defaults to Yes.preserveAttributes on Windows, and the opposite on all other platforms. system_directory system_file"
  },
  "phobos/std/file/Structs/DirEntry.html": {
    "href": "phobos/std/file/Structs/DirEntry.html",
    "title": "Struct - DirEntry | Marmos Demo",
    "keywords": "Struct - DirEntry Module std.file public struct DirEntry { // alias stat_t = <todo: marmos support pending>; // Returns the attributes of the file represented by this `DirEntry`. uint attributes( ) ; // Returns whether the file represented by this `DirEntry` is a directory. bool isDir( ) ; // Returns whether the file represented by this `DirEntry` is a file. bool isFile( ) ; // Returns whether the file represented by this `DirEntry` is a symbolic link. bool isSymlink( ) ; // On POSIX systems, if the file represented by this `DirEntry` is a symbolic link, then `linkAttributes` are the attributes of the symbolic link itself. Otherwise, `linkAttributes` is identical to `attributes` . uint linkAttributes( ) ; // Returns the path to the file represented by this `DirEntry` . string name( ) ; // Returns the size of the file represented by this `DirEntry` in bytes. ulong size( ) ; // $(BLUE This function is POSIX-Only.) stat_t statBuf( ) ; // $(BLUE This function is Windows-Only.) SysTime timeCreated( ) ; // Returns the time that the file represented by this `DirEntry` was last accessed. SysTime timeLastAccessed( ) ; // Returns the time that the file represented by this `DirEntry` was last modified. SysTime timeLastModified( ) ; // $(BLUE This function is POSIX-Only.) SysTime timeStatusChanged( ) ; } About Info on a file, similar to what you'd get from stat on a POSIX system. Aliases Name Description stat_t Functions Name Description attributes Returns the attributes of the file represented by this DirEntry. isDir Returns whether the file represented by this DirEntry is a directory. isFile Returns whether the file represented by this DirEntry is a file. isSymlink Returns whether the file represented by this DirEntry is a symbolic link. linkAttributes On POSIX systems, if the file represented by this DirEntry is a symbolic link, then linkAttributes are the attributes of the symbolic link itself. Otherwise, linkAttributes is identical to attributes . name Returns the path to the file represented by this DirEntry . size Returns the size of the file represented by this DirEntry in bytes. statBuf $(BLUE This function is POSIX-Only.) timeCreated $(BLUE This function is Windows-Only.) timeLastAccessed Returns the time that the file represented by this DirEntry was last accessed. timeLastModified Returns the time that the file represented by this DirEntry was last modified. timeStatusChanged $(BLUE This function is POSIX-Only.)"
  },
  "phobos/std/file/Structs/DirIteratorImpl.html": {
    "href": "phobos/std/file/Structs/DirIteratorImpl.html",
    "title": "Struct - DirIteratorImpl | Marmos Demo",
    "keywords": "Struct - DirIteratorImpl Module std.file public struct DirIteratorImpl { // bool empty( ) ; // DirEntry front( ) ; // bool hasExtra( ) ; // bool mayStepIn( ) ; // bool next( ) ; // void popDirStack( ) ; // DirEntry popExtra( ) ; // void popFront( ) ; // void pushExtra( DirEntry de ) ; // void releaseDirStack( ) ; // bool stepIn( string directory ) ; // bool toNext( bool fetch, <bug: unknown> findinfo ) ; } Functions Name Description empty front hasExtra mayStepIn next popDirStack popExtra popFront pushExtra releaseDirStack stepIn toNext"
  },
  "phobos/std/file/Structs/TestAliasedString.html": {
    "href": "phobos/std/file/Structs/TestAliasedString.html",
    "title": "Struct - TestAliasedString | Marmos Demo",
    "keywords": "Struct - TestAliasedString Module std.file public struct TestAliasedString { // string get( ) ; } Functions Name Description get"
  },
  "phobos/std/file/Structs/attrlist.html": {
    "href": "phobos/std/file/Structs/attrlist.html",
    "title": "Struct - attrlist | Marmos Demo",
    "keywords": "Struct - attrlist Module std.file public struct attrlist { // ushort bitmapcount; // attrgroup_t commonattr; // attrgroup_t dirattr; // attrgroup_t fileattr; // attrgroup_t forkattr; // ushort reserved; // attrgroup_t volattr; } Variables Name Description bitmapcount commonattr dirattr fileattr forkattr reserved volattr"
  },
  "phobos/std/file/TestAliasedString/Functions/get.html": {
    "href": "phobos/std/file/TestAliasedString/Functions/get.html",
    "title": "Overloads for - get | Marmos Demo",
    "keywords": "Overloads for - get Module std.file Parent TestAliasedString get() string get( )"
  },
  "phobos/std/format/Classes/FormatException.html": {
    "href": "phobos/std/format/Classes/FormatException.html",
    "title": "Class - FormatException | Marmos Demo",
    "keywords": "Class - FormatException Module std.format public class FormatException { } About Signals an issue encountered while formatting."
  },
  "phobos/std/format/Functions/format.html": {
    "href": "phobos/std/format/Functions/format.html",
    "title": "Overloads for - format | Marmos Demo",
    "keywords": "Overloads for - format Module std.format format(fmt, args) <bug: unknown> format( <bug: unknown> fmt, Args args ) Converts its arguments according to a format string into a string. The second version of format takes the format string as template argument. In this case, it is checked for consistency at compile-time and produces slightly faster code, because the length of the output buffer can be estimated in advance. Params fmt <bug: unknown> a $(MREF_ALTTEXT format string, std,format) args Args a variadic list of arguments to be formatted Char <parameter not found> character type of fmt Args <parameter not found> a variadic list of types of the arguments Returns The formatted string. Throws A $(LREF FormatException) if formatting did not succeed. See_Also $(LREF sformat) for a variant, that tries to avoid garbage collection. format(args) <bug: unknown> format( Args args ) ditto"
  },
  "phobos/std/format/Functions/formatElement.html": {
    "href": "phobos/std/format/Functions/formatElement.html",
    "title": "Overloads for - formatElement | Marmos Demo",
    "keywords": "Overloads for - formatElement Module std.format formatElement(w, val, f) void formatElement( Writer w, T val, FormatSpec!(Char) f ) formatElement(w, val, f) void formatElement( Writer w, T val, FormatSpec!(Char) f ) formatElement(w, val, f) void formatElement( Writer w, T val, FormatSpec!(Char) f )"
  },
  "phobos/std/format/Functions/formatReflectTest.html": {
    "href": "phobos/std/format/Functions/formatReflectTest.html",
    "title": "Overloads for - formatReflectTest | Marmos Demo",
    "keywords": "Overloads for - formatReflectTest Module std.format formatReflectTest(val, fmt, formatted, fn, ln) void formatReflectTest( T val, string fmt, string formatted, string fn, size_t ln ) formatReflectTest(val, fmt, formatted, fn, ln) void formatReflectTest( T val, string fmt, <bug: unknown> formatted, string fn, size_t ln )"
  },
  "phobos/std/format/Functions/guessLength.html": {
    "href": "phobos/std/format/Functions/guessLength.html",
    "title": "Overloads for - guessLength | Marmos Demo",
    "keywords": "Overloads for - guessLength Module std.format guessLength(fmtString) size_t guessLength( S fmtString )"
  },
  "phobos/std/format/Functions/sformat.html": {
    "href": "phobos/std/format/Functions/sformat.html",
    "title": "Overloads for - sformat | Marmos Demo",
    "keywords": "Overloads for - sformat Module std.format sformat(buf, fmt, args) <bug: unknown> sformat( <bug: unknown> buf, <bug: unknown> fmt, Args args ) Converts its arguments according to a format string into a buffer. The buffer has to be large enough to hold the formatted string. The second version of sformat takes the format string as a template argument. In this case, it is checked for consistency at compile-time. Params buf <bug: unknown> the buffer where the formatted string should go fmt <bug: unknown> a $(MREF_ALTTEXT format string, std,format) args Args a variadic list of arguments to be formatted Char <parameter not found> character type of fmt Args <parameter not found> a variadic list of types of the arguments Returns A slice of buf containing the formatted string. Throws A $(REF_ALTTEXT RangeError, RangeError, core, exception) if buf isn't large enough to hold the formatted string and a $(LREF FormatException) if formatting did not succeed. Note In theory this function should be @nogc . But with the current implementation there are some cases where allocations occur: $(UL $(LI An exception is thrown.) $(LI A custom toString function of a compound type allocates.)) sformat(buf, args) <bug: unknown> sformat( <bug: unknown> buf, Args args ) ditto"
  },
  "phobos/std/format/Functions/unformatElement.html": {
    "href": "phobos/std/format/Functions/unformatElement.html",
    "title": "Overloads for - unformatElement | Marmos Demo",
    "keywords": "Overloads for - unformatElement Module std.format unformatElement(input, spec) T unformatElement( Range input, FormatSpec!(Char) spec )"
  },
  "phobos/std/format/Overview.html": {
    "href": "phobos/std/format/Overview.html",
    "title": "Module - std.format | Marmos Demo",
    "keywords": "Module - std.format About This package provides string formatting functionality using printf style format strings. $(BOOKTABLE , $(TR $(TH Submodule) $(TH Function Name) $(TH Description)) $(TR $(TD $(I package)) $(TD $(LREF format)) $(TD Converts its arguments according to a format string into a string.) ) $(TR $(TD $(I package)) $(TD $(LREF sformat)) $(TD Converts its arguments according to a format string into a buffer.) ) $(TR $(TD $(I package)) $(TD $(LREF FormatException)) $(TD Signals a problem while formatting.) ) $(TR $(TD $(MREF_ALTTEXT $(D write), std, format, write)) $(TD $(REF_ALTTEXT $(D formattedWrite), formattedWrite, std, format, write)) $(TD Converts its arguments according to a format string and writes the result to an output range.) ) $(TR $(TD $(MREF_ALTTEXT $(D write), std, format, write)) $(TD $(REF_ALTTEXT $(D formatValue), formatValue, std, format, write)) $(TD Formats a value of any type according to a format specifier and writes the result to an output range.) ) $(TR $(TD $(MREF_ALTTEXT $(D read), std, format, read)) $(TD $(REF_ALTTEXT $(D formattedRead), formattedRead, std, format, read)) $(TD Reads an input range according to a format string and stores the read values into its arguments.) ) $(TR $(TD $(MREF_ALTTEXT $(D read), std, format, read)) $(TD $(REF_ALTTEXT $(D unformatValue), unformatValue, std, format, read)) $(TD Reads a value from the given input range and converts it according to a format specifier.) ) $(TR $(TD $(MREF_ALTTEXT $(D spec), std, format, spec)) $(TD $(REF_ALTTEXT $(D FormatSpec), FormatSpec, std, format, spec)) $(TD A general handler for format strings.) ) $(TR $(TD $(MREF_ALTTEXT $(D spec), std, format, spec)) $(TD $(REF_ALTTEXT $(D singleSpec), singleSpec, std, format, spec)) $(TD Helper function that returns a FormatSpec for a single format specifier.) )) Limitation: This package does not support localization, but adheres to the rounding mode of the floating point unit, if available. $(SECTION3 Format Strings) The functions contained in this package use $(I format strings). A format string describes the layout of another string for reading or writing purposes. A format string is composed of normal text interspersed with $(I format specifiers). A format specifier starts with a percentage sign $(B '%'), optionally followed by one or more $(I parameters) and ends with a $(I format indicator). A format indicator may be a simple $(I format character) or a $(I compound indicator). $(I Format strings) are composed according to the following grammar $(PRE $(I FormatString): $(I FormatStringItem) $(I FormatString) $(I FormatStringItem): $(I Character) $(I FormatSpecifier) $(I FormatSpecifier): $(B '%') $(I Parameters) $(I FormatIndicator) $(I FormatIndicator) $(I FormatCharacter) $(I CompoundIndicator) $(I FormatCharacter): $(I see remark below) $(I CompoundIndicator): \\((B '\\)(LPAREN)') $(I FormatString) \\((B '%\\)(RPAREN)') \\((B '\\)(LPAREN)') $(I FormatString) $(B '%|') $(I Delimiter) \\((B '%\\)(RPAREN)') $(I Delimiter) $(I empty) $(I Character) $(I Delimiter) $(I Parameters) $(I Position) $(I Flags) $(I Width) $(I Precision) $(I Separator) $(I Position): $(I empty) $(I Integer) \\((B '\\)') $(I Integer) $(B ':') $(I Integer) \\((B '\\)') $(I Integer) $(B ':') \\((B '\\)') $(I Flags): $(I empty) $(I Flag) $(I Flags) $(I Flag): \\((B '-')|\\)(B '+')|\\((B '&nbsp;')|\\)(B '0')|\\((B '#')|\\)(B '=') $(I Width): $(I OptionalPositionalInteger) $(I Precision): $(I empty) $(B '.') $(I OptionalPositionalInteger) $(I Separator): $(I empty) $(B ',') $(I OptionalInteger) $(B ',') $(I OptionalInteger) $(B '?') $(I OptionalInteger): $(I empty) $(I Integer) $(B '') $(I OptionalPositionalInteger): $(I OptionalInteger) $(B '') $(I Integer) \\((B '\\)') $(I Character) $(B '%%') $(I AnyCharacterExceptPercent) $(I Integer): $(I NonZeroDigit) $(I Digits) $(I Digits): $(I empty) $(I Digit) $(I Digits) $(I NonZeroDigit): \\((B '1')|\\)(B '2')|\\((B '3')|\\)(B '4')|\\((B '5')|\\)(B '6')|\\((B '7')|\\)(B '8')|$(B '9') $(I Digit): \\((B '0')|\\)(B '1')|\\((B '2')|\\)(B '3')|\\((B '4')|\\)(B '5')|\\((B '6')|\\)(B '7')|\\((B '8')|\\)(B '9') ) Note: $(I FormatCharacter) is unspecified. It can be any character that has no other purpose in this grammar, but it is recommended to assign (lower- and uppercase) letters. Note: The $(I Parameters) of a $(I CompoundIndicator) are currently limited to a $(B '-') flag. $(SECTION4 Format Indicator) The $(I format indicator) can either be a single character or an expression surrounded by $(B %() and $(B %)). It specifies the basic manner in which a value will be formatted and is the minimum requirement to format a value. The following characters can be used as $(I format characters) $(BOOKTABLE , $(TR $(TH FormatCharacter) $(TH Semantics)) $(TR $(TD $(B 's')) $(TD To be formatted in a human readable format. Can be used with all types.)) $(TR $(TD $(B 'c')) $(TD To be formatted as a character.)) $(TR $(TD $(B 'd')) $(TD To be formatted as a signed decimal integer.)) $(TR $(TD $(B 'u')) $(TD To be formatted as a decimal image of the underlying bit representation.)) $(TR $(TD $(B 'b')) $(TD To be formatted as a binary image of the underlying bit representation.)) $(TR $(TD $(B 'o')) $(TD To be formatted as an octal image of the underlying bit representation.)) $(TR $(TD $(B 'x') / $(B 'X')) $(TD To be formatted as a hexadecimal image of the underlying bit representation.)) $(TR $(TD $(B 'e') / $(B 'E')) $(TD To be formatted as a real number in decimal scientific notation.)) $(TR $(TD $(B 'f') / $(B 'F')) $(TD To be formatted as a real number in decimal natural notation.)) $(TR $(TD $(B 'g') / $(B 'G')) $(TD To be formatted as a real number in decimal short notation. Depending on the number, a scientific notation or a natural notation is used.)) $(TR $(TD $(B 'a') / $(B 'A')) $(TD To be formatted as a real number in hexadecimal scientific notation.)) $(TR $(TD $(B 'r')) $(TD To be formatted as raw bytes. The output may not be printable and depends on endianness.)) ) The $(I compound indicator) can be used to describe compound types like arrays or structs in more detail. A compound type is enclosed within $(B '%(') and $(B '%)'). The enclosed sub-format string is applied to individual elements. The trailing portion of the sub-format string following the specifier for the element is interpreted as the delimiter, and is therefore omitted following the last element. The $(B '%|') specifier may be used to explicitly indicate the start of the delimiter, so that the preceding portion of the string will be included following the last element. The $(I format string) inside of the $(I compound indicator) should contain exactly one $(I format specifier) (two in case of associative arrays), which specifies the formatting mode of the elements of the compound type. This $(I format specifier) can be a $(I compound indicator) itself. Note: Inside a \\((I compound indicator), strings and characters are escaped automatically. To avoid this behavior, use `\"%-\\)(LPAREN)\"instead of\"%$(LPAREN)\"` . $(SECTION4 Flags) There are several flags that affect the outcome of the formatting. $(BOOKTABLE , $(TR $(TH Flag) $(TH Semantics)) $(TR $(TD $(B '-')) $(TD When the formatted result is shorter than the value given by the width parameter, the output is left justified. Without the $(B '-') flag, the output remains right justified. There are two exceptions where the $(B '-') flag has a different meaning: (1) with $(B 'r') it denotes to use little endian and (2) in case of a compound indicator it means that no special handling of the members is applied.)) $(TR $(TD $(B '=')) $(TD When the formatted result is shorter than the value given by the width parameter, the output is centered. If the central position is not possible it is moved slightly to the right. In this case, if $(B '-') flag is present in addition to the $(B '=') flag, it is moved slightly to the left.)) $(TR $(TD \\((B '+')&nbsp;/&nbsp;\\)(B ' ')) $(TD Applies to numerical values. By default, positive numbers are not formatted to include the + sign. With one of these two flags present, positive numbers are preceded by a plus sign or a space. When both flags are present, a plus sign is used. In case of $(B 'r'), a big endian format is used.)) $(TR $(TD $(B '0')) $(TD Is applied to numerical values that are printed right justified. If the zero flag is present, the space left to the number is filled with zeros instead of spaces.)) $(TR $(TD $(B '#')) $(TD Denotes that an alternative output must be used. This depends on the type to be formatted and the $(I format character) used. See the sections below for more information.)) ) \\((SECTION4 Width\\)(COMMA) Precision and Separator) The $(I width) parameter specifies the minimum width of the result. The meaning of $(I precision) depends on the format indicator. For integers it denotes the minimum number of digits printed, for real numbers it denotes the number of fractional digits and for strings and compound types it denotes the maximum number of elements that are included in the output. A $(I separator) is used for formatting numbers. If it is specified, the output is divided into chunks of three digits, separated by a $(B ','). The number of digits in a chunk can be given explicitly by providing a number or a $(B '*') after the $(B ','). In all three cases the number of digits can be replaced by a $(B '*'). In this scenario, the next argument is used as the number of digits. If the argument is a negative number, the $(I precision) and $(I separator) parameters are considered unspecified. For $(I width), the absolute value is used and the $(B '-') flag is set. The $(I separator) can also be followed by a $(B '?'). In that case, an additional argument is used to specify the symbol that should be used to separate the chunks. $(SECTION4 Position) By default, the arguments are processed in the provided order. With the $(I position) parameter it is possible to address arguments directly. It is also possible to denote a series of arguments with two numbers separated by $(B ':'), that are all processed in the same way. The second number can be omitted. In that case the series ends with the last argument. It's also possible to use positional arguments for $(I width), $(I precision) and $(I separator) by adding a number and a \\((B '\\)(DOLLAR)') after the $(B '*'). $(SECTION4 Types) This section describes the result of combining types with format characters. It is organized in 2 subsections: a list of general information regarding the formatting of types in the presence of format characters and a table that contains details for every available combination of type and format character. When formatting types, the following rules apply $(UL $(LI If the format character is upper case, the resulting string will be formatted using upper case letters.) $(LI The default precision for floating point numbers is 6 digits.) $(LI Rounding of floating point numbers adheres to the rounding mode of the floating point unit, if available.) $(LI The floating point values NaN and Infinity are formatted as nan and inf , possibly preceded by $(B '+') or $(B '-') sign.) $(LI Formatting reals is only supported for 64 bit reals and 80 bit reals. All other reals are cast to double before they are formatted. This will cause the result to be inf for very large numbers.) $(LI Characters and strings formatted with the $(B 's') format character inside of compound types are surrounded by single and double quotes and unprintable characters are escaped. To avoid this, a $(B '-') flag can be specified for the compound specifier \\((LPAREN)e.g. `\"%-\\)(LPAREN)%s%\\((RPAREN)\"` instead of `\"%\\)(LPAREN)%s%$(RPAREN)\"$(RPAREN).) $(LI Structs, unions, classes and interfaces are formatted by calling atoString` method if available. See $(MREF_ALTTEXT $(D module std.format.write), std, format, write) for more details.) $(LI Only part of these combinations can be used for reading. See $(MREF_ALTTEXT $(D module std.format.read), std, format, read) for more detailed information.) ) This table contains descriptions for every possible combination of type and format character: $(BOOKTABLE , $(TR $(THMINWIDTH Type) $(THMINWIDTH Format Character) $(TH Formatted as...)) $(TR $(MULTIROW_CELL 1, null ) $(TD $(B 's')) $(TD null ) ) $(TR $(MULTIROW_CELL 3, bool ) $(TD $(B 's')) $(TD false or true ) ) $(TR $(TD $(B 'b'), $(B 'd'), $(B 'o'), $(B 'u'), $(B 'x'), $(B 'X')) $(TD As the integrals 0 or 1 with the same format character. $(I Please note, that $(B 'o') and $(B 'x') with $(B '#') flag might produce unexpected results due to special handling of the value 0.)) ) $(TR $(TD $(B 'r')) $(TD \\0 or \\1 ) ) $(TR $(MULTIROW_CELL 4, $(I Integral)) $(TD $(B 's'), $(B 'd')) $(TD A signed decimal number. The $(B '#') flag is ignored.) ) $(TR $(TD $(B 'b'), $(B 'o'), $(B 'u'), $(B 'x'), $(B 'X')) $(TD An unsigned binary, decimal, octal or hexadecimal number. In case of $(B 'o') and $(B 'x'), the $(B '#') flag denotes that the number must be preceded by 0 and 0x , with the exception of the value 0, where this does not apply. For $(B 'b') and $(B 'u') the $(B '#') flag has no effect.) ) $(TR $(TD $(B 'e'), $(B 'E'), $(B 'f'), $(B 'F'), $(B 'g'), $(B 'G'), $(B 'a'), $(B 'A')) $(TD As a floating point value with the same specifier. Default precision is large enough to add all digits of the integral value. In case of ($B 'a') and $(B 'A'), the integral digit can be any hexadecimal digit. ) ) $(TR $(TD $(B 'r')) $(TD Characters taken directly from the binary representation.) ) $(TR $(MULTIROW_CELL 5, $(I Floating Point)) $(TD $(B 'e'), $(B 'E')) $(TD Scientific notation: Exactly one integral digit followed by a dot and fractional digits, followed by the exponent. The exponent is formatted as $(B 'e') followed by a $(B '+') or $(B '-') sign, followed by at least two digits. When there are no fractional digits and the $(B '#') flag is $(I not) present, the dot is omitted.) ) $(TR $(TD $(B 'f'), $(B 'F')) $(TD Natural notation: Integral digits followed by a dot and fractional digits. When there are no fractional digits and the $(B '#') flag is $(I not) present, the dot is omitted. $(I Please note: the difference between $(B 'f') and $(B 'F') is only visible for NaN and Infinity .)) ) $(TR $(TD $(B 's'), $(B 'g'), $(B 'G')) $(TD Short notation: If the absolute value is larger than 10 ^^ precision or smaller than 0.0001 , the scientific notation is used. If not, the natural notation is applied. In both cases $(I precision) denotes the count of all digits, including the integral digits. Trailing zeros (including a trailing dot) are removed. If $(B '#') flag is present, trailing zeros are not removed.) ) $(TR $(TD $(B 'a'), $(B 'A')) $(TD Hexadecimal scientific notation: 0x followed by 1 (or 0 in case of value zero or denormalized number) followed by a dot, fractional digits in hexadecimal notation and an exponent. The exponent is build by p , followed by a sign and the exponent in $(I decimal) notation. When there are no fractional digits and the $(B '#') flag is $(I not) present, the dot is omitted.) ) $(TR $(TD $(B 'r')) $(TD Characters taken directly from the binary representation.) ) $(TR $(MULTIROW_CELL 3, $(I Character)) $(TD $(B 's'), $(B 'c')) $(TD As the character. Inside of a compound indicator $(B 's') is treated differently: The character is surrounded by single quotes and non printable characters are escaped. This can be avoided by preceding the compound indicator with a $(B '-') flag \\((LPAREN)e.g. `\"%-\\)(LPAREN)%s%$(RPAREN)\"` $(RPAREN).) ) $(TR $(TD $(B 'b'), $(B 'd'), $(B 'o'), $(B 'u'), $(B 'x'), $(B 'X')) $(TD As the integral that represents the character.) ) $(TR $(TD $(B 'r')) $(TD Characters taken directly from the binary representation.) ) $(TR $(MULTIROW_CELL 3, $(I String)) $(TD $(B 's')) $(TD The sequence of characters that form the string. Inside of a compound indicator the string is surrounded by double quotes and non printable characters are escaped. This can be avoided by preceding the compound indicator with a $(B '-') flag \\((LPAREN)e.g. `\"%-\\)(LPAREN)%s%$(RPAREN)\"$(RPAREN).) ) $(TR $(TD $(B 'r')) $(TD The sequence of characters, each formatted with $(B 'r').) ) $(TR $(TD compound) $(TD As an array of characters.) ) $(TR $(MULTIROW_CELL 3, $(I Array)) $(TD $(B 's')) $(TD When the elements are characters, the array is formatted as a string. In all other cases the array is surrounded by square brackets and the elements are separated by a comma and a space. If the elements are strings, they are surrounded by double quotes and non printable characters are escaped.) ) $(TR $(TD $(B 'r')) $(TD The sequence of the elements, each formatted with $(B 'r').) ) $(TR $(TD compound) $(TD The sequence of the elements, each formatted according to the specifications given inside of the compound specifier.) ) $(TR $(MULTIROW_CELL 2, $(I Associative Array)) $(TD $(B 's')) $(TD As a sequence of the elements in unpredictable order. The output is surrounded by square brackets. The elements are separated by a comma and a space. The elements are formatted askey:value.) ) $(TR $(TD compound) $(TD As a sequence of the elements in unpredictable order. Each element is formatted according to the specifications given inside of the compound specifier. The first specifier is used for formatting the key and the second specifier is used for formatting the value. The order can be changed with positional arguments. For example\"%(%2$s (%1$s), %)\"will write the value, followed by the key in parenthesis.) ) $(TR $(MULTIROW_CELL 2, $(I Enum)) $(TD $(B 's')) $(TD The name of the value. If the name is not available, the base value is used, preceeded by a cast.) ) $(TR $(TD All, but $(B 's')) $(TD Enums can be formatted with all format characters that can be used with the base value. In that case they are formatted like the base value.) ) $(TR $(MULTIROW_CELL 3, $(I Input Range)) $(TD $(B 's')) $(TD When the elements of the range are characters, they are written like a string. In all other cases, the elements are enclosed by square brackets and separated by a comma and a space.) ) $(TR $(TD $(B 'r')) $(TD The sequence of the elements, each formatted with $(B 'r').) ) $(TR $(TD compound) $(TD The sequence of the elements, each formatted according to the specifications given inside of the compound specifier.) ) $(TR $(MULTIROW_CELL 1, $(I Struct)) $(TD $(B 's')) $(TD When the struct has neither an applicabletoStringnor is an input range, it is formatted as follows:StructType(field1, field2, ...).) ) $(TR $(MULTIROW_CELL 1, $(I Class)) $(TD $(B 's')) $(TD When the class has neither an applicabletoStringnor is an input range, it is formatted as the fully qualified name of the class.) ) $(TR $(MULTIROW_CELL 1, $(I Union)) $(TD $(B 's')) $(TD When the union has neither an applicabletoStringnor is an input range, it is formatted as its base name.) ) $(TR $(MULTIROW_CELL 2, $(I Pointer)) $(TD $(B 's')) $(TD A null pointer is formatted as 'null'. All other pointers are formatted as hexadecimal numbers with the format character $(B 'X').) ) $(TR $(TD $(B 'x'), $(B 'X')) $(TD Formatted as a hexadecimal number.) ) $(TR $(MULTIROW_CELL 3, $(I SIMD vector)) $(TD $(B 's')) $(TD The array is surrounded by square brackets and the elements are separated by a comma and a space.) ) $(TR $(TD $(B 'r')) $(TD The sequence of the elements, each formatted with $(B 'r').) ) $(TR $(TD compound) $(TD The sequence of the elements, each formatted according to the specifications given inside of the compound specifier.) ) $(TR $(MULTIROW_CELL 1, $(I Delegate)) $(TD $(B 's'), $(B 'r'), compound) $(TD As the.stringof` of this delegate treated as a string. $(I Please note: The implementation is currently buggy and its use is discouraged.)) ) ) Copyright: Copyright The D Language Foundation 2000-2021. Macros SUBREF $(REF_ALTTEXT $2, $2, std, format, \\(1)\\)(NBSP) MULTIROW_CELL $+ THMINWIDTH $0 License: $(HTTP boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP walterbright.com, Walter Bright), $(HTTP erdani.com, Andrei Alexandrescu), and Kenji Hara Source: $(PHOBOSSRC std/format/package.d) Aliases Name Description enforceFmt Classes Name Description FormatException Signals an issue encountered while formatting. Structs Name Description NoOpSink Functions Name Description format Converts its arguments according to a format string into a string. formatElement formatReflectTest guessLength sformat Converts its arguments according to a format string into a buffer. The buffer has to be large enough to hold the formatted string. unformatElement Variables Name Description checkFormatException"
  },
  "phobos/std/format/Structs/NoOpSink.html": {
    "href": "phobos/std/format/Structs/NoOpSink.html",
    "title": "Struct - NoOpSink | Marmos Demo",
    "keywords": "Struct - NoOpSink Module std.format public struct NoOpSink { }"
  },
  "phobos/std/format/internal/floats/Functions/isFloatSpec.html": {
    "href": "phobos/std/format/internal/floats/Functions/isFloatSpec.html",
    "title": "Overloads for - isFloatSpec | Marmos Demo",
    "keywords": "Overloads for - isFloatSpec Module std.format.internal.floats isFloatSpec(c) bool isFloatSpec( char c ) Returns: whether c is a supported format specifier for floats"
  },
  "phobos/std/format/internal/floats/Functions/printFloat.html": {
    "href": "phobos/std/format/internal/floats/Functions/printFloat.html",
    "title": "Overloads for - printFloat | Marmos Demo",
    "keywords": "Overloads for - printFloat Module std.format.internal.floats printFloat(val, f) <bug: unknown> printFloat( T val, FormatSpec!(Char) f ) auto printFloat(w, val, f) void printFloat( Writer w, T val, FormatSpec!(Char) f )"
  },
  "phobos/std/format/internal/floats/Functions/printFloatA.html": {
    "href": "phobos/std/format/internal/floats/Functions/printFloatA.html",
    "title": "Overloads for - printFloatA | Marmos Demo",
    "keywords": "Overloads for - printFloatA Module std.format.internal.floats printFloatA(w, val, f, sgn, exp, mnt, is_upper) void printFloatA( Writer w, T val, FormatSpec!(Char) f, string sgn, int exp, ulong mnt, bool is_upper )"
  },
  "phobos/std/format/internal/floats/Functions/printFloatE.html": {
    "href": "phobos/std/format/internal/floats/Functions/printFloatE.html",
    "title": "Overloads for - printFloatE | Marmos Demo",
    "keywords": "Overloads for - printFloatE Module std.format.internal.floats printFloatE(w, val, f, sgn, exp, mnt, is_upper) void printFloatE( Writer w, T val, FormatSpec!(Char) f, string sgn, int exp, ulong mnt, bool is_upper )"
  },
  "phobos/std/format/internal/floats/Functions/printFloatF.html": {
    "href": "phobos/std/format/internal/floats/Functions/printFloatF.html",
    "title": "Overloads for - printFloatF | Marmos Demo",
    "keywords": "Overloads for - printFloatF Module std.format.internal.floats printFloatF(w, val, f, sgn, exp, mnt, is_upper) void printFloatF( Writer w, T val, FormatSpec!(Char) f, string sgn, int exp, ulong mnt, bool is_upper )"
  },
  "phobos/std/format/internal/floats/Functions/printFloatG.html": {
    "href": "phobos/std/format/internal/floats/Functions/printFloatG.html",
    "title": "Overloads for - printFloatG | Marmos Demo",
    "keywords": "Overloads for - printFloatG Module std.format.internal.floats printFloatG(w, val, f, sgn, exp, mnt, is_upper) void printFloatG( Writer w, T val, FormatSpec!(Char) f, string sgn, int exp, ulong mnt, bool is_upper )"
  },
  "phobos/std/format/internal/floats/Overview.html": {
    "href": "phobos/std/format/internal/floats/Overview.html",
    "title": "Module - std.format.internal.floats | Marmos Demo",
    "keywords": "Module - std.format.internal.floats Functions Name Description isFloatSpec Returns: whether c is a supported format specifier for floats printFloat printFloatA printFloatE printFloatF printFloatG"
  },
  "phobos/std/format/internal/read/Functions/rawRead.html": {
    "href": "phobos/std/format/internal/read/Functions/rawRead.html",
    "title": "Overloads for - rawRead | Marmos Demo",
    "keywords": "Overloads for - rawRead Module std.format.internal.read rawRead(input) T rawRead( Range input )"
  },
  "phobos/std/format/internal/read/Functions/skipData.html": {
    "href": "phobos/std/format/internal/read/Functions/skipData.html",
    "title": "Overloads for - skipData | Marmos Demo",
    "keywords": "Overloads for - skipData Module std.format.internal.read skipData(input, spec) void skipData( Range input, FormatSpec!(Char) spec )"
  },
  "phobos/std/format/internal/read/Functions/unformatElement.html": {
    "href": "phobos/std/format/internal/read/Functions/unformatElement.html",
    "title": "Overloads for - unformatElement | Marmos Demo",
    "keywords": "Overloads for - unformatElement Module std.format.internal.read unformatElement(input, spec) T unformatElement( Range input, FormatSpec!(Char) spec )"
  },
  "phobos/std/format/internal/read/Functions/unformatRange.html": {
    "href": "phobos/std/format/internal/read/Functions/unformatRange.html",
    "title": "Overloads for - unformatRange | Marmos Demo",
    "keywords": "Overloads for - unformatRange Module std.format.internal.read unformatRange(input, spec) T unformatRange( Range input, FormatSpec!(Char) spec )"
  },
  "phobos/std/format/internal/read/Functions/unformatValueImpl.html": {
    "href": "phobos/std/format/internal/read/Functions/unformatValueImpl.html",
    "title": "Overloads for - unformatValueImpl | Marmos Demo",
    "keywords": "Overloads for - unformatValueImpl Module std.format.internal.read unformatValueImpl(input, spec) T unformatValueImpl( Range input, FormatSpec!(Char) spec ) unformatValueImpl(input, spec) T unformatValueImpl( Range input, FormatSpec!(Char) spec ) unformatValueImpl(input, spec) T unformatValueImpl( Range input, FormatSpec!(Char) spec ) unformatValueImpl(input, spec) T unformatValueImpl( Range input, FormatSpec!(Char) spec ) unformatValueImpl(input, spec) T unformatValueImpl( Range input, FormatSpec!(Char) spec ) unformatValueImpl(input, fmt) T unformatValueImpl( Range input, FormatSpec!(Char) fmt ) unformatValueImpl(input, fmt) T unformatValueImpl( Range input, FormatSpec!(Char) fmt )"
  },
  "phobos/std/format/internal/read/Overview.html": {
    "href": "phobos/std/format/internal/read/Overview.html",
    "title": "Module - std.format.internal.read | Marmos Demo",
    "keywords": "Module - std.format.internal.read Functions Name Description rawRead skipData unformatElement unformatRange unformatValueImpl"
  },
  "phobos/std/format/internal/write/Classes/C.html": {
    "href": "phobos/std/format/internal/write/Classes/C.html",
    "title": "Class - C | Marmos Demo",
    "keywords": "Class - C Module std.format.internal.write public class C { }"
  },
  "phobos/std/format/internal/write/Functions/baseOfSpec.html": {
    "href": "phobos/std/format/internal/write/Functions/baseOfSpec.html",
    "title": "Overloads for - baseOfSpec | Marmos Demo",
    "keywords": "Overloads for - baseOfSpec Module std.format.internal.write baseOfSpec(spec) uint baseOfSpec( char spec )"
  },
  "phobos/std/format/internal/write/Functions/enforceValidFormatSpec.html": {
    "href": "phobos/std/format/internal/write/Functions/enforceValidFormatSpec.html",
    "title": "Overloads for - enforceValidFormatSpec | Marmos Demo",
    "keywords": "Overloads for - enforceValidFormatSpec Module std.format.internal.write enforceValidFormatSpec(f) void enforceValidFormatSpec( FormatSpec!(Char) f )"
  },
  "phobos/std/format/internal/write/Functions/formatChar.html": {
    "href": "phobos/std/format/internal/write/Functions/formatChar.html",
    "title": "Overloads for - formatChar | Marmos Demo",
    "keywords": "Overloads for - formatChar Module std.format.internal.write formatChar(w, c, quote) void formatChar( Writer w, dchar c, char quote )"
  },
  "phobos/std/format/internal/write/Functions/formatElement.html": {
    "href": "phobos/std/format/internal/write/Functions/formatElement.html",
    "title": "Overloads for - formatElement | Marmos Demo",
    "keywords": "Overloads for - formatElement Module std.format.internal.write formatElement(w, val, f) void formatElement( Writer w, T val, FormatSpec!(Char) f ) formatElement(w, val, f) void formatElement( Writer w, T val, FormatSpec!(Char) f ) formatElement(w, val, f) void formatElement( Writer w, T val, FormatSpec!(Char) f )"
  },
  "phobos/std/format/internal/write/Functions/formatObject.html": {
    "href": "phobos/std/format/internal/write/Functions/formatObject.html",
    "title": "Overloads for - formatObject | Marmos Demo",
    "keywords": "Overloads for - formatObject Module std.format.internal.write formatObject(w, val, f) void formatObject( Writer w, T val, FormatSpec!(Char) f )"
  },
  "phobos/std/format/internal/write/Functions/formatRange.html": {
    "href": "phobos/std/format/internal/write/Functions/formatRange.html",
    "title": "Overloads for - formatRange | Marmos Demo",
    "keywords": "Overloads for - formatRange Module std.format.internal.write formatRange(w, val, f) void formatRange( Writer w, T val, FormatSpec!(Char) f )"
  },
  "phobos/std/format/internal/write/Functions/formatTest.html": {
    "href": "phobos/std/format/internal/write/Functions/formatTest.html",
    "title": "Overloads for - formatTest | Marmos Demo",
    "keywords": "Overloads for - formatTest Module std.format.internal.write formatTest(val, expected, ln, fn) void formatTest( T val, string expected, size_t ln, string fn ) formatTest(fmt, val, expected, ln, fn) void formatTest( string fmt, T val, string expected, size_t ln, string fn ) formatTest(val, expected, ln, fn) void formatTest( T val, <bug: unknown> expected, size_t ln, string fn ) formatTest(fmt, val, expected, ln, fn) void formatTest( string fmt, T val, <bug: unknown> expected, size_t ln, string fn )"
  },
  "phobos/std/format/internal/write/Functions/formatValueImpl.html": {
    "href": "phobos/std/format/internal/write/Functions/formatValueImpl.html",
    "title": "Overloads for - formatValueImpl | Marmos Demo",
    "keywords": "Overloads for - formatValueImpl Module std.format.internal.write formatValueImpl(w, obj, f) void formatValueImpl( Writer w, T obj, FormatSpec!(Char) f ) formatValueImpl(w, obj, f) void formatValueImpl( Writer w, T obj, FormatSpec!(Char) f ) formatValueImpl(w, obj, f) void formatValueImpl( Writer w, T obj, FormatSpec!(Char) f ) formatValueImpl(w, obj, f) void formatValueImpl( Writer w, T obj, FormatSpec!(Char) f ) formatValueImpl(w, obj, f) void formatValueImpl( Writer w, T obj, FormatSpec!(Char) f ) formatValueImpl(w, obj, f) void formatValueImpl( Writer w, T obj, FormatSpec!(Char) f ) formatValueImpl(w, obj, f) void formatValueImpl( Writer w, T obj, FormatSpec!(Char) f ) formatValueImpl(w, obj, f) void formatValueImpl( Writer w, T obj, FormatSpec!(Char) f ) formatValueImpl(w, obj, f) void formatValueImpl( Writer w, T obj, FormatSpec!(Char) f ) formatValueImpl(w, obj, f) void formatValueImpl( Writer w, T obj, FormatSpec!(Char) f ) formatValueImpl(w, obj, f) void formatValueImpl( Writer w, T obj, FormatSpec!(Char) f ) formatValueImpl(w, val, f) void formatValueImpl( Writer w, T val, FormatSpec!(Char) f ) formatValueImpl(w, val, f) void formatValueImpl( Writer w, T val, FormatSpec!(Char) f ) formatValueImpl(w, val, f) void formatValueImpl( Writer w, T val, FormatSpec!(Char) f ) formatValueImpl(w, val, f) void formatValueImpl( Writer w, T val, FormatSpec!(Char) f ) formatValueImpl(w, val, f) void formatValueImpl( Writer w, T val, FormatSpec!(Char) f ) formatValueImpl(w, val, f) void formatValueImpl( Writer w, V val, FormatSpec!(Char) f ) formatValueImpl(w, __anonymous, f) void formatValueImpl( Writer w, T __anonymous, FormatSpec!(Char) f )"
  },
  "phobos/std/format/internal/write/Functions/formatValueImplUlong.html": {
    "href": "phobos/std/format/internal/write/Functions/formatValueImplUlong.html",
    "title": "Overloads for - formatValueImplUlong | Marmos Demo",
    "keywords": "Overloads for - formatValueImplUlong Module std.format.internal.write formatValueImplUlong(w, arg, negative, f) void formatValueImplUlong( Writer w, ulong arg, bool negative, FormatSpec!(Char) f )"
  },
  "phobos/std/format/internal/write/Functions/getNth.html": {
    "href": "phobos/std/format/internal/write/Functions/getNth.html",
    "title": "Overloads for - getNth | Marmos Demo",
    "keywords": "Overloads for - getNth Module std.format.internal.write getNth(index, args) T getNth( uint index, A args )"
  },
  "phobos/std/format/internal/write/Functions/getNthInt.html": {
    "href": "phobos/std/format/internal/write/Functions/getNthInt.html",
    "title": "Overloads for - getNthInt | Marmos Demo",
    "keywords": "Overloads for - getNthInt Module std.format.internal.write getNthInt(index, args) int getNthInt( uint index, A args )"
  },
  "phobos/std/format/internal/write/Functions/getWidth.html": {
    "href": "phobos/std/format/internal/write/Functions/getWidth.html",
    "title": "Overloads for - getWidth | Marmos Demo",
    "keywords": "Overloads for - getWidth Module std.format.internal.write getWidth(s) long getWidth( T s )"
  },
  "phobos/std/format/internal/write/Functions/needToSwapEndianess.html": {
    "href": "phobos/std/format/internal/write/Functions/needToSwapEndianess.html",
    "title": "Overloads for - needToSwapEndianess | Marmos Demo",
    "keywords": "Overloads for - needToSwapEndianess Module std.format.internal.write needToSwapEndianess(f) bool needToSwapEndianess( FormatSpec!(Char) f )"
  },
  "phobos/std/format/internal/write/Functions/round.html": {
    "href": "phobos/std/format/internal/write/Functions/round.html",
    "title": "Overloads for - round | Marmos Demo",
    "keywords": "Overloads for - round Module std.format.internal.write round(sequence, left, right, type, negative, max) bool round( T sequence, size_t left, size_t right, RoundingClass type, bool negative, char max )"
  },
  "phobos/std/format/internal/write/Functions/writeAligned.html": {
    "href": "phobos/std/format/internal/write/Functions/writeAligned.html",
    "title": "Overloads for - writeAligned | Marmos Demo",
    "keywords": "Overloads for - writeAligned Module std.format.internal.write writeAligned(w, s, f) void writeAligned( Writer w, T s, FormatSpec!(Char) f ) writeAligned(w, prefix, grouped, suffix, f, integer_precision) void writeAligned( Writer w, T1 prefix, T2 grouped, T3 suffix, FormatSpec!(Char) f, bool integer_precision ) writeAligned(w, prefix, grouped, fracts, suffix, f, p) void writeAligned( Writer w, T1 prefix, T2 grouped, T3 fracts, T4 suffix, FormatSpec!(Char) f, PrecisionType p )"
  },
  "phobos/std/format/internal/write/Overview.html": {
    "href": "phobos/std/format/internal/write/Overview.html",
    "title": "Module - std.format.internal.write | Marmos Demo",
    "keywords": "Module - std.format.internal.write Aliases Name Description DScannerBug895 Classes Name Description C Functions Name Description baseOfSpec enforceValidFormatSpec formatChar formatElement formatObject formatRange formatTest formatValueImpl formatValueImplUlong getNth getNthInt getWidth needToSwapEndianess round writeAligned Variables Name Description hasPreviewIn"
  },
  "phobos/std/format/read/Functions/formattedRead.html": {
    "href": "phobos/std/format/read/Functions/formattedRead.html",
    "title": "Overloads for - formattedRead | Marmos Demo",
    "keywords": "Overloads for - formattedRead Module std.format.read formattedRead(r, fmt, args) uint formattedRead( Range r, <bug: unknown> fmt, Args args ) Reads an input range according to a format string and stores the read values into its arguments. Format specifiers with format character $(B 'd'), $(B 'u') and $(B 'c') can take a $(B '*') parameter for skipping values. The second version of formattedRead takes the format string as template argument. In this case, it is checked for consistency at compile-time. Params r Range an $(REF_ALTTEXT input range, isInputRange, std, range, primitives), where the formatted input is read from fmt <bug: unknown> a $(MREF_ALTTEXT format string, std,format) args Args a variadic list of arguments where the read values are stored Range <parameter not found> the type of the input range r Char <parameter not found> the character type used for fmt Args <parameter not found> a variadic list of types of the arguments Returns The number of variables filled. If the input range r ends early, this number will be less than the number of variables provided. Throws A $(REF_ALTTEXT FormatException, FormatException, std, format) if reading did not succeed. Note For backward compatibility the arguments args can be given as pointers to that variable, but it is not recommended to do so, because this option might be removed in the future. formattedRead(r, args) uint formattedRead( Range r, Args args ) ditto"
  },
  "phobos/std/format/read/Functions/unformatValue.html": {
    "href": "phobos/std/format/read/Functions/unformatValue.html",
    "title": "Overloads for - unformatValue | Marmos Demo",
    "keywords": "Overloads for - unformatValue Module std.format.read unformatValue(input, spec) T unformatValue( Range input, FormatSpec!(Char) spec ) Reads a value from the given input range and converts it according to a format specifier. Params input Range the $(REF_ALTTEXT input range, isInputRange, std, range, primitives), to read from spec FormatSpec!(Char) a $(MREF_ALTTEXT format string, std,format) T <parameter not found> type to return Range <parameter not found> the type of the input range input Char <parameter not found> the character type used for spec Returns A value from input of type T . Throws A $(REF_ALTTEXT FormatException, FormatException, std, format) if reading did not succeed. See_Also $(REF parse, std, conv) and $(REF to, std, conv)"
  },
  "phobos/std/format/read/Overview.html": {
    "href": "phobos/std/format/read/Overview.html",
    "title": "Module - std.format.read | Marmos Demo",
    "keywords": "Module - std.format.read About This is a submodule of $(MREF std, format). It provides two functions for reading formatted input: $(LREF unformatValue) and $(LREF formattedRead). The former reads a single value. The latter reads several values at once and matches the characters found between format specifiers. Parameters are ignored, except for the ones consisting of a single $(B '*'). See $(LREF formattedRead) for more information. A space outside of a format specifier has a special meaning: it matches any sequence of whitespace characters, not just a single space. The following combinations of format characters and types are available: $(BOOKTABLE , $(TR $(TH) $(TH s) $(TH c) $(TH d, u, b, o, x, X) $(TH e, E, f, g, G) $(TH r) $(TH compound)) $(TR $(TD bool ) $(TD yes) $(TD $(MDASH)) $(TD yes) $(TD $(MDASH)) $(TD $(MDASH)) $(TD $(MDASH))) $(TR $(TD null ) $(TD yes) $(TD $(MDASH)) $(TD $(MDASH)) $(TD $(MDASH)) $(TD $(MDASH)) $(TD $(MDASH))) $(TR $(TD $(I integer)) $(TD yes) $(TD $(MDASH)) $(TD yes) $(TD $(MDASH)) $(TD yes) $(TD $(MDASH))) $(TR $(TD $(I floating point)) $(TD yes) $(TD $(MDASH)) $(TD $(MDASH)) $(TD yes) $(TD yes) $(TD $(MDASH))) $(TR $(TD $(I character)) $(TD yes) $(TD yes) $(TD yes) $(TD $(MDASH)) $(TD $(MDASH)) $(TD $(MDASH))) $(TR $(TD $(I string)) $(TD yes) $(TD $(MDASH)) $(TD $(MDASH)) $(TD $(MDASH)) $(TD $(MDASH)) $(TD yes)) $(TR $(TD $(I array)) $(TD yes) $(TD $(MDASH)) $(TD $(MDASH)) $(TD $(MDASH)) $(TD $(MDASH)) $(TD yes)) $(TR $(TD $(I associative array)) $(TD yes) $(TD $(MDASH)) $(TD $(MDASH)) $(TD $(MDASH)) $(TD $(MDASH)) $(TD yes)) ) Below are highlighted examples on how these combinations are used with $(LREF unformatValue), however, they apply for $(LREF formattedRead) also Copyright: Copyright The D Language Foundation 2000-2013. License: $(HTTP boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP walterbright.com, Walter Bright), $(HTTP erdani.com, Andrei Alexandrescu), and Kenji Hara Source: $(PHOBOSSRC std/format/read.d) Functions Name Description formattedRead Reads an input range according to a format string and stores the read values into its arguments. unformatValue Reads a value from the given input range and converts it according to a format specifier."
  },
  "phobos/std/format/spec/FormatSpec/Functions/fillUp.html": {
    "href": "phobos/std/format/spec/FormatSpec/Functions/fillUp.html",
    "title": "Overloads for - fillUp | Marmos Demo",
    "keywords": "Overloads for - fillUp Module std.format.spec Parent FormatSpec fillUp() void fillUp( )"
  },
  "phobos/std/format/spec/FormatSpec/Functions/getCurFmtStr.html": {
    "href": "phobos/std/format/spec/FormatSpec/Functions/getCurFmtStr.html",
    "title": "Overloads for - getCurFmtStr | Marmos Demo",
    "keywords": "Overloads for - getCurFmtStr Module std.format.spec Parent FormatSpec getCurFmtStr() string getCurFmtStr( )"
  },
  "phobos/std/format/spec/FormatSpec/Functions/separatorCharPos.html": {
    "href": "phobos/std/format/spec/FormatSpec/Functions/separatorCharPos.html",
    "title": "Overloads for - separatorCharPos | Marmos Demo",
    "keywords": "Overloads for - separatorCharPos Module std.format.spec Parent FormatSpec separatorCharPos() int separatorCharPos( ) Set to DYNAMIC when the separator character is supplied at runtime. Default: UNSPECIFIED. $(RED Warning separatorCharPos is deprecated. It will be removed in 2.107.0. Please use dynamicSeparatorChar instead.) separatorCharPos(value) void separatorCharPos( int value ) ditto"
  },
  "phobos/std/format/spec/FormatSpec/Functions/toString.html": {
    "href": "phobos/std/format/spec/FormatSpec/Functions/toString.html",
    "title": "Overloads for - toString | Marmos Demo",
    "keywords": "Overloads for - toString Module std.format.spec Parent FormatSpec toString() string toString( ) Provides a string representation. Returns The string representation."
  },
  "phobos/std/format/spec/Functions/enforceValidFormatSpec.html": {
    "href": "phobos/std/format/spec/Functions/enforceValidFormatSpec.html",
    "title": "Overloads for - enforceValidFormatSpec | Marmos Demo",
    "keywords": "Overloads for - enforceValidFormatSpec Module std.format.spec enforceValidFormatSpec(f) void enforceValidFormatSpec( FormatSpec!(Char) f )"
  },
  "phobos/std/format/spec/Functions/singleSpec.html": {
    "href": "phobos/std/format/spec/Functions/singleSpec.html",
    "title": "Overloads for - singleSpec | Marmos Demo",
    "keywords": "Overloads for - singleSpec Module std.format.spec singleSpec(fmt) FormatSpec!(Char) singleSpec( <bug: unknown> fmt ) Helper function that returns a FormatSpec for a single format specifier. Params fmt <bug: unknown> a $(MREF_ALTTEXT format string, std,format) containing a single format specifier Char <parameter not found> character type of fmt Returns A $(LREF FormatSpec) with the format specifier parsed. Throws A $(REF_ALTTEXT FormatException, FormatException, std,format) when the format string contains no format specifier or more than a single format specifier or when the format specifier is malformed."
  },
  "phobos/std/format/spec/Overview.html": {
    "href": "phobos/std/format/spec/Overview.html",
    "title": "Module - std.format.spec | Marmos Demo",
    "keywords": "Module - std.format.spec About This is a submodule of $(MREF std, format). It centers around a struct called $(LREF FormatSpec), which takes a $(MREF_ALTTEXT format string, std,format) and provides tools for parsing this string. Additionally this module contains a function $(LREF singleSpec) which helps treating a single format specifier. Copyright: Copyright The D Language Foundation 2000-2013. License: $(HTTP boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP walterbright.com, Walter Bright), $(HTTP erdani.com, Andrei Alexandrescu), and Kenji Hara Source: $(PHOBOSSRC std/format/spec.d) Aliases Name Description FormatSpec Structs Name Description FormatSpec A general handler for format strings. Functions Name Description enforceValidFormatSpec singleSpec Helper function that returns a FormatSpec for a single format specifier."
  },
  "phobos/std/format/spec/Structs/FormatSpec.html": {
    "href": "phobos/std/format/spec/Structs/FormatSpec.html",
    "title": "Struct - FormatSpec | Marmos Demo",
    "keywords": "Struct - FormatSpec Module std.format.spec public struct FormatSpec { // void fillUp( ) ; // string getCurFmtStr( ) ; // Set to `DYNAMIC` when the separator character is supplied at runtime. int separatorCharPos( ) ; // ditto void separatorCharPos( int value ) ; // Provides a string representation. string toString( ) ; // ubyte allFlags; // Special value for `width` , `precision` and `separators` . int DYNAMIC; // The separator charactar is supplied at runtime. bool dynamicSeparatorChar; // The format specifier contained a `'-'` . bool flDash; // The format specifier contained a `'='` . bool flEqual; // The format specifier contained a `'#'` . bool flHash; // The format specifier contained a `'+'` . bool flPlus; // The format specifier contained a `','` . bool flSeparator; // The format specifier contained a space. bool flSpace; // The format specifier contained a `'0'` . bool flZero; // Index of the last argument for positional parameter ranges. ubyte indexEnd; // Index of the argument for positional parameters. ubyte indexStart; // Sequence `\":\"` inserted between element key and element value of an associative array. <bug: unknown> keySeparator; // The inner format string of a nested format specifier. <bug: unknown> nested; // Precision. Its semantic depends on the format character. int precision; // The separator of a nested format specifier. <bug: unknown> sep; // Character to use as separator. dchar separatorChar; // Number of elements between separators. int separators; // Sequence `\"]\"` inserted after each range or range like structure. <bug: unknown> seqAfter; // Sequence `\"[\"` inserted before each range or range like structure. <bug: unknown> seqBefore; // Sequence `\", \"` inserted between elements of a range, a range like structure or the elements of an associative array. <bug: unknown> seqSeparator; // The format character. char spec; // Contains the part of the format string, that has not yet been parsed. <bug: unknown> trailing; // Special value for `precision` and `separators` . int UNSPECIFIED; // Minimum width. int width; } About A general handler for format strings. This handler centers around the function $(LREF writeUpToNextSpec), which parses the $(MREF_ALTTEXT format string, std,format) until the next format specifier is found. After the call, it provides information about this format specifier in its numerous variables. Params Char the character type of the format string Functions Name Description fillUp getCurFmtStr separatorCharPos Set to DYNAMIC when the separator character is supplied at runtime. toString Provides a string representation. Variables Name Description allFlags DYNAMIC Special value for width , precision and separators . dynamicSeparatorChar The separator charactar is supplied at runtime. flDash The format specifier contained a '-' . flEqual The format specifier contained a '=' . flHash The format specifier contained a '#' . flPlus The format specifier contained a '+' . flSeparator The format specifier contained a ',' . flSpace The format specifier contained a space. flZero The format specifier contained a '0' . indexEnd Index of the last argument for positional parameter ranges. indexStart Index of the argument for positional parameters. keySeparator Sequence \":\" inserted between element key and element value of an associative array. nested The inner format string of a nested format specifier. precision Precision. Its semantic depends on the format character. sep The separator of a nested format specifier. separatorChar Character to use as separator. separators Number of elements between separators. seqAfter Sequence \"]\" inserted after each range or range like structure. seqBefore Sequence \"[\" inserted before each range or range like structure. seqSeparator Sequence \", \" inserted between elements of a range, a range like structure or the elements of an associative array. spec The format character. trailing Contains the part of the format string, that has not yet been parsed. UNSPECIFIED Special value for precision and separators . width Minimum width."
  },
  "phobos/std/format/write/Functions/formatValue.html": {
    "href": "phobos/std/format/write/Functions/formatValue.html",
    "title": "Overloads for - formatValue | Marmos Demo",
    "keywords": "Overloads for - formatValue Module std.format.write formatValue(w, val, f) void formatValue( Writer w, T val, FormatSpec!(Char) f ) Formats a value of any type according to a format specifier and writes the result to an output range. More details about how types are formatted, and how the format specifier influences the outcome, can be found in the definition of a $(MREF_ALTTEXT format string, std,format). Params w Writer an $(REF_ALTTEXT output range, isOutputRange, std, range, primitives) where the formatted value is written to val T the value to write f FormatSpec!(Char) a $(REF_ALTTEXT FormatSpec, FormatSpec, std, format, spec) defining the format specifier Writer <parameter not found> the type of the output range w T <parameter not found> the type of value val Char <parameter not found> the character type used for f Throws A $(LREF FormatException) if formatting did not succeed. Note In theory this function should be @nogc . But with the current implementation there are some cases where allocations occur. See $(REF_ALTTEXT $(D sformat), sformat, std, format) for more details. See_Also $(LREF formattedWrite) which formats several values at once."
  },
  "phobos/std/format/write/Functions/formattedWrite.html": {
    "href": "phobos/std/format/write/Functions/formattedWrite.html",
    "title": "Overloads for - formattedWrite | Marmos Demo",
    "keywords": "Overloads for - formattedWrite Module std.format.write formattedWrite(w, fmt, args) uint formattedWrite( Writer w, <bug: unknown> fmt, Args args ) Converts its arguments according to a format string and writes the result to an output range. The second version of formattedWrite takes the format string as a template argument. In this case, it is checked for consistency at compile-time. Params w Writer an $(REF_ALTTEXT output range, isOutputRange, std, range, primitives), where the formatted result is written to fmt <bug: unknown> a $(MREF_ALTTEXT format string, std,format) args Args a variadic list of arguments to be formatted Writer <parameter not found> the type of the writer w Char <parameter not found> character type of fmt Args <parameter not found> a variadic list of types of the arguments Returns The index of the last argument that was formatted. If no positional arguments are used, this is the number of arguments that where formatted. Throws A $(REF_ALTTEXT FormatException, FormatException, std, format) if formatting did not succeed. Note In theory this function should be @nogc . But with the current implementation there are some cases where allocations occur. See $(REF_ALTTEXT $(D sformat), sformat, std, format) for more details. formattedWrite(w, args) uint formattedWrite( Writer w, Args args ) ditto"
  },
  "phobos/std/format/write/Overview.html": {
    "href": "phobos/std/format/write/Overview.html",
    "title": "Module - std.format.write | Marmos Demo",
    "keywords": "Module - std.format.write About This is a submodule of $(MREF std, format). It provides two functions for writing formatted output: $(LREF formatValue) and $(LREF formattedWrite). The former writes a single value. The latter writes several values at once, interspersed with unformatted text. The following combinations of format characters and types are available: $(BOOKTABLE , $(TR $(TH) $(TH s) $(TH c) $(TH d, u, b, o) $(TH x, X) $(TH e, E, f, F, g, G, a, A) $(TH r) $(TH compound)) $(TR $(TD bool ) $(TD yes) $(TD $(MDASH)) $(TD yes) $(TD yes) $(TD $(MDASH)) $(TD yes) $(TD $(MDASH))) $(TR $(TD null ) $(TD yes) $(TD $(MDASH)) $(TD $(MDASH)) $(TD $(MDASH)) $(TD $(MDASH)) $(TD $(MDASH)) $(TD $(MDASH))) $(TR $(TD $(I integer)) $(TD yes) $(TD $(MDASH)) $(TD yes) $(TD yes) $(TD yes) $(TD yes) $(TD $(MDASH))) $(TR $(TD $(I floating point)) $(TD yes) $(TD $(MDASH)) $(TD $(MDASH)) $(TD $(MDASH)) $(TD yes) $(TD yes) $(TD $(MDASH))) $(TR $(TD $(I character)) $(TD yes) $(TD yes) $(TD yes) $(TD yes) $(TD $(MDASH)) $(TD yes) $(TD $(MDASH))) $(TR $(TD $(I string)) $(TD yes) $(TD $(MDASH)) $(TD $(MDASH)) $(TD $(MDASH)) $(TD $(MDASH)) $(TD yes) $(TD yes)) $(TR $(TD $(I array)) $(TD yes) $(TD $(MDASH)) $(TD $(MDASH)) $(TD $(MDASH)) $(TD $(MDASH)) $(TD yes) $(TD yes)) $(TR $(TD $(I associative array)) $(TD yes) $(TD $(MDASH)) $(TD $(MDASH)) $(TD $(MDASH)) $(TD $(MDASH)) $(TD $(MDASH)) $(TD yes)) $(TR $(TD $(I pointer)) $(TD yes) $(TD $(MDASH)) $(TD $(MDASH)) $(TD yes) $(TD $(MDASH)) $(TD $(MDASH)) $(TD $(MDASH))) $(TR $(TD $(I SIMD vectors)) $(TD yes) $(TD $(MDASH)) $(TD $(MDASH)) $(TD $(MDASH)) $(TD $(MDASH)) $(TD yes) $(TD yes)) $(TR $(TD $(I delegates)) $(TD yes) $(TD $(MDASH)) $(TD $(MDASH)) $(TD $(MDASH)) $(TD $(MDASH)) $(TD yes) $(TD yes)) ) Enums can be used with all format characters of the base type. \\((SECTION3 Structs\\)(COMMA) Unions$(COMMA) Classes$(COMMA) and Interfaces) Aggregate types can define various toString functions. If this function takes a $(REF_ALTTEXT FormatSpec, FormatSpec, std, format, spec) or a $(I format string) as argument, the function decides which format characters are accepted. If no toString is defined and the aggregate is an $(REF_ALTTEXT input range, isInputRange, std, range, primitives), it is treated like a range, that is $(B 's'), $(B 'r') and a compound specifier are accepted. In all other cases aggregate types only accept $(B 's'). `toString` should have one of the following signatures --- void toString(Writer, Char)(ref Writer w, const ref FormatSpec!Char fmt) void toString(Writer)(ref Writer w) string toString(); --- Where Writer is an $(REF_ALTTEXT output range, isOutputRange, std,range,primitives) which accepts characters \\((LPAREN)of type `Char` in the first version\\)(RPAREN). The template type does not have to be called Writer . Sometimes it's not possible to use a template, for example when toString overrides Object.toString . In this case, the following \\((LPAREN)slower and less flexible\\)(RPAREN) functions can be used: --- void toString(void delegate(const(char)[]) sink, const ref FormatSpec!char fmt); void toString(void delegate(const(char)[]) sink, string fmt); void toString(void delegate(const(char)[]) sink); --- When several of the above toString versions are available, the versions with Writer take precedence over the versions with a sink . string toString() has the lowest priority. If none of the above mentioned toString versions are available, the aggregates will be formatted by other means, in the following order: If an aggregate is an $(REF_ALTTEXT input range, isInputRange, std, range, primitives), it is formatted like an input range. If an aggregate is a builtin type (using alias this ), it is formatted like the builtin type. If all else fails, structs are formatted like Type(field1, field2, ...) , classes and interfaces are formatted with their fully qualified name and unions with their base name. Copyright: Copyright The D Language Foundation 2000-2013. License: $(HTTP boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP walterbright.com, Walter Bright), $(HTTP erdani.com, Andrei Alexandrescu), and Kenji Hara Source: $(PHOBOSSRC std/format/write.d) Functions Name Description formattedWrite Converts its arguments according to a format string and writes the result to an output range. formatValue Formats a value of any type according to a format specifier and writes the result to an output range."
  },
  "phobos/std/functional/Functions/bind.html": {
    "href": "phobos/std/functional/Functions/bind.html",
    "title": "Overloads for - bind | Marmos Demo",
    "keywords": "Overloads for - bind Module std.functional bind(args) <bug: unknown> bind( T args ) auto Passes the fields of a struct as arguments to a function. Can be used with a $(LINK2 https://dlang.org/spec/expression.html#function_literals, function literal) to give temporary names to the fields of a struct or tuple. Params fun <parameter not found> Callable that the struct's fields will be passed to. Returns A function that accepts a single struct as an argument and passes its fields to fun when called."
  },
  "phobos/std/functional/Functions/curry.html": {
    "href": "phobos/std/functional/Functions/curry.html",
    "title": "Overloads for - curry | Marmos Demo",
    "keywords": "Overloads for - curry Module std.functional curry() <bug: unknown> curry( ) auto Takes a function of (potentially) many arguments, and returns a function taking one argument and returns a callable taking the rest. f(x, y) == curry(f)(x)(y) Params F <parameter not found> a function taking at least one argument t <parameter not found> a callable object whose opCall takes at least 1 object t = a callable object whose opCall takes at least 1 object Returns: A single parameter callable object curry(t) <bug: unknown> curry( T t ) auto ditto"
  },
  "phobos/std/functional/Functions/memoize.html": {
    "href": "phobos/std/functional/Functions/memoize.html",
    "title": "Overloads for - memoize | Marmos Demo",
    "keywords": "Overloads for - memoize Module std.functional memoize(args) ReturnType!(fun) memoize( Parameters!(fun) args ) $(LINK2 https://en.wikipedia.org/wiki/Memoization, Memoizes) a function so as to avoid repeated computation. The memoization structure is a hash table keyed by a tuple of the function's arguments. There is a speed gain if the function is repeatedly called with the same arguments and is more expensive than a hash table lookup. For more information on memoization, refer to $(HTTP docs.google.com/viewer?url=http%3A%2F%2Fhop.perl.plover.com%2Fbook%2Fpdf%2F03CachingAndMemoization.pdf, this book chapter). Example: ---- double transmogrify(int a, string b) { ... expensive computation ... } alias fastTransmogrify = memoize!transmogrify; unittest { auto slow = transmogrify(2, \"hello\"); auto fast = fastTransmogrify(2, \"hello\"); assert(slow == fast); } ---- Params: fun = the call-able to memozie maxSize = The maximum size of the GC buffer to hold the return values Returns: A new function which calls fun and caches its return values. Note: Technically the memoized function should be pure because memoize assumes it will always return the same result for a given tuple of arguments. However, memoize does not enforce that because sometimes it is useful to memoize an impure function, too. memoize(args) ReturnType!(fun) memoize( Parameters!(fun) args ) ditto"
  },
  "phobos/std/functional/Functions/not.html": {
    "href": "phobos/std/functional/Functions/not.html",
    "title": "Overloads for - not | Marmos Demo",
    "keywords": "Overloads for - not Module std.functional not(args) <bug: unknown> not( T args ) auto Negates predicate pred . Params pred <parameter not found> A string or a callable Returns A function which calls pred and returns the logical negation of its return value."
  },
  "phobos/std/functional/Functions/reverseArgs.html": {
    "href": "phobos/std/functional/Functions/reverseArgs.html",
    "title": "Overloads for - reverseArgs | Marmos Demo",
    "keywords": "Overloads for - reverseArgs Module std.functional reverseArgs(args) <bug: unknown> reverseArgs( Args args ) auto N-ary predicate that reverses the order of arguments, e.g., given $(D pred(a, b, c)), returns $(D pred(c, b, a)). Params pred <parameter not found> A callable Returns A function which calls pred after reversing the given parameters"
  },
  "phobos/std/functional/Functions/safeOp.html": {
    "href": "phobos/std/functional/Functions/safeOp.html",
    "title": "Overloads for - safeOp | Marmos Demo",
    "keywords": "Overloads for - safeOp Module std.functional safeOp(a, b) bool safeOp( T0 a, T1 b )"
  },
  "phobos/std/functional/Functions/toDelegate.html": {
    "href": "phobos/std/functional/Functions/toDelegate.html",
    "title": "Overloads for - toDelegate | Marmos Demo",
    "keywords": "Overloads for - toDelegate Module std.functional toDelegate(fp) <bug: unknown> toDelegate( F fp ) auto Convert a callable to a delegate with the same parameter list and return type, avoiding heap allocations and use of auxiliary storage. Params fp F a function pointer or an aggregate type with opCall defined. Returns A delegate with the context pointer pointing to nothing. Example ---- void doStuff() { writeln(\"Hello, world.\"); } void runDelegate(void delegate() myDelegate) { myDelegate(); } auto delegateToPass = toDelegate(&doStuff); runDelegate(delegateToPass); // Calls doStuff, prints \"Hello, world.\" ---- BUGS $(UL $(LI Does not work with @safe functions.) $(LI Ignores C-style / D-style variadic arguments.) )"
  },
  "phobos/std/functional/Functions/unsafeOp.html": {
    "href": "phobos/std/functional/Functions/unsafeOp.html",
    "title": "Overloads for - unsafeOp | Marmos Demo",
    "keywords": "Overloads for - unsafeOp Module std.functional unsafeOp(a, b) bool unsafeOp( ElementType1 a, ElementType2 b )"
  },
  "phobos/std/functional/Overview.html": {
    "href": "phobos/std/functional/Overview.html",
    "title": "Module - std.functional | Marmos Demo",
    "keywords": "Module - std.functional About Functions that manipulate other functions. This module provides functions for compile time function composition. These functions are helpful when constructing predicates for the algorithms in $(MREF std, algorithm) or $(MREF std, range). $(SCRIPT inhibitQuickIndex = 1;) $(DIVC quickindex, $(BOOKTABLE , $(TR $(TH Function Name) $(TH Description) ) $(TR $(TD $(LREF adjoin)) $(TD Joins a couple of functions into one that executes the original functions independently and returns a tuple with all the results. )) $(TR $(TD $(LREF compose), $(LREF pipe)) $(TD Join a couple of functions into one that executes the original functions one after the other, using one function's result for the next function's argument. )) $(TR $(TD $(LREF lessThan), $(LREF greaterThan), $(LREF equalTo)) $(TD Ready-made predicate functions to compare two values. )) $(TR $(TD $(LREF memoize)) $(TD Creates a function that caches its result for fast re-evaluation. )) $(TR $(TD $(LREF not)) $(TD Creates a function that negates another. )) $(TR $(TD $(LREF partial)) $(TD Creates a function that binds the first argument of a given function to a given value. )) $(TR $(TD $(LREF curry)) $(TD Converts a multi-argument function into a series of single-argument functions. f(x, y) == curry(f)(x)(y) )) $(TR $(TD $(LREF reverseArgs)) $(TD Predicate that reverses the order of its arguments. )) $(TR $(TD $(LREF toDelegate)) $(TD Converts a callable to a delegate. )) $(TR $(TD $(LREF unaryFun), $(LREF binaryFun)) $(TD Create a unary or binary function from a string. Most often used when defining algorithms on ranges. )) $(TR $(TD $(LREF bind)) $(TD Passes the fields of a struct as arguments to a function. )) )) Copyright: Copyright Andrei Alexandrescu 2008 - 2009. License: $(HTTP boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP erdani.org, Andrei Alexandrescu) Source: $(PHOBOSSRC std/functional.d) Aliases Name Description equalTo Predicate that returns $(D_PARAM a == b). Correctly compares signed and unsigned integers, ie. !(-1 == ~0U). greaterThan Predicate that returns $(D_PARAM a > b). Correctly compares signed and unsigned integers, ie. 2U > -1. lessThan Predicate that returns $(D_PARAM a < b). Correctly compares signed and unsigned integers, ie. -1 < 2U. pipe Pipes functions in sequence. Offers the same functionality as $(D compose), but with functions specified in reverse order. This may lead to more readable code in some situation because the order of execution is the same as lexical order. Structs Name Description CurryImpl Takes a function of (potentially) many arguments, and returns a function taking one argument and returns a callable taking the rest. f(x, y) == curry(f)(x)(y) DelegateFaker Functions Name Description bind Passes the fields of a struct as arguments to a function. curry Takes a function of (potentially) many arguments, and returns a function taking one argument and returns a callable taking the rest. f(x, y) == curry(f)(x)(y) memoize $(LINK2 https://en.wikipedia.org/wiki/Memoization, Memoizes) a function so as to avoid repeated computation. The memoization structure is a hash table keyed by a tuple of the function's arguments. There is a speed gain if the function is repeatedly called with the same arguments and is more expensive than a hash table lookup. For more information on memoization, refer to $(HTTP docs.google.com/viewer?url=http%3A%2F%2Fhop.perl.plover.com%2Fbook%2Fpdf%2F03CachingAndMemoization.pdf, this book chapter). not Negates predicate pred . reverseArgs N-ary predicate that reverses the order of arguments, e.g., given $(D pred(a, b, c)), returns $(D pred(c, b, a)). safeOp toDelegate Convert a callable to a delegate with the same parameter list and return type, avoiding heap allocations and use of auxiliary storage. unsafeOp"
  },
  "phobos/std/functional/Structs/CurryImpl.html": {
    "href": "phobos/std/functional/Structs/CurryImpl.html",
    "title": "Struct - CurryImpl | Marmos Demo",
    "keywords": "Struct - CurryImpl Module std.functional public struct CurryImpl { // alias FParams = <todo: marmos support pending>; // <bug: unknown> storedArguments; } About Takes a function of (potentially) many arguments, and returns a function taking one argument and returns a callable taking the rest. f(x, y) == curry(f)(x)(y) Params F a function taking at least one argument t a callable object whose opCall takes at least 1 object t = a callable object whose opCall takes at least 1 object Returns: A single parameter callable object Aliases Name Description FParams Variables Name Description storedArguments"
  },
  "phobos/std/functional/Structs/DelegateFaker.html": {
    "href": "phobos/std/functional/Structs/DelegateFaker.html",
    "title": "Struct - DelegateFaker | Marmos Demo",
    "keywords": "Struct - DelegateFaker Module std.functional public struct DelegateFaker { // alias FuncInfo_doIt = <todo: marmos support pending>; } Aliases Name Description FuncInfo_doIt"
  },
  "phobos/std/getopt/Classes/GetOptException.html": {
    "href": "phobos/std/getopt/Classes/GetOptException.html",
    "title": "Class - GetOptException | Marmos Demo",
    "keywords": "Class - GetOptException Module std.getopt public class GetOptException { } About Thrown on one of the following conditions $(UL $(LI An unrecognized command-line argument is passed, and std.getopt.config.passThrough was not present.) $(LI A command-line option was not found, and std.getopt.config.required was present.) $(LI A callback option is missing a value.) )"
  },
  "phobos/std/getopt/Functions/defaultGetoptFormatter.html": {
    "href": "phobos/std/getopt/Functions/defaultGetoptFormatter.html",
    "title": "Overloads for - defaultGetoptFormatter | Marmos Demo",
    "keywords": "Overloads for - defaultGetoptFormatter Module std.getopt defaultGetoptFormatter(output, text, opt, style) void defaultGetoptFormatter( Output output, string text, <bug: unknown> opt, string style ) This function writes the passed text and Option into an output range in the manner described in the documentation of function defaultGetoptPrinter , unless the style option is used. Params: output = The output range used to write the help information. text = The text to print at the beginning of the help output. opt = The Option extracted from the getopt parameter. style = The manner in which to display the output of each Option."
  },
  "phobos/std/getopt/Functions/defaultGetoptPrinter.html": {
    "href": "phobos/std/getopt/Functions/defaultGetoptPrinter.html",
    "title": "Overloads for - defaultGetoptPrinter | Marmos Demo",
    "keywords": "Overloads for - defaultGetoptPrinter Module std.getopt defaultGetoptPrinter(text, opt) void defaultGetoptPrinter( string text, <bug: unknown> opt ) This function prints the passed Option s and text in an aligned manner on stdout . The passed text will be printed first, followed by a newline, then the short and long version of every option will be printed. The short and long version will be aligned to the longest option of every Option passed. If the option is required, then \"Required:\" will be printed after the long version of the Option . If a help message is present it will be printed next. The format is illustrated by this code: ------------ foreach (it; opt) { writefln(\"%*s %*s%s%s\", lengthOfLongestShortOption, it.optShort, lengthOfLongestLongOption, it.optLong, it.required ? \" Required: \" : \" \", it.help); } ------------ Params: text = The text to printed at the beginning of the help output. opt = The Option extracted from the getopt parameter."
  },
  "phobos/std/getopt/Functions/getopt.html": {
    "href": "phobos/std/getopt/Functions/getopt.html",
    "title": "Overloads for - getopt | Marmos Demo",
    "keywords": "Overloads for - getopt Module std.getopt getopt(args, opts) GetoptResult getopt( <bug: unknown> args, T opts ) Parse and remove command line options from a string array. Synopsis --------- import std.getopt; string data = \"file.dat\"; int length = 24; bool verbose; enum Color { no, yes }; Color color; void main(string[] args) { auto helpInformation = getopt( args, \"length\", &length, // numeric \"file\", &data, // string \"verbose\", &verbose, // flag \"color\", \"Information about this color\", &color); // enum ... if (helpInformation.helpWanted) { defaultGetoptPrinter(\"Some information about the program.\", helpInformation.options); } } --------- The getopt function takes a reference to the command line (as received by main ) as its first argument, and an unbounded number of pairs of strings and pointers. Each string is an option meant to \"fill\" the value referenced by the pointer to its right (the \"bound\" pointer). The option string in the call to getopt should not start with a dash. In all cases, the command-line options that were parsed and used by getopt are removed from args . Whatever in the arguments did not look like an option is left in args for further processing by the program. Values that were unaffected by the options are not touched, so a common idiom is to initialize options to their defaults and then invoke getopt . If a command-line argument is recognized as an option with a parameter and the parameter cannot be parsed properly (e.g., a number is expected but not present), a ConvException exception is thrown. If std.getopt.config.passThrough was not passed to getopt and an unrecognized command-line argument is found, or if a required argument is missing a GetOptException is thrown. Depending on the type of the pointer being bound, getopt recognizes the following kinds of options: $(OL $(LI $(I Boolean options). A lone argument sets the option to true . Additionally $(B true) or $(B false) can be set within the option separated with an \"=\" sign: --------- bool verbose = false, debugging = true; getopt(args, \"verbose\", &verbose, \"debug\", &debugging); --------- To set verbose to true , invoke the program with either --verbose or --verbose=true . To set debugging to false , invoke the program with --debugging=false . ) $(LI $(I Numeric options.) If an option is bound to a numeric type, a number is expected as the next option, or right within the option separated with an \"=\" sign: --------- uint timeout; getopt(args, \"timeout\", &timeout); --------- To set timeout to 5 , invoke the program with either --timeout=5 or $(D --timeout 5). ) $(LI $(I Incremental options.) If an option name has a \"+\" suffix and is bound to a numeric type, then the option's value tracks the number of times the option occurred on the command line: --------- uint paranoid; getopt(args, \"paranoid+\", &paranoid); --------- Invoking the program with \"--paranoid --paranoid --paranoid\" will set $(D paranoid) to 3. Note that an incremental option never expects a parameter, e.g., in the command line \"--paranoid 42 --paranoid\", the \"42\" does not set paranoid to 42; instead, paranoid is set to 2 and \"42\" is not considered as part of the normal program arguments. ) $(LI $(I Enum options.) If an option is bound to an enum, an enum symbol as a string is expected as the next option, or right within the option separated with an \"=\" sign: --------- enum Color { no, yes }; Color color; // default initialized to Color.no getopt(args, \"color\", &color); --------- To set color to Color.yes , invoke the program with either --color=yes or $(D --color yes). ) $(LI $(I String options.) If an option is bound to a string, a string is expected as the next option, or right within the option separated with an \"=\" sign: --------- string outputFile; getopt(args, \"output\", &outputFile); --------- Invoking the program with \"--output=myfile.txt\" or \"--output myfile.txt\" will set outputFile to \"myfile.txt\". If you want to pass a string containing spaces, you need to use the quoting that is appropriate to your shell, e.g. --output='my file.txt'. ) $(LI $(I Array options.) If an option is bound to an array, a new element is appended to the array each time the option occurs: --------- string[] outputFiles; getopt(args, \"output\", &outputFiles); --------- Invoking the program with \"--output=myfile.txt --output=yourfile.txt\" or \"--output myfile.txt --output yourfile.txt\" will set outputFiles to $(D [ \"myfile.txt\", \"yourfile.txt\" ]). Alternatively you can set $(LREF arraySep) to allow multiple elements in one parameter. --------- string[] outputFiles; arraySep = \",\"; // defaults to \"\", meaning one element per parameter getopt(args, \"output\", &outputFiles); --------- With the above code you can invoke the program with \"--output=myfile.txt,yourfile.txt\", or \"--output myfile.txt,yourfile.txt\".) $(LI $(I Hash options.) If an option is bound to an associative array, a string of the form \"name=value\" is expected as the next option, or right within the option separated with an \"=\" sign: --------- double[string] tuningParms; getopt(args, \"tune\", &tuningParms); --------- Invoking the program with e.g. \"--tune=alpha=0.5 --tune beta=0.6\" will set tuningParms to [ \"alpha\" : 0.5, \"beta\" : 0.6 ]. Alternatively you can set $(LREF arraySep) as the element separator: --------- double[string] tuningParms; arraySep = \",\"; // defaults to \"\", meaning one element per parameter getopt(args, \"tune\", &tuningParms); --------- With the above code you can invoke the program with \"--tune=alpha=0.5,beta=0.6\", or \"--tune alpha=0.5,beta=0.6\". In general, the keys and values can be of any parsable types. ) $(LI $(I Callback options.) An option can be bound to a function or delegate with the signature $(D void function()), $(D void function(string option)), $(D void function(string option, string value)), or their delegate equivalents. $(UL $(LI If the callback doesn't take any arguments, the callback is invoked whenever the option is seen. ) $(LI If the callback takes one string argument, the option string (without the leading dash(es)) is passed to the callback. After that, the option string is considered handled and removed from the options array. --------- void main(string[] args) { uint verbosityLevel = 1; void myHandler(string option) { if (option == \"quiet\") { verbosityLevel = 0; } else { assert(option == \"verbose\"); verbosityLevel = 2; } } getopt(args, \"verbose\", &myHandler, \"quiet\", &myHandler); } --------- ) $(LI If the callback takes two string arguments, the option string is handled as an option with one argument, and parsed accordingly. The option and its value are passed to the callback. After that, whatever was passed to the callback is considered handled and removed from the list. --------- int main(string[] args) { uint verbosityLevel = 1; bool handlerFailed = false; void myHandler(string option, string value) { switch (value) { case \"quiet\": verbosityLevel = 0; break; case \"verbose\": verbosityLevel = 2; break; case \"shouting\": verbosityLevel = verbosityLevel.max; break; default : stderr.writeln(\"Unknown verbosity level \", value); handlerFailed = true; break; } } getopt(args, \"verbosity\", &myHandler); return handlerFailed ? 1 : 0; } --------- ) )) ) Options_with_multiple_names: Sometimes option synonyms are desirable, e.g. \"--verbose\", \"--loquacious\", and \"--garrulous\" should have the same effect. Such alternate option names can be included in the option specification, using \"|\" as a separator: --------- bool verbose; getopt(args, \"verbose|loquacious|garrulous\", &verbose); --------- Case: By default options are case-insensitive. You can change that behavior by passing getopt the caseSensitive directive like this: --------- bool foo, bar; getopt(args, std.getopt.config.caseSensitive, \"foo\", &foo, \"bar\", &bar); --------- In the example above, \"--foo\" and \"--bar\" are recognized, but \"--Foo\", \"--Bar\", \"--FOo\", \"--bAr\", etc. are rejected. The directive is active until the end of getopt , or until the converse directive caseInsensitive is encountered: --------- bool foo, bar; getopt(args, std.getopt.config.caseSensitive, \"foo\", &foo, std.getopt.config.caseInsensitive, \"bar\", &bar); --------- The option \"--Foo\" is rejected due to $(D std.getopt.config.caseSensitive), but not \"--Bar\", \"--bAr\" etc. because the directive $(D std.getopt.config.caseInsensitive) turned sensitivity off before option \"bar\" was parsed. Short_versus_long_options: Traditionally, programs accepted single-letter options preceded by only one dash (e.g. -t ). getopt accepts such parameters seamlessly. When used with a double-dash (e.g. --t ), a single-letter option behaves the same as a multi-letter option. When used with a single dash, a single-letter option is accepted. To set timeout to 5 , use either of the following: --timeout=5 , --timeout 5 , --t=5 , --t 5 , -t5 , or -t 5 . Forms such as -timeout=5 will be not accepted. For more details about short options, refer also to the next section. Bundling: Single-letter options can be bundled together, i.e. \"-abc\" is the same as $(D \"-a -b -c\"). By default, this option is turned off. You can turn it on with the std.getopt.config.bundling directive: --------- bool foo, bar; getopt(args, std.getopt.config.bundling, \"foo|f\", &foo, \"bar|b\", &bar); --------- In case you want to only enable bundling for some of the parameters, bundling can be turned off with std.getopt.config.noBundling . Required: An option can be marked as required. If that option is not present in the arguments an exception will be thrown. --------- bool foo, bar; getopt(args, std.getopt.config.required, \"foo|f\", &foo, \"bar|b\", &bar); --------- Only the option directly following std.getopt.config.required is required. Passing_unrecognized_options_through: If an application needs to do its own processing of whichever arguments getopt did not understand, it can pass the std.getopt.config.passThrough directive to getopt : --------- bool foo, bar; getopt(args, std.getopt.config.passThrough, \"foo\", &foo, \"bar\", &bar); --------- An unrecognized option such as \"--baz\" will be found untouched in args after getopt returns. Help_Information_Generation: If an option string is followed by another string, this string serves as a description for this option. The getopt function returns a struct of type GetoptResult . This return value contains information about all passed options as well a $(D bool GetoptResult.helpWanted) flag indicating whether information about these options was requested. The getopt function always adds an option for --help|-h to set the flag if the option is seen on the command line. Options_Terminator: A lone double-dash terminates getopt gathering. It is used to separate program options from other parameters (e.g., options to be passed to another program). Invoking the example above with $(D \"--foo -- --bar\") parses foo but leaves \"--bar\" in args . The double-dash itself is removed from the argument array unless the std.getopt.config.keepEndOfOptions directive is given."
  },
  "phobos/std/getopt/Functions/getoptImpl.html": {
    "href": "phobos/std/getopt/Functions/getoptImpl.html",
    "title": "Overloads for - getoptImpl | Marmos Demo",
    "keywords": "Overloads for - getoptImpl Module std.getopt getoptImpl(args, cfg, rslt, excep, visitedLongOpts, visitedShortOpts, opts) void getoptImpl( <bug: unknown> args, configuration cfg, GetoptResult rslt, GetOptException excep, <bug: unknown> visitedLongOpts, <bug: unknown> visitedShortOpts, T opts )"
  },
  "phobos/std/getopt/Functions/handleOption.html": {
    "href": "phobos/std/getopt/Functions/handleOption.html",
    "title": "Overloads for - handleOption | Marmos Demo",
    "keywords": "Overloads for - handleOption Module std.getopt handleOption(option, receiver, args, cfg, incremental) bool handleOption( string option, R receiver, <bug: unknown> args, configuration cfg, bool incremental )"
  },
  "phobos/std/getopt/Functions/optMatch.html": {
    "href": "phobos/std/getopt/Functions/optMatch.html",
    "title": "Overloads for - optMatch | Marmos Demo",
    "keywords": "Overloads for - optMatch Module std.getopt optMatch(arg, optPattern, value, cfg) bool optMatch( string arg, string optPattern, string value, configuration cfg )"
  },
  "phobos/std/getopt/Functions/setConfig.html": {
    "href": "phobos/std/getopt/Functions/setConfig.html",
    "title": "Overloads for - setConfig | Marmos Demo",
    "keywords": "Overloads for - setConfig Module std.getopt setConfig(cfg, option) void setConfig( configuration cfg, config option )"
  },
  "phobos/std/getopt/Functions/splitAndGet.html": {
    "href": "phobos/std/getopt/Functions/splitAndGet.html",
    "title": "Overloads for - splitAndGet | Marmos Demo",
    "keywords": "Overloads for - splitAndGet Module std.getopt splitAndGet(opt) Option splitAndGet( string opt )"
  },
  "phobos/std/getopt/Functions/validator.html": {
    "href": "phobos/std/getopt/Functions/validator.html",
    "title": "Overloads for - validator | Marmos Demo",
    "keywords": "Overloads for - validator Module std.getopt validator() <bug: unknown> validator( ) auto"
  },
  "phobos/std/getopt/Overview.html": {
    "href": "phobos/std/getopt/Overview.html",
    "title": "Module - std.getopt | Marmos Demo",
    "keywords": "Module - std.getopt About Processing of command line options. The getopt module implements a getopt function, which adheres to the POSIX syntax for command line options. GNU extensions are supported in the form of long options introduced by a double dash (\"--\"). Support for bundling of command line options, as was the case with the more traditional single-letter approach, is provided but not enabled by default. Copyright: Copyright Andrei Alexandrescu 2008 - 2015. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP erdani.org, Andrei Alexandrescu) Credits: This module and its documentation are inspired by Perl's $(HTTPS perldoc.perl.org/Getopt/Long.html, Getopt::Long) module. The syntax of D's getopt is simpler than its Perl counterpart because $(D getopt) infers the expected parameter types from the static types of the passed-in pointers. Source: $(PHOBOSSRC std/getopt.d) Aliases Name Description optionValidator Classes Name Description GetOptException Structs Name Description configuration GetoptResult The result of the getopt function. Option Information about an option. Functions Name Description defaultGetoptFormatter This function writes the passed text and Option into an output range in the manner described in the documentation of function defaultGetoptPrinter , unless the style option is used. defaultGetoptPrinter This function prints the passed Option s and text in an aligned manner on stdout . getopt Parse and remove command line options from a string array. getoptImpl handleOption optMatch setConfig splitAndGet validator Variables Name Description arraySep When set to \"\", parameters to array and associative array receivers are treated as an individual argument. That is, only one argument is appended or inserted per appearance of the option switch. If arraySep is set to something else, then each parameter is first split by the separator, and the individual pieces are treated as arguments to the same option. assignChar The assignment character used in options with parameters (default '='). autoIncrementChar endOfOptions The string that conventionally marks the end of all options (default '--'). fmt isOptionStr isReceiver message optionChar The option character (default '-')."
  },
  "phobos/std/getopt/Structs/GetoptResult.html": {
    "href": "phobos/std/getopt/Structs/GetoptResult.html",
    "title": "Struct - GetoptResult | Marmos Demo",
    "keywords": "Struct - GetoptResult Module std.getopt public struct GetoptResult { // Flag indicating if help was requested bool helpWanted; // All possible options <bug: unknown> options; } About The result of the getopt function. helpWanted is set if the option --help or -h was passed to the option parser. Variables Name Description helpWanted Flag indicating if help was requested options All possible options"
  },
  "phobos/std/getopt/Structs/Option.html": {
    "href": "phobos/std/getopt/Structs/Option.html",
    "title": "Struct - Option | Marmos Demo",
    "keywords": "Struct - Option Module std.getopt public struct Option { // The description of this option string help; // The long symbol for this option string optLong; // The short symbol for this option string optShort; // If a option is required, not passing it will result in an error bool required; } About Information about an option. Variables Name Description help The description of this option optLong The long symbol for this option optShort The short symbol for this option required If a option is required, not passing it will result in an error"
  },
  "phobos/std/getopt/Structs/configuration.html": {
    "href": "phobos/std/getopt/Structs/configuration.html",
    "title": "Struct - configuration | Marmos Demo",
    "keywords": "Struct - configuration Module std.getopt public struct configuration { }"
  },
  "phobos/std/int128/Functions/print.html": {
    "href": "phobos/std/int128/Functions/print.html",
    "title": "Overloads for - print | Marmos Demo",
    "keywords": "Overloads for - print Module std.int128 print(c) void print( Int128 c ) Tests"
  },
  "phobos/std/int128/Functions/printx.html": {
    "href": "phobos/std/int128/Functions/printx.html",
    "title": "Overloads for - printx | Marmos Demo",
    "keywords": "Overloads for - printx Module std.int128 printx(c) void printx( Int128 c ) Tests"
  },
  "phobos/std/int128/Int128/Functions/opCmp.html": {
    "href": "phobos/std/int128/Int128/Functions/opCmp.html",
    "title": "Overloads for - opCmp | Marmos Demo",
    "keywords": "Overloads for - opCmp Module std.int128 Parent Int128 opCmp(op2) int opCmp( Int128 op2 ) support arithmentic comparison operators < <= > >= Params: op2 = right hand operand Returns: -1 for less than, 0 for equals, 1 for greater than"
  },
  "phobos/std/int128/Int128/Functions/opEquals.html": {
    "href": "phobos/std/int128/Int128/Functions/opEquals.html",
    "title": "Overloads for - opEquals | Marmos Demo",
    "keywords": "Overloads for - opEquals Module std.int128 Parent Int128 opEquals(lo) bool opEquals( long lo ) Compare for equality Params: lo = signed value to compare with Returns: true if Int128 equals value opEquals(lo) bool opEquals( ulong lo ) Compare for equality Params: lo = unsigned value to compare with Returns: true if Int128 equals value opEquals(op2) bool opEquals( Int128 op2 ) Compare for equality Params: op2 = value to compare with Returns: true if Int128 equals value"
  },
  "phobos/std/int128/Int128/Functions/toHash.html": {
    "href": "phobos/std/int128/Int128/Functions/toHash.html",
    "title": "Overloads for - toHash | Marmos Demo",
    "keywords": "Overloads for - toHash Module std.int128 Parent Int128 toHash() size_t toHash( ) Returns: hash value for Int128"
  },
  "phobos/std/int128/Overview.html": {
    "href": "phobos/std/int128/Overview.html",
    "title": "Module - std.int128 | Marmos Demo",
    "keywords": "Module - std.int128 About Implements a signed 128 bit integer type. Author: Walter Bright Copyright: Copyright (c) 2022, D Language Foundation License: $(HTTP boost.org/LICENSE_1_0.txt, Boost License 1.0) Source: $(PHOBOSSRC std/int128.d) Structs Name Description Int128 128 bit signed integer type. Functions Name Description print Tests printx Tests"
  },
  "phobos/std/int128/Structs/Int128.html": {
    "href": "phobos/std/int128/Structs/Int128.html",
    "title": "Struct - Int128 | Marmos Demo",
    "keywords": "Struct - Int128 Module std.int128 public struct Int128 { // support arithmentic comparison operators < <= > >= Params: op2 = right hand operand Returns: -1 for less than, 0 for equals, 1 for greater than int opCmp( Int128 op2 ) ; // Compare for equality Params: lo = signed value to compare with Returns: true if Int128 equals value bool opEquals( long lo ) ; // Compare for equality Params: lo = unsigned value to compare with Returns: true if Int128 equals value bool opEquals( ulong lo ) ; // Compare for equality Params: op2 = value to compare with Returns: true if Int128 equals value bool opEquals( Int128 op2 ) ; // Returns: hash value for Int128 size_t toHash( ) ; // core.int128.Cent Cent data; // maximum value __enumMember max; // minimum value __enumMember min; } About 128 bit signed integer type. Functions Name Description opCmp support arithmentic comparison operators < <= > >= Params: op2 = right hand operand Returns: -1 for less than, 0 for equals, 1 for greater than opEquals Compare for equality Params: lo = signed value to compare with Returns: true if Int128 equals value toHash Returns: hash value for Int128 Variables Name Description data core.int128.Cent max maximum value min minimum value"
  },
  "phobos/std/internal/attributes/Overview.html": {
    "href": "phobos/std/internal/attributes/Overview.html",
    "title": "Module - std.internal.attributes | Marmos Demo",
    "keywords": "Module - std.internal.attributes Variables Name Description betterC Used to annotate unittest s which need to be tested in a -betterC environment."
  },
  "phobos/std/internal/cstring/Functions/tempCString.html": {
    "href": "phobos/std/internal/cstring/Functions/tempCString.html",
    "title": "Overloads for - tempCString | Marmos Demo",
    "keywords": "Overloads for - tempCString Module std.internal.cstring tempCString(str) <bug: unknown> tempCString( From str ) auto Creates temporary 0-terminated $(I C string) with copy of passed text. Params To <parameter not found> character type of returned C string str From string or input range to be converted Returns The value returned is implicitly convertible to $(D const To*) and has two properties: ptr to access $(I C string) as $(D const To*) and buffPtr to access it as To* . The value returned can be indexed by [] to access it as an array. The temporary $(I C string) is valid unless returned object is destroyed. Thus if returned object is assigned to a variable the temporary is valid unless the variable goes out of scope. If returned object isn't assigned to a variable it will be destroyed at the end of creating primary expression. Implementation_note For small strings tempCString will use stack allocated buffer, for large strings (approximately 250 characters and more) it will allocate temporary one using C's malloc . Note This function is intended to be used in function call expression (like strlen(str.tempCString()) ). Incorrect usage of this function may lead to memory corruption. See $(RED WARNING) in $(B Examples) section."
  },
  "phobos/std/internal/cstring/Functions/trustedRealloc.html": {
    "href": "phobos/std/internal/cstring/Functions/trustedRealloc.html",
    "title": "Overloads for - trustedRealloc | Marmos Demo",
    "keywords": "Overloads for - trustedRealloc Module std.internal.cstring trustedRealloc(buf) <bug: unknown> trustedRealloc( <bug: unknown> buf )"
  },
  "phobos/std/internal/cstring/Functions/trustedReallocStack.html": {
    "href": "phobos/std/internal/cstring/Functions/trustedReallocStack.html",
    "title": "Overloads for - trustedReallocStack | Marmos Demo",
    "keywords": "Overloads for - trustedReallocStack Module std.internal.cstring trustedReallocStack(buf, strLength) <bug: unknown> trustedReallocStack( <bug: unknown> buf, size_t strLength )"
  },
  "phobos/std/internal/cstring/Overview.html": {
    "href": "phobos/std/internal/cstring/Overview.html",
    "title": "Module - std.internal.cstring | Marmos Demo",
    "keywords": "Module - std.internal.cstring About Helper functions for working with $(I C strings). This module is intended to provide fast, safe and garbage free way to work with $(I C strings). Copyright: Denis Shelomovskij 2013-2014 License: $(HTTP boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: Denis Shelomovskij Macros COREREF $(HTTP dlang.org/phobos/core_$1.html#$2, core.$1.$2 ) Aliases Name Description tempCStringW Structs Name Description TempCStringBuffer Functions Name Description tempCString Creates temporary 0-terminated $(I C string) with copy of passed text. trustedRealloc trustedReallocStack"
  },
  "phobos/std/internal/cstring/Structs/TempCStringBuffer.html": {
    "href": "phobos/std/internal/cstring/Structs/TempCStringBuffer.html",
    "title": "Struct - TempCStringBuffer | Marmos Demo",
    "keywords": "Struct - TempCStringBuffer Module std.internal.cstring public struct TempCStringBuffer { // <bug: unknown> buffPtr( ) ; // <bug: unknown> opIndex( ) ; // <bug: unknown> ptr( ) ; // TempCStringBuffer trustedVoidInit( ) static; // <bug: unknown> useStack; } Functions Name Description buffPtr opIndex ptr trustedVoidInit Variables Name Description useStack"
  },
  "phobos/std/internal/cstring/TempCStringBuffer/Functions/buffPtr.html": {
    "href": "phobos/std/internal/cstring/TempCStringBuffer/Functions/buffPtr.html",
    "title": "Overloads for - buffPtr | Marmos Demo",
    "keywords": "Overloads for - buffPtr Module std.internal.cstring Parent TempCStringBuffer buffPtr() <bug: unknown> buffPtr( )"
  },
  "phobos/std/internal/cstring/TempCStringBuffer/Functions/opIndex.html": {
    "href": "phobos/std/internal/cstring/TempCStringBuffer/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.internal.cstring Parent TempCStringBuffer opIndex() <bug: unknown> opIndex( )"
  },
  "phobos/std/internal/cstring/TempCStringBuffer/Functions/ptr.html": {
    "href": "phobos/std/internal/cstring/TempCStringBuffer/Functions/ptr.html",
    "title": "Overloads for - ptr | Marmos Demo",
    "keywords": "Overloads for - ptr Module std.internal.cstring Parent TempCStringBuffer ptr() <bug: unknown> ptr( )"
  },
  "phobos/std/internal/cstring/TempCStringBuffer/Functions/trustedVoidInit.html": {
    "href": "phobos/std/internal/cstring/TempCStringBuffer/Functions/trustedVoidInit.html",
    "title": "Overloads for - trustedVoidInit | Marmos Demo",
    "keywords": "Overloads for - trustedVoidInit Module std.internal.cstring Parent TempCStringBuffer trustedVoidInit() TempCStringBuffer trustedVoidInit( ) static"
  },
  "phobos/std/internal/digest/sha_SSSE3/Functions/Ch.html": {
    "href": "phobos/std/internal/digest/sha_SSSE3/Functions/Ch.html",
    "title": "Overloads for - Ch | Marmos Demo",
    "keywords": "Overloads for - Ch Module std.internal.digest.sha_SSSE3 Ch(x, y, z) <bug: unknown> Ch( string x, string y, string z ) Calculates Ch(x, y, z) = z ^ (x & (y ^ z))"
  },
  "phobos/std/internal/digest/sha_SSSE3/Functions/F.html": {
    "href": "phobos/std/internal/digest/sha_SSSE3/Functions/F.html",
    "title": "Overloads for - F | Marmos Demo",
    "keywords": "Overloads for - F Module std.internal.digest.sha_SSSE3 F(i, b, c, d) <bug: unknown> F( int i, string b, string c, string d ) Returns function for round i. Function returns result in T1 and may destroy T2."
  },
  "phobos/std/internal/digest/sha_SSSE3/Functions/Maj.html": {
    "href": "phobos/std/internal/digest/sha_SSSE3/Functions/Maj.html",
    "title": "Overloads for - Maj | Marmos Demo",
    "keywords": "Overloads for - Maj Module std.internal.digest.sha_SSSE3 Maj(x, y, z) <bug: unknown> Maj( string x, string y, string z ) Calculates Maj(x, y, z) = (x & y) | (z & (x ^ y))"
  },
  "phobos/std/internal/digest/sha_SSSE3/Functions/Parity.html": {
    "href": "phobos/std/internal/digest/sha_SSSE3/Functions/Parity.html",
    "title": "Overloads for - Parity | Marmos Demo",
    "keywords": "Overloads for - Parity Module std.internal.digest.sha_SSSE3 Parity(x, y, z) <bug: unknown> Parity( string x, string y, string z ) Calculates Parity(x, y, z) = x ^ y ^ z"
  },
  "phobos/std/internal/digest/sha_SSSE3/Functions/WiKi.html": {
    "href": "phobos/std/internal/digest/sha_SSSE3/Functions/WiKi.html",
    "title": "Overloads for - WiKi | Marmos Demo",
    "keywords": "Overloads for - WiKi Module std.internal.digest.sha_SSSE3 WiKi(i) string WiKi( uint i ) Returns reference to storage of value W[i] + K[i]."
  },
  "phobos/std/internal/digest/sha_SSSE3/Functions/WiKiV.html": {
    "href": "phobos/std/internal/digest/sha_SSSE3/Functions/WiKiV.html",
    "title": "Overloads for - WiKiV | Marmos Demo",
    "keywords": "Overloads for - WiKiV Module std.internal.digest.sha_SSSE3 WiKiV(i) string WiKiV( uint i ) Returns reference to storage of vector (W + K)[i .. i+4]."
  },
  "phobos/std/internal/digest/sha_SSSE3/Functions/WiV.html": {
    "href": "phobos/std/internal/digest/sha_SSSE3/Functions/WiV.html",
    "title": "Overloads for - WiV | Marmos Demo",
    "keywords": "Overloads for - WiV Module std.internal.digest.sha_SSSE3 WiV(i) string WiV( uint i ) Returns reference to storage of vector W[i .. i+4]."
  },
  "phobos/std/internal/digest/sha_SSSE3/Functions/bswap_shufb_ctl.html": {
    "href": "phobos/std/internal/digest/sha_SSSE3/Functions/bswap_shufb_ctl.html",
    "title": "Overloads for - bswap_shufb_ctl | Marmos Demo",
    "keywords": "Overloads for - bswap_shufb_ctl Module std.internal.digest.sha_SSSE3 bswap_shufb_ctl() string bswap_shufb_ctl( ) Returns the reference to the byte shuffle control word."
  },
  "phobos/std/internal/digest/sha_SSSE3/Functions/constant.html": {
    "href": "phobos/std/internal/digest/sha_SSSE3/Functions/constant.html",
    "title": "Overloads for - constant | Marmos Demo",
    "keywords": "Overloads for - constant Module std.internal.digest.sha_SSSE3 constant(i) string constant( uint i ) Returns the reference to constant used in round i."
  },
  "phobos/std/internal/digest/sha_SSSE3/Functions/epilogue.html": {
    "href": "phobos/std/internal/digest/sha_SSSE3/Functions/epilogue.html",
    "title": "Overloads for - epilogue | Marmos Demo",
    "keywords": "Overloads for - epilogue Module std.internal.digest.sha_SSSE3 epilogue() <bug: unknown> epilogue( ) The epilogue sequence. Just pop the saved registers from stack and return to caller."
  },
  "phobos/std/internal/digest/sha_SSSE3/Functions/loadstate.html": {
    "href": "phobos/std/internal/digest/sha_SSSE3/Functions/loadstate.html",
    "title": "Overloads for - loadstate | Marmos Demo",
    "keywords": "Overloads for - loadstate Module std.internal.digest.sha_SSSE3 loadstate(base, a, b, c, d, e) <bug: unknown> loadstate( string base, string a, string b, string c, string d, string e ) Generates instructions to load state from memory into registers."
  },
  "phobos/std/internal/digest/sha_SSSE3/Functions/precalc.html": {
    "href": "phobos/std/internal/digest/sha_SSSE3/Functions/precalc.html",
    "title": "Overloads for - precalc | Marmos Demo",
    "keywords": "Overloads for - precalc Module std.internal.digest.sha_SSSE3 precalc(i) <bug: unknown> precalc( int i ) Choose right precalc method."
  },
  "phobos/std/internal/digest/sha_SSSE3/Functions/precalc_00_15.html": {
    "href": "phobos/std/internal/digest/sha_SSSE3/Functions/precalc_00_15.html",
    "title": "Overloads for - precalc_00_15 | Marmos Demo",
    "keywords": "Overloads for - precalc_00_15 Module std.internal.digest.sha_SSSE3 precalc_00_15(i) <bug: unknown> precalc_00_15( int i ) Loads the message words and performs the little to big endian conversion. Requires that the shuffle control word and the round constant is loaded into required XMM register. The BUFFER_PTR register must point to the buffer."
  },
  "phobos/std/internal/digest/sha_SSSE3/Functions/precalc_16_31.html": {
    "href": "phobos/std/internal/digest/sha_SSSE3/Functions/precalc_16_31.html",
    "title": "Overloads for - precalc_16_31 | Marmos Demo",
    "keywords": "Overloads for - precalc_16_31 Module std.internal.digest.sha_SSSE3 precalc_16_31(i) <bug: unknown> precalc_16_31( int i ) Done on 4 consequtive W[i] values in a single XMM register W[i ] = (W[i-3] ^ W[i-8] ^ W[i-14] ^ W[i-16]) rol 1 W[i+1] = (W[i-2] ^ W[i-7] ^ W[i-13] ^ W[i-15]) rol 1 W[i+2] = (W[i-1] ^ W[i-6] ^ W[i-12] ^ W[i-14]) rol 1 W[i+3] = ( 0 ^ W[i-5] ^ W[i-11] ^ W[i-13]) rol 1 This additional calculation unfortunately requires many additional operations W[i+3] ^= W[i] rol 1 Once we have 4 W[i] values in XMM we can also add four K values with one instruction W[i:i+3] += {K,K,K,K}"
  },
  "phobos/std/internal/digest/sha_SSSE3/Functions/precalc_32_79.html": {
    "href": "phobos/std/internal/digest/sha_SSSE3/Functions/precalc_32_79.html",
    "title": "Overloads for - precalc_32_79 | Marmos Demo",
    "keywords": "Overloads for - precalc_32_79 Module std.internal.digest.sha_SSSE3 precalc_32_79(i) <bug: unknown> precalc_32_79( int i ) Performs the main calculation as decribed above."
  },
  "phobos/std/internal/digest/sha_SSSE3/Functions/prologue.html": {
    "href": "phobos/std/internal/digest/sha_SSSE3/Functions/prologue.html",
    "title": "Overloads for - prologue | Marmos Demo",
    "keywords": "Overloads for - prologue Module std.internal.digest.sha_SSSE3 prologue() <bug: unknown> prologue( ) The prologue sequence."
  },
  "phobos/std/internal/digest/sha_SSSE3/Functions/regno.html": {
    "href": "phobos/std/internal/digest/sha_SSSE3/Functions/regno.html",
    "title": "Overloads for - regno | Marmos Demo",
    "keywords": "Overloads for - regno Module std.internal.digest.sha_SSSE3 regno(i) uint regno( uint i ) Returns the XMM register number used in round i"
  },
  "phobos/std/internal/digest/sha_SSSE3/Functions/round.html": {
    "href": "phobos/std/internal/digest/sha_SSSE3/Functions/round.html",
    "title": "Overloads for - round | Marmos Demo",
    "keywords": "Overloads for - round Module std.internal.digest.sha_SSSE3 round(i, a, b, c, d, e) <bug: unknown> round( int i, string a, string b, string c, string d, string e ) Return code for round i and i+1. Performs the following rotation: in=>out: A=>D, B=>E, C=>A, D=>B, E=>C"
  },
  "phobos/std/internal/digest/sha_SSSE3/Functions/savestate.html": {
    "href": "phobos/std/internal/digest/sha_SSSE3/Functions/savestate.html",
    "title": "Overloads for - savestate | Marmos Demo",
    "keywords": "Overloads for - savestate Module std.internal.digest.sha_SSSE3 savestate(base, a, b, c, d, e) <bug: unknown> savestate( string base, string a, string b, string c, string d, string e ) Generates instructions to update state from registers, saving result in memory."
  },
  "phobos/std/internal/digest/sha_SSSE3/Functions/swt3264.html": {
    "href": "phobos/std/internal/digest/sha_SSSE3/Functions/swt3264.html",
    "title": "Overloads for - swt3264 | Marmos Demo",
    "keywords": "Overloads for - swt3264 Module std.internal.digest.sha_SSSE3 swt3264(insn32, __anonymous) <bug: unknown> swt3264( <bug: unknown> insn32, <bug: unknown> __anonymous ) Chooses the instruction sequence based on the 32bit or 64bit model. swt3264(__anonymous, insn64) <bug: unknown> swt3264( <bug: unknown> __anonymous, <bug: unknown> insn64 )"
  },
  "phobos/std/internal/digest/sha_SSSE3/Functions/to_string.html": {
    "href": "phobos/std/internal/digest/sha_SSSE3/Functions/to_string.html",
    "title": "Overloads for - to_string | Marmos Demo",
    "keywords": "Overloads for - to_string Module std.internal.digest.sha_SSSE3 to_string(i) string to_string( uint i ) Simple version to produce numbers < 100 as string."
  },
  "phobos/std/internal/digest/sha_SSSE3/Functions/transformSSSE3.html": {
    "href": "phobos/std/internal/digest/sha_SSSE3/Functions/transformSSSE3.html",
    "title": "Overloads for - transformSSSE3 | Marmos Demo",
    "keywords": "Overloads for - transformSSSE3 Module std.internal.digest.sha_SSSE3 transformSSSE3(state, buffer, __anonymous) void transformSSSE3( <bug: unknown> state, <bug: unknown> buffer, ExtraArgs __anonymous )"
  },
  "phobos/std/internal/digest/sha_SSSE3/Functions/weave.html": {
    "href": "phobos/std/internal/digest/sha_SSSE3/Functions/weave.html",
    "title": "Overloads for - weave | Marmos Demo",
    "keywords": "Overloads for - weave Module std.internal.digest.sha_SSSE3 weave(seq1, seq2, dist) <bug: unknown> weave( <bug: unknown> seq1, <bug: unknown> seq2, uint dist ) Weaves the 2 instruction sequences together."
  },
  "phobos/std/internal/digest/sha_SSSE3/Functions/wrap.html": {
    "href": "phobos/std/internal/digest/sha_SSSE3/Functions/wrap.html",
    "title": "Overloads for - wrap | Marmos Demo",
    "keywords": "Overloads for - wrap Module std.internal.digest.sha_SSSE3 wrap(insn) string wrap( <bug: unknown> insn ) Flattens the instruction sequence and wraps it in an asm block."
  },
  "phobos/std/internal/digest/sha_SSSE3/Functions/xsetup.html": {
    "href": "phobos/std/internal/digest/sha_SSSE3/Functions/xsetup.html",
    "title": "Overloads for - xsetup | Marmos Demo",
    "keywords": "Overloads for - xsetup Module std.internal.digest.sha_SSSE3 xsetup(i) <bug: unknown> xsetup( int i ) Returns instruction used to setup a round."
  },
  "phobos/std/internal/digest/sha_SSSE3/Overview.html": {
    "href": "phobos/std/internal/digest/sha_SSSE3/Overview.html",
    "title": "Module - std.internal.digest.sha_SSSE3 | Marmos Demo",
    "keywords": "Module - std.internal.digest.sha_SSSE3 About Computes SHA1 digests of arbitrary data, using an optimized algorithm with SSSE3 instructions. Authors The general idea is described by Dean Gaudet. Another important observation is published by Max Locktyukhin. (Both implementations are public domain.) Translation to X86 and D by Kai Nacke kai@redstar.de References $(LINK2 http://arctic.org/~dean/crypto/sha1.html) $(LINK2 http://software.intel.com/en-us/articles/improving-the-performance-of-the-secure-hash-algorithm-1/, Fast implementation of SHA1) Aliases Name Description ExtraArgs Functions Name Description bswap_shufb_ctl Returns the reference to the byte shuffle control word. Ch Calculates Ch(x, y, z) = z ^ (x & (y ^ z)) constant Returns the reference to constant used in round i. epilogue The epilogue sequence. Just pop the saved registers from stack and return to caller. F Returns function for round i. Function returns result in T1 and may destroy T2. loadstate Generates instructions to load state from memory into registers. Maj Calculates Maj(x, y, z) = (x & y) | (z & (x ^ y)) Parity Calculates Parity(x, y, z) = x ^ y ^ z precalc Choose right precalc method. precalc_00_15 Loads the message words and performs the little to big endian conversion. Requires that the shuffle control word and the round constant is loaded into required XMM register. The BUFFER_PTR register must point to the buffer. precalc_16_31 Done on 4 consequtive W[i] values in a single XMM register W[i ] = (W[i-3] ^ W[i-8] ^ W[i-14] ^ W[i-16]) rol 1 W[i+1] = (W[i-2] ^ W[i-7] ^ W[i-13] ^ W[i-15]) rol 1 W[i+2] = (W[i-1] ^ W[i-6] ^ W[i-12] ^ W[i-14]) rol 1 W[i+3] = ( 0 ^ W[i-5] ^ W[i-11] ^ W[i-13]) rol 1 precalc_32_79 Performs the main calculation as decribed above. prologue The prologue sequence. regno Returns the XMM register number used in round i round Return code for round i and i+1. Performs the following rotation: in=>out: A=>D, B=>E, C=>A, D=>B, E=>C savestate Generates instructions to update state from registers, saving result in memory. swt3264 Chooses the instruction sequence based on the 32bit or 64bit model. to_string Simple version to produce numbers < 100 as string. transformSSSE3 weave Weaves the 2 instruction sequences together. WiKi Returns reference to storage of value W[i] + K[i]. WiKiV Returns reference to storage of vector (W + K)[i .. i+4]. WiV Returns reference to storage of vector W[i .. i+4]. wrap Flattens the instruction sequence and wraps it in an asm block. xsetup Returns instruction used to setup a round. Variables Name Description A B BUFFER_PTR BUFFER_PTR C constants CONSTANTS_PTR D E PRECALC_AHEAD SP SP STATE_PTR STATE_PTR T1 T2 W_TMP W_TMP2 X_CONSTANT X_CONSTANT X_SHUFFLECTL X_SHUFFLECTL"
  },
  "phobos/std/internal/math/biguintcore/BigUint/Functions/addOrSub.html": {
    "href": "phobos/std/internal/math/biguintcore/BigUint/Functions/addOrSub.html",
    "title": "Overloads for - addOrSub | Marmos Demo",
    "keywords": "Overloads for - addOrSub Module std.internal.math.biguintcore Parent BigUint addOrSub(x, y, wantSub, sign) BigUint addOrSub( BigUint x, BigUint y, bool wantSub, bool sign ) static"
  },
  "phobos/std/internal/math/biguintcore/BigUint/Functions/div.html": {
    "href": "phobos/std/internal/math/biguintcore/BigUint/Functions/div.html",
    "title": "Overloads for - div | Marmos Demo",
    "keywords": "Overloads for - div Module std.internal.math.biguintcore Parent BigUint div(x, y) BigUint div( BigUint x, BigUint y ) static"
  },
  "phobos/std/internal/math/biguintcore/BigUint/Functions/divMod.html": {
    "href": "phobos/std/internal/math/biguintcore/BigUint/Functions/divMod.html",
    "title": "Overloads for - divMod | Marmos Demo",
    "keywords": "Overloads for - divMod Module std.internal.math.biguintcore Parent BigUint divMod(x, y, quotient, remainder) void divMod( BigUint x, BigUint y, BigUint quotient, BigUint remainder ) static"
  },
  "phobos/std/internal/math/biguintcore/BigUint/Functions/isZero.html": {
    "href": "phobos/std/internal/math/biguintcore/BigUint/Functions/isZero.html",
    "title": "Overloads for - isZero | Marmos Demo",
    "keywords": "Overloads for - isZero Module std.internal.math.biguintcore Parent BigUint isZero() bool isZero( )"
  },
  "phobos/std/internal/math/biguintcore/BigUint/Functions/mod.html": {
    "href": "phobos/std/internal/math/biguintcore/BigUint/Functions/mod.html",
    "title": "Overloads for - mod | Marmos Demo",
    "keywords": "Overloads for - mod Module std.internal.math.biguintcore Parent BigUint mod(x, y) BigUint mod( BigUint x, BigUint y ) static"
  },
  "phobos/std/internal/math/biguintcore/BigUint/Functions/mul.html": {
    "href": "phobos/std/internal/math/biguintcore/BigUint/Functions/mul.html",
    "title": "Overloads for - mul | Marmos Demo",
    "keywords": "Overloads for - mul Module std.internal.math.biguintcore Parent BigUint mul(x, y) BigUint mul( BigUint x, BigUint y ) static"
  },
  "phobos/std/internal/math/biguintcore/BigUint/Functions/numBytes.html": {
    "href": "phobos/std/internal/math/biguintcore/BigUint/Functions/numBytes.html",
    "title": "Overloads for - numBytes | Marmos Demo",
    "keywords": "Overloads for - numBytes Module std.internal.math.biguintcore Parent BigUint numBytes() size_t numBytes( )"
  },
  "phobos/std/internal/math/biguintcore/BigUint/Functions/peekUint.html": {
    "href": "phobos/std/internal/math/biguintcore/BigUint/Functions/peekUint.html",
    "title": "Overloads for - peekUint | Marmos Demo",
    "keywords": "Overloads for - peekUint Module std.internal.math.biguintcore Parent BigUint peekUint(n) uint peekUint( size_t n )"
  },
  "phobos/std/internal/math/biguintcore/BigUint/Functions/peekUlong.html": {
    "href": "phobos/std/internal/math/biguintcore/BigUint/Functions/peekUlong.html",
    "title": "Overloads for - peekUlong | Marmos Demo",
    "keywords": "Overloads for - peekUlong Module std.internal.math.biguintcore Parent BigUint peekUlong(n) ulong peekUlong( size_t n )"
  },
  "phobos/std/internal/math/biguintcore/BigUint/Functions/pow.html": {
    "href": "phobos/std/internal/math/biguintcore/BigUint/Functions/pow.html",
    "title": "Overloads for - pow | Marmos Demo",
    "keywords": "Overloads for - pow Module std.internal.math.biguintcore Parent BigUint pow(x, y) BigUint pow( BigUint x, ulong y ) static Return a BigUint which is x raised to the power of y. Method: Powers of 2 are removed from x, then left-to-right binary exponentiation is used. Memory allocation is minimized: at most one temporary BigUint is used."
  },
  "phobos/std/internal/math/biguintcore/BigUint/Functions/toDecimalString.html": {
    "href": "phobos/std/internal/math/biguintcore/BigUint/Functions/toDecimalString.html",
    "title": "Overloads for - toDecimalString | Marmos Demo",
    "keywords": "Overloads for - toDecimalString Module std.internal.math.biguintcore Parent BigUint toDecimalString(frontExtraBytes) <bug: unknown> toDecimalString( int frontExtraBytes )"
  },
  "phobos/std/internal/math/biguintcore/BigUint/Functions/toHash.html": {
    "href": "phobos/std/internal/math/biguintcore/BigUint/Functions/toHash.html",
    "title": "Overloads for - toHash | Marmos Demo",
    "keywords": "Overloads for - toHash Module std.internal.math.biguintcore Parent BigUint toHash() size_t toHash( )"
  },
  "phobos/std/internal/math/biguintcore/BigUint/Functions/toHexString.html": {
    "href": "phobos/std/internal/math/biguintcore/BigUint/Functions/toHexString.html",
    "title": "Overloads for - toHexString | Marmos Demo",
    "keywords": "Overloads for - toHexString Module std.internal.math.biguintcore Parent BigUint toHexString(frontExtraBytes, separator, minPadding, padChar, letterCase) <bug: unknown> toHexString( int frontExtraBytes, char separator, int minPadding, char padChar, LetterCase letterCase ) Convert to a hex string, printing a minimum number of digits 'minPadding', allocating an additional 'frontExtraBytes' at the start of the string. Padding is done with padChar, which may be '0' or ' '. 'separator' is a digit separation character. If non-zero, it is inserted between every 8 digits. Separator characters do not contribute to the minPadding."
  },
  "phobos/std/internal/math/biguintcore/BigUint/Functions/toOctalString.html": {
    "href": "phobos/std/internal/math/biguintcore/BigUint/Functions/toOctalString.html",
    "title": "Overloads for - toOctalString | Marmos Demo",
    "keywords": "Overloads for - toOctalString Module std.internal.math.biguintcore Parent BigUint toOctalString() <bug: unknown> toOctalString( ) Convert to an octal string."
  },
  "phobos/std/internal/math/biguintcore/BigUint/Functions/uintLength.html": {
    "href": "phobos/std/internal/math/biguintcore/BigUint/Functions/uintLength.html",
    "title": "Overloads for - uintLength | Marmos Demo",
    "keywords": "Overloads for - uintLength Module std.internal.math.biguintcore Parent BigUint uintLength() size_t uintLength( )"
  },
  "phobos/std/internal/math/biguintcore/BigUint/Functions/ulongLength.html": {
    "href": "phobos/std/internal/math/biguintcore/BigUint/Functions/ulongLength.html",
    "title": "Overloads for - ulongLength | Marmos Demo",
    "keywords": "Overloads for - ulongLength Module std.internal.math.biguintcore Parent BigUint ulongLength() size_t ulongLength( )"
  },
  "phobos/std/internal/math/biguintcore/Functions/add.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/add.html",
    "title": "Overloads for - add | Marmos Demo",
    "keywords": "Overloads for - add Module std.internal.math.biguintcore add(a, b) <bug: unknown> add( <bug: unknown> a, <bug: unknown> b )"
  },
  "phobos/std/internal/math/biguintcore/Functions/addAssignSimple.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/addAssignSimple.html",
    "title": "Overloads for - addAssignSimple | Marmos Demo",
    "keywords": "Overloads for - addAssignSimple Module std.internal.math.biguintcore addAssignSimple(result, right) BigDigit addAssignSimple( <bug: unknown> result, <bug: unknown> right )"
  },
  "phobos/std/internal/math/biguintcore/Functions/addInt.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/addInt.html",
    "title": "Overloads for - addInt | Marmos Demo",
    "keywords": "Overloads for - addInt Module std.internal.math.biguintcore addInt(x, y) <bug: unknown> addInt( <bug: unknown> x, ulong y ) return x + y"
  },
  "phobos/std/internal/math/biguintcore/Functions/addOrSubAssignSimple.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/addOrSubAssignSimple.html",
    "title": "Overloads for - addOrSubAssignSimple | Marmos Demo",
    "keywords": "Overloads for - addOrSubAssignSimple Module std.internal.math.biguintcore addOrSubAssignSimple(result, right, wantSub) BigDigit addOrSubAssignSimple( <bug: unknown> result, <bug: unknown> right, bool wantSub )"
  },
  "phobos/std/internal/math/biguintcore/Functions/addSimple.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/addSimple.html",
    "title": "Overloads for - addSimple | Marmos Demo",
    "keywords": "Overloads for - addSimple Module std.internal.math.biguintcore addSimple(result, left, right) uint addSimple( <bug: unknown> result, <bug: unknown> left, <bug: unknown> right )"
  },
  "phobos/std/internal/math/biguintcore/Functions/adjustRemainder.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/adjustRemainder.html",
    "title": "Overloads for - adjustRemainder | Marmos Demo",
    "keywords": "Overloads for - adjustRemainder Module std.internal.math.biguintcore adjustRemainder(quot, rem, v, k, scratch, mayOverflow) void adjustRemainder( <bug: unknown> quot, <bug: unknown> rem, <bug: unknown> v, ptrdiff_t k, <bug: unknown> scratch, bool mayOverflow )"
  },
  "phobos/std/internal/math/biguintcore/Functions/biguintFromDecimal.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/biguintFromDecimal.html",
    "title": "Overloads for - biguintFromDecimal | Marmos Demo",
    "keywords": "Overloads for - biguintFromDecimal Module std.internal.math.biguintcore biguintFromDecimal(data, s) int biguintFromDecimal( <bug: unknown> data, Range s ) Convert a decimal string into a big uint. Params data The biguint to be receive the result. Must be large enough to store the result. s The decimal string. May contain or 0 .. 9 The required length for the destination buffer is slightly less than 1 + s.length/log2(10) = 1 + s.length/3.3219. Returns the highest index of data which was used."
  },
  "phobos/std/internal/math/biguintcore/Functions/biguintToDecimal.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/biguintToDecimal.html",
    "title": "Overloads for - biguintToDecimal | Marmos Demo",
    "keywords": "Overloads for - biguintToDecimal Module std.internal.math.biguintcore biguintToDecimal(buff, data) size_t biguintToDecimal( <bug: unknown> buff, <bug: unknown> data ) Convert a big uint into a decimal string. Params data The biguint to be converted. Will be destroyed. buff The destination buffer for the decimal string. Must be large enough to store the result, including leading zeros. Will be filled backwards, starting from buff[$-1]. buff.length must be >= (data.length*32)/log2(10) = 9.63296 data.length. Returns: the lowest index of buff which was used."
  },
  "phobos/std/internal/math/biguintcore/Functions/biguintToHex.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/biguintToHex.html",
    "title": "Overloads for - biguintToHex | Marmos Demo",
    "keywords": "Overloads for - biguintToHex Module std.internal.math.biguintcore biguintToHex(buff, data, separator, letterCase) <bug: unknown> biguintToHex( <bug: unknown> buff, <bug: unknown> data, char separator, LetterCase letterCase )"
  },
  "phobos/std/internal/math/biguintcore/Functions/biguintToOctal.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/biguintToOctal.html",
    "title": "Overloads for - biguintToOctal | Marmos Demo",
    "keywords": "Overloads for - biguintToOctal Module std.internal.math.biguintcore biguintToOctal(buff, data) size_t biguintToOctal( <bug: unknown> buff, <bug: unknown> data ) Convert a big uint into an octal string. Params buff <bug: unknown> The destination buffer for the octal string. Must be large enough to store the result, including leading zeroes, which is ceil(data.length BigDigitBits / 3) characters. The buffer is filled from back to front, starting from buff[$-1] . data <bug: unknown> The biguint to be converted. Returns: The index of the leading non-zero digit in buff . Will be buff.length - 1 if the entire big uint is zero."
  },
  "phobos/std/internal/math/biguintcore/Functions/blockDivMod.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/blockDivMod.html",
    "title": "Overloads for - blockDivMod | Marmos Demo",
    "keywords": "Overloads for - blockDivMod Module std.internal.math.biguintcore blockDivMod(quotient, u, v) void blockDivMod( <bug: unknown> quotient, <bug: unknown> u, <bug: unknown> v )"
  },
  "phobos/std/internal/math/biguintcore/Functions/divModInternal.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/divModInternal.html",
    "title": "Overloads for - divModInternal | Marmos Demo",
    "keywords": "Overloads for - divModInternal Module std.internal.math.biguintcore divModInternal(quotient, remainder, u, v) void divModInternal( <bug: unknown> quotient, <bug: unknown> remainder, <bug: unknown> u, <bug: unknown> v ) if remainder is null, only calculate quotient."
  },
  "phobos/std/internal/math/biguintcore/Functions/firstNonZeroDigit.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/firstNonZeroDigit.html",
    "title": "Overloads for - firstNonZeroDigit | Marmos Demo",
    "keywords": "Overloads for - firstNonZeroDigit Module std.internal.math.biguintcore firstNonZeroDigit(x) int firstNonZeroDigit( <bug: unknown> x )"
  },
  "phobos/std/internal/math/biguintcore/Functions/getCacheLimit.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/getCacheLimit.html",
    "title": "Overloads for - getCacheLimit | Marmos Demo",
    "keywords": "Overloads for - getCacheLimit Module std.internal.math.biguintcore getCacheLimit() size_t getCacheLimit( )"
  },
  "phobos/std/internal/math/biguintcore/Functions/highestDifferentDigit.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/highestDifferentDigit.html",
    "title": "Overloads for - highestDifferentDigit | Marmos Demo",
    "keywords": "Overloads for - highestDifferentDigit Module std.internal.math.biguintcore highestDifferentDigit(left, right) size_t highestDifferentDigit( <bug: unknown> left, <bug: unknown> right )"
  },
  "phobos/std/internal/math/biguintcore/Functions/highestPowerBelowUintMax.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/highestPowerBelowUintMax.html",
    "title": "Overloads for - highestPowerBelowUintMax | Marmos Demo",
    "keywords": "Overloads for - highestPowerBelowUintMax Module std.internal.math.biguintcore highestPowerBelowUintMax(x) int highestPowerBelowUintMax( uint x )"
  },
  "phobos/std/internal/math/biguintcore/Functions/highestPowerBelowUlongMax.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/highestPowerBelowUlongMax.html",
    "title": "Overloads for - highestPowerBelowUlongMax | Marmos Demo",
    "keywords": "Overloads for - highestPowerBelowUlongMax Module std.internal.math.biguintcore highestPowerBelowUlongMax(x) int highestPowerBelowUlongMax( uint x )"
  },
  "phobos/std/internal/math/biguintcore/Functions/includeSign.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/includeSign.html",
    "title": "Overloads for - includeSign | Marmos Demo",
    "keywords": "Overloads for - includeSign Module std.internal.math.biguintcore includeSign(x, minSize, sign) <bug: unknown> includeSign( <bug: unknown> x, size_t minSize, bool sign )"
  },
  "phobos/std/internal/math/biguintcore/Functions/inplaceSub.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/inplaceSub.html",
    "title": "Overloads for - inplaceSub | Marmos Demo",
    "keywords": "Overloads for - inplaceSub Module std.internal.math.biguintcore inplaceSub(result, x, y) bool inplaceSub( <bug: unknown> result, <bug: unknown> x, <bug: unknown> y )"
  },
  "phobos/std/internal/math/biguintcore/Functions/intpow.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/intpow.html",
    "title": "Overloads for - intpow | Marmos Demo",
    "keywords": "Overloads for - intpow Module std.internal.math.biguintcore intpow(x, n) T intpow( T x, ulong n )"
  },
  "phobos/std/internal/math/biguintcore/Functions/itoaZeroPadded.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/itoaZeroPadded.html",
    "title": "Overloads for - itoaZeroPadded | Marmos Demo",
    "keywords": "Overloads for - itoaZeroPadded Module std.internal.math.biguintcore itoaZeroPadded(output, value) void itoaZeroPadded( <bug: unknown> output, uint value )"
  },
  "phobos/std/internal/math/biguintcore/Functions/karatsubaRequiredBuffSize.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/karatsubaRequiredBuffSize.html",
    "title": "Overloads for - karatsubaRequiredBuffSize | Marmos Demo",
    "keywords": "Overloads for - karatsubaRequiredBuffSize Module std.internal.math.biguintcore karatsubaRequiredBuffSize(xlen) size_t karatsubaRequiredBuffSize( size_t xlen )"
  },
  "phobos/std/internal/math/biguintcore/Functions/less.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/less.html",
    "title": "Overloads for - less | Marmos Demo",
    "keywords": "Overloads for - less Module std.internal.math.biguintcore less(x, y) bool less( <bug: unknown> x, <bug: unknown> y )"
  },
  "phobos/std/internal/math/biguintcore/Functions/mulInternal.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/mulInternal.html",
    "title": "Overloads for - mulInternal | Marmos Demo",
    "keywords": "Overloads for - mulInternal Module std.internal.math.biguintcore mulInternal(result, x, y) void mulInternal( <bug: unknown> result, <bug: unknown> x, <bug: unknown> y ) General unsigned multiply routine for bigints. Sets result = x y. The length of y must not be larger than the length of x. Different algorithms are used, depending on the lengths of x and y. TODO: \"Modern Computer Arithmetic\" suggests the OddEvenKaratsuba algorithm for the unbalanced case. (But I doubt it would be faster in practice)."
  },
  "phobos/std/internal/math/biguintcore/Functions/mulKaratsuba.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/mulKaratsuba.html",
    "title": "Overloads for - mulKaratsuba | Marmos Demo",
    "keywords": "Overloads for - mulKaratsuba Module std.internal.math.biguintcore mulKaratsuba(result, x, y, scratchbuff) void mulKaratsuba( <bug: unknown> result, <bug: unknown> x, <bug: unknown> y, <bug: unknown> scratchbuff )"
  },
  "phobos/std/internal/math/biguintcore/Functions/mulSimple.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/mulSimple.html",
    "title": "Overloads for - mulSimple | Marmos Demo",
    "keywords": "Overloads for - mulSimple Module std.internal.math.biguintcore mulSimple(result, left, right) void mulSimple( <bug: unknown> result, <bug: unknown> left, <bug: unknown> right )"
  },
  "phobos/std/internal/math/biguintcore/Functions/multibyteAddDiagonalSquares.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/multibyteAddDiagonalSquares.html",
    "title": "Overloads for - multibyteAddDiagonalSquares | Marmos Demo",
    "keywords": "Overloads for - multibyteAddDiagonalSquares Module std.internal.math.biguintcore multibyteAddDiagonalSquares(dest, src) void multibyteAddDiagonalSquares( <bug: unknown> dest, <bug: unknown> src )"
  },
  "phobos/std/internal/math/biguintcore/Functions/multibyteAddSub.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/multibyteAddSub.html",
    "title": "Overloads for - multibyteAddSub | Marmos Demo",
    "keywords": "Overloads for - multibyteAddSub Module std.internal.math.biguintcore multibyteAddSub(dest, src1, src2, carry) uint multibyteAddSub( <bug: unknown> dest, <bug: unknown> src1, <bug: unknown> src2, uint carry )"
  },
  "phobos/std/internal/math/biguintcore/Functions/multibyteDivAssign.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/multibyteDivAssign.html",
    "title": "Overloads for - multibyteDivAssign | Marmos Demo",
    "keywords": "Overloads for - multibyteDivAssign Module std.internal.math.biguintcore multibyteDivAssign(dest, divisor, overflow) uint multibyteDivAssign( <bug: unknown> dest, uint divisor, uint overflow )"
  },
  "phobos/std/internal/math/biguintcore/Functions/multibyteIncrementAssign.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/multibyteIncrementAssign.html",
    "title": "Overloads for - multibyteIncrementAssign | Marmos Demo",
    "keywords": "Overloads for - multibyteIncrementAssign Module std.internal.math.biguintcore multibyteIncrementAssign(dest, carry) uint multibyteIncrementAssign( <bug: unknown> dest, uint carry )"
  },
  "phobos/std/internal/math/biguintcore/Functions/multibyteMul.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/multibyteMul.html",
    "title": "Overloads for - multibyteMul | Marmos Demo",
    "keywords": "Overloads for - multibyteMul Module std.internal.math.biguintcore multibyteMul(dest, src, multiplier, carry) uint multibyteMul( <bug: unknown> dest, <bug: unknown> src, uint multiplier, uint carry )"
  },
  "phobos/std/internal/math/biguintcore/Functions/multibyteMulAdd.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/multibyteMulAdd.html",
    "title": "Overloads for - multibyteMulAdd | Marmos Demo",
    "keywords": "Overloads for - multibyteMulAdd Module std.internal.math.biguintcore multibyteMulAdd(dest, src, multiplier, carry) uint multibyteMulAdd( <bug: unknown> dest, <bug: unknown> src, uint multiplier, uint carry )"
  },
  "phobos/std/internal/math/biguintcore/Functions/multibyteMultiplyAccumulate.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/multibyteMultiplyAccumulate.html",
    "title": "Overloads for - multibyteMultiplyAccumulate | Marmos Demo",
    "keywords": "Overloads for - multibyteMultiplyAccumulate Module std.internal.math.biguintcore multibyteMultiplyAccumulate(dest, left, right) void multibyteMultiplyAccumulate( <bug: unknown> dest, <bug: unknown> left, <bug: unknown> right )"
  },
  "phobos/std/internal/math/biguintcore/Functions/multibyteShl.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/multibyteShl.html",
    "title": "Overloads for - multibyteShl | Marmos Demo",
    "keywords": "Overloads for - multibyteShl Module std.internal.math.biguintcore multibyteShl(dest, src, numbits) uint multibyteShl( <bug: unknown> dest, <bug: unknown> src, uint numbits )"
  },
  "phobos/std/internal/math/biguintcore/Functions/multibyteShr.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/multibyteShr.html",
    "title": "Overloads for - multibyteShr | Marmos Demo",
    "keywords": "Overloads for - multibyteShr Module std.internal.math.biguintcore multibyteShr(dest, src, numbits) void multibyteShr( <bug: unknown> dest, <bug: unknown> src, uint numbits )"
  },
  "phobos/std/internal/math/biguintcore/Functions/multibyteSquare.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/multibyteSquare.html",
    "title": "Overloads for - multibyteSquare | Marmos Demo",
    "keywords": "Overloads for - multibyteSquare Module std.internal.math.biguintcore multibyteSquare(result, x) void multibyteSquare( <bug: unknown> result, <bug: unknown> x )"
  },
  "phobos/std/internal/math/biguintcore/Functions/multibyteTriangleAccumulate.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/multibyteTriangleAccumulate.html",
    "title": "Overloads for - multibyteTriangleAccumulate | Marmos Demo",
    "keywords": "Overloads for - multibyteTriangleAccumulate Module std.internal.math.biguintcore multibyteTriangleAccumulate(dest, x) void multibyteTriangleAccumulate( <bug: unknown> dest, <bug: unknown> x )"
  },
  "phobos/std/internal/math/biguintcore/Functions/recursiveDivMod.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/recursiveDivMod.html",
    "title": "Overloads for - recursiveDivMod | Marmos Demo",
    "keywords": "Overloads for - recursiveDivMod Module std.internal.math.biguintcore recursiveDivMod(quotient, u, v, scratch, mayOverflow) void recursiveDivMod( <bug: unknown> quotient, <bug: unknown> u, <bug: unknown> v, <bug: unknown> scratch, bool mayOverflow )"
  },
  "phobos/std/internal/math/biguintcore/Functions/removeLeadingZeros.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/removeLeadingZeros.html",
    "title": "Overloads for - removeLeadingZeros | Marmos Demo",
    "keywords": "Overloads for - removeLeadingZeros Module std.internal.math.biguintcore removeLeadingZeros(x) <bug: unknown> removeLeadingZeros( <bug: unknown> x )"
  },
  "phobos/std/internal/math/biguintcore/Functions/schoolbookDivMod.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/schoolbookDivMod.html",
    "title": "Overloads for - schoolbookDivMod | Marmos Demo",
    "keywords": "Overloads for - schoolbookDivMod Module std.internal.math.biguintcore schoolbookDivMod(quotient, u, v) void schoolbookDivMod( <bug: unknown> quotient, <bug: unknown> u, <bug: unknown> v )"
  },
  "phobos/std/internal/math/biguintcore/Functions/slowHighestPowerBelowUintMax.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/slowHighestPowerBelowUintMax.html",
    "title": "Overloads for - slowHighestPowerBelowUintMax | Marmos Demo",
    "keywords": "Overloads for - slowHighestPowerBelowUintMax Module std.internal.math.biguintcore slowHighestPowerBelowUintMax(x) int slowHighestPowerBelowUintMax( uint x )"
  },
  "phobos/std/internal/math/biguintcore/Functions/squareInternal.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/squareInternal.html",
    "title": "Overloads for - squareInternal | Marmos Demo",
    "keywords": "Overloads for - squareInternal Module std.internal.math.biguintcore squareInternal(result, x) void squareInternal( <bug: unknown> result, <bug: unknown> x ) General unsigned squaring routine for BigInts. Sets result = x*x. NOTE: If the highest half-digit of x is zero, the highest digit of result will also be zero."
  },
  "phobos/std/internal/math/biguintcore/Functions/squareKaratsuba.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/squareKaratsuba.html",
    "title": "Overloads for - squareKaratsuba | Marmos Demo",
    "keywords": "Overloads for - squareKaratsuba Module std.internal.math.biguintcore squareKaratsuba(result, x, scratchbuff) void squareKaratsuba( <bug: unknown> result, <bug: unknown> x, <bug: unknown> scratchbuff )"
  },
  "phobos/std/internal/math/biguintcore/Functions/squareSimple.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/squareSimple.html",
    "title": "Overloads for - squareSimple | Marmos Demo",
    "keywords": "Overloads for - squareSimple Module std.internal.math.biguintcore squareSimple(result, x) void squareSimple( <bug: unknown> result, <bug: unknown> x )"
  },
  "phobos/std/internal/math/biguintcore/Functions/sub.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/sub.html",
    "title": "Overloads for - sub | Marmos Demo",
    "keywords": "Overloads for - sub Module std.internal.math.biguintcore sub(x, y, negative) <bug: unknown> sub( <bug: unknown> x, <bug: unknown> y, <bug: unknown> negative )"
  },
  "phobos/std/internal/math/biguintcore/Functions/subAssignSimple.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/subAssignSimple.html",
    "title": "Overloads for - subAssignSimple | Marmos Demo",
    "keywords": "Overloads for - subAssignSimple Module std.internal.math.biguintcore subAssignSimple(result, right) BigDigit subAssignSimple( <bug: unknown> result, <bug: unknown> right )"
  },
  "phobos/std/internal/math/biguintcore/Functions/subInt.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/subInt.html",
    "title": "Overloads for - subInt | Marmos Demo",
    "keywords": "Overloads for - subInt Module std.internal.math.biguintcore subInt(x, y) <bug: unknown> subInt( <bug: unknown> x, ulong y ) Return x - y. x must be greater than y."
  },
  "phobos/std/internal/math/biguintcore/Functions/toHexZeroPadded.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/toHexZeroPadded.html",
    "title": "Overloads for - toHexZeroPadded | Marmos Demo",
    "keywords": "Overloads for - toHexZeroPadded Module std.internal.math.biguintcore toHexZeroPadded(output, value, letterCase) void toHexZeroPadded( <bug: unknown> output, uint value, LetterCase letterCase )"
  },
  "phobos/std/internal/math/biguintcore/Functions/twosComplement.html": {
    "href": "phobos/std/internal/math/biguintcore/Functions/twosComplement.html",
    "title": "Overloads for - twosComplement | Marmos Demo",
    "keywords": "Overloads for - twosComplement Module std.internal.math.biguintcore twosComplement(x, result) void twosComplement( <bug: unknown> x, <bug: unknown> result )"
  },
  "phobos/std/internal/math/biguintcore/Overview.html": {
    "href": "phobos/std/internal/math/biguintcore/Overview.html",
    "title": "Module - std.internal.math.biguintcore | Marmos Demo",
    "keywords": "Module - std.internal.math.biguintcore About Fundamental operations for arbitrary-precision arithmetic These functions are for internal use only. Aliases Name Description BIGHALFDIGIT multibyteAdd multibyteSub Structs Name Description BigUint BigUint performs memory management and wraps the low-level calls. Functions Name Description add addAssignSimple addInt return x + y addOrSubAssignSimple addSimple adjustRemainder biguintFromDecimal Convert a decimal string into a big uint. biguintToDecimal Convert a big uint into a decimal string. biguintToHex biguintToOctal Convert a big uint into an octal string. blockDivMod divModInternal if remainder is null, only calculate quotient. firstNonZeroDigit getCacheLimit highestDifferentDigit highestPowerBelowUintMax highestPowerBelowUlongMax includeSign inplaceSub intpow itoaZeroPadded karatsubaRequiredBuffSize less mulInternal General unsigned multiply routine for bigints. Sets result = x y. mulKaratsuba mulSimple multibyteAddDiagonalSquares multibyteAddSub multibyteDivAssign multibyteIncrementAssign multibyteMul multibyteMulAdd multibyteMultiplyAccumulate multibyteShl multibyteShr multibyteSquare multibyteTriangleAccumulate recursiveDivMod removeLeadingZeros schoolbookDivMod slowHighestPowerBelowUintMax squareInternal General unsigned squaring routine for BigInts. Sets result = x*x. NOTE: If the highest half-digit of x is zero, the highest digit of result will also be zero. squareKaratsuba squareSimple sub subAssignSimple subInt Return x - y. x must be greater than y. toHexZeroPadded twosComplement Variables Name Description BigDigitBits FASTDIVLIMIT maxBigDigits ONE TEN TWO ZERO"
  },
  "phobos/std/internal/math/biguintcore/Structs/BigUint.html": {
    "href": "phobos/std/internal/math/biguintcore/Structs/BigUint.html",
    "title": "Struct - BigUint | Marmos Demo",
    "keywords": "Struct - BigUint Module std.internal.math.biguintcore public struct BigUint { // BigUint addOrSub( BigUint x, BigUint y, bool wantSub, bool sign ) static; // BigUint div( BigUint x, BigUint y ) static; // void divMod( BigUint x, BigUint y, BigUint quotient, BigUint remainder ) static; // bool isZero( ) ; // BigUint mod( BigUint x, BigUint y ) static; // BigUint mul( BigUint x, BigUint y ) static; // size_t numBytes( ) ; // uint peekUint( size_t n ) ; // ulong peekUlong( size_t n ) ; // Return a BigUint which is x raised to the power of y. Method: Powers of 2 are removed from x, then left-to-right binary exponentiation is used. Memory allocation is minimized: at most one temporary BigUint is used. BigUint pow( BigUint x, ulong y ) static; // <bug: unknown> toDecimalString( int frontExtraBytes ) ; // size_t toHash( ) ; // Convert to a hex string, printing a minimum number of digits 'minPadding', allocating an additional 'frontExtraBytes' at the start of the string. Padding is done with padChar, which may be '0' or ' '. 'separator' is a digit separation character. If non-zero, it is inserted between every 8 digits. Separator characters do not contribute to the minPadding. <bug: unknown> toHexString( int frontExtraBytes, char separator, int minPadding, char padChar, LetterCase letterCase ) ; // Convert to an octal string. <bug: unknown> toOctalString( ) ; // size_t uintLength( ) ; // size_t ulongLength( ) ; // <bug: unknown> data; // __enumMember trustedAssumeUnique; } About BigUint performs memory management and wraps the low-level calls. Functions Name Description addOrSub div divMod isZero mod mul numBytes peekUint peekUlong pow Return a BigUint which is x raised to the power of y. Method: Powers of 2 are removed from x, then left-to-right binary exponentiation is used. Memory allocation is minimized: at most one temporary BigUint is used. toDecimalString toHash toHexString Convert to a hex string, printing a minimum number of digits 'minPadding', allocating an additional 'frontExtraBytes' at the start of the string. Padding is done with padChar, which may be '0' or ' '. 'separator' is a digit separation character. If non-zero, it is inserted between every 8 digits. Separator characters do not contribute to the minPadding. toOctalString Convert to an octal string. uintLength ulongLength Variables Name Description data trustedAssumeUnique"
  },
  "phobos/std/internal/math/biguintnoasm/Functions/multibyteAddDiagonalSquares.html": {
    "href": "phobos/std/internal/math/biguintnoasm/Functions/multibyteAddDiagonalSquares.html",
    "title": "Overloads for - multibyteAddDiagonalSquares | Marmos Demo",
    "keywords": "Overloads for - multibyteAddDiagonalSquares Module std.internal.math.biguintnoasm multibyteAddDiagonalSquares(dest, src) void multibyteAddDiagonalSquares( <bug: unknown> dest, <bug: unknown> src )"
  },
  "phobos/std/internal/math/biguintnoasm/Functions/multibyteAddSub.html": {
    "href": "phobos/std/internal/math/biguintnoasm/Functions/multibyteAddSub.html",
    "title": "Overloads for - multibyteAddSub | Marmos Demo",
    "keywords": "Overloads for - multibyteAddSub Module std.internal.math.biguintnoasm multibyteAddSub(dest, src1, src2, carry) uint multibyteAddSub( <bug: unknown> dest, <bug: unknown> src1, <bug: unknown> src2, uint carry ) Multi-byte addition or subtraction dest[] = src1[] + src2[] + carry (0 or 1). or dest[] = src1[] - src2[] - carry (0 or 1). Returns carry or borrow (0 or 1). Set op == '+' for addition, '-' for subtraction."
  },
  "phobos/std/internal/math/biguintnoasm/Functions/multibyteDivAssign.html": {
    "href": "phobos/std/internal/math/biguintnoasm/Functions/multibyteDivAssign.html",
    "title": "Overloads for - multibyteDivAssign | Marmos Demo",
    "keywords": "Overloads for - multibyteDivAssign Module std.internal.math.biguintnoasm multibyteDivAssign(dest, divisor, overflow) uint multibyteDivAssign( <bug: unknown> dest, uint divisor, uint overflow ) dest[] /= divisor. overflow is the initial remainder, and must be in the range 0 .. divisor-1."
  },
  "phobos/std/internal/math/biguintnoasm/Functions/multibyteIncrementAssign.html": {
    "href": "phobos/std/internal/math/biguintnoasm/Functions/multibyteIncrementAssign.html",
    "title": "Overloads for - multibyteIncrementAssign | Marmos Demo",
    "keywords": "Overloads for - multibyteIncrementAssign Module std.internal.math.biguintnoasm multibyteIncrementAssign(dest, carry) uint multibyteIncrementAssign( <bug: unknown> dest, uint carry ) dest[] += carry, or dest[] -= carry. op must be '+' or '-' Returns final carry or borrow (0 or 1)"
  },
  "phobos/std/internal/math/biguintnoasm/Functions/multibyteMul.html": {
    "href": "phobos/std/internal/math/biguintnoasm/Functions/multibyteMul.html",
    "title": "Overloads for - multibyteMul | Marmos Demo",
    "keywords": "Overloads for - multibyteMul Module std.internal.math.biguintnoasm multibyteMul(dest, src, multiplier, carry) uint multibyteMul( <bug: unknown> dest, <bug: unknown> src, uint multiplier, uint carry ) dest[] = src[] multiplier + carry. Returns carry."
  },
  "phobos/std/internal/math/biguintnoasm/Functions/multibyteMulAdd.html": {
    "href": "phobos/std/internal/math/biguintnoasm/Functions/multibyteMulAdd.html",
    "title": "Overloads for - multibyteMulAdd | Marmos Demo",
    "keywords": "Overloads for - multibyteMulAdd Module std.internal.math.biguintnoasm multibyteMulAdd(dest, src, multiplier, carry) uint multibyteMulAdd( <bug: unknown> dest, <bug: unknown> src, uint multiplier, uint carry ) dest[] += src[] multiplier + carry(0 .. FFFF_FFFF). Returns carry out of MSB (0 .. FFFF_FFFF)."
  },
  "phobos/std/internal/math/biguintnoasm/Functions/multibyteMultiplyAccumulate.html": {
    "href": "phobos/std/internal/math/biguintnoasm/Functions/multibyteMultiplyAccumulate.html",
    "title": "Overloads for - multibyteMultiplyAccumulate | Marmos Demo",
    "keywords": "Overloads for - multibyteMultiplyAccumulate Module std.internal.math.biguintnoasm multibyteMultiplyAccumulate(dest, left, right) void multibyteMultiplyAccumulate( <bug: unknown> dest, <bug: unknown> left, <bug: unknown> right ) Sets result = result[0 .. left.length] + left right It is defined in this way to allow cache-efficient multiplication. This function is equivalent to: ---- for (size_t i = 0; i< right.length; ++i) { dest[left.length + i] = multibyteMulAdd(dest[i .. left.length+i], left, right[i], 0); } ----"
  },
  "phobos/std/internal/math/biguintnoasm/Functions/multibyteShl.html": {
    "href": "phobos/std/internal/math/biguintnoasm/Functions/multibyteShl.html",
    "title": "Overloads for - multibyteShl | Marmos Demo",
    "keywords": "Overloads for - multibyteShl Module std.internal.math.biguintnoasm multibyteShl(dest, src, numbits) uint multibyteShl( <bug: unknown> dest, <bug: unknown> src, uint numbits ) dest[] = src[] << numbits numbits must be in the range 1 .. 31"
  },
  "phobos/std/internal/math/biguintnoasm/Functions/multibyteShr.html": {
    "href": "phobos/std/internal/math/biguintnoasm/Functions/multibyteShr.html",
    "title": "Overloads for - multibyteShr | Marmos Demo",
    "keywords": "Overloads for - multibyteShr Module std.internal.math.biguintnoasm multibyteShr(dest, src, numbits) void multibyteShr( <bug: unknown> dest, <bug: unknown> src, uint numbits ) dest[] = src[] >> numbits numbits must be in the range 1 .. 31"
  },
  "phobos/std/internal/math/biguintnoasm/Functions/multibyteSquare.html": {
    "href": "phobos/std/internal/math/biguintnoasm/Functions/multibyteSquare.html",
    "title": "Overloads for - multibyteSquare | Marmos Demo",
    "keywords": "Overloads for - multibyteSquare Module std.internal.math.biguintnoasm multibyteSquare(result, x) void multibyteSquare( <bug: unknown> result, <bug: unknown> x )"
  },
  "phobos/std/internal/math/biguintnoasm/Functions/multibyteTriangleAccumulate.html": {
    "href": "phobos/std/internal/math/biguintnoasm/Functions/multibyteTriangleAccumulate.html",
    "title": "Overloads for - multibyteTriangleAccumulate | Marmos Demo",
    "keywords": "Overloads for - multibyteTriangleAccumulate Module std.internal.math.biguintnoasm multibyteTriangleAccumulate(dest, x) void multibyteTriangleAccumulate( <bug: unknown> dest, <bug: unknown> x )"
  },
  "phobos/std/internal/math/biguintnoasm/Overview.html": {
    "href": "phobos/std/internal/math/biguintnoasm/Overview.html",
    "title": "Module - std.internal.math.biguintnoasm | Marmos Demo",
    "keywords": "Module - std.internal.math.biguintnoasm About Arbitrary precision arithmetic ('bignum') for processors with no asm support All functions operate on arrays of uints, stored LSB first. If there is a destination array, it will be the first parameter. Currently, all of these functions are subject to change, and are intended for internal use only. This module is intended only to assist development of high-speed routines on currently unsupported processors. The X86 asm version is about 30 times faster than the D version (DMD). Aliases Name Description BigDigit Functions Name Description multibyteAddDiagonalSquares multibyteAddSub Multi-byte addition or subtraction dest[] = src1[] + src2[] + carry (0 or 1). or dest[] = src1[] - src2[] - carry (0 or 1). Returns carry or borrow (0 or 1). Set op == '+' for addition, '-' for subtraction. multibyteDivAssign dest[] /= divisor. overflow is the initial remainder, and must be in the range 0 .. divisor-1. multibyteIncrementAssign dest[] += carry, or dest[] -= carry. op must be '+' or '-' Returns final carry or borrow (0 or 1) multibyteMul dest[] = src[] multiplier + carry. Returns carry. multibyteMulAdd dest[] += src[] multiplier + carry(0 .. FFFF_FFFF). Returns carry out of MSB (0 .. FFFF_FFFF). multibyteMultiplyAccumulate Sets result = result[0 .. left.length] + left right multibyteShl dest[] = src[] << numbits numbits must be in the range 1 .. 31 multibyteShr dest[] = src[] >> numbits numbits must be in the range 1 .. 31 multibyteSquare multibyteTriangleAccumulate Variables Name Description KARATSUBALIMIT KARATSUBASQUARELIMIT"
  },
  "phobos/std/internal/math/biguintx86/Functions/asmMulAdd_enter_odd.html": {
    "href": "phobos/std/internal/math/biguintx86/Functions/asmMulAdd_enter_odd.html",
    "title": "Overloads for - asmMulAdd_enter_odd | Marmos Demo",
    "keywords": "Overloads for - asmMulAdd_enter_odd Module std.internal.math.biguintx86 asmMulAdd_enter_odd(OP, M_ADDRESS) string asmMulAdd_enter_odd( string OP, string M_ADDRESS )"
  },
  "phobos/std/internal/math/biguintx86/Functions/asmMulAdd_innerloop.html": {
    "href": "phobos/std/internal/math/biguintx86/Functions/asmMulAdd_innerloop.html",
    "title": "Overloads for - asmMulAdd_innerloop | Marmos Demo",
    "keywords": "Overloads for - asmMulAdd_innerloop Module std.internal.math.biguintx86 asmMulAdd_innerloop(OP, M_ADDRESS) string asmMulAdd_innerloop( string OP, string M_ADDRESS )"
  },
  "phobos/std/internal/math/biguintx86/Functions/clock.html": {
    "href": "phobos/std/internal/math/biguintx86/Functions/clock.html",
    "title": "Overloads for - clock | Marmos Demo",
    "keywords": "Overloads for - clock Module std.internal.math.biguintx86 clock() int clock( )"
  },
  "phobos/std/internal/math/biguintx86/Functions/indexedLoopUnroll.html": {
    "href": "phobos/std/internal/math/biguintx86/Functions/indexedLoopUnroll.html",
    "title": "Overloads for - indexedLoopUnroll | Marmos Demo",
    "keywords": "Overloads for - indexedLoopUnroll Module std.internal.math.biguintx86 indexedLoopUnroll(n, s) string indexedLoopUnroll( int n, string s )"
  },
  "phobos/std/internal/math/biguintx86/Functions/multibyteAddDiagonalSquares.html": {
    "href": "phobos/std/internal/math/biguintx86/Functions/multibyteAddDiagonalSquares.html",
    "title": "Overloads for - multibyteAddDiagonalSquares | Marmos Demo",
    "keywords": "Overloads for - multibyteAddDiagonalSquares Module std.internal.math.biguintx86 multibyteAddDiagonalSquares(dest, src) void multibyteAddDiagonalSquares( <bug: unknown> dest, <bug: unknown> src )"
  },
  "phobos/std/internal/math/biguintx86/Functions/multibyteAddSub.html": {
    "href": "phobos/std/internal/math/biguintx86/Functions/multibyteAddSub.html",
    "title": "Overloads for - multibyteAddSub | Marmos Demo",
    "keywords": "Overloads for - multibyteAddSub Module std.internal.math.biguintx86 multibyteAddSub(dest, src1, src2, carry) uint multibyteAddSub( <bug: unknown> dest, <bug: unknown> src1, <bug: unknown> src2, uint carry ) Multi-byte addition or subtraction dest[#] = src1[#] + src2[#] + carry (0 or 1). or dest[#] = src1[#] - src2[#] - carry (0 or 1). Returns carry or borrow (0 or 1). Set op == '+' for addition, '-' for subtraction."
  },
  "phobos/std/internal/math/biguintx86/Functions/multibyteDivAssign.html": {
    "href": "phobos/std/internal/math/biguintx86/Functions/multibyteDivAssign.html",
    "title": "Overloads for - multibyteDivAssign | Marmos Demo",
    "keywords": "Overloads for - multibyteDivAssign Module std.internal.math.biguintx86 multibyteDivAssign(dest, divisor, overflow) uint multibyteDivAssign( <bug: unknown> dest, uint divisor, uint overflow ) dest[#] /= divisor. overflow is the initial remainder, and must be in the range 0 .. divisor-1. divisor must not be a power of 2 (use right shift for that case; A division by zero will occur if divisor is a power of 2). Returns the final remainder Based on public domain code by Eric Bainville. (http://www.bealto.com/) Used with permission."
  },
  "phobos/std/internal/math/biguintx86/Functions/multibyteIncrementAssign.html": {
    "href": "phobos/std/internal/math/biguintx86/Functions/multibyteIncrementAssign.html",
    "title": "Overloads for - multibyteIncrementAssign | Marmos Demo",
    "keywords": "Overloads for - multibyteIncrementAssign Module std.internal.math.biguintx86 multibyteIncrementAssign(dest, carry) uint multibyteIncrementAssign( <bug: unknown> dest, uint carry ) dest[#] += carry, or dest[#] -= carry. op must be '+' or '-' Returns final carry or borrow (0 or 1)"
  },
  "phobos/std/internal/math/biguintx86/Functions/multibyteMul.html": {
    "href": "phobos/std/internal/math/biguintx86/Functions/multibyteMul.html",
    "title": "Overloads for - multibyteMul | Marmos Demo",
    "keywords": "Overloads for - multibyteMul Module std.internal.math.biguintx86 multibyteMul(dest, src, multiplier, carry) uint multibyteMul( <bug: unknown> dest, <bug: unknown> src, uint multiplier, uint carry ) dest[#] = src[#] multiplier + carry. Returns carry."
  },
  "phobos/std/internal/math/biguintx86/Functions/multibyteMulAdd.html": {
    "href": "phobos/std/internal/math/biguintx86/Functions/multibyteMulAdd.html",
    "title": "Overloads for - multibyteMulAdd | Marmos Demo",
    "keywords": "Overloads for - multibyteMulAdd Module std.internal.math.biguintx86 multibyteMulAdd(dest, src, multiplier, carry) uint multibyteMulAdd( <bug: unknown> dest, <bug: unknown> src, uint multiplier, uint carry ) dest[#] += src[#] multiplier OP carry(0 .. FFFF_FFFF). where op == '+' or '-' Returns carry out of MSB (0 .. FFFF_FFFF)."
  },
  "phobos/std/internal/math/biguintx86/Functions/multibyteMultiplyAccumulate.html": {
    "href": "phobos/std/internal/math/biguintx86/Functions/multibyteMultiplyAccumulate.html",
    "title": "Overloads for - multibyteMultiplyAccumulate | Marmos Demo",
    "keywords": "Overloads for - multibyteMultiplyAccumulate Module std.internal.math.biguintx86 multibyteMultiplyAccumulate(dest, left, right) void multibyteMultiplyAccumulate( <bug: unknown> dest, <bug: unknown> left, <bug: unknown> right ) Sets result[#] = result[0 .. left.length] + left[#] right[#] It is defined in this way to allow cache-efficient multiplication. This function is equivalent to: ---- for (int i = 0; i< right.length; ++i) { dest[left.length + i] = multibyteMulAdd(dest[i .. left.length+i], left, right[i], 0); } ----"
  },
  "phobos/std/internal/math/biguintx86/Functions/multibyteShl.html": {
    "href": "phobos/std/internal/math/biguintx86/Functions/multibyteShl.html",
    "title": "Overloads for - multibyteShl | Marmos Demo",
    "keywords": "Overloads for - multibyteShl Module std.internal.math.biguintx86 multibyteShl(dest, src, numbits) uint multibyteShl( <bug: unknown> dest, <bug: unknown> src, uint numbits ) dest[#] = src[#] >> numbits numbits must be in the range 1 .. 31 This version uses MMX."
  },
  "phobos/std/internal/math/biguintx86/Functions/multibyteShlNoMMX.html": {
    "href": "phobos/std/internal/math/biguintx86/Functions/multibyteShlNoMMX.html",
    "title": "Overloads for - multibyteShlNoMMX | Marmos Demo",
    "keywords": "Overloads for - multibyteShlNoMMX Module std.internal.math.biguintx86 multibyteShlNoMMX(dest, src, numbits) uint multibyteShlNoMMX( <bug: unknown> dest, <bug: unknown> src, uint numbits ) dest[#] = src[#] << numbits numbits must be in the range 1 .. 31 Returns the overflow"
  },
  "phobos/std/internal/math/biguintx86/Functions/multibyteShr.html": {
    "href": "phobos/std/internal/math/biguintx86/Functions/multibyteShr.html",
    "title": "Overloads for - multibyteShr | Marmos Demo",
    "keywords": "Overloads for - multibyteShr Module std.internal.math.biguintx86 multibyteShr(dest, src, numbits) void multibyteShr( <bug: unknown> dest, <bug: unknown> src, uint numbits )"
  },
  "phobos/std/internal/math/biguintx86/Functions/multibyteShrNoMMX.html": {
    "href": "phobos/std/internal/math/biguintx86/Functions/multibyteShrNoMMX.html",
    "title": "Overloads for - multibyteShrNoMMX | Marmos Demo",
    "keywords": "Overloads for - multibyteShrNoMMX Module std.internal.math.biguintx86 multibyteShrNoMMX(dest, src, numbits) void multibyteShrNoMMX( <bug: unknown> dest, <bug: unknown> src, uint numbits ) dest[#] = src[#] >> numbits numbits must be in the range 1 .. 31"
  },
  "phobos/std/internal/math/biguintx86/Functions/multibyteSquare.html": {
    "href": "phobos/std/internal/math/biguintx86/Functions/multibyteSquare.html",
    "title": "Overloads for - multibyteSquare | Marmos Demo",
    "keywords": "Overloads for - multibyteSquare Module std.internal.math.biguintx86 multibyteSquare(result, x) void multibyteSquare( <bug: unknown> result, <bug: unknown> x )"
  },
  "phobos/std/internal/math/biguintx86/Functions/multibyteTriangleAccumulateAsm.html": {
    "href": "phobos/std/internal/math/biguintx86/Functions/multibyteTriangleAccumulateAsm.html",
    "title": "Overloads for - multibyteTriangleAccumulateAsm | Marmos Demo",
    "keywords": "Overloads for - multibyteTriangleAccumulateAsm Module std.internal.math.biguintx86 multibyteTriangleAccumulateAsm(dest, src) void multibyteTriangleAccumulateAsm( <bug: unknown> dest, <bug: unknown> src )"
  },
  "phobos/std/internal/math/biguintx86/Functions/multibyteTriangleAccumulateD.html": {
    "href": "phobos/std/internal/math/biguintx86/Functions/multibyteTriangleAccumulateD.html",
    "title": "Overloads for - multibyteTriangleAccumulateD | Marmos Demo",
    "keywords": "Overloads for - multibyteTriangleAccumulateD Module std.internal.math.biguintx86 multibyteTriangleAccumulateD(dest, x) void multibyteTriangleAccumulateD( <bug: unknown> dest, <bug: unknown> x )"
  },
  "phobos/std/internal/math/biguintx86/Functions/testPerformance.html": {
    "href": "phobos/std/internal/math/biguintx86/Functions/testPerformance.html",
    "title": "Overloads for - testPerformance | Marmos Demo",
    "keywords": "Overloads for - testPerformance Module std.internal.math.biguintx86 testPerformance() void testPerformance( )"
  },
  "phobos/std/internal/math/biguintx86/Overview.html": {
    "href": "phobos/std/internal/math/biguintx86/Overview.html",
    "title": "Module - std.internal.math.biguintx86 | Marmos Demo",
    "keywords": "Module - std.internal.math.biguintx86 About Optimised asm arbitrary precision arithmetic ('bignum') routines for X86 processors. All functions operate on arrays of uints, stored LSB first. If there is a destination array, it will be the first parameter. Currently, all of these functions are subject to change, and are intended for internal use only. The symbol [#] indicates an array of machine words which is to be interpreted as a multi-byte number. In simple terms, there are 3 modern x86 microarchitectures (a) the P6 family (Pentium Pro, PII, PIII, PM, Core), produced by Intel; (b) the K6, Athlon, and AMD64 families, produced by AMD; and (c) the Pentium 4, produced by Marketing. This code has been optimised for the Intel P6 family. Generally the code remains near-optimal for Intel Core2/Corei7, after translating EAX-> RAX, etc, since all these CPUs use essentially the same pipeline, and are typically limited by memory access. The code uses techniques described in Agner Fog's superb Pentium manuals available at www.agner.org. Not optimised for AMD, which can do two memory loads per cycle (Intel CPUs can only do one). Despite this, performance is superior on AMD. Performance is dreadful on P4. Timing results (cycles per int) --Intel Pentium-- --AMD-- PM P4 Core2 K7 +,- 2.25 15.6 2.25 1.5 <<,>> 2.0 6.6 2.0 5.0 (<< MMX) 1.7 5.3 1.5 1.2 5.0 15.0 4.0 4.3 mulAdd 5.7 19.0 4.9 4.0 div 30.0 32.0 32.0 22.4 mulAcc(32) 6.5 20.0 5.4 4.9 mulAcc(32) is multiplyAccumulate() for a 32*32 multiply. Thus it includes function call overhead. The timing for Div is quite unpredictable, but it's probably too slow to be useful. On 64-bit processors, these times should halve if run in 64-bit mode, except for the MMX functions. Aliases Name Description BigDigit Functions Name Description asmMulAdd_enter_odd asmMulAdd_innerloop clock indexedLoopUnroll multibyteAddDiagonalSquares multibyteAddSub Multi-byte addition or subtraction dest[#] = src1[#] + src2[#] + carry (0 or 1). or dest[#] = src1[#] - src2[#] - carry (0 or 1). Returns carry or borrow (0 or 1). Set op == '+' for addition, '-' for subtraction. multibyteDivAssign dest[#] /= divisor. overflow is the initial remainder, and must be in the range 0 .. divisor-1. divisor must not be a power of 2 (use right shift for that case; A division by zero will occur if divisor is a power of 2). Returns the final remainder multibyteIncrementAssign dest[#] += carry, or dest[#] -= carry. op must be '+' or '-' Returns final carry or borrow (0 or 1) multibyteMul dest[#] = src[#] multiplier + carry. Returns carry. multibyteMulAdd dest[#] += src[#] multiplier OP carry(0 .. FFFF_FFFF). where op == '+' or '-' Returns carry out of MSB (0 .. FFFF_FFFF). multibyteMultiplyAccumulate Sets result[#] = result[0 .. left.length] + left[#] right[#] multibyteShl dest[#] = src[#] >> numbits numbits must be in the range 1 .. 31 This version uses MMX. multibyteShlNoMMX dest[#] = src[#] << numbits numbits must be in the range 1 .. 31 Returns the overflow multibyteShr multibyteShrNoMMX dest[#] = src[#] >> numbits numbits must be in the range 1 .. 31 multibyteSquare multibyteTriangleAccumulateAsm multibyteTriangleAccumulateD testPerformance Variables Name Description X1 Y1 Z1"
  },
  "phobos/std/internal/math/errorfunction/Functions/erf.html": {
    "href": "phobos/std/internal/math/errorfunction/Functions/erf.html",
    "title": "Overloads for - erf | Marmos Demo",
    "keywords": "Overloads for - erf Module std.internal.math.errorfunction erf(x) real erf( real x ) Error function The integral is erf(x) = 2/ $(SQRT)(π) $(INTEGRAL 0, x) exp( - $(POWER t, 2)) dt The magnitude of x is limited to about 106.56 for IEEE 80-bit arithmetic; 1 or -1 is returned outside this range. For 0 <= |x| < 1, a rational polynomials are used; otherwise erf(x) = 1 - erfc(x). ACCURACY: Relative error: arithmetic domain # trials peak rms IEEE 0,1 50000 2.0e-19 5.7e-20"
  },
  "phobos/std/internal/math/errorfunction/Functions/erfc.html": {
    "href": "phobos/std/internal/math/errorfunction/Functions/erfc.html",
    "title": "Overloads for - erfc | Marmos Demo",
    "keywords": "Overloads for - erfc Module std.internal.math.errorfunction erfc(a) real erfc( real a ) Complementary error function erfc(x) = 1 - erf(x), and has high relative accuracy for values of x far from zero. (For values near zero, use erf(x)). 1 - erf(x) = 2/ $(SQRT)(π) $(INTEGRAL x, $(INFINITY)) exp( - $(POWER t, 2)) dt For small x, erfc(x) = 1 - erf(x); otherwise rational approximations are computed. A special function expx2(x) is used to suppress error amplification in computing exp(-x^2)."
  },
  "phobos/std/internal/math/errorfunction/Functions/erfce.html": {
    "href": "phobos/std/internal/math/errorfunction/Functions/erfce.html",
    "title": "Overloads for - erfce | Marmos Demo",
    "keywords": "Overloads for - erfce Module std.internal.math.errorfunction erfce(x) real erfce( real x )"
  },
  "phobos/std/internal/math/errorfunction/Functions/expx2.html": {
    "href": "phobos/std/internal/math/errorfunction/Functions/expx2.html",
    "title": "Overloads for - expx2 | Marmos Demo",
    "keywords": "Overloads for - expx2 Module std.internal.math.errorfunction expx2(x, sign) real expx2( real x, int sign )"
  },
  "phobos/std/internal/math/errorfunction/Functions/normalDistributionImpl.html": {
    "href": "phobos/std/internal/math/errorfunction/Functions/normalDistributionImpl.html",
    "title": "Overloads for - normalDistributionImpl | Marmos Demo",
    "keywords": "Overloads for - normalDistributionImpl Module std.internal.math.errorfunction normalDistributionImpl(a) real normalDistributionImpl( real a )"
  },
  "phobos/std/internal/math/errorfunction/Functions/normalDistributionInvImpl.html": {
    "href": "phobos/std/internal/math/errorfunction/Functions/normalDistributionInvImpl.html",
    "title": "Overloads for - normalDistributionInvImpl | Marmos Demo",
    "keywords": "Overloads for - normalDistributionInvImpl Module std.internal.math.errorfunction normalDistributionInvImpl(p) real normalDistributionInvImpl( real p )"
  },
  "phobos/std/internal/math/errorfunction/Functions/rationalPoly.html": {
    "href": "phobos/std/internal/math/errorfunction/Functions/rationalPoly.html",
    "title": "Overloads for - rationalPoly | Marmos Demo",
    "keywords": "Overloads for - rationalPoly Module std.internal.math.errorfunction rationalPoly(x, numerator, denominator) T rationalPoly( T x, <bug: unknown> numerator, <bug: unknown> denominator )"
  },
  "phobos/std/internal/math/errorfunction/Overview.html": {
    "href": "phobos/std/internal/math/errorfunction/Overview.html",
    "title": "Module - std.internal.math.errorfunction | Marmos Demo",
    "keywords": "Module - std.internal.math.errorfunction About Error Functions and Normal Distribution. License: $(HTTP boost.org/LICENSE_1_0.txt, Boost License 1.0). Copyright: Based on the CEPHES math library, which is Copyright (C) 1994 Stephen L. Moshier (moshier@world.std.com). Authors: Stephen L. Moshier, ported to D by Don Clugston and David Nadlinger Macros: NAN = $(RED NAN) SUP = $0 GAMMA = Γ INTEGRAL = ∫ INTEGRATE = \\((BIG &#8747;<sub>\\)(SMALL $1)$2) POWER = $1$2 BIGSUM = $(BIG Σ \\(2</sup><sub>\\)(SMALL $1)) CHOOSE = \\((BIG &#40;) <sup>\\)(SMALL \\(1)</sup><sub>\\)(SMALL $2) $(BIG )) TABLE_SV = Special Values $0 SVH = $(TR $(TH $1) $(TH $2)) SV = $(TR $(TD $1) $(TD $2)) Functions Name Description erf Error function erfc Complementary error function erfce expx2 normalDistributionImpl normalDistributionInvImpl rationalPoly Variables Name Description C13a C13b C14a C14b C15a C15b C16a C16b C17a C17b C18a C18b C19a C19b C20a C20b erfConst EXP_2 isIEEEQuadruple MAXLOG MINLOG P Q RDr1 RDr13 RDr14 RDr15 RDr16 RDr17 RDr18 RDr19 RDr2 RDr20 RDr3 RDr4 RDr5 RDr6 RDr7 RDr8 RNr1 RNr13 RNr14 RNr15 RNr16 RNr17 RNr18 RNr19 RNr2 RNr20 RNr3 RNr4 RNr5 RNr6 RNr7 RNr8 SQRT2PI TD1 TD2 TN1 TN2"
  },
  "phobos/std/internal/math/gammafunction/Functions/betaDistExpansion1.html": {
    "href": "phobos/std/internal/math/gammafunction/Functions/betaDistExpansion1.html",
    "title": "Overloads for - betaDistExpansion1 | Marmos Demo",
    "keywords": "Overloads for - betaDistExpansion1 Module std.internal.math.gammafunction betaDistExpansion1(a, b, x) real betaDistExpansion1( real a, real b, real x )"
  },
  "phobos/std/internal/math/gammafunction/Functions/betaDistExpansion2.html": {
    "href": "phobos/std/internal/math/gammafunction/Functions/betaDistExpansion2.html",
    "title": "Overloads for - betaDistExpansion2 | Marmos Demo",
    "keywords": "Overloads for - betaDistExpansion2 Module std.internal.math.gammafunction betaDistExpansion2(a, b, x) real betaDistExpansion2( real a, real b, real x )"
  },
  "phobos/std/internal/math/gammafunction/Functions/betaDistPowerSeries.html": {
    "href": "phobos/std/internal/math/gammafunction/Functions/betaDistPowerSeries.html",
    "title": "Overloads for - betaDistPowerSeries | Marmos Demo",
    "keywords": "Overloads for - betaDistPowerSeries Module std.internal.math.gammafunction betaDistPowerSeries(a, b, x) real betaDistPowerSeries( real a, real b, real x )"
  },
  "phobos/std/internal/math/gammafunction/Functions/betaIncomplete.html": {
    "href": "phobos/std/internal/math/gammafunction/Functions/betaIncomplete.html",
    "title": "Overloads for - betaIncomplete | Marmos Demo",
    "keywords": "Overloads for - betaIncomplete Module std.internal.math.gammafunction betaIncomplete(aa, bb, xx) real betaIncomplete( real aa, real bb, real xx ) Incomplete beta integral Returns incomplete beta integral of the arguments, evaluated from zero to x. The regularized incomplete beta function is defined as betaIncomplete(a, b, x) = Γ(a+b)/(Γ(a) Γ(b)) $(INTEGRATE 0, x) \\((POWER t, a-1)\\)(POWER (1-t),b-1) dt and is the same as the cumulative distribution function. The domain of definition is 0 <= x <= 1. In this implementation a and b are restricted to positive values. The integral from x to 1 may be obtained by the symmetry relation betaIncompleteCompl(a, b, x ) = betaIncomplete( b, a, 1-x ) The integral is evaluated by a continued fraction expansion or, when b*x is small, by a power series."
  },
  "phobos/std/internal/math/gammafunction/Functions/betaIncompleteInv.html": {
    "href": "phobos/std/internal/math/gammafunction/Functions/betaIncompleteInv.html",
    "title": "Overloads for - betaIncompleteInv | Marmos Demo",
    "keywords": "Overloads for - betaIncompleteInv Module std.internal.math.gammafunction betaIncompleteInv(aa, bb, yy0) real betaIncompleteInv( real aa, real bb, real yy0 ) Inverse of incomplete beta integral Given y, the function finds x such that betaIncomplete(a, b, x) == y Newton iterations or interval halving is used."
  },
  "phobos/std/internal/math/gammafunction/Functions/digamma.html": {
    "href": "phobos/std/internal/math/gammafunction/Functions/digamma.html",
    "title": "Overloads for - digamma | Marmos Demo",
    "keywords": "Overloads for - digamma Module std.internal.math.gammafunction digamma(x) real digamma( real x ) Digamma function The digamma function is the logarithmic derivative of the gamma function. digamma(x) = d/dx logGamma(x) References 1.1. Abramowitz, M., and Stegun, I. A. (1970). Handbook of mathematical functions. Dover, New York, pages 258-259, equations 6.3.6 and 6.3.18."
  },
  "phobos/std/internal/math/gammafunction/Functions/gamma.html": {
    "href": "phobos/std/internal/math/gammafunction/Functions/gamma.html",
    "title": "Overloads for - gamma | Marmos Demo",
    "keywords": "Overloads for - gamma Module std.internal.math.gammafunction gamma(x) real gamma( real x ) The Gamma function, $(GAMMA)(x) $(GAMMA)(x) is a generalisation of the factorial function to real and complex numbers. Like x!, \\((GAMMA)(x+1) = x*\\)(GAMMA)(x). Mathematically, if z.re > 0 then $(GAMMA)(z) = $(INTEGRATE 0, ∞) \\((POWER t, z-1)\\)(POWER e, -t) dt $(TABLE_SV $(SVH x, $(GAMMA)(x) ) $(SV $(NAN), $(NAN) ) $(SV ±0.0, ±∞) $(SV integer > 0, (x-1)! ) $(SV integer < 0, $(NAN) ) $(SV +∞, +∞ ) $(SV -∞, $(NAN) ) )"
  },
  "phobos/std/internal/math/gammafunction/Functions/gammaIncomplete.html": {
    "href": "phobos/std/internal/math/gammafunction/Functions/gammaIncomplete.html",
    "title": "Overloads for - gammaIncomplete | Marmos Demo",
    "keywords": "Overloads for - gammaIncomplete Module std.internal.math.gammafunction gammaIncomplete(a, x) real gammaIncomplete( real a, real x ) Incomplete gamma integral and its complement These functions are defined by gammaIncomplete = ( $(INTEGRATE 0, x) $(POWER e, -t) $(POWER t, a-1) dt )/ $(GAMMA)(a) gammaIncompleteCompl(a,x) = 1 - gammaIncomplete(a,x) = ($(INTEGRATE x, ∞) $(POWER e, -t) $(POWER t, a-1) dt )/ $(GAMMA)(a) In this implementation both arguments must be positive. The integral is evaluated by either a power series or continued fraction expansion, depending on the relative values of a and x."
  },
  "phobos/std/internal/math/gammafunction/Functions/gammaIncompleteCompl.html": {
    "href": "phobos/std/internal/math/gammafunction/Functions/gammaIncompleteCompl.html",
    "title": "Overloads for - gammaIncompleteCompl | Marmos Demo",
    "keywords": "Overloads for - gammaIncompleteCompl Module std.internal.math.gammafunction gammaIncompleteCompl(a, x) real gammaIncompleteCompl( real a, real x ) ditto"
  },
  "phobos/std/internal/math/gammafunction/Functions/gammaIncompleteComplInv.html": {
    "href": "phobos/std/internal/math/gammafunction/Functions/gammaIncompleteComplInv.html",
    "title": "Overloads for - gammaIncompleteComplInv | Marmos Demo",
    "keywords": "Overloads for - gammaIncompleteComplInv Module std.internal.math.gammafunction gammaIncompleteComplInv(a, p) real gammaIncompleteComplInv( real a, real p ) Inverse of complemented incomplete gamma integral Given a and p, the function finds x such that gammaIncompleteCompl( a, x ) = p. Starting with the approximate value x = a $(POWER t, 3), where t = 1 - d - normalDistributionInv(p) sqrt(d), and d = 1/9a, the routine performs up to 10 Newton iterations to find the root of incompleteGammaCompl(a,x) - p = 0."
  },
  "phobos/std/internal/math/gammafunction/Functions/gammaStirling.html": {
    "href": "phobos/std/internal/math/gammafunction/Functions/gammaStirling.html",
    "title": "Overloads for - gammaStirling | Marmos Demo",
    "keywords": "Overloads for - gammaStirling Module std.internal.math.gammafunction gammaStirling(x) real gammaStirling( real x )"
  },
  "phobos/std/internal/math/gammafunction/Functions/igammaTemmeLarge.html": {
    "href": "phobos/std/internal/math/gammafunction/Functions/igammaTemmeLarge.html",
    "title": "Overloads for - igammaTemmeLarge | Marmos Demo",
    "keywords": "Overloads for - igammaTemmeLarge Module std.internal.math.gammafunction igammaTemmeLarge(a, x) real igammaTemmeLarge( real a, real x )"
  },
  "phobos/std/internal/math/gammafunction/Functions/logGamma.html": {
    "href": "phobos/std/internal/math/gammafunction/Functions/logGamma.html",
    "title": "Overloads for - logGamma | Marmos Demo",
    "keywords": "Overloads for - logGamma Module std.internal.math.gammafunction logGamma(x) real logGamma( real x ) Natural logarithm of gamma function. Returns the base e (2.718...) logarithm of the absolute value of the gamma function of the argument. For reals, logGamma is equivalent to log(fabs(gamma(x))). $(TABLE_SV $(SVH x, logGamma(x) ) $(SV $(NAN), $(NAN) ) $(SV integer <= 0, +∞ ) $(SV ±∞, +∞ ) )"
  },
  "phobos/std/internal/math/gammafunction/Functions/logmdigamma.html": {
    "href": "phobos/std/internal/math/gammafunction/Functions/logmdigamma.html",
    "title": "Overloads for - logmdigamma | Marmos Demo",
    "keywords": "Overloads for - logmdigamma Module std.internal.math.gammafunction logmdigamma(x) real logmdigamma( real x ) Log Minus Digamma function logmdigamma(x) = log(x) - digamma(x) References 1.1. Abramowitz, M., and Stegun, I. A. (1970). Handbook of mathematical functions. Dover, New York, pages 258-259, equations 6.3.6 and 6.3.18."
  },
  "phobos/std/internal/math/gammafunction/Functions/logmdigammaInverse.html": {
    "href": "phobos/std/internal/math/gammafunction/Functions/logmdigammaInverse.html",
    "title": "Overloads for - logmdigammaInverse | Marmos Demo",
    "keywords": "Overloads for - logmdigammaInverse Module std.internal.math.gammafunction logmdigammaInverse(y) real logmdigammaInverse( real y ) Inverse of the Log Minus Digamma function Returns x such $(D log(x) - digamma(x) == y). References 1.1. Abramowitz, M., and Stegun, I. A. (1970). Handbook of mathematical functions. Dover, New York, pages 258-259, equation 6.3.18. Authors: Ilya Yaroshenko"
  },
  "phobos/std/internal/math/gammafunction/Overview.html": {
    "href": "phobos/std/internal/math/gammafunction/Overview.html",
    "title": "Module - std.internal.math.gammafunction | Marmos Demo",
    "keywords": "Module - std.internal.math.gammafunction About Implementation of the gamma and beta functions, and their integrals. License: $(HTTP boost.org/LICENSE_1_0.txt, Boost License 1.0). Copyright: Based on the CEPHES math library, which is Copyright (C) 1994 Stephen L. Moshier (moshier@world.std.com). Authors: Stephen L. Moshier (original C code). Conversion to D by Don Clugston Macros: TABLE_SV = Special Values $0 SVH = $(TR $(TH $1) $(TH $2)) SV = $(TR $(TD $1) $(TD $2)) GAMMA = Γ INTEGRATE = \\((BIG &#8747;<sub>\\)(SMALL $1)$2) POWER = $1$2 NAN = $(RED NAN) Functions Name Description betaDistExpansion1 betaDistExpansion2 betaDistPowerSeries betaIncomplete Incomplete beta integral betaIncompleteInv Inverse of incomplete beta integral digamma Digamma function gamma The Gamma function, $(GAMMA)(x) gammaIncomplete Incomplete gamma integral and its complement gammaIncompleteCompl ditto gammaIncompleteComplInv Inverse of complemented incomplete gamma integral gammaStirling igammaTemmeLarge logGamma Natural logarithm of gamma function. logmdigamma Log Minus Digamma function logmdigammaInverse Inverse of the Log Minus Digamma function Variables Name Description BETA_BIG BETA_BIGINV Bn_n EULERGAMMA Euler-Mascheroni constant 0.57721566.. GammaDenominatorCoeffs GammaNumeratorCoeffs GammaSmallCoeffs GammaSmallNegCoeffs logGammaDenominator logGammaNumerator logGammaStirlingCoeffs MAXGAMMA The maximum value of x for which gamma(x) < real.infinity. MAXLOG MINLOG SQRT2PI"
  },
  "phobos/std/internal/memory/Functions/enforceCalloc.html": {
    "href": "phobos/std/internal/memory/Functions/enforceCalloc.html",
    "title": "Overloads for - enforceCalloc | Marmos Demo",
    "keywords": "Overloads for - enforceCalloc Module std.internal.memory enforceCalloc(nmemb, size) <bug: unknown> enforceCalloc( size_t nmemb, size_t size )"
  },
  "phobos/std/internal/memory/Functions/enforceMalloc.html": {
    "href": "phobos/std/internal/memory/Functions/enforceMalloc.html",
    "title": "Overloads for - enforceMalloc | Marmos Demo",
    "keywords": "Overloads for - enforceMalloc Module std.internal.memory enforceMalloc(size) <bug: unknown> enforceMalloc( size_t size )"
  },
  "phobos/std/internal/memory/Functions/enforceRealloc.html": {
    "href": "phobos/std/internal/memory/Functions/enforceRealloc.html",
    "title": "Overloads for - enforceRealloc | Marmos Demo",
    "keywords": "Overloads for - enforceRealloc Module std.internal.memory enforceRealloc(ptr, size) <bug: unknown> enforceRealloc( <bug: unknown> ptr, size_t size )"
  },
  "phobos/std/internal/memory/Functions/fakePureCalloc.html": {
    "href": "phobos/std/internal/memory/Functions/fakePureCalloc.html",
    "title": "Overloads for - fakePureCalloc | Marmos Demo",
    "keywords": "Overloads for - fakePureCalloc Module std.internal.memory fakePureCalloc(nmemb, size) <bug: unknown> fakePureCalloc( size_t nmemb, size_t size )"
  },
  "phobos/std/internal/memory/Functions/fakePureMalloc.html": {
    "href": "phobos/std/internal/memory/Functions/fakePureMalloc.html",
    "title": "Overloads for - fakePureMalloc | Marmos Demo",
    "keywords": "Overloads for - fakePureMalloc Module std.internal.memory fakePureMalloc(__anonymous) <bug: unknown> fakePureMalloc( size_t __anonymous )"
  },
  "phobos/std/internal/memory/Functions/fakePureRealloc.html": {
    "href": "phobos/std/internal/memory/Functions/fakePureRealloc.html",
    "title": "Overloads for - fakePureRealloc | Marmos Demo",
    "keywords": "Overloads for - fakePureRealloc Module std.internal.memory fakePureRealloc(ptr, size) <bug: unknown> fakePureRealloc( <bug: unknown> ptr, size_t size )"
  },
  "phobos/std/internal/memory/Overview.html": {
    "href": "phobos/std/internal/memory/Overview.html",
    "title": "Module - std.internal.memory | Marmos Demo",
    "keywords": "Module - std.internal.memory Functions Name Description enforceCalloc enforceMalloc enforceRealloc fakePureCalloc fakePureMalloc fakePureRealloc Variables Name Description allocationFailed"
  },
  "phobos/std/internal/scopebuffer/Functions/scopeBuffer.html": {
    "href": "phobos/std/internal/scopebuffer/Functions/scopeBuffer.html",
    "title": "Overloads for - scopeBuffer | Marmos Demo",
    "keywords": "Overloads for - scopeBuffer Module std.internal.scopebuffer scopeBuffer(tmpbuf) <bug: unknown> scopeBuffer( <bug: unknown> tmpbuf ) auto Creates a ScopeBuffer instance using type deduction - see $(LREF .ScopeBuffer.this) for details. Params: tmpbuf = the initial buffer to use Returns: An instance of ScopeBuffer ."
  },
  "phobos/std/internal/scopebuffer/Overview.html": {
    "href": "phobos/std/internal/scopebuffer/Overview.html",
    "title": "Module - std.internal.scopebuffer | Marmos Demo",
    "keywords": "Module - std.internal.scopebuffer Structs Name Description ScopeBuffer ScopeBuffer encapsulates using a local array as a temporary buffer. It is initialized with a local array that should be large enough for most uses. If the need exceeds that size, ScopeBuffer will reallocate the data using its realloc function. Functions Name Description scopeBuffer Creates a ScopeBuffer instance using type deduction - see $(LREF .ScopeBuffer.this) for details. Params: tmpbuf = the initial buffer to use Returns: An instance of ScopeBuffer ."
  },
  "phobos/std/internal/scopebuffer/ScopeBuffer/Functions/free.html": {
    "href": "phobos/std/internal/scopebuffer/ScopeBuffer/Functions/free.html",
    "title": "Overloads for - free | Marmos Demo",
    "keywords": "Overloads for - free Module std.internal.scopebuffer Parent ScopeBuffer free() void free( ) Releases any memory used. This will invalidate any references returned by the [] operator. A destructor is not used, because that would make it not POD (Plain Old Data) and it could not be placed in registers."
  },
  "phobos/std/internal/scopebuffer/ScopeBuffer/Functions/length.html": {
    "href": "phobos/std/internal/scopebuffer/ScopeBuffer/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.internal.scopebuffer Parent ScopeBuffer length() size_t length( ) Returns The number of elements in the ScopeBuffer . length(i) void length( size_t i ) Used to shrink the length of the buffer, typically to 0 so the buffer can be reused. Cannot be used to extend the length of the buffer."
  },
  "phobos/std/internal/scopebuffer/ScopeBuffer/Functions/opIndex.html": {
    "href": "phobos/std/internal/scopebuffer/ScopeBuffer/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.internal.scopebuffer Parent ScopeBuffer opIndex(i) T opIndex( size_t i ) Returns The element at index i."
  },
  "phobos/std/internal/scopebuffer/ScopeBuffer/Functions/opSlice.html": {
    "href": "phobos/std/internal/scopebuffer/ScopeBuffer/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.internal.scopebuffer Parent ScopeBuffer opSlice(lower, upper) <bug: unknown> opSlice( size_t lower, size_t upper ) Returns A slice into the temporary buffer. Warning: The result is only valid until the next put() or ScopeBuffer goes out of scope. opSlice() <bug: unknown> opSlice( ) ditto"
  },
  "phobos/std/internal/scopebuffer/ScopeBuffer/Functions/put.html": {
    "href": "phobos/std/internal/scopebuffer/ScopeBuffer/Functions/put.html",
    "title": "Overloads for - put | Marmos Demo",
    "keywords": "Overloads for - put Module std.internal.scopebuffer Parent ScopeBuffer put(c) void put( T c ) Append element c to the buffer. This member function makes ScopeBuffer an Output Range. put(s) void put( <bug: unknown> s ) ditto"
  },
  "phobos/std/internal/scopebuffer/ScopeBuffer/Functions/resize.html": {
    "href": "phobos/std/internal/scopebuffer/ScopeBuffer/Functions/resize.html",
    "title": "Overloads for - resize | Marmos Demo",
    "keywords": "Overloads for - resize Module std.internal.scopebuffer Parent ScopeBuffer resize(newsize) void resize( size_t newsize )"
  },
  "phobos/std/internal/scopebuffer/Structs/ScopeBuffer.html": {
    "href": "phobos/std/internal/scopebuffer/Structs/ScopeBuffer.html",
    "title": "Struct - ScopeBuffer | Marmos Demo",
    "keywords": "Struct - ScopeBuffer Module std.internal.scopebuffer public struct ScopeBuffer { // Append array s to the buffer. alias CT = <todo: marmos support pending>; // alias opDollar = <todo: marmos support pending>; // Releases any memory used. This will invalidate any references returned by the `[]` operator. A destructor is not used, because that would make it not POD (Plain Old Data) and it could not be placed in registers. void free( ) ; // size_t length( ) ; // Used to shrink the length of the buffer, typically to `0` so the buffer can be reused. Cannot be used to extend the length of the buffer. void length( size_t i ) ; // T opIndex( size_t i ) ; // <bug: unknown> opSlice( size_t lower, size_t upper ) ; // ditto <bug: unknown> opSlice( ) ; // Append element c to the buffer. This member function makes `ScopeBuffer` an Output Range. void put( T c ) ; // ditto void put( <bug: unknown> s ) ; // void resize( size_t newsize ) ; // <bug: unknown> buf; // uint bufLen; // uint used; // __enumMember wasResized; } About ScopeBuffer encapsulates using a local array as a temporary buffer. It is initialized with a local array that should be large enough for most uses. If the need exceeds that size, ScopeBuffer will reallocate the data using its realloc function. ScopeBuffer cannot contain more than (uint.max-16)/2 elements. ScopeBuffer is an Output Range. Since ScopeBuffer may store elements of type T in malloc 'd memory, those elements are not scanned when the GC collects. This can cause memory corruption. Do not use ScopeBuffer when elements of type T point to the GC heap, except when a realloc function is provided which supports this. Example --- import core.stdc.stdio; import std.internal.scopebuffer; void main() { char[2] buf = void; auto textbuf = ScopeBuffer!char(buf); scope(exit) textbuf.free(); // necessary for cleanup // Put characters and strings into textbuf, verify they got there textbuf.put('a'); textbuf.put('x'); textbuf.put(\"abc\"); assert(textbuf.length == 5); assert(textbuf[1 .. 3] == \"xa\"); assert(textbuf[3] == 'b'); // Can shrink it textbuf.length = 3; assert(textbuf[0 .. textbuf.length] == \"axa\"); assert(textbuf[textbuf.length - 1] == 'a'); assert(textbuf[1 .. 3] == \"xa\"); textbuf.put('z'); assert(textbuf[] == \"axaz\"); // Can shrink it to 0 size, and reuse same memory textbuf.length = 0; } --- It is invalid to access ScopeBuffer's contents when ScopeBuffer goes out of scope. Hence, copying the contents are necessary to keep them around: --- import std.internal.scopebuffer; string cat(string s1, string s2) { char[10] tmpbuf = void; auto textbuf = ScopeBuffer!char(tmpbuf); scope(exit) textbuf.free(); textbuf.put(s1); textbuf.put(s2); textbuf.put(\"even more\"); return textbuf[].idup; } --- ScopeBuffer is intended for high performance usages in @system and @trusted code. It is designed to fit into two 64 bit registers, again for high performance use. If used incorrectly, memory leaks and corruption can result. Be sure to use $(D scope(exit) textbuf.free();) for proper cleanup, and do not refer to a ScopeBuffer instance's contents after ScopeBuffer.free() has been called. The realloc parameter defaults to C's realloc() . Another can be supplied to override it. ScopeBuffer instances may be copied, as in --- textbuf = doSomething(textbuf, args); --- which can be very efficent, but these must be regarded as a move rather than a copy. Additionally, the code between passing and returning the instance must not throw exceptions, otherwise when ScopeBuffer.free() is called, memory may get corrupted. Aliases Name Description CT Append array s to the buffer. opDollar Functions Name Description free Releases any memory used. This will invalidate any references returned by the [] operator. A destructor is not used, because that would make it not POD (Plain Old Data) and it could not be placed in registers. length opIndex opSlice put Append element c to the buffer. This member function makes ScopeBuffer an Output Range. resize Variables Name Description buf bufLen used wasResized"
  },
  "phobos/std/internal/test/dummyrange/Classes/ReferenceBidirectionalRange.html": {
    "href": "phobos/std/internal/test/dummyrange/Classes/ReferenceBidirectionalRange.html",
    "title": "Class - ReferenceBidirectionalRange | Marmos Demo",
    "keywords": "Class - ReferenceBidirectionalRange Module std.internal.test.dummyrange public class ReferenceBidirectionalRange { // T back( ) final; // void popBack( ) final; } About Reference bidirectional range Functions Name Description back popBack"
  },
  "phobos/std/internal/test/dummyrange/Classes/ReferenceForwardRange.html": {
    "href": "phobos/std/internal/test/dummyrange/Classes/ReferenceForwardRange.html",
    "title": "Class - ReferenceForwardRange | Marmos Demo",
    "keywords": "Class - ReferenceForwardRange Module std.internal.test.dummyrange public class ReferenceForwardRange { } About Reference forward range"
  },
  "phobos/std/internal/test/dummyrange/Classes/ReferenceInfiniteForwardRange.html": {
    "href": "phobos/std/internal/test/dummyrange/Classes/ReferenceInfiniteForwardRange.html",
    "title": "Class - ReferenceInfiniteForwardRange | Marmos Demo",
    "keywords": "Class - ReferenceInfiniteForwardRange Module std.internal.test.dummyrange public class ReferenceInfiniteForwardRange { // ReferenceInfiniteForwardRange save( ) final; } About Infinite forward range Functions Name Description save"
  },
  "phobos/std/internal/test/dummyrange/Classes/ReferenceInfiniteInputRange.html": {
    "href": "phobos/std/internal/test/dummyrange/Classes/ReferenceInfiniteInputRange.html",
    "title": "Class - ReferenceInfiniteInputRange | Marmos Demo",
    "keywords": "Class - ReferenceInfiniteInputRange Module std.internal.test.dummyrange public class ReferenceInfiniteInputRange { // T front( ) final; // void popFront( ) final; // bool empty; } About Infinite input range Functions Name Description front popFront Variables Name Description empty"
  },
  "phobos/std/internal/test/dummyrange/Classes/ReferenceInputRange.html": {
    "href": "phobos/std/internal/test/dummyrange/Classes/ReferenceInputRange.html",
    "title": "Class - ReferenceInputRange | Marmos Demo",
    "keywords": "Class - ReferenceInputRange Module std.internal.test.dummyrange public class ReferenceInputRange { // bool empty( ) final; // T front( ) final; // void popFront( ) final; } About Reference type input range Functions Name Description empty front popFront"
  },
  "phobos/std/internal/test/dummyrange/Cmp/Functions/dummyValue.html": {
    "href": "phobos/std/internal/test/dummyrange/Cmp/Functions/dummyValue.html",
    "title": "Overloads for - dummyValue | Marmos Demo",
    "keywords": "Overloads for - dummyValue Module std.internal.test.dummyrange Parent Cmp dummyValue() TestFoo dummyValue( ) static"
  },
  "phobos/std/internal/test/dummyrange/Cmp/Functions/dummyValueRslt.html": {
    "href": "phobos/std/internal/test/dummyrange/Cmp/Functions/dummyValueRslt.html",
    "title": "Overloads for - dummyValueRslt | Marmos Demo",
    "keywords": "Overloads for - dummyValueRslt Module std.internal.test.dummyrange Parent Cmp dummyValueRslt() TestFoo dummyValueRslt( ) static"
  },
  "phobos/std/internal/test/dummyrange/Cmp/Functions/initialize.html": {
    "href": "phobos/std/internal/test/dummyrange/Cmp/Functions/initialize.html",
    "title": "Overloads for - initialize | Marmos Demo",
    "keywords": "Overloads for - initialize Module std.internal.test.dummyrange Parent Cmp initialize(arr) void initialize( <bug: unknown> arr ) static"
  },
  "phobos/std/internal/test/dummyrange/Cmp/Functions/iota.html": {
    "href": "phobos/std/internal/test/dummyrange/Cmp/Functions/iota.html",
    "title": "Overloads for - iota | Marmos Demo",
    "keywords": "Overloads for - iota Module std.internal.test.dummyrange Parent Cmp iota(low, high) <bug: unknown> iota( size_t low, size_t high ) static auto"
  },
  "phobos/std/internal/test/dummyrange/DummyRange/Functions/back.html": {
    "href": "phobos/std/internal/test/dummyrange/DummyRange/Functions/back.html",
    "title": "Overloads for - back | Marmos Demo",
    "keywords": "Overloads for - back Module std.internal.test.dummyrange Parent DummyRange back() RetType back( )"
  },
  "phobos/std/internal/test/dummyrange/DummyRange/Functions/empty.html": {
    "href": "phobos/std/internal/test/dummyrange/DummyRange/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.internal.test.dummyrange Parent DummyRange empty() bool empty( )"
  },
  "phobos/std/internal/test/dummyrange/DummyRange/Functions/front.html": {
    "href": "phobos/std/internal/test/dummyrange/DummyRange/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.internal.test.dummyrange Parent DummyRange front() RetType front( )"
  },
  "phobos/std/internal/test/dummyrange/DummyRange/Functions/length.html": {
    "href": "phobos/std/internal/test/dummyrange/DummyRange/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.internal.test.dummyrange Parent DummyRange length() size_t length( )"
  },
  "phobos/std/internal/test/dummyrange/DummyRange/Functions/opIndex.html": {
    "href": "phobos/std/internal/test/dummyrange/DummyRange/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.internal.test.dummyrange Parent DummyRange opIndex(index) RetType opIndex( size_t index )"
  },
  "phobos/std/internal/test/dummyrange/DummyRange/Functions/opSlice.html": {
    "href": "phobos/std/internal/test/dummyrange/DummyRange/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.internal.test.dummyrange Parent DummyRange opSlice(lower, upper) <bug: unknown> opSlice( size_t lower, size_t upper ) opSlice() <bug: unknown> opSlice( )"
  },
  "phobos/std/internal/test/dummyrange/DummyRange/Functions/popBack.html": {
    "href": "phobos/std/internal/test/dummyrange/DummyRange/Functions/popBack.html",
    "title": "Overloads for - popBack | Marmos Demo",
    "keywords": "Overloads for - popBack Module std.internal.test.dummyrange Parent DummyRange popBack() void popBack( )"
  },
  "phobos/std/internal/test/dummyrange/DummyRange/Functions/popFront.html": {
    "href": "phobos/std/internal/test/dummyrange/DummyRange/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.internal.test.dummyrange Parent DummyRange popFront() void popFront( )"
  },
  "phobos/std/internal/test/dummyrange/DummyRange/Functions/reinit.html": {
    "href": "phobos/std/internal/test/dummyrange/DummyRange/Functions/reinit.html",
    "title": "Overloads for - reinit | Marmos Demo",
    "keywords": "Overloads for - reinit Module std.internal.test.dummyrange Parent DummyRange reinit() void reinit( )"
  },
  "phobos/std/internal/test/dummyrange/DummyRange/Functions/save.html": {
    "href": "phobos/std/internal/test/dummyrange/DummyRange/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.internal.test.dummyrange Parent DummyRange save() <bug: unknown> save( )"
  },
  "phobos/std/internal/test/dummyrange/Overview.html": {
    "href": "phobos/std/internal/test/dummyrange/Overview.html",
    "title": "Module - std.internal.test.dummyrange | Marmos Demo",
    "keywords": "Module - std.internal.test.dummyrange About For testing only. Used with the dummy ranges for testing higher order ranges. Aliases Name Description AllDummyRanges AllDummyRangesType Classes Name Description ReferenceBidirectionalRange Reference bidirectional range ReferenceForwardRange Reference forward range ReferenceInfiniteForwardRange Infinite forward range ReferenceInfiniteInputRange Infinite input range ReferenceInputRange Reference type input range Structs Name Description Cmp Cmp Cmp DummyRange TestFoo Variables Name Description dummyLength"
  },
  "phobos/std/internal/test/dummyrange/ReferenceBidirectionalRange/Functions/back.html": {
    "href": "phobos/std/internal/test/dummyrange/ReferenceBidirectionalRange/Functions/back.html",
    "title": "Overloads for - back | Marmos Demo",
    "keywords": "Overloads for - back Module std.internal.test.dummyrange Parent ReferenceBidirectionalRange back() T back( ) final"
  },
  "phobos/std/internal/test/dummyrange/ReferenceBidirectionalRange/Functions/popBack.html": {
    "href": "phobos/std/internal/test/dummyrange/ReferenceBidirectionalRange/Functions/popBack.html",
    "title": "Overloads for - popBack | Marmos Demo",
    "keywords": "Overloads for - popBack Module std.internal.test.dummyrange Parent ReferenceBidirectionalRange popBack() void popBack( ) final"
  },
  "phobos/std/internal/test/dummyrange/ReferenceInfiniteForwardRange/Functions/save.html": {
    "href": "phobos/std/internal/test/dummyrange/ReferenceInfiniteForwardRange/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.internal.test.dummyrange Parent ReferenceInfiniteForwardRange save() ReferenceInfiniteForwardRange save( ) final"
  },
  "phobos/std/internal/test/dummyrange/ReferenceInfiniteInputRange/Functions/front.html": {
    "href": "phobos/std/internal/test/dummyrange/ReferenceInfiniteInputRange/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.internal.test.dummyrange Parent ReferenceInfiniteInputRange front() T front( ) final"
  },
  "phobos/std/internal/test/dummyrange/ReferenceInfiniteInputRange/Functions/popFront.html": {
    "href": "phobos/std/internal/test/dummyrange/ReferenceInfiniteInputRange/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.internal.test.dummyrange Parent ReferenceInfiniteInputRange popFront() void popFront( ) final"
  },
  "phobos/std/internal/test/dummyrange/ReferenceInputRange/Functions/empty.html": {
    "href": "phobos/std/internal/test/dummyrange/ReferenceInputRange/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.internal.test.dummyrange Parent ReferenceInputRange empty() bool empty( ) final"
  },
  "phobos/std/internal/test/dummyrange/ReferenceInputRange/Functions/front.html": {
    "href": "phobos/std/internal/test/dummyrange/ReferenceInputRange/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.internal.test.dummyrange Parent ReferenceInputRange front() T front( ) final"
  },
  "phobos/std/internal/test/dummyrange/ReferenceInputRange/Functions/popFront.html": {
    "href": "phobos/std/internal/test/dummyrange/ReferenceInputRange/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.internal.test.dummyrange Parent ReferenceInputRange popFront() void popFront( ) final"
  },
  "phobos/std/internal/test/dummyrange/Structs/Cmp.html": {
    "href": "phobos/std/internal/test/dummyrange/Structs/Cmp.html",
    "title": "Struct - Cmp | Marmos Demo",
    "keywords": "Struct - Cmp Module std.internal.test.dummyrange public struct Cmp { // TestFoo dummyValue( ) static; // TestFoo dummyValueRslt( ) static; // void initialize( <bug: unknown> arr ) static; // <bug: unknown> iota( size_t low, size_t high ) static auto; // static <bug: unknown> cmp; } Functions Name Description dummyValue dummyValueRslt initialize iota Variables Name Description cmp"
  },
  "phobos/std/internal/test/dummyrange/Structs/DummyRange.html": {
    "href": "phobos/std/internal/test/dummyrange/Structs/DummyRange.html",
    "title": "Struct - DummyRange | Marmos Demo",
    "keywords": "Struct - DummyRange Module std.internal.test.dummyrange public struct DummyRange { // alias opDollar = <todo: marmos support pending>; // alias RetType = <todo: marmos support pending>; // alias RetTypeNoAutoDecoding = <todo: marmos support pending>; // RetType back( ) ; // bool empty( ) ; // RetType front( ) ; // size_t length( ) ; // RetType opIndex( size_t index ) ; // <bug: unknown> opSlice( size_t lower, size_t upper ) ; // <bug: unknown> opSlice( ) ; // void popBack( ) ; // void popFront( ) ; // void reinit( ) ; // <bug: unknown> save( ) ; // T arr; // __enumMember l; // __enumMember r; // __enumMember rt; // static immutable __enumMember uinttestData; } Aliases Name Description opDollar RetType RetTypeNoAutoDecoding Functions Name Description back empty front length opIndex opSlice popBack popFront reinit save Variables Name Description arr l r rt uinttestData"
  },
  "phobos/std/internal/test/dummyrange/Structs/TestFoo.html": {
    "href": "phobos/std/internal/test/dummyrange/Structs/TestFoo.html",
    "title": "Struct - TestFoo | Marmos Demo",
    "keywords": "Struct - TestFoo Module std.internal.test.dummyrange public struct TestFoo { // bool opEquals( TestFoo other ) ; // int a; } Functions Name Description opEquals Variables Name Description a"
  },
  "phobos/std/internal/test/dummyrange/TestFoo/Functions/opEquals.html": {
    "href": "phobos/std/internal/test/dummyrange/TestFoo/Functions/opEquals.html",
    "title": "Overloads for - opEquals | Marmos Demo",
    "keywords": "Overloads for - opEquals Module std.internal.test.dummyrange Parent TestFoo opEquals(other) bool opEquals( TestFoo other )"
  },
  "phobos/std/internal/test/range/Overview.html": {
    "href": "phobos/std/internal/test/range/Overview.html",
    "title": "Module - std.internal.test.range | Marmos Demo",
    "keywords": "Module - std.internal.test.range About For testing only. Contains tests related to member privacy that cannot be verified inside std.range itself."
  },
  "phobos/std/internal/test/sumtype_example_overloads/Functions/handle.html": {
    "href": "phobos/std/internal/test/sumtype_example_overloads/Functions/handle.html",
    "title": "Overloads for - handle | Marmos Demo",
    "keywords": "Overloads for - handle Module std.internal.test.sumtype_example_overloads handle(__anonymous) string handle( int __anonymous ) handle(__anonymous) string handle( string __anonymous ) handle(__anonymous) string handle( double __anonymous )"
  },
  "phobos/std/internal/test/sumtype_example_overloads/Overview.html": {
    "href": "phobos/std/internal/test/sumtype_example_overloads/Overview.html",
    "title": "Module - std.internal.test.sumtype_example_overloads | Marmos Demo",
    "keywords": "Module - std.internal.test.sumtype_example_overloads About For testing only. Overload set used in std.sumtype example. Needs its own internal module so that it can be available for make publictests without polluting the public API. Aliases Name Description handle Functions Name Description handle"
  },
  "phobos/std/internal/test/uda/Overview.html": {
    "href": "phobos/std/internal/test/uda/Overview.html",
    "title": "Module - std.internal.test.uda | Marmos Demo",
    "keywords": "Module - std.internal.test.uda About For testing only. Provides a struct with UDA's defined in an external module. Useful for validating behavior with member privacy. Structs Name Description HasPrivateMembers"
  },
  "phobos/std/internal/test/uda/Structs/HasPrivateMembers.html": {
    "href": "phobos/std/internal/test/uda/Structs/HasPrivateMembers.html",
    "title": "Struct - HasPrivateMembers | Marmos Demo",
    "keywords": "Struct - HasPrivateMembers Module std.internal.test.uda public struct HasPrivateMembers { // int a; // int b; // int c; // int d; } Variables Name Description a b c d"
  },
  "phobos/std/internal/unicode_comp/Functions/compositionTable.html": {
    "href": "phobos/std/internal/unicode_comp/Functions/compositionTable.html",
    "title": "Overloads for - compositionTable | Marmos Demo",
    "keywords": "Overloads for - compositionTable Module std.internal.unicode_comp compositionTable() dstring compositionTable( ) compositionTable() dstring compositionTable( )"
  },
  "phobos/std/internal/unicode_comp/Overview.html": {
    "href": "phobos/std/internal/unicode_comp/Overview.html",
    "title": "Module - std.internal.unicode_comp | Marmos Demo",
    "keywords": "Module - std.internal.unicode_comp Functions Name Description compositionTable Variables Name Description combiningClassTrieEntries combiningClassTrieEntries composeCntShift composeCntShift composeIdxMask composeIdxMask compositionJumpTrieEntries compositionJumpTrieEntries"
  },
  "phobos/std/internal/unicode_decomp/Functions/decompCanonTable.html": {
    "href": "phobos/std/internal/unicode_decomp/Functions/decompCanonTable.html",
    "title": "Overloads for - decompCanonTable | Marmos Demo",
    "keywords": "Overloads for - decompCanonTable Module std.internal.unicode_decomp decompCanonTable() dstring decompCanonTable( ) decompCanonTable() dstring decompCanonTable( )"
  },
  "phobos/std/internal/unicode_decomp/Functions/decompCompatTable.html": {
    "href": "phobos/std/internal/unicode_decomp/Functions/decompCompatTable.html",
    "title": "Overloads for - decompCompatTable | Marmos Demo",
    "keywords": "Overloads for - decompCompatTable Module std.internal.unicode_decomp decompCompatTable() dstring decompCompatTable( ) decompCompatTable() dstring decompCompatTable( )"
  },
  "phobos/std/internal/unicode_decomp/Overview.html": {
    "href": "phobos/std/internal/unicode_decomp/Overview.html",
    "title": "Module - std.internal.unicode_decomp | Marmos Demo",
    "keywords": "Module - std.internal.unicode_decomp About License: $(HTTP boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: Dmitry Olshansky Functions Name Description decompCanonTable decompCompatTable Variables Name Description canonMappingTrieEntries canonMappingTrieEntries compatMappingTrieEntries compatMappingTrieEntries"
  },
  "phobos/std/internal/unicode_grapheme/Overview.html": {
    "href": "phobos/std/internal/unicode_grapheme/Overview.html",
    "title": "Module - std.internal.unicode_grapheme | Marmos Demo",
    "keywords": "Module - std.internal.unicode_grapheme About License: $(HTTP boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: Dmitry Olshansky Variables Name Description controlTrieEntries controlTrieEntries Extended_PictographicTrieEntries Extended_PictographicTrieEntries graphemeExtendTrieEntries graphemeExtendTrieEntries hangulLVTrieEntries hangulLVTrieEntries hangulLVTTrieEntries hangulLVTTrieEntries prependTrieEntries prependTrieEntries spacingMarkTrieEntries spacingMarkTrieEntries"
  },
  "phobos/std/internal/unicode_norm/Overview.html": {
    "href": "phobos/std/internal/unicode_norm/Overview.html",
    "title": "Module - std.internal.unicode_norm | Marmos Demo",
    "keywords": "Module - std.internal.unicode_norm About License: $(HTTP boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: Dmitry Olshansky Variables Name Description nfcQCTrieEntries nfcQCTrieEntries nfdQCTrieEntries nfdQCTrieEntries nfkcQCTrieEntries nfkcQCTrieEntries nfkdQCTrieEntries nfkdQCTrieEntries"
  },
  "phobos/std/internal/unicode_tables/FCE/Functions/entry_len.html": {
    "href": "phobos/std/internal/unicode_tables/FCE/Functions/entry_len.html",
    "title": "Overloads for - entry_len | Marmos Demo",
    "keywords": "Overloads for - entry_len Module std.internal.unicode_tables Parent FCE entry_len() ubyte entry_len( )"
  },
  "phobos/std/internal/unicode_tables/FCE/Functions/n.html": {
    "href": "phobos/std/internal/unicode_tables/FCE/Functions/n.html",
    "title": "Overloads for - n | Marmos Demo",
    "keywords": "Overloads for - n Module std.internal.unicode_tables Parent FCE n() ubyte n( )"
  },
  "phobos/std/internal/unicode_tables/FCE/Functions/seq.html": {
    "href": "phobos/std/internal/unicode_tables/FCE/Functions/seq.html",
    "title": "Overloads for - seq | Marmos Demo",
    "keywords": "Overloads for - seq Module std.internal.unicode_tables Parent FCE seq() <bug: unknown> seq( )"
  },
  "phobos/std/internal/unicode_tables/FCE/Functions/size.html": {
    "href": "phobos/std/internal/unicode_tables/FCE/Functions/size.html",
    "title": "Overloads for - size | Marmos Demo",
    "keywords": "Overloads for - size Module std.internal.unicode_tables Parent FCE size() ubyte size( )"
  },
  "phobos/std/internal/unicode_tables/Functions/fullCaseTable.html": {
    "href": "phobos/std/internal/unicode_tables/Functions/fullCaseTable.html",
    "title": "Overloads for - fullCaseTable | Marmos Demo",
    "keywords": "Overloads for - fullCaseTable Module std.internal.unicode_tables fullCaseTable(index) FCE fullCaseTable( size_t index )"
  },
  "phobos/std/internal/unicode_tables/Functions/isControlGen.html": {
    "href": "phobos/std/internal/unicode_tables/Functions/isControlGen.html",
    "title": "Overloads for - isControlGen | Marmos Demo",
    "keywords": "Overloads for - isControlGen Module std.internal.unicode_tables isControlGen(ch) bool isControlGen( dchar ch )"
  },
  "phobos/std/internal/unicode_tables/Functions/isFormatGen.html": {
    "href": "phobos/std/internal/unicode_tables/Functions/isFormatGen.html",
    "title": "Overloads for - isFormatGen | Marmos Demo",
    "keywords": "Overloads for - isFormatGen Module std.internal.unicode_tables isFormatGen(ch) bool isFormatGen( dchar ch )"
  },
  "phobos/std/internal/unicode_tables/Functions/isHangL.html": {
    "href": "phobos/std/internal/unicode_tables/Functions/isHangL.html",
    "title": "Overloads for - isHangL | Marmos Demo",
    "keywords": "Overloads for - isHangL Module std.internal.unicode_tables isHangL(ch) bool isHangL( dchar ch )"
  },
  "phobos/std/internal/unicode_tables/Functions/isHangT.html": {
    "href": "phobos/std/internal/unicode_tables/Functions/isHangT.html",
    "title": "Overloads for - isHangT | Marmos Demo",
    "keywords": "Overloads for - isHangT Module std.internal.unicode_tables isHangT(ch) bool isHangT( dchar ch )"
  },
  "phobos/std/internal/unicode_tables/Functions/isHangV.html": {
    "href": "phobos/std/internal/unicode_tables/Functions/isHangV.html",
    "title": "Overloads for - isHangV | Marmos Demo",
    "keywords": "Overloads for - isHangV Module std.internal.unicode_tables isHangV(ch) bool isHangV( dchar ch )"
  },
  "phobos/std/internal/unicode_tables/Functions/isSpaceGen.html": {
    "href": "phobos/std/internal/unicode_tables/Functions/isSpaceGen.html",
    "title": "Overloads for - isSpaceGen | Marmos Demo",
    "keywords": "Overloads for - isSpaceGen Module std.internal.unicode_tables isSpaceGen(ch) bool isSpaceGen( dchar ch )"
  },
  "phobos/std/internal/unicode_tables/Functions/isWhiteGen.html": {
    "href": "phobos/std/internal/unicode_tables/Functions/isWhiteGen.html",
    "title": "Overloads for - isWhiteGen | Marmos Demo",
    "keywords": "Overloads for - isWhiteGen Module std.internal.unicode_tables isWhiteGen(ch) bool isWhiteGen( dchar ch )"
  },
  "phobos/std/internal/unicode_tables/Functions/simpleCaseTable.html": {
    "href": "phobos/std/internal/unicode_tables/Functions/simpleCaseTable.html",
    "title": "Overloads for - simpleCaseTable | Marmos Demo",
    "keywords": "Overloads for - simpleCaseTable Module std.internal.unicode_tables simpleCaseTable(i) SCE simpleCaseTable( size_t i )"
  },
  "phobos/std/internal/unicode_tables/Functions/toLowerTable.html": {
    "href": "phobos/std/internal/unicode_tables/Functions/toLowerTable.html",
    "title": "Overloads for - toLowerTable | Marmos Demo",
    "keywords": "Overloads for - toLowerTable Module std.internal.unicode_tables toLowerTable() <bug: unknown> toLowerTable( ) toLowerTable() <bug: unknown> toLowerTable( )"
  },
  "phobos/std/internal/unicode_tables/Functions/toTitleTable.html": {
    "href": "phobos/std/internal/unicode_tables/Functions/toTitleTable.html",
    "title": "Overloads for - toTitleTable | Marmos Demo",
    "keywords": "Overloads for - toTitleTable Module std.internal.unicode_tables toTitleTable() <bug: unknown> toTitleTable( ) toTitleTable() <bug: unknown> toTitleTable( )"
  },
  "phobos/std/internal/unicode_tables/Functions/toUpperTable.html": {
    "href": "phobos/std/internal/unicode_tables/Functions/toUpperTable.html",
    "title": "Overloads for - toUpperTable | Marmos Demo",
    "keywords": "Overloads for - toUpperTable Module std.internal.unicode_tables toUpperTable() <bug: unknown> toUpperTable( ) toUpperTable() <bug: unknown> toUpperTable( )"
  },
  "phobos/std/internal/unicode_tables/Overview.html": {
    "href": "phobos/std/internal/unicode_tables/Overview.html",
    "title": "Module - std.internal.unicode_tables | Marmos Demo",
    "keywords": "Module - std.internal.unicode_tables About License: $(HTTP boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: Dmitry Olshansky Structs Name Description blocks FCE Bit backed FullCaseEntry hangul SCE Simple Case Entry, wrapper around uint to extract bit fields from simpleCaseTable() scripts TrieEntry UnicodeProperty uniProps Functions Name Description fullCaseTable isControlGen isFormatGen isHangL isHangT isHangV isSpaceGen isWhiteGen simpleCaseTable toLowerTable toTitleTable toUpperTable Variables Name Description alphaTrieEntries alphaTrieEntries fullCaseTrieEntries fullCaseTrieEntries graphicalTrieEntries graphicalTrieEntries lowerCaseTrieEntries lowerCaseTrieEntries markTrieEntries markTrieEntries MAX_SIMPLE_LOWER MAX_SIMPLE_LOWER MAX_SIMPLE_TITLE MAX_SIMPLE_TITLE MAX_SIMPLE_UPPER MAX_SIMPLE_UPPER nonCharacterTrieEntries nonCharacterTrieEntries numberTrieEntries numberTrieEntries punctuationTrieEntries punctuationTrieEntries simpleCaseTrieEntries simpleCaseTrieEntries symbolTrieEntries symbolTrieEntries toLowerIndexTrieEntries toLowerIndexTrieEntries toLowerSimpleIndexTrieEntries toLowerSimpleIndexTrieEntries toTitleIndexTrieEntries toTitleIndexTrieEntries toTitleSimpleIndexTrieEntries toTitleSimpleIndexTrieEntries toUpperIndexTrieEntries toUpperIndexTrieEntries toUpperSimpleIndexTrieEntries toUpperSimpleIndexTrieEntries upperCaseTrieEntries upperCaseTrieEntries"
  },
  "phobos/std/internal/unicode_tables/SCE/Functions/ch.html": {
    "href": "phobos/std/internal/unicode_tables/SCE/Functions/ch.html",
    "title": "Overloads for - ch | Marmos Demo",
    "keywords": "Overloads for - ch Module std.internal.unicode_tables Parent SCE ch() int ch( )"
  },
  "phobos/std/internal/unicode_tables/SCE/Functions/n.html": {
    "href": "phobos/std/internal/unicode_tables/SCE/Functions/n.html",
    "title": "Overloads for - n | Marmos Demo",
    "keywords": "Overloads for - n Module std.internal.unicode_tables Parent SCE n() int n( )"
  },
  "phobos/std/internal/unicode_tables/SCE/Functions/size.html": {
    "href": "phobos/std/internal/unicode_tables/SCE/Functions/size.html",
    "title": "Overloads for - size | Marmos Demo",
    "keywords": "Overloads for - size Module std.internal.unicode_tables Parent SCE size() int size( )"
  },
  "phobos/std/internal/unicode_tables/Structs/FCE.html": {
    "href": "phobos/std/internal/unicode_tables/Structs/FCE.html",
    "title": "Struct - FCE | Marmos Demo",
    "keywords": "Struct - FCE Module std.internal.unicode_tables public struct FCE { // ubyte entry_len( ) ; // ubyte n( ) ; // <bug: unknown> seq( ) ; // ubyte size( ) ; // ulong x; } About Bit backed FullCaseEntry Functions Name Description entry_len n seq size Variables Name Description x"
  },
  "phobos/std/internal/unicode_tables/Structs/SCE.html": {
    "href": "phobos/std/internal/unicode_tables/Structs/SCE.html",
    "title": "Struct - SCE | Marmos Demo",
    "keywords": "Struct - SCE Module std.internal.unicode_tables public struct SCE { // int ch( ) ; // int n( ) ; // int size( ) ; // uint x; } About Simple Case Entry, wrapper around uint to extract bit fields from simpleCaseTable() Functions Name Description ch n size Variables Name Description x"
  },
  "phobos/std/internal/unicode_tables/Structs/TrieEntry.html": {
    "href": "phobos/std/internal/unicode_tables/Structs/TrieEntry.html",
    "title": "Struct - TrieEntry | Marmos Demo",
    "keywords": "Struct - TrieEntry Module std.internal.unicode_tables public struct TrieEntry { // <bug: unknown> data; // <bug: unknown> offsets; // <bug: unknown> sizes; } Variables Name Description data offsets sizes"
  },
  "phobos/std/internal/unicode_tables/Structs/UnicodeProperty.html": {
    "href": "phobos/std/internal/unicode_tables/Structs/UnicodeProperty.html",
    "title": "Struct - UnicodeProperty | Marmos Demo",
    "keywords": "Struct - UnicodeProperty Module std.internal.unicode_tables public struct UnicodeProperty { // <bug: unknown> compressed; // string name; } Variables Name Description compressed name"
  },
  "phobos/std/internal/unicode_tables/Structs/blocks.html": {
    "href": "phobos/std/internal/unicode_tables/Structs/blocks.html",
    "title": "Struct - blocks | Marmos Demo",
    "keywords": "Struct - blocks Module std.internal.unicode_tables public struct blocks { // <bug: unknown> tab( ) static; // _T Adlam; // _T Aegean_Numbers; // _T Ahom; // _T Alchemical_Symbols; // _T Alphabetic_Presentation_Forms; // _T Anatolian_Hieroglyphs; // _T Ancient_Greek_Musical_Notation; // _T Ancient_Greek_Numbers; // _T Ancient_Symbols; // _T Arabic; // _T Arabic_Extended_A; // _T Arabic_Extended_B; // _T Arabic_Extended_C; // _T Arabic_Mathematical_Alphabetic_Symbols; // _T Arabic_Presentation_Forms_A; // _T Arabic_Presentation_Forms_B; // _T Arabic_Supplement; // _T Armenian; // _T Arrows; // _T Avestan; // _T Balinese; // _T Bamum; // _T Bamum_Supplement; // _T Basic_Latin; // _T Bassa_Vah; // _T Batak; // _T Bengali; // _T Bhaiksuki; // _T Block_Elements; // _T Bopomofo; // _T Bopomofo_Extended; // _T Box_Drawing; // _T Brahmi; // _T Braille_Patterns; // _T Buginese; // _T Buhid; // _T Byzantine_Musical_Symbols; // _T Carian; // _T Caucasian_Albanian; // _T Chakma; // _T Cham; // _T Cherokee; // _T Cherokee_Supplement; // _T Chess_Symbols; // _T Chorasmian; // _T CJK_Compatibility; // _T CJK_Compatibility_Forms; // _T CJK_Compatibility_Ideographs; // _T CJK_Compatibility_Ideographs_Supplement; // _T CJK_Radicals_Supplement; // _T CJK_Strokes; // _T CJK_Symbols_and_Punctuation; // _T CJK_Unified_Ideographs; // _T CJK_Unified_Ideographs_Extension_A; // _T CJK_Unified_Ideographs_Extension_B; // _T CJK_Unified_Ideographs_Extension_C; // _T CJK_Unified_Ideographs_Extension_D; // _T CJK_Unified_Ideographs_Extension_E; // _T CJK_Unified_Ideographs_Extension_F; // _T CJK_Unified_Ideographs_Extension_G; // _T CJK_Unified_Ideographs_Extension_H; // _T CJK_Unified_Ideographs_Extension_I; // _T Combining_Diacritical_Marks; // _T Combining_Diacritical_Marks_Extended; // _T Combining_Diacritical_Marks_for_Symbols; // _T Combining_Diacritical_Marks_Supplement; // _T Combining_Half_Marks; // _T Common_Indic_Number_Forms; // _T Control_Pictures; // _T Coptic; // _T Coptic_Epact_Numbers; // _T Counting_Rod_Numerals; // _T Cuneiform; // _T Cuneiform_Numbers_and_Punctuation; // _T Currency_Symbols; // _T Cypriot_Syllabary; // _T Cypro_Minoan; // _T Cyrillic; // _T Cyrillic_Extended_A; // _T Cyrillic_Extended_B; // _T Cyrillic_Extended_C; // _T Cyrillic_Extended_D; // _T Cyrillic_Supplement; // _T Deseret; // _T Devanagari; // _T Devanagari_Extended; // _T Devanagari_Extended_A; // _T Dingbats; // _T Dives_Akuru; // _T Dogra; // _T Domino_Tiles; // _T Duployan; // _T Early_Dynastic_Cuneiform; // _T Egyptian_Hieroglyph_Format_Controls; // _T Egyptian_Hieroglyphs; // _T Elbasan; // _T Elymaic; // _T Emoticons; // _T Enclosed_Alphanumeric_Supplement; // _T Enclosed_Alphanumerics; // _T Enclosed_CJK_Letters_and_Months; // _T Enclosed_Ideographic_Supplement; // _T Ethiopic; // _T Ethiopic_Extended; // _T Ethiopic_Extended_A; // _T Ethiopic_Extended_B; // _T Ethiopic_Supplement; // _T General_Punctuation; // _T Geometric_Shapes; // _T Geometric_Shapes_Extended; // _T Georgian; // _T Georgian_Extended; // _T Georgian_Supplement; // _T Glagolitic; // _T Glagolitic_Supplement; // _T Gothic; // _T Grantha; // _T Greek_and_Coptic; // _T Greek_Extended; // _T Gujarati; // _T Gunjala_Gondi; // _T Gurmukhi; // _T Halfwidth_and_Fullwidth_Forms; // _T Hangul_Compatibility_Jamo; // _T Hangul_Jamo; // _T Hangul_Jamo_Extended_A; // _T Hangul_Jamo_Extended_B; // _T Hangul_Syllables; // _T Hanifi_Rohingya; // _T Hanunoo; // _T Hatran; // _T Hebrew; // _T High_Private_Use_Surrogates; // _T High_Surrogates; // _T Hiragana; // _T Ideographic_Description_Characters; // _T Ideographic_Symbols_and_Punctuation; // _T Imperial_Aramaic; // _T Indic_Siyaq_Numbers; // _T Inscriptional_Pahlavi; // _T Inscriptional_Parthian; // _T IPA_Extensions; // _T Javanese; // _T Kaithi; // _T Kaktovik_Numerals; // _T Kana_Extended_A; // _T Kana_Extended_B; // _T Kana_Supplement; // _T Kanbun; // _T Kangxi_Radicals; // _T Kannada; // _T Katakana; // _T Katakana_Phonetic_Extensions; // _T Kawi; // _T Kayah_Li; // _T Kharoshthi; // _T Khitan_Small_Script; // _T Khmer; // _T Khmer_Symbols; // _T Khojki; // _T Khudawadi; // _T Lao; // _T Latin_1_Supplement; // _T Latin_Extended_A; // _T Latin_Extended_Additional; // _T Latin_Extended_B; // _T Latin_Extended_C; // _T Latin_Extended_D; // _T Latin_Extended_E; // _T Latin_Extended_F; // _T Latin_Extended_G; // _T Lepcha; // _T Letterlike_Symbols; // _T Limbu; // _T Linear_A; // _T Linear_B_Ideograms; // _T Linear_B_Syllabary; // _T Lisu; // _T Lisu_Supplement; // _T Low_Surrogates; // _T Lycian; // _T Lydian; // _T Mahajani; // _T Mahjong_Tiles; // _T Makasar; // _T Malayalam; // _T Mandaic; // _T Manichaean; // _T Marchen; // _T Masaram_Gondi; // _T Mathematical_Alphanumeric_Symbols; // _T Mathematical_Operators; // _T Mayan_Numerals; // _T Medefaidrin; // _T Meetei_Mayek; // _T Meetei_Mayek_Extensions; // _T Mende_Kikakui; // _T Meroitic_Cursive; // _T Meroitic_Hieroglyphs; // _T Miao; // _T Miscellaneous_Mathematical_Symbols_A; // _T Miscellaneous_Mathematical_Symbols_B; // _T Miscellaneous_Symbols; // _T Miscellaneous_Symbols_and_Arrows; // _T Miscellaneous_Symbols_and_Pictographs; // _T Miscellaneous_Technical; // _T Modi; // _T Modifier_Tone_Letters; // _T Mongolian; // _T Mongolian_Supplement; // _T Mro; // _T Multani; // _T Musical_Symbols; // _T Myanmar; // _T Myanmar_Extended_A; // _T Myanmar_Extended_B; // _T Nabataean; // _T Nag_Mundari; // _T Nandinagari; // _T New_Tai_Lue; // _T Newa; // _T NKo; // _T Number_Forms; // _T Nushu; // _T Nyiakeng_Puachue_Hmong; // _T Ogham; // _T Ol_Chiki; // _T Old_Hungarian; // _T Old_Italic; // _T Old_North_Arabian; // _T Old_Permic; // _T Old_Persian; // _T Old_Sogdian; // _T Old_South_Arabian; // _T Old_Turkic; // _T Old_Uyghur; // _T Optical_Character_Recognition; // _T Oriya; // _T Ornamental_Dingbats; // _T Osage; // _T Osmanya; // _T Ottoman_Siyaq_Numbers; // _T Pahawh_Hmong; // _T Palmyrene; // _T Pau_Cin_Hau; // _T Phags_pa; // _T Phaistos_Disc; // _T Phoenician; // _T Phonetic_Extensions; // _T Phonetic_Extensions_Supplement; // _T Playing_Cards; // _T Private_Use_Area; // _T Psalter_Pahlavi; // _T Rejang; // _T Rumi_Numeral_Symbols; // _T Runic; // _T Samaritan; // _T Saurashtra; // _T Sharada; // _T Shavian; // _T Shorthand_Format_Controls; // _T Siddham; // _T Sinhala; // _T Sinhala_Archaic_Numbers; // _T Small_Form_Variants; // _T Small_Kana_Extension; // _T Sogdian; // _T Sora_Sompeng; // _T Soyombo; // _T Spacing_Modifier_Letters; // _T Specials; // _T Sundanese; // _T Sundanese_Supplement; // _T Superscripts_and_Subscripts; // _T Supplemental_Arrows_A; // _T Supplemental_Arrows_B; // _T Supplemental_Arrows_C; // _T Supplemental_Mathematical_Operators; // _T Supplemental_Punctuation; // _T Supplemental_Symbols_and_Pictographs; // _T Supplementary_Private_Use_Area_A; // _T Supplementary_Private_Use_Area_B; // _T Sutton_SignWriting; // _T Syloti_Nagri; // _T Symbols_and_Pictographs_Extended_A; // _T Symbols_for_Legacy_Computing; // _T Syriac; // _T Syriac_Supplement; // _T Tagalog; // _T Tagbanwa; // _T Tags; // _T Tai_Le; // _T Tai_Tham; // _T Tai_Viet; // _T Tai_Xuan_Jing_Symbols; // _T Takri; // _T Tamil; // _T Tamil_Supplement; // _T Tangsa; // _T Tangut; // _T Tangut_Components; // _T Tangut_Supplement; // _T Telugu; // _T Thaana; // _T Thai; // _T Tibetan; // _T Tifinagh; // _T Tirhuta; // _T Toto; // _T Transport_and_Map_Symbols; // _T Ugaritic; // _T Unified_Canadian_Aboriginal_Syllabics; // _T Unified_Canadian_Aboriginal_Syllabics_Extended; // _T Unified_Canadian_Aboriginal_Syllabics_Extended_A; // _T Vai; // _T Variation_Selectors; // _T Variation_Selectors_Supplement; // _T Vedic_Extensions; // _T Vertical_Forms; // _T Vithkuqi; // _T Wancho; // _T Warang_Citi; // _T Yezidi; // _T Yi_Radicals; // _T Yi_Syllables; // _T Yijing_Hexagram_Symbols; // _T Zanabazar_Square; // _T Znamenny_Musical_Notation; } Aliases Name Description _T _U Functions Name Description tab Variables Name Description Adlam Aegean_Numbers Ahom Alchemical_Symbols Alphabetic_Presentation_Forms Anatolian_Hieroglyphs Ancient_Greek_Musical_Notation Ancient_Greek_Numbers Ancient_Symbols Arabic Arabic_Extended_A Arabic_Extended_B Arabic_Extended_C Arabic_Mathematical_Alphabetic_Symbols Arabic_Presentation_Forms_A Arabic_Presentation_Forms_B Arabic_Supplement Armenian Arrows Avestan Balinese Bamum Bamum_Supplement Basic_Latin Bassa_Vah Batak Bengali Bhaiksuki Block_Elements Bopomofo Bopomofo_Extended Box_Drawing Brahmi Braille_Patterns Buginese Buhid Byzantine_Musical_Symbols Carian Caucasian_Albanian Chakma Cham Cherokee Cherokee_Supplement Chess_Symbols Chorasmian CJK_Compatibility CJK_Compatibility_Forms CJK_Compatibility_Ideographs CJK_Compatibility_Ideographs_Supplement CJK_Radicals_Supplement CJK_Strokes CJK_Symbols_and_Punctuation CJK_Unified_Ideographs CJK_Unified_Ideographs_Extension_A CJK_Unified_Ideographs_Extension_B CJK_Unified_Ideographs_Extension_C CJK_Unified_Ideographs_Extension_D CJK_Unified_Ideographs_Extension_E CJK_Unified_Ideographs_Extension_F CJK_Unified_Ideographs_Extension_G CJK_Unified_Ideographs_Extension_H CJK_Unified_Ideographs_Extension_I Combining_Diacritical_Marks Combining_Diacritical_Marks_Extended Combining_Diacritical_Marks_for_Symbols Combining_Diacritical_Marks_Supplement Combining_Half_Marks Common_Indic_Number_Forms Control_Pictures Coptic Coptic_Epact_Numbers Counting_Rod_Numerals Cuneiform Cuneiform_Numbers_and_Punctuation Currency_Symbols Cypriot_Syllabary Cypro_Minoan Cyrillic Cyrillic_Extended_A Cyrillic_Extended_B Cyrillic_Extended_C Cyrillic_Extended_D Cyrillic_Supplement Deseret Devanagari Devanagari_Extended Devanagari_Extended_A Dingbats Dives_Akuru Dogra Domino_Tiles Duployan Early_Dynastic_Cuneiform Egyptian_Hieroglyph_Format_Controls Egyptian_Hieroglyphs Elbasan Elymaic Emoticons Enclosed_Alphanumeric_Supplement Enclosed_Alphanumerics Enclosed_CJK_Letters_and_Months Enclosed_Ideographic_Supplement Ethiopic Ethiopic_Extended Ethiopic_Extended_A Ethiopic_Extended_B Ethiopic_Supplement General_Punctuation Geometric_Shapes Geometric_Shapes_Extended Georgian Georgian_Extended Georgian_Supplement Glagolitic Glagolitic_Supplement Gothic Grantha Greek_and_Coptic Greek_Extended Gujarati Gunjala_Gondi Gurmukhi Halfwidth_and_Fullwidth_Forms Hangul_Compatibility_Jamo Hangul_Jamo Hangul_Jamo_Extended_A Hangul_Jamo_Extended_B Hangul_Syllables Hanifi_Rohingya Hanunoo Hatran Hebrew High_Private_Use_Surrogates High_Surrogates Hiragana Ideographic_Description_Characters Ideographic_Symbols_and_Punctuation Imperial_Aramaic Indic_Siyaq_Numbers Inscriptional_Pahlavi Inscriptional_Parthian IPA_Extensions Javanese Kaithi Kaktovik_Numerals Kana_Extended_A Kana_Extended_B Kana_Supplement Kanbun Kangxi_Radicals Kannada Katakana Katakana_Phonetic_Extensions Kawi Kayah_Li Kharoshthi Khitan_Small_Script Khmer Khmer_Symbols Khojki Khudawadi Lao Latin_1_Supplement Latin_Extended_A Latin_Extended_Additional Latin_Extended_B Latin_Extended_C Latin_Extended_D Latin_Extended_E Latin_Extended_F Latin_Extended_G Lepcha Letterlike_Symbols Limbu Linear_A Linear_B_Ideograms Linear_B_Syllabary Lisu Lisu_Supplement Low_Surrogates Lycian Lydian Mahajani Mahjong_Tiles Makasar Malayalam Mandaic Manichaean Marchen Masaram_Gondi Mathematical_Alphanumeric_Symbols Mathematical_Operators Mayan_Numerals Medefaidrin Meetei_Mayek Meetei_Mayek_Extensions Mende_Kikakui Meroitic_Cursive Meroitic_Hieroglyphs Miao Miscellaneous_Mathematical_Symbols_A Miscellaneous_Mathematical_Symbols_B Miscellaneous_Symbols Miscellaneous_Symbols_and_Arrows Miscellaneous_Symbols_and_Pictographs Miscellaneous_Technical Modi Modifier_Tone_Letters Mongolian Mongolian_Supplement Mro Multani Musical_Symbols Myanmar Myanmar_Extended_A Myanmar_Extended_B Nabataean Nag_Mundari Nandinagari New_Tai_Lue Newa NKo Number_Forms Nushu Nyiakeng_Puachue_Hmong Ogham Ol_Chiki Old_Hungarian Old_Italic Old_North_Arabian Old_Permic Old_Persian Old_Sogdian Old_South_Arabian Old_Turkic Old_Uyghur Optical_Character_Recognition Oriya Ornamental_Dingbats Osage Osmanya Ottoman_Siyaq_Numbers Pahawh_Hmong Palmyrene Pau_Cin_Hau Phags_pa Phaistos_Disc Phoenician Phonetic_Extensions Phonetic_Extensions_Supplement Playing_Cards Private_Use_Area Psalter_Pahlavi Rejang Rumi_Numeral_Symbols Runic Samaritan Saurashtra Sharada Shavian Shorthand_Format_Controls Siddham Sinhala Sinhala_Archaic_Numbers Small_Form_Variants Small_Kana_Extension Sogdian Sora_Sompeng Soyombo Spacing_Modifier_Letters Specials Sundanese Sundanese_Supplement Superscripts_and_Subscripts Supplemental_Arrows_A Supplemental_Arrows_B Supplemental_Arrows_C Supplemental_Mathematical_Operators Supplemental_Punctuation Supplemental_Symbols_and_Pictographs Supplementary_Private_Use_Area_A Supplementary_Private_Use_Area_B Sutton_SignWriting Syloti_Nagri Symbols_and_Pictographs_Extended_A Symbols_for_Legacy_Computing Syriac Syriac_Supplement Tagalog Tagbanwa Tags Tai_Le Tai_Tham Tai_Viet Tai_Xuan_Jing_Symbols Takri Tamil Tamil_Supplement Tangsa Tangut Tangut_Components Tangut_Supplement Telugu Thaana Thai Tibetan Tifinagh Tirhuta Toto Transport_and_Map_Symbols Ugaritic Unified_Canadian_Aboriginal_Syllabics Unified_Canadian_Aboriginal_Syllabics_Extended Unified_Canadian_Aboriginal_Syllabics_Extended_A Vai Variation_Selectors Variation_Selectors_Supplement Vedic_Extensions Vertical_Forms Vithkuqi Wancho Warang_Citi Yezidi Yi_Radicals Yi_Syllables Yijing_Hexagram_Symbols Zanabazar_Square Znamenny_Musical_Notation"
  },
  "phobos/std/internal/unicode_tables/Structs/hangul.html": {
    "href": "phobos/std/internal/unicode_tables/Structs/hangul.html",
    "title": "Struct - hangul | Marmos Demo",
    "keywords": "Struct - hangul Module std.internal.unicode_tables public struct hangul { // <bug: unknown> tab( ) static; // _T L; // _T LV; // _T LVT; // _T T; // _T V; } Aliases Name Description _T _U Functions Name Description tab Variables Name Description L LV LVT T V"
  },
  "phobos/std/internal/unicode_tables/Structs/scripts.html": {
    "href": "phobos/std/internal/unicode_tables/Structs/scripts.html",
    "title": "Struct - scripts | Marmos Demo",
    "keywords": "Struct - scripts Module std.internal.unicode_tables public struct scripts { // <bug: unknown> tab( ) static; // _T Adlam; // _T Ahom; // _T Anatolian_Hieroglyphs; // _T Arabic; // _T Armenian; // _T Avestan; // _T Balinese; // _T Bamum; // _T Bassa_Vah; // _T Batak; // _T Bengali; // _T Bhaiksuki; // _T Bopomofo; // _T Brahmi; // _T Braille; // _T Buginese; // _T Buhid; // _T Canadian_Aboriginal; // _T Carian; // _T Caucasian_Albanian; // _T Chakma; // _T Cham; // _T Cherokee; // _T Chorasmian; // _T Common; // _T Coptic; // _T Cuneiform; // _T Cypriot; // _T Cypro_Minoan; // _T Cyrillic; // _T Deseret; // _T Devanagari; // _T Dives_Akuru; // _T Dogra; // _T Duployan; // _T Egyptian_Hieroglyphs; // _T Elbasan; // _T Elymaic; // _T Ethiopic; // _T Georgian; // _T Glagolitic; // _T Gothic; // _T Grantha; // _T Greek; // _T Gujarati; // _T Gunjala_Gondi; // _T Gurmukhi; // _T Han; // _T Hangul; // _T Hanifi_Rohingya; // _T Hanunoo; // _T Hatran; // _T Hebrew; // _T Hiragana; // _T Imperial_Aramaic; // _T Inherited; // _T Inscriptional_Pahlavi; // _T Inscriptional_Parthian; // _T Javanese; // _T Kaithi; // _T Kannada; // _T Katakana; // _T Kawi; // _T Kayah_Li; // _T Kharoshthi; // _T Khitan_Small_Script; // _T Khmer; // _T Khojki; // _T Khudawadi; // _T Lao; // _T Latin; // _T Lepcha; // _T Limbu; // _T Linear_A; // _T Linear_B; // _T Lisu; // _T Lycian; // _T Lydian; // _T Mahajani; // _T Makasar; // _T Malayalam; // _T Mandaic; // _T Manichaean; // _T Marchen; // _T Masaram_Gondi; // _T Medefaidrin; // _T Meetei_Mayek; // _T Mende_Kikakui; // _T Meroitic_Cursive; // _T Meroitic_Hieroglyphs; // _T Miao; // _T Modi; // _T Mongolian; // _T Mro; // _T Multani; // _T Myanmar; // _T Nabataean; // _T Nag_Mundari; // _T Nandinagari; // _T New_Tai_Lue; // _T Newa; // _T Nko; // _T Nushu; // _T Nyiakeng_Puachue_Hmong; // _T Ogham; // _T Ol_Chiki; // _T Old_Hungarian; // _T Old_Italic; // _T Old_North_Arabian; // _T Old_Permic; // _T Old_Persian; // _T Old_Sogdian; // _T Old_South_Arabian; // _T Old_Turkic; // _T Old_Uyghur; // _T Oriya; // _T Osage; // _T Osmanya; // _T Pahawh_Hmong; // _T Palmyrene; // _T Pau_Cin_Hau; // _T Phags_Pa; // _T Phoenician; // _T Psalter_Pahlavi; // _T Rejang; // _T Runic; // _T Samaritan; // _T Saurashtra; // _T Sharada; // _T Shavian; // _T Siddham; // _T SignWriting; // _T Sinhala; // _T Sogdian; // _T Sora_Sompeng; // _T Soyombo; // _T Sundanese; // _T Syloti_Nagri; // _T Syriac; // _T Tagalog; // _T Tagbanwa; // _T Tai_Le; // _T Tai_Tham; // _T Tai_Viet; // _T Takri; // _T Tamil; // _T Tangsa; // _T Tangut; // _T Telugu; // _T Thaana; // _T Thai; // _T Tibetan; // _T Tifinagh; // _T Tirhuta; // _T Toto; // _T Ugaritic; // _T Vai; // _T Vithkuqi; // _T Wancho; // _T Warang_Citi; // _T Yezidi; // _T Yi; // _T Zanabazar_Square; } Aliases Name Description _T _U Functions Name Description tab Variables Name Description Adlam Ahom Anatolian_Hieroglyphs Arabic Armenian Avestan Balinese Bamum Bassa_Vah Batak Bengali Bhaiksuki Bopomofo Brahmi Braille Buginese Buhid Canadian_Aboriginal Carian Caucasian_Albanian Chakma Cham Cherokee Chorasmian Common Coptic Cuneiform Cypriot Cypro_Minoan Cyrillic Deseret Devanagari Dives_Akuru Dogra Duployan Egyptian_Hieroglyphs Elbasan Elymaic Ethiopic Georgian Glagolitic Gothic Grantha Greek Gujarati Gunjala_Gondi Gurmukhi Han Hangul Hanifi_Rohingya Hanunoo Hatran Hebrew Hiragana Imperial_Aramaic Inherited Inscriptional_Pahlavi Inscriptional_Parthian Javanese Kaithi Kannada Katakana Kawi Kayah_Li Kharoshthi Khitan_Small_Script Khmer Khojki Khudawadi Lao Latin Lepcha Limbu Linear_A Linear_B Lisu Lycian Lydian Mahajani Makasar Malayalam Mandaic Manichaean Marchen Masaram_Gondi Medefaidrin Meetei_Mayek Mende_Kikakui Meroitic_Cursive Meroitic_Hieroglyphs Miao Modi Mongolian Mro Multani Myanmar Nabataean Nag_Mundari Nandinagari New_Tai_Lue Newa Nko Nushu Nyiakeng_Puachue_Hmong Ogham Ol_Chiki Old_Hungarian Old_Italic Old_North_Arabian Old_Permic Old_Persian Old_Sogdian Old_South_Arabian Old_Turkic Old_Uyghur Oriya Osage Osmanya Pahawh_Hmong Palmyrene Pau_Cin_Hau Phags_Pa Phoenician Psalter_Pahlavi Rejang Runic Samaritan Saurashtra Sharada Shavian Siddham SignWriting Sinhala Sogdian Sora_Sompeng Soyombo Sundanese Syloti_Nagri Syriac Tagalog Tagbanwa Tai_Le Tai_Tham Tai_Viet Takri Tamil Tangsa Tangut Telugu Thaana Thai Tibetan Tifinagh Tirhuta Toto Ugaritic Vai Vithkuqi Wancho Warang_Citi Yezidi Yi Zanabazar_Square"
  },
  "phobos/std/internal/unicode_tables/Structs/uniProps.html": {
    "href": "phobos/std/internal/unicode_tables/Structs/uniProps.html",
    "title": "Struct - uniProps | Marmos Demo",
    "keywords": "Struct - uniProps Module std.internal.unicode_tables public struct uniProps { // <bug: unknown> tab( ) static; // _T Alphabetic; // _T ASCII_Hex_Digit; // _T Bidi_Control; // _T Case_Ignorable; // _T Cased; // _T Cc; // _T Cf; // _T Cn; // _T Co; // _T Cs; // _T Dash; // _T Default_Ignorable_Code_Point; // _T Deprecated; // _T Diacritic; // _T Extender; // _T Grapheme_Base; // _T Grapheme_Extend; // _T Grapheme_Link; // _T Hex_Digit; // _T Hyphen; // _T ID_Compat_Math_Continue; // _T ID_Compat_Math_Start; // _T ID_Continue; // _T ID_Start; // _T Ideographic; // _T IDS_Binary_Operator; // _T IDS_Trinary_Operator; // _T IDS_Unary_Operator; // _T Join_Control; // _T Ll; // _T Lm; // _T Lo; // _T Logical_Order_Exception; // _T Lowercase; // _T Lt; // _T Lu; // _T Math; // _T Mc; // _T Me; // _T Mn; // _T Nd; // _T Nl; // _T No; // _T Noncharacter_Code_Point; // _T Other_Alphabetic; // _T Other_Default_Ignorable_Code_Point; // _T Other_Grapheme_Extend; // _T Other_ID_Continue; // _T Other_ID_Start; // _T Other_Lowercase; // _T Other_Math; // _T Other_Uppercase; // _T Pattern_Syntax; // _T Pattern_White_Space; // _T Pc; // _T Pd; // _T Pe; // _T Pf; // _T Pi; // _T Po; // _T Prepended_Concatenation_Mark; // _T Ps; // _T Quotation_Mark; // _T Radical; // _T Regional_Indicator; // _T Sc; // _T Sentence_Terminal; // _T Sk; // _T Sm; // _T So; // _T Soft_Dotted; // _T Terminal_Punctuation; // _T Unified_Ideograph; // _T Uppercase; // _T Variation_Selector; // _T White_Space; // _T XID_Continue; // _T XID_Start; // _T Zl; // _T Zp; // _T Zs; } Aliases Name Description _T _U Functions Name Description tab Variables Name Description Alphabetic ASCII_Hex_Digit Bidi_Control Case_Ignorable Cased Cc Cf Cn Co Cs Dash Default_Ignorable_Code_Point Deprecated Diacritic Extender Grapheme_Base Grapheme_Extend Grapheme_Link Hex_Digit Hyphen ID_Compat_Math_Continue ID_Compat_Math_Start ID_Continue ID_Start Ideographic IDS_Binary_Operator IDS_Trinary_Operator IDS_Unary_Operator Join_Control Ll Lm Lo Logical_Order_Exception Lowercase Lt Lu Math Mc Me Mn Nd Nl No Noncharacter_Code_Point Other_Alphabetic Other_Default_Ignorable_Code_Point Other_Grapheme_Extend Other_ID_Continue Other_ID_Start Other_Lowercase Other_Math Other_Uppercase Pattern_Syntax Pattern_White_Space Pc Pd Pe Pf Pi Po Prepended_Concatenation_Mark Ps Quotation_Mark Radical Regional_Indicator Sc Sentence_Terminal Sk Sm So Soft_Dotted Terminal_Punctuation Unified_Ideograph Uppercase Variation_Selector White_Space XID_Continue XID_Start Zl Zp Zs"
  },
  "phobos/std/internal/unicode_tables/blocks/Functions/tab.html": {
    "href": "phobos/std/internal/unicode_tables/blocks/Functions/tab.html",
    "title": "Overloads for - tab | Marmos Demo",
    "keywords": "Overloads for - tab Module std.internal.unicode_tables Parent blocks tab() <bug: unknown> tab( ) static"
  },
  "phobos/std/internal/unicode_tables/hangul/Functions/tab.html": {
    "href": "phobos/std/internal/unicode_tables/hangul/Functions/tab.html",
    "title": "Overloads for - tab | Marmos Demo",
    "keywords": "Overloads for - tab Module std.internal.unicode_tables Parent hangul tab() <bug: unknown> tab( ) static"
  },
  "phobos/std/internal/unicode_tables/scripts/Functions/tab.html": {
    "href": "phobos/std/internal/unicode_tables/scripts/Functions/tab.html",
    "title": "Overloads for - tab | Marmos Demo",
    "keywords": "Overloads for - tab Module std.internal.unicode_tables Parent scripts tab() <bug: unknown> tab( ) static"
  },
  "phobos/std/internal/unicode_tables/uniProps/Functions/tab.html": {
    "href": "phobos/std/internal/unicode_tables/uniProps/Functions/tab.html",
    "title": "Overloads for - tab | Marmos Demo",
    "keywords": "Overloads for - tab Module std.internal.unicode_tables Parent uniProps tab() <bug: unknown> tab( ) static"
  },
  "phobos/std/internal/windows/advapi32/Functions/freeAdvapi32.html": {
    "href": "phobos/std/internal/windows/advapi32/Functions/freeAdvapi32.html",
    "title": "Overloads for - freeAdvapi32 | Marmos Demo",
    "keywords": "Overloads for - freeAdvapi32 Module std.internal.windows.advapi32 freeAdvapi32() void freeAdvapi32( )"
  },
  "phobos/std/internal/windows/advapi32/Functions/isWow64.html": {
    "href": "phobos/std/internal/windows/advapi32/Functions/isWow64.html",
    "title": "Overloads for - isWow64 | Marmos Demo",
    "keywords": "Overloads for - isWow64 Module std.internal.windows.advapi32 isWow64() bool isWow64( )"
  },
  "phobos/std/internal/windows/advapi32/Functions/loadAdvapi32.html": {
    "href": "phobos/std/internal/windows/advapi32/Functions/loadAdvapi32.html",
    "title": "Overloads for - loadAdvapi32 | Marmos Demo",
    "keywords": "Overloads for - loadAdvapi32 Module std.internal.windows.advapi32 loadAdvapi32() void loadAdvapi32( )"
  },
  "phobos/std/internal/windows/advapi32/Overview.html": {
    "href": "phobos/std/internal/windows/advapi32/Overview.html",
    "title": "Module - std.internal.windows.advapi32 | Marmos Demo",
    "keywords": "Module - std.internal.windows.advapi32 About The only purpose of this module is to do the static construction for std.windows.registry, to eliminate cyclic construction errors. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: Kenji Hara Source: $(PHOBOSSRC std/internal/windows/advapi32.d) Functions Name Description freeAdvapi32 isWow64 loadAdvapi32 Variables Name Description hAdvapi32 pRegDeleteKeyExW"
  },
  "phobos/std/json/Classes/JSONException.html": {
    "href": "phobos/std/json/Classes/JSONException.html",
    "title": "Class - JSONException | Marmos Demo",
    "keywords": "Class - JSONException Module std.json public class JSONException { } About Exception thrown on JSON errors"
  },
  "phobos/std/json/Functions/parseJSON.html": {
    "href": "phobos/std/json/Functions/parseJSON.html",
    "title": "Overloads for - parseJSON | Marmos Demo",
    "keywords": "Overloads for - parseJSON Module std.json parseJSON(json, maxDepth, options) JSONValue parseJSON( T json, int maxDepth, JSONOptions options ) Parses a serialized string and returns a tree of JSON values. Throws: $(LREF JSONException) if string does not follow the JSON grammar or the depth exceeds the max depth, $(LREF ConvException) if a number in the input cannot be represented by a native D type. Params: json = json-formatted string to parse maxDepth = maximum depth of nesting allowed, -1 disables depth checking options = enable decoding string representations of NaN/Inf as float values parseJSON(json, options) JSONValue parseJSON( T json, JSONOptions options ) Parses a serialized string and returns a tree of JSON values. Throws: $(LREF JSONException) if the depth exceeds the max depth. Params: json = json-formatted string to parse options = enable decoding string representations of NaN/Inf as float values"
  },
  "phobos/std/json/Functions/toJSON.html": {
    "href": "phobos/std/json/Functions/toJSON.html",
    "title": "Overloads for - toJSON | Marmos Demo",
    "keywords": "Overloads for - toJSON Module std.json toJSON(root, pretty, options) string toJSON( JSONValue root, bool pretty, JSONOptions options ) Takes a tree of JSON values and returns the serialized string. Any Object types will be serialized in a key-sorted order. If pretty is false no whitespaces are generated. If pretty is true serialized string is formatted to be human-readable. Set the $(LREF JSONOptions.specialFloatLiterals) flag is set in options to encode NaN/Infinity as strings. toJSON(json, root, pretty, options) void toJSON( Out json, JSONValue root, bool pretty, JSONOptions options )"
  },
  "phobos/std/json/JSONValue/Functions/array.html": {
    "href": "phobos/std/json/JSONValue/Functions/array.html",
    "title": "Overloads for - array | Marmos Demo",
    "keywords": "Overloads for - array Module std.json Parent JSONValue array() <bug: unknown> array( ) Value getter/setter for JSONType.array . Throws: JSONException for read access if type is not JSONType.array . Note: This is @system because of the following pattern: --- auto a = &(json.array()); json.uinteger = 0; // overwrite array pointer (*a)[0] = \"world\"; // segmentation fault --- array(v) <bug: unknown> array( <bug: unknown> v ) ditto"
  },
  "phobos/std/json/JSONValue/Functions/arrayNoRef.html": {
    "href": "phobos/std/json/JSONValue/Functions/arrayNoRef.html",
    "title": "Overloads for - arrayNoRef | Marmos Demo",
    "keywords": "Overloads for - arrayNoRef Module std.json Parent JSONValue arrayNoRef() <bug: unknown> arrayNoRef( ) Value getter for JSONType.array . Unlike array , this retrieves the array by value and can be used in @safe code. One possible caveat is that, if you append to the returned array, the new values aren't visible in the JSONValue : --- JSONValue json; json.array = [JSONValue(\"hello\")]; json.arrayNoRef ~= JSONValue(\"world\"); assert(json.array.length == 1); --- Throws: JSONException for read access if type is not JSONType.array ."
  },
  "phobos/std/json/JSONValue/Functions/boolean.html": {
    "href": "phobos/std/json/JSONValue/Functions/boolean.html",
    "title": "Overloads for - boolean | Marmos Demo",
    "keywords": "Overloads for - boolean Module std.json Parent JSONValue boolean() bool boolean( ) Value getter/setter for boolean stored in JSON. Throws: JSONException for read access if this.type is not JSONType.true_ or JSONType.false_ . boolean(v) bool boolean( bool v ) ditto"
  },
  "phobos/std/json/JSONValue/Functions/floating.html": {
    "href": "phobos/std/json/JSONValue/Functions/floating.html",
    "title": "Overloads for - floating | Marmos Demo",
    "keywords": "Overloads for - floating Module std.json Parent JSONValue floating() double floating( ) Value getter/setter for JSONType.float_ . Note that despite the name, this is a $(B 64)-bit double , not a 32-bit float . Throws: JSONException for read access if type is not JSONType.float_ . floating(v) double floating( double v ) ditto"
  },
  "phobos/std/json/JSONValue/Functions/integer.html": {
    "href": "phobos/std/json/JSONValue/Functions/integer.html",
    "title": "Overloads for - integer | Marmos Demo",
    "keywords": "Overloads for - integer Module std.json Parent JSONValue integer() long integer( ) Value getter/setter for JSONType.integer . Throws: JSONException for read access if type is not JSONType.integer . integer(v) long integer( long v ) ditto"
  },
  "phobos/std/json/JSONValue/Functions/isNull.html": {
    "href": "phobos/std/json/JSONValue/Functions/isNull.html",
    "title": "Overloads for - isNull | Marmos Demo",
    "keywords": "Overloads for - isNull Module std.json Parent JSONValue isNull() bool isNull( ) Test whether the type is JSONType.null_"
  },
  "phobos/std/json/JSONValue/Functions/object.html": {
    "href": "phobos/std/json/JSONValue/Functions/object.html",
    "title": "Overloads for - object | Marmos Demo",
    "keywords": "Overloads for - object Module std.json Parent JSONValue object() <bug: unknown> object( ) Value getter/setter for JSONType.object . Throws: JSONException for read access if type is not JSONType.object . Note: This is @system because of the following pattern: --- auto a = &(json.object()); json.uinteger = 0; // overwrite AA pointer (*a)[\"hello\"] = \"world\"; // segmentation fault --- object(v) <bug: unknown> object( <bug: unknown> v ) ditto"
  },
  "phobos/std/json/JSONValue/Functions/objectNoRef.html": {
    "href": "phobos/std/json/JSONValue/Functions/objectNoRef.html",
    "title": "Overloads for - objectNoRef | Marmos Demo",
    "keywords": "Overloads for - objectNoRef Module std.json Parent JSONValue objectNoRef() <bug: unknown> objectNoRef( ) Value getter for JSONType.object . Unlike object , this retrieves the object by value and can be used in @safe code. One possible caveat is that, if the returned value is null, modifications will not be visible: --- JSONValue json; json.object = null; json.objectNoRef[\"hello\"] = JSONValue(\"world\"); assert(\"hello\" !in json.object); --- Throws: JSONException for read access if type is not JSONType.object ."
  },
  "phobos/std/json/JSONValue/Functions/opApply.html": {
    "href": "phobos/std/json/JSONValue/Functions/opApply.html",
    "title": "Overloads for - opApply | Marmos Demo",
    "keywords": "Overloads for - opApply Module std.json Parent JSONValue opApply(dg) int opApply( <bug: unknown> dg ) Implements the foreach opApply interface for json arrays. opApply(dg) int opApply( <bug: unknown> dg ) Implements the foreach opApply interface for json objects."
  },
  "phobos/std/json/JSONValue/Functions/opEquals.html": {
    "href": "phobos/std/json/JSONValue/Functions/opEquals.html",
    "title": "Overloads for - opEquals | Marmos Demo",
    "keywords": "Overloads for - opEquals Module std.json Parent JSONValue opEquals(rhs) bool opEquals( JSONValue rhs ) opEquals(rhs) bool opEquals( JSONValue rhs ) ditto"
  },
  "phobos/std/json/JSONValue/Functions/opIndex.html": {
    "href": "phobos/std/json/JSONValue/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.json Parent JSONValue opIndex(i) JSONValue opIndex( size_t i ) Array syntax for JSON arrays. Throws: JSONException if type is not JSONType.array . opIndex(k) JSONValue opIndex( string k ) Hash syntax for JSON objects. Throws: JSONException if type is not JSONType.object ."
  },
  "phobos/std/json/JSONValue/Functions/str.html": {
    "href": "phobos/std/json/JSONValue/Functions/str.html",
    "title": "Overloads for - str | Marmos Demo",
    "keywords": "Overloads for - str Module std.json Parent JSONValue str() string str( ) Value getter/setter for JSONType.string . Throws: JSONException for read access if type is not JSONType.string . str(v) string str( string v ) ditto"
  },
  "phobos/std/json/JSONValue/Functions/toPrettyString.html": {
    "href": "phobos/std/json/JSONValue/Functions/toPrettyString.html",
    "title": "Overloads for - toPrettyString | Marmos Demo",
    "keywords": "Overloads for - toPrettyString Module std.json Parent JSONValue toPrettyString(options) string toPrettyString( JSONOptions options ) Implicitly calls toJSON on this JSONValue, like toString , but also passes $(I true) as $(I pretty) argument. $(I options) can be used to tweak the conversion behavior"
  },
  "phobos/std/json/JSONValue/Functions/toString.html": {
    "href": "phobos/std/json/JSONValue/Functions/toString.html",
    "title": "Overloads for - toString | Marmos Demo",
    "keywords": "Overloads for - toString Module std.json Parent JSONValue toString(options) string toString( JSONOptions options ) Implicitly calls toJSON on this JSONValue. $(I options) can be used to tweak the conversion behavior."
  },
  "phobos/std/json/JSONValue/Functions/type.html": {
    "href": "phobos/std/json/JSONValue/Functions/type.html",
    "title": "Overloads for - type | Marmos Demo",
    "keywords": "Overloads for - type Module std.json Parent JSONValue type() JSONType type( ) Returns the JSONType of the value stored in this structure."
  },
  "phobos/std/json/JSONValue/Functions/uinteger.html": {
    "href": "phobos/std/json/JSONValue/Functions/uinteger.html",
    "title": "Overloads for - uinteger | Marmos Demo",
    "keywords": "Overloads for - uinteger Module std.json Parent JSONValue uinteger() ulong uinteger( ) Value getter/setter for JSONType.uinteger . Throws: JSONException for read access if type is not JSONType.uinteger . uinteger(v) ulong uinteger( ulong v ) ditto"
  },
  "phobos/std/json/Overview.html": {
    "href": "phobos/std/json/Overview.html",
    "title": "Module - std.json | Marmos Demo",
    "keywords": "Module - std.json About Implements functionality to read and write JavaScript Object Notation values. JavaScript Object Notation is a lightweight data interchange format commonly used in web services and configuration files. It's easy for humans to read and write, and it's easy for machines to parse and generate. $(RED Warning: While $(LREF JSONValue) is fine for small-scale use, at the range of hundreds of megabytes it is known to cause and exacerbate GC problems. If you encounter problems, try replacing it with a stream parser. See also $(LINK https://forum.dlang.org/post/dzfyaxypmkdrpakmycjv@forum.dlang.org).) Copyright: Copyright Jeremie Pelletier 2008 - 2009. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: Jeremie Pelletier, David Herberth References: $(LINK http://json.org/), $(LINK http://seriot.ch/parsing_json.html) Source: $(PHOBOSSRC std/json.d) Aliases Name Description JSON_TYPE Classes Name Description JSONException Exception thrown on JSON errors Structs Name Description JSONValue JSON value node Functions Name Description parseJSON Parses a serialized string and returns a tree of JSON values. Throws: $(LREF JSONException) if string does not follow the JSON grammar or the depth exceeds the max depth, $(LREF ConvException) if a number in the input cannot be represented by a native D type. Params: json = json-formatted string to parse maxDepth = maximum depth of nesting allowed, -1 disables depth checking options = enable decoding string representations of NaN/Inf as float values toJSON Takes a tree of JSON values and returns the serialized string."
  },
  "phobos/std/json/Structs/JSONValue.html": {
    "href": "phobos/std/json/Structs/JSONValue.html",
    "title": "Struct - JSONValue | Marmos Demo",
    "keywords": "Struct - JSONValue Module std.json public struct JSONValue { // Value getter/setter for `JSONType.array` . Throws: `JSONException` for read access if `type` is not `JSONType.array` . Note: This is @system because of the following pattern: --- auto a = &(json.array()); json.uinteger = 0; // overwrite array pointer (*a)[0] = \"world\"; // segmentation fault --- <bug: unknown> array( ) ; // ditto <bug: unknown> array( <bug: unknown> v ) ; // Value getter for `JSONType.array` . Unlike `array` , this retrieves the array by value and can be used in @safe code. <bug: unknown> arrayNoRef( ) ; // Value getter/setter for boolean stored in JSON. Throws: `JSONException` for read access if `this.type` is not `JSONType.true_` or `JSONType.false_` . bool boolean( ) ; // ditto bool boolean( bool v ) ; // Value getter/setter for `JSONType.float_` . Note that despite the name, this is a $(B 64)-bit `double` , not a 32-bit `float` . Throws: `JSONException` for read access if `type` is not `JSONType.float_` . double floating( ) ; // ditto double floating( double v ) ; // Value getter/setter for `JSONType.integer` . Throws: `JSONException` for read access if `type` is not `JSONType.integer` . long integer( ) ; // ditto long integer( long v ) ; // Test whether the type is `JSONType.null_` bool isNull( ) ; // Value getter/setter for `JSONType.object` . Throws: `JSONException` for read access if `type` is not `JSONType.object` . Note: This is @system because of the following pattern: --- auto a = &(json.object()); json.uinteger = 0; // overwrite AA pointer (*a)[\"hello\"] = \"world\"; // segmentation fault --- <bug: unknown> object( ) ; // ditto <bug: unknown> object( <bug: unknown> v ) ; // Value getter for `JSONType.object` . Unlike `object` , this retrieves the object by value and can be used in @safe code. <bug: unknown> objectNoRef( ) ; // Implements the foreach `opApply` interface for json arrays. int opApply( <bug: unknown> dg ) ; // Implements the foreach `opApply` interface for json objects. int opApply( <bug: unknown> dg ) ; // bool opEquals( JSONValue rhs ) ; // ditto bool opEquals( JSONValue rhs ) ; // Array syntax for JSON arrays. Throws: `JSONException` if `type` is not `JSONType.array` . JSONValue opIndex( size_t i ) ; // Hash syntax for JSON objects. Throws: `JSONException` if `type` is not `JSONType.object` . JSONValue opIndex( string k ) ; // Value getter/setter for `JSONType.string` . Throws: `JSONException` for read access if `type` is not `JSONType.string` . string str( ) ; // ditto string str( string v ) ; // Implicitly calls `toJSON` on this JSONValue, like `toString` , but also passes $(I true) as $(I pretty) argument. string toPrettyString( JSONOptions options ) ; // Implicitly calls `toJSON` on this JSONValue. string toString( JSONOptions options ) ; // Returns the JSONType of the value stored in this structure. JSONType type( ) ; // Value getter/setter for `JSONType.uinteger` . Throws: `JSONException` for read access if `type` is not `JSONType.uinteger` . ulong uinteger( ) ; // ditto ulong uinteger( ulong v ) ; // An enum value that can be used to obtain a `JSONValue` representing an empty JSON array. __enumMember emptyArray; // An enum value that can be used to obtain a `JSONValue` representing an empty JSON object. __enumMember emptyObject; // Store store; // JSONType type_tag; } About JSON value node Functions Name Description array Value getter/setter for JSONType.array . Throws: JSONException for read access if type is not JSONType.array . Note: This is @system because of the following pattern: --- auto a = &(json.array()); json.uinteger = 0; // overwrite array pointer (*a)[0] = \"world\"; // segmentation fault --- arrayNoRef Value getter for JSONType.array . Unlike array , this retrieves the array by value and can be used in @safe code. boolean Value getter/setter for boolean stored in JSON. Throws: JSONException for read access if this.type is not JSONType.true_ or JSONType.false_ . floating Value getter/setter for JSONType.float_ . Note that despite the name, this is a $(B 64)-bit double , not a 32-bit float . Throws: JSONException for read access if type is not JSONType.float_ . integer Value getter/setter for JSONType.integer . Throws: JSONException for read access if type is not JSONType.integer . isNull Test whether the type is JSONType.null_ object Value getter/setter for JSONType.object . Throws: JSONException for read access if type is not JSONType.object . Note: This is @system because of the following pattern: --- auto a = &(json.object()); json.uinteger = 0; // overwrite AA pointer (*a)[\"hello\"] = \"world\"; // segmentation fault --- objectNoRef Value getter for JSONType.object . Unlike object , this retrieves the object by value and can be used in @safe code. opApply Implements the foreach opApply interface for json arrays. opEquals opIndex Array syntax for JSON arrays. Throws: JSONException if type is not JSONType.array . str Value getter/setter for JSONType.string . Throws: JSONException for read access if type is not JSONType.string . toPrettyString Implicitly calls toJSON on this JSONValue, like toString , but also passes $(I true) as $(I pretty) argument. toString Implicitly calls toJSON on this JSONValue. type Returns the JSONType of the value stored in this structure. uinteger Value getter/setter for JSONType.uinteger . Throws: JSONException for read access if type is not JSONType.uinteger . Variables Name Description emptyArray An enum value that can be used to obtain a JSONValue representing an empty JSON array. emptyObject An enum value that can be used to obtain a JSONValue representing an empty JSON object. store type_tag"
  },
  "phobos/std/logger/Overview.html": {
    "href": "phobos/std/logger/Overview.html",
    "title": "Module - std.logger | Marmos Demo",
    "keywords": "Module - std.logger About Implements logging facilities. Copyright: Copyright Robert \"burner\" Schadek 2013 -- License: Boost License 1.0. Authors: $(HTTP www.svs.informatik.uni-oldenburg.de/60865.html, Robert burner Schadek) $(H3 Basic Logging) Message logging is a common approach to expose runtime information of a program. Logging should be easy, but also flexible and powerful, therefore D provides a standard interface for logging. The easiest way to create a log message is to write ------------- import std.logger; void main() { log(\"Hello World\"); } ------------- This will print a message to the stderr device. The message will contain the filename, the line number, the name of the surrounding function, the time and the message. More complex log call can go along the lines like ------------- log(\"Logging to the sharedLog with its default LogLevel\"); logf(LogLevel.info, 5 < 6, \"%s to the sharedLog with its LogLevel.info\", \"Logging\"); info(\"Logging to the sharedLog with its info LogLevel\"); warning(5 < 6, \"Logging to the sharedLog with its LogLevel.warning if 5 is less than 6\"); error(\"Logging to the sharedLog with its error LogLevel\"); errorf(\"Logging %s the sharedLog %s its error LogLevel\", \"to\", \"with\"); critical(\"Logging to the\",\" sharedLog with its error LogLevel\"); fatal(\"Logging to the sharedLog with its fatal LogLevel\"); auto fLogger = new FileLogger(\"NameOfTheLogFile\"); fLogger.log(\"Logging to the fileLogger with its default LogLevel\"); fLogger.info(\"Logging to the fileLogger with its default LogLevel\"); fLogger.warning(5 < 6, \"Logging to the fileLogger with its LogLevel.warning if 5 is less than 6\"); fLogger.warningf(5 < 6, \"Logging to the fileLogger with its LogLevel.warning if %s is %s than 6\", 5, \"less\"); fLogger.critical(\"Logging to the fileLogger with its info LogLevel\"); fLogger.log(LogLevel.trace, 5 < 6, \"Logging to the fileLogger\",\" with its default LogLevel if 5 is less than 6\"); fLogger.fatal(\"Logging to the fileLogger with its warning LogLevel\"); ------------- Additionally, this example shows how a new FileLogger is created. Individual Logger and the global log functions share commonly named functions to log data. The names of the functions are as follows $(UL $(LI log ) $(LI trace ) $(LI info ) $(LI warning ) $(LI error ) $(LI critical ) $(LI fatal ) ) The default Logger will by default log to stderr and has a default LogLevel of LogLevel.all . The default Logger can be accessed by using the property called sharedLog . This property is a reference to the current default Logger . This reference can be used to assign a new default Logger . ------------- sharedLog = new FileLogger(\"New_Default_Log_File.log\"); ------------- Additional Logger can be created by creating a new instance of the required Logger . $(H3 Logging Fundamentals) $(H4 LogLevel) The LogLevel of a log call can be defined in two ways. The first is by calling log and passing the LogLevel explicitly as the first argument. The second way of setting the LogLevel of a log call, is by calling either trace , info , warning , critical , or fatal . The log call will then have the respective LogLevel . If no LogLevel is defined the log call will use the current LogLevel of the used Logger . If data is logged with LogLevel fatal by default an Error will be thrown. This behaviour can be modified by using the member fatalHandler to assign a custom delegate to handle log call with LogLevel fatal . $(H4 Conditional Logging) Conditional logging can be achieved be passing a bool as first argument to a log function. If conditional logging is used the condition must be true in order to have the log message logged. In order to combine an explicit LogLevel passing with conditional logging, the LogLevel has to be passed as first argument followed by the bool . $(H4 Filtering Log Messages) Messages are logged if the LogLevel of the log message is greater than or equal to the LogLevel of the used Logger and additionally if the LogLevel of the log message is greater than or equal to the global LogLevel . If a condition is passed into the log call, this condition must be true. The global LogLevel is accessible by using globalLogLevel . To assign a LogLevel of a Logger use the logLevel property of the logger. $(H4 Printf Style Logging) If printf -style logging is needed add a $(B f) to the logging call, such as $(D myLogger.infof(\"Hello %s\", \"world\");) or $(D fatalf(\"errno %d\", 1337)). The additional $(B f) appended to the function name enables printf -style logging for all combinations of explicit LogLevel and conditional logging functions and methods. $(H4 Thread Local Redirection) Calls to the free standing log functions are not directly forwarded to the global Logger sharedLog . Actually, a thread local Logger of type StdForwardLogger processes the log call and then, by default, forwards the created Logger.LogEntry to the sharedLog Logger . The thread local Logger is accessible by the stdThreadLocalLog property. This property allows to assign user defined Logger . The default LogLevel of the stdThreadLocalLog Logger is LogLevel.all and it will therefore forward all messages to the sharedLog Logger . The LogLevel of the stdThreadLocalLog can be used to filter log calls before they reach the sharedLog Logger . $(H3 User Defined Logger) To customize the Logger behavior, create a new class that inherits from the abstract Logger class , and implements the writeLogMsg method. ------------- class MyCustomLogger : Logger { this(LogLevel lv) @safe { super(lv); } override void writeLogMsg(ref LogEntry payload) { // log message in my custom way } } auto logger = new MyCustomLogger(LogLevel.info); logger.log(\"Awesome log message with LogLevel.info\"); ------------- To gain more precise control over the logging process, additionally to overriding the writeLogMsg method the methods beginLogMsg , logMsgPart and finishLogMsg can be overridden. $(H3 Provided Logger) By default four Logger implementations are given. The FileLogger logs data to files. It can also be used to log to stdout and stderr as these devices are files as well. A Logger that logs to stdout can therefore be created by $(D new FileLogger(stdout)). The MultiLogger is basically an associative array of string s to Logger . It propagates log calls to its stored Logger . The ArrayLogger contains an array of Logger and also propagates log calls to its stored Logger . The NullLogger does not do anything. It will never log a message and will never throw on a log call with LogLevel error . Source: $(PHOBOSSRC std/logger/package.d)"
  },
  "phobos/std/logger/core/Classes/Logger.html": {
    "href": "phobos/std/logger/core/Classes/Logger.html",
    "title": "Class - Logger | Marmos Demo",
    "keywords": "Class - Logger Module std.logger.core public class Logger { // Ditto alias critical = <todo: marmos support pending>; // Ditto alias criticalf = <todo: marmos support pending>; // Ditto alias error = <todo: marmos support pending>; // Ditto alias errorf = <todo: marmos support pending>; // Ditto alias fatal = <todo: marmos support pending>; // Ditto alias fatalf = <todo: marmos support pending>; // Ditto alias info = <todo: marmos support pending>; // Ditto alias infof = <todo: marmos support pending>; // Ditto alias trace = <todo: marmos support pending>; // Ditto alias tracef = <todo: marmos support pending>; // Ditto alias warning = <todo: marmos support pending>; // Ditto alias warningf = <todo: marmos support pending>; // void beginLogMsg( string file, int line, string funcName, string prettyFuncName, string moduleName, LogLevel logLevel, Tid threadId, SysTime timestamp, Logger logger ) ; // This `delegate` is called in case a log message with `LogLevel.fatal` gets logged. <bug: unknown> fatalHandler( ) final; // Ditto void fatalHandler( <bug: unknown> fh ) final; // Signals that the message has been written and no more calls to `logMsgPart` follow. void finishLogMsg( ) ; // This method allows forwarding log entries from one logger to another. void forwardMsg( LogEntry payload ) ; // The `LogLevel` determines if the log call are processed or dropped by the `Logger` . In order for the log call to be processed the `LogLevel` of the log call must be greater or equal to the `LogLevel` of the `logger` . LogLevel logLevel( ) final; // Ditto void logLevel( LogLevel lv ) final; // Logs a part of the log message. void logMsgPart( <bug: unknown> msg ) ; // A custom logger must implement this method in order to work in a `MultiLogger` and `ArrayLogger` . void writeLogMsg( LogEntry payload ) abstract; // <bug: unknown> fatalHandler_; // LogEntry header; // shared LogLevel logLevel_; // Appender!(string) msgAppender; // Mutex mutex; } About This class is the base of every logger. In order to create a new kind of logger a deriving class needs to implement the writeLogMsg method. By default this is not thread-safe. It is also possible to override the three methods beginLogMsg , logMsgPart and finishLogMsg together, this option gives more flexibility. Aliases Name Description critical Ditto criticalf Ditto error Ditto errorf Ditto fatal Ditto fatalf Ditto info Ditto infof Ditto trace Ditto tracef Ditto warning Ditto warningf Ditto Functions Name Description beginLogMsg fatalHandler This delegate is called in case a log message with LogLevel.fatal gets logged. finishLogMsg Signals that the message has been written and no more calls to logMsgPart follow. forwardMsg This method allows forwarding log entries from one logger to another. logLevel The LogLevel determines if the log call are processed or dropped by the Logger . In order for the log call to be processed the LogLevel of the log call must be greater or equal to the LogLevel of the logger . logMsgPart Logs a part of the log message. writeLogMsg A custom logger must implement this method in order to work in a MultiLogger and ArrayLogger . Variables Name Description fatalHandler_ header logLevel_ msgAppender mutex"
  },
  "phobos/std/logger/core/Classes/StdForwardLogger.html": {
    "href": "phobos/std/logger/core/Classes/StdForwardLogger.html",
    "title": "Class - StdForwardLogger | Marmos Demo",
    "keywords": "Class - StdForwardLogger Module std.logger.core public class StdForwardLogger { // void writeLogMsg( LogEntry payload ) override; } About The StdForwardLogger will always forward anything to the sharedLog. The StdForwardLogger will not throw if data is logged with $(D LogLevel.fatal). Functions Name Description writeLogMsg"
  },
  "phobos/std/logger/core/Classes/TestLogger.html": {
    "href": "phobos/std/logger/core/Classes/TestLogger.html",
    "title": "Class - TestLogger | Marmos Demo",
    "keywords": "Class - TestLogger Module std.logger.core public class TestLogger { // void writeLogMsg( LogEntry payload ) override; // string file; // string func; // int line; // LogLevel lvl; // string msg; // string prettyFunc; } Functions Name Description writeLogMsg Variables Name Description file func line lvl msg prettyFunc"
  },
  "phobos/std/logger/core/Functions/defaultLogFunction.html": {
    "href": "phobos/std/logger/core/Functions/defaultLogFunction.html",
    "title": "Overloads for - defaultLogFunction | Marmos Demo",
    "keywords": "Overloads for - defaultLogFunction Module std.logger.core defaultLogFunction(args) void defaultLogFunction( A args ) This template provides the global log functions with the LogLevel is encoded in the function name. The aliases following this template create the public names of these log functions. defaultLogFunction(condition, args) void defaultLogFunction( bool condition, A args ) This template provides the global log functions with the LogLevel is encoded in the function name. The aliases following this template create the public names of these log functions."
  },
  "phobos/std/logger/core/Functions/defaultLogFunctionf.html": {
    "href": "phobos/std/logger/core/Functions/defaultLogFunctionf.html",
    "title": "Overloads for - defaultLogFunctionf | Marmos Demo",
    "keywords": "Overloads for - defaultLogFunctionf Module std.logger.core defaultLogFunctionf(msg, args) void defaultLogFunctionf( string msg, A args ) This template provides the global printf -style log functions with the LogLevel is encoded in the function name. The aliases following this template create the public names of the log functions. defaultLogFunctionf(condition, msg, args) void defaultLogFunctionf( bool condition, string msg, A args ) This template provides the global printf -style log functions with the LogLevel is encoded in the function name. The aliases following this template create the public names of the log functions."
  },
  "phobos/std/logger/core/Functions/defaultSharedLoggerImpl.html": {
    "href": "phobos/std/logger/core/Functions/defaultSharedLoggerImpl.html",
    "title": "Overloads for - defaultSharedLoggerImpl | Marmos Demo",
    "keywords": "Overloads for - defaultSharedLoggerImpl Module std.logger.core defaultSharedLoggerImpl() Logger defaultSharedLoggerImpl( )"
  },
  "phobos/std/logger/core/Functions/formatString.html": {
    "href": "phobos/std/logger/core/Functions/formatString.html",
    "title": "Overloads for - formatString | Marmos Demo",
    "keywords": "Overloads for - formatString Module std.logger.core formatString(oRange, args) void formatString( MsgRange oRange, A args )"
  },
  "phobos/std/logger/core/Functions/globalLogLevel.html": {
    "href": "phobos/std/logger/core/Functions/globalLogLevel.html",
    "title": "Overloads for - globalLogLevel | Marmos Demo",
    "keywords": "Overloads for - globalLogLevel Module std.logger.core globalLogLevel() LogLevel globalLogLevel( ) These methods get and set the global LogLevel . Every log message with a LogLevel lower than the global LogLevel will be discarded before it reaches writeLogMessage method of any Logger . globalLogLevel(ll) void globalLogLevel( LogLevel ll ) Ditto"
  },
  "phobos/std/logger/core/Functions/isLoggingEnabled.html": {
    "href": "phobos/std/logger/core/Functions/isLoggingEnabled.html",
    "title": "Overloads for - isLoggingEnabled | Marmos Demo",
    "keywords": "Overloads for - isLoggingEnabled Module std.logger.core isLoggingEnabled(ll, loggerLL, globalLL, condition) bool isLoggingEnabled( LogLevel ll, LogLevel loggerLL, LogLevel globalLL, bool condition ) This functions is used at runtime to determine if a LogLevel is active. The same previously defined version statements are used to disable certain levels. Again the version statements are associated with a compile unit and can therefore not disable logging in other compile units. pure bool isLoggingEnabled()(LogLevel ll) @safe nothrow @nogc"
  },
  "phobos/std/logger/core/Functions/log.html": {
    "href": "phobos/std/logger/core/Functions/log.html",
    "title": "Overloads for - log | Marmos Demo",
    "keywords": "Overloads for - log Module std.logger.core log(ll, condition, args) void log( LogLevel ll, bool condition, A args ) This function logs data. In order for the data to be processed, the LogLevel of the log call must be greater or equal to the LogLevel of the sharedLog and the defaultLogLevel ; additionally the condition passed must be true . Params: ll = The LogLevel used by this log call. condition = The condition must be true for the data to be logged. args = The data that should be logged. Example: -------------------- log(LogLevel.warning, true, \"Hello World\", 3.1415); -------------------- log(ll, condition, arg, line, file, funcName, prettyFuncName) void log( LogLevel ll, bool condition, T arg, int line, string file, string funcName, string prettyFuncName ) Ditto log(ll, args) void log( LogLevel ll, A args ) This function logs data. In order for the data to be processed the LogLevel of the log call must be greater or equal to the LogLevel of the sharedLog . Params: ll = The LogLevel used by this log call. args = The data that should be logged. Example: -------------------- log(LogLevel.warning, \"Hello World\", 3.1415); -------------------- log(ll, arg, line, file, funcName, prettyFuncName) void log( LogLevel ll, T arg, int line, string file, string funcName, string prettyFuncName ) Ditto log(condition, args) void log( bool condition, A args ) This function logs data. In order for the data to be processed the LogLevel of the sharedLog must be greater or equal to the defaultLogLevel add the condition passed must be true . Params: condition = The condition must be true for the data to be logged. args = The data that should be logged. Example: -------------------- log(true, \"Hello World\", 3.1415); -------------------- log(condition, arg, line, file, funcName, prettyFuncName) void log( bool condition, T arg, int line, string file, string funcName, string prettyFuncName ) Ditto log(args) void log( A args ) This function logs data. In order for the data to be processed the LogLevel of the sharedLog must be greater or equal to the defaultLogLevel . Params: args = The data that should be logged. Example: -------------------- log(\"Hello World\", 3.1415); -------------------- log(arg, line, file, funcName, prettyFuncName, moduleName) void log( T arg, int line, string file, string funcName, string prettyFuncName, string moduleName )"
  },
  "phobos/std/logger/core/Functions/logf.html": {
    "href": "phobos/std/logger/core/Functions/logf.html",
    "title": "Overloads for - logf | Marmos Demo",
    "keywords": "Overloads for - logf Module std.logger.core logf(ll, condition, msg, args) void logf( LogLevel ll, bool condition, string msg, A args ) This function logs data in a printf -style manner. In order for the data to be processed the LogLevel of the log call must be greater or equal to the LogLevel of the sharedLog and the defaultLogLevel additionally the condition passed must be true . Params: ll = The LogLevel used by this log call. condition = The condition must be true for the data to be logged. msg = The printf -style string. args = The data that should be logged. Example: -------------------- logf(LogLevel.warning, true, \"Hello World %f\", 3.1415); -------------------- logf(ll, msg, args) void logf( LogLevel ll, string msg, A args ) This function logs data in a printf -style manner. In order for the data to be processed the LogLevel of the log call must be greater or equal to the LogLevel of the sharedLog and the defaultLogLevel . Params: ll = The LogLevel used by this log call. msg = The printf -style string. args = The data that should be logged. Example: -------------------- logf(LogLevel.warning, \"Hello World %f\", 3.1415); -------------------- logf(condition, msg, args) void logf( bool condition, string msg, A args ) This function logs data in a printf -style manner. In order for the data to be processed the LogLevel of the log call must be greater or equal to the defaultLogLevel additionally the condition passed must be true . Params: condition = The condition must be true for the data to be logged. msg = The printf -style string. args = The data that should be logged. Example: -------------------- logf(true, \"Hello World %f\", 3.1415); -------------------- logf(msg, args) void logf( string msg, A args ) This function logs data in a printf -style manner. In order for the data to be processed the LogLevel of the log call must be greater or equal to the defaultLogLevel . Params: msg = The printf -style string. args = The data that should be logged. Example: -------------------- logf(\"Hello World %f\", 3.1415); --------------------"
  },
  "phobos/std/logger/core/Functions/sharedLog.html": {
    "href": "phobos/std/logger/core/Functions/sharedLog.html",
    "title": "Overloads for - sharedLog | Marmos Demo",
    "keywords": "Overloads for - sharedLog Module std.logger.core sharedLog() Logger sharedLog( ) This property sets and gets the default Logger . Unless set to another logger by the user, the default logger's log level is LogLevel.info. Example: ------------- sharedLog = new FileLogger(yourFile); ------------- The example sets a new FileLogger as new sharedLog . If at some point you want to use the original default logger again, you can use $(D sharedLog = null;). This will put back the original. Note: While getting and setting sharedLog is thread-safe, it has to be considered that the returned reference is only a current snapshot and in the following code, you must make sure no other thread reassigns to it between reading and writing sharedLog . sharedLog is only thread-safe if the used Logger is thread-safe. The default Logger is thread-safe. ------------- if (sharedLog !is myLogger) sharedLog = new myLogger; ------------- sharedLog(logger) void sharedLog( Logger logger ) Ditto"
  },
  "phobos/std/logger/core/Functions/stdThreadLocalLog.html": {
    "href": "phobos/std/logger/core/Functions/stdThreadLocalLog.html",
    "title": "Overloads for - stdThreadLocalLog | Marmos Demo",
    "keywords": "Overloads for - stdThreadLocalLog Module std.logger.core stdThreadLocalLog() Logger stdThreadLocalLog( ) This function returns a thread unique Logger , that by default propagates all data logged to it to the sharedLog . These properties can be used to set and get this Logger . Every modification to this Logger will only be visible in the thread the modification has been done from. This Logger is called by the free standing log functions. This allows to create thread local redirections and still use the free standing log functions. stdThreadLocalLog(logger) void stdThreadLocalLog( Logger logger ) Ditto"
  },
  "phobos/std/logger/core/Functions/stdThreadLocalLogImpl.html": {
    "href": "phobos/std/logger/core/Functions/stdThreadLocalLogImpl.html",
    "title": "Overloads for - stdThreadLocalLogImpl | Marmos Demo",
    "keywords": "Overloads for - stdThreadLocalLogImpl Module std.logger.core stdThreadLocalLogImpl() Logger stdThreadLocalLogImpl( )"
  },
  "phobos/std/logger/core/Functions/systimeToISOString.html": {
    "href": "phobos/std/logger/core/Functions/systimeToISOString.html",
    "title": "Overloads for - systimeToISOString | Marmos Demo",
    "keywords": "Overloads for - systimeToISOString Module std.logger.core systimeToISOString(o, time) void systimeToISOString( OutputRange o, SysTime time )"
  },
  "phobos/std/logger/core/Functions/testFuncNames.html": {
    "href": "phobos/std/logger/core/Functions/testFuncNames.html",
    "title": "Overloads for - testFuncNames | Marmos Demo",
    "keywords": "Overloads for - testFuncNames Module std.logger.core testFuncNames(logger) void testFuncNames( Logger logger )"
  },
  "phobos/std/logger/core/Functions/trustedLoad.html": {
    "href": "phobos/std/logger/core/Functions/trustedLoad.html",
    "title": "Overloads for - trustedLoad | Marmos Demo",
    "keywords": "Overloads for - trustedLoad Module std.logger.core trustedLoad(value) <bug: unknown> trustedLoad( T value ) auto"
  },
  "phobos/std/logger/core/Functions/trustedStore.html": {
    "href": "phobos/std/logger/core/Functions/trustedStore.html",
    "title": "Overloads for - trustedStore | Marmos Demo",
    "keywords": "Overloads for - trustedStore Module std.logger.core trustedStore(dst, src) void trustedStore( T dst, T src )"
  },
  "phobos/std/logger/core/Logger/Functions/beginLogMsg.html": {
    "href": "phobos/std/logger/core/Logger/Functions/beginLogMsg.html",
    "title": "Overloads for - beginLogMsg | Marmos Demo",
    "keywords": "Overloads for - beginLogMsg Module std.logger.core Parent Logger beginLogMsg(file, line, funcName, prettyFuncName, moduleName, logLevel, threadId, timestamp, logger) void beginLogMsg( string file, int line, string funcName, string prettyFuncName, string moduleName, LogLevel logLevel, Tid threadId, SysTime timestamp, Logger logger )"
  },
  "phobos/std/logger/core/Logger/Functions/fatalHandler.html": {
    "href": "phobos/std/logger/core/Logger/Functions/fatalHandler.html",
    "title": "Overloads for - fatalHandler | Marmos Demo",
    "keywords": "Overloads for - fatalHandler Module std.logger.core Parent Logger fatalHandler() <bug: unknown> fatalHandler( ) final This delegate is called in case a log message with LogLevel.fatal gets logged. By default an Error will be thrown. fatalHandler(fh) void fatalHandler( <bug: unknown> fh ) final Ditto"
  },
  "phobos/std/logger/core/Logger/Functions/finishLogMsg.html": {
    "href": "phobos/std/logger/core/Logger/Functions/finishLogMsg.html",
    "title": "Overloads for - finishLogMsg | Marmos Demo",
    "keywords": "Overloads for - finishLogMsg Module std.logger.core Parent Logger finishLogMsg() void finishLogMsg( ) Signals that the message has been written and no more calls to logMsgPart follow."
  },
  "phobos/std/logger/core/Logger/Functions/forwardMsg.html": {
    "href": "phobos/std/logger/core/Logger/Functions/forwardMsg.html",
    "title": "Overloads for - forwardMsg | Marmos Demo",
    "keywords": "Overloads for - forwardMsg Module std.logger.core Parent Logger forwardMsg(payload) void forwardMsg( LogEntry payload ) This method allows forwarding log entries from one logger to another. forwardMsg will ensure proper synchronization and then call writeLogMsg . This is an API for implementing your own loggers and should not be called by normal user code. A notable difference from other logging functions is that the globalLogLevel wont be evaluated again since it is assumed that the caller already checked that."
  },
  "phobos/std/logger/core/Logger/Functions/logLevel.html": {
    "href": "phobos/std/logger/core/Logger/Functions/logLevel.html",
    "title": "Overloads for - logLevel | Marmos Demo",
    "keywords": "Overloads for - logLevel Module std.logger.core Parent Logger logLevel() LogLevel logLevel( ) final The LogLevel determines if the log call are processed or dropped by the Logger . In order for the log call to be processed the LogLevel of the log call must be greater or equal to the LogLevel of the logger . These two methods set and get the LogLevel of the used Logger . Example: ----------- auto f = new FileLogger(stdout); f.logLevel = LogLevel.info; assert(f.logLevel == LogLevel.info); ----------- logLevel(lv) void logLevel( LogLevel lv ) final Ditto"
  },
  "phobos/std/logger/core/Logger/Functions/logMsgPart.html": {
    "href": "phobos/std/logger/core/Logger/Functions/logMsgPart.html",
    "title": "Overloads for - logMsgPart | Marmos Demo",
    "keywords": "Overloads for - logMsgPart Module std.logger.core Parent Logger logMsgPart(msg) void logMsgPart( <bug: unknown> msg ) Logs a part of the log message."
  },
  "phobos/std/logger/core/Logger/Functions/writeLogMsg.html": {
    "href": "phobos/std/logger/core/Logger/Functions/writeLogMsg.html",
    "title": "Overloads for - writeLogMsg | Marmos Demo",
    "keywords": "Overloads for - writeLogMsg Module std.logger.core Parent Logger writeLogMsg(payload) void writeLogMsg( LogEntry payload ) abstract A custom logger must implement this method in order to work in a MultiLogger and ArrayLogger . Params: payload = All information associated with call to log function. See_Also: beginLogMsg, logMsgPart, finishLogMsg"
  },
  "phobos/std/logger/core/MsgRange/Functions/put.html": {
    "href": "phobos/std/logger/core/MsgRange/Functions/put.html",
    "title": "Overloads for - put | Marmos Demo",
    "keywords": "Overloads for - put Module std.logger.core Parent MsgRange put(elem) void put( dchar elem )"
  },
  "phobos/std/logger/core/Overview.html": {
    "href": "phobos/std/logger/core/Overview.html",
    "title": "Module - std.logger.core | Marmos Demo",
    "keywords": "Module - std.logger.core About Source: $(PHOBOSSRC std/logger/core.d) Aliases Name Description critical Ditto criticalf Ditto error Ditto errorf Ditto fatal Ditto fatalf Ditto info Ditto infof Ditto trace This function logs data to the stdThreadLocalLog , optionally depending on a condition. tracef This function logs data to the sharedLog in a printf -style manner. warning Ditto warningf Ditto Classes Name Description Logger This class is the base of every logger. In order to create a new kind of logger a deriving class needs to implement the writeLogMsg method. By default this is not thread-safe. StdForwardLogger The StdForwardLogger will always forward anything to the sharedLog. TestLogger Structs Name Description MsgRange Functions Name Description defaultLogFunction This template provides the global log functions with the LogLevel is encoded in the function name. defaultLogFunctionf This template provides the global printf -style log functions with the LogLevel is encoded in the function name. defaultSharedLoggerImpl formatString globalLogLevel These methods get and set the global LogLevel . isLoggingEnabled This functions is used at runtime to determine if a LogLevel is active. The same previously defined version statements are used to disable certain levels. Again the version statements are associated with a compile unit and can therefore not disable logging in other compile units. pure bool isLoggingEnabled()(LogLevel ll) @safe nothrow @nogc log This function logs data. logf This function logs data in a printf -style manner. sharedLog This property sets and gets the default Logger . Unless set to another logger by the user, the default logger's log level is LogLevel.info. stdThreadLocalLog This function returns a thread unique Logger , that by default propagates all data logged to it to the sharedLog . stdThreadLocalLogImpl systimeToISOString testFuncNames trustedLoad trustedStore Variables Name Description stdLoggerDefaultThreadLogger stdLoggerGlobalLogLevel stdLoggerThreadLogger This LogLevel is unqiue to every thread. stdSharedDefaultLogger stdSharedLogger"
  },
  "phobos/std/logger/core/StdForwardLogger/Functions/writeLogMsg.html": {
    "href": "phobos/std/logger/core/StdForwardLogger/Functions/writeLogMsg.html",
    "title": "Overloads for - writeLogMsg | Marmos Demo",
    "keywords": "Overloads for - writeLogMsg Module std.logger.core Parent StdForwardLogger writeLogMsg(payload) void writeLogMsg( LogEntry payload ) override"
  },
  "phobos/std/logger/core/Structs/MsgRange.html": {
    "href": "phobos/std/logger/core/Structs/MsgRange.html",
    "title": "Struct - MsgRange | Marmos Demo",
    "keywords": "Struct - MsgRange Module std.logger.core public struct MsgRange { // void put( dchar elem ) ; // Logger log; } Functions Name Description put Variables Name Description log"
  },
  "phobos/std/logger/core/TestLogger/Functions/writeLogMsg.html": {
    "href": "phobos/std/logger/core/TestLogger/Functions/writeLogMsg.html",
    "title": "Overloads for - writeLogMsg | Marmos Demo",
    "keywords": "Overloads for - writeLogMsg Module std.logger.core Parent TestLogger writeLogMsg(payload) void writeLogMsg( LogEntry payload ) override"
  },
  "phobos/std/logger/filelogger/Classes/FileLogger.html": {
    "href": "phobos/std/logger/filelogger/Classes/FileLogger.html",
    "title": "Class - FileLogger | Marmos Demo",
    "keywords": "Class - FileLogger Module std.logger.filelogger public class FileLogger { // void beginLogMsg( string file, int line, string funcName, string prettyFuncName, string moduleName, LogLevel logLevel, Tid threadId, SysTime timestamp, Logger logger ) override; // If the `FileLogger` is managing the `File` it logs to, this method will return a reference to this File. File file( ) ; // void finishLogMsg( ) override; // If the `FileLogger` was constructed with a filename, this method returns this filename. Otherwise an empty `string` is returned. string getFilename( ) ; // void logMsgPart( <bug: unknown> msg ) override; // void writeLogMsg( LogEntry payload ) override; // The `File` log messages are written to. File file_; // The filename of the `File` log messages are written to. string filename; } About This Logger implementation writes log messages to the associated file. The name of the file has to be passed on construction time. If the file is already present new log messages will be append at its end. Functions Name Description beginLogMsg file If the FileLogger is managing the File it logs to, this method will return a reference to this File. finishLogMsg getFilename If the FileLogger was constructed with a filename, this method returns this filename. Otherwise an empty string is returned. logMsgPart writeLogMsg Variables Name Description file_ The File log messages are written to. filename The filename of the File log messages are written to."
  },
  "phobos/std/logger/filelogger/FileLogger/Functions/beginLogMsg.html": {
    "href": "phobos/std/logger/filelogger/FileLogger/Functions/beginLogMsg.html",
    "title": "Overloads for - beginLogMsg | Marmos Demo",
    "keywords": "Overloads for - beginLogMsg Module std.logger.filelogger Parent FileLogger beginLogMsg(file, line, funcName, prettyFuncName, moduleName, logLevel, threadId, timestamp, logger) void beginLogMsg( string file, int line, string funcName, string prettyFuncName, string moduleName, LogLevel logLevel, Tid threadId, SysTime timestamp, Logger logger ) override"
  },
  "phobos/std/logger/filelogger/FileLogger/Functions/file.html": {
    "href": "phobos/std/logger/filelogger/FileLogger/Functions/file.html",
    "title": "Overloads for - file | Marmos Demo",
    "keywords": "Overloads for - file Module std.logger.filelogger Parent FileLogger file() File file( ) If the FileLogger is managing the File it logs to, this method will return a reference to this File."
  },
  "phobos/std/logger/filelogger/FileLogger/Functions/finishLogMsg.html": {
    "href": "phobos/std/logger/filelogger/FileLogger/Functions/finishLogMsg.html",
    "title": "Overloads for - finishLogMsg | Marmos Demo",
    "keywords": "Overloads for - finishLogMsg Module std.logger.filelogger Parent FileLogger finishLogMsg() void finishLogMsg( ) override"
  },
  "phobos/std/logger/filelogger/FileLogger/Functions/getFilename.html": {
    "href": "phobos/std/logger/filelogger/FileLogger/Functions/getFilename.html",
    "title": "Overloads for - getFilename | Marmos Demo",
    "keywords": "Overloads for - getFilename Module std.logger.filelogger Parent FileLogger getFilename() string getFilename( ) If the FileLogger was constructed with a filename, this method returns this filename. Otherwise an empty string is returned."
  },
  "phobos/std/logger/filelogger/FileLogger/Functions/logMsgPart.html": {
    "href": "phobos/std/logger/filelogger/FileLogger/Functions/logMsgPart.html",
    "title": "Overloads for - logMsgPart | Marmos Demo",
    "keywords": "Overloads for - logMsgPart Module std.logger.filelogger Parent FileLogger logMsgPart(msg) void logMsgPart( <bug: unknown> msg ) override"
  },
  "phobos/std/logger/filelogger/FileLogger/Functions/writeLogMsg.html": {
    "href": "phobos/std/logger/filelogger/FileLogger/Functions/writeLogMsg.html",
    "title": "Overloads for - writeLogMsg | Marmos Demo",
    "keywords": "Overloads for - writeLogMsg Module std.logger.filelogger Parent FileLogger writeLogMsg(payload) void writeLogMsg( LogEntry payload ) override"
  },
  "phobos/std/logger/filelogger/Overview.html": {
    "href": "phobos/std/logger/filelogger/Overview.html",
    "title": "Module - std.logger.filelogger | Marmos Demo",
    "keywords": "Module - std.logger.filelogger About Source: $(PHOBOSSRC std/logger/filelogger.d) Aliases Name Description CreateFolder An option to create $(LREF FileLogger) directory if it is non-existent. Classes Name Description FileLogger This Logger implementation writes log messages to the associated file. The name of the file has to be passed on construction time. If the file is already present new log messages will be append at its end."
  },
  "phobos/std/logger/multilogger/Classes/MultiLogger.html": {
    "href": "phobos/std/logger/multilogger/Classes/MultiLogger.html",
    "title": "Class - MultiLogger | Marmos Demo",
    "keywords": "Class - MultiLogger Module std.logger.multilogger public class MultiLogger { // This method inserts a new Logger into the `MultiLogger` . void insertLogger( string name, Logger newLogger ) ; // This method removes a Logger from the `MultiLogger` . Logger removeLogger( <bug: unknown> toRemove ) ; // void writeLogMsg( LogEntry payload ) override; // This member holds all `Logger` s stored in the `MultiLogger` . <bug: unknown> logger; } About MultiLogger logs to multiple Logger . The Logger s are stored in an Logger[] in their order of insertion. Every data logged to this MultiLogger will be distributed to all the $(D Logger)s inserted into it. This MultiLogger implementation can hold multiple Logger s with the same name. If the method removeLogger is used to remove a Logger only the first occurrence with that name will be removed. Functions Name Description insertLogger This method inserts a new Logger into the MultiLogger . removeLogger This method removes a Logger from the MultiLogger . writeLogMsg Variables Name Description logger This member holds all Logger s stored in the MultiLogger ."
  },
  "phobos/std/logger/multilogger/MultiLogger/Functions/insertLogger.html": {
    "href": "phobos/std/logger/multilogger/MultiLogger/Functions/insertLogger.html",
    "title": "Overloads for - insertLogger | Marmos Demo",
    "keywords": "Overloads for - insertLogger Module std.logger.multilogger Parent MultiLogger insertLogger(name, newLogger) void insertLogger( string name, Logger newLogger ) This method inserts a new Logger into the MultiLogger . Params: name = The name of the Logger to insert. newLogger = The Logger to insert."
  },
  "phobos/std/logger/multilogger/MultiLogger/Functions/removeLogger.html": {
    "href": "phobos/std/logger/multilogger/MultiLogger/Functions/removeLogger.html",
    "title": "Overloads for - removeLogger | Marmos Demo",
    "keywords": "Overloads for - removeLogger Module std.logger.multilogger Parent MultiLogger removeLogger(toRemove) Logger removeLogger( <bug: unknown> toRemove ) This method removes a Logger from the MultiLogger . Params: toRemove = The name of the Logger to remove. If the Logger is not found null will be returned. Only the first occurrence of a Logger with the given name will be removed. Returns: The removed Logger ."
  },
  "phobos/std/logger/multilogger/MultiLogger/Functions/writeLogMsg.html": {
    "href": "phobos/std/logger/multilogger/MultiLogger/Functions/writeLogMsg.html",
    "title": "Overloads for - writeLogMsg | Marmos Demo",
    "keywords": "Overloads for - writeLogMsg Module std.logger.multilogger Parent MultiLogger writeLogMsg(payload) void writeLogMsg( LogEntry payload ) override"
  },
  "phobos/std/logger/multilogger/Overview.html": {
    "href": "phobos/std/logger/multilogger/Overview.html",
    "title": "Module - std.logger.multilogger | Marmos Demo",
    "keywords": "Module - std.logger.multilogger About Source: $(PHOBOSSRC std/logger/multilogger.d) Classes Name Description MultiLogger MultiLogger logs to multiple Logger . The Logger s are stored in an Logger[] in their order of insertion. Structs Name Description MultiLoggerEntry This Element is stored inside the MultiLogger and associates a Logger to a string ."
  },
  "phobos/std/logger/multilogger/Structs/MultiLoggerEntry.html": {
    "href": "phobos/std/logger/multilogger/Structs/MultiLoggerEntry.html",
    "title": "Struct - MultiLoggerEntry | Marmos Demo",
    "keywords": "Struct - MultiLoggerEntry Module std.logger.multilogger public struct MultiLoggerEntry { // The stored `Logger` Logger logger; // The name if the `Logger` string name; } About This Element is stored inside the MultiLogger and associates a Logger to a string . Variables Name Description logger The stored Logger name The name if the Logger"
  },
  "phobos/std/logger/nulllogger/Classes/NullLogger.html": {
    "href": "phobos/std/logger/nulllogger/Classes/NullLogger.html",
    "title": "Class - NullLogger | Marmos Demo",
    "keywords": "Class - NullLogger Module std.logger.nulllogger public class NullLogger { // void writeLogMsg( LogEntry payload ) override; } About The NullLogger will not process any log messages. In case of a log message with LogLevel.fatal nothing will happen. Functions Name Description writeLogMsg"
  },
  "phobos/std/logger/nulllogger/NullLogger/Functions/writeLogMsg.html": {
    "href": "phobos/std/logger/nulllogger/NullLogger/Functions/writeLogMsg.html",
    "title": "Overloads for - writeLogMsg | Marmos Demo",
    "keywords": "Overloads for - writeLogMsg Module std.logger.nulllogger Parent NullLogger writeLogMsg(payload) void writeLogMsg( LogEntry payload ) override"
  },
  "phobos/std/logger/nulllogger/Overview.html": {
    "href": "phobos/std/logger/nulllogger/Overview.html",
    "title": "Module - std.logger.nulllogger | Marmos Demo",
    "keywords": "Module - std.logger.nulllogger About Source: $(PHOBOSSRC std/logger/nulllogger.d) Classes Name Description NullLogger The NullLogger will not process any log messages."
  },
  "phobos/std/math/Functions/ieeeMean.html": {
    "href": "phobos/std/math/Functions/ieeeMean.html",
    "title": "Overloads for - ieeeMean | Marmos Demo",
    "keywords": "Overloads for - ieeeMean Module std.math ieeeMean(x, y) T ieeeMean( T x, T y )"
  },
  "phobos/std/math/Overview.html": {
    "href": "phobos/std/math/Overview.html",
    "title": "Module - std.math | Marmos Demo",
    "keywords": "Module - std.math About Contains the elementary mathematical functions (powers, roots, and trigonometric functions), and low-level floating-point operations. Mathematical special functions are available in $(MREF std, mathspecial). $(SCRIPT inhibitQuickIndex = 1;) $(DIVC quickindex, $(BOOKTABLE , $(TR $(TH Category) $(TH Members) ) $(TR $(TDNW $(SUBMODULE Constants, constants)) $(TD $(SUBREF constants, E) $(SUBREF constants, PI) $(SUBREF constants, PI_2) $(SUBREF constants, PI_4) $(SUBREF constants, M_1_PI) $(SUBREF constants, M_2_PI) $(SUBREF constants, M_2_SQRTPI) $(SUBREF constants, LN10) $(SUBREF constants, LN2) $(SUBREF constants, LOG2) $(SUBREF constants, LOG2E) $(SUBREF constants, LOG2T) $(SUBREF constants, LOG10E) $(SUBREF constants, SQRT2) $(SUBREF constants, SQRT1_2) )) $(TR $(TDNW $(SUBMODULE Algebraic, algebraic)) $(TD $(SUBREF algebraic, abs) $(SUBREF algebraic, fabs) $(SUBREF algebraic, sqrt) $(SUBREF algebraic, cbrt) $(SUBREF algebraic, hypot) $(SUBREF algebraic, poly) $(SUBREF algebraic, nextPow2) $(SUBREF algebraic, truncPow2) )) $(TR $(TDNW $(SUBMODULE Trigonometry, trigonometry)) $(TD $(SUBREF trigonometry, sin) $(SUBREF trigonometry, cos) $(SUBREF trigonometry, tan) $(SUBREF trigonometry, asin) $(SUBREF trigonometry, acos) $(SUBREF trigonometry, atan) $(SUBREF trigonometry, atan2) $(SUBREF trigonometry, sinh) $(SUBREF trigonometry, cosh) $(SUBREF trigonometry, tanh) $(SUBREF trigonometry, asinh) $(SUBREF trigonometry, acosh) $(SUBREF trigonometry, atanh) )) $(TR $(TDNW $(SUBMODULE Rounding, rounding)) $(TD $(SUBREF rounding, ceil) $(SUBREF rounding, floor) $(SUBREF rounding, round) $(SUBREF rounding, lround) $(SUBREF rounding, trunc) $(SUBREF rounding, rint) $(SUBREF rounding, lrint) $(SUBREF rounding, nearbyint) $(SUBREF rounding, rndtol) $(SUBREF rounding, quantize) )) $(TR $(TDNW $(SUBMODULE Exponentiation & Logarithms, exponential)) $(TD $(SUBREF exponential, pow) $(SUBREF exponential, powmod) $(SUBREF exponential, exp) $(SUBREF exponential, exp2) $(SUBREF exponential, expm1) $(SUBREF exponential, ldexp) $(SUBREF exponential, frexp) $(SUBREF exponential, log) $(SUBREF exponential, log2) $(SUBREF exponential, log10) $(SUBREF exponential, logb) $(SUBREF exponential, ilogb) $(SUBREF exponential, log1p) $(SUBREF exponential, scalbn) )) $(TR $(TDNW $(SUBMODULE Remainder, remainder)) $(TD $(SUBREF remainder, fmod) $(SUBREF remainder, modf) $(SUBREF remainder, remainder) $(SUBREF remainder, remquo) )) $(TR $(TDNW $(SUBMODULE Floating-point operations, operations)) $(TD $(SUBREF operations, approxEqual) $(SUBREF operations, feqrel) $(SUBREF operations, fdim) $(SUBREF operations, fmax) $(SUBREF operations, fmin) $(SUBREF operations, fma) $(SUBREF operations, isClose) $(SUBREF operations, nextDown) $(SUBREF operations, nextUp) $(SUBREF operations, nextafter) $(SUBREF operations, NaN) $(SUBREF operations, getNaNPayload) $(SUBREF operations, cmp) )) $(TR $(TDNW $(SUBMODULE Introspection, traits)) $(TD $(SUBREF traits, isFinite) $(SUBREF traits, isIdentical) $(SUBREF traits, isInfinity) $(SUBREF traits, isNaN) $(SUBREF traits, isNormal) $(SUBREF traits, isSubnormal) $(SUBREF traits, signbit) $(SUBREF traits, sgn) $(SUBREF traits, copysign) $(SUBREF traits, isPowerOf2) )) $(TR $(TDNW $(SUBMODULE Hardware Control, hardware)) $(TD $(SUBREF hardware, IeeeFlags) $(SUBREF hardware, ieeeFlags) $(SUBREF hardware, resetIeeeFlags) $(SUBREF hardware, FloatingPointControl) )) ) ) The functionality closely follows the IEEE754-2008 standard for floating-point arithmetic, including the use of camelCase names rather than C99-style lower case names. All of these functions behave correctly when presented with an infinity or NaN. The following IEEE 'real' formats are currently supported $(UL $(LI 64 bit Big-endian 'double' (eg PowerPC)) $(LI 128 bit Big-endian 'quadruple' (eg SPARC)) $(LI 64 bit Little-endian 'double' (eg x86-SSE2)) $(LI 80 bit Little-endian, with implied bit 'real80' (eg x87, Itanium)) $(LI 128 bit Little-endian 'quadruple' (not implemented on any known processor!)) $(LI Non-IEEE 128 bit Big-endian 'doubledouble' (eg PowerPC) has partial support) ) Unlike C, there is no global 'errno' variable. Consequently, almost all of these functions are pure nothrow. Macros SUBMODULE $(MREF_ALTTEXT $1, std, math, $2) SUBREF $(REF_ALTTEXT $(TT $2), $2, std, math, \\(1)\\)(NBSP) Copyright: Copyright The D Language Foundation 2000 - 2011. D implementations of tan, atan, atan2, exp, expm1, exp2, log, log10, log1p, log2, floor, ceil and lrint functions are based on the CEPHES math library, which is Copyright (C) 2001 Stephen L. Moshier \\((LT)steve@moshier.net\\)(GT) and are incorporated herein by permission of the author. The author reserves the right to distribute this material elsewhere under different copying permissions. These modifications are distributed here under the following terms: License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP digitalmars.com, Walter Bright), Don Clugston, Conversion of CEPHES math library to D by Iain Buclaw and David Nadlinger Source: $(PHOBOSSRC std/math/package.d) Functions Name Description ieeeMean"
  },
  "phobos/std/math/algebraic/Functions/abs.html": {
    "href": "phobos/std/math/algebraic/Functions/abs.html",
    "title": "Overloads for - abs | Marmos Demo",
    "keywords": "Overloads for - abs Module std.math.algebraic abs(x) <bug: unknown> abs( Num x ) auto Calculates the absolute value of a number. Params Num <parameter not found> (template parameter) type of number x = real number value Returns The absolute value of the number. If floating-point or integral, the return type will be the same as the input. Limitations When x is a signed integral equal to Num.min the value of x will be returned instead. Note for 2's complement; -Num.min (= Num.max + 1 ) is not representable due to overflow."
  },
  "phobos/std/math/algebraic/Functions/cbrt.html": {
    "href": "phobos/std/math/algebraic/Functions/cbrt.html",
    "title": "Overloads for - cbrt | Marmos Demo",
    "keywords": "Overloads for - cbrt Module std.math.algebraic cbrt(x) real cbrt( real x ) Calculates the cube root of x. $(TABLE_SV $(TR $(TH $(I x)) $(TH cbrt(x)) $(TH invalid?)) $(TR $(TD $(PLUSMN)0.0) $(TD $(PLUSMN)0.0) $(TD no) ) $(TR $(TD $(NAN)) $(TD $(NAN)) $(TD yes) ) $(TR $(TD \\((PLUSMN)\\)(INFIN)) $(TD \\((PLUSMN)\\)(INFIN)) $(TD no) ) )"
  },
  "phobos/std/math/algebraic/Functions/fabs.html": {
    "href": "phobos/std/math/algebraic/Functions/fabs.html",
    "title": "Overloads for - fabs | Marmos Demo",
    "keywords": "Overloads for - fabs Module std.math.algebraic fabs(x) real fabs( real x ) Returns |x| $(TABLE_SV $(TR $(TH x) $(TH fabs(x))) $(TR $(TD $(PLUSMN)0.0) $(TD +0.0) ) $(TR $(TD \\((PLUSMN)\\)(INFIN)) \\((TD +\\)(INFIN)) ) ) fabs(x) double fabs( double x ) ditto fabs(x) float fabs( float x ) ditto"
  },
  "phobos/std/math/algebraic/Functions/hypot.html": {
    "href": "phobos/std/math/algebraic/Functions/hypot.html",
    "title": "Overloads for - hypot | Marmos Demo",
    "keywords": "Overloads for - hypot Module std.math.algebraic hypot(x, y) T hypot( T x, T y ) Calculates the length of the hypotenuse of a right-angled triangle with sides of length x and y. The hypotenuse is the value of the square root of the sums of the squares of x and y: sqrt($(POWER x, 2) + $(POWER y, 2)) Note that hypot(x, y), hypot(y, x) and hypot(x, -y) are equivalent. $(TABLE_SV $(TR $(TH x) $(TH y) $(TH hypot(x, y)) $(TH invalid?)) $(TR $(TD x) $(TD $(PLUSMN)0.0) $(TD |x|) $(TD no)) $(TR $(TD $(PLUSMNINF)) $(TD y) \\((TD +\\)(INFIN)) $(TD no)) $(TR $(TD $(PLUSMNINF)) $(TD $(NAN)) \\((TD +\\)(INFIN)) $(TD no)) ) hypot(x, y, z) T hypot( T x, T y, T z ) Calculates the distance of the point (x, y, z) from the origin (0, 0, 0) in three-dimensional space. The distance is the value of the square root of the sums of the squares of x, y, and z: sqrt($(POWER x, 2) + $(POWER y, 2) + $(POWER z, 2)) Note that the distance between two points (x1, y1, z1) and (x2, y2, z2) in three-dimensional space can be calculated as hypot(x2-x1, y2-y1, z2-z1). Params x T floating point value y T floating point value z T floating point value Returns The square root of the sum of the squares of the given arguments."
  },
  "phobos/std/math/algebraic/Functions/nextPow2.html": {
    "href": "phobos/std/math/algebraic/Functions/nextPow2.html",
    "title": "Overloads for - nextPow2 | Marmos Demo",
    "keywords": "Overloads for - nextPow2 Module std.math.algebraic nextPow2(val) T nextPow2( T val ) Gives the next power of two after val . T can be any built-in numerical type. If the operation would lead to an over/underflow, this function will return 0 . Params val T any number Returns the next power of two after val nextPow2(val) T nextPow2( T val ) ditto"
  },
  "phobos/std/math/algebraic/Functions/poly.html": {
    "href": "phobos/std/math/algebraic/Functions/poly.html",
    "title": "Overloads for - poly | Marmos Demo",
    "keywords": "Overloads for - poly Module std.math.algebraic poly(x, A) Unqual!(CommonType!(T1, T2)) poly( T1 x, <bug: unknown> A ) Evaluate polynomial A(x) = $(SUB a, 0) + $(SUB a, 1)x + \\((SUB a, 2)\\)(POWER x,2) + \\((SUB a,3)\\)(POWER x,3); ... Uses Horner's rule A(x) = \\((SUB a, 0) + x(\\)(SUB a, 1) + x(\\((SUB a, 2) + x(\\)(SUB a, 3) + ...))) Params: x = the value to evaluate. A = array of coefficients $(SUB a, 0), $(SUB a, 1), etc. poly(x, A) Unqual!(CommonType!(T1, T2)) poly( T1 x, <bug: unknown> A ) ditto"
  },
  "phobos/std/math/algebraic/Functions/polyImpl.html": {
    "href": "phobos/std/math/algebraic/Functions/polyImpl.html",
    "title": "Overloads for - polyImpl | Marmos Demo",
    "keywords": "Overloads for - polyImpl Module std.math.algebraic polyImpl(x, A) real polyImpl( real x, <bug: unknown> A )"
  },
  "phobos/std/math/algebraic/Functions/polyImplBase.html": {
    "href": "phobos/std/math/algebraic/Functions/polyImplBase.html",
    "title": "Overloads for - polyImplBase | Marmos Demo",
    "keywords": "Overloads for - polyImplBase Module std.math.algebraic polyImplBase(x, A) Unqual!(CommonType!(T1, T2)) polyImplBase( T1 x, <bug: unknown> A )"
  },
  "phobos/std/math/algebraic/Functions/powFloatingPointImpl.html": {
    "href": "phobos/std/math/algebraic/Functions/powFloatingPointImpl.html",
    "title": "Overloads for - powFloatingPointImpl | Marmos Demo",
    "keywords": "Overloads for - powFloatingPointImpl Module std.math.algebraic powFloatingPointImpl(x) T powFloatingPointImpl( T x )"
  },
  "phobos/std/math/algebraic/Functions/powIntegralImpl.html": {
    "href": "phobos/std/math/algebraic/Functions/powIntegralImpl.html",
    "title": "Overloads for - powIntegralImpl | Marmos Demo",
    "keywords": "Overloads for - powIntegralImpl Module std.math.algebraic powIntegralImpl(val) T powIntegralImpl( T val )"
  },
  "phobos/std/math/algebraic/Functions/sqrt.html": {
    "href": "phobos/std/math/algebraic/Functions/sqrt.html",
    "title": "Overloads for - sqrt | Marmos Demo",
    "keywords": "Overloads for - sqrt Module std.math.algebraic sqrt(x) float sqrt( float x ) Compute square root of x. $(TABLE_SV $(TR $(TH x) $(TH sqrt(x)) $(TH invalid?)) $(TR $(TD -0.0) $(TD -0.0) $(TD no)) $(TR $(TD $(LT)0.0) $(TD $(NAN)) $(TD yes)) $(TR \\((TD +\\)(INFIN)) \\((TD +\\)(INFIN)) $(TD no)) ) sqrt(x) double sqrt( double x ) ditto sqrt(x) real sqrt( real x ) ditto"
  },
  "phobos/std/math/algebraic/Functions/truncPow2.html": {
    "href": "phobos/std/math/algebraic/Functions/truncPow2.html",
    "title": "Overloads for - truncPow2 | Marmos Demo",
    "keywords": "Overloads for - truncPow2 Module std.math.algebraic truncPow2(val) T truncPow2( T val ) Gives the last power of two before val . $(T) can be any built-in numerical type. Params val T any number Returns the last power of two before val truncPow2(val) T truncPow2( T val ) ditto"
  },
  "phobos/std/math/algebraic/Overview.html": {
    "href": "phobos/std/math/algebraic/Overview.html",
    "title": "Module - std.math.algebraic | Marmos Demo",
    "keywords": "Module - std.math.algebraic About This is a submodule of $(MREF std, math). It contains classical algebraic functions like abs , sqrt , and poly . Copyright: Copyright The D Language Foundation 2000 - 2011. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP digitalmars.com, Walter Bright), Don Clugston, Conversion of CEPHES math library to D by Iain Buclaw and David Nadlinger Source: $(PHOBOSSRC std/math/algebraic.d) Macros TABLE_SV Special Values $0 NAN $(RED NAN) POWER $1$2 SUB $1$2 PLUSMN ± INFIN ∞ PLUSMNINF ±∞ LT < Functions Name Description abs Calculates the absolute value of a number. cbrt Calculates the cube root of x. fabs Returns |x| hypot Calculates the length of the hypotenuse of a right-angled triangle with sides of length x and y. The hypotenuse is the value of the square root of the sums of the squares of x and y: nextPow2 Gives the next power of two after val . T can be any built-in numerical type. poly Evaluate polynomial A(x) = $(SUB a, 0) + $(SUB a, 1)x + \\((SUB a, 2)\\)(POWER x,2) + \\((SUB a,3)\\)(POWER x,3); ... polyImpl polyImplBase powFloatingPointImpl powIntegralImpl sqrt Compute square root of x. truncPow2 Gives the last power of two before val . $(T) can be any built-in numerical type."
  },
  "phobos/std/math/constants/Overview.html": {
    "href": "phobos/std/math/constants/Overview.html",
    "title": "Module - std.math.constants | Marmos Demo",
    "keywords": "Module - std.math.constants About This is a submodule of $(MREF std, math). It contains several useful mathematical constants. Copyright: Copyright The D Language Foundation 2000 - 2011. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP digitalmars.com, Walter Bright), Don Clugston Source: $(PHOBOSSRC std/math/constants.d) Macros SUB $1$2 PI π SQRT √ HALF ½ Variables Name Description E LN10 ln 10 = 2.302585... LN2 ln 2 = 0.693147... LOG10E $(SUB log, 10)e = 0.434294... LOG2 $(SUB log, 10)2 = 0.301029... LOG2E $(SUB log, 2)e = 1.442695... LOG2T $(SUB log, 2)10 = 3.321928... M_1_PI 1 / $(PI) = 0.318309... M_2_PI 2 / $(PI) = 0.636619... M_2_SQRTPI 2 / \\((SQRT)\\)(PI) = 1.128379... PI π = 3.141592... PI_2 $(PI) / 2 = 1.570796... PI_4 $(PI) / 4 = 0.785398... SQRT1_2 \\((SQRT)\\)(HALF) = 0.707106... SQRT2 $(SQRT)2 = 1.414213..."
  },
  "phobos/std/math/exponential/Functions/exp.html": {
    "href": "phobos/std/math/exponential/Functions/exp.html",
    "title": "Overloads for - exp | Marmos Demo",
    "keywords": "Overloads for - exp Module std.math.exponential exp(x) real exp( real x ) Calculates e$(SUPERSCRIPT x). $(TABLE_SV $(TR $(TH x) \\((TH e\\)(SUPERSCRIPT x)) ) $(TR \\((TD +\\)(INFIN)) \\((TD +\\)(INFIN)) ) $(TR \\((TD -\\)(INFIN)) $(TD +0.0) ) $(TR $(TD $(NAN)) $(TD $(NAN)) ) ) exp(x) double exp( double x ) ditto exp(x) float exp( float x ) ditto"
  },
  "phobos/std/math/exponential/Functions/exp2.html": {
    "href": "phobos/std/math/exponential/Functions/exp2.html",
    "title": "Overloads for - exp2 | Marmos Demo",
    "keywords": "Overloads for - exp2 Module std.math.exponential exp2(x) real exp2( real x ) Calculates 2$(SUPERSCRIPT x). $(TABLE_SV $(TR $(TH x) $(TH exp2(x)) ) $(TR \\((TD +\\)(INFIN)) \\((TD +\\)(INFIN)) ) $(TR \\((TD -\\)(INFIN)) $(TD +0.0) ) $(TR $(TD $(NAN)) $(TD $(NAN)) ) ) exp2(x) double exp2( double x ) ditto exp2(x) float exp2( float x ) ditto"
  },
  "phobos/std/math/exponential/Functions/exp2Asm.html": {
    "href": "phobos/std/math/exponential/Functions/exp2Asm.html",
    "title": "Overloads for - exp2Asm | Marmos Demo",
    "keywords": "Overloads for - exp2Asm Module std.math.exponential exp2Asm(x) real exp2Asm( real x )"
  },
  "phobos/std/math/exponential/Functions/exp2Impl.html": {
    "href": "phobos/std/math/exponential/Functions/exp2Impl.html",
    "title": "Overloads for - exp2Impl | Marmos Demo",
    "keywords": "Overloads for - exp2Impl Module std.math.exponential exp2Impl(x) T exp2Impl( T x )"
  },
  "phobos/std/math/exponential/Functions/expImpl.html": {
    "href": "phobos/std/math/exponential/Functions/expImpl.html",
    "title": "Overloads for - expImpl | Marmos Demo",
    "keywords": "Overloads for - expImpl Module std.math.exponential expImpl(x) T expImpl( T x )"
  },
  "phobos/std/math/exponential/Functions/expm1.html": {
    "href": "phobos/std/math/exponential/Functions/expm1.html",
    "title": "Overloads for - expm1 | Marmos Demo",
    "keywords": "Overloads for - expm1 Module std.math.exponential expm1(x) real expm1( real x ) Calculates the value of the natural logarithm base (e) raised to the power of x, minus 1. For very small x, expm1(x) is more accurate than exp(x)-1. $(TABLE_SV $(TR $(TH x) \\((TH e\\)(SUPERSCRIPT x)-1) ) $(TR $(TD $(PLUSMN)0.0) $(TD $(PLUSMN)0.0) ) $(TR \\((TD +\\)(INFIN)) \\((TD +\\)(INFIN)) ) $(TR \\((TD -\\)(INFIN)) $(TD -1.0) ) $(TR $(TD $(NAN)) $(TD $(NAN)) ) ) expm1(x) double expm1( double x ) ditto expm1(x) float expm1( float x ) ditto"
  },
  "phobos/std/math/exponential/Functions/expm1Asm.html": {
    "href": "phobos/std/math/exponential/Functions/expm1Asm.html",
    "title": "Overloads for - expm1Asm | Marmos Demo",
    "keywords": "Overloads for - expm1Asm Module std.math.exponential expm1Asm(x) real expm1Asm( real x )"
  },
  "phobos/std/math/exponential/Functions/expm1Impl.html": {
    "href": "phobos/std/math/exponential/Functions/expm1Impl.html",
    "title": "Overloads for - expm1Impl | Marmos Demo",
    "keywords": "Overloads for - expm1Impl Module std.math.exponential expm1Impl(x) T expm1Impl( T x )"
  },
  "phobos/std/math/exponential/Functions/frexp.html": {
    "href": "phobos/std/math/exponential/Functions/frexp.html",
    "title": "Overloads for - frexp | Marmos Demo",
    "keywords": "Overloads for - frexp Module std.math.exponential frexp(value, exp) T frexp( T value, int exp ) Separate floating point value into significand and exponent. Returns Calculate and return $(I x) and \\((I exp) such that value =\\)(I x)*2$(SUPERSCRIPT exp) and .5 \\((LT)= |\\)(I x)| $(LT) 1.0 $(I x) has same sign as value. $(TABLE_SV $(TR $(TH value) $(TH returns) $(TH exp)) $(TR $(TD $(PLUSMN)0.0) $(TD $(PLUSMN)0.0) $(TD 0)) $(TR \\((TD +\\)(INFIN)) \\((TD +\\)(INFIN)) $(TD int.max)) $(TR \\((TD -\\)(INFIN)) \\((TD -\\)(INFIN)) $(TD int.min)) $(TR $(TD \\((PLUSMN)\\)(NAN)) $(TD \\((PLUSMN)\\)(NAN)) $(TD int.min)) )"
  },
  "phobos/std/math/exponential/Functions/ilogb.html": {
    "href": "phobos/std/math/exponential/Functions/ilogb.html",
    "title": "Overloads for - ilogb | Marmos Demo",
    "keywords": "Overloads for - ilogb Module std.math.exponential ilogb(x) int ilogb( T x ) Extracts the exponent of x as a signed integral value. If x is not a special value, the result is the same as $(D cast(int) logb(x)). $(TABLE_SV $(TR $(TH x) $(TH ilogb(x)) $(TH Range error?)) $(TR $(TD 0) $(TD FP_ILOGB0) $(TD yes)) $(TR $(TD \\((PLUSMN)\\)(INFIN)) $(TD int.max) $(TD no)) $(TR $(TD $(NAN)) $(TD FP_ILOGBNAN) $(TD no)) ) ilogb(x) int ilogb( T x ) ditto ilogb(x) int ilogb( T x ) ditto"
  },
  "phobos/std/math/exponential/Functions/ldexp.html": {
    "href": "phobos/std/math/exponential/Functions/ldexp.html",
    "title": "Overloads for - ldexp | Marmos Demo",
    "keywords": "Overloads for - ldexp Module std.math.exponential ldexp(n, exp) real ldexp( real n, int exp ) Compute n 2$(SUPERSCRIPT exp) References: frexp ldexp(n, exp) double ldexp( double n, int exp ) ditto ldexp(n, exp) float ldexp( float n, int exp ) ditto"
  },
  "phobos/std/math/exponential/Functions/log.html": {
    "href": "phobos/std/math/exponential/Functions/log.html",
    "title": "Overloads for - log | Marmos Demo",
    "keywords": "Overloads for - log Module std.math.exponential log(x) real log( real x ) Calculate the natural logarithm of x. $(TABLE_SV $(TR $(TH x) $(TH log(x)) $(TH divide by 0?) $(TH invalid?)) $(TR $(TD $(PLUSMN)0.0) \\((TD -\\)(INFIN)) $(TD yes) $(TD no)) $(TR $(TD $(LT)0.0) $(TD $(NAN)) $(TD no) $(TD yes)) $(TR \\((TD +\\)(INFIN)) \\((TD +\\)(INFIN)) $(TD no) $(TD no)) ) log(x) double log( double x ) ditto log(x) float log( float x ) ditto log(x) real log( int x ) log(x) real log( uint x ) log(x) real log( long x ) log(x) real log( ulong x )"
  },
  "phobos/std/math/exponential/Functions/log10.html": {
    "href": "phobos/std/math/exponential/Functions/log10.html",
    "title": "Overloads for - log10 | Marmos Demo",
    "keywords": "Overloads for - log10 Module std.math.exponential log10(x) real log10( real x ) Calculate the base-10 logarithm of x. $(TABLE_SV $(TR $(TH x) $(TH log10(x)) $(TH divide by 0?) $(TH invalid?)) $(TR $(TD $(PLUSMN)0.0) \\((TD -\\)(INFIN)) $(TD yes) $(TD no)) $(TR $(TD $(LT)0.0) $(TD $(NAN)) $(TD no) $(TD yes)) $(TR \\((TD +\\)(INFIN)) \\((TD +\\)(INFIN)) $(TD no) $(TD no)) ) log10(x) double log10( double x ) ditto log10(x) float log10( float x ) ditto log10(x) real log10( int x ) log10(x) real log10( uint x ) log10(x) real log10( long x ) log10(x) real log10( ulong x )"
  },
  "phobos/std/math/exponential/Functions/log10Impl.html": {
    "href": "phobos/std/math/exponential/Functions/log10Impl.html",
    "title": "Overloads for - log10Impl | Marmos Demo",
    "keywords": "Overloads for - log10Impl Module std.math.exponential log10Impl(x) T log10Impl( T x )"
  },
  "phobos/std/math/exponential/Functions/log1p.html": {
    "href": "phobos/std/math/exponential/Functions/log1p.html",
    "title": "Overloads for - log1p | Marmos Demo",
    "keywords": "Overloads for - log1p Module std.math.exponential log1p(x) real log1p( real x ) Calculates the natural logarithm of 1 + x. For very small x, log1p(x) will be more accurate than log(1 + x). $(TABLE_SV $(TR $(TH x) $(TH log1p(x)) $(TH divide by 0?) $(TH invalid?)) $(TR $(TD $(PLUSMN)0.0) $(TD $(PLUSMN)0.0) $(TD no) $(TD no)) $(TR $(TD -1.0) \\((TD -\\)(INFIN)) $(TD yes) $(TD no)) $(TR $(TD $(LT)-1.0) \\((TD -\\)(NAN)) $(TD no) $(TD yes)) $(TR \\((TD +\\)(INFIN)) \\((TD +\\)(INFIN)) $(TD no) $(TD no)) ) log1p(x) double log1p( double x ) ditto log1p(x) float log1p( float x ) ditto log1p(x) real log1p( int x ) log1p(x) real log1p( uint x ) log1p(x) real log1p( long x ) log1p(x) real log1p( ulong x )"
  },
  "phobos/std/math/exponential/Functions/log1pImpl.html": {
    "href": "phobos/std/math/exponential/Functions/log1pImpl.html",
    "title": "Overloads for - log1pImpl | Marmos Demo",
    "keywords": "Overloads for - log1pImpl Module std.math.exponential log1pImpl(x) T log1pImpl( T x )"
  },
  "phobos/std/math/exponential/Functions/log2.html": {
    "href": "phobos/std/math/exponential/Functions/log2.html",
    "title": "Overloads for - log2 | Marmos Demo",
    "keywords": "Overloads for - log2 Module std.math.exponential log2(x) real log2( real x ) Calculates the base-2 logarithm of x $(SUB log, 2)x $(TABLE_SV $(TR $(TH x) $(TH log2(x)) $(TH divide by 0?) $(TH invalid?)) $(TR $(TD $(PLUSMN)0.0) \\((TD -\\)(INFIN)) $(TD yes) $(TD no) ) $(TR $(TD $(LT)0.0) $(TD $(NAN)) $(TD no) $(TD yes) ) $(TR \\((TD +\\)(INFIN)) \\((TD +\\)(INFIN)) $(TD no) $(TD no) ) ) log2(x) double log2( double x ) ditto log2(x) float log2( float x ) ditto log2(x) real log2( int x ) log2(x) real log2( uint x ) log2(x) real log2( long x ) log2(x) real log2( ulong x )"
  },
  "phobos/std/math/exponential/Functions/log2Impl.html": {
    "href": "phobos/std/math/exponential/Functions/log2Impl.html",
    "title": "Overloads for - log2Impl | Marmos Demo",
    "keywords": "Overloads for - log2Impl Module std.math.exponential log2Impl(x) T log2Impl( T x )"
  },
  "phobos/std/math/exponential/Functions/logImpl.html": {
    "href": "phobos/std/math/exponential/Functions/logImpl.html",
    "title": "Overloads for - logImpl | Marmos Demo",
    "keywords": "Overloads for - logImpl Module std.math.exponential logImpl(x) T logImpl( T x )"
  },
  "phobos/std/math/exponential/Functions/logb.html": {
    "href": "phobos/std/math/exponential/Functions/logb.html",
    "title": "Overloads for - logb | Marmos Demo",
    "keywords": "Overloads for - logb Module std.math.exponential logb(x) real logb( real x ) Extracts the exponent of x as a signed integral value. If x is subnormal, it is treated as if it were normalized. For a positive, finite x: 1 $(LT)= \\((I x) FLT_RADIX\\)(SUPERSCRIPT -logb(x)) $(LT) FLT_RADIX $(TABLE_SV $(TR $(TH x) $(TH logb(x)) $(TH divide by 0?) ) $(TR $(TD \\((PLUSMN)\\)(INFIN)) \\((TD +\\)(INFIN)) $(TD no)) $(TR $(TD $(PLUSMN)0.0) \\((TD -\\)(INFIN)) $(TD yes) ) ) logb(x) double logb( double x ) ditto logb(x) float logb( float x ) ditto"
  },
  "phobos/std/math/exponential/Functions/logbAsm.html": {
    "href": "phobos/std/math/exponential/Functions/logbAsm.html",
    "title": "Overloads for - logbAsm | Marmos Demo",
    "keywords": "Overloads for - logbAsm Module std.math.exponential logbAsm(x) T logbAsm( T x )"
  },
  "phobos/std/math/exponential/Functions/logbImpl.html": {
    "href": "phobos/std/math/exponential/Functions/logbImpl.html",
    "title": "Overloads for - logbImpl | Marmos Demo",
    "keywords": "Overloads for - logbImpl Module std.math.exponential logbImpl(x) T logbImpl( T x )"
  },
  "phobos/std/math/exponential/Functions/pow.html": {
    "href": "phobos/std/math/exponential/Functions/pow.html",
    "title": "Overloads for - pow | Marmos Demo",
    "keywords": "Overloads for - pow Module std.math.exponential pow(x, n) Unqual!(F) pow( F x, G n ) Compute the value of x $(SUPERSCRIPT n), where n is an integer pow(x, n) <bug: unknown> pow( F x, G n ) Compute the power of two integral numbers. Params x F base n G exponent Returns x raised to the power of n. If n is negative the result is 1 / pow(x, -n), which is calculated as integer division with remainder. This may result in a division by zero error. If both x and n are 0, the result is 1. Throws If x is 0 and n is negative, the result is the same as the result of a division by zero. pow(x, y) real pow( I x, F y ) Computes integer to floating point powers. pow(x, y) Unqual!(Largest!(F, G)) pow( F x, G y ) Calculates x$(SUPERSCRIPT y). $(TABLE_SV $(TR $(TH x) $(TH y) $(TH pow(x, y)) $(TH div 0) $(TH invalid?)) $(TR $(TD anything) $(TD $(PLUSMN)0.0) $(TD 1.0) $(TD no) $(TD no) ) $(TR $(TD |x| $(GT) 1) \\((TD +\\)(INFIN)) \\((TD +\\)(INFIN)) $(TD no) $(TD no) ) $(TR $(TD |x| $(LT) 1) \\((TD +\\)(INFIN)) $(TD +0.0) $(TD no) $(TD no) ) $(TR $(TD |x| $(GT) 1) \\((TD -\\)(INFIN)) $(TD +0.0) $(TD no) $(TD no) ) $(TR $(TD |x| $(LT) 1) \\((TD -\\)(INFIN)) \\((TD +\\)(INFIN)) $(TD no) $(TD no) ) $(TR \\((TD +\\)(INFIN)) $(TD $(GT) 0.0) \\((TD +\\)(INFIN)) $(TD no) $(TD no) ) $(TR \\((TD +\\)(INFIN)) $(TD $(LT) 0.0) $(TD +0.0) $(TD no) $(TD no) ) $(TR \\((TD -\\)(INFIN)) $(TD odd integer $(GT) 0.0) \\((TD -\\)(INFIN)) $(TD no) $(TD no) ) $(TR \\((TD -\\)(INFIN)) $(TD $(GT) 0.0, not odd integer) \\((TD +\\)(INFIN)) $(TD no) $(TD no)) $(TR \\((TD -\\)(INFIN)) $(TD odd integer $(LT) 0.0) $(TD -0.0) $(TD no) $(TD no) ) $(TR \\((TD -\\)(INFIN)) $(TD $(LT) 0.0, not odd integer) $(TD +0.0) $(TD no) $(TD no) ) $(TR $(TD $(PLUSMN)1.0) $(TD \\((PLUSMN)\\)(INFIN)) \\((TD -\\)(NAN)) $(TD no) $(TD yes) ) $(TR $(TD $(LT) 0.0) $(TD finite, nonintegral) $(TD $(NAN)) $(TD no) $(TD yes)) $(TR $(TD $(PLUSMN)0.0) $(TD odd integer $(LT) 0.0) $(TD $(PLUSMNINF)) $(TD yes) $(TD no) ) $(TR $(TD $(PLUSMN)0.0) $(TD $(LT) 0.0, not odd integer) \\((TD +\\)(INFIN)) $(TD yes) $(TD no)) $(TR $(TD $(PLUSMN)0.0) $(TD odd integer $(GT) 0.0) $(TD $(PLUSMN)0.0) $(TD no) $(TD no) ) $(TR $(TD $(PLUSMN)0.0) $(TD $(GT) 0.0, not odd integer) $(TD +0.0) $(TD no) $(TD no) ) )"
  },
  "phobos/std/math/exponential/Functions/powmod.html": {
    "href": "phobos/std/math/exponential/Functions/powmod.html",
    "title": "Overloads for - powmod | Marmos Demo",
    "keywords": "Overloads for - powmod Module std.math.exponential powmod(x, n, m) Unqual!(Largest!(F, H)) powmod( F x, G n, H m ) Computes the value of a positive integer x , raised to the power n , modulo m . Params: x = base n = exponent m = modulus Returns: x to the power n , modulo m . The return type is the largest of x 's and m 's type. The function requires that all values have unsigned types."
  },
  "phobos/std/math/exponential/Functions/scalbn.html": {
    "href": "phobos/std/math/exponential/Functions/scalbn.html",
    "title": "Overloads for - scalbn | Marmos Demo",
    "keywords": "Overloads for - scalbn Module std.math.exponential scalbn(x, n) real scalbn( real x, int n ) Efficiently calculates x 2$(SUPERSCRIPT n). scalbn handles underflow and overflow in the same fashion as the basic arithmetic operators. $(TABLE_SV $(TR $(TH x) $(TH scalb(x))) $(TR $(TD $(PLUSMNINF)) $(TD $(PLUSMNINF)) ) $(TR $(TD $(PLUSMN)0.0) $(TD $(PLUSMN)0.0) ) ) scalbn(x, n) double scalbn( double x, int n ) ditto scalbn(x, n) float scalbn( float x, int n ) ditto"
  },
  "phobos/std/math/exponential/Overview.html": {
    "href": "phobos/std/math/exponential/Overview.html",
    "title": "Module - std.math.exponential | Marmos Demo",
    "keywords": "Module - std.math.exponential About This is a submodule of $(MREF std, math). It contains several exponential and logarithm functions. Copyright: Copyright The D Language Foundation 2000 - 2011. D implementations of exp, expm1, exp2, log, log10, log1p, and log2 functions are based on the CEPHES math library, which is Copyright (C) 2001 Stephen L. Moshier \\((LT)steve@moshier.net\\)(GT) and are incorporated herein by permission of the author. The author reserves the right to distribute this material elsewhere under different copying permissions. These modifications are distributed here under the following terms: License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP digitalmars.com, Walter Bright), Don Clugston, Conversion of CEPHES math library to D by Iain Buclaw and David Nadlinger Source: $(PHOBOSSRC std/math/exponential.d) Macros TABLE_SV Special Values $0 NAN $(RED NAN) PLUSMN ± INFIN ∞ PLUSMNINF ±∞ LT < GT > Aliases Name Description FP_ILOGB0 Special return values of $(LREF ilogb). FP_ILOGBNAN ditto Functions Name Description exp Calculates e$(SUPERSCRIPT x). exp2 Calculates 2$(SUPERSCRIPT x). exp2Asm exp2Impl expImpl expm1 Calculates the value of the natural logarithm base (e) raised to the power of x, minus 1. expm1Asm expm1Impl frexp Separate floating point value into significand and exponent. ilogb Extracts the exponent of x as a signed integral value. ldexp Compute n 2$(SUPERSCRIPT exp) References: frexp log Calculate the natural logarithm of x. log10 Calculate the base-10 logarithm of x. log10Impl log1p Calculates the natural logarithm of 1 + x. log1pImpl log2 log2Impl logb Extracts the exponent of x as a signed integral value. logbAsm logbImpl logImpl pow Compute the value of x $(SUPERSCRIPT n), where n is an integer powmod Computes the value of a positive integer x , raised to the power n , modulo m . scalbn Efficiently calculates x 2$(SUPERSCRIPT n)."
  },
  "phobos/std/math/hardware/FloatingPointControl/Functions/clearExceptions.html": {
    "href": "phobos/std/math/hardware/FloatingPointControl/Functions/clearExceptions.html",
    "title": "Overloads for - clearExceptions | Marmos Demo",
    "keywords": "Overloads for - clearExceptions Module std.math.hardware Parent FloatingPointControl clearExceptions() void clearExceptions( ) static"
  },
  "phobos/std/math/hardware/FloatingPointControl/Functions/disableExceptions.html": {
    "href": "phobos/std/math/hardware/FloatingPointControl/Functions/disableExceptions.html",
    "title": "Overloads for - disableExceptions | Marmos Demo",
    "keywords": "Overloads for - disableExceptions Module std.math.hardware Parent FloatingPointControl disableExceptions(exceptions) void disableExceptions( ExceptionMask exceptions ) Disable (mask) specific hardware exceptions. Multiple exceptions may be ORed together."
  },
  "phobos/std/math/hardware/FloatingPointControl/Functions/enableExceptions.html": {
    "href": "phobos/std/math/hardware/FloatingPointControl/Functions/enableExceptions.html",
    "title": "Overloads for - enableExceptions | Marmos Demo",
    "keywords": "Overloads for - enableExceptions Module std.math.hardware Parent FloatingPointControl enableExceptions(exceptions) void enableExceptions( ExceptionMask exceptions ) Enable (unmask) specific hardware exceptions. Multiple exceptions may be ORed together."
  },
  "phobos/std/math/hardware/FloatingPointControl/Functions/enabledExceptions.html": {
    "href": "phobos/std/math/hardware/FloatingPointControl/Functions/enabledExceptions.html",
    "title": "Overloads for - enabledExceptions | Marmos Demo",
    "keywords": "Overloads for - enabledExceptions Module std.math.hardware Parent FloatingPointControl enabledExceptions() ExceptionMask enabledExceptions( ) static Returns: the exceptions which are currently enabled (unmasked)"
  },
  "phobos/std/math/hardware/FloatingPointControl/Functions/getControlState.html": {
    "href": "phobos/std/math/hardware/FloatingPointControl/Functions/getControlState.html",
    "title": "Overloads for - getControlState | Marmos Demo",
    "keywords": "Overloads for - getControlState Module std.math.hardware Parent FloatingPointControl getControlState() ControlState getControlState( ) static"
  },
  "phobos/std/math/hardware/FloatingPointControl/Functions/hasExceptionTraps.html": {
    "href": "phobos/std/math/hardware/FloatingPointControl/Functions/hasExceptionTraps.html",
    "title": "Overloads for - hasExceptionTraps | Marmos Demo",
    "keywords": "Overloads for - hasExceptionTraps Module std.math.hardware Parent FloatingPointControl hasExceptionTraps() bool hasExceptionTraps( ) static Returns: true if the current FPU supports exception trapping"
  },
  "phobos/std/math/hardware/FloatingPointControl/Functions/hasExceptionTraps_impl.html": {
    "href": "phobos/std/math/hardware/FloatingPointControl/Functions/hasExceptionTraps_impl.html",
    "title": "Overloads for - hasExceptionTraps_impl | Marmos Demo",
    "keywords": "Overloads for - hasExceptionTraps_impl Module std.math.hardware Parent FloatingPointControl hasExceptionTraps_impl() bool hasExceptionTraps_impl( ) static"
  },
  "phobos/std/math/hardware/FloatingPointControl/Functions/initialize.html": {
    "href": "phobos/std/math/hardware/FloatingPointControl/Functions/initialize.html",
    "title": "Overloads for - initialize | Marmos Demo",
    "keywords": "Overloads for - initialize Module std.math.hardware Parent FloatingPointControl initialize() void initialize( )"
  },
  "phobos/std/math/hardware/FloatingPointControl/Functions/rounding.html": {
    "href": "phobos/std/math/hardware/FloatingPointControl/Functions/rounding.html",
    "title": "Overloads for - rounding | Marmos Demo",
    "keywords": "Overloads for - rounding Module std.math.hardware Parent FloatingPointControl rounding(newMode) void rounding( RoundingMode newMode ) Change the floating-point hardware rounding mode Changing the rounding mode in the middle of a function can interfere with optimizations of floating point expressions, as the optimizer assumes that the rounding mode does not change. It is best to change the rounding mode only at the beginning of the function, and keep it until the function returns. It is also best to add the line: --- pragma(inline, false); --- as the first line of the function so it will not get inlined. Params: newMode = the new rounding mode rounding() RoundingMode rounding( ) static Returns: the currently active rounding mode"
  },
  "phobos/std/math/hardware/FloatingPointControl/Functions/setControlState.html": {
    "href": "phobos/std/math/hardware/FloatingPointControl/Functions/setControlState.html",
    "title": "Overloads for - setControlState | Marmos Demo",
    "keywords": "Overloads for - setControlState Module std.math.hardware Parent FloatingPointControl setControlState(newState) void setControlState( ControlState newState ) static"
  },
  "phobos/std/math/hardware/Functions/forceAddOp.html": {
    "href": "phobos/std/math/hardware/Functions/forceAddOp.html",
    "title": "Overloads for - forceAddOp | Marmos Demo",
    "keywords": "Overloads for - forceAddOp Module std.math.hardware forceAddOp(x, y) T forceAddOp( T x, T y )"
  },
  "phobos/std/math/hardware/Functions/forceDivOp.html": {
    "href": "phobos/std/math/hardware/Functions/forceDivOp.html",
    "title": "Overloads for - forceDivOp | Marmos Demo",
    "keywords": "Overloads for - forceDivOp Module std.math.hardware forceDivOp(x, y) T forceDivOp( T x, T y )"
  },
  "phobos/std/math/hardware/Functions/forceMulOp.html": {
    "href": "phobos/std/math/hardware/Functions/forceMulOp.html",
    "title": "Overloads for - forceMulOp | Marmos Demo",
    "keywords": "Overloads for - forceMulOp Module std.math.hardware forceMulOp(x, y) T forceMulOp( T x, T y )"
  },
  "phobos/std/math/hardware/Functions/forceSubOp.html": {
    "href": "phobos/std/math/hardware/Functions/forceSubOp.html",
    "title": "Overloads for - forceSubOp | Marmos Demo",
    "keywords": "Overloads for - forceSubOp Module std.math.hardware forceSubOp(x, y) T forceSubOp( T x, T y )"
  },
  "phobos/std/math/hardware/Functions/ieeeFlags.html": {
    "href": "phobos/std/math/hardware/Functions/ieeeFlags.html",
    "title": "Overloads for - ieeeFlags | Marmos Demo",
    "keywords": "Overloads for - ieeeFlags Module std.math.hardware ieeeFlags() IeeeFlags ieeeFlags( ) Returns: snapshot of the current state of the floating-point status flags"
  },
  "phobos/std/math/hardware/Functions/resetIeeeFlags.html": {
    "href": "phobos/std/math/hardware/Functions/resetIeeeFlags.html",
    "title": "Overloads for - resetIeeeFlags | Marmos Demo",
    "keywords": "Overloads for - resetIeeeFlags Module std.math.hardware resetIeeeFlags() void resetIeeeFlags( ) Set all of the floating-point status flags to false."
  },
  "phobos/std/math/hardware/IeeeFlags/Functions/divByZero.html": {
    "href": "phobos/std/math/hardware/IeeeFlags/Functions/divByZero.html",
    "title": "Overloads for - divByZero | Marmos Demo",
    "keywords": "Overloads for - divByZero Module std.math.hardware Parent IeeeFlags divByZero() bool divByZero( ) An infinity was generated by division by zero Example: x = 3/0.0;"
  },
  "phobos/std/math/hardware/IeeeFlags/Functions/getIeeeFlags.html": {
    "href": "phobos/std/math/hardware/IeeeFlags/Functions/getIeeeFlags.html",
    "title": "Overloads for - getIeeeFlags | Marmos Demo",
    "keywords": "Overloads for - getIeeeFlags Module std.math.hardware Parent IeeeFlags getIeeeFlags() uint getIeeeFlags( ) static"
  },
  "phobos/std/math/hardware/IeeeFlags/Functions/inexact.html": {
    "href": "phobos/std/math/hardware/IeeeFlags/Functions/inexact.html",
    "title": "Overloads for - inexact | Marmos Demo",
    "keywords": "Overloads for - inexact Module std.math.hardware Parent IeeeFlags inexact() bool inexact( ) The result cannot be represented exactly, so rounding occurred. Example: x = sin(0.1);"
  },
  "phobos/std/math/hardware/IeeeFlags/Functions/invalid.html": {
    "href": "phobos/std/math/hardware/IeeeFlags/Functions/invalid.html",
    "title": "Overloads for - invalid | Marmos Demo",
    "keywords": "Overloads for - invalid Module std.math.hardware Parent IeeeFlags invalid() bool invalid( ) A machine NaN was generated. Example: x = real.infinity * 0.0;"
  },
  "phobos/std/math/hardware/IeeeFlags/Functions/overflow.html": {
    "href": "phobos/std/math/hardware/IeeeFlags/Functions/overflow.html",
    "title": "Overloads for - overflow | Marmos Demo",
    "keywords": "Overloads for - overflow Module std.math.hardware Parent IeeeFlags overflow() bool overflow( ) An infinity was generated by overflow Example: x = real.max*2;"
  },
  "phobos/std/math/hardware/IeeeFlags/Functions/resetIeeeFlags.html": {
    "href": "phobos/std/math/hardware/IeeeFlags/Functions/resetIeeeFlags.html",
    "title": "Overloads for - resetIeeeFlags | Marmos Demo",
    "keywords": "Overloads for - resetIeeeFlags Module std.math.hardware Parent IeeeFlags resetIeeeFlags() void resetIeeeFlags( ) static"
  },
  "phobos/std/math/hardware/IeeeFlags/Functions/underflow.html": {
    "href": "phobos/std/math/hardware/IeeeFlags/Functions/underflow.html",
    "title": "Overloads for - underflow | Marmos Demo",
    "keywords": "Overloads for - underflow Module std.math.hardware Parent IeeeFlags underflow() bool underflow( ) A zero was generated by underflow Example: x = real.min*real.epsilon/2;"
  },
  "phobos/std/math/hardware/Overview.html": {
    "href": "phobos/std/math/hardware/Overview.html",
    "title": "Module - std.math.hardware | Marmos Demo",
    "keywords": "Module - std.math.hardware About This is a submodule of $(MREF std, math). It contains hardware support for floating point numbers. Copyright: Copyright The D Language Foundation 2000 - 2011. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP digitalmars.com, Walter Bright), Don Clugston, Conversion of CEPHES math library to D by Iain Buclaw and David Nadlinger Source: $(PHOBOSSRC std/math/hardware.d) Structs Name Description FloatingPointControl Control the Floating point hardware IeeeFlags IEEE exception status flags ('sticky bits') Functions Name Description forceAddOp forceDivOp forceMulOp forceSubOp ieeeFlags Returns: snapshot of the current state of the floating-point status flags resetIeeeFlags Set all of the floating-point status flags to false. Variables Name Description haveSSE"
  },
  "phobos/std/math/hardware/Structs/FloatingPointControl.html": {
    "href": "phobos/std/math/hardware/Structs/FloatingPointControl.html",
    "title": "Struct - FloatingPointControl | Marmos Demo",
    "keywords": "Struct - FloatingPointControl Module std.math.hardware public struct FloatingPointControl { // alias ControlState = <todo: marmos support pending>; // alias ExceptionMask = <todo: marmos support pending>; // alias RoundingMode = <todo: marmos support pending>; // void clearExceptions( ) static; // Disable (mask) specific hardware exceptions. Multiple exceptions may be ORed together. void disableExceptions( ExceptionMask exceptions ) ; // Returns: the exceptions which are currently enabled (unmasked) ExceptionMask enabledExceptions( ) static; // Enable (unmask) specific hardware exceptions. Multiple exceptions may be ORed together. void enableExceptions( ExceptionMask exceptions ) ; // ControlState getControlState( ) static; // Returns: true if the current FPU supports exception trapping bool hasExceptionTraps( ) static; // bool hasExceptionTraps_impl( ) static; // void initialize( ) ; // Change the floating-point hardware rounding mode void rounding( RoundingMode newMode ) ; // Returns: the currently active rounding mode RoundingMode rounding( ) static; // void setControlState( ControlState newState ) static; // bool initialized; // ControlState savedState; } About Control the Floating point hardware Change the IEEE754 floating-point rounding mode and the floating-point hardware exceptions. By default, the rounding mode is roundToNearest and all hardware exceptions are disabled. For most applications, debugging is easier if the $(I division by zero), $(I overflow), and $(I invalid operation) exceptions are enabled. These three are combined into a $(I severeExceptions) value for convenience. Note in particular that if $(I invalidException) is enabled, a hardware trap will be generated whenever an uninitialized floating-point variable is used. All changes are temporary. The previous state is restored at the end of the scope. Example: ---- { FloatingPointControl fpctrl; // Enable hardware exceptions for division by zero, overflow to infinity, // invalid operations, and uninitialized floating-point variables. fpctrl.enableExceptions(FloatingPointControl.severeExceptions); // This will generate a hardware exception, if x is a // default-initialized floating point variable: real x; // Add = 0 or even = real.nan to not throw the exception. real y = x 3.0; // The exception is only thrown for default-uninitialized NaN-s. // NaN-s with other payload are valid: real z = y real.nan; // ok // The set hardware exceptions and rounding modes will be disabled when // leaving this scope. } ---- Aliases Name Description ControlState ExceptionMask RoundingMode Functions Name Description clearExceptions disableExceptions Disable (mask) specific hardware exceptions. Multiple exceptions may be ORed together. enabledExceptions Returns: the exceptions which are currently enabled (unmasked) enableExceptions Enable (unmask) specific hardware exceptions. Multiple exceptions may be ORed together. getControlState hasExceptionTraps Returns: true if the current FPU supports exception trapping hasExceptionTraps_impl initialize rounding Change the floating-point hardware rounding mode setControlState Variables Name Description initialized savedState"
  },
  "phobos/std/math/hardware/Structs/IeeeFlags.html": {
    "href": "phobos/std/math/hardware/Structs/IeeeFlags.html",
    "title": "Struct - IeeeFlags | Marmos Demo",
    "keywords": "Struct - IeeeFlags Module std.math.hardware public struct IeeeFlags { // An infinity was generated by division by zero Example: `x = 3/0.0;` bool divByZero( ) ; // uint getIeeeFlags( ) static; // The result cannot be represented exactly, so rounding occurred. Example: `x = sin(0.1);` bool inexact( ) ; // A machine NaN was generated. Example: `x = real.infinity * 0.0;` bool invalid( ) ; // An infinity was generated by overflow Example: `x = real.max*2;` bool overflow( ) ; // void resetIeeeFlags( ) static; // A zero was generated by underflow Example: `x = real.min*real.epsilon/2;` bool underflow( ) ; // uint flags; } About IEEE exception status flags ('sticky bits') These flags indicate that an exceptional floating-point condition has occurred. They indicate that a NaN or an infinity has been generated, that a result is inexact, or that a signalling NaN has been encountered. If floating-point exceptions are enabled (unmasked), a hardware exception will be generated instead of setting these flags. Functions Name Description divByZero An infinity was generated by division by zero Example: x = 3/0.0; getIeeeFlags inexact The result cannot be represented exactly, so rounding occurred. Example: x = sin(0.1); invalid A machine NaN was generated. Example: x = real.infinity * 0.0; overflow An infinity was generated by overflow Example: x = real.max*2; resetIeeeFlags underflow A zero was generated by underflow Example: x = real.min*real.epsilon/2; Variables Name Description flags"
  },
  "phobos/std/math/operations/Functions/NaN.html": {
    "href": "phobos/std/math/operations/Functions/NaN.html",
    "title": "Overloads for - NaN | Marmos Demo",
    "keywords": "Overloads for - NaN Module std.math.operations NaN(payload) real NaN( ulong payload ) Create a quiet $(NAN), storing an integer inside the payload. For floats, the largest possible payload is 0x3F_FFFF. For doubles, it is 0x3_FFFF_FFFF_FFFF. For 80-bit or 128-bit reals, it is 0x3FFF_FFFF_FFFF_FFFF."
  },
  "phobos/std/math/operations/Functions/approxEqual.html": {
    "href": "phobos/std/math/operations/Functions/approxEqual.html",
    "title": "Overloads for - approxEqual | Marmos Demo",
    "keywords": "Overloads for - approxEqual Module std.math.operations approxEqual(value, reference, maxRelDiff, maxAbsDiff) bool approxEqual( T value, U reference, V maxRelDiff, V maxAbsDiff ) Computes whether a values is approximately equal to a reference value, admitting a maximum relative difference, and a maximum absolute difference. Warning This template is considered out-dated. It will be removed from Phobos in 2.106.0. Please use $(LREF isClose) instead. To achieve a similar behaviour to approxEqual(a, b) use isClose(a, b, 1e-2, 1e-5) . In case of comparing to 0.0, isClose(a, b, 0.0, eps) should be used, where eps represents the accepted deviation from 0.0.\" Params value T Value to compare. reference U Reference value. maxRelDiff V Maximum allowable difference relative to reference . reference = Reference value. maxRelDiff = Maximum allowable difference relative to reference . Setting to 0.0 disables this check. Defaults to 1e-2 . maxAbsDiff = Maximum absolute difference. This is mainly usefull for comparing values to zero. Setting to 0.0 disables this check. Defaults to 1e-5 . Returns true if value is approximately equal to reference under either criterium. It is sufficient, when value satisfies one of the two criteria. If one item is a range, and the other is a single value, then the result is the logical and-ing of calling approxEqual on each element of the ranged item against the single item. If both items are ranges, then approxEqual returns true if and only if the ranges have the same number of elements and if approxEqual evaluates to true for each pair of elements. See_Also: Use $(LREF feqrel) to get the number of equal bits in the mantissa."
  },
  "phobos/std/math/operations/Functions/cmp.html": {
    "href": "phobos/std/math/operations/Functions/cmp.html",
    "title": "Overloads for - cmp | Marmos Demo",
    "keywords": "Overloads for - cmp Module std.math.operations cmp(x, y) int cmp( T x, T y ) Defines a total order on all floating-point numbers. The order is defined as follows $(UL \\((LI All numbers in [-\\)(INFIN), +$(INFIN)] are ordered the same way as by built-in comparison, with the exception of -0.0, which is less than +0.0;) $(LI If the sign bit is set (that is, it's 'negative'), $(NAN) is less than any number; if the sign bit is not set (it is 'positive'), $(NAN) is greater than any number;) $(LI $(NAN)s of the same sign are ordered by the payload ('negative' ones - in reverse order).) ) Returns negative value if x precedes y in the order specified above; 0 if x and y are identical, and positive value otherwise. See_Also $(MYREF isIdentical) Standards: Conforms to IEEE 754-2008"
  },
  "phobos/std/math/operations/Functions/extractBitpattern.html": {
    "href": "phobos/std/math/operations/Functions/extractBitpattern.html",
    "title": "Overloads for - extractBitpattern | Marmos Demo",
    "keywords": "Overloads for - extractBitpattern Module std.math.operations extractBitpattern(value) FloatingPointBitpattern!(T) extractBitpattern( T value )"
  },
  "phobos/std/math/operations/Functions/fdim.html": {
    "href": "phobos/std/math/operations/Functions/fdim.html",
    "title": "Overloads for - fdim | Marmos Demo",
    "keywords": "Overloads for - fdim Module std.math.operations fdim(x, y) real fdim( real x, real y ) Returns the positive difference between x and y. Equivalent to fmax(x-y, 0) . Returns $(TABLE_SV $(TR $(TH x, y) $(TH fdim(x, y))) $(TR $(TD x $(GT) y) $(TD x - y)) $(TR $(TD x $(LT)= y) $(TD +0.0)) )"
  },
  "phobos/std/math/operations/Functions/feqrel.html": {
    "href": "phobos/std/math/operations/Functions/feqrel.html",
    "title": "Overloads for - feqrel | Marmos Demo",
    "keywords": "Overloads for - feqrel Module std.math.operations feqrel(x, y) int feqrel( X x, X y ) To what precision is x equal to y? Returns: the number of mantissa bits which are equal in x and y. eg, 0x1.F8p+60 and 0x1.F1p+60 are equal to 5 bits of precision. $(TABLE_SV $(TR $(TH x) $(TH y) $(TH feqrel(x, y))) $(TR $(TD x) $(TD x) $(TD real.mant_dig)) $(TR $(TD x) $(TD $(GT)= 2*x) $(TD 0)) $(TR $(TD x) $(TD $(LT)= x/2) $(TD 0)) $(TR $(TD $(NAN)) $(TD any) $(TD 0)) $(TR $(TD any) $(TD $(NAN)) $(TD 0)) )"
  },
  "phobos/std/math/operations/Functions/fma.html": {
    "href": "phobos/std/math/operations/Functions/fma.html",
    "title": "Overloads for - fma | Marmos Demo",
    "keywords": "Overloads for - fma Module std.math.operations fma(x, y, z) real fma( real x, real y, real z ) Returns (x y) + z, rounding only once according to the current rounding mode. BUGS: Not currently implemented - rounds twice."
  },
  "phobos/std/math/operations/Functions/fmax.html": {
    "href": "phobos/std/math/operations/Functions/fmax.html",
    "title": "Overloads for - fmax | Marmos Demo",
    "keywords": "Overloads for - fmax Module std.math.operations fmax(x, y) F fmax( F x, F y ) Returns the larger of x and y . If one of the arguments is a NaN , the other is returned. See_Also: $(REF max, std,algorithm,comparison) is faster because it does not perform the isNaN test."
  },
  "phobos/std/math/operations/Functions/fmin.html": {
    "href": "phobos/std/math/operations/Functions/fmin.html",
    "title": "Overloads for - fmin | Marmos Demo",
    "keywords": "Overloads for - fmin Module std.math.operations fmin(x, y) F fmin( F x, F y ) Returns the smaller of x and y . If one of the arguments is a NaN , the other is returned. See_Also: $(REF min, std,algorithm,comparison) is faster because it does not perform the isNaN test."
  },
  "phobos/std/math/operations/Functions/getNaNPayload.html": {
    "href": "phobos/std/math/operations/Functions/getNaNPayload.html",
    "title": "Overloads for - getNaNPayload | Marmos Demo",
    "keywords": "Overloads for - getNaNPayload Module std.math.operations getNaNPayload(x) ulong getNaNPayload( real x ) Extract an integral payload from a $(NAN). Returns the integer payload as a ulong. For floats, the largest possible payload is 0x3F_FFFF. For doubles, it is 0x3_FFFF_FFFF_FFFF. For 80-bit or 128-bit reals, it is 0x3FFF_FFFF_FFFF_FFFF."
  },
  "phobos/std/math/operations/Functions/isClose.html": {
    "href": "phobos/std/math/operations/Functions/isClose.html",
    "title": "Overloads for - isClose | Marmos Demo",
    "keywords": "Overloads for - isClose Module std.math.operations isClose(lhs, rhs, maxRelDiff, maxAbsDiff) bool isClose( T lhs, U rhs, V maxRelDiff, V maxAbsDiff ) Computes whether two values are approximately equal, admitting a maximum relative difference, and a maximum absolute difference. Params lhs T First item to compare. rhs U Second item to compare. maxRelDiff V Maximum allowable relative difference. rhs = Second item to compare. maxRelDiff = Maximum allowable relative difference. Setting to 0.0 disables this check. Default depends on the type of lhs and rhs : It is approximately half the number of decimal digits of precision of the smaller type. maxAbsDiff = Maximum absolute difference. This is mainly usefull for comparing values to zero. Setting to 0.0 disables this check. Defaults to 0.0 . Returns true if the two items are approximately equal under either criterium. It is sufficient, when value satisfies one of the two criteria. If one item is a range, and the other is a single value, then the result is the logical and-ing of calling isClose on each element of the ranged item against the single item. If both items are ranges, then isClose returns true if and only if the ranges have the same number of elements and if isClose evaluates to true for each pair of elements. See_Also: Use $(LREF feqrel) to get the number of equal bits in the mantissa."
  },
  "phobos/std/math/operations/Functions/nextDown.html": {
    "href": "phobos/std/math/operations/Functions/nextDown.html",
    "title": "Overloads for - nextDown | Marmos Demo",
    "keywords": "Overloads for - nextDown Module std.math.operations nextDown(x) real nextDown( real x ) Calculate the next smallest floating point value before x. Return the greatest number less than x that is representable as a real; thus, it gives the previous point on the IEEE number line. $(TABLE_SV $(SVH x, nextDown(x) ) $(SV $(INFIN), real.max ) $(SV $(PLUSMN)0.0, -real.min_normal*real.epsilon ) \\((SV -real.max, -\\)(INFIN) ) \\((SV -\\)(INFIN), -$(INFIN) ) $(SV $(NAN), $(NAN) ) ) nextDown(x) double nextDown( double x ) ditto nextDown(x) float nextDown( float x ) ditto"
  },
  "phobos/std/math/operations/Functions/nextUp.html": {
    "href": "phobos/std/math/operations/Functions/nextUp.html",
    "title": "Overloads for - nextUp | Marmos Demo",
    "keywords": "Overloads for - nextUp Module std.math.operations nextUp(x) real nextUp( real x ) Calculate the next largest floating point value after x. Return the least number greater than x that is representable as a real; thus, it gives the next point on the IEEE number line. $(TABLE_SV $(SVH x, nextUp(x) ) \\((SV -\\)(INFIN), -real.max ) $(SV $(PLUSMN)0.0, real.min_normal*real.epsilon ) $(SV real.max, $(INFIN) ) $(SV $(INFIN), $(INFIN) ) $(SV $(NAN), $(NAN) ) ) nextUp(x) double nextUp( double x ) ditto nextUp(x) float nextUp( float x ) ditto"
  },
  "phobos/std/math/operations/Functions/nextafter.html": {
    "href": "phobos/std/math/operations/Functions/nextafter.html",
    "title": "Overloads for - nextafter | Marmos Demo",
    "keywords": "Overloads for - nextafter Module std.math.operations nextafter(x, y) T nextafter( T x, T y ) Calculates the next representable value after x in the direction of y. If y > x, the result will be the next largest floating-point value; if y < x, the result will be the next smallest value. If x == y, the result is y. If x or y is a NaN, the result is a NaN. Remarks This function is not generally very useful; it's almost always better to use the faster functions nextUp() or nextDown() instead. The FE_INEXACT and FE_OVERFLOW exceptions will be raised if x is finite and the function result is infinite. The FE_INEXACT and FE_UNDERFLOW exceptions will be raised if the function value is subnormal, and x is not equal to y."
  },
  "phobos/std/math/operations/Overview.html": {
    "href": "phobos/std/math/operations/Overview.html",
    "title": "Module - std.math.operations | Marmos Demo",
    "keywords": "Module - std.math.operations About This is a submodule of $(MREF std, math). It contains several functions for work with floating point numbers. Copyright: Copyright The D Language Foundation 2000 - 2011. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP digitalmars.com, Walter Bright), Don Clugston, Conversion of CEPHES math library to D by Iain Buclaw and David Nadlinger Source: $(PHOBOSSRC std/math/operations.d) Macros TABLE_SV Special Values $0 SVH $(TR $(TH $1) $(TH $2)) SV $(TR $(TD $1) $(TD $2)) NAN $(RED NAN) PLUSMN ± INFIN ∞ LT < GT > Aliases Name Description baseT baseU Structs Name Description FloatingPointBitpattern Functions Name Description approxEqual Computes whether a values is approximately equal to a reference value, admitting a maximum relative difference, and a maximum absolute difference. cmp Defines a total order on all floating-point numbers. extractBitpattern fdim Returns the positive difference between x and y. feqrel To what precision is x equal to y? fma Returns (x y) + z, rounding only once according to the current rounding mode. fmax Returns the larger of x and y . fmin Returns the smaller of x and y . getNaNPayload Extract an integral payload from a $(NAN). isClose Computes whether two values are approximately equal, admitting a maximum relative difference, and a maximum absolute difference. NaN Create a quiet $(NAN), storing an integer inside the payload. nextafter Calculates the next representable value after x in the direction of y. nextDown Calculate the next smallest floating point value before x. nextUp Calculate the next largest floating point value after x. Variables Name Description CommonDefaultFor"
  },
  "phobos/std/math/operations/Structs/FloatingPointBitpattern.html": {
    "href": "phobos/std/math/operations/Structs/FloatingPointBitpattern.html",
    "title": "Struct - FloatingPointBitpattern | Marmos Demo",
    "keywords": "Struct - FloatingPointBitpattern Module std.math.operations public struct FloatingPointBitpattern { // int exponent; // ulong mantissa; // bool negative; } Variables Name Description exponent mantissa negative"
  },
  "phobos/std/math/remainder/Functions/fmod.html": {
    "href": "phobos/std/math/remainder/Functions/fmod.html",
    "title": "Overloads for - fmod | Marmos Demo",
    "keywords": "Overloads for - fmod Module std.math.remainder fmod(x, y) real fmod( real x, real y ) Calculates the remainder from the calculation x/y. Returns: The value of x - i y, where i is the number of times that y can be completely subtracted from x. The result has the same sign as x. $(TABLE_SV $(TR $(TH x) $(TH y) $(TH fmod(x, y)) $(TH invalid?)) $(TR $(TD $(PLUSMN)0.0) $(TD not 0.0) $(TD $(PLUSMN)0.0) $(TD no)) $(TR $(TD $(PLUSMNINF)) $(TD anything) $(TD $(NAN)) $(TD yes)) $(TR $(TD anything) $(TD $(PLUSMN)0.0) $(TD $(NAN)) $(TD yes)) $(TR \\((TD !=\\)(PLUSMNINF)) $(TD $(PLUSMNINF)) $(TD x) $(TD no)) )"
  },
  "phobos/std/math/remainder/Functions/modf.html": {
    "href": "phobos/std/math/remainder/Functions/modf.html",
    "title": "Overloads for - modf | Marmos Demo",
    "keywords": "Overloads for - modf Module std.math.remainder modf(x, i) real modf( real x, real i ) Breaks x into an integral part and a fractional part, each of which has the same sign as x. The integral part is stored in i. Returns: The fractional part of x. $(TABLE_SV $(TR $(TH x) $(TH i (on input)) $(TH modf(x, i)) $(TH i (on return))) $(TR $(TD $(PLUSMNINF)) $(TD anything) $(TD $(PLUSMN)0.0) $(TD $(PLUSMNINF))) )"
  },
  "phobos/std/math/remainder/Functions/remainder.html": {
    "href": "phobos/std/math/remainder/Functions/remainder.html",
    "title": "Overloads for - remainder | Marmos Demo",
    "keywords": "Overloads for - remainder Module std.math.remainder remainder(x, y) real remainder( real x, real y ) Calculate the remainder x REM y, following IEC 60559. REM is the value of x - y n, where n is the integer nearest the exact value of x / y. If |n - x / y| == 0.5, n is even. If the result is zero, it has the same sign as x. Otherwise, the sign of the result is the sign of x / y. Precision mode has no effect on the remainder functions. remquo returns n in the parameter n . $(TABLE_SV $(TR $(TH x) $(TH y) $(TH remainder(x, y)) $(TH n) $(TH invalid?)) $(TR $(TD $(PLUSMN)0.0) $(TD not 0.0) $(TD $(PLUSMN)0.0) $(TD 0.0) $(TD no)) $(TR $(TD $(PLUSMNINF)) $(TD anything) \\((TD -\\)(NAN)) $(TD ?) $(TD yes)) $(TR $(TD anything) $(TD $(PLUSMN)0.0) $(TD \\((PLUSMN)\\)(NAN)) $(TD ?) $(TD yes)) $(TR $(TD != $(PLUSMNINF)) $(TD $(PLUSMNINF)) $(TD x) $(TD ?) $(TD no)) )"
  },
  "phobos/std/math/remainder/Functions/remquo.html": {
    "href": "phobos/std/math/remainder/Functions/remquo.html",
    "title": "Overloads for - remquo | Marmos Demo",
    "keywords": "Overloads for - remquo Module std.math.remainder remquo(x, y, n) real remquo( real x, real y, int n ) ditto"
  },
  "phobos/std/math/remainder/Overview.html": {
    "href": "phobos/std/math/remainder/Overview.html",
    "title": "Module - std.math.remainder | Marmos Demo",
    "keywords": "Module - std.math.remainder About This is a submodule of $(MREF std, math). It contains several versions of remainder calculation. Copyright: Copyright The D Language Foundation 2000 - 2011. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP digitalmars.com, Walter Bright), Don Clugston, Conversion of CEPHES math library to D by Iain Buclaw and David Nadlinger Source: $(PHOBOSSRC std/math/remainder.d) Macros TABLE_SV Special Values $0 NAN $(RED NAN) PLUSMN ± PLUSMNINF ±∞ Functions Name Description fmod Calculates the remainder from the calculation x/y. Returns: The value of x - i y, where i is the number of times that y can be completely subtracted from x. The result has the same sign as x. modf Breaks x into an integral part and a fractional part, each of which has the same sign as x. The integral part is stored in i. Returns: The fractional part of x. remainder Calculate the remainder x REM y, following IEC 60559. remquo ditto"
  },
  "phobos/std/math/rounding/Functions/ceil.html": {
    "href": "phobos/std/math/rounding/Functions/ceil.html",
    "title": "Overloads for - ceil | Marmos Demo",
    "keywords": "Overloads for - ceil Module std.math.rounding ceil(x) real ceil( real x ) Returns the value of x rounded upward to the next integer (toward positive infinity). ceil(x) double ceil( double x ) ditto ceil(x) float ceil( float x ) ditto"
  },
  "phobos/std/math/rounding/Functions/floor.html": {
    "href": "phobos/std/math/rounding/Functions/floor.html",
    "title": "Overloads for - floor | Marmos Demo",
    "keywords": "Overloads for - floor Module std.math.rounding floor(x) real floor( real x ) Returns the value of x rounded downward to the next integer (toward negative infinity). floor(x) double floor( double x ) ditto floor(x) float floor( float x ) ditto"
  },
  "phobos/std/math/rounding/Functions/floorImpl.html": {
    "href": "phobos/std/math/rounding/Functions/floorImpl.html",
    "title": "Overloads for - floorImpl | Marmos Demo",
    "keywords": "Overloads for - floorImpl Module std.math.rounding floorImpl(x) T floorImpl( T x )"
  },
  "phobos/std/math/rounding/Functions/lrint.html": {
    "href": "phobos/std/math/rounding/Functions/lrint.html",
    "title": "Overloads for - lrint | Marmos Demo",
    "keywords": "Overloads for - lrint Module std.math.rounding lrint(x) long lrint( real x ) Rounds x to the nearest integer value, using the current rounding mode. This is generally the fastest method to convert a floating-point number to an integer. Note that the results from this function depend on the rounding mode, if the fractional part of x is exactly 0.5. If using the default rounding mode (ties round to even integers) lrint(4.5) == 4, lrint(5.5)==6."
  },
  "phobos/std/math/rounding/Functions/lround.html": {
    "href": "phobos/std/math/rounding/Functions/lround.html",
    "title": "Overloads for - lround | Marmos Demo",
    "keywords": "Overloads for - lround Module std.math.rounding lround(x) long lround( real x ) Return the value of x rounded to the nearest integer. If the fractional part of x is exactly 0.5, the return value is rounded away from zero."
  },
  "phobos/std/math/rounding/Functions/nearbyint.html": {
    "href": "phobos/std/math/rounding/Functions/nearbyint.html",
    "title": "Overloads for - nearbyint | Marmos Demo",
    "keywords": "Overloads for - nearbyint Module std.math.rounding nearbyint(x) real nearbyint( real x ) Rounds x to the nearest integer value, using the current rounding mode. Unlike the rint functions, nearbyint does not raise the FE_INEXACT exception."
  },
  "phobos/std/math/rounding/Functions/quantize.html": {
    "href": "phobos/std/math/rounding/Functions/quantize.html",
    "title": "Overloads for - quantize | Marmos Demo",
    "keywords": "Overloads for - quantize Module std.math.rounding quantize(val, unit) Unqual!(F) quantize( F val, F unit ) Round val to a multiple of unit . rfunc specifies the rounding function to use; by default this is rint , which uses the current rounding mode. quantize(val, exp) Unqual!(F) quantize( F val, E exp ) Round val to a multiple of pow(base, exp) . rfunc specifies the rounding function to use; by default this is rint , which uses the current rounding mode. quantize(val) Unqual!(F) quantize( F val ) ditto"
  },
  "phobos/std/math/rounding/Functions/rint.html": {
    "href": "phobos/std/math/rounding/Functions/rint.html",
    "title": "Overloads for - rint | Marmos Demo",
    "keywords": "Overloads for - rint Module std.math.rounding rint(x) real rint( real x ) Rounds x to the nearest integer value, using the current rounding mode. If the return value is not equal to x, the FE_INEXACT exception is raised. $(LREF nearbyint) performs the same operation, but does not set the FE_INEXACT exception. rint(x) double rint( double x ) ditto rint(x) float rint( float x ) ditto"
  },
  "phobos/std/math/rounding/Functions/rndtol.html": {
    "href": "phobos/std/math/rounding/Functions/rndtol.html",
    "title": "Overloads for - rndtol | Marmos Demo",
    "keywords": "Overloads for - rndtol Module std.math.rounding rndtol(x) long rndtol( real x ) Returns x rounded to a long value using the current rounding mode. If the integer value of x is greater than long.max, the result is indeterminate. rndtol(x) long rndtol( double x ) ditto rndtol(x) long rndtol( float x ) ditto"
  },
  "phobos/std/math/rounding/Functions/round.html": {
    "href": "phobos/std/math/rounding/Functions/round.html",
    "title": "Overloads for - round | Marmos Demo",
    "keywords": "Overloads for - round Module std.math.rounding round(x) <bug: unknown> round( real x ) auto Return the value of x rounded to the nearest integer. If the fractional part of x is exactly 0.5, the return value is rounded away from zero. Returns A real ."
  },
  "phobos/std/math/rounding/Functions/trunc.html": {
    "href": "phobos/std/math/rounding/Functions/trunc.html",
    "title": "Overloads for - trunc | Marmos Demo",
    "keywords": "Overloads for - trunc Module std.math.rounding trunc(x) real trunc( real x ) Returns the integer portion of x, dropping the fractional portion. This is also known as \"chop\" rounding. pure on all platforms."
  },
  "phobos/std/math/rounding/Overview.html": {
    "href": "phobos/std/math/rounding/Overview.html",
    "title": "Module - std.math.rounding | Marmos Demo",
    "keywords": "Module - std.math.rounding About This is a submodule of $(MREF std, math). It contains several functions for rounding floating point numbers. Copyright: Copyright The D Language Foundation 2000 - 2011. D implementations of floor, ceil, and lrint functions are based on the CEPHES math library, which is Copyright (C) 2001 Stephen L. Moshier \\((LT)steve@moshier.net\\)(GT) and are incorporated herein by permission of the author. The author reserves the right to distribute this material elsewhere under different copying permissions. These modifications are distributed here under the following terms: License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP digitalmars.com, Walter Bright), Don Clugston, Conversion of CEPHES math library to D by Iain Buclaw and David Nadlinger Source: $(PHOBOSSRC std/math/rounding.d) Functions Name Description ceil Returns the value of x rounded upward to the next integer (toward positive infinity). floor Returns the value of x rounded downward to the next integer (toward negative infinity). floorImpl lrint Rounds x to the nearest integer value, using the current rounding mode. lround Return the value of x rounded to the nearest integer. nearbyint Rounds x to the nearest integer value, using the current rounding mode. quantize Round val to a multiple of unit . rfunc specifies the rounding function to use; by default this is rint , which uses the current rounding mode. rint Rounds x to the nearest integer value, using the current rounding mode. rndtol Returns x rounded to a long value using the current rounding mode. If the integer value of x is greater than long.max, the result is indeterminate. round Return the value of x rounded to the nearest integer. If the fractional part of x is exactly 0.5, the return value is rounded away from zero. trunc Returns the integer portion of x, dropping the fractional portion. This is also known as \"chop\" rounding. pure on all platforms."
  },
  "phobos/std/math/traits/Functions/copysign.html": {
    "href": "phobos/std/math/traits/Functions/copysign.html",
    "title": "Overloads for - copysign | Marmos Demo",
    "keywords": "Overloads for - copysign Module std.math.traits copysign(to, from) R copysign( R to, X from ) Params to R the numeric value to use from X the sign value to use from = the sign value to use Returns: a value composed of to with from's sign bit. copysign(to, from) R copysign( X to, R from ) ditto"
  },
  "phobos/std/math/traits/Functions/isFinite.html": {
    "href": "phobos/std/math/traits/Functions/isFinite.html",
    "title": "Overloads for - isFinite | Marmos Demo",
    "keywords": "Overloads for - isFinite Module std.math.traits isFinite(x) bool isFinite( X x ) Determines if $(D_PARAM x) is finite. Params: x = a floating point number. Returns: true if $(D_PARAM x) is finite."
  },
  "phobos/std/math/traits/Functions/isIdentical.html": {
    "href": "phobos/std/math/traits/Functions/isIdentical.html",
    "title": "Overloads for - isIdentical | Marmos Demo",
    "keywords": "Overloads for - isIdentical Module std.math.traits isIdentical(x, y) bool isIdentical( real x, real y ) Is the binary representation of x identical to y?"
  },
  "phobos/std/math/traits/Functions/isInfinity.html": {
    "href": "phobos/std/math/traits/Functions/isInfinity.html",
    "title": "Overloads for - isInfinity | Marmos Demo",
    "keywords": "Overloads for - isInfinity Module std.math.traits isInfinity(x) bool isInfinity( X x ) Determines if $(D_PARAM x) is \\((PLUSMN)\\)(INFIN). Params: x = a floating point number. Returns: true if $(D_PARAM x) is \\((PLUSMN)\\)(INFIN)."
  },
  "phobos/std/math/traits/Functions/isNaN.html": {
    "href": "phobos/std/math/traits/Functions/isNaN.html",
    "title": "Overloads for - isNaN | Marmos Demo",
    "keywords": "Overloads for - isNaN Module std.math.traits isNaN(x) bool isNaN( X x ) Determines if $(D_PARAM x) is NaN. Params: x = a floating point number. Returns: true if $(D_PARAM x) is Nan."
  },
  "phobos/std/math/traits/Functions/isNormal.html": {
    "href": "phobos/std/math/traits/Functions/isNormal.html",
    "title": "Overloads for - isNormal | Marmos Demo",
    "keywords": "Overloads for - isNormal Module std.math.traits isNormal(x) bool isNormal( X x ) Determines if $(D_PARAM x) is normalized. A normalized number must not be zero, subnormal, infinite nor $(NAN). Params x X a floating point number. Returns true if $(D_PARAM x) is normalized."
  },
  "phobos/std/math/traits/Functions/isPowerOf2.html": {
    "href": "phobos/std/math/traits/Functions/isPowerOf2.html",
    "title": "Overloads for - isPowerOf2 | Marmos Demo",
    "keywords": "Overloads for - isPowerOf2 Module std.math.traits isPowerOf2(x) bool isPowerOf2( X x ) Check whether a number is an integer power of two. Note that only positive numbers can be integer powers of two. This function always return false if x is negative or zero. Params x X the number to test Returns true if x is an integer power of two."
  },
  "phobos/std/math/traits/Functions/isSubnormal.html": {
    "href": "phobos/std/math/traits/Functions/isSubnormal.html",
    "title": "Overloads for - isSubnormal | Marmos Demo",
    "keywords": "Overloads for - isSubnormal Module std.math.traits isSubnormal(x) bool isSubnormal( X x ) Determines if $(D_PARAM x) is subnormal. Subnormals (also known as \"denormal number\"), have a 0 exponent and a 0 most significant mantissa bit. Params x X a floating point number. Returns true if $(D_PARAM x) is a denormal number."
  },
  "phobos/std/math/traits/Functions/sgn.html": {
    "href": "phobos/std/math/traits/Functions/sgn.html",
    "title": "Overloads for - sgn | Marmos Demo",
    "keywords": "Overloads for - sgn Module std.math.traits sgn(x) F sgn( F x ) Returns -1 if $(D x < 0), x if $(D x == 0), 1 if $(D x > 0), and \\((NAN) if x==\\)(NAN)."
  },
  "phobos/std/math/traits/Functions/signbit.html": {
    "href": "phobos/std/math/traits/Functions/signbit.html",
    "title": "Overloads for - signbit | Marmos Demo",
    "keywords": "Overloads for - signbit Module std.math.traits signbit(x) int signbit( X x ) Return 1 if sign bit of e is set, 0 if not."
  },
  "phobos/std/math/traits/Overview.html": {
    "href": "phobos/std/math/traits/Overview.html",
    "title": "Module - std.math.traits | Marmos Demo",
    "keywords": "Module - std.math.traits About This is a submodule of $(MREF std, math). It contains several functions for introspection on numerical values. Copyright: Copyright The D Language Foundation 2000 - 2011. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP digitalmars.com, Walter Bright), Don Clugston, Conversion of CEPHES math library to D by Iain Buclaw and David Nadlinger Source: $(PHOBOSSRC std/math/traits.d) Macros NAN $(RED NAN) PLUSMN ± INFIN ∞ Functions Name Description copysign isFinite Determines if $(D_PARAM x) is finite. Params: x = a floating point number. Returns: true if $(D_PARAM x) is finite. isIdentical Is the binary representation of x identical to y? isInfinity Determines if $(D_PARAM x) is \\((PLUSMN)\\)(INFIN). Params: x = a floating point number. Returns: true if $(D_PARAM x) is \\((PLUSMN)\\)(INFIN). isNaN Determines if $(D_PARAM x) is NaN. Params: x = a floating point number. Returns: true if $(D_PARAM x) is Nan. isNormal Determines if $(D_PARAM x) is normalized. isPowerOf2 Check whether a number is an integer power of two. isSubnormal Determines if $(D_PARAM x) is subnormal. sgn Returns -1 if $(D x < 0), x if $(D x == 0), 1 if $(D x > 0), and \\((NAN) if x==\\)(NAN). signbit Return 1 if sign bit of e is set, 0 if not. Variables Name Description MANTISSA_LSB MANTISSA_MSB"
  },
  "phobos/std/math/trigonometry/Functions/acos.html": {
    "href": "phobos/std/math/trigonometry/Functions/acos.html",
    "title": "Overloads for - acos | Marmos Demo",
    "keywords": "Overloads for - acos Module std.math.trigonometry acos(x) real acos( real x ) Calculates the arc cosine of x, returning a value ranging from 0 to $(PI). $(TABLE_SV $(TR $(TH x) $(TH acos(x)) $(TH invalid?)) $(TR $(TD $(GT)1.0) $(TD $(NAN)) $(TD yes)) $(TR $(TD $(LT)-1.0) $(TD $(NAN)) $(TD yes)) $(TR $(TD $(NAN)) $(TD $(NAN)) $(TD yes)) ) acos(x) double acos( double x ) ditto acos(x) float acos( float x ) ditto"
  },
  "phobos/std/math/trigonometry/Functions/acosh.html": {
    "href": "phobos/std/math/trigonometry/Functions/acosh.html",
    "title": "Overloads for - acosh | Marmos Demo",
    "keywords": "Overloads for - acosh Module std.math.trigonometry acosh(x) real acosh( real x ) Calculates the inverse hyperbolic cosine of x. Mathematically, acosh(x) = log(x + sqrt( x*x - 1)) $(TABLE_DOMRG \\((DOMAIN 1..\\)(INFIN)), \\((RANGE 0..\\)(INFIN)) ) $(TABLE_SV $(SVH x, acosh(x) ) $(SV $(NAN), $(NAN) ) $(SV $(LT)1, $(NAN) ) $(SV 1, 0 ) \\((SV +\\)(INFIN),+$(INFIN)) ) acosh(x) double acosh( double x ) ditto acosh(x) float acosh( float x ) ditto"
  },
  "phobos/std/math/trigonometry/Functions/asin.html": {
    "href": "phobos/std/math/trigonometry/Functions/asin.html",
    "title": "Overloads for - asin | Marmos Demo",
    "keywords": "Overloads for - asin Module std.math.trigonometry asin(x) real asin( real x ) Calculates the arc sine of x, returning a value ranging from -$(PI)/2 to $(PI)/2. $(TABLE_SV $(TR $(TH x) $(TH asin(x)) $(TH invalid?)) $(TR $(TD $(PLUSMN)0.0) $(TD $(PLUSMN)0.0) $(TD no)) $(TR $(TD $(GT)1.0) $(TD $(NAN)) $(TD yes)) $(TR $(TD $(LT)-1.0) $(TD $(NAN)) $(TD yes)) ) asin(x) double asin( double x ) ditto asin(x) float asin( float x ) ditto"
  },
  "phobos/std/math/trigonometry/Functions/asinh.html": {
    "href": "phobos/std/math/trigonometry/Functions/asinh.html",
    "title": "Overloads for - asinh | Marmos Demo",
    "keywords": "Overloads for - asinh Module std.math.trigonometry asinh(x) real asinh( real x ) Calculates the inverse hyperbolic sine of x. Mathematically, --------------- asinh(x) = log( x + sqrt( xx + 1 )) // if x >= +0 asinh(x) = -log(-x + sqrt( xx + 1 )) // if x <= -0 ------------- $(TABLE_SV $(SVH x, asinh(x) ) $(SV $(NAN), $(NAN) ) $(SV $(PLUSMN)0, $(PLUSMN)0 ) $(SV \\((PLUSMN)\\)(INFIN),\\((PLUSMN)\\)(INFIN)) ) asinh(x) double asinh( double x ) ditto asinh(x) float asinh( float x ) ditto"
  },
  "phobos/std/math/trigonometry/Functions/atan.html": {
    "href": "phobos/std/math/trigonometry/Functions/atan.html",
    "title": "Overloads for - atan | Marmos Demo",
    "keywords": "Overloads for - atan Module std.math.trigonometry atan(x) real atan( real x ) Calculates the arc tangent of x, returning a value ranging from -$(PI)/2 to $(PI)/2. $(TABLE_SV $(TR $(TH x) $(TH atan(x)) $(TH invalid?)) $(TR $(TD $(PLUSMN)0.0) $(TD $(PLUSMN)0.0) $(TD no)) $(TR $(TD \\((PLUSMN)\\)(INFIN)) $(TD $(NAN)) $(TD yes)) ) atan(x) double atan( double x ) ditto atan(x) float atan( float x ) ditto"
  },
  "phobos/std/math/trigonometry/Functions/atan2.html": {
    "href": "phobos/std/math/trigonometry/Functions/atan2.html",
    "title": "Overloads for - atan2 | Marmos Demo",
    "keywords": "Overloads for - atan2 Module std.math.trigonometry atan2(y, x) real atan2( real y, real x ) Calculates the arc tangent of y / x, returning a value ranging from -$(PI) to $(PI). $(TABLE_SV $(TR $(TH y) $(TH x) $(TH atan(y, x))) $(TR $(TD $(NAN)) $(TD anything) $(TD $(NAN)) ) $(TR $(TD anything) $(TD $(NAN)) $(TD $(NAN)) ) $(TR $(TD $(PLUSMN)0.0) $(TD $(GT)0.0) $(TD $(PLUSMN)0.0) ) $(TR $(TD $(PLUSMN)0.0) $(TD +0.0) $(TD $(PLUSMN)0.0) ) $(TR $(TD $(PLUSMN)0.0) $(TD $(LT)0.0) $(TD \\((PLUSMN)\\)(PI))) $(TR $(TD $(PLUSMN)0.0) $(TD -0.0) $(TD \\((PLUSMN)\\)(PI))) $(TR $(TD $(GT)0.0) $(TD $(PLUSMN)0.0) $(TD $(PI)/2) ) $(TR $(TD $(LT)0.0) $(TD $(PLUSMN)0.0) \\((TD -\\)(PI)/2) ) $(TR $(TD $(GT)0.0) $(TD $(INFIN)) $(TD $(PLUSMN)0.0) ) $(TR $(TD \\((PLUSMN)\\)(INFIN)) $(TD anything) $(TD \\((PLUSMN)\\)(PI)/2)) $(TR $(TD $(GT)0.0) \\((TD -\\)(INFIN)) $(TD \\((PLUSMN)\\)(PI)) ) $(TR $(TD \\((PLUSMN)\\)(INFIN)) $(TD $(INFIN)) $(TD \\((PLUSMN)\\)(PI)/4)) $(TR $(TD \\((PLUSMN)\\)(INFIN)) \\((TD -\\)(INFIN)) $(TD \\((PLUSMN)3\\)(PI)/4)) ) atan2(y, x) double atan2( double y, double x ) ditto atan2(y, x) float atan2( float y, float x ) ditto"
  },
  "phobos/std/math/trigonometry/Functions/atan2Asm.html": {
    "href": "phobos/std/math/trigonometry/Functions/atan2Asm.html",
    "title": "Overloads for - atan2Asm | Marmos Demo",
    "keywords": "Overloads for - atan2Asm Module std.math.trigonometry atan2Asm(y, x) real atan2Asm( real y, real x )"
  },
  "phobos/std/math/trigonometry/Functions/atan2Impl.html": {
    "href": "phobos/std/math/trigonometry/Functions/atan2Impl.html",
    "title": "Overloads for - atan2Impl | Marmos Demo",
    "keywords": "Overloads for - atan2Impl Module std.math.trigonometry atan2Impl(y, x) T atan2Impl( T y, T x )"
  },
  "phobos/std/math/trigonometry/Functions/atanImpl.html": {
    "href": "phobos/std/math/trigonometry/Functions/atanImpl.html",
    "title": "Overloads for - atanImpl | Marmos Demo",
    "keywords": "Overloads for - atanImpl Module std.math.trigonometry atanImpl(x) T atanImpl( T x )"
  },
  "phobos/std/math/trigonometry/Functions/atanh.html": {
    "href": "phobos/std/math/trigonometry/Functions/atanh.html",
    "title": "Overloads for - atanh | Marmos Demo",
    "keywords": "Overloads for - atanh Module std.math.trigonometry atanh(x) real atanh( real x ) Calculates the inverse hyperbolic tangent of x, returning a value from ranging from -1 to 1. Mathematically, atanh(x) = log( (1+x)/(1-x) ) / 2 $(TABLE_DOMRG \\((DOMAIN -\\)(INFIN)..$(INFIN)), $(RANGE -1 .. 1) ) $(BR) $(TABLE_SV $(SVH x, acosh(x) ) $(SV $(NAN), $(NAN) ) $(SV $(PLUSMN)0, $(PLUSMN)0) \\((SV -\\)(INFIN), -0) ) atanh(x) double atanh( double x ) ditto atanh(x) float atanh( float x ) ditto"
  },
  "phobos/std/math/trigonometry/Functions/cos.html": {
    "href": "phobos/std/math/trigonometry/Functions/cos.html",
    "title": "Overloads for - cos | Marmos Demo",
    "keywords": "Overloads for - cos Module std.math.trigonometry cos(x) real cos( real x ) Returns cosine of x. x is in radians. $(TABLE_SV $(TR $(TH x) $(TH cos(x)) $(TH invalid?)) $(TR $(TD $(NAN)) $(TD $(NAN)) $(TD yes) ) $(TR $(TD \\((PLUSMN)\\)(INFIN)) $(TD $(NAN)) $(TD yes) ) ) Bugs: Results are undefined if |x| >= $(POWER 2,64). cos(x) double cos( double x ) ditto cos(x) float cos( float x ) ditto"
  },
  "phobos/std/math/trigonometry/Functions/cosh.html": {
    "href": "phobos/std/math/trigonometry/Functions/cosh.html",
    "title": "Overloads for - cosh | Marmos Demo",
    "keywords": "Overloads for - cosh Module std.math.trigonometry cosh(x) real cosh( real x ) Calculates the hyperbolic cosine of x. $(TABLE_SV $(TR $(TH x) $(TH cosh(x)) $(TH invalid?)) $(TR $(TD \\((PLUSMN)\\)(INFIN)) $(TD $(PLUSMN)0.0) $(TD no) ) ) cosh(x) double cosh( double x ) ditto cosh(x) float cosh( float x ) ditto"
  },
  "phobos/std/math/trigonometry/Functions/sin.html": {
    "href": "phobos/std/math/trigonometry/Functions/sin.html",
    "title": "Overloads for - sin | Marmos Demo",
    "keywords": "Overloads for - sin Module std.math.trigonometry sin(x) real sin( real x ) Returns $(HTTP en.wikipedia.org/wiki/Sine, sine) of x. x is in $(HTTP en.wikipedia.org/wiki/Radian, radians). $(TABLE_SV $(TH3 x , sin(x) , invalid?) $(TD3 $(NAN) , $(NAN) , yes ) $(TD3 $(PLUSMN)0.0, $(PLUSMN)0.0, no ) $(TD3 $(PLUSMNINF), $(NAN) , yes ) ) Params x real angle in radians (not degrees) Returns sine of x See_Also: $(MYREF cos), $(MYREF tan), $(MYREF asin) Bugs: Results are undefined if |x| >= $(POWER 2,64). sin(x) double sin( double x ) ditto sin(x) float sin( float x ) ditto"
  },
  "phobos/std/math/trigonometry/Functions/sinh.html": {
    "href": "phobos/std/math/trigonometry/Functions/sinh.html",
    "title": "Overloads for - sinh | Marmos Demo",
    "keywords": "Overloads for - sinh Module std.math.trigonometry sinh(x) real sinh( real x ) Calculates the hyperbolic sine of x. $(TABLE_SV $(TR $(TH x) $(TH sinh(x)) $(TH invalid?)) $(TR $(TD $(PLUSMN)0.0) $(TD $(PLUSMN)0.0) $(TD no)) $(TR $(TD \\((PLUSMN)\\)(INFIN)) $(TD \\((PLUSMN)\\)(INFIN)) $(TD no)) ) sinh(x) double sinh( double x ) ditto sinh(x) float sinh( float x ) ditto"
  },
  "phobos/std/math/trigonometry/Functions/tan.html": {
    "href": "phobos/std/math/trigonometry/Functions/tan.html",
    "title": "Overloads for - tan | Marmos Demo",
    "keywords": "Overloads for - tan Module std.math.trigonometry tan(x) real tan( real x ) Returns tangent of x. x is in radians. $(TABLE_SV $(TR $(TH x) $(TH tan(x)) $(TH invalid?)) $(TR $(TD $(NAN)) $(TD $(NAN)) $(TD yes)) $(TR $(TD $(PLUSMN)0.0) $(TD $(PLUSMN)0.0) $(TD no)) $(TR $(TD $(PLUSMNINF)) $(TD $(NAN)) $(TD yes)) ) tan(x) double tan( double x ) ditto tan(x) float tan( float x ) ditto"
  },
  "phobos/std/math/trigonometry/Functions/tanAsm.html": {
    "href": "phobos/std/math/trigonometry/Functions/tanAsm.html",
    "title": "Overloads for - tanAsm | Marmos Demo",
    "keywords": "Overloads for - tanAsm Module std.math.trigonometry tanAsm(x) real tanAsm( real x )"
  },
  "phobos/std/math/trigonometry/Functions/tanImpl.html": {
    "href": "phobos/std/math/trigonometry/Functions/tanImpl.html",
    "title": "Overloads for - tanImpl | Marmos Demo",
    "keywords": "Overloads for - tanImpl Module std.math.trigonometry tanImpl(x) T tanImpl( T x )"
  },
  "phobos/std/math/trigonometry/Functions/tanh.html": {
    "href": "phobos/std/math/trigonometry/Functions/tanh.html",
    "title": "Overloads for - tanh | Marmos Demo",
    "keywords": "Overloads for - tanh Module std.math.trigonometry tanh(x) real tanh( real x ) Calculates the hyperbolic tangent of x. $(TABLE_SV $(TR $(TH x) $(TH tanh(x)) $(TH invalid?)) $(TR $(TD $(PLUSMN)0.0) $(TD $(PLUSMN)0.0) $(TD no) ) $(TR $(TD \\((PLUSMN)\\)(INFIN)) $(TD $(PLUSMN)1.0) $(TD no)) ) tanh(x) double tanh( double x ) ditto tanh(x) float tanh( float x ) ditto"
  },
  "phobos/std/math/trigonometry/Overview.html": {
    "href": "phobos/std/math/trigonometry/Overview.html",
    "title": "Module - std.math.trigonometry | Marmos Demo",
    "keywords": "Module - std.math.trigonometry About This is a submodule of $(MREF std, math). It contains several trigonometric functions. Copyright: Copyright The D Language Foundation 2000 - 2011. D implementations of tan, atan, and atan2 functions are based on the CEPHES math library, which is Copyright (C) 2001 Stephen L. Moshier \\((LT)steve@moshier.net\\)(GT) and are incorporated herein by permission of the author. The author reserves the right to distribute this material elsewhere under different copying permissions. These modifications are distributed here under the following terms: License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP digitalmars.com, Walter Bright), Don Clugston, Conversion of CEPHES math library to D by Iain Buclaw and David Nadlinger Source: $(PHOBOSSRC std/math/trigonometry.d) Macros TABLE_SV Special Values $0 SVH $(TR $(TH $1) $(TH $2)) SV $(TR $(TD $1) $(TD $2)) TH3 $(TR $(TH $1) $(TH $2) $(TH $3)) TD3 $(TR $(TD $1) $(TD $2) $(TD $3)) TABLE_DOMRG $(SVH Domain X, Range Y) $(SV $1, $2) Special Values $0 SVH = $(TR $(TH $1) $(TH $2)) SV = $(TR $(TD $1) $(TD $2)) TH3 = $(TR $(TH $1) $(TH $2) $(TH $3)) TD3 = $(TR $(TD $1) $(TD $2) $(TD $3)) TABLE_DOMRG = $(SVH Domain X, Range Y) $(SV $1, $2) DOMAIN=$1 RANGE=$1 POWER = $1$2 NAN = $(RED NAN) PLUSMN = ± INFIN = ∞ PLUSMNINF = ±∞ Functions Name Description acos Calculates the arc cosine of x, returning a value ranging from 0 to $(PI). acosh Calculates the inverse hyperbolic cosine of x. asin Calculates the arc sine of x, returning a value ranging from -$(PI)/2 to $(PI)/2. asinh Calculates the inverse hyperbolic sine of x. atan Calculates the arc tangent of x, returning a value ranging from -$(PI)/2 to $(PI)/2. atan2 Calculates the arc tangent of y / x, returning a value ranging from -$(PI) to $(PI). atan2Asm atan2Impl atanh Calculates the inverse hyperbolic tangent of x, returning a value from ranging from -1 to 1. atanImpl cos Returns cosine of x. x is in radians. cosh Calculates the hyperbolic cosine of x. sin Returns $(HTTP en.wikipedia.org/wiki/Sine, sine) of x. x is in $(HTTP en.wikipedia.org/wiki/Radian, radians). sinh Calculates the hyperbolic sine of x. tan Returns tangent of x. x is in radians. tanAsm tanh Calculates the hyperbolic tangent of x. tanImpl"
  },
  "phobos/std/mathspecial/Functions/beta.html": {
    "href": "phobos/std/mathspecial/Functions/beta.html",
    "title": "Overloads for - beta | Marmos Demo",
    "keywords": "Overloads for - beta Module std.mathspecial beta(x, y) real beta( real x, real y ) Beta function The beta function is defined as beta(x, y) = ($(GAMMA)(x) $(GAMMA)(y)) / $(GAMMA)(x + y)"
  },
  "phobos/std/mathspecial/Functions/betaIncomplete.html": {
    "href": "phobos/std/mathspecial/Functions/betaIncomplete.html",
    "title": "Overloads for - betaIncomplete | Marmos Demo",
    "keywords": "Overloads for - betaIncomplete Module std.mathspecial betaIncomplete(a, b, x) real betaIncomplete( real a, real b, real x ) Incomplete beta integral Returns regularized incomplete beta integral of the arguments, evaluated from zero to x. The regularized incomplete beta function is defined as betaIncomplete(a, b, x) = $(GAMMA)(a + b) / ( $(GAMMA)(a) $(GAMMA)(b) ) $(INTEGRATE 0, x) \\((POWER t, a-1)\\)(POWER (1-t), b-1) dt and is the same as the cumulative distribution function of the Beta distribution. The domain of definition is 0 <= x <= 1. In this implementation a and b are restricted to positive values. The integral from x to 1 may be obtained by the symmetry relation betaIncompleteCompl(a, b, x ) = betaIncomplete( b, a, 1-x ) The integral is evaluated by a continued fraction expansion or, when b x is small, by a power series."
  },
  "phobos/std/mathspecial/Functions/betaIncompleteInverse.html": {
    "href": "phobos/std/mathspecial/Functions/betaIncompleteInverse.html",
    "title": "Overloads for - betaIncompleteInverse | Marmos Demo",
    "keywords": "Overloads for - betaIncompleteInverse Module std.mathspecial betaIncompleteInverse(a, b, y) real betaIncompleteInverse( real a, real b, real y ) Inverse of incomplete beta integral Given y, the function finds x such that betaIncomplete(a, b, x) == y Newton iterations or interval halving is used."
  },
  "phobos/std/mathspecial/Functions/digamma.html": {
    "href": "phobos/std/mathspecial/Functions/digamma.html",
    "title": "Overloads for - digamma | Marmos Demo",
    "keywords": "Overloads for - digamma Module std.mathspecial digamma(x) real digamma( real x ) Digamma function The digamma function is the logarithmic derivative of the gamma function. digamma(x) = d/dx logGamma(x) See_Also: $(LREF logmdigamma), $(LREF logmdigammaInverse)."
  },
  "phobos/std/mathspecial/Functions/erf.html": {
    "href": "phobos/std/mathspecial/Functions/erf.html",
    "title": "Overloads for - erf | Marmos Demo",
    "keywords": "Overloads for - erf Module std.mathspecial erf(x) real erf( real x ) Error function The integral is erf(x) = 2/ \\((SQRT)(\\)(PI)) $(INTEGRATE 0, x) exp( - $(POWER t, 2)) dt The magnitude of x is limited to about 106.56 for IEEE 80-bit arithmetic; 1 or -1 is returned outside this range."
  },
  "phobos/std/mathspecial/Functions/erfc.html": {
    "href": "phobos/std/mathspecial/Functions/erfc.html",
    "title": "Overloads for - erfc | Marmos Demo",
    "keywords": "Overloads for - erfc Module std.mathspecial erfc(x) real erfc( real x ) Complementary error function erfc(x) = 1 - erf(x) = 2/ \\((SQRT)(\\)(PI)) $(INTEGRATE x, $(INFIN)) exp( - $(POWER t, 2)) dt This function has high relative accuracy for values of x far from zero. (For values near zero, use erf(x))."
  },
  "phobos/std/mathspecial/Functions/gamma.html": {
    "href": "phobos/std/mathspecial/Functions/gamma.html",
    "title": "Overloads for - gamma | Marmos Demo",
    "keywords": "Overloads for - gamma Module std.mathspecial gamma(x) real gamma( real x ) The Gamma function, $(GAMMA)(x) $(GAMMA)(x) is a generalisation of the factorial function to real and complex numbers. Like x!, $(GAMMA)(x+1) = x $(GAMMA)(x). Mathematically, if z.re > 0 then $(GAMMA)(z) = $(INTEGRATE 0, $(INFIN)) \\((POWER t, z-1)\\)(POWER e, -t) dt $(TABLE_SV $(SVH x, $(GAMMA)(x) ) $(SV $(NAN), $(NAN) ) $(SV $(PLUSMN)0.0, $(PLUSMNINF)) $(SV integer > 0, (x-1)! ) $(SV integer < 0, $(NAN) ) \\((SV +\\)(INFIN), +$(INFIN) ) \\((SV -\\)(INFIN), $(NAN) ) )"
  },
  "phobos/std/mathspecial/Functions/gammaIncomplete.html": {
    "href": "phobos/std/mathspecial/Functions/gammaIncomplete.html",
    "title": "Overloads for - gammaIncomplete | Marmos Demo",
    "keywords": "Overloads for - gammaIncomplete Module std.mathspecial gammaIncomplete(a, x) real gammaIncomplete( real a, real x ) Incomplete gamma integral and its complement These functions are defined by gammaIncomplete = ( $(INTEGRATE 0, x) $(POWER e, -t) $(POWER t, a-1) dt )/ $(GAMMA)(a) gammaIncompleteCompl(a,x) = 1 - gammaIncomplete(a,x) = ($(INTEGRATE x, $(INFIN)) $(POWER e, -t) $(POWER t, a-1) dt )/ $(GAMMA)(a) In this implementation both arguments must be positive. The integral is evaluated by either a power series or continued fraction expansion, depending on the relative values of a and x."
  },
  "phobos/std/mathspecial/Functions/gammaIncompleteCompl.html": {
    "href": "phobos/std/mathspecial/Functions/gammaIncompleteCompl.html",
    "title": "Overloads for - gammaIncompleteCompl | Marmos Demo",
    "keywords": "Overloads for - gammaIncompleteCompl Module std.mathspecial gammaIncompleteCompl(a, x) real gammaIncompleteCompl( real a, real x ) ditto"
  },
  "phobos/std/mathspecial/Functions/gammaIncompleteComplInverse.html": {
    "href": "phobos/std/mathspecial/Functions/gammaIncompleteComplInverse.html",
    "title": "Overloads for - gammaIncompleteComplInverse | Marmos Demo",
    "keywords": "Overloads for - gammaIncompleteComplInverse Module std.mathspecial gammaIncompleteComplInverse(a, p) real gammaIncompleteComplInverse( real a, real p ) Inverse of complemented incomplete gamma integral Given a and p, the function finds x such that gammaIncompleteCompl( a, x ) = p."
  },
  "phobos/std/mathspecial/Functions/logGamma.html": {
    "href": "phobos/std/mathspecial/Functions/logGamma.html",
    "title": "Overloads for - logGamma | Marmos Demo",
    "keywords": "Overloads for - logGamma Module std.mathspecial logGamma(x) real logGamma( real x ) Natural logarithm of the gamma function, $(GAMMA)(x) Returns the base e (2.718...) logarithm of the absolute value of the gamma function of the argument. For reals, logGamma is equivalent to log(fabs(gamma(x))). $(TABLE_SV $(SVH x, logGamma(x) ) $(SV $(NAN), $(NAN) ) \\((SV integer <= 0, +\\)(INFIN) ) $(SV \\((PLUSMNINF), +\\)(INFIN) ) )"
  },
  "phobos/std/mathspecial/Functions/logmdigamma.html": {
    "href": "phobos/std/mathspecial/Functions/logmdigamma.html",
    "title": "Overloads for - logmdigamma | Marmos Demo",
    "keywords": "Overloads for - logmdigamma Module std.mathspecial logmdigamma(x) real logmdigamma( real x ) Log Minus Digamma function logmdigamma(x) = log(x) - digamma(x) See_Also: $(LREF digamma), $(LREF logmdigammaInverse)."
  },
  "phobos/std/mathspecial/Functions/logmdigammaInverse.html": {
    "href": "phobos/std/mathspecial/Functions/logmdigammaInverse.html",
    "title": "Overloads for - logmdigammaInverse | Marmos Demo",
    "keywords": "Overloads for - logmdigammaInverse Module std.mathspecial logmdigammaInverse(x) real logmdigammaInverse( real x ) Inverse of the Log Minus Digamma function Given y, the function finds x such log(x) - digamma(x) = y. See_Also: $(LREF logmdigamma), $(LREF digamma)."
  },
  "phobos/std/mathspecial/Functions/normalDistribution.html": {
    "href": "phobos/std/mathspecial/Functions/normalDistribution.html",
    "title": "Overloads for - normalDistribution | Marmos Demo",
    "keywords": "Overloads for - normalDistribution Module std.mathspecial normalDistribution(x) real normalDistribution( real x ) Standard normal distribution function. The normal (or Gaussian, or bell-shaped) distribution is defined as: normalDist(x) = 1/\\((SQRT)(2\\)(PI)) \\((INTEGRATE -\\)(INFIN), x) exp( - $(POWER t, 2)/2) dt = 0.5 + 0.5 erf(x/sqrt(2)) = 0.5 erfc(- x/sqrt(2)) To maintain accuracy at values of x near 1.0, use normalDistribution(x) = 1.0 - normalDistribution(-x). References $(LINK http://www.netlib.org/cephes/ldoubdoc.html), G. Marsaglia, \"Evaluating the Normal Distribution\", Journal of Statistical Software 11, (July 2004)."
  },
  "phobos/std/mathspecial/Functions/normalDistributionInverse.html": {
    "href": "phobos/std/mathspecial/Functions/normalDistributionInverse.html",
    "title": "Overloads for - normalDistributionInverse | Marmos Demo",
    "keywords": "Overloads for - normalDistributionInverse Module std.mathspecial normalDistributionInverse(p) real normalDistributionInverse( real p ) Inverse of Standard normal distribution function Returns the argument, x, for which the area under the Normal probability density function (integrated from minus infinity to x) is equal to p. Note: This function is only implemented to 80 bit precision."
  },
  "phobos/std/mathspecial/Functions/sgnGamma.html": {
    "href": "phobos/std/mathspecial/Functions/sgnGamma.html",
    "title": "Overloads for - sgnGamma | Marmos Demo",
    "keywords": "Overloads for - sgnGamma Module std.mathspecial sgnGamma(x) real sgnGamma( real x ) The sign of $(GAMMA)(x). Returns -1 if $(GAMMA)(x) < 0, +1 if $(GAMMA)(x) > 0, $(NAN) if sign is indeterminate. Note that this function can be used in conjunction with logGamma(x) to evaluate gamma for very large values of x."
  },
  "phobos/std/mathspecial/Overview.html": {
    "href": "phobos/std/mathspecial/Overview.html",
    "title": "Module - std.mathspecial | Marmos Demo",
    "keywords": "Module - std.mathspecial About Mathematical Special Functions The technical term 'Special Functions' includes several families of transcendental functions, which have important applications in particular branches of mathematics and physics. The gamma and related functions, and the error function are crucial for mathematical statistics. The Bessel and related functions arise in problems involving wave propagation (especially in optics). Other major categories of special functions include the elliptic integrals (related to the arc length of an ellipse), and the hypergeometric functions. Status Many more functions will be added to this module. The naming convention for the distribution functions (gammaIncomplete, etc) is not yet finalized and will probably change. Macros TABLE_SV Special Values $0 SVH $(TR $(TH $1) $(TH $2)) SV $(TR $(TD $1) $(TD $2)) NAN = $(RED NAN) SUP = $0 GAMMA = Γ THETA = θ INTEGRAL = ∫ INTEGRATE = \\((BIG &#8747;<sub>\\)(SMALL $1)$2) POWER = $1$2 SUB = $1$2 BIGSUM = $(BIG Σ \\(2</sup><sub>\\)(SMALL $1)) CHOOSE = \\((BIG &#40;) <sup>\\)(SMALL \\(1)</sup><sub>\\)(SMALL $2) $(BIG )) PLUSMN = ± INFIN = ∞ PLUSMNINF = ±∞ PI = π LT = < GT = > SQRT = √ HALF = ½ Copyright: Based on the CEPHES math library, which is Copyright (C) 1994 Stephen L. Moshier (moshier@world.std.com). License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: Stephen L. Moshier (original C code). Conversion to D by Don Clugston Source: $(PHOBOSSRC std/mathspecial.d) Functions Name Description beta Beta function betaIncomplete Incomplete beta integral betaIncompleteInverse Inverse of incomplete beta integral digamma Digamma function erf Error function erfc Complementary error function gamma The Gamma function, $(GAMMA)(x) gammaIncomplete Incomplete gamma integral and its complement gammaIncompleteCompl ditto gammaIncompleteComplInverse Inverse of complemented incomplete gamma integral logGamma Natural logarithm of the gamma function, $(GAMMA)(x) logmdigamma Log Minus Digamma function logmdigammaInverse Inverse of the Log Minus Digamma function normalDistribution Standard normal distribution function. normalDistributionInverse Inverse of Standard normal distribution function sgnGamma The sign of $(GAMMA)(x)."
  },
  "phobos/std/meta/Overview.html": {
    "href": "phobos/std/meta/Overview.html",
    "title": "Module - std.meta | Marmos Demo",
    "keywords": "Module - std.meta About Templates to manipulate $(DDSUBLINK spec/template, variadic-templates, template parameter sequences) (also known as $(I alias sequences)). Some operations on alias sequences are built into the language, such as S[i] , which accesses the element at index i in the sequence. S[low .. high] returns a new alias sequence that is a slice of the old one. For more information, see $(DDLINK ctarguments, Compile-time Sequences, Compile-time Sequences). $(B Note:) Several templates in this module use or operate on eponymous templates that take a single argument and evaluate to a boolean constant. Such templates are referred to as $(I template predicates). $(SCRIPT inhibitQuickIndex = 1;) $(DIVC quickindex, $(BOOKTABLE , $(TR $(TH Category) $(TH Templates)) $(TR $(TD Building blocks) $(TD $(LREF Alias) $(LREF AliasSeq) $(LREF aliasSeqOf) )) $(TR $(TD Alias sequence filtering) $(TD $(LREF Erase) $(LREF EraseAll) $(LREF Filter) $(LREF NoDuplicates) $(LREF Stride) )) $(TR $(TD Alias sequence type hierarchy) $(TD $(LREF DerivedToFront) $(LREF MostDerived) )) $(TR $(TD Alias sequence transformation) $(TD $(LREF Repeat) $(LREF Replace) $(LREF ReplaceAll) $(LREF Reverse) $(LREF staticMap) $(LREF staticSort) )) $(TR $(TD Alias sequence searching) $(TD $(LREF allSatisfy) $(LREF anySatisfy) $(LREF staticIndexOf) )) $(TR $(TD Template predicates) $(TD $(LREF templateAnd) $(LREF templateNot) $(LREF templateOr) $(LREF staticIsSorted) )) $(TR $(TD Template instantiation) $(TD $(LREF ApplyLeft) $(LREF ApplyRight) $(LREF Instantiate) )) )) References Based on ideas in Table 3.1 from $(LINK2 http://amazon.com/exec/obidos/ASIN/0201704315/ref=ase_classicempire/102-2957199-2585768, Modern C++ Design), Andrei Alexandrescu (Addison-Wesley Professional, 2001) Copyright: Copyright The D Language Foundation 2005 - 2015. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP digitalmars.com, Walter Bright), $(HTTP klickverbot.at, David Nadlinger) Source: $(PHOBOSSRC std/meta.d) Aliases Name Description Alias Allows alias ing of any single symbol, type or compile-time expression. Alias Ditto AliasSeq Creates a sequence of zero or more aliases. This is most commonly used as template parameters or arguments. allSatisfy Tests whether all given items satisfy a template predicate, i.e. evaluates to \\((D F!(T[0]) && F!(T[1]) && ... && F!(T[\\) - 1])). anySatisfy Tests whether any given items satisfy a template predicate, i.e. evaluates to \\((D F!(T[0]) `|``|` F!(T[1]) `|``|` ... `|``|` F!(T[\\) - 1])). ApplyLeft $(LINK2 http://en.wikipedia.org/wiki/Partial_application, Partially applies) $(D_PARAM Template) by binding its first (left) or last (right) arguments to $(D_PARAM args). ApplyRight Ditto DerivedToFront Returns an AliasSeq with the elements of TList sorted so that the most derived types come first. Instantiate Instantiates the given template with the given parameters. OldAlias Replace Returns an AliasSeq created from TList with the first occurrence of T, if found, replaced with U. Replace Ditto Replace Ditto Replace Ditto Structs Name Description Impl Converts any foreach-iterable entity (e.g. an input range) to an alias sequence. Variables Name Description aliasSeqOf Converts any foreach-iterable entity (e.g. an input range) to an alias sequence. cmp Returns an AliasSeq with the elements of TList sorted so that the most derived types come first. isSame staticIndexOf Returns the index of the first occurrence of args[0] in the sequence args[1 .. $] . args may be types or compile-time values. If not found, -1 is returned. staticIsSorted Checks if an $(LREF AliasSeq) is sorted according to cmp . templateNot Negates the passed template predicate. testAlways testNever"
  },
  "phobos/std/meta/Structs/Impl.html": {
    "href": "phobos/std/meta/Structs/Impl.html",
    "title": "Struct - Impl | Marmos Demo",
    "keywords": "Struct - Impl Module std.meta public struct Impl { } About Converts any foreach-iterable entity (e.g. an input range) to an alias sequence. Params iter the entity to convert into an AliasSeq . It must be able to be able to be iterated over using a $(LINK2 https://dlang.org/spec/statement.html#foreach-statement, foreach-statement). Returns An AliasSeq containing the values produced by iterating over iter ."
  },
  "phobos/std/mmfile/Classes/MmFile.html": {
    "href": "phobos/std/mmfile/Classes/MmFile.html",
    "title": "Class - MmFile | Marmos Demo",
    "keywords": "Class - MmFile Module std.mmfile public class MmFile { // Forwards `length` . alias opDollar = <todo: marmos support pending>; // void ensureMapped( ulong i ) ; // void ensureMapped( ulong i, ulong j ) ; // void flush( ) ; // Gives size in bytes of the memory mapped file. ulong length( ) ; // void map( ulong start, size_t len ) ; // int mapped( ulong i ) ; // Read-only property returning the file mode. Mode mode( ) ; // Returns byte at index i in file. ubyte opIndex( ulong i ) ; // Sets and returns byte at index i in file to value. ubyte opIndexAssign( ubyte value, ulong i ) ; // Returns entire file contents as an array. <bug: unknown> opSlice( ) ; // Returns slice of file contents as an array. <bug: unknown> opSlice( ulong i1, ulong i2 ) ; // void unmap( ) ; // <bug: unknown> address; // <bug: unknown> data; // uint dwDesiredAccess; // File file; // string filename; // HANDLE hFile; // HANDLE hFileMap; // Mode mMode; // ulong size; // ulong start; // size_t window; } About MmFile objects control the memory mapped file resource. Aliases Name Description opDollar Forwards length . Functions Name Description ensureMapped flush length Gives size in bytes of the memory mapped file. map mapped mode Read-only property returning the file mode. opIndex Returns byte at index i in file. opIndexAssign Sets and returns byte at index i in file to value. opSlice Returns entire file contents as an array. unmap Variables Name Description address data dwDesiredAccess file filename hFile hFileMap mMode size start window"
  },
  "phobos/std/mmfile/MmFile/Functions/ensureMapped.html": {
    "href": "phobos/std/mmfile/MmFile/Functions/ensureMapped.html",
    "title": "Overloads for - ensureMapped | Marmos Demo",
    "keywords": "Overloads for - ensureMapped Module std.mmfile Parent MmFile ensureMapped(i) void ensureMapped( ulong i ) ensureMapped(i, j) void ensureMapped( ulong i, ulong j )"
  },
  "phobos/std/mmfile/MmFile/Functions/flush.html": {
    "href": "phobos/std/mmfile/MmFile/Functions/flush.html",
    "title": "Overloads for - flush | Marmos Demo",
    "keywords": "Overloads for - flush Module std.mmfile Parent MmFile flush() void flush( )"
  },
  "phobos/std/mmfile/MmFile/Functions/length.html": {
    "href": "phobos/std/mmfile/MmFile/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.mmfile Parent MmFile length() ulong length( ) Gives size in bytes of the memory mapped file."
  },
  "phobos/std/mmfile/MmFile/Functions/map.html": {
    "href": "phobos/std/mmfile/MmFile/Functions/map.html",
    "title": "Overloads for - map | Marmos Demo",
    "keywords": "Overloads for - map Module std.mmfile Parent MmFile map(start, len) void map( ulong start, size_t len )"
  },
  "phobos/std/mmfile/MmFile/Functions/mapped.html": {
    "href": "phobos/std/mmfile/MmFile/Functions/mapped.html",
    "title": "Overloads for - mapped | Marmos Demo",
    "keywords": "Overloads for - mapped Module std.mmfile Parent MmFile mapped(i) int mapped( ulong i )"
  },
  "phobos/std/mmfile/MmFile/Functions/mode.html": {
    "href": "phobos/std/mmfile/MmFile/Functions/mode.html",
    "title": "Overloads for - mode | Marmos Demo",
    "keywords": "Overloads for - mode Module std.mmfile Parent MmFile mode() Mode mode( ) Read-only property returning the file mode."
  },
  "phobos/std/mmfile/MmFile/Functions/opIndex.html": {
    "href": "phobos/std/mmfile/MmFile/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.mmfile Parent MmFile opIndex(i) ubyte opIndex( ulong i ) Returns byte at index i in file."
  },
  "phobos/std/mmfile/MmFile/Functions/opIndexAssign.html": {
    "href": "phobos/std/mmfile/MmFile/Functions/opIndexAssign.html",
    "title": "Overloads for - opIndexAssign | Marmos Demo",
    "keywords": "Overloads for - opIndexAssign Module std.mmfile Parent MmFile opIndexAssign(value, i) ubyte opIndexAssign( ubyte value, ulong i ) Sets and returns byte at index i in file to value."
  },
  "phobos/std/mmfile/MmFile/Functions/opSlice.html": {
    "href": "phobos/std/mmfile/MmFile/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.mmfile Parent MmFile opSlice() <bug: unknown> opSlice( ) Returns entire file contents as an array. opSlice(i1, i2) <bug: unknown> opSlice( ulong i1, ulong i2 ) Returns slice of file contents as an array."
  },
  "phobos/std/mmfile/MmFile/Functions/unmap.html": {
    "href": "phobos/std/mmfile/MmFile/Functions/unmap.html",
    "title": "Overloads for - unmap | Marmos Demo",
    "keywords": "Overloads for - unmap Module std.mmfile Parent MmFile unmap() void unmap( )"
  },
  "phobos/std/mmfile/Overview.html": {
    "href": "phobos/std/mmfile/Overview.html",
    "title": "Module - std.mmfile | Marmos Demo",
    "keywords": "Module - std.mmfile About Read and write memory mapped files. Memory mapped files are a mechanism in operating systems that allows file access through virtual memory. After opening a file with MmFile , the contents can be read from or written to with standard slice / pointer operations. Changes to the memory are automatically reflected in the underlying file. Memory mapping can increase I/O performance of large files, compared to buffered read / write operations from std.file and std.stdio . However, I/O errors are not handled as safely: when for example the disk that the file is on gets removed, reading from it may result in a segfault. Copyright: Copyright The D Language Foundation 2004 - 2009. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP digitalmars.com, Walter Bright), Matthew Wilson References: $(LINK https://en.wikipedia.org/wiki/Memory-mapped_file) Source: $(PHOBOSSRC std/mmfile.d) $(SCRIPT inhibitQuickIndex = 1;) Classes Name Description MmFile MmFile objects control the memory mapped file resource."
  },
  "phobos/std/net/curl/Overview.html": {
    "href": "phobos/std/net/curl/Overview.html",
    "title": "Module - std.net.curl | Marmos Demo",
    "keywords": "Module - std.net.curl About Networking client functionality as provided by $(HTTP curl.haxx.se/libcurl, libcurl). The libcurl library must be installed on the system in order to use this module. $(SCRIPT inhibitQuickIndex = 1;) $(DIVC quickindex, $(BOOKTABLE , $(TR $(TH Category) $(TH Functions) ) $(TR $(TDNW High level) $(TD $(MYREF download) $(MYREF upload) $(MYREF get) $(MYREF post) $(MYREF put) $(MYREF del) $(MYREF options) $(MYREF trace) $(MYREF connect) $(MYREF byLine) $(MYREF byChunk) $(MYREF byLineAsync) $(MYREF byChunkAsync) ) ) $(TR $(TDNW Low level) $(TD $(MYREF HTTP) $(MYREF FTP) $(MYREF SMTP) ) ) ) ) Note You may need to link with the $(B curl) library, e.g. by adding $(D \"libs\": [\"curl\"]) to your $(B dub.json) file if you are using $(LINK2 http://code.dlang.org, DUB). Windows x86 note A DMD compatible libcurl static library can be downloaded from the dlang.org $(LINK2 https://downloads.dlang.org/other/index.html, download archive page). This module is not available for iOS, tvOS or watchOS. Compared to using libcurl directly, this module allows simpler client code for common uses, requires no unsafe operations, and integrates better with the rest of the language. Furthermore it provides $(MREF_ALTTEXT range, std,range) access to protocols supported by libcurl both synchronously and asynchronously. A high level and a low level API are available. The high level API is built entirely on top of the low level one. The high level API is for commonly used functionality such as HTTP/FTP get. The $(LREF byLineAsync) and $(LREF byChunkAsync) functions asynchronously perform the request given, outputting the fetched content into a $(MREF_ALTTEXT range, std,range). The low level API allows for streaming, setting request headers and cookies, and other advanced features. $(BOOKTABLE Cheat Sheet, $(TR $(TH Function Name) $(TH Description) ) $(LEADINGROW High level) $(TR $(TDNW $(LREF download)) $(TD $(D download(\"ftp.digitalmars.com/sieve.ds\", \"/tmp/downloaded-ftp-file\")) downloads file from URL to file system.) ) $(TR $(TDNW $(LREF upload)) $(TD $(D upload(\"/tmp/downloaded-ftp-file\", \"ftp.digitalmars.com/sieve.ds\");) uploads file from file system to URL.) ) $(TR $(TDNW $(LREF get)) $(TD $(D get(\"dlang.org\")) returns a char[] containing the dlang.org web page.) ) $(TR $(TDNW $(LREF put)) $(TD $(D put(\"dlang.org\", \"Hi\")) returns a char[] containing the dlang.org web page. after a HTTP PUT of \"hi\") ) $(TR $(TDNW $(LREF post)) $(TD $(D post(\"dlang.org\", \"Hi\")) returns a char[] containing the dlang.org web page. after a HTTP POST of \"hi\") ) $(TR $(TDNW $(LREF byLine)) $(TD $(D byLine(\"dlang.org\")) returns a range of char[] containing the dlang.org web page.) ) $(TR $(TDNW $(LREF byChunk)) $(TD $(D byChunk(\"dlang.org\", 10)) returns a range of ubyte[10] containing the dlang.org web page.) ) $(TR $(TDNW $(LREF byLineAsync)) $(TD $(D byLineAsync(\"dlang.org\")) asynchronously returns a range of char[] containing the dlang.org web page.) ) $(TR $(TDNW $(LREF byChunkAsync)) $(TD $(D byChunkAsync(\"dlang.org\", 10)) asynchronously returns a range of ubyte[10] containing the dlang.org web page.) ) $(LEADINGROW Low level ) $(TR $(TDNW $(LREF HTTP)) $(TD Struct for advanced HTTP usage)) $(TR $(TDNW $(LREF FTP)) $(TD Struct for advanced FTP usage)) $(TR $(TDNW $(LREF SMTP)) $(TD Struct for advanced SMTP usage)) ) Example --- import std.net.curl, std.stdio; // Return a char[] containing the content specified by a URL auto content = get(\"dlang.org\"); // Post data and return a char[] containing the content specified by a URL auto content = post(\"mydomain.com/here.cgi\", [\"name1\" : \"value1\", \"name2\" : \"value2\"]); // Get content of file from ftp server auto content = get(\"ftp.digitalmars.com/sieve.ds\"); // Post and print out content line by line. The request is done in another thread. foreach (line; byLineAsync(\"dlang.org\", \"Post data\")) writeln(line); // Get using a line range and proxy settings auto client = HTTP(); client.proxy = \"1.2.3.4\"; foreach (line; byLine(\"dlang.org\", client)) writeln(line); --- For more control than the high level functions provide, use the low level API Example --- import std.net.curl, std.stdio; // GET with custom data receivers auto http = HTTP(\"dlang.org\"); http.onReceiveHeader = (in char[] key, in char[] value) { writeln(key, \": \", value); }; http.onReceive = (ubyte[] data) { /+ drop +/ return data.length; }; http.perform(); --- First, an instance of the reference-counted HTTP struct is created. Then the custom delegates are set. These will be called whenever the HTTP instance receives a header and a data buffer, respectively. In this simple example, the headers are written to stdout and the data is ignored. If the request is stopped before it has finished then return something less than data.length from the onReceive callback. See \\((LREF onReceiveHeader)/\\)(LREF onReceive) for more information. Finally, the HTTP request is performed by calling perform(), which is synchronous. Source: $(PHOBOSSRC std/net/curl.d) Copyright: Copyright Jonas Drewsen 2011-2012 License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: Jonas Drewsen. Some of the SMTP code contributed by Jimmy Cao. Credits: The functionality is based on $(HTTP curl.haxx.se/libcurl, libcurl). libcurl is licensed under an MIT/X derivative license."
  },
  "phobos/std/net/isemail/EmailStatus/Functions/domainPart.html": {
    "href": "phobos/std/net/isemail/EmailStatus/Functions/domainPart.html",
    "title": "Overloads for - domainPart | Marmos Demo",
    "keywords": "Overloads for - domainPart Module std.net.isemail Parent EmailStatus domainPart() string domainPart( ) Returns: The domain part of the email address, that is, the part after the @ sign."
  },
  "phobos/std/net/isemail/EmailStatus/Functions/localPart.html": {
    "href": "phobos/std/net/isemail/EmailStatus/Functions/localPart.html",
    "title": "Overloads for - localPart | Marmos Demo",
    "keywords": "Overloads for - localPart Module std.net.isemail Parent EmailStatus localPart() string localPart( ) Returns: The local part of the email address, that is, the part before the @ sign."
  },
  "phobos/std/net/isemail/EmailStatus/Functions/status.html": {
    "href": "phobos/std/net/isemail/EmailStatus/Functions/status.html",
    "title": "Overloads for - status | Marmos Demo",
    "keywords": "Overloads for - status Module std.net.isemail Parent EmailStatus status() string status( ) Returns: A describing string of the status code"
  },
  "phobos/std/net/isemail/EmailStatus/Functions/statusCode.html": {
    "href": "phobos/std/net/isemail/EmailStatus/Functions/statusCode.html",
    "title": "Overloads for - statusCode | Marmos Demo",
    "keywords": "Overloads for - statusCode Module std.net.isemail Parent EmailStatus statusCode() EmailStatusCode statusCode( ) Returns: The email status code"
  },
  "phobos/std/net/isemail/EmailStatus/Functions/toString.html": {
    "href": "phobos/std/net/isemail/EmailStatus/Functions/toString.html",
    "title": "Overloads for - toString | Marmos Demo",
    "keywords": "Overloads for - toString Module std.net.isemail Parent EmailStatus toString() string toString( ) Returns: A textual representation of the email status"
  },
  "phobos/std/net/isemail/EmailStatus/Functions/valid.html": {
    "href": "phobos/std/net/isemail/EmailStatus/Functions/valid.html",
    "title": "Overloads for - valid | Marmos Demo",
    "keywords": "Overloads for - valid Module std.net.isemail Parent EmailStatus valid() bool valid( ) Returns: If the email address is valid or not."
  },
  "phobos/std/net/isemail/Functions/compareFirstN.html": {
    "href": "phobos/std/net/isemail/Functions/compareFirstN.html",
    "title": "Overloads for - compareFirstN | Marmos Demo",
    "keywords": "Overloads for - compareFirstN Module std.net.isemail compareFirstN(s1, s2, length) int compareFirstN( S1 s1, S2 s2, size_t length )"
  },
  "phobos/std/net/isemail/Functions/get.html": {
    "href": "phobos/std/net/isemail/Functions/get.html",
    "title": "Overloads for - get | Marmos Demo",
    "keywords": "Overloads for - get Module std.net.isemail get(str, index, c) <bug: unknown> get( <bug: unknown> str, size_t index, dchar c )"
  },
  "phobos/std/net/isemail/Functions/isEmail.html": {
    "href": "phobos/std/net/isemail/Functions/isEmail.html",
    "title": "Overloads for - isEmail | Marmos Demo",
    "keywords": "Overloads for - isEmail Module std.net.isemail isEmail(email, checkDNS, errorLevel) EmailStatus isEmail( <bug: unknown> email, CheckDns checkDNS, EmailStatusCode errorLevel ) Check that an email address conforms to RFCs 5321, 5322 and others. Distinguishes between a Mailbox as defined by RFC 5321 and an addr-spec as defined by RFC 5322. Depending on the context, either can be regarded as a valid email address. Note: The DNS check is currently not implemented. Params email <bug: unknown> The email address to check checkDNS CheckDns If Yes.checkDns then a DNS check for MX records will be made errorLevel EmailStatusCode Determines the boundary between valid and invalid addresses. Status codes above this number will be returned as-is, status codes below will be returned as EmailStatusCode.valid. Thus the calling program can simply look for EmailStatusCode.valid if it is only interested in whether an address is valid or not. The $(D_PARAM errorLevel) will determine how \"picky\" isEmail() is about the address. If omitted or passed as EmailStatusCode.none then isEmail() will not perform any finer grained error checking and an address is either considered valid or not. Email status code will either be EmailStatusCode.valid or EmailStatusCode.error. Returns An $(LREF EmailStatus), indicating the status of the email address."
  },
  "phobos/std/net/isemail/Functions/isUpToFourHexChars.html": {
    "href": "phobos/std/net/isemail/Functions/isUpToFourHexChars.html",
    "title": "Overloads for - isUpToFourHexChars | Marmos Demo",
    "keywords": "Overloads for - isUpToFourHexChars Module std.net.isemail isUpToFourHexChars(s) bool isUpToFourHexChars( <bug: unknown> s )"
  },
  "phobos/std/net/isemail/Functions/matchIPSuffix.html": {
    "href": "phobos/std/net/isemail/Functions/matchIPSuffix.html",
    "title": "Overloads for - matchIPSuffix | Marmos Demo",
    "keywords": "Overloads for - matchIPSuffix Module std.net.isemail matchIPSuffix(s) <bug: unknown> matchIPSuffix( <bug: unknown> s )"
  },
  "phobos/std/net/isemail/Functions/pop.html": {
    "href": "phobos/std/net/isemail/Functions/pop.html",
    "title": "Overloads for - pop | Marmos Demo",
    "keywords": "Overloads for - pop Module std.net.isemail pop(a) ElementType!(A) pop( A a )"
  },
  "phobos/std/net/isemail/Functions/statusCodeDescription.html": {
    "href": "phobos/std/net/isemail/Functions/statusCodeDescription.html",
    "title": "Overloads for - statusCodeDescription | Marmos Demo",
    "keywords": "Overloads for - statusCodeDescription Module std.net.isemail statusCodeDescription(statusCode) string statusCodeDescription( EmailStatusCode statusCode ) Params statusCode EmailStatusCode The $(LREF EmailStatusCode) to read Returns A detailed string describing the given status code"
  },
  "phobos/std/net/isemail/Overview.html": {
    "href": "phobos/std/net/isemail/Overview.html",
    "title": "Module - std.net.isemail | Marmos Demo",
    "keywords": "Module - std.net.isemail About Validates an email address according to RFCs 5321, 5322 and others. Authors: Dominic Sayers \\((LT)dominic@sayers.cc\\)(GT), Jacob Carlborg Copyright: Dominic Sayers, Jacob Carlborg 2008-. Test schema documentation: Copyright © 2011, Daniel Marschall License: $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost Software License 1.0) Dominic Sayers graciously granted permission to use the Boost license via email on Feb 22, 2011. Version: 3.0.13 - Version 3.0 of the original PHP implementation: $(LINK http://www.dominicsayers.com/isemail) Standards $(UL $(LI RFC 5321) $(LI RFC 5322) ) References $(UL $(LI $(LINK http://www.dominicsayers.com/isemail)) $(LI $(LINK http://tools.ietf.org/html/rfc5321)) $(LI $(LINK http://tools.ietf.org/html/rfc5322)) ) Source: $(PHOBOSSRC std/net/isemail.d) Aliases Name Description CheckDns Flag for indicating if the isEmail function should perform a DNS check or not. Structs Name Description EmailStatus Represents the status of an email address TokenImpl Functions Name Description compareFirstN get isEmail Check that an email address conforms to RFCs 5321, 5322 and others. isUpToFourHexChars matchIPSuffix pop statusCodeDescription"
  },
  "phobos/std/net/isemail/Structs/EmailStatus.html": {
    "href": "phobos/std/net/isemail/Structs/EmailStatus.html",
    "title": "Struct - EmailStatus | Marmos Demo",
    "keywords": "Struct - EmailStatus Module std.net.isemail public struct EmailStatus { // Returns: The domain part of the email address, that is, the part after the @ sign. string domainPart( ) ; // Returns: The local part of the email address, that is, the part before the @ sign. string localPart( ) ; // Returns: A describing string of the status code string status( ) ; // Returns: The email status code EmailStatusCode statusCode( ) ; // Returns: A textual representation of the email status string toString( ) ; // Returns: If the email address is valid or not. bool valid( ) ; // string domainPart_; // string localPart_; // EmailStatusCode statusCode_; // bool valid_; } About Represents the status of an email address Functions Name Description domainPart Returns: The domain part of the email address, that is, the part after the @ sign. localPart Returns: The local part of the email address, that is, the part before the @ sign. status Returns: A describing string of the status code statusCode Returns: The email status code toString Returns: A textual representation of the email status valid Returns: If the email address is valid or not. Variables Name Description domainPart_ localPart_ statusCode_ valid_"
  },
  "phobos/std/net/isemail/Structs/TokenImpl.html": {
    "href": "phobos/std/net/isemail/Structs/TokenImpl.html",
    "title": "Struct - TokenImpl | Marmos Demo",
    "keywords": "Struct - TokenImpl Module std.net.isemail public struct TokenImpl { }"
  },
  "phobos/std/numeric/Classes/Fft.html": {
    "href": "phobos/std/numeric/Classes/Fft.html",
    "title": "Class - Fft | Marmos Demo",
    "keywords": "Class - Fft Module std.numeric public class Fft { // size_t size( ) ; // immutable <bug: unknown> negSinLookup; } About A class for performing fast Fourier transforms of power of two sizes. This class encapsulates a large amount of state that is reusable when performing multiple FFTs of sizes smaller than or equal to that specified in the constructor. This results in substantial speedups when performing multiple FFTs with a known maximum size. However, a free function API is provided for convenience if you need to perform a one-off FFT. References: $(HTTP en.wikipedia.org/wiki/Cooley%E2%80%93Tukey_FFT_algorithm) Functions Name Description size Variables Name Description negSinLookup"
  },
  "phobos/std/numeric/CustomFloat/Functions/dig.html": {
    "href": "phobos/std/numeric/CustomFloat/Functions/dig.html",
    "title": "Overloads for - dig | Marmos Demo",
    "keywords": "Overloads for - dig Module std.numeric Parent CustomFloat dig() size_t dig( ) static Returns: number of decimal digits of precision"
  },
  "phobos/std/numeric/CustomFloat/Functions/epsilon.html": {
    "href": "phobos/std/numeric/CustomFloat/Functions/epsilon.html",
    "title": "Overloads for - epsilon | Marmos Demo",
    "keywords": "Overloads for - epsilon Module std.numeric Parent CustomFloat epsilon() CustomFloat epsilon( ) static Returns: smallest increment to the value 1"
  },
  "phobos/std/numeric/CustomFloat/Functions/im.html": {
    "href": "phobos/std/numeric/CustomFloat/Functions/im.html",
    "title": "Overloads for - im | Marmos Demo",
    "keywords": "Overloads for - im Module std.numeric Parent CustomFloat im() CustomFloat im( ) static Returns: imaginary part"
  },
  "phobos/std/numeric/CustomFloat/Functions/infinity.html": {
    "href": "phobos/std/numeric/CustomFloat/Functions/infinity.html",
    "title": "Overloads for - infinity | Marmos Demo",
    "keywords": "Overloads for - infinity Module std.numeric Parent CustomFloat infinity() CustomFloat infinity( ) static Returns: infinity value"
  },
  "phobos/std/numeric/CustomFloat/Functions/max.html": {
    "href": "phobos/std/numeric/CustomFloat/Functions/max.html",
    "title": "Overloads for - max | Marmos Demo",
    "keywords": "Overloads for - max Module std.numeric Parent CustomFloat max() CustomFloat max( ) static Returns: largest representable value that's not infinity"
  },
  "phobos/std/numeric/CustomFloat/Functions/max_10_exp.html": {
    "href": "phobos/std/numeric/CustomFloat/Functions/max_10_exp.html",
    "title": "Overloads for - max_10_exp | Marmos Demo",
    "keywords": "Overloads for - max_10_exp Module std.numeric Parent CustomFloat max_10_exp() int max_10_exp( ) static Returns: maximum int value such that 10max_10_exp is representable"
  },
  "phobos/std/numeric/CustomFloat/Functions/min_10_exp.html": {
    "href": "phobos/std/numeric/CustomFloat/Functions/min_10_exp.html",
    "title": "Overloads for - min_10_exp | Marmos Demo",
    "keywords": "Overloads for - min_10_exp Module std.numeric Parent CustomFloat min_10_exp() int min_10_exp( ) static Returns: minimum int value such that 10min_10_exp is representable"
  },
  "phobos/std/numeric/CustomFloat/Functions/min_normal.html": {
    "href": "phobos/std/numeric/CustomFloat/Functions/min_normal.html",
    "title": "Overloads for - min_normal | Marmos Demo",
    "keywords": "Overloads for - min_normal Module std.numeric Parent CustomFloat min_normal() CustomFloat min_normal( ) static Returns: smallest representable normalized value that's not 0"
  },
  "phobos/std/numeric/CustomFloat/Functions/nan.html": {
    "href": "phobos/std/numeric/CustomFloat/Functions/nan.html",
    "title": "Overloads for - nan | Marmos Demo",
    "keywords": "Overloads for - nan Module std.numeric Parent CustomFloat nan() CustomFloat nan( ) static Returns: NaN value"
  },
  "phobos/std/numeric/CustomFloat/Functions/re.html": {
    "href": "phobos/std/numeric/CustomFloat/Functions/re.html",
    "title": "Overloads for - re | Marmos Demo",
    "keywords": "Overloads for - re Module std.numeric Parent CustomFloat re() CustomFloat re( ) Returns: real part"
  },
  "phobos/std/numeric/Fft/Functions/size.html": {
    "href": "phobos/std/numeric/Fft/Functions/size.html",
    "title": "Overloads for - size | Marmos Demo",
    "keywords": "Overloads for - size Module std.numeric Parent Fft size() size_t size( )"
  },
  "phobos/std/numeric/Functions/cosineSimilarity.html": {
    "href": "phobos/std/numeric/Functions/cosineSimilarity.html",
    "title": "Overloads for - cosineSimilarity | Marmos Demo",
    "keywords": "Overloads for - cosineSimilarity Module std.numeric cosineSimilarity(a, b) CommonType!(ElementType!Range1ElementType!Range2) cosineSimilarity( Range1 a, Range2 b ) Computes the $(LINK2 https://en.wikipedia.org/wiki/Cosine_similarity, cosine similarity) of input ranges a and $(D b). The two ranges must have the same length. If both ranges define length, the check is done once; otherwise, it is done at each iteration. If either range has all-zero elements, return 0."
  },
  "phobos/std/numeric/Functions/decimalToFactorial.html": {
    "href": "phobos/std/numeric/Functions/decimalToFactorial.html",
    "title": "Overloads for - decimalToFactorial | Marmos Demo",
    "keywords": "Overloads for - decimalToFactorial Module std.numeric decimalToFactorial(decimal, fac) size_t decimalToFactorial( ulong decimal, <bug: unknown> fac ) This function transforms decimal value into a value in the factorial number system stored in fac . A factorial number is constructed as: $(D fac[0] **0! + fac[1] ** 1! + ... fac[20] 20!) Params: decimal = The decimal value to convert into the factorial number system. fac = The array to store the factorial number. The array is of size 21 as ulong.max requires 21 digits in the factorial number system. Returns: A variable storing the number of digits of the factorial number stored in fac ."
  },
  "phobos/std/numeric/Functions/dotProduct.html": {
    "href": "phobos/std/numeric/Functions/dotProduct.html",
    "title": "Overloads for - dotProduct | Marmos Demo",
    "keywords": "Overloads for - dotProduct Module std.numeric dotProduct(a, b) CommonType!(ElementType!Range1ElementType!Range2) dotProduct( Range1 a, Range2 b ) Computes the $(LINK2 https://en.wikipedia.org/wiki/Dot_product, dot product) of input ranges a and $(D b). The two ranges must have the same length. If both ranges define length, the check is done once; otherwise, it is done at each iteration. dotProduct(avector, bvector) CommonType!(F1F2) dotProduct( <bug: unknown> avector, <bug: unknown> bvector ) Ditto dotProduct(a, b) F dotProduct( <bug: unknown> a, <bug: unknown> b ) ditto"
  },
  "phobos/std/numeric/Functions/entropy.html": {
    "href": "phobos/std/numeric/Functions/entropy.html",
    "title": "Overloads for - entropy | Marmos Demo",
    "keywords": "Overloads for - entropy Module std.numeric entropy(r) ElementType!(Range) entropy( Range r ) Computes $(LINK2 https://en.wikipedia.org/wiki/Entropy_(information_theory), entropy) of input range r in bits. This function assumes (without checking) that the values in r are all in $(D [0, 1]). For the entropy to be meaningful, often r should be normalized too (i.e., its values should sum to 1). The two-parameter version stops evaluating as soon as the intermediate result is greater than or equal to max . entropy(r, max) ElementType!(Range) entropy( Range r, F max ) Ditto"
  },
  "phobos/std/numeric/Functions/euclideanDistance.html": {
    "href": "phobos/std/numeric/Functions/euclideanDistance.html",
    "title": "Overloads for - euclideanDistance | Marmos Demo",
    "keywords": "Overloads for - euclideanDistance Module std.numeric euclideanDistance(a, b) CommonType!(ElementType!Range1ElementType!Range2) euclideanDistance( Range1 a, Range2 b ) Computes $(LINK2 https://en.wikipedia.org/wiki/Euclidean_distance, Euclidean distance) between input ranges a and b . The two ranges must have the same length. The three-parameter version stops computation as soon as the distance is greater than or equal to limit (this is useful to save computation if a small distance is sought). euclideanDistance(a, b, limit) CommonType!(ElementType!Range1ElementType!Range2) euclideanDistance( Range1 a, Range2 b, F limit ) Ditto"
  },
  "phobos/std/numeric/Functions/fft.html": {
    "href": "phobos/std/numeric/Functions/fft.html",
    "title": "Overloads for - fft | Marmos Demo",
    "keywords": "Overloads for - fft Module std.numeric fft(range) <bug: unknown> fft( R range ) Convenience functions that create an Fft object, run the FFT or inverse FFT and return the result. Useful for one-off FFTs. Note: In addition to convenience, these functions are slightly more efficient than manually creating an Fft object for a single use, as the Fft object is deterministically destroyed before these functions return. fft(range, buf) void fft( R range, Ret buf ) ditto"
  },
  "phobos/std/numeric/Functions/findLocalMin.html": {
    "href": "phobos/std/numeric/Functions/findLocalMin.html",
    "title": "Overloads for - findLocalMin | Marmos Demo",
    "keywords": "Overloads for - findLocalMin Module std.numeric findLocalMin(f, ax, bx, relTolerance, absTolerance) Tuple!(T\"x\"Unqual!(ReturnType!DF)\"y\"T\"error\") findLocalMin( DF f, T ax, T bx, T relTolerance, T absTolerance ) Find a real minimum of a real function f(x) via bracketing. Given a function f and a range (ax .. bx) , returns the value of x in the range which is closest to a minimum of f(x) . f is never evaluted at the endpoints of ax and bx . If f(x) has more than one minimum in the range, one will be chosen arbitrarily. If f(x) returns NaN or -Infinity, (x, f(x), NaN) will be returned; otherwise, this algorithm is guaranteed to succeed. Params f DF Function to be analyzed ax T Left bound of initial range of f known to contain the minimum. bx T Right bound of initial range of f known to contain the minimum. relTolerance T Relative tolerance. absTolerance T Absolute tolerance. Preconditions ax and bx shall be finite reals. $(BR) relTolerance shall be normal positive real. $(BR) absTolerance shall be normal positive real no less then T.epsilon*2 . Returns A tuple consisting of x , y = f(x) and error = 3 * (absTolerance * fabs(x) + relTolerance) . The method used is a combination of golden section search and successive parabolic interpolation. Convergence is never much slower than that for a Fibonacci search. References \"Algorithms for Minimization without Derivatives\", Richard Brent, Prentice-Hall, Inc. (1973) See_Also: $(LREF findRoot), $(REF isNormal, std,math)"
  },
  "phobos/std/numeric/Functions/findRoot.html": {
    "href": "phobos/std/numeric/Functions/findRoot.html",
    "title": "Overloads for - findRoot | Marmos Demo",
    "keywords": "Overloads for - findRoot Module std.numeric findRoot(f, a, b, tolerance) T findRoot( DF f, T a, T b, DT tolerance ) Find a real root of a real function f(x) via bracketing. Given a function f and a range [a .. b] such that f(a) and f(b) have opposite signs or at least one of them equals ±0, returns the value of x in the range which is closest to a root of f(x) . If f(x) has more than one root in the range, one will be chosen arbitrarily. If f(x) returns NaN, NaN will be returned; otherwise, this algorithm is guaranteed to succeed. Uses an algorithm based on TOMS748, which uses inverse cubic interpolation whenever possible, otherwise reverting to parabolic or secant interpolation. Compared to TOMS748, this implementation improves worst-case performance by a factor of more than 100, and typical performance by a factor of 2. For 80-bit reals, most problems require 8 to 15 calls to f(x) to achieve full machine precision. The worst-case performance (pathological cases) is approximately twice the number of bits. References: \"On Enclosing Simple Roots of Nonlinear Equations\", G. Alefeld, F.A. Potra, Yixun Shi, Mathematics of Computation 61, pp733-744 (1993). Fortran code available from $(HTTP www.netlib.org,www.netlib.org) as algorithm TOMS478. findRoot(f, a, b) T findRoot( DF f, T a, T b ) ditto findRoot(f, ax, bx, fax, fbx, tolerance) Tuple!(TTRR) findRoot( DF f, T ax, T bx, R fax, R fbx, DT tolerance ) Find root of a real function f(x) by bracketing, allowing the termination condition to be specified. Params f DF Function to be analyzed ax = Left bound of initial range of f known to contain the root. bx = Right bound of initial range of f known to contain the root. fax = Value of f(ax) . fbx = Value of f(bx) . fax and fbx should have opposite signs. (f(ax) and f(bx) are commonly known in advance.) tolerance = Defines an early termination condition. Receives the current upper and lower bounds on the root. The delegate must return true when these bounds are acceptable. If this function always returns false , full machine precision will be achieved. Returns A tuple consisting of two ranges. The first two elements are the range (in x ) of the root, while the second pair of elements are the corresponding function values at those points. If an exact root was found, both of the first two elements will contain the root, and the second pair of elements will be 0. findRoot(f, ax, bx, fax, fbx) Tuple!(TTRR) findRoot( DF f, T ax, T bx, R fax, R fbx ) ditto findRoot(f, a, b, tolerance) T findRoot( <bug: unknown> f, T a, T b, <bug: unknown> tolerance ) ditto"
  },
  "phobos/std/numeric/Functions/gapWeightedSimilarity.html": {
    "href": "phobos/std/numeric/Functions/gapWeightedSimilarity.html",
    "title": "Overloads for - gapWeightedSimilarity | Marmos Demo",
    "keywords": "Overloads for - gapWeightedSimilarity Module std.numeric gapWeightedSimilarity(s, t, lambda) F gapWeightedSimilarity( R1 s, R2 t, F lambda ) The so-called \"all-lengths gap-weighted string kernel\" computes a similarity measure between s and t based on all of their common subsequences of all lengths. Gapped subsequences are also included. To understand what $(D gapWeightedSimilarity(s, t, lambda)) computes, consider first the case $(D lambda = 1) and the strings $(D s = [\"Hello\", \"brave\", \"new\", \"world\"]) and $(D t = [\"Hello\", \"new\", \"world\"]). In that case, gapWeightedSimilarity counts the following matches: $(OL $(LI three matches of length 1, namely \"Hello\" , \"new\" , and \"world\" ;) \\((LI three matches of length 2, namely (\\)(D \"Hello\", \"new\")), (\\((D \"Hello\", \"world\")), and (\\)(D \"new\", \"world\"));) \\((LI one match of length 3, namely (\\)(D \"Hello\", \"new\", \"world\")).)) The call $(D gapWeightedSimilarity(s, t, 1)) simply counts all of these matches and adds them up, returning 7. ---- string[] s = [\"Hello\", \"brave\", \"new\", \"world\"]; string[] t = [\"Hello\", \"new\", \"world\"]; assert(gapWeightedSimilarity(s, t, 1) == 7); ---- Note how the gaps in matching are simply ignored, for example (\\((D \"Hello\", \"new\")) is deemed as good a match as (\\)(D \"new\", \"world\")). This may be too permissive for some applications. To eliminate gapped matches entirely, use $(D lambda = 0): ---- string[] s = [\"Hello\", \"brave\", \"new\", \"world\"]; string[] t = [\"Hello\", \"new\", \"world\"]; assert(gapWeightedSimilarity(s, t, 0) == 4); ---- The call above eliminated the gapped matches (\\((D \"Hello\", \"new\")), (\\)(D \"Hello\", \"world\")), and ($(D \"Hello\", \"new\", \"world\")) from the tally. That leaves only 4 matches. The most interesting case is when gapped matches still participate in the result, but not as strongly as ungapped matches. The result will be a smooth, fine-grained similarity measure between the input strings. This is where values of lambda between 0 and 1 enter into play: gapped matches are $(I exponentially penalized with the number of gaps) with base lambda . This means that an ungapped match adds 1 to the return value; a match with one gap in either string adds lambda to the return value; ...; a match with a total of n gaps in both strings adds \\((D pow(lambda, n)) to the return value. In the example above, we have 4 matches without gaps, 2 matches with one gap, and 1 match with three gaps. The latter match is (\\)(D \"Hello\", \"world\")), which has two gaps in the first string and one gap in the second string, totaling to three gaps. Summing these up we get $(D 4 + 2 lambda + pow(lambda, 3)). ---- string[] s = [\"Hello\", \"brave\", \"new\", \"world\"]; string[] t = [\"Hello\", \"new\", \"world\"]; assert(gapWeightedSimilarity(s, t, 0.5) == 4 + 0.5 2 + 0.125); ---- gapWeightedSimilarity is useful wherever a smooth similarity measure between sequences allowing for approximate matches is needed. The examples above are given with words, but any sequences with elements comparable for equality are allowed, e.g. characters or numbers. gapWeightedSimilarity uses a highly optimized dynamic programming implementation that needs $(D 16 min(s.length, t.length)) extra bytes of memory and $(BIGOH s.length t.length) time to complete."
  },
  "phobos/std/numeric/Functions/gapWeightedSimilarityIncremental.html": {
    "href": "phobos/std/numeric/Functions/gapWeightedSimilarityIncremental.html",
    "title": "Overloads for - gapWeightedSimilarityIncremental | Marmos Demo",
    "keywords": "Overloads for - gapWeightedSimilarityIncremental Module std.numeric gapWeightedSimilarityIncremental(r1, r2, penalty) GapWeightedSimilarityIncremental!(RF) gapWeightedSimilarityIncremental( R r1, R r2, F penalty ) Ditto"
  },
  "phobos/std/numeric/Functions/gapWeightedSimilarityNormalized.html": {
    "href": "phobos/std/numeric/Functions/gapWeightedSimilarityNormalized.html",
    "title": "Overloads for - gapWeightedSimilarityNormalized | Marmos Demo",
    "keywords": "Overloads for - gapWeightedSimilarityNormalized Module std.numeric gapWeightedSimilarityNormalized(s, t, lambda, sSelfSim, tSelfSim) Select!(isFloatingPoint!FFdouble) gapWeightedSimilarityNormalized( R1 s, R2 t, F lambda, F sSelfSim, F tSelfSim ) The similarity per gapWeightedSimilarity has an issue in that it grows with the lengths of the two strings, even though the strings are not actually very similar. For example, the range $(D [\"Hello\", \"world\"]) is increasingly similar with the range $(D [\"Hello\", \"world\", \"world\", \"world\",...]) as more instances of \"world\" are appended. To prevent that, gapWeightedSimilarityNormalized computes a normalized version of the similarity that is computed as $(D gapWeightedSimilarity(s, t, lambda) / sqrt(gapWeightedSimilarity(s, t, lambda) gapWeightedSimilarity(s, t, lambda))). The function gapWeightedSimilarityNormalized (a so-called normalized kernel) is bounded in $(D [0, 1]), reaches 0 only for ranges that don't match in any position, and 1 only for identical ranges. The optional parameters sSelfSim and tSelfSim are meant for avoiding duplicate computation. Many applications may have already computed $(D gapWeightedSimilarity(s, s, lambda)) and/or $(D gapWeightedSimilarity(t, t, lambda)). In that case, they can be passed as sSelfSim and tSelfSim , respectively."
  },
  "phobos/std/numeric/Functions/gcd.html": {
    "href": "phobos/std/numeric/Functions/gcd.html",
    "title": "Overloads for - gcd | Marmos Demo",
    "keywords": "Overloads for - gcd Module std.numeric gcd(a, b) <bug: unknown> gcd( T a, U b ) Computes the greatest common divisor of a and b by using an efficient algorithm such as $(HTTPS en.wikipedia.org/wiki/Euclidean_algorithm, Euclid's) or $(HTTPS en.wikipedia.org/wiki/Binary_GCD_algorithm, Stein's) algorithm. Params a T Integer value of any numerical type that supports the modulo operator % . If bit-shifting << and >> are also supported, Stein's algorithm will be used; otherwise, Euclid's algorithm is used as a fallback. b U Integer value of any equivalent numerical type. Returns The greatest common divisor of the given arguments. gcd(a, b) <bug: unknown> gcd( T a, T b ) auto ditto"
  },
  "phobos/std/numeric/Functions/gcdImpl.html": {
    "href": "phobos/std/numeric/Functions/gcdImpl.html",
    "title": "Overloads for - gcdImpl | Marmos Demo",
    "keywords": "Overloads for - gcdImpl Module std.numeric gcdImpl(a, b) <bug: unknown> gcdImpl( T a, T b ) gcdImpl(a, b) <bug: unknown> gcdImpl( T a, T b ) auto"
  },
  "phobos/std/numeric/Functions/inverseFft.html": {
    "href": "phobos/std/numeric/Functions/inverseFft.html",
    "title": "Overloads for - inverseFft | Marmos Demo",
    "keywords": "Overloads for - inverseFft Module std.numeric inverseFft(range) <bug: unknown> inverseFft( R range ) ditto inverseFft(range, buf) void inverseFft( R range, Ret buf ) ditto"
  },
  "phobos/std/numeric/Functions/isCorrectCustomFloat.html": {
    "href": "phobos/std/numeric/Functions/isCorrectCustomFloat.html",
    "title": "Overloads for - isCorrectCustomFloat | Marmos Demo",
    "keywords": "Overloads for - isCorrectCustomFloat Module std.numeric isCorrectCustomFloat(precision, exponentWidth, flags) bool isCorrectCustomFloat( uint precision, uint exponentWidth, CustomFloatFlags flags )"
  },
  "phobos/std/numeric/Functions/jensenShannonDivergence.html": {
    "href": "phobos/std/numeric/Functions/jensenShannonDivergence.html",
    "title": "Overloads for - jensenShannonDivergence | Marmos Demo",
    "keywords": "Overloads for - jensenShannonDivergence Module std.numeric jensenShannonDivergence(a, b) CommonType!(ElementType!Range1ElementType!Range2) jensenShannonDivergence( Range1 a, Range2 b ) Computes the $(LINK2 https://en.wikipedia.org/wiki/Jensen%E2%80%93Shannon_divergence, Jensen-Shannon divergence) between a and $(D b), which is the sum $(D (ai **log(2 ** ai / (ai + bi)) + bi **log(2 ** bi / (ai + bi))) / 2). The base of logarithm is 2. The ranges are assumed to contain elements in $(D [0, 1]). Usually the ranges are normalized probability distributions, but this is not required or checked by jensenShannonDivergence . If the inputs are normalized, the result is bounded within $(D [0, 1]). The three-parameter version stops evaluations as soon as the intermediate result is greater than or equal to limit . jensenShannonDivergence(a, b, limit) CommonType!(ElementType!Range1ElementType!Range2) jensenShannonDivergence( Range1 a, Range2 b, F limit ) Ditto"
  },
  "phobos/std/numeric/Functions/kullbackLeiblerDivergence.html": {
    "href": "phobos/std/numeric/Functions/kullbackLeiblerDivergence.html",
    "title": "Overloads for - kullbackLeiblerDivergence | Marmos Demo",
    "keywords": "Overloads for - kullbackLeiblerDivergence Module std.numeric kullbackLeiblerDivergence(a, b) CommonType!(ElementType!Range1ElementType!Range2) kullbackLeiblerDivergence( Range1 a, Range2 b ) Computes the $(LINK2 https://en.wikipedia.org/wiki/Kullback%E2%80%93Leibler_divergence, Kullback-Leibler divergence) between input ranges a and b , which is the sum $(D ai log(ai / bi)). The base of logarithm is 2. The ranges are assumed to contain elements in $(D [0, 1]). Usually the ranges are normalized probability distributions, but this is not required or checked by $(D kullbackLeiblerDivergence). If any element bi is zero and the corresponding element ai nonzero, returns infinity. (Otherwise, if $(D ai == 0 && bi == 0), the term $(D ai log(ai / bi)) is considered zero.) If the inputs are normalized, the result is positive."
  },
  "phobos/std/numeric/Functions/lcm.html": {
    "href": "phobos/std/numeric/Functions/lcm.html",
    "title": "Overloads for - lcm | Marmos Demo",
    "keywords": "Overloads for - lcm Module std.numeric lcm(a, b) <bug: unknown> lcm( T a, U b ) Computes the least common multiple of a and b . Arguments are the same as $(MYREF gcd). Returns The least common multiple of the given arguments. lcm(a, b) <bug: unknown> lcm( T a, T b ) auto ditto"
  },
  "phobos/std/numeric/Functions/normalize.html": {
    "href": "phobos/std/numeric/Functions/normalize.html",
    "title": "Overloads for - normalize | Marmos Demo",
    "keywords": "Overloads for - normalize Module std.numeric normalize(range, sum) bool normalize( R range, ElementType!(R) sum ) Normalizes values in range by multiplying each element with a number chosen such that values sum up to sum . If elements in $(D range) sum to zero, assigns $(D sum / range.length) to all. Normalization makes sense only if all elements in range are positive. normalize assumes that is the case without checking it. Returns: true if normalization completed normally, false if all elements in range were zero or if range is empty."
  },
  "phobos/std/numeric/Functions/oppositeSigns.html": {
    "href": "phobos/std/numeric/Functions/oppositeSigns.html",
    "title": "Overloads for - oppositeSigns | Marmos Demo",
    "keywords": "Overloads for - oppositeSigns Module std.numeric oppositeSigns(a, b) bool oppositeSigns( T1 a, T2 b ) Return true if a and b have opposite sign."
  },
  "phobos/std/numeric/Functions/roundDownToPowerOf2.html": {
    "href": "phobos/std/numeric/Functions/roundDownToPowerOf2.html",
    "title": "Overloads for - roundDownToPowerOf2 | Marmos Demo",
    "keywords": "Overloads for - roundDownToPowerOf2 Module std.numeric roundDownToPowerOf2(num) N roundDownToPowerOf2( N num )"
  },
  "phobos/std/numeric/Functions/secantMethod.html": {
    "href": "phobos/std/numeric/Functions/secantMethod.html",
    "title": "Overloads for - secantMethod | Marmos Demo",
    "keywords": "Overloads for - secantMethod Module std.numeric secantMethod(xn_1, xn) Num secantMethod( Num xn_1, Num xn ) Implements the $(HTTP tinyurl.com/2zb9yr, secant method) for finding a root of the function fun starting from points $(D [xn_1, x_n]) (ideally close to the root). Num may be float , double , or real ."
  },
  "phobos/std/numeric/Functions/slowFourier2.html": {
    "href": "phobos/std/numeric/Functions/slowFourier2.html",
    "title": "Overloads for - slowFourier2 | Marmos Demo",
    "keywords": "Overloads for - slowFourier2 Module std.numeric slowFourier2(range, buf) void slowFourier2( R range, Ret buf )"
  },
  "phobos/std/numeric/Functions/slowFourier4.html": {
    "href": "phobos/std/numeric/Functions/slowFourier4.html",
    "title": "Overloads for - slowFourier4 | Marmos Demo",
    "keywords": "Overloads for - slowFourier4 Module std.numeric slowFourier4(range, buf) void slowFourier4( R range, Ret buf )"
  },
  "phobos/std/numeric/Functions/sumOfLog2s.html": {
    "href": "phobos/std/numeric/Functions/sumOfLog2s.html",
    "title": "Overloads for - sumOfLog2s | Marmos Demo",
    "keywords": "Overloads for - sumOfLog2s Module std.numeric sumOfLog2s(r) ElementType!(Range) sumOfLog2s( Range r ) Compute the sum of binary logarithms of the input range r . The error of this method is much smaller than with a naive sum of log2."
  },
  "phobos/std/numeric/Functions/swapRealImag.html": {
    "href": "phobos/std/numeric/Functions/swapRealImag.html",
    "title": "Overloads for - swapRealImag | Marmos Demo",
    "keywords": "Overloads for - swapRealImag Module std.numeric swapRealImag(input) C swapRealImag( C input )"
  },
  "phobos/std/numeric/GapWeightedSimilarityIncremental/Functions/empty.html": {
    "href": "phobos/std/numeric/GapWeightedSimilarityIncremental/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.numeric Parent GapWeightedSimilarityIncremental empty() bool empty( ) Returns: Whether there are more matches."
  },
  "phobos/std/numeric/GapWeightedSimilarityIncremental/Functions/front.html": {
    "href": "phobos/std/numeric/GapWeightedSimilarityIncremental/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.numeric Parent GapWeightedSimilarityIncremental front() F front( ) Returns: The gapped similarity at the current match length (initially 1, grows with each call to popFront )."
  },
  "phobos/std/numeric/GapWeightedSimilarityIncremental/Functions/opSlice.html": {
    "href": "phobos/std/numeric/GapWeightedSimilarityIncremental/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.numeric Parent GapWeightedSimilarityIncremental opSlice() GapWeightedSimilarityIncremental opSlice( ) Returns: this ."
  },
  "phobos/std/numeric/GapWeightedSimilarityIncremental/Functions/popFront.html": {
    "href": "phobos/std/numeric/GapWeightedSimilarityIncremental/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.numeric Parent GapWeightedSimilarityIncremental popFront() void popFront( ) Computes the match of the popFront length. Completes in $(BIGOH s.length t.length) time."
  },
  "phobos/std/numeric/Overview.html": {
    "href": "phobos/std/numeric/Overview.html",
    "title": "Module - std.numeric | Marmos Demo",
    "keywords": "Module - std.numeric About This module is a port of a growing fragment of the $(D_PARAM numeric) header in Alexander Stepanov's $(LINK2 https://en.wikipedia.org/wiki/Standard_Template_Library, Standard Template Library), with a few additions. Macros Copyright: Copyright Andrei Alexandrescu 2008 - 2009. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP erdani.org, Andrei Alexandrescu), Don Clugston, Robert Jacques, Ilya Yaroshenko Source: $(PHOBOSSRC std/numeric.d) Aliases Name Description CustomFloat Allows user code to define custom floating-point formats. These formats are for storage only; all operations on them are performed by first implicitly extracting them to real first. After the operation is completed the result can be stored in a custom floating-point value via assignment. CustomFloat ditto CustomFloatParams lookup_t Classes Name Description Fft A class for performing fast Fourier transforms of power of two sizes. This class encapsulates a large amount of state that is reusable when performing multiple FFTs of sizes smaller than or equal to that specified in the constructor. This results in substantial speedups when performing multiple FFTs with a known maximum size. However, a free function API is provided for convenience if you need to perform a one-off FFT. Structs Name Description CustomFloat ditto GapWeightedSimilarityIncremental Similar to gapWeightedSimilarity , just works in an incremental manner by first revealing the matches of length 1, then gapped matches of length 2, and so on. The memory requirement is $(BIGOH s.length t.length). The time complexity is $(BIGOH s.length t.length) time for computing each step. Continuing on the previous example: Stride Functions Name Description cosineSimilarity Computes the $(LINK2 https://en.wikipedia.org/wiki/Cosine_similarity, cosine similarity) of input ranges a and $(D b). The two ranges must have the same length. If both ranges define length, the check is done once; otherwise, it is done at each iteration. If either range has all-zero elements, return 0. decimalToFactorial This function transforms decimal value into a value in the factorial number system stored in fac . dotProduct Computes the $(LINK2 https://en.wikipedia.org/wiki/Dot_product, dot product) of input ranges a and $(D b). The two ranges must have the same length. If both ranges define length, the check is done once; otherwise, it is done at each iteration. entropy Computes $(LINK2 https://en.wikipedia.org/wiki/Entropy_(information_theory), entropy) of input range r in bits. This function assumes (without checking) that the values in r are all in $(D [0, 1]). For the entropy to be meaningful, often r should be normalized too (i.e., its values should sum to 1). The two-parameter version stops evaluating as soon as the intermediate result is greater than or equal to max . euclideanDistance Computes $(LINK2 https://en.wikipedia.org/wiki/Euclidean_distance, Euclidean distance) between input ranges a and b . The two ranges must have the same length. The three-parameter version stops computation as soon as the distance is greater than or equal to limit (this is useful to save computation if a small distance is sought). fft Convenience functions that create an Fft object, run the FFT or inverse FFT and return the result. Useful for one-off FFTs. findLocalMin Find a real minimum of a real function f(x) via bracketing. Given a function f and a range (ax .. bx) , returns the value of x in the range which is closest to a minimum of f(x) . f is never evaluted at the endpoints of ax and bx . If f(x) has more than one minimum in the range, one will be chosen arbitrarily. If f(x) returns NaN or -Infinity, (x, f(x), NaN) will be returned; otherwise, this algorithm is guaranteed to succeed. findRoot Find a real root of a real function f(x) via bracketing. gapWeightedSimilarity The so-called \"all-lengths gap-weighted string kernel\" computes a similarity measure between s and t based on all of their common subsequences of all lengths. Gapped subsequences are also included. gapWeightedSimilarityIncremental Ditto gapWeightedSimilarityNormalized The similarity per gapWeightedSimilarity has an issue in that it grows with the lengths of the two strings, even though the strings are not actually very similar. For example, the range $(D [\"Hello\", \"world\"]) is increasingly similar with the range $(D [\"Hello\", \"world\", \"world\", \"world\",...]) as more instances of \"world\" are appended. To prevent that, gapWeightedSimilarityNormalized computes a normalized version of the similarity that is computed as $(D gapWeightedSimilarity(s, t, lambda) / sqrt(gapWeightedSimilarity(s, t, lambda) gapWeightedSimilarity(s, t, lambda))). The function gapWeightedSimilarityNormalized (a so-called normalized kernel) is bounded in $(D [0, 1]), reaches 0 only for ranges that don't match in any position, and 1 only for identical ranges. gcd Computes the greatest common divisor of a and b by using an efficient algorithm such as $(HTTPS en.wikipedia.org/wiki/Euclidean_algorithm, Euclid's) or $(HTTPS en.wikipedia.org/wiki/Binary_GCD_algorithm, Stein's) algorithm. gcdImpl inverseFft ditto isCorrectCustomFloat jensenShannonDivergence Computes the $(LINK2 https://en.wikipedia.org/wiki/Jensen%E2%80%93Shannon_divergence, Jensen-Shannon divergence) between a and $(D b), which is the sum $(D (ai **log(2 ** ai / (ai + bi)) + bi **log(2 ** bi / (ai + bi))) / 2). The base of logarithm is 2. The ranges are assumed to contain elements in $(D [0, 1]). Usually the ranges are normalized probability distributions, but this is not required or checked by jensenShannonDivergence . If the inputs are normalized, the result is bounded within $(D [0, 1]). The three-parameter version stops evaluations as soon as the intermediate result is greater than or equal to limit . kullbackLeiblerDivergence Computes the $(LINK2 https://en.wikipedia.org/wiki/Kullback%E2%80%93Leibler_divergence, Kullback-Leibler divergence) between input ranges a and b , which is the sum $(D ai log(ai / bi)). The base of logarithm is 2. The ranges are assumed to contain elements in $(D [0, 1]). Usually the ranges are normalized probability distributions, but this is not required or checked by $(D kullbackLeiblerDivergence). If any element bi is zero and the corresponding element ai nonzero, returns infinity. (Otherwise, if $(D ai == 0 && bi == 0), the term $(D ai log(ai / bi)) is considered zero.) If the inputs are normalized, the result is positive. lcm Computes the least common multiple of a and b . Arguments are the same as $(MYREF gcd). normalize Normalizes values in range by multiplying each element with a number chosen such that values sum up to sum . If elements in $(D range) sum to zero, assigns $(D sum / range.length) to all. Normalization makes sense only if all elements in range are positive. normalize assumes that is the case without checking it. oppositeSigns Return true if a and b have opposite sign. roundDownToPowerOf2 secantMethod Implements the $(HTTP tinyurl.com/2zb9yr, secant method) for finding a root of the function fun starting from points $(D [xn_1, x_n]) (ideally close to the root). Num may be float , double , or real . slowFourier2 slowFourier4 sumOfLog2s Compute the sum of binary logarithms of the input range r . The error of this method is much smaller than with a naive sum of log2. swapRealImag Variables Name Description isComplexLike isIEEEQuadruple MakeLocalFft"
  },
  "phobos/std/numeric/Stride/Functions/doubleSteps.html": {
    "href": "phobos/std/numeric/Stride/Functions/doubleSteps.html",
    "title": "Overloads for - doubleSteps | Marmos Demo",
    "keywords": "Overloads for - doubleSteps Module std.numeric Parent Stride doubleSteps() void doubleSteps( )"
  },
  "phobos/std/numeric/Stride/Functions/empty.html": {
    "href": "phobos/std/numeric/Stride/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.numeric Parent Stride empty() bool empty( )"
  },
  "phobos/std/numeric/Stride/Functions/front.html": {
    "href": "phobos/std/numeric/Stride/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.numeric Parent Stride front() E front( )"
  },
  "phobos/std/numeric/Stride/Functions/length.html": {
    "href": "phobos/std/numeric/Stride/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.numeric Parent Stride length() size_t length( )"
  },
  "phobos/std/numeric/Stride/Functions/nSteps.html": {
    "href": "phobos/std/numeric/Stride/Functions/nSteps.html",
    "title": "Overloads for - nSteps | Marmos Demo",
    "keywords": "Overloads for - nSteps Module std.numeric Parent Stride nSteps() size_t nSteps( ) nSteps(newVal) size_t nSteps( size_t newVal )"
  },
  "phobos/std/numeric/Stride/Functions/opIndex.html": {
    "href": "phobos/std/numeric/Stride/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.numeric Parent Stride opIndex(index) E opIndex( size_t index )"
  },
  "phobos/std/numeric/Stride/Functions/popFront.html": {
    "href": "phobos/std/numeric/Stride/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.numeric Parent Stride popFront() void popFront( )"
  },
  "phobos/std/numeric/Stride/Functions/popHalf.html": {
    "href": "phobos/std/numeric/Stride/Functions/popHalf.html",
    "title": "Overloads for - popHalf | Marmos Demo",
    "keywords": "Overloads for - popHalf Module std.numeric Parent Stride popHalf() void popHalf( )"
  },
  "phobos/std/numeric/Stride/Functions/save.html": {
    "href": "phobos/std/numeric/Stride/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.numeric Parent Stride save() <bug: unknown> save( )"
  },
  "phobos/std/numeric/Structs/CustomFloat.html": {
    "href": "phobos/std/numeric/Structs/CustomFloat.html",
    "title": "Struct - CustomFloat | Marmos Demo",
    "keywords": "Struct - CustomFloat Module std.numeric public struct CustomFloat { // alias Flags = <todo: marmos support pending>; // ditto alias opCast = <todo: marmos support pending>; // alias T_exp = <todo: marmos support pending>; // alias T_sig = <todo: marmos support pending>; // alias T_signed_exp = <todo: marmos support pending>; // Returns: number of decimal digits of precision size_t dig( ) static; // Returns: smallest increment to the value 1 CustomFloat epsilon( ) static; // Returns: imaginary part CustomFloat im( ) static; // Returns: infinity value CustomFloat infinity( ) static; // Returns: largest representable value that's not infinity CustomFloat max( ) static; // Returns: maximum int value such that 10<sup>max_10_exp</sup> is representable int max_10_exp( ) static; // Returns: minimum int value such that 10<sup>min_10_exp</sup> is representable int min_10_exp( ) static; // Returns: smallest representable normalized value that's not 0 CustomFloat min_normal( ) static; // Returns: NaN value CustomFloat nan( ) static; // Returns: real part CustomFloat re( ) ; // the number of bits in mantissa __enumMember mant_dig; // maximum int value such that 2<sup>max_exp-1</sup> is representable __enumMember max_exp; // minimum int value such that 2<sup>min_exp-1</sup> is representable as a normalized value __enumMember min_exp; // ulong significand; // ulong significand_max; } About ditto Aliases Name Description Flags opCast ditto T_exp T_sig T_signed_exp Functions Name Description dig Returns: number of decimal digits of precision epsilon Returns: smallest increment to the value 1 im Returns: imaginary part infinity Returns: infinity value max Returns: largest representable value that's not infinity max_10_exp Returns: maximum int value such that 10max_10_exp is representable min_10_exp Returns: minimum int value such that 10min_10_exp is representable min_normal Returns: smallest representable normalized value that's not 0 nan Returns: NaN value re Returns: real part Variables Name Description mant_dig the number of bits in mantissa max_exp maximum int value such that 2max_exp-1 is representable min_exp minimum int value such that 2min_exp-1 is representable as a normalized value significand significand_max"
  },
  "phobos/std/numeric/Structs/GapWeightedSimilarityIncremental.html": {
    "href": "phobos/std/numeric/Structs/GapWeightedSimilarityIncremental.html",
    "title": "Struct - GapWeightedSimilarityIncremental | Marmos Demo",
    "keywords": "Struct - GapWeightedSimilarityIncremental Module std.numeric public struct GapWeightedSimilarityIncremental { // Returns: Whether there are more matches. bool empty( ) ; // Returns: The gapped similarity at the current match length (initially 1, grows with each call to `popFront` ). F front( ) ; // Returns: `this` . GapWeightedSimilarityIncremental opSlice( ) ; // Computes the match of the popFront length. Completes in $(BIGOH s.length t.length) time. void popFront( ) ; // F currentValue; // size_t gram; // <bug: unknown> kl; // F lambda; // F lambda2; // Range s; // Range t; } About Similar to gapWeightedSimilarity , just works in an incremental manner by first revealing the matches of length 1, then gapped matches of length 2, and so on. The memory requirement is $(BIGOH s.length t.length). The time complexity is $(BIGOH s.length t.length) time for computing each step. Continuing on the previous example: The implementation is based on the pseudocode in Fig. 4 of the paper $(HTTP jmlr.csail.mit.edu/papers/volume6/rousu05a/rousu05a.pdf, \"Efﬁcient Computation of Gapped Substring Kernels on Large Alphabets\") by Rousu et al., with additional algorithmic and systems-level optimizations. Functions Name Description empty Returns: Whether there are more matches. front Returns: The gapped similarity at the current match length (initially 1, grows with each call to popFront ). opSlice Returns: this . popFront Computes the match of the popFront length. Completes in $(BIGOH s.length t.length) time. Variables Name Description currentValue gram kl lambda lambda2 s t"
  },
  "phobos/std/numeric/Structs/Stride.html": {
    "href": "phobos/std/numeric/Structs/Stride.html",
    "title": "Struct - Stride | Marmos Demo",
    "keywords": "Struct - Stride Module std.numeric public struct Stride { // alias E = <todo: marmos support pending>; // void doubleSteps( ) ; // bool empty( ) ; // E front( ) ; // size_t length( ) ; // size_t nSteps( ) ; // size_t nSteps( size_t newVal ) ; // E opIndex( size_t index ) ; // void popFront( ) ; // void popHalf( ) ; // <bug: unknown> save( ) ; // Unqual!(R) range; } Aliases Name Description E Functions Name Description doubleSteps empty front length nSteps opIndex popFront popHalf save Variables Name Description range"
  },
  "phobos/std/outbuffer/Classes/OutBuffer.html": {
    "href": "phobos/std/outbuffer/Classes/OutBuffer.html",
    "title": "Class - OutBuffer | Marmos Demo",
    "keywords": "Class - OutBuffer Module std.outbuffer public class OutBuffer { // put enables OutBuffer to be used as an OutputRange. alias put = <todo: marmos support pending>; // Optimize common special case alignSize(2) Params: val = Value to fill, defaults to 0. void align2( ubyte val ) ; // Optimize common special case alignSize(4) Params: val = Value to fill, defaults to 0. void align4( ubyte val ) ; // Append bytes until the buffer aligns on a power of 2 boundary. void alignSize( size_t alignsize, ubyte val ) ; // Clear the data in the buffer void clear( ) ; // Append nbytes of val to the internal buffer. Params: nbytes = Number of bytes to fill. val = Value to fill, defaults to 0. void fill( size_t nbytes, ubyte val ) ; // Append nbytes of 0 to the internal buffer. Param: nbytes - number of bytes to fill. void fill0( size_t nbytes ) ; // Append output of C's printf() to internal buffer. void printf( string format ) ; // Preallocate nbytes more to the size of the internal buffer. void reserve( size_t nbytes ) ; // At offset index into buffer, create nbytes of space by shifting upwards all data past index. void spread( size_t index, size_t nbytes ) ; // Convert to array of bytes. <bug: unknown> toBytes( ) ; // Convert internal buffer to array of chars. string toString( ) override; // Append output of C's vprintf() to internal buffer. void vprintf( string format, va_list args ) ; // Append data to the internal buffer. void write( <bug: unknown> bytes ) ; // void write( <bug: unknown> chars ) ; // void write( <bug: unknown> chars ) ; // void write( ubyte b ) ; // ditto void write( byte b ) ; // ditto void write( char c ) ; // ditto void write( dchar c ) ; // void write( ushort w ) ; // ditto void write( short s ) ; // void write( wchar c ) ; // void write( uint w ) ; // ditto void write( int i ) ; // void write( ulong l ) ; // ditto void write( long l ) ; // void write( float f ) ; // void write( double f ) ; // void write( real f ) ; // void write( <bug: unknown> s ) ; // void write( OutBuffer buf ) ; // <bug: unknown> data; // size_t offset; } About OutBuffer provides a way to build up an array of bytes out of raw data. It is useful for things like preparing an array of bytes to write out to a file. OutBuffer's byte order is the format native to the computer. To control the byte order (endianness), use a class derived from OutBuffer. OutBuffer's internal buffer is allocated with the GC. Pointers stored into the buffer are scanned by the GC, but you have to ensure proper alignment, e.g. by using alignSize((void*).sizeof). Aliases Name Description put put enables OutBuffer to be used as an OutputRange. Functions Name Description align2 Optimize common special case alignSize(2) Params: val = Value to fill, defaults to 0. align4 Optimize common special case alignSize(4) Params: val = Value to fill, defaults to 0. alignSize Append bytes until the buffer aligns on a power of 2 boundary. clear Clear the data in the buffer fill Append nbytes of val to the internal buffer. Params: nbytes = Number of bytes to fill. val = Value to fill, defaults to 0. fill0 Append nbytes of 0 to the internal buffer. Param: nbytes - number of bytes to fill. printf Append output of C's printf() to internal buffer. reserve Preallocate nbytes more to the size of the internal buffer. spread At offset index into buffer, create nbytes of space by shifting upwards all data past index. toBytes Convert to array of bytes. toString Convert internal buffer to array of chars. vprintf Append output of C's vprintf() to internal buffer. write Append data to the internal buffer. Variables Name Description data offset"
  },
  "phobos/std/outbuffer/OutBuffer/Functions/align2.html": {
    "href": "phobos/std/outbuffer/OutBuffer/Functions/align2.html",
    "title": "Overloads for - align2 | Marmos Demo",
    "keywords": "Overloads for - align2 Module std.outbuffer Parent OutBuffer align2(val) void align2( ubyte val ) Optimize common special case alignSize(2) Params: val = Value to fill, defaults to 0."
  },
  "phobos/std/outbuffer/OutBuffer/Functions/align4.html": {
    "href": "phobos/std/outbuffer/OutBuffer/Functions/align4.html",
    "title": "Overloads for - align4 | Marmos Demo",
    "keywords": "Overloads for - align4 Module std.outbuffer Parent OutBuffer align4(val) void align4( ubyte val ) Optimize common special case alignSize(4) Params: val = Value to fill, defaults to 0."
  },
  "phobos/std/outbuffer/OutBuffer/Functions/alignSize.html": {
    "href": "phobos/std/outbuffer/OutBuffer/Functions/alignSize.html",
    "title": "Overloads for - alignSize | Marmos Demo",
    "keywords": "Overloads for - alignSize Module std.outbuffer Parent OutBuffer alignSize(alignsize, val) void alignSize( size_t alignsize, ubyte val ) Append bytes until the buffer aligns on a power of 2 boundary. By default fills with 0 bytes. Params alignsize size_t Alignment value. Must be power of 2. val ubyte Value to fill, defaults to 0."
  },
  "phobos/std/outbuffer/OutBuffer/Functions/clear.html": {
    "href": "phobos/std/outbuffer/OutBuffer/Functions/clear.html",
    "title": "Overloads for - clear | Marmos Demo",
    "keywords": "Overloads for - clear Module std.outbuffer Parent OutBuffer clear() void clear( ) Clear the data in the buffer"
  },
  "phobos/std/outbuffer/OutBuffer/Functions/fill.html": {
    "href": "phobos/std/outbuffer/OutBuffer/Functions/fill.html",
    "title": "Overloads for - fill | Marmos Demo",
    "keywords": "Overloads for - fill Module std.outbuffer Parent OutBuffer fill(nbytes, val) void fill( size_t nbytes, ubyte val ) Append nbytes of val to the internal buffer. Params: nbytes = Number of bytes to fill. val = Value to fill, defaults to 0."
  },
  "phobos/std/outbuffer/OutBuffer/Functions/fill0.html": {
    "href": "phobos/std/outbuffer/OutBuffer/Functions/fill0.html",
    "title": "Overloads for - fill0 | Marmos Demo",
    "keywords": "Overloads for - fill0 Module std.outbuffer Parent OutBuffer fill0(nbytes) void fill0( size_t nbytes ) Append nbytes of 0 to the internal buffer. Param: nbytes - number of bytes to fill."
  },
  "phobos/std/outbuffer/OutBuffer/Functions/printf.html": {
    "href": "phobos/std/outbuffer/OutBuffer/Functions/printf.html",
    "title": "Overloads for - printf | Marmos Demo",
    "keywords": "Overloads for - printf Module std.outbuffer Parent OutBuffer printf(format) void printf( string format ) Append output of C's printf() to internal buffer."
  },
  "phobos/std/outbuffer/OutBuffer/Functions/reserve.html": {
    "href": "phobos/std/outbuffer/OutBuffer/Functions/reserve.html",
    "title": "Overloads for - reserve | Marmos Demo",
    "keywords": "Overloads for - reserve Module std.outbuffer Parent OutBuffer reserve(nbytes) void reserve( size_t nbytes ) Preallocate nbytes more to the size of the internal buffer. This is a speed optimization, a good guess at the maximum size of the resulting buffer will improve performance by eliminating reallocations and copying."
  },
  "phobos/std/outbuffer/OutBuffer/Functions/spread.html": {
    "href": "phobos/std/outbuffer/OutBuffer/Functions/spread.html",
    "title": "Overloads for - spread | Marmos Demo",
    "keywords": "Overloads for - spread Module std.outbuffer Parent OutBuffer spread(index, nbytes) void spread( size_t index, size_t nbytes ) At offset index into buffer, create nbytes of space by shifting upwards all data past index."
  },
  "phobos/std/outbuffer/OutBuffer/Functions/toBytes.html": {
    "href": "phobos/std/outbuffer/OutBuffer/Functions/toBytes.html",
    "title": "Overloads for - toBytes | Marmos Demo",
    "keywords": "Overloads for - toBytes Module std.outbuffer Parent OutBuffer toBytes() <bug: unknown> toBytes( ) Convert to array of bytes."
  },
  "phobos/std/outbuffer/OutBuffer/Functions/toString.html": {
    "href": "phobos/std/outbuffer/OutBuffer/Functions/toString.html",
    "title": "Overloads for - toString | Marmos Demo",
    "keywords": "Overloads for - toString Module std.outbuffer Parent OutBuffer toString() string toString( ) override Convert internal buffer to array of chars."
  },
  "phobos/std/outbuffer/OutBuffer/Functions/vprintf.html": {
    "href": "phobos/std/outbuffer/OutBuffer/Functions/vprintf.html",
    "title": "Overloads for - vprintf | Marmos Demo",
    "keywords": "Overloads for - vprintf Module std.outbuffer Parent OutBuffer vprintf(format, args) void vprintf( string format, va_list args ) Append output of C's vprintf() to internal buffer."
  },
  "phobos/std/outbuffer/OutBuffer/Functions/write.html": {
    "href": "phobos/std/outbuffer/OutBuffer/Functions/write.html",
    "title": "Overloads for - write | Marmos Demo",
    "keywords": "Overloads for - write Module std.outbuffer Parent OutBuffer write(bytes) void write( <bug: unknown> bytes ) Append data to the internal buffer. write(chars) void write( <bug: unknown> chars ) write(chars) void write( <bug: unknown> chars ) write(b) void write( ubyte b ) write(b) void write( byte b ) ditto write(c) void write( char c ) ditto write(c) void write( dchar c ) ditto write(w) void write( ushort w ) write(s) void write( short s ) ditto write(c) void write( wchar c ) write(w) void write( uint w ) write(i) void write( int i ) ditto write(l) void write( ulong l ) write(l) void write( long l ) ditto write(f) void write( float f ) write(f) void write( double f ) write(f) void write( real f ) write(s) void write( <bug: unknown> s ) write(buf) void write( OutBuffer buf )"
  },
  "phobos/std/outbuffer/Overview.html": {
    "href": "phobos/std/outbuffer/Overview.html",
    "title": "Module - std.outbuffer | Marmos Demo",
    "keywords": "Module - std.outbuffer About Serialize data to ubyte arrays. Copyright: Copyright The D Language Foundation 2000 - 2015. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP digitalmars.com, Walter Bright) Source: $(PHOBOSSRC std/outbuffer.d) $(SCRIPT inhibitQuickIndex = 1;) Classes Name Description OutBuffer OutBuffer provides a way to build up an array of bytes out of raw data. It is useful for things like preparing an array of bytes to write out to a file. OutBuffer's byte order is the format native to the computer. To control the byte order (endianness), use a class derived from OutBuffer. OutBuffer's internal buffer is allocated with the GC. Pointers stored into the buffer are scanned by the GC, but you have to ensure proper alignment, e.g. by using alignSize((void*).sizeof)."
  },
  "phobos/std/parallelism/AbstractTask/Functions/done.html": {
    "href": "phobos/std/parallelism/AbstractTask/Functions/done.html",
    "title": "Overloads for - done | Marmos Demo",
    "keywords": "Overloads for - done Module std.parallelism Parent AbstractTask done() bool done( )"
  },
  "phobos/std/parallelism/AbstractTask/Functions/job.html": {
    "href": "phobos/std/parallelism/AbstractTask/Functions/job.html",
    "title": "Overloads for - job | Marmos Demo",
    "keywords": "Overloads for - job Module std.parallelism Parent AbstractTask job() void job( )"
  },
  "phobos/std/parallelism/Classes/ParallelForeachError.html": {
    "href": "phobos/std/parallelism/Classes/ParallelForeachError.html",
    "title": "Class - ParallelForeachError | Marmos Demo",
    "keywords": "Class - ParallelForeachError Module std.parallelism public class ParallelForeachError { }"
  },
  "phobos/std/parallelism/Classes/ParallelismThread.html": {
    "href": "phobos/std/parallelism/Classes/ParallelismThread.html",
    "title": "Class - ParallelismThread | Marmos Demo",
    "keywords": "Class - ParallelismThread Module std.parallelism public class ParallelismThread { // TaskPool pool; } Variables Name Description pool"
  },
  "phobos/std/parallelism/Classes/TaskPool.html": {
    "href": "phobos/std/parallelism/Classes/TaskPool.html",
    "title": "Class - TaskPool | Marmos Demo",
    "keywords": "Class - TaskPool Module std.parallelism public class TaskPool { // void abstractPut( <bug: unknown> task ) ; // void abstractPutGroupNoSync( <bug: unknown> h, <bug: unknown> t ) ; // void abstractPutNoSync( <bug: unknown> task ) ; // size_t defaultWorkUnitSize( size_t rangeLen ) ; // bool deleteItem( <bug: unknown> item ) ; // bool deleteItemNoSync( <bug: unknown> item ) ; // void doJob( <bug: unknown> job ) ; // void doSingleTask( ) ; // void executeWorkLoop( ) ; // Signals worker threads to terminate when the queue becomes empty. void finish( bool blocking ) ; // These properties control whether the worker threads are daemon threads. A daemon thread is automatically terminated when all non-daemon threads have terminated. A non-daemon thread will prevent a program from terminating as long as it has not terminated. bool isDaemon( ) ; // Ditto void isDaemon( bool newVal ) ; // void notify( ) ; // void notifyAll( ) ; // void notifyWaiters( ) ; // <bug: unknown> pop( ) ; // <bug: unknown> popNoSync( ) ; // These functions allow getting and setting the OS scheduling priority of the worker threads in this `TaskPool` . They forward to `core.thread.Thread.priority` , so a given priority value here means the same thing as an identical priority value in `core.thread` . int priority( ) ; // Ditto void priority( int newPriority ) ; // void queueLock( ) ; // void queueUnlock( ) ; // Returns the number of worker threads in the pool. size_t size( ) ; // void startWorkLoop( ) ; // Signals to all worker threads to terminate as soon as they are finished with their current `Task` , or immediately if they are not executing a `Task` . `Task` s that were in queue will not be executed unless a call to `Task.workForce` , `Task.yieldForce` or `Task.spinForce` causes them to be executed. void stop( ) ; // void tryDeleteExecute( <bug: unknown> toExecute ) ; // void wait( ) ; // void waiterLock( ) ; // void waiterUnlock( ) ; // void waitUntilCompletion( ) ; // Gets the index of the current thread relative to this `TaskPool` . Any thread not in this pool will receive an index of 0. The worker threads in this pool receive unique indices of 1 through `this.size` . size_t workerIndex( ) ; // <bug: unknown> head; // immutable size_t instanceStartIndex; // bool isSingleTask; // __gshared size_t nextInstanceIndex; // size_t nextThreadIndex; // <bug: unknown> pool; // Mutex queueMutex; // Thread singleTaskThread; // PoolState status; // <bug: unknown> tail; // static size_t threadIndex; // Condition waiterCondition; // Mutex waiterMutex; // Condition workerCondition; } About This class encapsulates a task queue and a set of worker threads. Its purpose is to efficiently map a large number of Task s onto a smaller number of threads. A task queue is a FIFO queue of Task objects that have been submitted to the TaskPool and are awaiting execution. A worker thread is a thread that executes the Task at the front of the queue when one is available and sleeps when the queue is empty. This class should usually be used via the global instantiation available via the $(REF taskPool, std,parallelism) property. Occasionally it is useful to explicitly instantiate a TaskPool : 1.1. When you want `TaskPool` instances with multiple priorities, for example a low priority pool and a high priority pool. 1.1. When the threads in the global task pool are waiting on a synchronization primitive (for example a mutex), and you want to parallelize the code that needs to run before these threads can be resumed. Note: The worker threads in this pool will not stop until stop or finish is called, even if the main thread has finished already. This may lead to programs that never end. If you do not want this behaviour, you can set isDaemon to true. Functions Name Description abstractPut abstractPutGroupNoSync abstractPutNoSync defaultWorkUnitSize deleteItem deleteItemNoSync doJob doSingleTask executeWorkLoop finish Signals worker threads to terminate when the queue becomes empty. isDaemon These properties control whether the worker threads are daemon threads. A daemon thread is automatically terminated when all non-daemon threads have terminated. A non-daemon thread will prevent a program from terminating as long as it has not terminated. notify notifyAll notifyWaiters pop popNoSync priority These functions allow getting and setting the OS scheduling priority of the worker threads in this TaskPool . They forward to core.thread.Thread.priority , so a given priority value here means the same thing as an identical priority value in core.thread . queueLock queueUnlock size Returns the number of worker threads in the pool. startWorkLoop stop Signals to all worker threads to terminate as soon as they are finished with their current Task , or immediately if they are not executing a Task . Task s that were in queue will not be executed unless a call to Task.workForce , Task.yieldForce or Task.spinForce causes them to be executed. tryDeleteExecute wait waiterLock waiterUnlock waitUntilCompletion workerIndex Gets the index of the current thread relative to this TaskPool . Any thread not in this pool will receive an index of 0. The worker threads in this pool receive unique indices of 1 through this.size . Variables Name Description head instanceStartIndex isSingleTask nextInstanceIndex nextThreadIndex pool queueMutex singleTaskThread status tail threadIndex waiterCondition waiterMutex workerCondition"
  },
  "phobos/std/parallelism/Functions/atomicCasUbyte.html": {
    "href": "phobos/std/parallelism/Functions/atomicCasUbyte.html",
    "title": "Overloads for - atomicCasUbyte | Marmos Demo",
    "keywords": "Overloads for - atomicCasUbyte Module std.parallelism atomicCasUbyte(stuff, testVal, newVal) bool atomicCasUbyte( T stuff, T testVal, T newVal )"
  },
  "phobos/std/parallelism/Functions/atomicReadUbyte.html": {
    "href": "phobos/std/parallelism/Functions/atomicReadUbyte.html",
    "title": "Overloads for - atomicReadUbyte | Marmos Demo",
    "keywords": "Overloads for - atomicReadUbyte Module std.parallelism atomicReadUbyte(val) ubyte atomicReadUbyte( T val )"
  },
  "phobos/std/parallelism/Functions/atomicSetUbyte.html": {
    "href": "phobos/std/parallelism/Functions/atomicSetUbyte.html",
    "title": "Overloads for - atomicSetUbyte | Marmos Demo",
    "keywords": "Overloads for - atomicSetUbyte Module std.parallelism atomicSetUbyte(stuff, newVal) void atomicSetUbyte( T stuff, T newVal )"
  },
  "phobos/std/parallelism/Functions/cacheLineSizeImpl.html": {
    "href": "phobos/std/parallelism/Functions/cacheLineSizeImpl.html",
    "title": "Overloads for - cacheLineSizeImpl | Marmos Demo",
    "keywords": "Overloads for - cacheLineSizeImpl Module std.parallelism cacheLineSizeImpl() size_t cacheLineSizeImpl( )"
  },
  "phobos/std/parallelism/Functions/defaultPoolThreads.html": {
    "href": "phobos/std/parallelism/Functions/defaultPoolThreads.html",
    "title": "Overloads for - defaultPoolThreads | Marmos Demo",
    "keywords": "Overloads for - defaultPoolThreads Module std.parallelism defaultPoolThreads() uint defaultPoolThreads( ) These properties get and set the number of worker threads in the TaskPool instance returned by taskPool . The default value is totalCPUs - 1. Calling the setter after the first call to taskPool does not changes number of worker threads in the instance returned by taskPool . defaultPoolThreads(newVal) void defaultPoolThreads( uint newVal ) Ditto"
  },
  "phobos/std/parallelism/Functions/doSizeZeroCase.html": {
    "href": "phobos/std/parallelism/Functions/doSizeZeroCase.html",
    "title": "Overloads for - doSizeZeroCase | Marmos Demo",
    "keywords": "Overloads for - doSizeZeroCase Module std.parallelism doSizeZeroCase(p, dg) int doSizeZeroCase( ParallelForeach!(R) p, Delegate dg )"
  },
  "phobos/std/parallelism/Functions/foreachErr.html": {
    "href": "phobos/std/parallelism/Functions/foreachErr.html",
    "title": "Overloads for - foreachErr | Marmos Demo",
    "keywords": "Overloads for - foreachErr Module std.parallelism foreachErr() void foreachErr( )"
  },
  "phobos/std/parallelism/Functions/parallel.html": {
    "href": "phobos/std/parallelism/Functions/parallel.html",
    "title": "Overloads for - parallel | Marmos Demo",
    "keywords": "Overloads for - parallel Module std.parallelism parallel(range) ParallelForeach!(R) parallel( R range ) Convenience functions that forwards to taskPool.parallel . The purpose of these is to make parallel foreach less verbose and more readable. Example --- // Find the logarithm of every number from // 1 to 1_000_000 in parallel, using the // default TaskPool instance. auto logs = new double[1_000_000]; foreach (i, ref elem; parallel(logs)) { elem = log(i + 1.0); } --- parallel(range, workUnitSize) ParallelForeach!(R) parallel( R range, size_t workUnitSize ) Ditto"
  },
  "phobos/std/parallelism/Functions/run.html": {
    "href": "phobos/std/parallelism/Functions/run.html",
    "title": "Overloads for - run | Marmos Demo",
    "keywords": "Overloads for - run Module std.parallelism run(fpOrDelegate, args) ReturnType!(F) run( F fpOrDelegate, Args args )"
  },
  "phobos/std/parallelism/Functions/scopedTask.html": {
    "href": "phobos/std/parallelism/Functions/scopedTask.html",
    "title": "Overloads for - scopedTask | Marmos Demo",
    "keywords": "Overloads for - scopedTask Module std.parallelism scopedTask(args) <bug: unknown> scopedTask( Args args ) auto These functions allow the creation of Task objects on the stack rather than the GC heap. The lifetime of a Task created by scopedTask cannot exceed the lifetime of the scope it was created in. `scopedTask` might be preferred over `task` 1.1. When a `Task` that calls a delegate is being created and a closure cannot be allocated due to objects on the stack that have scoped destruction. The delegate overload of scopedTask takes a scope delegate. 1.1. As a micro-optimization, to avoid the heap allocation associated with task or with the creation of a closure. Usage is otherwise identical to task . Notes: Task objects created using scopedTask will automatically call Task.yieldForce in their destructor if necessary to ensure the Task is complete before the stack frame they reside on is destroyed. scopedTask(delegateOrFp, args) <bug: unknown> scopedTask( F delegateOrFp, Args args ) auto Ditto scopedTask(fun, args) <bug: unknown> scopedTask( F fun, Args args ) auto Ditto"
  },
  "phobos/std/parallelism/Functions/submitAndExecute.html": {
    "href": "phobos/std/parallelism/Functions/submitAndExecute.html",
    "title": "Overloads for - submitAndExecute | Marmos Demo",
    "keywords": "Overloads for - submitAndExecute Module std.parallelism submitAndExecute(pool, doIt) void submitAndExecute( TaskPool pool, <bug: unknown> doIt )"
  },
  "phobos/std/parallelism/Functions/task.html": {
    "href": "phobos/std/parallelism/Functions/task.html",
    "title": "Overloads for - task | Marmos Demo",
    "keywords": "Overloads for - task Module std.parallelism task(args) <bug: unknown> task( Args args ) auto Creates a Task on the GC heap that calls an alias. This may be executed via Task.executeInNewThread or by submitting to a $(REF TaskPool, std,parallelism). A globally accessible instance of TaskPool is provided by $(REF taskPool, std,parallelism). Returns: A pointer to the Task . Example --- // Read two files into memory at the same time. import std.file; void main() { // Create and execute a Task for reading // foo.txt. auto file1Task = task!read(\"foo.txt\"); file1Task.executeInNewThread(); // Read bar.txt in parallel. auto file2Data = read(\"bar.txt\"); // Get the results of reading foo.txt. auto file1Data = file1Task.yieldForce; } --- --- // Sorts an array using a parallel quick sort algorithm. // The first partition is done serially. Both recursion // branches are then executed in parallel. // // Timings for sorting an array of 1,000,000 doubles on // an Athlon 64 X2 dual core machine: // // This implementation: 176 milliseconds. // Equivalent serial implementation: 280 milliseconds void parallelSort(T)(T[] data) { // Sort small subarrays serially. if (data.length < 100) { std.algorithm.sort(data); return; } // Partition the array. swap(data[$ / 2], data[$ - 1]); auto pivot = data[$ - 1]; bool lessThanPivot(T elem) { return elem < pivot; } auto greaterEqual = partition!lessThanPivot(data[0..$ - 1]); swap(data[$ - greaterEqual.length - 1], data[$ - 1]); auto less = data[0..$ - greaterEqual.length - 1]; greaterEqual = data[$ - greaterEqual.length..$]; // Execute both recursion branches in parallel. auto recurseTask = task!parallelSort(greaterEqual); taskPool.put(recurseTask); parallelSort(less); recurseTask.yieldForce; } --- task(delegateOrFp, args) <bug: unknown> task( F delegateOrFp, Args args ) auto Creates a Task on the GC heap that calls a function pointer, delegate, or class/struct with overloaded opCall. Example --- // Read two files in at the same time again, // but this time use a function pointer instead // of an alias to represent std.file.read. import std.file; void main() { // Create and execute a Task for reading // foo.txt. auto file1Task = task(&read!string, \"foo.txt\", size_t.max); file1Task.executeInNewThread(); // Read bar.txt in parallel. auto file2Data = read(\"bar.txt\"); // Get the results of reading foo.txt. auto file1Data = file1Task.yieldForce; } --- Notes: This function takes a non-scope delegate, meaning it can be used with closures. If you can't allocate a closure due to objects on the stack that have scoped destruction, see scopedTask , which takes a scope delegate. task(fun, args) <bug: unknown> task( F fun, Args args ) auto Version of task usable from @safe code. Usage mechanics are identical to the non-@safe case, but safety introduces some restrictions: 1.1. `fun` must be @safe or @trusted. 1.1. `F` must not have any unshared aliasing as defined by $(REF hasUnsharedAliasing, std,traits). This means it may not be an unshared delegate or a non-shared class or struct with overloaded opCall . This also precludes accepting template alias parameters. 1.1. `Args` must not have unshared aliasing. 1.1. `fun` must not return by reference. 1.1. The return type must not have unshared aliasing unless `fun` is pure or the Task is executed via executeInNewThread instead of using a TaskPool ."
  },
  "phobos/std/parallelism/Functions/taskPool.html": {
    "href": "phobos/std/parallelism/Functions/taskPool.html",
    "title": "Overloads for - taskPool | Marmos Demo",
    "keywords": "Overloads for - taskPool Module std.parallelism taskPool() TaskPool taskPool( ) Returns a lazily initialized global instantiation of TaskPool . This function can safely be called concurrently from multiple non-worker threads. The worker threads in this pool are daemon threads, meaning that it is not necessary to call TaskPool.stop or TaskPool.finish before terminating the main thread."
  },
  "phobos/std/parallelism/Functions/totalCPUsImpl.html": {
    "href": "phobos/std/parallelism/Functions/totalCPUsImpl.html",
    "title": "Overloads for - totalCPUsImpl | Marmos Demo",
    "keywords": "Overloads for - totalCPUsImpl Module std.parallelism totalCPUsImpl() uint totalCPUsImpl( )"
  },
  "phobos/std/parallelism/Overview.html": {
    "href": "phobos/std/parallelism/Overview.html",
    "title": "Module - std.parallelism | Marmos Demo",
    "keywords": "Module - std.parallelism About std.parallelism implements high-level primitives for SMP parallelism. These include parallel foreach, parallel reduce, parallel eager map, pipelining and future/promise parallelism. std.parallelism is recommended when the same operation is to be executed in parallel on different data, or when a function is to be executed in a background thread and its result returned to a well-defined main thread. For communication between arbitrary threads, see std.concurrency . std.parallelism is based on the concept of a Task . A Task is an object that represents the fundamental unit of work in this library and may be executed in parallel with any other Task . Using Task directly allows programming with a future/promise paradigm. All other supported parallelism paradigms (parallel foreach, map, reduce, pipelining) represent an additional level of abstraction over Task . They automatically create one or more Task objects, or closely related types that are conceptually identical but not part of the public API. After creation, a Task may be executed in a new thread, or submitted to a TaskPool for execution. A TaskPool encapsulates a task queue and its worker threads. Its purpose is to efficiently map a large number of Task s onto a smaller number of threads. A task queue is a FIFO queue of Task objects that have been submitted to the TaskPool and are awaiting execution. A worker thread is a thread that is associated with exactly one task queue. It executes the Task at the front of its queue when the queue has work available, or sleeps when no work is available. Each task queue is associated with zero or more worker threads. If the result of a Task is needed before execution by a worker thread has begun, the Task can be removed from the task queue and executed immediately in the thread where the result is needed. Warning: Unless marked as @trusted or @safe , artifacts in this module allow implicit data sharing between threads and cannot guarantee that client code is free from low level data races. Source: $(PHOBOSSRC std/parallelism.d) Author: David Simcha Copyright: Copyright (c) 2009-2011, David Simcha. License: $(HTTP boost.org/LICENSE_1_0.txt, Boost License 1.0) Aliases Name Description AliasReturn cacheLineSize MapType ReduceType totalCPUs The total number of CPU cores available on the current machine, as reported by the operating system. Classes Name Description ParallelForeachError ParallelismThread TaskPool This class encapsulates a task queue and a set of worker threads. Its purpose is to efficiently map a large number of Task s onto a smaller number of threads. A task queue is a FIFO queue of Task objects that have been submitted to the TaskPool and are awaiting execution. A worker thread is a thread that executes the Task at the front of the queue when one is available and sleeps when the queue is empty. Structs Name Description AbstractTask ParallelForeach RoundRobinBuffer Task Task represents the fundamental unit of work. A Task may be executed in parallel with any other Task . Using this struct directly allows future/promise parallelism. In this paradigm, a function (or delegate or other callable) is executed in a thread other than the one it was called from. The calling thread does not block while the function is being executed. A call to workForce , yieldForce , or spinForce is used to ensure that the Task has finished executing and to obtain the return value, if any. These functions and done also act as full memory barriers, meaning that any memory writes made in the thread that executed the Task are guaranteed to be visible in the calling thread after one of these functions returns. Functions Name Description atomicCasUbyte atomicReadUbyte atomicSetUbyte cacheLineSizeImpl defaultPoolThreads These properties get and set the number of worker threads in the TaskPool instance returned by taskPool . The default value is totalCPUs - 1. Calling the setter after the first call to taskPool does not changes number of worker threads in the instance returned by taskPool . doSizeZeroCase foreachErr parallel Convenience functions that forwards to taskPool.parallel . The purpose of these is to make parallel foreach less verbose and more readable. run scopedTask These functions allow the creation of Task objects on the stack rather than the GC heap. The lifetime of a Task created by scopedTask cannot exceed the lifetime of the scope it was created in. submitAndExecute task Creates a Task on the GC heap that calls an alias. This may be executed via Task.executeInNewThread or by submitting to a $(REF TaskPool, std,parallelism). A globally accessible instance of TaskPool is provided by $(REF taskPool, std,parallelism). taskPool Returns a lazily initialized global instantiation of TaskPool . This function can safely be called concurrently from multiple non-worker threads. The worker threads in this pool are daemon threads, meaning that it is not necessary to call TaskPool.stop or TaskPool.finish before terminating the main thread. totalCPUsImpl Variables Name Description e isRoundRobin isRoundRobin isSafeTask noUnsharedAliasing parallelApplyMixinInputRange parallelApplyMixinRandomAccess poolInstance randAssignable randLen"
  },
  "phobos/std/parallelism/ParallelForeach/Functions/opApply.html": {
    "href": "phobos/std/parallelism/ParallelForeach/Functions/opApply.html",
    "title": "Overloads for - opApply | Marmos Demo",
    "keywords": "Overloads for - opApply Module std.parallelism Parent ParallelForeach opApply(dg) int opApply( NoIndexDg dg ) opApply(dg) int opApply( IndexDg dg )"
  },
  "phobos/std/parallelism/RoundRobinBuffer/Functions/empty.html": {
    "href": "phobos/std/parallelism/RoundRobinBuffer/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.parallelism Parent RoundRobinBuffer empty() bool empty( )"
  },
  "phobos/std/parallelism/RoundRobinBuffer/Functions/front.html": {
    "href": "phobos/std/parallelism/RoundRobinBuffer/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.parallelism Parent RoundRobinBuffer front() <bug: unknown> front( )"
  },
  "phobos/std/parallelism/RoundRobinBuffer/Functions/popFront.html": {
    "href": "phobos/std/parallelism/RoundRobinBuffer/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.parallelism Parent RoundRobinBuffer popFront() void popFront( )"
  },
  "phobos/std/parallelism/RoundRobinBuffer/Functions/prime.html": {
    "href": "phobos/std/parallelism/RoundRobinBuffer/Functions/prime.html",
    "title": "Overloads for - prime | Marmos Demo",
    "keywords": "Overloads for - prime Module std.parallelism Parent RoundRobinBuffer prime() void prime( )"
  },
  "phobos/std/parallelism/Structs/AbstractTask.html": {
    "href": "phobos/std/parallelism/Structs/AbstractTask.html",
    "title": "Struct - AbstractTask | Marmos Demo",
    "keywords": "Struct - AbstractTask Module std.parallelism public struct AbstractTask { // bool done( ) ; // void job( ) ; // Throwable exception; // <bug: unknown> next; // <bug: unknown> prev; // <bug: unknown> runTask; // ubyte taskStatus; } Functions Name Description done job Variables Name Description exception next prev runTask taskStatus"
  },
  "phobos/std/parallelism/Structs/ParallelForeach.html": {
    "href": "phobos/std/parallelism/Structs/ParallelForeach.html",
    "title": "Struct - ParallelForeach | Marmos Demo",
    "keywords": "Struct - ParallelForeach Module std.parallelism public struct ParallelForeach { // alias E = <todo: marmos support pending>; // alias IndexDg = <todo: marmos support pending>; // alias NoIndexDg = <todo: marmos support pending>; // int opApply( NoIndexDg dg ) ; // int opApply( IndexDg dg ) ; // TaskPool pool; // R range; // size_t workUnitSize; } Aliases Name Description E IndexDg NoIndexDg Functions Name Description opApply Variables Name Description pool range workUnitSize"
  },
  "phobos/std/parallelism/Structs/RoundRobinBuffer.html": {
    "href": "phobos/std/parallelism/Structs/RoundRobinBuffer.html",
    "title": "Struct - RoundRobinBuffer | Marmos Demo",
    "keywords": "Struct - RoundRobinBuffer Module std.parallelism public struct RoundRobinBuffer { // alias Array = <todo: marmos support pending>; // alias T = <todo: marmos support pending>; // bool empty( ) ; // <bug: unknown> front( ) ; // void popFront( ) ; // void prime( ) ; // <bug: unknown> bufs; // C2 emptyDel; // size_t index; // C1 nextDel; // bool primed; } Aliases Name Description Array T Functions Name Description empty front popFront prime Variables Name Description bufs emptyDel index nextDel primed"
  },
  "phobos/std/parallelism/Structs/Task.html": {
    "href": "phobos/std/parallelism/Structs/Task.html",
    "title": "Struct - Task | Marmos Demo",
    "keywords": "Struct - Task Module std.parallelism public struct Task { // The arguments the function was called with. Changes to `out` and `ref` arguments will be visible here. alias args = <todo: marmos support pending>; // The return type of the function called by this `Task` . This can be `void` . alias ReturnType = <todo: marmos support pending>; // <bug: unknown> basePtr( ) ; // Returns `true` if the `Task` is finished executing. bool done( ) ; // void enforcePool( ) ; // Create a new thread for executing this `Task` , execute it in the newly created thread, then terminate the thread. This can be used for future/promise parallelism. An explicit priority may be given to the `Task` . If one is provided, its value is forwarded to `core.thread.Thread.priority` . See $(REF task, std,parallelism) for usage example. void executeInNewThread( ) ; // Ditto void executeInNewThread( int priority ) ; // ReturnType fixRef( <bug: unknown> val ) ; // void impl( <bug: unknown> myTask ) static; // <bug: unknown> opAssign( <bug: unknown> rhs ) ; // If the `Task` isn't started yet, execute it in the current thread. If it's done, return its return value, if any. If it's in progress, busy spin until it's done, then return the return value. If it threw an exception, rethrow that exception. ReturnType spinForce( ) ; // If this `Task` was not started yet, execute it in the current thread. If it is finished, return its result. If it is in progress, execute any other `Task` from the `TaskPool` instance that this `Task` was submitted to until this one is finished. If it threw an exception, rethrow that exception. If no other tasks are available or this `Task` was executed using `executeInNewThread` , wait on a condition variable. ReturnType workForce( ) ; // If the `Task` isn't started yet, execute it in the current thread. If it's done, return its return value, if any. If it's in progress, wait on a condition variable. If it threw an exception, rethrow that exception. ReturnType yieldForce( ) ; // AbstractTask base; // bool isPure; // bool isScoped; // TaskPool pool; // <bug: unknown> returnVal; } About Task represents the fundamental unit of work. A Task may be executed in parallel with any other Task . Using this struct directly allows future/promise parallelism. In this paradigm, a function (or delegate or other callable) is executed in a thread other than the one it was called from. The calling thread does not block while the function is being executed. A call to workForce , yieldForce , or spinForce is used to ensure that the Task has finished executing and to obtain the return value, if any. These functions and done also act as full memory barriers, meaning that any memory writes made in the thread that executed the Task are guaranteed to be visible in the calling thread after one of these functions returns. The $(REF task, std,parallelism) and $(REF scopedTask, std,parallelism) functions can be used to create an instance of this struct. See task for usage examples. Function results are returned from yieldForce , spinForce and workForce by ref. If fun returns by ref, the reference will point to the returned reference of fun . Otherwise it will point to a field in this struct. Copying of this struct is disabled, since it would provide no useful semantics. If you want to pass this struct around, you should do so by reference or pointer. Bugs: Changes to ref and out arguments are not propagated to the call site, only to args in this struct. Aliases Name Description args The arguments the function was called with. Changes to out and ref arguments will be visible here. ReturnType The return type of the function called by this Task . This can be void . Functions Name Description basePtr done Returns true if the Task is finished executing. enforcePool executeInNewThread Create a new thread for executing this Task , execute it in the newly created thread, then terminate the thread. This can be used for future/promise parallelism. An explicit priority may be given to the Task . If one is provided, its value is forwarded to core.thread.Thread.priority . See $(REF task, std,parallelism) for usage example. fixRef impl opAssign spinForce If the Task isn't started yet, execute it in the current thread. If it's done, return its return value, if any. If it's in progress, busy spin until it's done, then return the return value. If it threw an exception, rethrow that exception. workForce If this Task was not started yet, execute it in the current thread. If it is finished, return its result. If it is in progress, execute any other Task from the TaskPool instance that this Task was submitted to until this one is finished. If it threw an exception, rethrow that exception. If no other tasks are available or this Task was executed using executeInNewThread , wait on a condition variable. yieldForce If the Task isn't started yet, execute it in the current thread. If it's done, return its return value, if any. If it's in progress, wait on a condition variable. If it threw an exception, rethrow that exception. Variables Name Description base isPure isScoped pool returnVal"
  },
  "phobos/std/parallelism/Task/Functions/basePtr.html": {
    "href": "phobos/std/parallelism/Task/Functions/basePtr.html",
    "title": "Overloads for - basePtr | Marmos Demo",
    "keywords": "Overloads for - basePtr Module std.parallelism Parent Task basePtr() <bug: unknown> basePtr( )"
  },
  "phobos/std/parallelism/Task/Functions/done.html": {
    "href": "phobos/std/parallelism/Task/Functions/done.html",
    "title": "Overloads for - done | Marmos Demo",
    "keywords": "Overloads for - done Module std.parallelism Parent Task done() bool done( ) Returns true if the Task is finished executing. Throws: Rethrows any exception thrown during the execution of the Task ."
  },
  "phobos/std/parallelism/Task/Functions/enforcePool.html": {
    "href": "phobos/std/parallelism/Task/Functions/enforcePool.html",
    "title": "Overloads for - enforcePool | Marmos Demo",
    "keywords": "Overloads for - enforcePool Module std.parallelism Parent Task enforcePool() void enforcePool( )"
  },
  "phobos/std/parallelism/Task/Functions/executeInNewThread.html": {
    "href": "phobos/std/parallelism/Task/Functions/executeInNewThread.html",
    "title": "Overloads for - executeInNewThread | Marmos Demo",
    "keywords": "Overloads for - executeInNewThread Module std.parallelism Parent Task executeInNewThread() void executeInNewThread( ) Create a new thread for executing this Task , execute it in the newly created thread, then terminate the thread. This can be used for future/promise parallelism. An explicit priority may be given to the Task . If one is provided, its value is forwarded to core.thread.Thread.priority . See $(REF task, std,parallelism) for usage example. executeInNewThread(priority) void executeInNewThread( int priority ) Ditto"
  },
  "phobos/std/parallelism/Task/Functions/fixRef.html": {
    "href": "phobos/std/parallelism/Task/Functions/fixRef.html",
    "title": "Overloads for - fixRef | Marmos Demo",
    "keywords": "Overloads for - fixRef Module std.parallelism Parent Task fixRef(val) ReturnType fixRef( <bug: unknown> val )"
  },
  "phobos/std/parallelism/Task/Functions/impl.html": {
    "href": "phobos/std/parallelism/Task/Functions/impl.html",
    "title": "Overloads for - impl | Marmos Demo",
    "keywords": "Overloads for - impl Module std.parallelism Parent Task impl(myTask) void impl( <bug: unknown> myTask ) static"
  },
  "phobos/std/parallelism/Task/Functions/opAssign.html": {
    "href": "phobos/std/parallelism/Task/Functions/opAssign.html",
    "title": "Overloads for - opAssign | Marmos Demo",
    "keywords": "Overloads for - opAssign Module std.parallelism Parent Task opAssign(rhs) <bug: unknown> opAssign( <bug: unknown> rhs )"
  },
  "phobos/std/parallelism/Task/Functions/spinForce.html": {
    "href": "phobos/std/parallelism/Task/Functions/spinForce.html",
    "title": "Overloads for - spinForce | Marmos Demo",
    "keywords": "Overloads for - spinForce Module std.parallelism Parent Task spinForce() ReturnType spinForce( ) If the Task isn't started yet, execute it in the current thread. If it's done, return its return value, if any. If it's in progress, busy spin until it's done, then return the return value. If it threw an exception, rethrow that exception. This function should be used when you expect the result of the Task to be available on a timescale shorter than that of an OS context switch."
  },
  "phobos/std/parallelism/Task/Functions/workForce.html": {
    "href": "phobos/std/parallelism/Task/Functions/workForce.html",
    "title": "Overloads for - workForce | Marmos Demo",
    "keywords": "Overloads for - workForce Module std.parallelism Parent Task workForce() ReturnType workForce( ) If this Task was not started yet, execute it in the current thread. If it is finished, return its result. If it is in progress, execute any other Task from the TaskPool instance that this Task was submitted to until this one is finished. If it threw an exception, rethrow that exception. If no other tasks are available or this Task was executed using executeInNewThread , wait on a condition variable."
  },
  "phobos/std/parallelism/Task/Functions/yieldForce.html": {
    "href": "phobos/std/parallelism/Task/Functions/yieldForce.html",
    "title": "Overloads for - yieldForce | Marmos Demo",
    "keywords": "Overloads for - yieldForce Module std.parallelism Parent Task yieldForce() ReturnType yieldForce( ) If the Task isn't started yet, execute it in the current thread. If it's done, return its return value, if any. If it's in progress, wait on a condition variable. If it threw an exception, rethrow that exception. This function should be used for expensive functions, as waiting on a condition variable introduces latency, but avoids wasted CPU cycles."
  },
  "phobos/std/parallelism/TaskPool/Functions/abstractPut.html": {
    "href": "phobos/std/parallelism/TaskPool/Functions/abstractPut.html",
    "title": "Overloads for - abstractPut | Marmos Demo",
    "keywords": "Overloads for - abstractPut Module std.parallelism Parent TaskPool abstractPut(task) void abstractPut( <bug: unknown> task )"
  },
  "phobos/std/parallelism/TaskPool/Functions/abstractPutGroupNoSync.html": {
    "href": "phobos/std/parallelism/TaskPool/Functions/abstractPutGroupNoSync.html",
    "title": "Overloads for - abstractPutGroupNoSync | Marmos Demo",
    "keywords": "Overloads for - abstractPutGroupNoSync Module std.parallelism Parent TaskPool abstractPutGroupNoSync(h, t) void abstractPutGroupNoSync( <bug: unknown> h, <bug: unknown> t )"
  },
  "phobos/std/parallelism/TaskPool/Functions/abstractPutNoSync.html": {
    "href": "phobos/std/parallelism/TaskPool/Functions/abstractPutNoSync.html",
    "title": "Overloads for - abstractPutNoSync | Marmos Demo",
    "keywords": "Overloads for - abstractPutNoSync Module std.parallelism Parent TaskPool abstractPutNoSync(task) void abstractPutNoSync( <bug: unknown> task )"
  },
  "phobos/std/parallelism/TaskPool/Functions/defaultWorkUnitSize.html": {
    "href": "phobos/std/parallelism/TaskPool/Functions/defaultWorkUnitSize.html",
    "title": "Overloads for - defaultWorkUnitSize | Marmos Demo",
    "keywords": "Overloads for - defaultWorkUnitSize Module std.parallelism Parent TaskPool defaultWorkUnitSize(rangeLen) size_t defaultWorkUnitSize( size_t rangeLen )"
  },
  "phobos/std/parallelism/TaskPool/Functions/deleteItem.html": {
    "href": "phobos/std/parallelism/TaskPool/Functions/deleteItem.html",
    "title": "Overloads for - deleteItem | Marmos Demo",
    "keywords": "Overloads for - deleteItem Module std.parallelism Parent TaskPool deleteItem(item) bool deleteItem( <bug: unknown> item )"
  },
  "phobos/std/parallelism/TaskPool/Functions/deleteItemNoSync.html": {
    "href": "phobos/std/parallelism/TaskPool/Functions/deleteItemNoSync.html",
    "title": "Overloads for - deleteItemNoSync | Marmos Demo",
    "keywords": "Overloads for - deleteItemNoSync Module std.parallelism Parent TaskPool deleteItemNoSync(item) bool deleteItemNoSync( <bug: unknown> item )"
  },
  "phobos/std/parallelism/TaskPool/Functions/doJob.html": {
    "href": "phobos/std/parallelism/TaskPool/Functions/doJob.html",
    "title": "Overloads for - doJob | Marmos Demo",
    "keywords": "Overloads for - doJob Module std.parallelism Parent TaskPool doJob(job) void doJob( <bug: unknown> job )"
  },
  "phobos/std/parallelism/TaskPool/Functions/doSingleTask.html": {
    "href": "phobos/std/parallelism/TaskPool/Functions/doSingleTask.html",
    "title": "Overloads for - doSingleTask | Marmos Demo",
    "keywords": "Overloads for - doSingleTask Module std.parallelism Parent TaskPool doSingleTask() void doSingleTask( )"
  },
  "phobos/std/parallelism/TaskPool/Functions/executeWorkLoop.html": {
    "href": "phobos/std/parallelism/TaskPool/Functions/executeWorkLoop.html",
    "title": "Overloads for - executeWorkLoop | Marmos Demo",
    "keywords": "Overloads for - executeWorkLoop Module std.parallelism Parent TaskPool executeWorkLoop() void executeWorkLoop( )"
  },
  "phobos/std/parallelism/TaskPool/Functions/finish.html": {
    "href": "phobos/std/parallelism/TaskPool/Functions/finish.html",
    "title": "Overloads for - finish | Marmos Demo",
    "keywords": "Overloads for - finish Module std.parallelism Parent TaskPool finish(blocking) void finish( bool blocking ) Signals worker threads to terminate when the queue becomes empty. If blocking argument is true, wait for all worker threads to terminate before returning. This option might be used in applications where task results are never consumed-- e.g. when TaskPool is employed as a rudimentary scheduler for tasks which communicate by means other than return values. Warning: Calling this function with $(D blocking = true) from a worker thread that is a member of the same TaskPool that finish is being called on will result in a deadlock."
  },
  "phobos/std/parallelism/TaskPool/Functions/isDaemon.html": {
    "href": "phobos/std/parallelism/TaskPool/Functions/isDaemon.html",
    "title": "Overloads for - isDaemon | Marmos Demo",
    "keywords": "Overloads for - isDaemon Module std.parallelism Parent TaskPool isDaemon() bool isDaemon( ) These properties control whether the worker threads are daemon threads. A daemon thread is automatically terminated when all non-daemon threads have terminated. A non-daemon thread will prevent a program from terminating as long as it has not terminated. If any TaskPool with non-daemon threads is active, either stop or finish must be called on it before the program can terminate. The worker treads in the TaskPool instance returned by the taskPool property are daemon by default. The worker threads of manually instantiated task pools are non-daemon by default. Note: For a size zero pool, the getter arbitrarily returns true and the setter has no effect. isDaemon(newVal) void isDaemon( bool newVal ) Ditto"
  },
  "phobos/std/parallelism/TaskPool/Functions/notify.html": {
    "href": "phobos/std/parallelism/TaskPool/Functions/notify.html",
    "title": "Overloads for - notify | Marmos Demo",
    "keywords": "Overloads for - notify Module std.parallelism Parent TaskPool notify() void notify( )"
  },
  "phobos/std/parallelism/TaskPool/Functions/notifyAll.html": {
    "href": "phobos/std/parallelism/TaskPool/Functions/notifyAll.html",
    "title": "Overloads for - notifyAll | Marmos Demo",
    "keywords": "Overloads for - notifyAll Module std.parallelism Parent TaskPool notifyAll() void notifyAll( )"
  },
  "phobos/std/parallelism/TaskPool/Functions/notifyWaiters.html": {
    "href": "phobos/std/parallelism/TaskPool/Functions/notifyWaiters.html",
    "title": "Overloads for - notifyWaiters | Marmos Demo",
    "keywords": "Overloads for - notifyWaiters Module std.parallelism Parent TaskPool notifyWaiters() void notifyWaiters( )"
  },
  "phobos/std/parallelism/TaskPool/Functions/pop.html": {
    "href": "phobos/std/parallelism/TaskPool/Functions/pop.html",
    "title": "Overloads for - pop | Marmos Demo",
    "keywords": "Overloads for - pop Module std.parallelism Parent TaskPool pop() <bug: unknown> pop( )"
  },
  "phobos/std/parallelism/TaskPool/Functions/popNoSync.html": {
    "href": "phobos/std/parallelism/TaskPool/Functions/popNoSync.html",
    "title": "Overloads for - popNoSync | Marmos Demo",
    "keywords": "Overloads for - popNoSync Module std.parallelism Parent TaskPool popNoSync() <bug: unknown> popNoSync( )"
  },
  "phobos/std/parallelism/TaskPool/Functions/priority.html": {
    "href": "phobos/std/parallelism/TaskPool/Functions/priority.html",
    "title": "Overloads for - priority | Marmos Demo",
    "keywords": "Overloads for - priority Module std.parallelism Parent TaskPool priority() int priority( ) These functions allow getting and setting the OS scheduling priority of the worker threads in this TaskPool . They forward to core.thread.Thread.priority , so a given priority value here means the same thing as an identical priority value in core.thread . Note: For a size zero pool, the getter arbitrarily returns core.thread.Thread.PRIORITY_MIN and the setter has no effect. priority(newPriority) void priority( int newPriority ) Ditto"
  },
  "phobos/std/parallelism/TaskPool/Functions/queueLock.html": {
    "href": "phobos/std/parallelism/TaskPool/Functions/queueLock.html",
    "title": "Overloads for - queueLock | Marmos Demo",
    "keywords": "Overloads for - queueLock Module std.parallelism Parent TaskPool queueLock() void queueLock( )"
  },
  "phobos/std/parallelism/TaskPool/Functions/queueUnlock.html": {
    "href": "phobos/std/parallelism/TaskPool/Functions/queueUnlock.html",
    "title": "Overloads for - queueUnlock | Marmos Demo",
    "keywords": "Overloads for - queueUnlock Module std.parallelism Parent TaskPool queueUnlock() void queueUnlock( )"
  },
  "phobos/std/parallelism/TaskPool/Functions/size.html": {
    "href": "phobos/std/parallelism/TaskPool/Functions/size.html",
    "title": "Overloads for - size | Marmos Demo",
    "keywords": "Overloads for - size Module std.parallelism Parent TaskPool size() size_t size( ) Returns the number of worker threads in the pool."
  },
  "phobos/std/parallelism/TaskPool/Functions/startWorkLoop.html": {
    "href": "phobos/std/parallelism/TaskPool/Functions/startWorkLoop.html",
    "title": "Overloads for - startWorkLoop | Marmos Demo",
    "keywords": "Overloads for - startWorkLoop Module std.parallelism Parent TaskPool startWorkLoop() void startWorkLoop( )"
  },
  "phobos/std/parallelism/TaskPool/Functions/stop.html": {
    "href": "phobos/std/parallelism/TaskPool/Functions/stop.html",
    "title": "Overloads for - stop | Marmos Demo",
    "keywords": "Overloads for - stop Module std.parallelism Parent TaskPool stop() void stop( ) Signals to all worker threads to terminate as soon as they are finished with their current Task , or immediately if they are not executing a Task . Task s that were in queue will not be executed unless a call to Task.workForce , Task.yieldForce or Task.spinForce causes them to be executed. Use only if you have waited on every Task and therefore know the queue is empty, or if you speculatively executed some tasks and no longer need the results."
  },
  "phobos/std/parallelism/TaskPool/Functions/tryDeleteExecute.html": {
    "href": "phobos/std/parallelism/TaskPool/Functions/tryDeleteExecute.html",
    "title": "Overloads for - tryDeleteExecute | Marmos Demo",
    "keywords": "Overloads for - tryDeleteExecute Module std.parallelism Parent TaskPool tryDeleteExecute(toExecute) void tryDeleteExecute( <bug: unknown> toExecute )"
  },
  "phobos/std/parallelism/TaskPool/Functions/wait.html": {
    "href": "phobos/std/parallelism/TaskPool/Functions/wait.html",
    "title": "Overloads for - wait | Marmos Demo",
    "keywords": "Overloads for - wait Module std.parallelism Parent TaskPool wait() void wait( )"
  },
  "phobos/std/parallelism/TaskPool/Functions/waitUntilCompletion.html": {
    "href": "phobos/std/parallelism/TaskPool/Functions/waitUntilCompletion.html",
    "title": "Overloads for - waitUntilCompletion | Marmos Demo",
    "keywords": "Overloads for - waitUntilCompletion Module std.parallelism Parent TaskPool waitUntilCompletion() void waitUntilCompletion( )"
  },
  "phobos/std/parallelism/TaskPool/Functions/waiterLock.html": {
    "href": "phobos/std/parallelism/TaskPool/Functions/waiterLock.html",
    "title": "Overloads for - waiterLock | Marmos Demo",
    "keywords": "Overloads for - waiterLock Module std.parallelism Parent TaskPool waiterLock() void waiterLock( )"
  },
  "phobos/std/parallelism/TaskPool/Functions/waiterUnlock.html": {
    "href": "phobos/std/parallelism/TaskPool/Functions/waiterUnlock.html",
    "title": "Overloads for - waiterUnlock | Marmos Demo",
    "keywords": "Overloads for - waiterUnlock Module std.parallelism Parent TaskPool waiterUnlock() void waiterUnlock( )"
  },
  "phobos/std/parallelism/TaskPool/Functions/workerIndex.html": {
    "href": "phobos/std/parallelism/TaskPool/Functions/workerIndex.html",
    "title": "Overloads for - workerIndex | Marmos Demo",
    "keywords": "Overloads for - workerIndex Module std.parallelism Parent TaskPool workerIndex() size_t workerIndex( ) Gets the index of the current thread relative to this TaskPool . Any thread not in this pool will receive an index of 0. The worker threads in this pool receive unique indices of 1 through this.size . This function is useful for maintaining worker-local resources. Example --- // Execute a loop that computes the greatest common // divisor of every number from 0 through 999 with // 42 in parallel. Write the results out to // a set of files, one for each thread. This allows // results to be written out without any synchronization. import std.conv, std.range, std.numeric, std.stdio; void main() { auto filesHandles = new File[taskPool.size + 1]; scope(exit) { foreach (ref handle; fileHandles) { handle.close(); } } foreach (i, ref handle; fileHandles) { handle = File(\"workerResults\" ~ to!string(i) ~ \".txt\"); } foreach (num; parallel(iota(1_000))) { auto outHandle = fileHandles[taskPool.workerIndex]; outHandle.writeln(num, '\\t', gcd(num, 42)); } } ---"
  },
  "phobos/std/path/Functions/absolutePath.html": {
    "href": "phobos/std/path/Functions/absolutePath.html",
    "title": "Overloads for - absolutePath | Marmos Demo",
    "keywords": "Overloads for - absolutePath Module std.path absolutePath(path, base) string absolutePath( string path, string base ) Transforms path into an absolute path. The following algorithm is used: $(OL $(LI If path is empty, return null .) $(LI If path is already absolute, return it.) $(LI Otherwise, append path to base and return the result. If base is not specified, the current working directory is used.) ) The function allocates memory if and only if it gets to the third stage of this algorithm. Note that absolutePath will not normalize .. segments. Use buildNormalizedPath(absolutePath(path)) if that is desired. Params: path = the relative path to transform base = the base directory of the relative path Returns: string of transformed path Throws: Exception if the specified base directory is not absolute. See_Also: $(LREF asAbsolutePath) which does not allocate"
  },
  "phobos/std/path/Functions/asAbsolutePath.html": {
    "href": "phobos/std/path/Functions/asAbsolutePath.html",
    "title": "Overloads for - asAbsolutePath | Marmos Demo",
    "keywords": "Overloads for - asAbsolutePath Module std.path asAbsolutePath(path) <bug: unknown> asAbsolutePath( R path ) auto Transforms path into an absolute path. The following algorithm is used: $(OL $(LI If path is empty, return null .) $(LI If path is already absolute, return it.) $(LI Otherwise, append path to the current working directory, which allocates memory.) ) Note that asAbsolutePath will not normalize .. segments. Use asNormalizedPath(asAbsolutePath(path)) if that is desired. Params: path = the relative path to transform Returns: the transformed path as a lazy range See_Also: $(LREF absolutePath) which returns an allocated string asAbsolutePath(path) <bug: unknown> asAbsolutePath( R path ) auto"
  },
  "phobos/std/path/Functions/asNormalizedPath.html": {
    "href": "phobos/std/path/Functions/asNormalizedPath.html",
    "title": "Overloads for - asNormalizedPath | Marmos Demo",
    "keywords": "Overloads for - asNormalizedPath Module std.path asNormalizedPath(path) <bug: unknown> asNormalizedPath( R path ) auto Normalize a path by resolving current/parent directory symbols (\".\" and \"..\" ) and removing superfluous directory separators. It will return \".\" if the path leads to the starting directory. On Windows, slashes are replaced with backslashes. Using asNormalizedPath on empty paths will always return an empty path. Does not resolve symbolic links. This function always allocates memory to hold the resulting path. Use $(LREF buildNormalizedPath) to allocate memory and return a string. Params: path = string or random access range representing the path to normalize Returns: normalized path as a forward range asNormalizedPath(path) <bug: unknown> asNormalizedPath( R path ) auto"
  },
  "phobos/std/path/Functions/asRelativePath.html": {
    "href": "phobos/std/path/Functions/asRelativePath.html",
    "title": "Overloads for - asRelativePath | Marmos Demo",
    "keywords": "Overloads for - asRelativePath Module std.path asRelativePath(path, base) <bug: unknown> asRelativePath( R1 path, R2 base ) auto Transforms path into a path relative to base . The returned path is relative to base , which is usually the current working directory. base must be an absolute path, and it is always assumed to refer to a directory. If path and base refer to the same directory, the function returns '.' . The following algorithm is used: $(OL $(LI If path is a relative directory, return it unaltered.) $(LI Find a common root between path and base . If there is no common root, return path unaltered.) $(LI Prepare a string with as many ../ or ..\\ as necessary to reach the common root from base path.) $(LI Append the remaining segments of path to the string and return.) ) In the second step, path components are compared using filenameCmp!cs , where cs is an optional template parameter determining whether the comparison is case sensitive or not. See the $(LREF filenameCmp) documentation for details. Params: path = path to transform base = absolute path cs = whether filespec comparisons are sensitive or not; defaults to CaseSensitive.osDefault Returns: a random access range of the transformed path See_Also: $(LREF relativePath) asRelativePath(path, base) <bug: unknown> asRelativePath( R1 path, R2 base ) auto"
  },
  "phobos/std/path/Functions/baseName.html": {
    "href": "phobos/std/path/Functions/baseName.html",
    "title": "Overloads for - baseName | Marmos Demo",
    "keywords": "Overloads for - baseName Module std.path baseName(path) <bug: unknown> baseName( R path ) auto Params cs <parameter not found> Whether or not suffix matching is case-sensitive. path R A path name. It can be a string, or any random-access range of characters. suffix <parameter not found> An optional suffix to be removed from the file name. path = A path name. It can be a string, or any random-access range of characters. suffix = An optional suffix to be removed from the file name. Returns: The name of the file in the path name, without any leading directory and with an optional suffix chopped off. If suffix is specified, it will be compared to path using filenameCmp!cs , where cs is an optional template parameter determining whether the comparison is case sensitive or not. See the $(LREF filenameCmp) documentation for details. Note This function $(I only) strips away the specified suffix, which doesn't necessarily have to represent an extension. To remove the extension from a path, regardless of what the extension is, use $(LREF stripExtension). To obtain the filename without leading directories and without an extension, combine the functions like this: --- assert(baseName(stripExtension(\"dir/file.ext\")) == \"file\"); --- Standards This function complies with $(LINK2 http://pubs.opengroup.org/onlinepubs/9699919799/utilities/basename.html, the POSIX requirements for the 'basename' shell utility) (with suitable adaptations for Windows paths). baseName(path) <bug: unknown> baseName( <bug: unknown> path ) auto ditto baseName(path, suffix) <bug: unknown> baseName( <bug: unknown> path, <bug: unknown> suffix ) ditto"
  },
  "phobos/std/path/Functions/buildNormalizedPath.html": {
    "href": "phobos/std/path/Functions/buildNormalizedPath.html",
    "title": "Overloads for - buildNormalizedPath | Marmos Demo",
    "keywords": "Overloads for - buildNormalizedPath Module std.path buildNormalizedPath(paths) <bug: unknown> buildNormalizedPath( <bug: unknown> paths ) Performs the same task as $(LREF buildPath), while at the same time resolving current/parent directory symbols (\".\" and \"..\" ) and removing superfluous directory separators. It will return \".\" if the path leads to the starting directory. On Windows, slashes are replaced with backslashes. Using buildNormalizedPath on null paths will always return null. Note that this function does not resolve symbolic links. This function always allocates memory to hold the resulting path. Use $(LREF asNormalizedPath) to not allocate memory. Params: paths = An array of paths to assemble. Returns: The assembled path."
  },
  "phobos/std/path/Functions/buildPath.html": {
    "href": "phobos/std/path/Functions/buildPath.html",
    "title": "Overloads for - buildPath | Marmos Demo",
    "keywords": "Overloads for - buildPath Module std.path buildPath(segments) <bug: unknown> buildPath( Range segments ) Combines one or more path segments. This function takes a set of path segments, given as an input range of string elements or as a set of string arguments, and concatenates them with each other. Directory separators are inserted between segments if necessary. If any of the path segments are absolute (as defined by $(LREF isAbsolute)), the preceding segments will be dropped. On Windows, if one of the path segments are rooted, but not absolute (e.g. $(D \\foo )), all preceding path segments down to the previous root will be dropped. (See below for an example.) This function always allocates memory to hold the resulting path. The variadic overload is guaranteed to only perform a single allocation, as is the range version if paths is a forward range. Params: segments = An $(REF_ALTTEXT input range, isInputRange, std,range,primitives) of segments to assemble the path from. Returns: The assembled path. buildPath(paths) <bug: unknown> buildPath( <bug: unknown> paths ) ditto"
  },
  "phobos/std/path/Functions/chainPath.html": {
    "href": "phobos/std/path/Functions/chainPath.html",
    "title": "Overloads for - chainPath | Marmos Demo",
    "keywords": "Overloads for - chainPath Module std.path chainPath(r1, r2, ranges) <bug: unknown> chainPath( R1 r1, R2 r2, Ranges ranges ) auto Concatenate path segments together to form one path. Params r1 R1 first segment r2 R2 second segment ranges Ranges 0 or more segments r2 = second segment ranges = 0 or more segments Returns: Lazy range which is the concatenation of r1, r2 and ranges with path separators. The resulting element type is that of r1. See_Also: $(LREF buildPath) chainPath(ranges) <bug: unknown> chainPath( Ranges ranges ) auto"
  },
  "phobos/std/path/Functions/defaultExtension.html": {
    "href": "phobos/std/path/Functions/defaultExtension.html",
    "title": "Overloads for - defaultExtension | Marmos Demo",
    "keywords": "Overloads for - defaultExtension Module std.path defaultExtension(path, ext) <bug: unknown> defaultExtension( <bug: unknown> path, <bug: unknown> ext ) Params path <bug: unknown> A path name. ext <bug: unknown> The default extension to use. Returns: The path given by path , with the extension given by ext appended if the path doesn't already have one. Including the dot in the extension is optional. This function always allocates a new string, except in the case when path is immutable and already has an extension."
  },
  "phobos/std/path/Functions/dirName.html": {
    "href": "phobos/std/path/Functions/dirName.html",
    "title": "Overloads for - dirName | Marmos Demo",
    "keywords": "Overloads for - dirName Module std.path dirName(path) <bug: unknown> dirName( R path ) auto Returns the parent directory of path . On Windows, this includes the drive letter if present. If path is a relative path and the parent directory is the current working directory, returns \".\" . Params: path = A path name. Returns: A slice of path or \".\" . Standards: This function complies with $(LINK2 http://pubs.opengroup.org/onlinepubs/9699919799/utilities/dirname.html, the POSIX requirements for the 'dirname' shell utility) (with suitable adaptations for Windows paths). dirName(path) <bug: unknown> dirName( <bug: unknown> path ) auto ditto"
  },
  "phobos/std/path/Functions/driveName.html": {
    "href": "phobos/std/path/Functions/driveName.html",
    "title": "Overloads for - driveName | Marmos Demo",
    "keywords": "Overloads for - driveName Module std.path driveName(path) <bug: unknown> driveName( R path ) auto Get the drive portion of a path. Params path R string or range of characters Returns A slice of path that is the drive, or an empty range if the drive is not specified. In the case of UNC paths, the network share is returned. Always returns an empty range on POSIX. driveName(path) <bug: unknown> driveName( <bug: unknown> path ) auto ditto"
  },
  "phobos/std/path/Functions/expandTilde.html": {
    "href": "phobos/std/path/Functions/expandTilde.html",
    "title": "Overloads for - expandTilde | Marmos Demo",
    "keywords": "Overloads for - expandTilde Module std.path expandTilde(inputPath) string expandTilde( string inputPath ) Performs tilde expansion in paths on POSIX systems. On Windows, this function does nothing. There are two ways of using tilde expansion in a path. One involves using the tilde alone or followed by a path separator. In this case, the tilde will be expanded with the value of the environment variable HOME . The second way is putting a username after the tilde (i.e. ~john/Mail ). Here, the username will be searched for in the user database (i.e. /etc/passwd on Unix systems) and will expand to whatever path is stored there. The username is considered the string after the tilde ending at the first instance of a path separator. Note that using the ~user syntax may give different values from just ~ if the environment variable doesn't match the value stored in the user database. When the environment variable version is used, the path won't be modified if the environment variable doesn't exist or it is empty. When the database version is used, the path won't be modified if the user doesn't exist in the database or there is not enough memory to perform the query. This function performs several memory allocations. Params: inputPath = The path name to expand. Returns: inputPath with the tilde expanded, or just inputPath if it could not be expanded. For Windows, expandTilde merely returns its argument inputPath . Example: ----- void processFile(string path) { // Allow calling this function with paths such as ~/foo auto fullPath = expandTilde(path); ... } -----"
  },
  "phobos/std/path/Functions/extSeparatorPos.html": {
    "href": "phobos/std/path/Functions/extSeparatorPos.html",
    "title": "Overloads for - extSeparatorPos | Marmos Demo",
    "keywords": "Overloads for - extSeparatorPos Module std.path extSeparatorPos(path) ptrdiff_t extSeparatorPos( R path )"
  },
  "phobos/std/path/Functions/extension.html": {
    "href": "phobos/std/path/Functions/extension.html",
    "title": "Overloads for - extension | Marmos Demo",
    "keywords": "Overloads for - extension Module std.path extension(path) <bug: unknown> extension( R path ) auto Params: path = A path name. Returns: The extension part of a file name, including the dot. If there is no extension, null is returned."
  },
  "phobos/std/path/Functions/filenameCharCmp.html": {
    "href": "phobos/std/path/Functions/filenameCharCmp.html",
    "title": "Overloads for - filenameCharCmp | Marmos Demo",
    "keywords": "Overloads for - filenameCharCmp Module std.path filenameCharCmp(a, b) int filenameCharCmp( dchar a, dchar b ) Compares filename characters. This function can perform a case-sensitive or a case-insensitive comparison. This is controlled through the cs template parameter which, if not specified, is given by $(LREF CaseSensitive).osDefault. On Windows, the backslash and slash characters ($(D \\ ) and $(D / )) are considered equal. Params: cs = Case-sensitivity of the comparison. a = A filename character. b = A filename character. Returns: $(D < 0) if $(D a < b), 0 if $(D a == b), and $(D > 0) if $(D a > b)."
  },
  "phobos/std/path/Functions/filenameCmp.html": {
    "href": "phobos/std/path/Functions/filenameCmp.html",
    "title": "Overloads for - filenameCmp | Marmos Demo",
    "keywords": "Overloads for - filenameCmp Module std.path filenameCmp(filename1, filename2) int filenameCmp( Range1 filename1, Range2 filename2 ) Compares file names and returns Individual characters are compared using filenameCharCmp!cs , where cs is an optional template parameter determining whether the comparison is case sensitive or not. Treatment of invalid UTF encodings is implementation defined. Params: cs = case sensitivity filename1 = range for first file name filename2 = range for second file name Returns: $(D < 0) if $(D filename1 < filename2), 0 if $(D filename1 == filename2) and $(D > 0) if $(D filename1 > filename2). See_Also: $(LREF filenameCharCmp) filenameCmp(filename1, filename2) int filenameCmp( Range1 filename1, Range2 filename2 )"
  },
  "phobos/std/path/Functions/globMatch.html": {
    "href": "phobos/std/path/Functions/globMatch.html",
    "title": "Overloads for - globMatch | Marmos Demo",
    "keywords": "Overloads for - globMatch Module std.path globMatch(path, pattern) bool globMatch( Range path, <bug: unknown> pattern ) Matches a pattern against a path. Some characters of pattern have a special meaning (they are $(I meta-characters)) and can't be escaped. These are: $(BOOKTABLE, $(TR $(TD * ) $(TD Matches 0 or more instances of any character.)) $(TR $(TD ? ) $(TD Matches exactly one instance of any character.)) $(TR $(TD [ $(I chars)]) $(TD Matches one instance of any character that appears between the brackets.)) $(TR $(TD [! $(I chars)]) $(TD Matches one instance of any character that does not appear between the brackets after the exclamation mark.)) $(TR $(TD { \\((I string1)`,`\\)(I string2),…}) $(TD Matches either of the specified strings.)) ) Individual characters are compared using filenameCharCmp!cs , where cs is an optional template parameter determining whether the comparison is case sensitive or not. See the $(LREF filenameCharCmp) documentation for details. Note that directory separators and dots don't stop a meta-character from matching further portions of the path. Params: cs = Whether the matching should be case-sensitive path = The path to be matched against pattern = The glob pattern Returns: true if pattern matches path, false otherwise. See_also: $(LINK2 http://en.wikipedia.org/wiki/Glob_%28programming%29,Wikipedia: glob (programming)) globMatch(path, pattern) bool globMatch( Range path, <bug: unknown> pattern )"
  },
  "phobos/std/path/Functions/hasDrive.html": {
    "href": "phobos/std/path/Functions/hasDrive.html",
    "title": "Overloads for - hasDrive | Marmos Demo",
    "keywords": "Overloads for - hasDrive Module std.path hasDrive(path) bool hasDrive( R path )"
  },
  "phobos/std/path/Functions/isAbsolute.html": {
    "href": "phobos/std/path/Functions/isAbsolute.html",
    "title": "Overloads for - isAbsolute | Marmos Demo",
    "keywords": "Overloads for - isAbsolute Module std.path isAbsolute(path) bool isAbsolute( R path ) Determines whether a path is absolute or not. Params: path = A path name. Returns: Whether a path is absolute or not. Example: On POSIX, an absolute path starts at the root directory. (In fact, _isAbsolute is just an alias for $(LREF isRooted).) --- version (Posix) { assert(isAbsolute(\"/\")); assert(isAbsolute(\"/foo\")); assert(!isAbsolute(\"foo\")); assert(!isAbsolute(\"../foo\")); } --- On Windows, an absolute path starts at the root directory of a specific drive. Hence, it must start with $(D d:\\ ) or $(D d:/ ), where d is the drive letter. Alternatively, it may be a network path, i.e. a path starting with a double (back)slash. --- version (Windows) { assert(isAbsolute(d:\\)); assert(isAbsolute(d:\\foo)); assert(isAbsolute(\\\\foo\\bar)); assert(!isAbsolute(\\)); assert(!isAbsolute(\\foo)); assert(!isAbsolute(\"d:foo\")); } ---"
  },
  "phobos/std/path/Functions/isDirSeparator.html": {
    "href": "phobos/std/path/Functions/isDirSeparator.html",
    "title": "Overloads for - isDirSeparator | Marmos Demo",
    "keywords": "Overloads for - isDirSeparator Module std.path isDirSeparator(c) bool isDirSeparator( dchar c ) Determines whether the given character is a directory separator. On Windows, this includes both $(D \\ ) and $(D / ). On POSIX, it's just $(D / )."
  },
  "phobos/std/path/Functions/isDriveRoot.html": {
    "href": "phobos/std/path/Functions/isDriveRoot.html",
    "title": "Overloads for - isDriveRoot | Marmos Demo",
    "keywords": "Overloads for - isDriveRoot Module std.path isDriveRoot(path) bool isDriveRoot( R path )"
  },
  "phobos/std/path/Functions/isDriveSeparator.html": {
    "href": "phobos/std/path/Functions/isDriveSeparator.html",
    "title": "Overloads for - isDriveSeparator | Marmos Demo",
    "keywords": "Overloads for - isDriveSeparator Module std.path isDriveSeparator(c) bool isDriveSeparator( dchar c )"
  },
  "phobos/std/path/Functions/isRooted.html": {
    "href": "phobos/std/path/Functions/isRooted.html",
    "title": "Overloads for - isRooted | Marmos Demo",
    "keywords": "Overloads for - isRooted Module std.path isRooted(path) bool isRooted( R path ) Determines whether a path starts at a root directory. Params: path = A path name. Returns: Whether a path starts at a root directory. On POSIX, this function returns true if and only if the path starts with a slash (/). On Windows, this function returns true if the path starts at the root directory of the current drive, of some other drive, or of a network drive."
  },
  "phobos/std/path/Functions/isSeparator.html": {
    "href": "phobos/std/path/Functions/isSeparator.html",
    "title": "Overloads for - isSeparator | Marmos Demo",
    "keywords": "Overloads for - isSeparator Module std.path isSeparator(c) bool isSeparator( dchar c )"
  },
  "phobos/std/path/Functions/isUNC.html": {
    "href": "phobos/std/path/Functions/isUNC.html",
    "title": "Overloads for - isUNC | Marmos Demo",
    "keywords": "Overloads for - isUNC Module std.path isUNC(path) bool isUNC( R path )"
  },
  "phobos/std/path/Functions/isValidFilename.html": {
    "href": "phobos/std/path/Functions/isValidFilename.html",
    "title": "Overloads for - isValidFilename | Marmos Demo",
    "keywords": "Overloads for - isValidFilename Module std.path isValidFilename(filename) bool isValidFilename( Range filename ) Checks that the given file or directory name is valid. The maximum length of filename is given by the constant core.stdc.stdio.FILENAME_MAX . (On Windows, this number is defined as the maximum number of UTF-16 code points, and the test will therefore only yield strictly correct results when filename is a string of wchar s.) On Windows, the following criteria must be satisfied ($(LINK2 http://msdn.microsoft.com/en-us/library/aa365247(v=vs.85).aspx,source)): $(UL $(LI filename must not contain any characters whose integer representation is in the range 0-31.) $(LI filename must not contain any of the following $(I reserved characters): <>:\"/\\|?* ) \\((LI `filename` may not end with a space (\\)(D ' ')) or a period ('.').) ) On POSIX, filename may not contain a forward slash ('/') or the null character ('\\0'). Params: filename = string to check Returns: true if and only if filename is not empty, not too long, and does not contain invalid characters. isValidFilename(filename) bool isValidFilename( Range filename )"
  },
  "phobos/std/path/Functions/isValidPath.html": {
    "href": "phobos/std/path/Functions/isValidPath.html",
    "title": "Overloads for - isValidPath | Marmos Demo",
    "keywords": "Overloads for - isValidPath Module std.path isValidPath(path) bool isValidPath( Range path ) Checks whether path is a valid path. Generally, this function checks that path is not empty, and that each component of the path either satisfies $(LREF isValidFilename) or is equal to \".\" or \"..\" . $(B It does $(I not) check whether the path points to an existing file or directory; use $(REF exists, std,file) for this purpose.) On Windows, some special rules apply: $(UL $(LI If the second character of path is a colon (':'), the first character is interpreted as a drive letter, and must be in the range A-Z (case insensitive).) $(LI If path is on the form $(D \\\\$(I server)\\$(I share)\\... ) (UNC path), $(LREF isValidFilename) is applied to $(I server) and $(I share) as well.) $(LI If path starts with $(D \\\\?\\ ) (long UNC path), the only requirement for the rest of the string is that it does not contain the null character.) $(LI If path starts with $(D \\\\.\\ ) (Win32 device namespace) this function returns false ; such paths are beyond the scope of this module.) ) Params: path = string or Range of characters to check Returns: true if path is a valid path. isValidPath(path) bool isValidPath( Range path )"
  },
  "phobos/std/path/Functions/lastSeparator.html": {
    "href": "phobos/std/path/Functions/lastSeparator.html",
    "title": "Overloads for - lastSeparator | Marmos Demo",
    "keywords": "Overloads for - lastSeparator Module std.path lastSeparator(path) ptrdiff_t lastSeparator( R path )"
  },
  "phobos/std/path/Functions/ltrimDirSeparators.html": {
    "href": "phobos/std/path/Functions/ltrimDirSeparators.html",
    "title": "Overloads for - ltrimDirSeparators | Marmos Demo",
    "keywords": "Overloads for - ltrimDirSeparators Module std.path ltrimDirSeparators(path) <bug: unknown> ltrimDirSeparators( R path ) auto"
  },
  "phobos/std/path/Functions/pathSplitter.html": {
    "href": "phobos/std/path/Functions/pathSplitter.html",
    "title": "Overloads for - pathSplitter | Marmos Demo",
    "keywords": "Overloads for - pathSplitter Module std.path pathSplitter(path) <bug: unknown> pathSplitter( R path ) auto Slice up a path into its elements. Params: path = string or slicable random access range Returns: bidirectional range of slices of path pathSplitter(path) <bug: unknown> pathSplitter( R path ) auto"
  },
  "phobos/std/path/Functions/relativePath.html": {
    "href": "phobos/std/path/Functions/relativePath.html",
    "title": "Overloads for - relativePath | Marmos Demo",
    "keywords": "Overloads for - relativePath Module std.path relativePath(path, base) string relativePath( string path, string base ) Translates path into a relative path. The returned path is relative to base , which is by default taken to be the current working directory. If specified, base must be an absolute path, and it is always assumed to refer to a directory. If path and base refer to the same directory, the function returns $(D . ). The following algorithm is used: $(OL $(LI If path is a relative directory, return it unaltered.) $(LI Find a common root between path and base . If there is no common root, return path unaltered.) $(LI Prepare a string with as many $(D ../ ) or $(D ..\\ ) as necessary to reach the common root from base path.) $(LI Append the remaining segments of path to the string and return.) ) In the second step, path components are compared using filenameCmp!cs , where cs is an optional template parameter determining whether the comparison is case sensitive or not. See the $(LREF filenameCmp) documentation for details. This function allocates memory. Params: cs = Whether matching path name components against the base path should be case-sensitive or not. path = A path name. base = The base path to construct the relative path from. Returns: The relative path. See_Also: $(LREF asRelativePath) which does not allocate memory Throws: Exception if the specified base directory is not absolute."
  },
  "phobos/std/path/Functions/rootName.html": {
    "href": "phobos/std/path/Functions/rootName.html",
    "title": "Overloads for - rootName | Marmos Demo",
    "keywords": "Overloads for - rootName Module std.path rootName(path) <bug: unknown> rootName( R path ) auto Returns the root directory of the specified path, or null if the path is not rooted. Params: path = A path name. Returns: A slice of path . rootName(path) <bug: unknown> rootName( <bug: unknown> path ) auto ditto"
  },
  "phobos/std/path/Functions/rtrimDirSeparators.html": {
    "href": "phobos/std/path/Functions/rtrimDirSeparators.html",
    "title": "Overloads for - rtrimDirSeparators | Marmos Demo",
    "keywords": "Overloads for - rtrimDirSeparators Module std.path rtrimDirSeparators(path) <bug: unknown> rtrimDirSeparators( R path ) auto"
  },
  "phobos/std/path/Functions/setExtension.html": {
    "href": "phobos/std/path/Functions/setExtension.html",
    "title": "Overloads for - setExtension | Marmos Demo",
    "keywords": "Overloads for - setExtension Module std.path setExtension(path, ext) <bug: unknown> setExtension( <bug: unknown> path, <bug: unknown> ext ) Sets or replaces an extension. If the filename already has an extension, it is replaced. If not, the extension is simply appended to the filename. Including a leading dot in ext is optional. If the extension is empty, this function is equivalent to $(LREF stripExtension). This function normally allocates a new string (the possible exception being the case when path is immutable and doesn't already have an extension). Params: path = A path name ext = The new extension Returns: A string containing the path given by path , but where the extension has been set to ext . See_Also: $(LREF withExtension) which does not allocate and returns a lazy range. setExtension(path, ext) <bug: unknown> setExtension( <bug: unknown> path, <bug: unknown> ext ) ditto"
  },
  "phobos/std/path/Functions/stripDrive.html": {
    "href": "phobos/std/path/Functions/stripDrive.html",
    "title": "Overloads for - stripDrive | Marmos Demo",
    "keywords": "Overloads for - stripDrive Module std.path stripDrive(path) <bug: unknown> stripDrive( R path ) auto Strips the drive from a Windows path. On POSIX, the path is returned unaltered. Params: path = A pathname Returns: A slice of path without the drive component. stripDrive(path) <bug: unknown> stripDrive( <bug: unknown> path ) auto ditto"
  },
  "phobos/std/path/Functions/stripExtension.html": {
    "href": "phobos/std/path/Functions/stripExtension.html",
    "title": "Overloads for - stripExtension | Marmos Demo",
    "keywords": "Overloads for - stripExtension Module std.path stripExtension(path) <bug: unknown> stripExtension( R path ) auto Remove extension from path. Params: path = string or range to be sliced Returns: slice of path with the extension (if any) stripped off stripExtension(path) <bug: unknown> stripExtension( <bug: unknown> path ) auto Ditto"
  },
  "phobos/std/path/Functions/testAliasedString.html": {
    "href": "phobos/std/path/Functions/testAliasedString.html",
    "title": "Overloads for - testAliasedString | Marmos Demo",
    "keywords": "Overloads for - testAliasedString Module std.path testAliasedString(s, args) bool testAliasedString( string s, Args args )"
  },
  "phobos/std/path/Functions/trimDirSeparators.html": {
    "href": "phobos/std/path/Functions/trimDirSeparators.html",
    "title": "Overloads for - trimDirSeparators | Marmos Demo",
    "keywords": "Overloads for - trimDirSeparators Module std.path trimDirSeparators(path) <bug: unknown> trimDirSeparators( R path ) auto"
  },
  "phobos/std/path/Functions/uncRootLength.html": {
    "href": "phobos/std/path/Functions/uncRootLength.html",
    "title": "Overloads for - uncRootLength | Marmos Demo",
    "keywords": "Overloads for - uncRootLength Module std.path uncRootLength(path) ptrdiff_t uncRootLength( R path )"
  },
  "phobos/std/path/Functions/withDefaultExtension.html": {
    "href": "phobos/std/path/Functions/withDefaultExtension.html",
    "title": "Overloads for - withDefaultExtension | Marmos Demo",
    "keywords": "Overloads for - withDefaultExtension Module std.path withDefaultExtension(path, ext) <bug: unknown> withDefaultExtension( R path, <bug: unknown> ext ) auto Set the extension of path to ext if path doesn't have one. Params path R filespec as string or range ext <bug: unknown> extension, may have leading '.' ext = extension, may have leading '.' Returns: range with the result withDefaultExtension(path, ext) <bug: unknown> withDefaultExtension( <bug: unknown> path, <bug: unknown> ext ) auto Ditto"
  },
  "phobos/std/path/Functions/withExtension.html": {
    "href": "phobos/std/path/Functions/withExtension.html",
    "title": "Overloads for - withExtension | Marmos Demo",
    "keywords": "Overloads for - withExtension Module std.path withExtension(path, ext) <bug: unknown> withExtension( R path, <bug: unknown> ext ) auto Replace existing extension on filespec with new one. Params path R string or random access range representing a filespec ext <bug: unknown> the new extension ext = the new extension Returns: Range with path 's extension (if any) replaced with ext . The element encoding type of the returned range will be the same as path 's. See_Also: $(LREF setExtension) withExtension(path, ext) <bug: unknown> withExtension( <bug: unknown> path, <bug: unknown> ext ) auto Ditto"
  },
  "phobos/std/path/MockBiRange/Functions/back.html": {
    "href": "phobos/std/path/MockBiRange/Functions/back.html",
    "title": "Overloads for - back | Marmos Demo",
    "keywords": "Overloads for - back Module std.path Parent MockBiRange back() C back( )"
  },
  "phobos/std/path/MockBiRange/Functions/empty.html": {
    "href": "phobos/std/path/MockBiRange/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.path Parent MockBiRange empty() bool empty( )"
  },
  "phobos/std/path/MockBiRange/Functions/front.html": {
    "href": "phobos/std/path/MockBiRange/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.path Parent MockBiRange front() C front( )"
  },
  "phobos/std/path/MockBiRange/Functions/opDollar.html": {
    "href": "phobos/std/path/MockBiRange/Functions/opDollar.html",
    "title": "Overloads for - opDollar | Marmos Demo",
    "keywords": "Overloads for - opDollar Module std.path Parent MockBiRange opDollar() size_t opDollar( )"
  },
  "phobos/std/path/MockBiRange/Functions/popBack.html": {
    "href": "phobos/std/path/MockBiRange/Functions/popBack.html",
    "title": "Overloads for - popBack | Marmos Demo",
    "keywords": "Overloads for - popBack Module std.path Parent MockBiRange popBack() void popBack( )"
  },
  "phobos/std/path/MockBiRange/Functions/popFront.html": {
    "href": "phobos/std/path/MockBiRange/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.path Parent MockBiRange popFront() void popFront( )"
  },
  "phobos/std/path/MockBiRange/Functions/save.html": {
    "href": "phobos/std/path/MockBiRange/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.path Parent MockBiRange save() MockBiRange save( )"
  },
  "phobos/std/path/MockRange/Functions/back.html": {
    "href": "phobos/std/path/MockRange/Functions/back.html",
    "title": "Overloads for - back | Marmos Demo",
    "keywords": "Overloads for - back Module std.path Parent MockRange back() C back( )"
  },
  "phobos/std/path/MockRange/Functions/empty.html": {
    "href": "phobos/std/path/MockRange/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.path Parent MockRange empty() bool empty( )"
  },
  "phobos/std/path/MockRange/Functions/front.html": {
    "href": "phobos/std/path/MockRange/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.path Parent MockRange front() C front( )"
  },
  "phobos/std/path/MockRange/Functions/length.html": {
    "href": "phobos/std/path/MockRange/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.path Parent MockRange length() size_t length( )"
  },
  "phobos/std/path/MockRange/Functions/opIndex.html": {
    "href": "phobos/std/path/MockRange/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.path Parent MockRange opIndex(i) C opIndex( size_t i )"
  },
  "phobos/std/path/MockRange/Functions/opSlice.html": {
    "href": "phobos/std/path/MockRange/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.path Parent MockRange opSlice(lwr, upr) MockRange!(C) opSlice( size_t lwr, size_t upr )"
  },
  "phobos/std/path/MockRange/Functions/popBack.html": {
    "href": "phobos/std/path/MockRange/Functions/popBack.html",
    "title": "Overloads for - popBack | Marmos Demo",
    "keywords": "Overloads for - popBack Module std.path Parent MockRange popBack() void popBack( )"
  },
  "phobos/std/path/MockRange/Functions/popFront.html": {
    "href": "phobos/std/path/MockRange/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.path Parent MockRange popFront() void popFront( )"
  },
  "phobos/std/path/MockRange/Functions/save.html": {
    "href": "phobos/std/path/MockRange/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.path Parent MockRange save() MockRange save( )"
  },
  "phobos/std/path/Overview.html": {
    "href": "phobos/std/path/Overview.html",
    "title": "Module - std.path | Marmos Demo",
    "keywords": "Module - std.path About This module is used to manipulate path strings. All functions, with the exception of $(LREF expandTilde) (and in some cases $(LREF absolutePath) and $(LREF relativePath)), are pure string manipulation functions; they don't depend on any state outside the program, nor do they perform any actual file system actions. This has the consequence that the module does not make any distinction between a path that points to a directory and a path that points to a file, and it does not know whether or not the object pointed to by the path actually exists in the file system. To differentiate between these cases, use $(REF isDir, std,file) and $(REF exists, std,file). Note that on Windows, both the backslash (\\((D `\\` )) and the slash (\\)(D / )) are in principle valid directory separators. This module treats them both on equal footing, but in cases where a $(I new) separator is added, a backslash will be used. Furthermore, the $(LREF buildNormalizedPath) function will replace all slashes with backslashes on that platform. In general, the functions in this module assume that the input paths are well-formed. (That is, they should not contain invalid characters, they should follow the file system's path format, etc.) The result of calling a function on an ill-formed path is undefined. When there is a chance that a path or a file name is invalid (for instance, when it has been input by the user), it may sometimes be desirable to use the $(LREF isValidFilename) and $(LREF isValidPath) functions to check this. Most functions do not perform any memory allocations, and if a string is returned, it is usually a slice of an input string. If a function allocates, this is explicitly mentioned in the documentation. $(SCRIPT inhibitQuickIndex = 1;) $(DIVC quickindex, $(BOOKTABLE, $(TR $(TH Category) $(TH Functions)) $(TR $(TD Normalization) $(TD $(LREF absolutePath) $(LREF asAbsolutePath) $(LREF asNormalizedPath) $(LREF asRelativePath) $(LREF buildNormalizedPath) $(LREF buildPath) $(LREF chainPath) $(LREF expandTilde) )) $(TR $(TD Partitioning) $(TD $(LREF baseName) $(LREF dirName) $(LREF dirSeparator) $(LREF driveName) $(LREF pathSeparator) $(LREF pathSplitter) $(LREF relativePath) $(LREF rootName) $(LREF stripDrive) )) $(TR $(TD Validation) $(TD $(LREF isAbsolute) $(LREF isDirSeparator) $(LREF isRooted) $(LREF isValidFilename) $(LREF isValidPath) )) $(TR $(TD Extension) $(TD $(LREF defaultExtension) $(LREF extension) $(LREF setExtension) $(LREF stripExtension) $(LREF withDefaultExtension) $(LREF withExtension) )) $(TR $(TD Other) $(TD $(LREF filenameCharCmp) $(LREF filenameCmp) $(LREF globMatch) $(LREF CaseSensitive) )) )) Authors: Lars Tandle Kyllingstad, \\((HTTP digitalmars.com, Walter Bright), Grzegorz Adam Hankiewicz, Thomas K\\)(UUML)hne, $(HTTP erdani.org, Andrei Alexandrescu) Copyright: Copyright (c) 2000-2014, the authors. All rights reserved. License: $(HTTP boost.org/LICENSE_1_0.txt, Boost License 1.0) Source: $(PHOBOSSRC std/path.d) Aliases Name Description isSeparator Structs Name Description MockBiRange MockRange TestAliasedString Functions Name Description absolutePath Transforms path into an absolute path. asAbsolutePath Transforms path into an absolute path. asNormalizedPath Normalize a path by resolving current/parent directory symbols (\".\" and \"..\" ) and removing superfluous directory separators. It will return \".\" if the path leads to the starting directory. On Windows, slashes are replaced with backslashes. asRelativePath Transforms path into a path relative to base . baseName buildNormalizedPath Performs the same task as $(LREF buildPath), while at the same time resolving current/parent directory symbols (\".\" and \"..\" ) and removing superfluous directory separators. It will return \".\" if the path leads to the starting directory. On Windows, slashes are replaced with backslashes. buildPath Combines one or more path segments. chainPath Concatenate path segments together to form one path. defaultExtension dirName Returns the parent directory of path . On Windows, this includes the drive letter if present. If path is a relative path and the parent directory is the current working directory, returns \".\" . driveName Get the drive portion of a path. expandTilde Performs tilde expansion in paths on POSIX systems. On Windows, this function does nothing. extension Params: path = A path name. Returns: The extension part of a file name, including the dot. extSeparatorPos filenameCharCmp Compares filename characters. filenameCmp Compares file names and returns globMatch Matches a pattern against a path. hasDrive isAbsolute Determines whether a path is absolute or not. isDirSeparator Determines whether the given character is a directory separator. isDriveRoot isDriveSeparator isRooted Determines whether a path starts at a root directory. isSeparator isUNC isValidFilename Checks that the given file or directory name is valid. isValidPath Checks whether path is a valid path. lastSeparator ltrimDirSeparators pathSplitter Slice up a path into its elements. relativePath Translates path into a relative path. rootName Returns the root directory of the specified path, or null if the path is not rooted. rtrimDirSeparators setExtension Sets or replaces an extension. stripDrive Strips the drive from a Windows path. On POSIX, the path is returned unaltered. stripExtension Remove extension from path. testAliasedString trimDirSeparators uncRootLength withDefaultExtension Set the extension of path to ext if path doesn't have one. withExtension Replace existing extension on filespec with new one. Variables Name Description dirSeparator String used to separate directory names in a path. Under POSIX this is a slash, under Windows a backslash. osDefaultCaseSensitivity pathSeparator Path separator string. A colon under POSIX, a semicolon under Windows."
  },
  "phobos/std/path/Structs/MockBiRange.html": {
    "href": "phobos/std/path/Structs/MockBiRange.html",
    "title": "Struct - MockBiRange | Marmos Demo",
    "keywords": "Struct - MockBiRange Module std.path public struct MockBiRange { // C back( ) ; // bool empty( ) ; // C front( ) ; // size_t opDollar( ) ; // void popBack( ) ; // void popFront( ) ; // MockBiRange save( ) ; // <bug: unknown> array; } Functions Name Description back empty front opDollar popBack popFront save Variables Name Description array"
  },
  "phobos/std/path/Structs/MockRange.html": {
    "href": "phobos/std/path/Structs/MockRange.html",
    "title": "Struct - MockRange | Marmos Demo",
    "keywords": "Struct - MockRange Module std.path public struct MockRange { // alias opDollar = <todo: marmos support pending>; // C back( ) ; // bool empty( ) ; // C front( ) ; // size_t length( ) ; // C opIndex( size_t i ) ; // MockRange!(C) opSlice( size_t lwr, size_t upr ) ; // void popBack( ) ; // void popFront( ) ; // MockRange save( ) ; // <bug: unknown> array; } Aliases Name Description opDollar Functions Name Description back empty front length opIndex opSlice popBack popFront save Variables Name Description array"
  },
  "phobos/std/path/Structs/TestAliasedString.html": {
    "href": "phobos/std/path/Structs/TestAliasedString.html",
    "title": "Struct - TestAliasedString | Marmos Demo",
    "keywords": "Struct - TestAliasedString Module std.path public struct TestAliasedString { // string get( ) ; } Functions Name Description get"
  },
  "phobos/std/path/TestAliasedString/Functions/get.html": {
    "href": "phobos/std/path/TestAliasedString/Functions/get.html",
    "title": "Overloads for - get | Marmos Demo",
    "keywords": "Overloads for - get Module std.path Parent TestAliasedString get() string get( )"
  },
  "phobos/std/process/Classes/environment.html": {
    "href": "phobos/std/process/Classes/environment.html",
    "title": "Class - environment | Marmos Demo",
    "keywords": "Class - environment Module std.process public class environment { // alias OSChar = <todo: marmos support pending>; // Retrieves the value of the environment variable with the given `name` , or a default value if the variable doesn't exist. string get( <bug: unknown> name, string defaultValue ) ; // void getImpl( <bug: unknown> name, <bug: unknown> sink ) ; // Retrieves the value of the environment variable with the given `name` . --- auto path = environment[\"PATH\"]; --- string opIndex( <bug: unknown> name ) ; // Assigns the given `value` to the environment variable with the given `name` . If `value` is null the variable is removed from environment. <bug: unknown> opIndexAssign( <bug: unknown> value, <bug: unknown> name ) ; // Removes the environment variable with the given `name` . void remove( <bug: unknown> name ) ; // Copies all environment variables into an associative array. <bug: unknown> toAA( ) ; } About Manipulates environment variables using an associative-array-like interface. This class contains only static methods, and cannot be instantiated. See below for examples of use. Aliases Name Description OSChar Functions Name Description get Retrieves the value of the environment variable with the given name , or a default value if the variable doesn't exist. getImpl opIndex Retrieves the value of the environment variable with the given name . --- auto path = environment[\"PATH\"]; --- opIndexAssign Assigns the given value to the environment variable with the given name . If value is null the variable is removed from environment. remove Removes the environment variable with the given name . toAA Copies all environment variables into an associative array."
  },
  "phobos/std/process/Functions/getEnvironPtr.html": {
    "href": "phobos/std/process/Functions/getEnvironPtr.html",
    "title": "Overloads for - getEnvironPtr | Marmos Demo",
    "keywords": "Overloads for - getEnvironPtr Module std.process getEnvironPtr() <bug: unknown> getEnvironPtr( )"
  },
  "phobos/std/process/Functions/thisProcessID.html": {
    "href": "phobos/std/process/Functions/thisProcessID.html",
    "title": "Overloads for - thisProcessID | Marmos Demo",
    "keywords": "Overloads for - thisProcessID Module std.process thisProcessID() int thisProcessID( ) Returns the process ID of the current process, which is guaranteed to be unique on the system. Example --- writefln(\"Current process ID: %d\", thisProcessID); ---"
  },
  "phobos/std/process/Functions/thisThreadID.html": {
    "href": "phobos/std/process/Functions/thisThreadID.html",
    "title": "Overloads for - thisThreadID | Marmos Demo",
    "keywords": "Overloads for - thisThreadID Module std.process thisThreadID() ThreadID thisThreadID( ) Returns the process ID of the current thread, which is guaranteed to be unique within the current process. Returns A $(REF ThreadID, core,thread) value for the calling thread. Example --- writefln(\"Current thread ID: %s\", thisThreadID); ---"
  },
  "phobos/std/process/Functions/uniqueTempPath.html": {
    "href": "phobos/std/process/Functions/uniqueTempPath.html",
    "title": "Overloads for - uniqueTempPath | Marmos Demo",
    "keywords": "Overloads for - uniqueTempPath Module std.process uniqueTempPath() string uniqueTempPath( )"
  },
  "phobos/std/process/Overview.html": {
    "href": "phobos/std/process/Overview.html",
    "title": "Module - std.process | Marmos Demo",
    "keywords": "Module - std.process About Functions for starting and interacting with other processes, and for working with the current process' execution environment. Process_handling $(UL $(LI $(LREF spawnProcess) spawns a new process, optionally assigning it an arbitrary set of standard input, output, and error streams. The function returns immediately, leaving the child process to execute in parallel with its parent. All other functions in this module that spawn processes are built around spawnProcess .) $(LI $(LREF wait) makes the parent process wait for a child process to terminate. In general one should always do this, to avoid child processes becoming \"zombies\" when the parent process exits. Scope guards are perfect for this – see the $(LREF spawnProcess) documentation for examples. $(LREF tryWait) is similar to wait , but does not block if the process has not yet terminated.) $(LI $(LREF pipeProcess) also spawns a child process which runs in parallel with its parent. However, instead of taking arbitrary streams, it automatically creates a set of pipes that allow the parent to communicate with the child through the child's standard input, output, and/or error streams. This function corresponds roughly to C's popen function.) $(LI $(LREF execute) starts a new process and waits for it to complete before returning. Additionally, it captures the process' standard output and error streams and returns the output of these as a string.) $(LI $(LREF spawnShell), $(LREF pipeShell) and $(LREF executeShell) work like spawnProcess , pipeProcess and execute , respectively, except that they take a single command string and run it through the current user's default command interpreter. executeShell corresponds roughly to C's system function.) $(LI $(LREF kill) attempts to terminate a running process.) ) The following table compactly summarises the different process creation functions and how they relate to each other: $(BOOKTABLE, $(TR $(TH ) $(TH Runs program directly) $(TH Runs shell command)) $(TR $(TD Low-level process creation) $(TD $(LREF spawnProcess)) $(TD $(LREF spawnShell))) $(TR $(TD Automatic input/output redirection using pipes) $(TD $(LREF pipeProcess)) $(TD $(LREF pipeShell))) $(TR $(TD Execute and wait for completion, collect output) $(TD $(LREF execute)) $(TD $(LREF executeShell))) ) Other_functionality $(UL $(LI $(LREF pipe) is used to create unidirectional pipes.) $(LI $(LREF environment) is an interface through which the current process' environment variables can be read and manipulated.) $(LI $(LREF escapeShellCommand) and $(LREF escapeShellFileName) are useful for constructing shell command lines in a portable way.) ) Authors $(LINK2 https://github.com/kyllingstad, Lars Tandle Kyllingstad), $(LINK2 https://github.com/schveiguy, Steven Schveighoffer), $(HTTP thecybershadow.net, Vladimir Panteleev) Copyright: Copyright (c) 2013, the authors. All rights reserved. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Source: \\((PHOBOSSRC std/process.d) Macros: OBJECTREF=\\)(REF1 $0, object) Note Most of the functionality in this module is not available on iOS, tvOS and watchOS. The only functions available on those platforms are: $(LREF environment), $(LREF thisProcessID) and $(LREF thisThreadID). Classes Name Description environment Manipulates environment variables using an associative-array-like interface. Functions Name Description getEnvironPtr thisProcessID Returns the process ID of the current process, which is guaranteed to be unique on the system. thisThreadID Returns the process ID of the current thread, which is guaranteed to be unique within the current process. uniqueTempPath"
  },
  "phobos/std/process/environment/Functions/get.html": {
    "href": "phobos/std/process/environment/Functions/get.html",
    "title": "Overloads for - get | Marmos Demo",
    "keywords": "Overloads for - get Module std.process Parent environment get(name, defaultValue) string get( <bug: unknown> name, string defaultValue ) Retrieves the value of the environment variable with the given name , or a default value if the variable doesn't exist. Unlike $(LREF environment.opIndex), this function never throws on Posix. --- auto sh = environment.get(\"SHELL\", \"/bin/sh\"); --- This function is also useful in checking for the existence of an environment variable. --- auto myVar = environment.get(\"MYVAR\"); if (myVar is null) { // Environment variable doesn't exist. // Note that we have to use 'is' for the comparison, since // myVar == null is also true if the variable exists but is // empty. } --- Params: name = name of the environment variable to retrieve defaultValue = default value to return if the environment variable doesn't exist. Returns the value of the environment variable if found, otherwise null if the environment doesn't exist. Throws $(REF UTFException, std,utf) if the variable contains invalid UTF-16 characters (Windows only)."
  },
  "phobos/std/process/environment/Functions/getImpl.html": {
    "href": "phobos/std/process/environment/Functions/getImpl.html",
    "title": "Overloads for - getImpl | Marmos Demo",
    "keywords": "Overloads for - getImpl Module std.process Parent environment getImpl(name, sink) void getImpl( <bug: unknown> name, <bug: unknown> sink )"
  },
  "phobos/std/process/environment/Functions/opIndex.html": {
    "href": "phobos/std/process/environment/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.process Parent environment opIndex(name) string opIndex( <bug: unknown> name ) Retrieves the value of the environment variable with the given name . --- auto path = environment[\"PATH\"]; --- Throws $(OBJECTREF Exception) if the environment variable does not exist, or $(REF UTFException, std,utf) if the variable contains invalid UTF-16 characters (Windows only). See_also $(LREF environment.get), which doesn't throw on failure."
  },
  "phobos/std/process/environment/Functions/opIndexAssign.html": {
    "href": "phobos/std/process/environment/Functions/opIndexAssign.html",
    "title": "Overloads for - opIndexAssign | Marmos Demo",
    "keywords": "Overloads for - opIndexAssign Module std.process Parent environment opIndexAssign(value, name) <bug: unknown> opIndexAssign( <bug: unknown> value, <bug: unknown> name ) Assigns the given value to the environment variable with the given name . If value is null the variable is removed from environment. If the variable does not exist, it will be created. If it already exists, it will be overwritten. --- environment[\"foo\"] = \"bar\"; --- Throws $(OBJECTREF Exception) if the environment variable could not be added (e.g. if the name is invalid). Note On some platforms, modifying environment variables may not be allowed in multi-threaded programs. See e.g. $(LINK2 https://www.gnu.org/software/libc/manual/html_node/Environment-Access.html#Environment-Access, glibc)."
  },
  "phobos/std/process/environment/Functions/remove.html": {
    "href": "phobos/std/process/environment/Functions/remove.html",
    "title": "Overloads for - remove | Marmos Demo",
    "keywords": "Overloads for - remove Module std.process Parent environment remove(name) void remove( <bug: unknown> name ) Removes the environment variable with the given name . If the variable isn't in the environment, this function returns successfully without doing anything. Note On some platforms, modifying environment variables may not be allowed in multi-threaded programs. See e.g. $(LINK2 https://www.gnu.org/software/libc/manual/html_node/Environment-Access.html#Environment-Access, glibc)."
  },
  "phobos/std/process/environment/Functions/toAA.html": {
    "href": "phobos/std/process/environment/Functions/toAA.html",
    "title": "Overloads for - toAA | Marmos Demo",
    "keywords": "Overloads for - toAA Module std.process Parent environment toAA() <bug: unknown> toAA( ) Copies all environment variables into an associative array. Windows_specific While Windows environment variable names are case insensitive, D's built-in associative arrays are not. This function will store all variable names in uppercase (e.g. PATH ). Throws $(OBJECTREF Exception) if the environment variables could not be retrieved (Windows only)."
  },
  "phobos/std/random/Functions/arc4random.html": {
    "href": "phobos/std/random/Functions/arc4random.html",
    "title": "Overloads for - arc4random | Marmos Demo",
    "keywords": "Overloads for - arc4random Module std.random arc4random() uint arc4random( )"
  },
  "phobos/std/random/Functions/arc4random_buf.html": {
    "href": "phobos/std/random/Functions/arc4random_buf.html",
    "title": "Overloads for - arc4random_buf | Marmos Demo",
    "keywords": "Overloads for - arc4random_buf Module std.random arc4random_buf(buf, nbytes) void arc4random_buf( <bug: unknown> buf, size_t nbytes )"
  },
  "phobos/std/random/Functions/choice.html": {
    "href": "phobos/std/random/Functions/choice.html",
    "title": "Overloads for - choice | Marmos Demo",
    "keywords": "Overloads for - choice Module std.random choice(range, urng) <bug: unknown> choice( Range range, RandomGen urng ) auto Returns a random, uniformly chosen, element e from the supplied $(D Range range). If no random number generator is passed, the default rndGen is used. Params range Range a random access range that has the length property defined urng RandomGen (optional) random number generator to use; if not specified, defaults to rndGen Returns A single random element drawn from the range . If it can, it will return a ref to the $(D range element), otherwise it will return a copy. choice(range) <bug: unknown> choice( Range range ) auto ditto choice(range, urng) <bug: unknown> choice( Range range, RandomGen urng ) auto ditto choice(range) <bug: unknown> choice( Range range ) auto ditto"
  },
  "phobos/std/random/Functions/dice.html": {
    "href": "phobos/std/random/Functions/dice.html",
    "title": "Overloads for - dice | Marmos Demo",
    "keywords": "Overloads for - dice Module std.random dice(rnd, proportions) size_t dice( Rng rnd, <bug: unknown> proportions ) Get a random index into a list of weights corresponding to each index Similar to rolling a die with relative probabilities stored in proportions . Returns the index in proportions that was chosen. Note Usually, dice are 'fair', meaning that each side has equal probability to come up, in which case 1 + uniform(0, 6) can simply be used. In future Phobos versions, this function might get renamed to something like weightedChoice to avoid confusion. Params rnd Rng (optional) random number generator to use; if not specified, defaults to rndGen proportions <bug: unknown> forward range or list of individual values whose elements correspond to the probabilities with which to choose the corresponding index value Returns Random variate drawn from the index values [0, ... proportions.length - 1], with the probability of getting an individual index value i being proportional to proportions[i] . dice(rnd, proportions) size_t dice( R rnd, Range proportions ) Ditto dice(proportions) size_t dice( Range proportions ) Ditto dice(proportions) size_t dice( <bug: unknown> proportions ) Ditto"
  },
  "phobos/std/random/Functions/diceImpl.html": {
    "href": "phobos/std/random/Functions/diceImpl.html",
    "title": "Overloads for - diceImpl | Marmos Demo",
    "keywords": "Overloads for - diceImpl Module std.random diceImpl(rng, proportions) size_t diceImpl( Rng rng, Range proportions )"
  },
  "phobos/std/random/Functions/initMTEngine.html": {
    "href": "phobos/std/random/Functions/initMTEngine.html",
    "title": "Overloads for - initMTEngine | Marmos Demo",
    "keywords": "Overloads for - initMTEngine Module std.random initMTEngine(mt) void initMTEngine( MTEngine mt )"
  },
  "phobos/std/random/Functions/partialShuffle.html": {
    "href": "phobos/std/random/Functions/partialShuffle.html",
    "title": "Overloads for - partialShuffle | Marmos Demo",
    "keywords": "Overloads for - partialShuffle Module std.random partialShuffle(r, n, gen) Range partialShuffle( Range r, size_t n, RandomGen gen ) Partially shuffles the elements of r such that upon returning $(D r[0 .. n]) is a random subset of r and is randomly ordered. $(D r[n .. r.length]) will contain the elements not in $(D r[0 .. n]). These will be in an undefined order, but will not be random in the sense that their order after partialShuffle returns will not be independent of their order before partialShuffle was called. r must be a random-access range with length. n must be less than or equal to r.length . If no RNG is specified, rndGen will be used. Params r Range random-access range whose elements are to be shuffled n size_t number of elements of r to shuffle (counting from the beginning); must be less than r.length gen RandomGen (optional) random number generator to use; if not specified, defaults to rndGen n = number of elements of r to shuffle (counting from the beginning); must be less than r.length gen = (optional) random number generator to use; if not specified, defaults to rndGen Returns: The shuffled random-access range. partialShuffle(r, n) Range partialShuffle( Range r, size_t n ) ditto"
  },
  "phobos/std/random/Functions/randomCover.html": {
    "href": "phobos/std/random/Functions/randomCover.html",
    "title": "Overloads for - randomCover | Marmos Demo",
    "keywords": "Overloads for - randomCover Module std.random randomCover(r, rng) <bug: unknown> randomCover( Range r, UniformRNG rng ) auto Ditto randomCover(r) <bug: unknown> randomCover( Range r ) auto Ditto"
  },
  "phobos/std/random/Functions/randomSample.html": {
    "href": "phobos/std/random/Functions/randomSample.html",
    "title": "Overloads for - randomSample | Marmos Demo",
    "keywords": "Overloads for - randomSample Module std.random randomSample(r, n, total) <bug: unknown> randomSample( Range r, size_t n, size_t total ) auto Ditto randomSample(r, n) <bug: unknown> randomSample( Range r, size_t n ) auto Ditto randomSample(r, n, total, rng) <bug: unknown> randomSample( Range r, size_t n, size_t total, UniformRNG rng ) auto Ditto randomSample(r, n, rng) <bug: unknown> randomSample( Range r, size_t n, UniformRNG rng ) auto Ditto"
  },
  "phobos/std/random/Functions/randomShuffle.html": {
    "href": "phobos/std/random/Functions/randomShuffle.html",
    "title": "Overloads for - randomShuffle | Marmos Demo",
    "keywords": "Overloads for - randomShuffle Module std.random randomShuffle(r, gen) Range randomShuffle( Range r, RandomGen gen ) Shuffles elements of r using gen as a shuffler. r must be a random-access range with length. If no RNG is specified, rndGen will be used. Params r Range random-access range whose elements are to be shuffled gen RandomGen (optional) random number generator to use; if not specified, defaults to rndGen gen = (optional) random number generator to use; if not specified, defaults to rndGen Returns: The shuffled random-access range. randomShuffle(r) Range randomShuffle( Range r ) ditto"
  },
  "phobos/std/random/Functions/rndGen.html": {
    "href": "phobos/std/random/Functions/rndGen.html",
    "title": "Overloads for - rndGen | Marmos Demo",
    "keywords": "Overloads for - rndGen Module std.random rndGen() Random rndGen( ) Global random number generator used by various functions in this module whenever no generator is specified. It is allocated per-thread and initialized to an unpredictable value for each thread. Returns A singleton instance of the default random number generator"
  },
  "phobos/std/random/Functions/uniform.html": {
    "href": "phobos/std/random/Functions/uniform.html",
    "title": "Overloads for - uniform | Marmos Demo",
    "keywords": "Overloads for - uniform Module std.random uniform(a, b) <bug: unknown> uniform( T1 a, T2 b ) auto Generates a number between a and b . The boundaries parameter controls the shape of the interval (open vs. closed on either side). Valid values for boundaries are \"[]\" , \\((D \"\\)(LPAREN)]\"), \"[$(RPAREN)\" , and \"()\" . The default interval is closed to the left and open to the right. The version that does not take urng uses the default generator rndGen . Params a T1 lower bound of the uniform distribution b T2 upper bound of the uniform distribution urng <parameter not found> (optional) random number generator to use; if not specified, defaults to rndGen Returns A single random variate drawn from the uniform distribution between a and b , whose type is the common type of these parameters uniform(a, b, urng) <bug: unknown> uniform( T1 a, T2 b, UniformRandomNumberGenerator urng ) auto ditto uniform(a, b, rng) <bug: unknown> uniform( T1 a, T2 b, RandomGen rng ) auto uniform(urng) <bug: unknown> uniform( UniformRandomNumberGenerator urng ) auto Generates a uniformly-distributed number in the range $(D [T.min, T.max]) for any integral or character type T . If no random number generator is passed, uses the default rndGen . If an enum is used as type, the random variate is drawn with equal probability from any of the possible values of the enum E . Params urng UniformRandomNumberGenerator (optional) random number generator to use; if not specified, defaults to rndGen Returns Random variate drawn from the uniform distribution across all possible values of the integral, character or enum type T . uniform() <bug: unknown> uniform( ) auto Ditto uniform(urng) <bug: unknown> uniform( UniformRandomNumberGenerator urng ) auto ditto uniform() <bug: unknown> uniform( ) auto Ditto"
  },
  "phobos/std/random/Functions/uniform01.html": {
    "href": "phobos/std/random/Functions/uniform01.html",
    "title": "Overloads for - uniform01 | Marmos Demo",
    "keywords": "Overloads for - uniform01 Module std.random uniform01() T uniform01( ) Generates a uniformly-distributed floating point number of type T in the range [0, 1$(RPAREN). If no random number generator is specified, the default RNG rndGen will be used as the source of randomness. uniform01 offers a faster generation of random variates than the equivalent \\((D uniform!\"[\\)(RPAREN)\"(0.0, 1.0)) and so may be preferred for some applications. Params rng <parameter not found> (optional) random number generator to use; if not specified, defaults to rndGen Returns Floating-point random variate of type T drawn from the uniform distribution across the half-open interval [0, 1$(RPAREN). uniform01(rng) T uniform01( UniformRNG rng ) ditto"
  },
  "phobos/std/random/Functions/uniformDistribution.html": {
    "href": "phobos/std/random/Functions/uniformDistribution.html",
    "title": "Overloads for - uniformDistribution | Marmos Demo",
    "keywords": "Overloads for - uniformDistribution Module std.random uniformDistribution(n, useThis) <bug: unknown> uniformDistribution( size_t n, <bug: unknown> useThis ) Generates a uniform probability distribution of size n , i.e., an array of size n of positive numbers of type F that sum to 1 . If useThis is provided, it is used as storage."
  },
  "phobos/std/random/Functions/unpredictableSeed.html": {
    "href": "phobos/std/random/Functions/unpredictableSeed.html",
    "title": "Overloads for - unpredictableSeed | Marmos Demo",
    "keywords": "Overloads for - unpredictableSeed Module std.random unpredictableSeed() uint unpredictableSeed( ) A \"good\" seed for initializing random number engines. Initializing with $(D_PARAM unpredictableSeed) makes engines generate different random number sequences every run. Returns A single unsigned integer seed value, different on each successive call Note: In general periodically 'reseeding' a PRNG does not improve its quality and in some cases may harm it. For an extreme example the Mersenne Twister has 2 ^^ 19937 - 1 distinct states but after seed(uint) is called it can only be in one of 2 ^^ 32 distinct states regardless of how excellent the source of entropy is."
  },
  "phobos/std/random/LinearCongruentialEngine/Functions/front.html": {
    "href": "phobos/std/random/LinearCongruentialEngine/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.random Parent LinearCongruentialEngine front() UIntType front( ) Returns the current number in the random sequence."
  },
  "phobos/std/random/LinearCongruentialEngine/Functions/gcd.html": {
    "href": "phobos/std/random/LinearCongruentialEngine/Functions/gcd.html",
    "title": "Overloads for - gcd | Marmos Demo",
    "keywords": "Overloads for - gcd Module std.random Parent LinearCongruentialEngine gcd(a, b) ulong gcd( ulong a, ulong b ) static"
  },
  "phobos/std/random/LinearCongruentialEngine/Functions/popFront.html": {
    "href": "phobos/std/random/LinearCongruentialEngine/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.random Parent LinearCongruentialEngine popFront() void popFront( ) Advances the random sequence."
  },
  "phobos/std/random/LinearCongruentialEngine/Functions/primeFactorsOnly.html": {
    "href": "phobos/std/random/LinearCongruentialEngine/Functions/primeFactorsOnly.html",
    "title": "Overloads for - primeFactorsOnly | Marmos Demo",
    "keywords": "Overloads for - primeFactorsOnly Module std.random Parent LinearCongruentialEngine primeFactorsOnly(n) ulong primeFactorsOnly( ulong n ) static"
  },
  "phobos/std/random/LinearCongruentialEngine/Functions/properLinearCongruentialParameters.html": {
    "href": "phobos/std/random/LinearCongruentialEngine/Functions/properLinearCongruentialParameters.html",
    "title": "Overloads for - properLinearCongruentialParameters | Marmos Demo",
    "keywords": "Overloads for - properLinearCongruentialParameters Module std.random Parent LinearCongruentialEngine properLinearCongruentialParameters(m, a, c) bool properLinearCongruentialParameters( ulong m, ulong a, ulong c ) static"
  },
  "phobos/std/random/LinearCongruentialEngine/Functions/save.html": {
    "href": "phobos/std/random/LinearCongruentialEngine/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.random Parent LinearCongruentialEngine save() <bug: unknown> save( )"
  },
  "phobos/std/random/LinearCongruentialEngine/Functions/seed.html": {
    "href": "phobos/std/random/LinearCongruentialEngine/Functions/seed.html",
    "title": "Overloads for - seed | Marmos Demo",
    "keywords": "Overloads for - seed Module std.random Parent LinearCongruentialEngine seed(x0) void seed( UIntType x0 ) (Re)seeds the generator."
  },
  "phobos/std/random/MersenneTwisterEngine/Functions/defaultState.html": {
    "href": "phobos/std/random/MersenneTwisterEngine/Functions/defaultState.html",
    "title": "Overloads for - defaultState | Marmos Demo",
    "keywords": "Overloads for - defaultState Module std.random Parent MersenneTwisterEngine defaultState() State defaultState( ) static Generates the default initial state for a Mersenne Twister; equivalent to the internal state obtained by calling seed(defaultSeed)"
  },
  "phobos/std/random/MersenneTwisterEngine/Functions/front.html": {
    "href": "phobos/std/random/MersenneTwisterEngine/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.random Parent MersenneTwisterEngine front() UIntType front( ) Returns the current random value."
  },
  "phobos/std/random/MersenneTwisterEngine/Functions/popFront.html": {
    "href": "phobos/std/random/MersenneTwisterEngine/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.random Parent MersenneTwisterEngine popFront() void popFront( ) Advances the generator."
  },
  "phobos/std/random/MersenneTwisterEngine/Functions/popFrontImpl.html": {
    "href": "phobos/std/random/MersenneTwisterEngine/Functions/popFrontImpl.html",
    "title": "Overloads for - popFrontImpl | Marmos Demo",
    "keywords": "Overloads for - popFrontImpl Module std.random Parent MersenneTwisterEngine popFrontImpl(mtState) void popFrontImpl( State mtState ) static"
  },
  "phobos/std/random/MersenneTwisterEngine/Functions/save.html": {
    "href": "phobos/std/random/MersenneTwisterEngine/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.random Parent MersenneTwisterEngine save() <bug: unknown> save( )"
  },
  "phobos/std/random/MersenneTwisterEngine/Functions/seedImpl.html": {
    "href": "phobos/std/random/MersenneTwisterEngine/Functions/seedImpl.html",
    "title": "Overloads for - seedImpl | Marmos Demo",
    "keywords": "Overloads for - seedImpl Module std.random Parent MersenneTwisterEngine seedImpl(value, mtState) void seedImpl( UIntType value, State mtState ) static Implementation of the seeding mechanism, which can be used with an arbitrary State instance"
  },
  "phobos/std/random/Overview.html": {
    "href": "phobos/std/random/Overview.html",
    "title": "Module - std.random | Marmos Demo",
    "keywords": "Module - std.random About Facilities for random number generation. $(SCRIPT inhibitQuickIndex = 1;) $(DIVC quickindex, $(BOOKTABLE, $(TR $(TH Category) $(TH Functions)) $(TR $(TD Uniform sampling) $(TD $(LREF uniform) $(LREF uniform01) $(LREF uniformDistribution) )) $(TR $(TD Element sampling) $(TD $(LREF choice) $(LREF dice) )) $(TR $(TD Range sampling) $(TD $(LREF randomCover) $(LREF randomSample) )) $(TR $(TD Default Random Engines) $(TD $(LREF rndGen) $(LREF Random) $(LREF unpredictableSeed) )) $(TR $(TD Linear Congruential Engines) $(TD $(LREF MinstdRand) $(LREF MinstdRand0) $(LREF LinearCongruentialEngine) )) $(TR $(TD Mersenne Twister Engines) $(TD $(LREF Mt19937) $(LREF Mt19937_64) $(LREF MersenneTwisterEngine) )) $(TR $(TD Xorshift Engines) $(TD $(LREF Xorshift) $(LREF XorshiftEngine) $(LREF Xorshift32) $(LREF Xorshift64) $(LREF Xorshift96) $(LREF Xorshift128) $(LREF Xorshift160) $(LREF Xorshift192) )) $(TR $(TD Shuffle) $(TD $(LREF partialShuffle) $(LREF randomShuffle) )) $(TR $(TD Traits) $(TD $(LREF isSeedable) $(LREF isUniformRNG) )) )) $(RED Disclaimer:) The random number generators and API provided in this module are not designed to be cryptographically secure, and are therefore unsuitable for cryptographic or security-related purposes such as generating authentication tokens or network sequence numbers. For such needs, please use a reputable cryptographic library instead. The new-style generator objects hold their own state so they are immune of threading issues. The generators feature a number of well-known and well-documented methods of generating random numbers. An overall fast and reliable means to generate random numbers is the \\((D_PARAM Mt19937) generator, which derives its name from \"\\)(LINK2 https://en.wikipedia.org/wiki/Mersenne_Twister, Mersenne Twister) with a period of 2 to the power of 19937\". In memory-constrained situations, $(LINK2 https://en.wikipedia.org/wiki/Linear_congruential_generator, linear congruential generators) such as MinstdRand0 and MinstdRand might be useful. The standard library provides an alias $(D_PARAM Random) for whichever generator it considers the most fit for the target environment. In addition to random number generators, this module features distributions, which skew a generator's output statistical distribution in various ways. So far the uniform distribution for integers and real numbers have been implemented. Source: $(PHOBOSSRC std/random.d) Macros Copyright: Copyright Andrei Alexandrescu 2008 - 2009, Joseph Rushton Wakeling 2012. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP erdani.org, Andrei Alexandrescu) Masahiro Nakagawa (Xorshift random generator) $(HTTP braingam.es, Joseph Rushton Wakeling) (Algorithm D for random sampling) Ilya Yaroshenko (Mersenne Twister implementation, adapted from $(HTTPS github.com/libmir/mir-random, mir-random)) Credits: The entire random number library architecture is derived from the excellent $(HTTP open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2461.pdf, C++0X) random number facility proposed by Jens Maurer and contributed to by researchers at the Fermi laboratory (excluding Xorshift). Aliases Name Description MinstdRand ditto MinstdRand0 Define $(D_PARAM LinearCongruentialEngine) generators with well-chosen parameters. MinstdRand0 implements Park and Miller's \"minimal standard\" $(HTTP wikipedia.org/wiki/Park%E2%80%93Miller_random_number_generator, generator) that uses 16807 for the multiplier. MinstdRand implements a variant that has slightly better spectral behavior by using the multiplier 48271. Both generators are rather simplistic. Mt19937 A MersenneTwisterEngine instantiated with the parameters of the original engine $(HTTP math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html, MT19937), generating uniformly-distributed 32-bit numbers with a period of 2 to the power of 19937. Recommended for random number generation unless memory is severely restricted, in which case a $(LREF LinearCongruentialEngine) would be the generator of choice. Mt19937_64 A MersenneTwisterEngine instantiated with the parameters of the original engine $(HTTP en.wikipedia.org/wiki/Mersenne_Twister, MT19937-64), generating uniformly-distributed 64-bit numbers with a period of 2 to the power of 19937. PseudoRngTypes Random The \"default\", \"favorite\", \"suggested\" random number generator type on the current platform. It is an alias for one of the previously-defined generators. You may want to use it if (1) you need to generate some nice random numbers, and (2) you don't care for the minutiae of the method being used. Xorshift ditto Xorshift128 ditto Xorshift128_64 Xorshift160 ditto Xorshift192 ditto Xorshift32 Define XorshiftEngine generators with well-chosen parameters. See each bits examples of \"Xorshift RNGs\". Xorshift is a Xorshift128's alias because 128bits implementation is mostly used. Xorshift64 ditto Xorshift64_64 Xorshift96 ditto Structs Name Description LinearCongruentialEngine Linear Congruential generator. When m = 0, no modulus is used. MersenneTwisterEngine The $(LINK2 https://en.wikipedia.org/wiki/Mersenne_Twister, Mersenne Twister) generator. RandomCover Covers a given range r in a random manner, i.e. goes through each element of r once and only once, just in a random order. r must be a random-access range with length. RandomCoverChoices RandomSample Selects a random subsample out of r , containing exactly n elements. The order of elements is the same as in the original range. The total length of r must be known. If total is passed in, the total number of sample is considered to be $(D total). Otherwise, RandomSample uses r.length . XorshiftEngine Xorshift generator. Implemented according to $(HTTP www.jstatsoft.org/v08/i14/paper, Xorshift RNGs) (Marsaglia, 2003) when the size is small. For larger sizes the generator uses Sebastino Vigna's optimization of using an index to avoid needing to rotate the internal array. Functions Name Description arc4random arc4random_buf choice Returns a random, uniformly chosen, element e from the supplied $(D Range range). If no random number generator is passed, the default rndGen is used. dice Get a random index into a list of weights corresponding to each index diceImpl initMTEngine partialShuffle Partially shuffles the elements of r such that upon returning $(D r[0 .. n]) is a random subset of r and is randomly ordered. $(D r[n .. r.length]) will contain the elements not in $(D r[0 .. n]). These will be in an undefined order, but will not be random in the sense that their order after partialShuffle returns will not be independent of their order before partialShuffle was called. randomCover Ditto randomSample Ditto randomShuffle Shuffles elements of r using gen as a shuffler. r must be a random-access range with length. If no RNG is specified, rndGen will be used. rndGen Global random number generator used by various functions in this module whenever no generator is specified. It is allocated per-thread and initialized to an unpredictable value for each thread. uniform Generates a number between a and b . The boundaries parameter controls the shape of the interval (open vs. closed on either side). Valid values for boundaries are \"[]\" , \\((D \"\\)(LPAREN)]\"), \"[$(RPAREN)\" , and \"()\" . The default interval is closed to the left and open to the right. The version that does not take urng uses the default generator rndGen . uniform01 Generates a uniformly-distributed floating point number of type T in the range [0, 1$(RPAREN). If no random number generator is specified, the default RNG rndGen will be used as the source of randomness. uniformDistribution Generates a uniform probability distribution of size n , i.e., an array of size n of positive numbers of type F that sum to 1 . If useThis is provided, it is used as storage. unpredictableSeed A \"good\" seed for initializing random number engines. Initializing with $(D_PARAM unpredictableSeed) makes engines generate different random number sequences every run. Variables Name Description isSeedable Test if Rng is seedable. The overload taking a SeedType also makes sure that the Rng can be seeded with SeedType. isSeedable ditto isUniformRNG Test if Rng is a random-number generator. The overload taking a ElementType also makes sure that the Rng generates values of that type. isUniformRNG ditto"
  },
  "phobos/std/random/RandomCover/Functions/empty.html": {
    "href": "phobos/std/random/RandomCover/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.random Parent RandomCover empty() bool empty( )"
  },
  "phobos/std/random/RandomCover/Functions/front.html": {
    "href": "phobos/std/random/RandomCover/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.random Parent RandomCover front() <bug: unknown> front( ) auto"
  },
  "phobos/std/random/RandomCover/Functions/length.html": {
    "href": "phobos/std/random/RandomCover/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.random Parent RandomCover length() size_t length( )"
  },
  "phobos/std/random/RandomCover/Functions/popFront.html": {
    "href": "phobos/std/random/RandomCover/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.random Parent RandomCover popFront() void popFront( )"
  },
  "phobos/std/random/RandomCover/Functions/save.html": {
    "href": "phobos/std/random/RandomCover/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.random Parent RandomCover save() <bug: unknown> save( )"
  },
  "phobos/std/random/RandomCoverChoices/Functions/length.html": {
    "href": "phobos/std/random/RandomCoverChoices/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.random Parent RandomCoverChoices length() size_t length( )"
  },
  "phobos/std/random/RandomCoverChoices/Functions/opIndex.html": {
    "href": "phobos/std/random/RandomCoverChoices/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.random Parent RandomCoverChoices opIndex(index) bool opIndex( size_t index )"
  },
  "phobos/std/random/RandomCoverChoices/Functions/opIndexAssign.html": {
    "href": "phobos/std/random/RandomCoverChoices/Functions/opIndexAssign.html",
    "title": "Overloads for - opIndexAssign | Marmos Demo",
    "keywords": "Overloads for - opIndexAssign Module std.random Parent RandomCoverChoices opIndexAssign(value, index) void opIndexAssign( bool value, size_t index )"
  },
  "phobos/std/random/RandomSample/Functions/empty.html": {
    "href": "phobos/std/random/RandomSample/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.random Parent RandomSample empty() bool empty( ) Range primitives."
  },
  "phobos/std/random/RandomSample/Functions/front.html": {
    "href": "phobos/std/random/RandomSample/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.random Parent RandomSample front() <bug: unknown> front( ) auto Ditto"
  },
  "phobos/std/random/RandomSample/Functions/index.html": {
    "href": "phobos/std/random/RandomSample/Functions/index.html",
    "title": "Overloads for - index | Marmos Demo",
    "keywords": "Overloads for - index Module std.random Parent RandomSample index() size_t index( ) Returns the index of the visited record."
  },
  "phobos/std/random/RandomSample/Functions/initialize.html": {
    "href": "phobos/std/random/RandomSample/Functions/initialize.html",
    "title": "Overloads for - initialize | Marmos Demo",
    "keywords": "Overloads for - initialize Module std.random Parent RandomSample initialize(howMany, total) void initialize( size_t howMany, size_t total )"
  },
  "phobos/std/random/RandomSample/Functions/initializeFront.html": {
    "href": "phobos/std/random/RandomSample/Functions/initializeFront.html",
    "title": "Overloads for - initializeFront | Marmos Demo",
    "keywords": "Overloads for - initializeFront Module std.random Parent RandomSample initializeFront() void initializeFront( )"
  },
  "phobos/std/random/RandomSample/Functions/length.html": {
    "href": "phobos/std/random/RandomSample/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.random Parent RandomSample length() size_t length( ) Ditto"
  },
  "phobos/std/random/RandomSample/Functions/newVprime.html": {
    "href": "phobos/std/random/RandomSample/Functions/newVprime.html",
    "title": "Overloads for - newVprime | Marmos Demo",
    "keywords": "Overloads for - newVprime Module std.random Parent RandomSample newVprime(remaining) double newVprime( size_t remaining )"
  },
  "phobos/std/random/RandomSample/Functions/popFront.html": {
    "href": "phobos/std/random/RandomSample/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.random Parent RandomSample popFront() void popFront( ) Ditto"
  },
  "phobos/std/random/RandomSample/Functions/prime.html": {
    "href": "phobos/std/random/RandomSample/Functions/prime.html",
    "title": "Overloads for - prime | Marmos Demo",
    "keywords": "Overloads for - prime Module std.random Parent RandomSample prime() void prime( )"
  },
  "phobos/std/random/RandomSample/Functions/save.html": {
    "href": "phobos/std/random/RandomSample/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.random Parent RandomSample save() <bug: unknown> save( ) Ditto"
  },
  "phobos/std/random/RandomSample/Functions/skip.html": {
    "href": "phobos/std/random/RandomSample/Functions/skip.html",
    "title": "Overloads for - skip | Marmos Demo",
    "keywords": "Overloads for - skip Module std.random Parent RandomSample skip() size_t skip( )"
  },
  "phobos/std/random/RandomSample/Functions/skipA.html": {
    "href": "phobos/std/random/RandomSample/Functions/skipA.html",
    "title": "Overloads for - skipA | Marmos Demo",
    "keywords": "Overloads for - skipA Module std.random Parent RandomSample skipA() size_t skipA( )"
  },
  "phobos/std/random/RandomSample/Functions/skipD.html": {
    "href": "phobos/std/random/RandomSample/Functions/skipD.html",
    "title": "Overloads for - skipD | Marmos Demo",
    "keywords": "Overloads for - skipD Module std.random Parent RandomSample skipD() size_t skipD( )"
  },
  "phobos/std/random/Structs/LinearCongruentialEngine.html": {
    "href": "phobos/std/random/Structs/LinearCongruentialEngine.html",
    "title": "Struct - LinearCongruentialEngine | Marmos Demo",
    "keywords": "Struct - LinearCongruentialEngine Module std.random public struct LinearCongruentialEngine { // Returns the current number in the random sequence. UIntType front( ) ; // ulong gcd( ulong a, ulong b ) static; // Advances the random sequence. void popFront( ) ; // ulong primeFactorsOnly( ulong n ) static; // bool properLinearCongruentialParameters( ulong m, ulong a, ulong c ) static; // <bug: unknown> save( ) ; // (Re)seeds the generator. void seed( UIntType x0 ) ; // Always `false` (random generators are infinite ranges). bool empty; // Does this generator have a fixed range? ($(D_PARAM true)). bool hasFixedRange; // ditto UIntType increment; // Mark this as a Rng bool isUniformRandom; // Highest generated value ($(D modulus - 1)). UIntType max; // Lowest generated value (`1` if $(D c == 0), `0` otherwise). UIntType min; // ditto UIntType modulus; // The parameters of this distribution. The random number is $(D_PARAM x = (x multipler + increment) % modulus). UIntType multiplier; } About Linear Congruential generator. When m = 0, no modulus is used. Functions Name Description front Returns the current number in the random sequence. gcd popFront Advances the random sequence. primeFactorsOnly properLinearCongruentialParameters save seed (Re)seeds the generator. Variables Name Description empty Always false (random generators are infinite ranges). hasFixedRange Does this generator have a fixed range? ($(D_PARAM true)). increment ditto isUniformRandom Mark this as a Rng max Highest generated value ($(D modulus - 1)). min Lowest generated value (1 if $(D c == 0), 0 otherwise). modulus ditto multiplier The parameters of this distribution. The random number is $(D_PARAM x = (x multipler + increment) % modulus)."
  },
  "phobos/std/random/Structs/MersenneTwisterEngine.html": {
    "href": "phobos/std/random/Structs/MersenneTwisterEngine.html",
    "title": "Struct - MersenneTwisterEngine | Marmos Demo",
    "keywords": "Struct - MersenneTwisterEngine Module std.random public struct MersenneTwisterEngine { // Generates the default initial state for a Mersenne Twister; equivalent to the internal state obtained by calling `seed(defaultSeed)` State defaultState( ) static; // Returns the current random value. UIntType front( ) ; // Advances the generator. void popFront( ) ; // void popFrontImpl( State mtState ) static; // <bug: unknown> save( ) ; // Implementation of the seeding mechanism, which can be used with an arbitrary `State` instance void seedImpl( UIntType value, State mtState ) static; // The default seed value. UIntType defaultSeed; // Always `false` . bool empty; // ditto UIntType initializationMultiplier; // Mark this as a Rng bool isUniformRandom; // UIntType lowerMask; // ditto size_t maskBits; // Largest generated value. UIntType max; // Smallest generated value (0). UIntType min; // ditto size_t shiftSize; // State state; // ditto size_t stateSize; // ditto UIntType temperingB; // ditto UIntType temperingC; // ditto UIntType temperingD; // ditto size_t temperingL; // ditto size_t temperingS; // ditto size_t temperingT; // ditto size_t temperingU; // UIntType upperMask; // Parameters for the generator. size_t wordSize; // ditto UIntType xorMask; } About The $(LINK2 https://en.wikipedia.org/wiki/Mersenne_Twister, Mersenne Twister) generator. Functions Name Description defaultState Generates the default initial state for a Mersenne Twister; equivalent to the internal state obtained by calling seed(defaultSeed) front Returns the current random value. popFront Advances the generator. popFrontImpl save seedImpl Implementation of the seeding mechanism, which can be used with an arbitrary State instance Variables Name Description defaultSeed The default seed value. empty Always false . initializationMultiplier ditto isUniformRandom Mark this as a Rng lowerMask maskBits ditto max Largest generated value. min Smallest generated value (0). shiftSize ditto state stateSize ditto temperingB ditto temperingC ditto temperingD ditto temperingL ditto temperingS ditto temperingT ditto temperingU ditto upperMask wordSize Parameters for the generator. xorMask ditto"
  },
  "phobos/std/random/Structs/RandomCover.html": {
    "href": "phobos/std/random/Structs/RandomCover.html",
    "title": "Struct - RandomCover | Marmos Demo",
    "keywords": "Struct - RandomCover Module std.random public struct RandomCover { // bool empty( ) ; // <bug: unknown> front( ) auto; // size_t length( ) ; // void popFront( ) ; // <bug: unknown> save( ) ; } About Covers a given range r in a random manner, i.e. goes through each element of r once and only once, just in a random order. r must be a random-access range with length. If no random number generator is passed to randomCover , the thread-global RNG rndGen will be used internally. Params r random-access range to cover rng (optional) random number generator to use; if not specified, defaults to rndGen Returns Range whose elements consist of the elements of r , in random order. Will be a forward range if both r and rng are forward ranges, an $(REF_ALTTEXT input range, isInputRange, std,range,primitives) otherwise. Functions Name Description empty front length popFront save"
  },
  "phobos/std/random/Structs/RandomCoverChoices.html": {
    "href": "phobos/std/random/Structs/RandomCoverChoices.html",
    "title": "Struct - RandomCoverChoices | Marmos Demo",
    "keywords": "Struct - RandomCoverChoices Module std.random public struct RandomCoverChoices { // size_t length( ) ; // bool opIndex( size_t index ) ; // void opIndexAssign( bool value, size_t index ) ; // __enumMember BITS_PER_WORD; // <bug: unknown> buffer; // immutable bool hasPackedBits; } Functions Name Description length opIndex opIndexAssign Variables Name Description BITS_PER_WORD buffer hasPackedBits"
  },
  "phobos/std/random/Structs/RandomSample.html": {
    "href": "phobos/std/random/Structs/RandomSample.html",
    "title": "Struct - RandomSample | Marmos Demo",
    "keywords": "Struct - RandomSample Module std.random public struct RandomSample { // Range primitives. bool empty( ) ; // Ditto <bug: unknown> front( ) auto; // Returns the index of the visited record. size_t index( ) ; // void initialize( size_t howMany, size_t total ) ; // void initializeFront( ) ; // Ditto size_t length( ) ; // double newVprime( size_t remaining ) ; // Ditto void popFront( ) ; // void prime( ) ; // Ditto <bug: unknown> save( ) ; // size_t skip( ) ; // size_t skipA( ) ; // size_t skipD( ) ; } About Selects a random subsample out of r , containing exactly n elements. The order of elements is the same as in the original range. The total length of r must be known. If total is passed in, the total number of sample is considered to be $(D total). Otherwise, RandomSample uses r.length . Params r range to sample from n number of elements to include in the sample; must be less than or equal to the total number of elements in r and/or the parameter total (if provided) total (semi-optional) number of elements of r from which to select the sample (counting from the beginning); must be less than or equal to the total number of elements in r itself. May be omitted if r has the .length property and the sample is to be drawn from all elements of r . rng (optional) random number generator to use; if not specified, defaults to rndGen Returns Range whose elements consist of a randomly selected subset of the elements of r , in the same order as these elements appear in r itself. Will be a forward range if both r and rng are forward ranges, an input range otherwise. RandomSample implements Jeffrey Scott Vitter's Algorithm D (see Vitter $(HTTP dx.doi.org/10.1145/358105.893, 1984), $(HTTP dx.doi.org/10.1145/23002.23003, 1987)), which selects a sample of size n in O(n) steps and requiring O(n) random variates, regardless of the size of the data being sampled. The exception to this is if traversing k elements on the input range is itself an O(k) operation (e.g. when sampling lines from an input file), in which case the sampling calculation will inevitably be of O(total). RandomSample will throw an exception if total is verifiably less than the total number of elements available in the input, or if $(D n > total). If no random number generator is passed to randomSample , the thread-global RNG rndGen will be used internally. Functions Name Description empty Range primitives. front Ditto index Returns the index of the visited record. initialize initializeFront length Ditto newVprime popFront Ditto prime save Ditto skip skipA skipD"
  },
  "phobos/std/random/Structs/XorshiftEngine.html": {
    "href": "phobos/std/random/Structs/XorshiftEngine.html",
    "title": "Struct - XorshiftEngine | Marmos Demo",
    "keywords": "Struct - XorshiftEngine Module std.random public struct XorshiftEngine { // Returns the current number in the random sequence. UIntType front( ) ; // Advances the random sequence. void popFront( ) ; // Captures a range state. <bug: unknown> save( ) ; // __enumMember a; // __enumMember b; // __enumMember c; // Always `false` (random generators are infinite ranges). __enumMember empty; // __enumMember initialIndex; // bool isLegacy192Bit; // Mark this as a Rng bool isUniformRandom; // Largest generated value. UIntType max; // Smallest generated value. UIntType min; // __enumMember N; // __enumMember useIndex; } About Xorshift generator. Implemented according to $(HTTP www.jstatsoft.org/v08/i14/paper, Xorshift RNGs) (Marsaglia, 2003) when the size is small. For larger sizes the generator uses Sebastino Vigna's optimization of using an index to avoid needing to rotate the internal array. Period is 2 ^^ nbits - 1 except for a legacy 192-bit uint version (see note below). Params UIntType Word size of this xorshift generator and the return type of opCall . nbits The number of bits of state of this generator. This must be a positive multiple of the size in bits of UIntType. If nbits is large this struct may occupy slightly more memory than this so it can use a circular counter instead of shifting the entire array. sa The direction and magnitude of the 1st shift. Positive means left, negative means right. sb The direction and magnitude of the 2nd shift. Positive means left, negative means right. sc The direction and magnitude of the 3rd shift. Positive means left, negative means right. Note For historical compatibility when nbits == 192 and UIntType is uint a legacy hybrid PRNG is used consisting of a 160-bit xorshift combined with a 32-bit counter. This combined generator has period equal to the least common multiple of 2^^160 - 1 and 2^^32 . Previous versions of XorshiftEngine did not provide any mechanism to specify the directions of the shifts, taking each shift as an unsigned magnitude. For backwards compatibility, because three shifts in the same direction cannot result in a full-period XorshiftEngine, when all three of sa , sb , sc, are positive XorshiftEnginetreats them as unsigned magnitudes and uses shift directions to match the old behavior ofXorshiftEngine` . Not every set of shifts results in a full-period xorshift generator. The template does not currently at compile-time perform a full check for maximum period but in a future version might reject parameters resulting in shorter periods. Functions Name Description front Returns the current number in the random sequence. popFront Advances the random sequence. save Captures a range state. Variables Name Description a b c empty Always false (random generators are infinite ranges). initialIndex isLegacy192Bit isUniformRandom Mark this as a Rng max Largest generated value. min Smallest generated value. N useIndex"
  },
  "phobos/std/random/XorshiftEngine/Functions/front.html": {
    "href": "phobos/std/random/XorshiftEngine/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.random Parent XorshiftEngine front() UIntType front( ) Returns the current number in the random sequence."
  },
  "phobos/std/random/XorshiftEngine/Functions/popFront.html": {
    "href": "phobos/std/random/XorshiftEngine/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.random Parent XorshiftEngine popFront() void popFront( ) Advances the random sequence."
  },
  "phobos/std/random/XorshiftEngine/Functions/save.html": {
    "href": "phobos/std/random/XorshiftEngine/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.random Parent XorshiftEngine save() <bug: unknown> save( ) Captures a range state."
  },
  "phobos/std/range/Bitwise/Functions/back.html": {
    "href": "phobos/std/range/Bitwise/Functions/back.html",
    "title": "Overloads for - back | Marmos Demo",
    "keywords": "Overloads for - back Module std.range Parent Bitwise back() bool back( )"
  },
  "phobos/std/range/Bitwise/Functions/front.html": {
    "href": "phobos/std/range/Bitwise/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.range Parent Bitwise front() bool front( )"
  },
  "phobos/std/range/Bitwise/Functions/length.html": {
    "href": "phobos/std/range/Bitwise/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.range Parent Bitwise length() size_t length( )"
  },
  "phobos/std/range/Bitwise/Functions/mask.html": {
    "href": "phobos/std/range/Bitwise/Functions/mask.html",
    "title": "Overloads for - mask | Marmos Demo",
    "keywords": "Overloads for - mask Module std.range Parent Bitwise mask(maskPos) <bug: unknown> mask( size_t maskPos ) auto"
  },
  "phobos/std/range/Bitwise/Functions/opIndex.html": {
    "href": "phobos/std/range/Bitwise/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.range Parent Bitwise opIndex(n) bool opIndex( size_t n ) Return the n th bit within the range"
  },
  "phobos/std/range/Bitwise/Functions/opIndexAssign.html": {
    "href": "phobos/std/range/Bitwise/Functions/opIndexAssign.html",
    "title": "Overloads for - opIndexAssign | Marmos Demo",
    "keywords": "Overloads for - opIndexAssign Module std.range Parent Bitwise opIndexAssign(flag, n) void opIndexAssign( bool flag, size_t n ) Assigns flag to the n th bit within the range"
  },
  "phobos/std/range/Bitwise/Functions/opSlice.html": {
    "href": "phobos/std/range/Bitwise/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.range Parent Bitwise opSlice() Bitwise!(R) opSlice( ) opSlice(start, end) Bitwise!(R) opSlice( size_t start, size_t end )"
  },
  "phobos/std/range/Bitwise/Functions/popBack.html": {
    "href": "phobos/std/range/Bitwise/Functions/popBack.html",
    "title": "Overloads for - popBack | Marmos Demo",
    "keywords": "Overloads for - popBack Module std.range Parent Bitwise popBack() void popBack( )"
  },
  "phobos/std/range/Bitwise/Functions/popFront.html": {
    "href": "phobos/std/range/Bitwise/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.range Parent Bitwise popFront() void popFront( )"
  },
  "phobos/std/range/Bitwise/Functions/save.html": {
    "href": "phobos/std/range/Bitwise/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.range Parent Bitwise save() <bug: unknown> save( )"
  },
  "phobos/std/range/ChooseResult/Functions/back.html": {
    "href": "phobos/std/range/ChooseResult/Functions/back.html",
    "title": "Overloads for - back | Marmos Demo",
    "keywords": "Overloads for - back Module std.range Parent ChooseResult back() <bug: unknown> back( ) auto"
  },
  "phobos/std/range/ChooseResult/Functions/front.html": {
    "href": "phobos/std/range/ChooseResult/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.range Parent ChooseResult front() <bug: unknown> front( ) auto"
  },
  "phobos/std/range/ChooseResult/Functions/length.html": {
    "href": "phobos/std/range/ChooseResult/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.range Parent ChooseResult length() size_t length( )"
  },
  "phobos/std/range/ChooseResult/Functions/moveAt.html": {
    "href": "phobos/std/range/ChooseResult/Functions/moveAt.html",
    "title": "Overloads for - moveAt | Marmos Demo",
    "keywords": "Overloads for - moveAt Module std.range Parent ChooseResult moveAt(index) <bug: unknown> moveAt( size_t index ) auto"
  },
  "phobos/std/range/ChooseResult/Functions/moveBack.html": {
    "href": "phobos/std/range/ChooseResult/Functions/moveBack.html",
    "title": "Overloads for - moveBack | Marmos Demo",
    "keywords": "Overloads for - moveBack Module std.range Parent ChooseResult moveBack() <bug: unknown> moveBack( ) auto"
  },
  "phobos/std/range/ChooseResult/Functions/moveFront.html": {
    "href": "phobos/std/range/ChooseResult/Functions/moveFront.html",
    "title": "Overloads for - moveFront | Marmos Demo",
    "keywords": "Overloads for - moveFront Module std.range Parent ChooseResult moveFront() <bug: unknown> moveFront( ) auto"
  },
  "phobos/std/range/ChooseResult/Functions/opAssign.html": {
    "href": "phobos/std/range/ChooseResult/Functions/opAssign.html",
    "title": "Overloads for - opAssign | Marmos Demo",
    "keywords": "Overloads for - opAssign Module std.range Parent ChooseResult opAssign(r) void opAssign( ChooseResult r )"
  },
  "phobos/std/range/ChooseResult/Functions/opIndex.html": {
    "href": "phobos/std/range/ChooseResult/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.range Parent ChooseResult opIndex(index) <bug: unknown> opIndex( size_t index ) auto"
  },
  "phobos/std/range/ChooseResult/Functions/opSlice.html": {
    "href": "phobos/std/range/ChooseResult/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.range Parent ChooseResult opSlice(begin, end) <bug: unknown> opSlice( size_t begin, size_t end ) auto"
  },
  "phobos/std/range/ChooseResult/Functions/popBack.html": {
    "href": "phobos/std/range/ChooseResult/Functions/popBack.html",
    "title": "Overloads for - popBack | Marmos Demo",
    "keywords": "Overloads for - popBack Module std.range Parent ChooseResult popBack() void popBack( )"
  },
  "phobos/std/range/ChooseResult/Functions/popFront.html": {
    "href": "phobos/std/range/ChooseResult/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.range Parent ChooseResult popFront() void popFront( )"
  },
  "phobos/std/range/ChooseResult/Functions/save.html": {
    "href": "phobos/std/range/ChooseResult/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.range Parent ChooseResult save() <bug: unknown> save( ) auto"
  },
  "phobos/std/range/Chunks/Functions/back.html": {
    "href": "phobos/std/range/Chunks/Functions/back.html",
    "title": "Overloads for - back | Marmos Demo",
    "keywords": "Overloads for - back Module std.range Parent Chunks back() <bug: unknown> back( ) auto Bidirectional range primitives. Provided only if both hasSlicing!Source and hasLength!Source are true ."
  },
  "phobos/std/range/Chunks/Functions/empty.html": {
    "href": "phobos/std/range/Chunks/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.range Parent Chunks empty() bool empty( ) Ditto"
  },
  "phobos/std/range/Chunks/Functions/front.html": {
    "href": "phobos/std/range/Chunks/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.range Parent Chunks front() <bug: unknown> front( ) auto Input range primitives. Always present."
  },
  "phobos/std/range/Chunks/Functions/length.html": {
    "href": "phobos/std/range/Chunks/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.range Parent Chunks length() size_t length( ) Length. Only if hasLength!Source is true"
  },
  "phobos/std/range/Chunks/Functions/opDollar.html": {
    "href": "phobos/std/range/Chunks/Functions/opDollar.html",
    "title": "Overloads for - opDollar | Marmos Demo",
    "keywords": "Overloads for - opDollar Module std.range Parent Chunks opDollar() DollarToken opDollar( )"
  },
  "phobos/std/range/Chunks/Functions/opIndex.html": {
    "href": "phobos/std/range/Chunks/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.range Parent Chunks opIndex(index) <bug: unknown> opIndex( size_t index ) auto Indexing and slicing operations. Provided only if hasSlicing!Source is true ."
  },
  "phobos/std/range/Chunks/Functions/opSlice.html": {
    "href": "phobos/std/range/Chunks/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.range Parent Chunks opSlice(lower, upper) <bug: unknown> opSlice( size_t lower, size_t upper ) Ditto opSlice(lower, __anonymous) <bug: unknown> opSlice( size_t lower, DollarToken __anonymous )"
  },
  "phobos/std/range/Chunks/Functions/popBack.html": {
    "href": "phobos/std/range/Chunks/Functions/popBack.html",
    "title": "Overloads for - popBack | Marmos Demo",
    "keywords": "Overloads for - popBack Module std.range Parent Chunks popBack() void popBack( ) Ditto"
  },
  "phobos/std/range/Chunks/Functions/popFront.html": {
    "href": "phobos/std/range/Chunks/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.range Parent Chunks popFront() void popFront( ) Ditto"
  },
  "phobos/std/range/Chunks/Functions/save.html": {
    "href": "phobos/std/range/Chunks/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.range Parent Chunks save() <bug: unknown> save( ) Forward range primitives. Only present if Source is a forward range."
  },
  "phobos/std/range/Cycle/Functions/front.html": {
    "href": "phobos/std/range/Cycle/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.range Parent Cycle front() ElementType front( ) ditto"
  },
  "phobos/std/range/Cycle/Functions/opIndex.html": {
    "href": "phobos/std/range/Cycle/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.range Parent Cycle opIndex(n) ElementType opIndex( size_t n ) ditto"
  },
  "phobos/std/range/Cycle/Functions/opIndexAssign.html": {
    "href": "phobos/std/range/Cycle/Functions/opIndexAssign.html",
    "title": "Overloads for - opIndexAssign | Marmos Demo",
    "keywords": "Overloads for - opIndexAssign Module std.range Parent Cycle opIndexAssign(val, n) void opIndexAssign( ElementType!(R) val, size_t n ) ditto"
  },
  "phobos/std/range/Cycle/Functions/opSlice.html": {
    "href": "phobos/std/range/Cycle/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.range Parent Cycle opSlice(i, j) <bug: unknown> opSlice( size_t i, size_t j ) auto ditto opSlice(i, __anonymous) <bug: unknown> opSlice( size_t i, DollarToken __anonymous ) ditto"
  },
  "phobos/std/range/Cycle/Functions/popFront.html": {
    "href": "phobos/std/range/Cycle/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.range Parent Cycle popFront() void popFront( ) ditto"
  },
  "phobos/std/range/Cycle/Functions/save.html": {
    "href": "phobos/std/range/Cycle/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.range Parent Cycle save() Cycle save( ) ditto"
  },
  "phobos/std/range/EvenChunks/Functions/back.html": {
    "href": "phobos/std/range/EvenChunks/Functions/back.html",
    "title": "Overloads for - back | Marmos Demo",
    "keywords": "Overloads for - back Module std.range Parent EvenChunks back() <bug: unknown> back( ) auto Ditto"
  },
  "phobos/std/range/EvenChunks/Functions/empty.html": {
    "href": "phobos/std/range/EvenChunks/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.range Parent EvenChunks empty() bool empty( ) Ditto"
  },
  "phobos/std/range/EvenChunks/Functions/front.html": {
    "href": "phobos/std/range/EvenChunks/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.range Parent EvenChunks front() <bug: unknown> front( ) auto Forward range primitives. Always present."
  },
  "phobos/std/range/EvenChunks/Functions/length.html": {
    "href": "phobos/std/range/EvenChunks/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.range Parent EvenChunks length() size_t length( ) Length"
  },
  "phobos/std/range/EvenChunks/Functions/opIndex.html": {
    "href": "phobos/std/range/EvenChunks/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.range Parent EvenChunks opIndex(index) <bug: unknown> opIndex( size_t index ) auto Indexing, slicing and bidirectional operations and range primitives. Provided only if hasSlicing!Source is true ."
  },
  "phobos/std/range/EvenChunks/Functions/opSlice.html": {
    "href": "phobos/std/range/EvenChunks/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.range Parent EvenChunks opSlice(lower, upper) <bug: unknown> opSlice( size_t lower, size_t upper ) Ditto"
  },
  "phobos/std/range/EvenChunks/Functions/popBack.html": {
    "href": "phobos/std/range/EvenChunks/Functions/popBack.html",
    "title": "Overloads for - popBack | Marmos Demo",
    "keywords": "Overloads for - popBack Module std.range Parent EvenChunks popBack() void popBack( ) Ditto"
  },
  "phobos/std/range/EvenChunks/Functions/popFront.html": {
    "href": "phobos/std/range/EvenChunks/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.range Parent EvenChunks popFront() void popFront( ) Ditto"
  },
  "phobos/std/range/EvenChunks/Functions/save.html": {
    "href": "phobos/std/range/EvenChunks/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.range Parent EvenChunks save() <bug: unknown> save( ) Ditto"
  },
  "phobos/std/range/FrontTransversal/Functions/back.html": {
    "href": "phobos/std/range/FrontTransversal/Functions/back.html",
    "title": "Overloads for - back | Marmos Demo",
    "keywords": "Overloads for - back Module std.range Parent FrontTransversal back() <bug: unknown> back( ) auto Bidirectional primitives. They are offered if $(D isBidirectionalRange!RangeOfRanges). back(val) void back( ElementType val )"
  },
  "phobos/std/range/FrontTransversal/Functions/front.html": {
    "href": "phobos/std/range/FrontTransversal/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.range Parent FrontTransversal front() <bug: unknown> front( ) auto Ditto front(val) void front( ElementType val )"
  },
  "phobos/std/range/FrontTransversal/Functions/moveAt.html": {
    "href": "phobos/std/range/FrontTransversal/Functions/moveAt.html",
    "title": "Overloads for - moveAt | Marmos Demo",
    "keywords": "Overloads for - moveAt Module std.range Parent FrontTransversal moveAt(n) ElementType moveAt( size_t n ) Ditto"
  },
  "phobos/std/range/FrontTransversal/Functions/moveBack.html": {
    "href": "phobos/std/range/FrontTransversal/Functions/moveBack.html",
    "title": "Overloads for - moveBack | Marmos Demo",
    "keywords": "Overloads for - moveBack Module std.range Parent FrontTransversal moveBack() ElementType moveBack( ) Ditto"
  },
  "phobos/std/range/FrontTransversal/Functions/moveFront.html": {
    "href": "phobos/std/range/FrontTransversal/Functions/moveFront.html",
    "title": "Overloads for - moveFront | Marmos Demo",
    "keywords": "Overloads for - moveFront Module std.range Parent FrontTransversal moveFront() ElementType moveFront( ) Ditto"
  },
  "phobos/std/range/FrontTransversal/Functions/opIndex.html": {
    "href": "phobos/std/range/FrontTransversal/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.range Parent FrontTransversal opIndex(n) <bug: unknown> opIndex( size_t n ) auto Random-access primitive. It is offered if $(D isRandomAccessRange!RangeOfRanges && (opt == TransverseOptions.assumeNotJagged || opt == TransverseOptions.enforceNotJagged))."
  },
  "phobos/std/range/FrontTransversal/Functions/opIndexAssign.html": {
    "href": "phobos/std/range/FrontTransversal/Functions/opIndexAssign.html",
    "title": "Overloads for - opIndexAssign | Marmos Demo",
    "keywords": "Overloads for - opIndexAssign Module std.range Parent FrontTransversal opIndexAssign(val, n) void opIndexAssign( ElementType val, size_t n ) Ditto"
  },
  "phobos/std/range/FrontTransversal/Functions/opSlice.html": {
    "href": "phobos/std/range/FrontTransversal/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.range Parent FrontTransversal opSlice(lower, upper) <bug: unknown> opSlice( size_t lower, size_t upper ) Slicing if offered if RangeOfRanges supports slicing and all the conditions for supporting indexing are met. opSlice() <bug: unknown> opSlice( ) auto"
  },
  "phobos/std/range/FrontTransversal/Functions/popBack.html": {
    "href": "phobos/std/range/FrontTransversal/Functions/popBack.html",
    "title": "Overloads for - popBack | Marmos Demo",
    "keywords": "Overloads for - popBack Module std.range Parent FrontTransversal popBack() void popBack( ) Ditto"
  },
  "phobos/std/range/FrontTransversal/Functions/popFront.html": {
    "href": "phobos/std/range/FrontTransversal/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.range Parent FrontTransversal popFront() void popFront( ) Ditto"
  },
  "phobos/std/range/FrontTransversal/Functions/prime.html": {
    "href": "phobos/std/range/FrontTransversal/Functions/prime.html",
    "title": "Overloads for - prime | Marmos Demo",
    "keywords": "Overloads for - prime Module std.range Parent FrontTransversal prime() void prime( )"
  },
  "phobos/std/range/FrontTransversal/Functions/save.html": {
    "href": "phobos/std/range/FrontTransversal/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.range Parent FrontTransversal save() FrontTransversal save( ) Duplicates this frontTransversal . Note that only the encapsulating range of range will be duplicated. Underlying ranges will not be duplicated."
  },
  "phobos/std/range/Functions/assumeSorted.html": {
    "href": "phobos/std/range/Functions/assumeSorted.html",
    "title": "Overloads for - assumeSorted | Marmos Demo",
    "keywords": "Overloads for - assumeSorted Module std.range assumeSorted(r) <bug: unknown> assumeSorted( R r ) auto Assumes r is sorted by predicate pred and returns the corresponding $(D SortedRange!(pred, R)) having r as support. To check for sorted-ness at cost $(BIGOH n), use $(REF isSorted, std,algorithm,sorting)."
  },
  "phobos/std/range/Functions/bitwise.html": {
    "href": "phobos/std/range/Functions/bitwise.html",
    "title": "Overloads for - bitwise | Marmos Demo",
    "keywords": "Overloads for - bitwise Module std.range bitwise(range) <bug: unknown> bitwise( R range ) auto Bitwise adapter over an integral type range. Consumes the range elements bit by bit, from the least significant bit to the most significant bit. Params R <parameter not found> an integral $(REF_ALTTEXT input range, isInputRange, std,range,primitives) to iterate over range R range to consume bit by by Returns A Bitwise input range with propagated forward, bidirectional and random access capabilities"
  },
  "phobos/std/range/Functions/chain.html": {
    "href": "phobos/std/range/Functions/chain.html",
    "title": "Overloads for - chain | Marmos Demo",
    "keywords": "Overloads for - chain Module std.range chain(rs) <bug: unknown> chain( Ranges rs ) auto Spans multiple ranges in sequence. The function chain takes any number of ranges and returns a $(D Chain!(R1, R2,...)) object. The ranges may be different, but they must have the same element type. The result is a range that offers the front , popFront , and $(D empty) primitives. If all input ranges offer random access and $(D length), Chain offers them as well. Note that repeated random access of the resulting range is likely to perform somewhat badly since lengths of the ranges in the chain have to be added up for each random access operation. Random access to elements of the first remaining range is still efficient. If only one range is offered to Chain or chain , the $(D Chain) type exits the picture by aliasing itself directly to that range's type. Params rs Ranges the $(REF_ALTTEXT input ranges, isInputRange, std,range,primitives) to chain together Returns An input range at minimum. If all of the ranges in rs provide a range primitive, the returned range will also provide that range primitive. See_Also: $(LREF only) to chain values to a range"
  },
  "phobos/std/range/Functions/choose.html": {
    "href": "phobos/std/range/Functions/choose.html",
    "title": "Overloads for - choose | Marmos Demo",
    "keywords": "Overloads for - choose Module std.range choose(condition, r1, r2) <bug: unknown> choose( bool condition, R1 r1, R2 r2 ) auto Choose one of two ranges at runtime depending on a Boolean condition. The ranges may be different, but they must have compatible element types (i.e. CommonType must exist for the two element types). The result is a range that offers the weakest capabilities of the two (e.g. ForwardRange if $(D R1) is a random-access range and R2 is a forward range). Params condition bool which range to choose: r1 if true , r2 otherwise r1 R1 the \"true\" range r2 R2 the \"false\" range Returns A range type dependent on R1 and R2 ."
  },
  "phobos/std/range/Functions/chooseAmong.html": {
    "href": "phobos/std/range/Functions/chooseAmong.html",
    "title": "Overloads for - chooseAmong | Marmos Demo",
    "keywords": "Overloads for - chooseAmong Module std.range chooseAmong(index, rs) <bug: unknown> chooseAmong( size_t index, Ranges rs ) auto Choose one of multiple ranges at runtime. The ranges may be different, but they must have compatible element types. The result is a range that offers the weakest capabilities of all Ranges . Params index size_t which range to choose, must be less than the number of ranges rs Ranges two or more ranges Returns The indexed range. If rs consists of only one range, the return type is an alias of that range's type."
  },
  "phobos/std/range/Functions/chunks.html": {
    "href": "phobos/std/range/Functions/chunks.html",
    "title": "Overloads for - chunks | Marmos Demo",
    "keywords": "Overloads for - chunks Module std.range chunks(source, chunkSize) Chunks!(Source) chunks( Source source, size_t chunkSize ) Ditto"
  },
  "phobos/std/range/Functions/cycle.html": {
    "href": "phobos/std/range/Functions/cycle.html",
    "title": "Overloads for - cycle | Marmos Demo",
    "keywords": "Overloads for - cycle Module std.range cycle(input) <bug: unknown> cycle( R input ) auto Ditto cycle(input, index) Cycle!(R) cycle( R input, size_t index ) Ditto cycle(input, index) Cycle!(R) cycle( R input, size_t index ) Ditto"
  },
  "phobos/std/range/Functions/drop.html": {
    "href": "phobos/std/range/Functions/drop.html",
    "title": "Overloads for - drop | Marmos Demo",
    "keywords": "Overloads for - drop Module std.range drop(range, n) R drop( R range, size_t n ) Convenience function which calls $(REF popFrontN, std, range, primitives)(range, n) and returns range . drop makes it easier to pop elements from a range and then pass it to another function within a single expression, whereas popFrontN would require multiple statements. dropBack provides the same functionality but instead calls $(REF popBackN, std, range, primitives)(range, n) Note: drop and dropBack will only pop $(I up to) n elements but will stop if the range is empty first. In other languages this is sometimes called skip . Params range R the $(REF_ALTTEXT input range, isInputRange, std,range,primitives) to drop from n size_t the number of elements to drop Returns range with up to n elements dropped See_Also $(REF popFront, std, range, primitives), $(REF popBackN, std, range, primitives)"
  },
  "phobos/std/range/Functions/dropBack.html": {
    "href": "phobos/std/range/Functions/dropBack.html",
    "title": "Overloads for - dropBack | Marmos Demo",
    "keywords": "Overloads for - dropBack Module std.range dropBack(range, n) R dropBack( R range, size_t n ) ditto"
  },
  "phobos/std/range/Functions/dropBackExactly.html": {
    "href": "phobos/std/range/Functions/dropBackExactly.html",
    "title": "Overloads for - dropBackExactly | Marmos Demo",
    "keywords": "Overloads for - dropBackExactly Module std.range dropBackExactly(range, n) R dropBackExactly( R range, size_t n ) ditto"
  },
  "phobos/std/range/Functions/dropBackOne.html": {
    "href": "phobos/std/range/Functions/dropBackOne.html",
    "title": "Overloads for - dropBackOne | Marmos Demo",
    "keywords": "Overloads for - dropBackOne Module std.range dropBackOne(range) R dropBackOne( R range ) ditto"
  },
  "phobos/std/range/Functions/dropExactly.html": {
    "href": "phobos/std/range/Functions/dropExactly.html",
    "title": "Overloads for - dropExactly | Marmos Demo",
    "keywords": "Overloads for - dropExactly Module std.range dropExactly(range, n) R dropExactly( R range, size_t n ) Similar to $(LREF drop) and dropBack but they call \\((D range.\\)(LREF popFrontExactly)(n)) and range.popBackExactly(n) instead. Note: Unlike drop , dropExactly will assume that the range holds at least n elements. This makes dropExactly faster than drop , but it also means that if range does not contain at least n elements, it will attempt to call popFront on an empty range, which is undefined behavior. So, only use popFrontExactly when it is guaranteed that range holds at least n elements. Params range R the $(REF_ALTTEXT input range, isInputRange, std,range,primitives) to drop from n size_t the number of elements to drop Returns range with n elements dropped See_Also $(REF popFrontExcatly, std, range, primitives), $(REF popBackExcatly, std, range, primitives)"
  },
  "phobos/std/range/Functions/dropOne.html": {
    "href": "phobos/std/range/Functions/dropOne.html",
    "title": "Overloads for - dropOne | Marmos Demo",
    "keywords": "Overloads for - dropOne Module std.range dropOne(range) R dropOne( R range ) Convenience function which calls range.popFront() and returns range . dropOne makes it easier to pop an element from a range and then pass it to another function within a single expression, whereas popFront would require multiple statements. dropBackOne provides the same functionality but instead calls range.popBack() ."
  },
  "phobos/std/range/Functions/enumerate.html": {
    "href": "phobos/std/range/Functions/enumerate.html",
    "title": "Overloads for - enumerate | Marmos Demo",
    "keywords": "Overloads for - enumerate Module std.range enumerate(range, start) <bug: unknown> enumerate( Range range, Enumerator start ) auto Iterate over range with an attached index variable. Each element is a $(REF Tuple, std,typecons) containing the index and the element, in that order, where the index member is named index and the element member is named value . The index starts at start and is incremented by one on every iteration. Overflow If range has length, then it is an error to pass a value for start so that start + range.length is bigger than Enumerator.max , thus it is ensured that overflow cannot happen. If range does not have length, and popFront is called when front.index == Enumerator.max , the index will overflow and continue from Enumerator.min . Params range Range the $(REF_ALTTEXT input range, isInputRange, std,range,primitives) to attach indexes to start Enumerator the number to start the index counter from Returns At minimum, an input range. All other range primitives are given in the resulting range if range has them. The exceptions are the bidirectional primitives, which are propagated only if range has length. Example Useful for using `foreach` with an index loop variable ---- import std.stdio : stdin, stdout; import std.range : enumerate; foreach (lineNum, line; stdin.byLine().enumerate(1)) stdout.writefln(\"line #%s: %s\", lineNum, line); ----"
  },
  "phobos/std/range/Functions/evenChunks.html": {
    "href": "phobos/std/range/Functions/evenChunks.html",
    "title": "Overloads for - evenChunks | Marmos Demo",
    "keywords": "Overloads for - evenChunks Module std.range evenChunks(source, chunkCount) EvenChunks!(Source) evenChunks( Source source, size_t chunkCount ) Ditto"
  },
  "phobos/std/range/Functions/frontTransversal.html": {
    "href": "phobos/std/range/Functions/frontTransversal.html",
    "title": "Overloads for - frontTransversal | Marmos Demo",
    "keywords": "Overloads for - frontTransversal Module std.range frontTransversal(rr) FrontTransversal!(RangeOfRangesopt) frontTransversal( RangeOfRanges rr ) Ditto"
  },
  "phobos/std/range/Functions/generate.html": {
    "href": "phobos/std/range/Functions/generate.html",
    "title": "Overloads for - generate | Marmos Demo",
    "keywords": "Overloads for - generate Module std.range generate(fun) <bug: unknown> generate( Fun fun ) auto Given callable (\\((REF isCallable, std,traits)) `fun` , create as a range whose front is defined by successive calls to `fun()` . This is especially useful to call function with global side effects (random functions), or to create ranges expressed as a single delegate, rather than an entire `front` /`popFront`/`empty` structure. `fun` maybe be passed either a template alias parameter (existing function, delegate, struct type defining `static opCall` ) or a run-time value argument (delegate, function object). The result range models an InputRange (\\)(REF isInputRange, std,range,primitives)). The resulting range will call fun() on construction, and every call to popFront , and the cached value will be returned when front is called. Returns: an inputRange where each element represents another call to fun. generate() <bug: unknown> generate( ) auto ditto"
  },
  "phobos/std/range/Functions/indexed.html": {
    "href": "phobos/std/range/Functions/indexed.html",
    "title": "Overloads for - indexed | Marmos Demo",
    "keywords": "Overloads for - indexed Module std.range indexed(source, indices) Indexed!(SourceIndices) indexed( Source source, Indices indices ) Ditto"
  },
  "phobos/std/range/Functions/iota.html": {
    "href": "phobos/std/range/Functions/iota.html",
    "title": "Overloads for - iota | Marmos Demo",
    "keywords": "Overloads for - iota Module std.range iota(begin, end, step) <bug: unknown> iota( B begin, E end, S step ) auto Creates a range of values that span the given starting and stopping values. Params begin B The starting value. end E The value that serves as the stopping criterion. This value is not included in the range. step S The value to add to the current value at each iteration. Returns A range that goes through the numbers begin , $(D begin + step), $(D begin + 2 step), ..., up to and excluding end. The two-argument overloads have $(D step = 1). If $(D begin < end && step < 0) or $(D begin > end && step > 0) or $(D begin == end), then an empty range is returned. If $(D step == 0) then $(D begin == end) is an error. For built-in types, the range returned is a random access range. For user-defined types that support ++ , the range is an input range. An integral iota also supports in operator from the right. It takes the stepping into account, the integral won't be considered contained if it falls between two consecutive values of the range. contains does the same as in, but from lefthand side. Example: --- void main() { import std.stdio; // The following groups all produce the same output of: // 0 1 2 3 4 foreach (i; 0 .. 5) writef(\"%s \", i); writeln(); import std.range : iota; foreach (i; iota(0, 5)) writef(\"%s \", i); writeln(); writefln(\"%(%s %|%)\", iota(0, 5)); import std.algorithm.iteration : map; import std.algorithm.mutation : copy; import std.format; iota(0, 5).map!(i => format(\"%s \", i)).copy(stdout.lockingTextWriter()); writeln(); } --- iota(begin, end) <bug: unknown> iota( B begin, E end ) auto Ditto iota(begin, end) <bug: unknown> iota( B begin, E end ) auto Ditto iota(end) <bug: unknown> iota( E end ) auto Ditto iota(begin, end, step) <bug: unknown> iota( B begin, E end, S step ) auto Ditto iota(begin, end) <bug: unknown> iota( B begin, E end ) auto ditto"
  },
  "phobos/std/range/Functions/lockstep.html": {
    "href": "phobos/std/range/Functions/lockstep.html",
    "title": "Overloads for - lockstep | Marmos Demo",
    "keywords": "Overloads for - lockstep Module std.range lockstep(ranges) Lockstep!(Ranges) lockstep( Ranges ranges ) Ditto lockstep(ranges, s) Lockstep!(Ranges) lockstep( Ranges ranges, StoppingPolicy s ) Ditto"
  },
  "phobos/std/range/Functions/lockstepMixin.html": {
    "href": "phobos/std/range/Functions/lockstepMixin.html",
    "title": "Overloads for - lockstepMixin | Marmos Demo",
    "keywords": "Overloads for - lockstepMixin Module std.range lockstepMixin(withIndex, reverse) string lockstepMixin( bool withIndex, bool reverse )"
  },
  "phobos/std/range/Functions/lockstepReverseFailMixin.html": {
    "href": "phobos/std/range/Functions/lockstepReverseFailMixin.html",
    "title": "Overloads for - lockstepReverseFailMixin | Marmos Demo",
    "keywords": "Overloads for - lockstepReverseFailMixin Module std.range lockstepReverseFailMixin(withIndex) string lockstepReverseFailMixin( bool withIndex )"
  },
  "phobos/std/range/Functions/nullSink.html": {
    "href": "phobos/std/range/Functions/nullSink.html",
    "title": "Overloads for - nullSink | Marmos Demo",
    "keywords": "Overloads for - nullSink Module std.range nullSink() <bug: unknown> nullSink( ) auto ditto"
  },
  "phobos/std/range/Functions/only.html": {
    "href": "phobos/std/range/Functions/only.html",
    "title": "Overloads for - only | Marmos Demo",
    "keywords": "Overloads for - only Module std.range only(values) <bug: unknown> only( Values values ) auto Assemble values into a range that carries all its elements in-situ. Useful when a single value or multiple disconnected values must be passed to an algorithm expecting a range, without having to perform dynamic memory allocation. As copying the range means copying all elements, it can be safely returned from functions. For the same reason, copying the returned range may be expensive for a large number of arguments. Params values Values the values to assemble together Returns A RandomAccessRange of the assembled values. The returned range can be sliced. Its elements can be assigned to if every type in Values supports assignment from the range's element type. See_Also: $(LREF chain) to chain ranges only() <bug: unknown> only( ) auto ditto"
  },
  "phobos/std/range/Functions/padLeft.html": {
    "href": "phobos/std/range/Functions/padLeft.html",
    "title": "Overloads for - padLeft | Marmos Demo",
    "keywords": "Overloads for - padLeft Module std.range padLeft(r, e, n) <bug: unknown> padLeft( R r, E e, size_t n ) auto Extends the length of the input range r by padding out the start of the range with the element e . The element e must be of a common type with the element type of the range r as defined by $(REF CommonType, std, traits). If n is less than the length of of r , then r is returned unmodified. If r is a string with Unicode characters in it, padLeft follows D's rules about length for strings, which is not the number of characters, or graphemes, but instead the number of encoding units. If you want to treat each grapheme as only one encoding unit long, then call $(REF byGrapheme, std, uni) before calling this function. If r has a length, then this is $(BIGOH 1). Otherwise, it's $(BIGOH r.length). Params r R an $(REF_ALTTEXT input range, isInputRange, std,range,primitives) with a length, or a forward range e E element to pad the range with n size_t the length to pad to Returns A range containing the elements of the original range with the extra padding See Also $(REF leftJustifier, std, string)"
  },
  "phobos/std/range/Functions/padRight.html": {
    "href": "phobos/std/range/Functions/padRight.html",
    "title": "Overloads for - padRight | Marmos Demo",
    "keywords": "Overloads for - padRight Module std.range padRight(r, e, n) <bug: unknown> padRight( R r, E e, size_t n ) auto Extend the length of the input range r by padding out the end of the range with the element e . The element e must be of a common type with the element type of the range r as defined by $(REF CommonType, std, traits). If n is less than the length of of r , then the contents of r are returned. The range primitives that the resulting range provides depends whether or not r provides them. Except the functions back and popBack , which also require the range to have a length as well as back and popBack Params r R an $(REF_ALTTEXT input range, isInputRange, std,range,primitives) with a length e E element to pad the range with n size_t the length to pad to Returns A range containing the elements of the original range with the extra padding See Also $(REF rightJustifier, std, string)"
  },
  "phobos/std/range/Functions/radial.html": {
    "href": "phobos/std/range/Functions/radial.html",
    "title": "Overloads for - radial | Marmos Demo",
    "keywords": "Overloads for - radial Module std.range radial(r, startingIndex) <bug: unknown> radial( Range r, I startingIndex ) auto Iterates a random-access range starting from a given point and progressively extending left and right from that point. If no initial point is given, iteration starts from the middle of the range. Iteration spans the entire range. When startingIndex is 0 the range will be fully iterated in order and in reverse order when r.length is given. Params r Range a random access range with length and slicing startingIndex I the index to begin iteration from Returns A forward range with length radial(r) <bug: unknown> radial( R r ) auto Ditto"
  },
  "phobos/std/range/Functions/recurrence.html": {
    "href": "phobos/std/range/Functions/recurrence.html",
    "title": "Overloads for - recurrence | Marmos Demo",
    "keywords": "Overloads for - recurrence Module std.range recurrence(initial) Recurrence!(funCommonType!StateState.length) recurrence( State initial ) Ditto"
  },
  "phobos/std/range/Functions/refRange.html": {
    "href": "phobos/std/range/Functions/refRange.html",
    "title": "Overloads for - refRange | Marmos Demo",
    "keywords": "Overloads for - refRange Module std.range refRange(range) <bug: unknown> refRange( <bug: unknown> range ) auto ditto"
  },
  "phobos/std/range/Functions/repeat.html": {
    "href": "phobos/std/range/Functions/repeat.html",
    "title": "Overloads for - repeat | Marmos Demo",
    "keywords": "Overloads for - repeat Module std.range repeat(value) Repeat!(T) repeat( T value ) Ditto repeat(value, n) Take!(Repeat!T) repeat( T value, size_t n ) ditto"
  },
  "phobos/std/range/Functions/retro.html": {
    "href": "phobos/std/range/Functions/retro.html",
    "title": "Overloads for - retro | Marmos Demo",
    "keywords": "Overloads for - retro Module std.range retro(r) <bug: unknown> retro( Range r ) auto Iterates a bidirectional range backwards. The original range can be accessed by using the source property. Applying retro twice to the same range yields the original range. Params r Range the bidirectional range to iterate backwards Returns A bidirectional range with length if r also provides a length. Or, if r is a random access range, then the return value will be random access as well. See_Also: $(REF reverse, std,algorithm,mutation) for mutating the source range directly."
  },
  "phobos/std/range/Functions/roundRobin.html": {
    "href": "phobos/std/range/Functions/roundRobin.html",
    "title": "Overloads for - roundRobin | Marmos Demo",
    "keywords": "Overloads for - roundRobin Module std.range roundRobin(rs) <bug: unknown> roundRobin( Rs rs ) auto $(D roundRobin(r1, r2, r3)) yields r1.front , then r2.front , then r3.front , after which it pops off one element from each and continues again from r1 . For example, if two ranges are involved, it alternately yields elements off the two ranges. roundRobin stops after it has consumed all ranges (skipping over the ones that finish early)."
  },
  "phobos/std/range/Functions/sequence.html": {
    "href": "phobos/std/range/Functions/sequence.html",
    "title": "Overloads for - sequence | Marmos Demo",
    "keywords": "Overloads for - sequence Module std.range sequence(args) <bug: unknown> sequence( State args ) auto Ditto"
  },
  "phobos/std/range/Functions/slide.html": {
    "href": "phobos/std/range/Functions/slide.html",
    "title": "Overloads for - slide | Marmos Demo",
    "keywords": "Overloads for - slide Module std.range slide(source, windowSize, stepSize) <bug: unknown> slide( Source source, size_t windowSize, size_t stepSize ) auto A fixed-sized sliding window iteration of size windowSize over a source range by a custom stepSize . The Source range must be at least a $(REF_ALTTEXT ForwardRange, isForwardRange, std,range,primitives) and the windowSize must be greater than zero. For windowSize = 1 it splits the range into single element groups (aka unflatten ) For windowSize = 2 it is similar to zip(source, source.save.dropOne) . Params f <parameter not found> Whether the last element has fewer elements than windowSize it should be be ignored (No.withPartial) or added (Yes.withPartial) source Source Range from which the slide will be selected windowSize size_t Sliding window size stepSize size_t Steps between the windows (by default 1) Returns: Range of all sliding windows with propagated bi-directionality, forwarding, random access, and slicing. Note: To avoid performance overhead, $(REF_ALTTEXT bi-directionality, isBidirectionalRange, std,range,primitives) is only available when $(REF hasSlicing, std,range,primitives) and $(REF hasLength, std,range,primitives) are true. See_Also: $(LREF chunks)"
  },
  "phobos/std/range/Functions/stride.html": {
    "href": "phobos/std/range/Functions/stride.html",
    "title": "Overloads for - stride | Marmos Demo",
    "keywords": "Overloads for - stride Module std.range stride(r, n) <bug: unknown> stride( Range r, size_t n ) auto Iterates range r with stride n . If the range is a random-access range, moves by indexing into the range; otherwise, moves by successive calls to popFront . Applying stride twice to the same range results in a stride with a step that is the product of the two applications. It is an error for n to be 0. Params r Range the $(REF_ALTTEXT input range, isInputRange, std,range,primitives) to stride over n size_t the number of elements to skip over Returns At minimum, an input range. The resulting range will adopt the range primitives of the underlying range as long as $(REF hasLength, std,range,primitives) is true ."
  },
  "phobos/std/range/Functions/tail.html": {
    "href": "phobos/std/range/Functions/tail.html",
    "title": "Overloads for - tail | Marmos Demo",
    "keywords": "Overloads for - tail Module std.range tail(range, n) <bug: unknown> tail( Range range, size_t n ) auto Return a range advanced to within _n elements of the end of range . Intended as the range equivalent of the Unix $(HTTP en.wikipedia.org/wiki/Tail_%28Unix%29, tail) utility. When the length of range is less than or equal to _n , range is returned as-is. Completes in $(BIGOH 1) steps for ranges that support slicing and have length. Completes in $(BIGOH range.length) time for all other ranges. Params range Range range to get tail of n size_t maximum number of elements to include in tail Returns Returns the tail of range augmented with length information"
  },
  "phobos/std/range/Functions/take.html": {
    "href": "phobos/std/range/Functions/take.html",
    "title": "Overloads for - take | Marmos Demo",
    "keywords": "Overloads for - take Module std.range take(input, n) Take!(R) take( R input, size_t n ) Lazily takes only up to n elements of a range. This is particularly useful when using with infinite ranges. Unlike $(LREF takeExactly), take does not require that there are n or more elements in input . As a consequence, length information is not applied to the result unless input also has length information. Params input R an $(REF_ALTTEXT input range, isInputRange, std,range,primitives) to iterate over up to n times n = the number of elements to take Returns At minimum, an input range. If the range offers random access and length , take offers them as well."
  },
  "phobos/std/range/Functions/takeExactly.html": {
    "href": "phobos/std/range/Functions/takeExactly.html",
    "title": "Overloads for - takeExactly | Marmos Demo",
    "keywords": "Overloads for - takeExactly Module std.range takeExactly(range, n) <bug: unknown> takeExactly( R range, size_t n ) auto Similar to $(LREF take), but assumes that range has at least $(D n) elements. Consequently, the result of $(D takeExactly(range, n)) always defines the length property (and initializes it to n ) even when range itself does not define length . The result of takeExactly is identical to that of $(LREF take) in cases where the original range defines length or is infinite. Unlike $(LREF take), however, it is illegal to pass a range with less than n elements to takeExactly ; this will cause an assertion failure."
  },
  "phobos/std/range/Functions/takeNone.html": {
    "href": "phobos/std/range/Functions/takeNone.html",
    "title": "Overloads for - takeNone | Marmos Demo",
    "keywords": "Overloads for - takeNone Module std.range takeNone() <bug: unknown> takeNone( ) auto Returns an empty range which is statically known to be empty and is guaranteed to have length and be random access regardless of R 's capabilities. takeNone(range) <bug: unknown> takeNone( R range ) auto Creates an empty range from the given range in $(BIGOH 1). If it can, it will return the same range type. If not, it will return $(D takeExactly(range, 0))."
  },
  "phobos/std/range/Functions/takeOne.html": {
    "href": "phobos/std/range/Functions/takeOne.html",
    "title": "Overloads for - takeOne | Marmos Demo",
    "keywords": "Overloads for - takeOne Module std.range takeOne(source) <bug: unknown> takeOne( R source ) auto Returns a range with at most one element; for example, $(D takeOne([42, 43, 44])) returns a range consisting of the integer $(D 42). Calling popFront() off that range renders it empty. In effect takeOne(r) is somewhat equivalent to $(D take(r, 1)) but in certain interfaces it is important to know statically that the range may only have at most one element. The type returned by takeOne is a random-access range with length regardless of R 's capabilities, as long as it is a forward range. (another feature that distinguishes takeOne from take ). If (D R) is an input range but not a forward range, return type is an input range with all random-access capabilities except save."
  },
  "phobos/std/range/Functions/tee.html": {
    "href": "phobos/std/range/Functions/tee.html",
    "title": "Overloads for - tee | Marmos Demo",
    "keywords": "Overloads for - tee Module std.range tee(inputRange, outputRange) <bug: unknown> tee( R1 inputRange, R2 outputRange ) auto Implements a \"tee\" style pipe, wrapping an input range so that elements of the range can be passed to a provided function or $(LREF OutputRange) as they are iterated over. This is useful for printing out intermediate values in a long chain of range code, performing some operation with side-effects on each call to front or popFront , or diverting the elements of a range into an auxiliary $(LREF OutputRange). It is important to note that as the resultant range is evaluated lazily, in the case of the version of tee that takes a function, the function will not actually be executed until the range is \"walked\" using functions that evaluate ranges, such as $(REF array, std,array) or $(REF fold, std,algorithm,iteration). Params pipeOnPop <parameter not found> If Yes.pipeOnPop , simply iterating the range without ever calling front is enough to have tee mirror elements to outputRange (or, respectively, fun ). Note that each popFront() call will mirror the old front value, not the new one. This means that the last value will not be forwarded if the range isn't iterated until empty. If No.pipeOnPop , only elements for which front does get called will be also sent to outputRange /fun. If front is called twice for the same element, it will still be sent only once. If this caching is undesired, consider using $(REF map, std,algorithm,iteration) instead. inputRange = The input range being passed through. outputRange = This range will receive elements of inputRange progressively as iteration proceeds. fun = This function will be called with elements of inputRange progressively as iteration proceeds. Returns An input range that offers the elements of inputRange . Regardless of whether inputRange is a more powerful range (forward, bidirectional etc), the result is always an input range. Reading this causes inputRange to be iterated and returns its elements in turn. In addition, the same elements will be passed to outputRange or fun as well. See_Also: $(REF each, std,algorithm,iteration) tee(inputRange) <bug: unknown> tee( R1 inputRange ) auto Ditto"
  },
  "phobos/std/range/Functions/transposed.html": {
    "href": "phobos/std/range/Functions/transposed.html",
    "title": "Overloads for - transposed | Marmos Demo",
    "keywords": "Overloads for - transposed Module std.range transposed(rr) Transposed!(RangeOfRangesopt) transposed( RangeOfRanges rr ) Given a range of ranges, returns a range of ranges where the $(I i)'th subrange contains the $(I i)'th elements of the original subranges. Params opt <parameter not found> Controls the assumptions the function makes about the lengths of the ranges (i.e. jagged or not) rr RangeOfRanges Range of ranges"
  },
  "phobos/std/range/Functions/transversal.html": {
    "href": "phobos/std/range/Functions/transversal.html",
    "title": "Overloads for - transversal | Marmos Demo",
    "keywords": "Overloads for - transversal Module std.range transversal(rr, n) Transversal!(RangeOfRangesopt) transversal( RangeOfRanges rr, size_t n ) Ditto"
  },
  "phobos/std/range/Functions/zip.html": {
    "href": "phobos/std/range/Functions/zip.html",
    "title": "Overloads for - zip | Marmos Demo",
    "keywords": "Overloads for - zip Module std.range zip(ranges) <bug: unknown> zip( Ranges ranges ) auto Ditto zip(sp, ranges) <bug: unknown> zip( StoppingPolicy sp, Ranges ranges ) auto Ditto"
  },
  "phobos/std/range/Generator/Functions/front.html": {
    "href": "phobos/std/range/Generator/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.range Parent Generator front() <bug: unknown> front( ) ditto"
  },
  "phobos/std/range/Generator/Functions/popFront.html": {
    "href": "phobos/std/range/Generator/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.range Parent Generator popFront() void popFront( ) ditto"
  },
  "phobos/std/range/Indexed/Functions/back.html": {
    "href": "phobos/std/range/Indexed/Functions/back.html",
    "title": "Overloads for - back | Marmos Demo",
    "keywords": "Overloads for - back Module std.range Parent Indexed back() <bug: unknown> back( ) auto Ditto back(newVal) <bug: unknown> back( ElementType!(Source) newVal ) auto Ditto"
  },
  "phobos/std/range/Indexed/Functions/front.html": {
    "href": "phobos/std/range/Indexed/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.range Parent Indexed front() <bug: unknown> front( ) auto Range primitives front(newVal) <bug: unknown> front( ElementType!(Source) newVal ) auto Ditto"
  },
  "phobos/std/range/Indexed/Functions/indices.html": {
    "href": "phobos/std/range/Indexed/Functions/indices.html",
    "title": "Overloads for - indices | Marmos Demo",
    "keywords": "Overloads for - indices Module std.range Parent Indexed indices() Indices indices( ) Returns the indices range."
  },
  "phobos/std/range/Indexed/Functions/moveAt.html": {
    "href": "phobos/std/range/Indexed/Functions/moveAt.html",
    "title": "Overloads for - moveAt | Marmos Demo",
    "keywords": "Overloads for - moveAt Module std.range Parent Indexed moveAt(index) <bug: unknown> moveAt( size_t index ) auto Ditto"
  },
  "phobos/std/range/Indexed/Functions/moveBack.html": {
    "href": "phobos/std/range/Indexed/Functions/moveBack.html",
    "title": "Overloads for - moveBack | Marmos Demo",
    "keywords": "Overloads for - moveBack Module std.range Parent Indexed moveBack() <bug: unknown> moveBack( ) auto Ditto"
  },
  "phobos/std/range/Indexed/Functions/moveFront.html": {
    "href": "phobos/std/range/Indexed/Functions/moveFront.html",
    "title": "Overloads for - moveFront | Marmos Demo",
    "keywords": "Overloads for - moveFront Module std.range Parent Indexed moveFront() <bug: unknown> moveFront( ) auto Ditto"
  },
  "phobos/std/range/Indexed/Functions/opIndex.html": {
    "href": "phobos/std/range/Indexed/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.range Parent Indexed opIndex(index) <bug: unknown> opIndex( size_t index ) auto Ditto"
  },
  "phobos/std/range/Indexed/Functions/opIndexAssign.html": {
    "href": "phobos/std/range/Indexed/Functions/opIndexAssign.html",
    "title": "Overloads for - opIndexAssign | Marmos Demo",
    "keywords": "Overloads for - opIndexAssign Module std.range Parent Indexed opIndexAssign(newVal, index) <bug: unknown> opIndexAssign( ElementType!(Source) newVal, size_t index ) auto Ditto"
  },
  "phobos/std/range/Indexed/Functions/opSlice.html": {
    "href": "phobos/std/range/Indexed/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.range Parent Indexed opSlice(a, b) <bug: unknown> opSlice( size_t a, size_t b ) Ditto"
  },
  "phobos/std/range/Indexed/Functions/physicalIndex.html": {
    "href": "phobos/std/range/Indexed/Functions/physicalIndex.html",
    "title": "Overloads for - physicalIndex | Marmos Demo",
    "keywords": "Overloads for - physicalIndex Module std.range Parent Indexed physicalIndex(logicalIndex) size_t physicalIndex( size_t logicalIndex ) Returns the physical index into the source range corresponding to a given logical index. This is useful, for example, when indexing an Indexed without adding another layer of indirection."
  },
  "phobos/std/range/Indexed/Functions/popBack.html": {
    "href": "phobos/std/range/Indexed/Functions/popBack.html",
    "title": "Overloads for - popBack | Marmos Demo",
    "keywords": "Overloads for - popBack Module std.range Parent Indexed popBack() void popBack( ) Ditto"
  },
  "phobos/std/range/Indexed/Functions/popFront.html": {
    "href": "phobos/std/range/Indexed/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.range Parent Indexed popFront() void popFront( ) Ditto"
  },
  "phobos/std/range/Indexed/Functions/save.html": {
    "href": "phobos/std/range/Indexed/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.range Parent Indexed save() <bug: unknown> save( ) Ditto"
  },
  "phobos/std/range/Indexed/Functions/source.html": {
    "href": "phobos/std/range/Indexed/Functions/source.html",
    "title": "Overloads for - source | Marmos Demo",
    "keywords": "Overloads for - source Module std.range Parent Indexed source() Source source( ) Returns the source range."
  },
  "phobos/std/range/OnlyResult/Functions/assignFront.html": {
    "href": "phobos/std/range/OnlyResult/Functions/assignFront.html",
    "title": "Overloads for - assignFront | Marmos Demo",
    "keywords": "Overloads for - assignFront Module std.range Parent OnlyResult assignFront(newValue) void assignFront( T newValue )"
  },
  "phobos/std/range/OnlyResult/Functions/back.html": {
    "href": "phobos/std/range/OnlyResult/Functions/back.html",
    "title": "Overloads for - back | Marmos Demo",
    "keywords": "Overloads for - back Module std.range Parent OnlyResult back() T back( ) back(value) void back( T value )"
  },
  "phobos/std/range/OnlyResult/Functions/empty.html": {
    "href": "phobos/std/range/OnlyResult/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.range Parent OnlyResult empty() bool empty( )"
  },
  "phobos/std/range/OnlyResult/Functions/fetchFront.html": {
    "href": "phobos/std/range/OnlyResult/Functions/fetchFront.html",
    "title": "Overloads for - fetchFront | Marmos Demo",
    "keywords": "Overloads for - fetchFront Module std.range Parent OnlyResult fetchFront() T fetchFront( )"
  },
  "phobos/std/range/OnlyResult/Functions/front.html": {
    "href": "phobos/std/range/OnlyResult/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.range Parent OnlyResult front() T front( ) front(value) void front( T value )"
  },
  "phobos/std/range/OnlyResult/Functions/length.html": {
    "href": "phobos/std/range/OnlyResult/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.range Parent OnlyResult length() size_t length( )"
  },
  "phobos/std/range/OnlyResult/Functions/opIndex.html": {
    "href": "phobos/std/range/OnlyResult/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.range Parent OnlyResult opIndex(i) T opIndex( size_t i )"
  },
  "phobos/std/range/OnlyResult/Functions/opIndexAssign.html": {
    "href": "phobos/std/range/OnlyResult/Functions/opIndexAssign.html",
    "title": "Overloads for - opIndexAssign | Marmos Demo",
    "keywords": "Overloads for - opIndexAssign Module std.range Parent OnlyResult opIndexAssign(value, i) void opIndexAssign( T value, size_t i )"
  },
  "phobos/std/range/OnlyResult/Functions/opSlice.html": {
    "href": "phobos/std/range/OnlyResult/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.range Parent OnlyResult opSlice() OnlyResult opSlice( ) opSlice(from, to) OnlyResult opSlice( size_t from, size_t to )"
  },
  "phobos/std/range/OnlyResult/Functions/popBack.html": {
    "href": "phobos/std/range/OnlyResult/Functions/popBack.html",
    "title": "Overloads for - popBack | Marmos Demo",
    "keywords": "Overloads for - popBack Module std.range Parent OnlyResult popBack() void popBack( )"
  },
  "phobos/std/range/OnlyResult/Functions/popFront.html": {
    "href": "phobos/std/range/OnlyResult/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.range Parent OnlyResult popFront() void popFront( )"
  },
  "phobos/std/range/OnlyResult/Functions/save.html": {
    "href": "phobos/std/range/OnlyResult/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.range Parent OnlyResult save() <bug: unknown> save( ) auto"
  },
  "phobos/std/range/Overview.html": {
    "href": "phobos/std/range/Overview.html",
    "title": "Module - std.range | Marmos Demo",
    "keywords": "Module - std.range About This module defines the notion of a range. Ranges generalize the concept of arrays, lists, or anything that involves sequential access. This abstraction enables the same set of algorithms (see $(MREF std, algorithm)) to be used with a vast variety of different concrete types. For example, a linear search algorithm such as $(REF find, std, algorithm, searching) works not just for arrays, but for linked-lists, input files, incoming network data, etc. Guides There are many articles available that can bolster understanding ranges $(UL $(LI Ali Çehreli's $(HTTP ddili.org/ders/d.en/ranges.html, tutorial on ranges) for the basics of working with and creating range-based code.) $(LI Jonathan M. Davis $(LINK2 http://dconf.org/2015/talks/davis.html, $(I Introduction to Ranges)) talk at DConf 2015 a vivid introduction from its core constructs to practical advice.) $(LI The DLang Tour's $(LINK2 http://tour.dlang.org/tour/en/basics/ranges, chapter on ranges) for an interactive introduction.) $(LI H. S. Teoh's $(LINK2 http://wiki.dlang.org/Component_programming_with_ranges, tutorial on component programming with ranges) for a real-world showcase of the influence of range-based programming on complex algorithms.) $(LI Andrei Alexandrescu's article \\((LINK2 http://www.informit.com/articles/printerfriendly.aspx?p=1407357\\)(AMP)rll=1, $(I On Iteration)) for conceptual aspect of ranges and the motivation ) ) Submodules This module has two submodules The $(MREF std, range, primitives) submodule provides basic range functionality. It defines several templates for testing whether a given object is a range, what kind of range it is, and provides some common range operations. The $(MREF std, range, interfaces) submodule provides object-based interfaces for working with ranges via runtime polymorphism. The remainder of this module provides a rich set of range creation and composition templates that let you construct new ranges out of existing ranges: $(SCRIPT inhibitQuickIndex = 1;) $(DIVC quickindex, $(BOOKTABLE , $(TR $(TD $(LREF chain)) $(TD Concatenates several ranges into a single range. )) $(TR $(TD $(LREF choose)) $(TD Chooses one of two ranges at runtime based on a boolean condition. )) $(TR $(TD $(LREF chooseAmong)) $(TD Chooses one of several ranges at runtime based on an index. )) $(TR $(TD $(LREF chunks)) $(TD Creates a range that returns fixed-size chunks of the original range. )) $(TR $(TD $(LREF cycle)) $(TD Creates an infinite range that repeats the given forward range indefinitely. Good for implementing circular buffers. )) $(TR $(TD $(LREF drop)) $(TD Creates the range that results from discarding the first $(I n) elements from the given range. )) $(TR $(TD $(LREF dropBack)) $(TD Creates the range that results from discarding the last $(I n) elements from the given range. )) $(TR $(TD $(LREF dropExactly)) $(TD Creates the range that results from discarding exactly $(I n) of the first elements from the given range. )) $(TR $(TD $(LREF dropBackExactly)) $(TD Creates the range that results from discarding exactly $(I n) of the last elements from the given range. )) $(TR $(TD $(LREF dropOne)) $(TD Creates the range that results from discarding the first element from the given range. )) $(TR $(TD $(D $(LREF dropBackOne))) $(TD Creates the range that results from discarding the last element from the given range. )) $(TR $(TD $(LREF enumerate)) $(TD Iterates a range with an attached index variable. )) $(TR $(TD $(LREF evenChunks)) $(TD Creates a range that returns a number of chunks of approximately equal length from the original range. )) $(TR $(TD $(LREF frontTransversal)) $(TD Creates a range that iterates over the first elements of the given ranges. )) $(TR $(TD $(LREF generate)) $(TD Creates a range by successive calls to a given function. This allows to create ranges as a single delegate. )) $(TR $(TD $(LREF indexed)) $(TD Creates a range that offers a view of a given range as though its elements were reordered according to a given range of indices. )) $(TR $(TD $(LREF iota)) $(TD Creates a range consisting of numbers between a starting point and ending point, spaced apart by a given interval. )) $(TR $(TD $(LREF lockstep)) $(TD Iterates $(I n) ranges in lockstep, for use in a foreach loop. Similar to zip , except that lockstep is designed especially for foreach loops. )) $(TR $(TD $(LREF nullSink)) $(TD An output range that discards the data it receives. )) $(TR $(TD $(LREF only)) $(TD Creates a range that iterates over the given arguments. )) $(TR $(TD $(LREF padLeft)) $(TD Pads a range to a specified length by adding a given element to the front of the range. Is lazy if the range has a known length. )) $(TR $(TD $(LREF padRight)) $(TD Lazily pads a range to a specified length by adding a given element to the back of the range. )) $(TR $(TD $(LREF radial)) $(TD Given a random-access range and a starting point, creates a range that alternately returns the next left and next right element to the starting point. )) $(TR $(TD $(LREF recurrence)) $(TD Creates a forward range whose values are defined by a mathematical recurrence relation. )) $(TR $(TD $(LREF refRange)) $(TD Pass a range by reference. Both the original range and the RefRange will always have the exact same elements. Any operation done on one will affect the other. )) $(TR $(TD $(LREF repeat)) $(TD Creates a range that consists of a single element repeated $(I n) times, or an infinite range repeating that element indefinitely. )) $(TR $(TD $(LREF retro)) $(TD Iterates a bidirectional range backwards. )) $(TR $(TD $(LREF roundRobin)) $(TD Given $(I n) ranges, creates a new range that return the $(I n) first elements of each range, in turn, then the second element of each range, and so on, in a round-robin fashion. )) $(TR $(TD $(LREF sequence)) $(TD Similar to recurrence , except that a random-access range is created. )) $(TR $(TD $(D $(LREF slide))) $(TD Creates a range that returns a fixed-size sliding window over the original range. Unlike chunks, it advances a configurable number of items at a time, not one chunk at a time. )) $(TR $(TD $(LREF stride)) $(TD Iterates a range with stride $(I n). )) $(TR $(TD $(LREF tail)) $(TD Return a range advanced to within n elements of the end of the given range. )) $(TR $(TD $(LREF take)) $(TD Creates a sub-range consisting of only up to the first $(I n) elements of the given range. )) $(TR $(TD $(LREF takeExactly)) $(TD Like take , but assumes the given range actually has $(I n) elements, and therefore also defines the length property. )) $(TR $(TD $(LREF takeNone)) $(TD Creates a random-access range consisting of zero elements of the given range. )) $(TR $(TD $(LREF takeOne)) $(TD Creates a random-access range consisting of exactly the first element of the given range. )) $(TR $(TD $(LREF tee)) $(TD Creates a range that wraps a given range, forwarding along its elements while also calling a provided function with each element. )) $(TR $(TD $(LREF transposed)) $(TD Transposes a range of ranges. )) $(TR $(TD $(LREF transversal)) $(TD Creates a range that iterates over the $(I n)'th elements of the given random-access ranges. )) $(TR $(TD $(LREF zip)) $(TD Given $(I n) ranges, creates a range that successively returns a tuple of all the first elements, a tuple of all the second elements, etc. )) )) Sortedness Ranges whose elements are sorted afford better efficiency with certain operations. For this, the $(LREF assumeSorted) function can be used to construct a $(LREF SortedRange) from a pre-sorted range. The $(REF sort, std, algorithm, sorting) function also conveniently returns a $(LREF SortedRange). $(LREF SortedRange) objects provide some additional range operations that take advantage of the fact that the range is sorted. Source: $(PHOBOSSRC std/range/package.d) License: $(HTTP boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP erdani.com, Andrei Alexandrescu), David Simcha, $(HTTP jmdavisprog.com, Jonathan M Davis), and Jack Stouffer. Credit for some of the ideas in building this module goes to $(HTTP fantascienza.net/leonardo/so/, Leonardo Maffi). Aliases Name Description Cycle ditto lengthType Lockstep SortedRange ditto Take ditto ZipShortest Structs Name Description Bitwise ChooseResult Chunks This range iterates over fixed-sized chunks of size chunkSize of a source range. Source must be an $(REF_ALTTEXT input range, isInputRange, std,range,primitives). chunkSize must be greater than zero. Cycle Repeats the given forward range ad infinitum. If the original range is infinite (fact that would make Cycle the identity application), Cycle detects that and aliases itself to the range type itself. That works for non-forward ranges too. If the original range has random access, Cycle offers random access and also offers a constructor taking an initial position index . Cycle works with static arrays in addition to ranges, mostly for performance reasons. Cycle ditto EvenChunks This range splits a source range into chunkCount chunks of approximately equal length. Source must be a forward range with known length. FrontTransversal Given a range of ranges, iterate transversally through the first elements of each of the enclosed ranges. Generator Indexed This struct takes two ranges, source and indices , and creates a view of source as if its elements were reordered according to indices . indices may include only a subset of the elements of source and may also repeat elements. Lockstep Iterate multiple ranges in lockstep using a foreach loop. In contrast to $(LREF zip) it allows reference access to its elements. If only a single range is passed in, the Lockstep aliases itself away. If the ranges are of different lengths and s == StoppingPolicy.shortest stop after the shortest range is empty. If the ranges are of different lengths and s == StoppingPolicy.requireSameLength , throw an exception. s may not be StoppingPolicy.longest , and passing this will throw an exception. NullSink An OutputRange that discards the data it receives. OnlyResult OnlyResult Recurrence Creates a mathematical sequence given the initial values and a recurrence function that computes the next value from the existing values. The sequence comes in the form of an infinite forward range. The type Recurrence itself is seldom used directly; most often, recurrences are obtained by calling the function $(D recurrence). RefRange Wrapper which effectively makes it possible to pass a range by reference. Both the original range and the RefRange will always have the exact same elements. Any operation done on one will affect the other. So, for instance, if it's passed to a function which would implicitly copy the original range if it were passed to it, the original range is $(I not) copied but is consumed as if it were a reference type. Repeat Create a range which repeats one value. Sequence Sequence is similar to Recurrence except that iteration is presented in the so-called $(HTTP en.wikipedia.org/wiki/Closed_form, closed form). This means that the n th element in the series is computable directly from the initial values and n itself. This implies that the interface offered by Sequence is a random-access range, as opposed to the regular Recurrence , which only offers forward iteration. Slides SortedRange Represents a sorted range. In addition to the regular range primitives, supports additional operations that take advantage of the ordering, such as merge and binary search. To obtain a $(D SortedRange) from an unsorted range r , use $(REF sort, std,algorithm,sorting) which sorts r in place and returns the corresponding SortedRange . To construct a SortedRange from a range r that is known to be already sorted, use $(LREF assumeSorted). Take ditto Transposed Transversal Given a range of ranges, iterate transversally through the n th element of each of the enclosed ranges. This function is similar to unzip in other languages. Zip Iterate several ranges in lockstep. The element type is a proxy tuple that allows accessing the current element in the n th range by using e[n] . ZipShortest Functions Name Description assumeSorted Assumes r is sorted by predicate pred and returns the corresponding $(D SortedRange!(pred, R)) having r as support. To check for sorted-ness at cost $(BIGOH n), use $(REF isSorted, std,algorithm,sorting). bitwise Bitwise adapter over an integral type range. Consumes the range elements bit by bit, from the least significant bit to the most significant bit. chain Spans multiple ranges in sequence. The function chain takes any number of ranges and returns a $(D Chain!(R1, R2,...)) object. The ranges may be different, but they must have the same element type. The result is a range that offers the front , popFront , and $(D empty) primitives. If all input ranges offer random access and $(D length), Chain offers them as well. choose Choose one of two ranges at runtime depending on a Boolean condition. chooseAmong Choose one of multiple ranges at runtime. chunks Ditto cycle Ditto drop Convenience function which calls $(REF popFrontN, std, range, primitives)(range, n) and returns range . drop makes it easier to pop elements from a range and then pass it to another function within a single expression, whereas popFrontN would require multiple statements. dropBack ditto dropBackExactly ditto dropBackOne ditto dropExactly Similar to $(LREF drop) and dropBack but they call \\((D range.\\)(LREF popFrontExactly)(n)) and range.popBackExactly(n) instead. dropOne Convenience function which calls range.popFront() and returns range . dropOne makes it easier to pop an element from a range and then pass it to another function within a single expression, whereas popFront would require multiple statements. enumerate Iterate over range with an attached index variable. evenChunks Ditto frontTransversal Ditto generate Given callable (\\((REF isCallable, std,traits)) `fun` , create as a range whose front is defined by successive calls to `fun()` . This is especially useful to call function with global side effects (random functions), or to create ranges expressed as a single delegate, rather than an entire `front` /`popFront`/`empty` structure. `fun` maybe be passed either a template alias parameter (existing function, delegate, struct type defining `static opCall` ) or a run-time value argument (delegate, function object). The result range models an InputRange (\\)(REF isInputRange, std,range,primitives)). The resulting range will call fun() on construction, and every call to popFront , and the cached value will be returned when front is called. indexed Ditto iota Creates a range of values that span the given starting and stopping values. lockstep Ditto lockstepMixin lockstepReverseFailMixin nullSink ditto only Assemble values into a range that carries all its elements in-situ. padLeft Extends the length of the input range r by padding out the start of the range with the element e . The element e must be of a common type with the element type of the range r as defined by $(REF CommonType, std, traits). If n is less than the length of of r , then r is returned unmodified. padRight Extend the length of the input range r by padding out the end of the range with the element e . The element e must be of a common type with the element type of the range r as defined by $(REF CommonType, std, traits). If n is less than the length of of r , then the contents of r are returned. radial Iterates a random-access range starting from a given point and progressively extending left and right from that point. If no initial point is given, iteration starts from the middle of the range. Iteration spans the entire range. recurrence Ditto refRange ditto repeat Ditto retro Iterates a bidirectional range backwards. The original range can be accessed by using the source property. Applying retro twice to the same range yields the original range. roundRobin $(D roundRobin(r1, r2, r3)) yields r1.front , then r2.front , then r3.front , after which it pops off one element from each and continues again from r1 . For example, if two ranges are involved, it alternately yields elements off the two ranges. roundRobin stops after it has consumed all ranges (skipping over the ones that finish early). sequence Ditto slide A fixed-sized sliding window iteration of size windowSize over a source range by a custom stepSize . stride Iterates range r with stride n . If the range is a random-access range, moves by indexing into the range; otherwise, moves by successive calls to popFront . Applying stride twice to the same range results in a stride with a step that is the product of the two applications. It is an error for n to be 0. tail Return a range advanced to within _n elements of the end of range . take Lazily takes only up to n elements of a range. This is particularly useful when using with infinite ranges. takeExactly Similar to $(LREF take), but assumes that range has at least $(D n) elements. Consequently, the result of $(D takeExactly(range, n)) always defines the length property (and initializes it to n ) even when range itself does not define length . takeNone Returns an empty range which is statically known to be empty and is guaranteed to have length and be random access regardless of R 's capabilities. takeOne Returns a range with at most one element; for example, $(D takeOne([42, 43, 44])) returns a range consisting of the integer $(D 42). Calling popFront() off that range renders it empty. tee Implements a \"tee\" style pipe, wrapping an input range so that elements of the range can be passed to a provided function or $(LREF OutputRange) as they are iterated over. This is useful for printing out intermediate values in a long chain of range code, performing some operation with side-effects on each call to front or popFront , or diverting the elements of a range into an auxiliary $(LREF OutputRange). transposed Given a range of ranges, returns a range of ranges where the $(I i)'th subrange contains the $(I i)'th elements of the original subranges. transversal Ditto zip Ditto Variables Name Description isSomeFiniteCharInputRange This simplifies a commonly used idiom in phobos for accepting any kind of string parameter. The type R can for example be a simple string, chained string using $(REF chain, std,range), $(REF chainPath, std,path) or any other input range of characters. isTwoWayCompatible Returns true if fn accepts variables of type T1 and T2 in any order. The following code should compile: --- (ref T1 a, ref T2 b) { fn(a, b); fn(b, a); } ---"
  },
  "phobos/std/range/Recurrence/Functions/front.html": {
    "href": "phobos/std/range/Recurrence/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.range Parent Recurrence front() StateType front( )"
  },
  "phobos/std/range/Recurrence/Functions/popFront.html": {
    "href": "phobos/std/range/Recurrence/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.range Parent Recurrence popFront() void popFront( )"
  },
  "phobos/std/range/Recurrence/Functions/save.html": {
    "href": "phobos/std/range/Recurrence/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.range Parent Recurrence save() <bug: unknown> save( )"
  },
  "phobos/std/range/RefRange/Functions/back.html": {
    "href": "phobos/std/range/RefRange/Functions/back.html",
    "title": "Overloads for - back | Marmos Demo",
    "keywords": "Overloads for - back Module std.range Parent RefRange back() <bug: unknown> back( ) auto Only defined if isBidirectionalRange!R is true . back() <bug: unknown> back( ) auto Ditto back(value) <bug: unknown> back( ElementType!(R) value ) auto Ditto"
  },
  "phobos/std/range/RefRange/Functions/empty.html": {
    "href": "phobos/std/range/RefRange/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.range Parent RefRange empty() bool empty( ) empty() bool empty( ) Ditto"
  },
  "phobos/std/range/RefRange/Functions/front.html": {
    "href": "phobos/std/range/RefRange/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.range Parent RefRange front() <bug: unknown> front( ) auto front() <bug: unknown> front( ) auto Ditto front(value) <bug: unknown> front( ElementType!(R) value ) auto Ditto"
  },
  "phobos/std/range/RefRange/Functions/length.html": {
    "href": "phobos/std/range/RefRange/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.range Parent RefRange length() size_t length( ) Only defined if hasLength!R is true . length() size_t length( ) ditto"
  },
  "phobos/std/range/RefRange/Functions/moveAt.html": {
    "href": "phobos/std/range/RefRange/Functions/moveAt.html",
    "title": "Overloads for - moveAt | Marmos Demo",
    "keywords": "Overloads for - moveAt Module std.range Parent RefRange moveAt(index) <bug: unknown> moveAt( size_t index ) auto Only defined if hasMobileElements!R and isRandomAccessRange!R are true ."
  },
  "phobos/std/range/RefRange/Functions/moveBack.html": {
    "href": "phobos/std/range/RefRange/Functions/moveBack.html",
    "title": "Overloads for - moveBack | Marmos Demo",
    "keywords": "Overloads for - moveBack Module std.range Parent RefRange moveBack() <bug: unknown> moveBack( ) auto Only defined if hasMobileElements!R and isBidirectionalRange!R are true ."
  },
  "phobos/std/range/RefRange/Functions/moveFront.html": {
    "href": "phobos/std/range/RefRange/Functions/moveFront.html",
    "title": "Overloads for - moveFront | Marmos Demo",
    "keywords": "Overloads for - moveFront Module std.range Parent RefRange moveFront() <bug: unknown> moveFront( ) auto Only defined if hasMobileElements!R and isForwardRange!R are true ."
  },
  "phobos/std/range/RefRange/Functions/opAssign.html": {
    "href": "phobos/std/range/RefRange/Functions/opAssign.html",
    "title": "Overloads for - opAssign | Marmos Demo",
    "keywords": "Overloads for - opAssign Module std.range Parent RefRange opAssign(rhs) <bug: unknown> opAssign( RefRange rhs ) auto This does not assign the pointer of rhs to this RefRange . Rather it assigns the range pointed to by rhs to the range pointed to by this RefRange . This is because $(I any) operation on a RefRange is the same is if it occurred to the original range. The one exception is when a RefRange is assigned null either directly or because rhs is null . In that case, RefRange no longer refers to the original range but is null . opAssign(rhs) void opAssign( <bug: unknown> rhs )"
  },
  "phobos/std/range/RefRange/Functions/opSlice.html": {
    "href": "phobos/std/range/RefRange/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.range Parent RefRange opSlice() <bug: unknown> opSlice( ) auto Ditto opSlice() <bug: unknown> opSlice( ) auto Ditto"
  },
  "phobos/std/range/RefRange/Functions/popBack.html": {
    "href": "phobos/std/range/RefRange/Functions/popBack.html",
    "title": "Overloads for - popBack | Marmos Demo",
    "keywords": "Overloads for - popBack Module std.range Parent RefRange popBack() void popBack( ) Ditto"
  },
  "phobos/std/range/RefRange/Functions/popFront.html": {
    "href": "phobos/std/range/RefRange/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.range Parent RefRange popFront() void popFront( )"
  },
  "phobos/std/range/RefRange/Functions/ptr.html": {
    "href": "phobos/std/range/RefRange/Functions/ptr.html",
    "title": "Overloads for - ptr | Marmos Demo",
    "keywords": "Overloads for - ptr Module std.range Parent RefRange ptr() <bug: unknown> ptr( ) A pointer to the wrapped range."
  },
  "phobos/std/range/RefRange/Functions/save.html": {
    "href": "phobos/std/range/RefRange/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.range Parent RefRange save() <bug: unknown> save( ) auto Only defined if isForwardRange!R is true . save() <bug: unknown> save( ) auto Ditto"
  },
  "phobos/std/range/Repeat/Functions/back.html": {
    "href": "phobos/std/range/Repeat/Functions/back.html",
    "title": "Overloads for - back | Marmos Demo",
    "keywords": "Overloads for - back Module std.range Parent Repeat back() T back( ) ditto"
  },
  "phobos/std/range/Repeat/Functions/front.html": {
    "href": "phobos/std/range/Repeat/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.range Parent Repeat front() T front( ) Range primitives"
  },
  "phobos/std/range/Repeat/Functions/opIndex.html": {
    "href": "phobos/std/range/Repeat/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.range Parent Repeat opIndex(__anonymous) T opIndex( size_t __anonymous ) ditto"
  },
  "phobos/std/range/Repeat/Functions/opSlice.html": {
    "href": "phobos/std/range/Repeat/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.range Parent Repeat opSlice(i, j) <bug: unknown> opSlice( size_t i, size_t j ) auto ditto opSlice(__anonymous, __anonymous) <bug: unknown> opSlice( size_t __anonymous, DollarToken __anonymous ) auto ditto"
  },
  "phobos/std/range/Repeat/Functions/popBack.html": {
    "href": "phobos/std/range/Repeat/Functions/popBack.html",
    "title": "Overloads for - popBack | Marmos Demo",
    "keywords": "Overloads for - popBack Module std.range Parent Repeat popBack() void popBack( ) ditto"
  },
  "phobos/std/range/Repeat/Functions/popFront.html": {
    "href": "phobos/std/range/Repeat/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.range Parent Repeat popFront() void popFront( ) ditto"
  },
  "phobos/std/range/Repeat/Functions/save.html": {
    "href": "phobos/std/range/Repeat/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.range Parent Repeat save() <bug: unknown> save( ) auto ditto"
  },
  "phobos/std/range/Sequence/Functions/front.html": {
    "href": "phobos/std/range/Sequence/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.range Parent Sequence front() ElementType front( )"
  },
  "phobos/std/range/Sequence/Functions/opIndex.html": {
    "href": "phobos/std/range/Sequence/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.range Parent Sequence opIndex(n) ElementType opIndex( size_t n )"
  },
  "phobos/std/range/Sequence/Functions/opSlice.html": {
    "href": "phobos/std/range/Sequence/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.range Parent Sequence opSlice(lower, upper) <bug: unknown> opSlice( size_t lower, size_t upper ) auto opSlice(lower, __anonymous) <bug: unknown> opSlice( size_t lower, DollarToken __anonymous ) auto"
  },
  "phobos/std/range/Sequence/Functions/popFront.html": {
    "href": "phobos/std/range/Sequence/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.range Parent Sequence popFront() void popFront( )"
  },
  "phobos/std/range/Sequence/Functions/save.html": {
    "href": "phobos/std/range/Sequence/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.range Parent Sequence save() Sequence save( )"
  },
  "phobos/std/range/Slides/Functions/back.html": {
    "href": "phobos/std/range/Slides/Functions/back.html",
    "title": "Overloads for - back | Marmos Demo",
    "keywords": "Overloads for - back Module std.range Parent Slides back() <bug: unknown> back( ) auto Bidirectional range primitives. Provided only if both hasSlicing!Source and !isInfinite!Source are true ."
  },
  "phobos/std/range/Slides/Functions/empty.html": {
    "href": "phobos/std/range/Slides/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.range Parent Slides empty() bool empty( ) Ditto"
  },
  "phobos/std/range/Slides/Functions/front.html": {
    "href": "phobos/std/range/Slides/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.range Parent Slides front() <bug: unknown> front( ) auto Forward range primitives. Always present."
  },
  "phobos/std/range/Slides/Functions/gap.html": {
    "href": "phobos/std/range/Slides/Functions/gap.html",
    "title": "Overloads for - gap | Marmos Demo",
    "keywords": "Overloads for - gap Module std.range Parent Slides gap() size_t gap( )"
  },
  "phobos/std/range/Slides/Functions/hasPartialElements.html": {
    "href": "phobos/std/range/Slides/Functions/hasPartialElements.html",
    "title": "Overloads for - hasPartialElements | Marmos Demo",
    "keywords": "Overloads for - hasPartialElements Module std.range Parent Slides hasPartialElements() bool hasPartialElements( )"
  },
  "phobos/std/range/Slides/Functions/length.html": {
    "href": "phobos/std/range/Slides/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.range Parent Slides length() size_t length( ) Length. Only if hasLength!Source is true"
  },
  "phobos/std/range/Slides/Functions/numberOfFullFrames.html": {
    "href": "phobos/std/range/Slides/Functions/numberOfFullFrames.html",
    "title": "Overloads for - numberOfFullFrames | Marmos Demo",
    "keywords": "Overloads for - numberOfFullFrames Module std.range Parent Slides numberOfFullFrames() size_t numberOfFullFrames( )"
  },
  "phobos/std/range/Slides/Functions/opDollar.html": {
    "href": "phobos/std/range/Slides/Functions/opDollar.html",
    "title": "Overloads for - opDollar | Marmos Demo",
    "keywords": "Overloads for - opDollar Module std.range Parent Slides opDollar() DollarToken opDollar( )"
  },
  "phobos/std/range/Slides/Functions/opIndex.html": {
    "href": "phobos/std/range/Slides/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.range Parent Slides opIndex(index) <bug: unknown> opIndex( size_t index ) auto Indexing and slicing operations. Provided only if hasSlicing!Source is true ."
  },
  "phobos/std/range/Slides/Functions/opSlice.html": {
    "href": "phobos/std/range/Slides/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.range Parent Slides opSlice(lower, upper) <bug: unknown> opSlice( size_t lower, size_t upper ) ditto opSlice(lower, __anonymous) <bug: unknown> opSlice( size_t lower, DollarToken __anonymous )"
  },
  "phobos/std/range/Slides/Functions/popBack.html": {
    "href": "phobos/std/range/Slides/Functions/popBack.html",
    "title": "Overloads for - popBack | Marmos Demo",
    "keywords": "Overloads for - popBack Module std.range Parent Slides popBack() void popBack( ) Ditto"
  },
  "phobos/std/range/Slides/Functions/popFront.html": {
    "href": "phobos/std/range/Slides/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.range Parent Slides popFront() void popFront( ) Ditto"
  },
  "phobos/std/range/Slides/Functions/save.html": {
    "href": "phobos/std/range/Slides/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.range Parent Slides save() <bug: unknown> save( ) Ditto"
  },
  "phobos/std/range/SortedRange/Functions/back.html": {
    "href": "phobos/std/range/SortedRange/Functions/back.html",
    "title": "Overloads for - back | Marmos Demo",
    "keywords": "Overloads for - back Module std.range Parent SortedRange back() <bug: unknown> back( ) auto Ditto"
  },
  "phobos/std/range/SortedRange/Functions/empty.html": {
    "href": "phobos/std/range/SortedRange/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.range Parent SortedRange empty() bool empty( ) Range primitives."
  },
  "phobos/std/range/SortedRange/Functions/front.html": {
    "href": "phobos/std/range/SortedRange/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.range Parent SortedRange front() <bug: unknown> front( ) auto Ditto"
  },
  "phobos/std/range/SortedRange/Functions/opIndex.html": {
    "href": "phobos/std/range/SortedRange/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.range Parent SortedRange opIndex(i) <bug: unknown> opIndex( size_t i ) auto Ditto"
  },
  "phobos/std/range/SortedRange/Functions/opSlice.html": {
    "href": "phobos/std/range/SortedRange/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.range Parent SortedRange opSlice(a, b) <bug: unknown> opSlice( size_t a, size_t b ) auto Ditto"
  },
  "phobos/std/range/SortedRange/Functions/popBack.html": {
    "href": "phobos/std/range/SortedRange/Functions/popBack.html",
    "title": "Overloads for - popBack | Marmos Demo",
    "keywords": "Overloads for - popBack Module std.range Parent SortedRange popBack() void popBack( ) Ditto"
  },
  "phobos/std/range/SortedRange/Functions/popFront.html": {
    "href": "phobos/std/range/SortedRange/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.range Parent SortedRange popFront() void popFront( ) Ditto"
  },
  "phobos/std/range/SortedRange/Functions/release.html": {
    "href": "phobos/std/range/SortedRange/Functions/release.html",
    "title": "Overloads for - release | Marmos Demo",
    "keywords": "Overloads for - release Module std.range Parent SortedRange release() <bug: unknown> release( ) auto Releases the controlled range and returns it. This does the opposite of $(LREF assumeSorted): instead of turning a range into a SortedRange , it extracts the original range back out of the SortedRange using $(REF, move, std,algorithm,mutation)."
  },
  "phobos/std/range/SortedRange/Functions/roughlyVerifySorted.html": {
    "href": "phobos/std/range/SortedRange/Functions/roughlyVerifySorted.html",
    "title": "Overloads for - roughlyVerifySorted | Marmos Demo",
    "keywords": "Overloads for - roughlyVerifySorted Module std.range Parent SortedRange roughlyVerifySorted(r) void roughlyVerifySorted( Range r )"
  },
  "phobos/std/range/SortedRange/Functions/save.html": {
    "href": "phobos/std/range/SortedRange/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.range Parent SortedRange save() <bug: unknown> save( ) auto Ditto"
  },
  "phobos/std/range/SortedRange/Functions/strictlyVerifySorted.html": {
    "href": "phobos/std/range/SortedRange/Functions/strictlyVerifySorted.html",
    "title": "Overloads for - strictlyVerifySorted | Marmos Demo",
    "keywords": "Overloads for - strictlyVerifySorted Module std.range Parent SortedRange strictlyVerifySorted(r) void strictlyVerifySorted( Range r )"
  },
  "phobos/std/range/Structs/Bitwise.html": {
    "href": "phobos/std/range/Structs/Bitwise.html",
    "title": "Struct - Bitwise | Marmos Demo",
    "keywords": "Struct - Bitwise Module std.range public struct Bitwise { // alias ElemType = <todo: marmos support pending>; // alias opDollar = <todo: marmos support pending>; // alias UnsignedElemType = <todo: marmos support pending>; // bool back( ) ; // bool front( ) ; // size_t length( ) ; // <bug: unknown> mask( size_t maskPos ) auto; // Return the `n` th bit within the range bool opIndex( size_t n ) ; // Assigns `flag` to the `n` th bit within the range void opIndexAssign( bool flag, size_t n ) ; // Bitwise!(R) opSlice( ) ; // Bitwise!(R) opSlice( size_t start, size_t end ) ; // void popBack( ) ; // void popFront( ) ; // <bug: unknown> save( ) ; // size_t backMaskPos; // __enumMember bitsNum; // __enumMember empty; // size_t maskPos; // R parent; } Aliases Name Description ElemType opDollar UnsignedElemType Functions Name Description back front length mask opIndex Return the n th bit within the range opIndexAssign Assigns flag to the n th bit within the range opSlice popBack popFront save Variables Name Description backMaskPos bitsNum empty maskPos parent"
  },
  "phobos/std/range/Structs/ChooseResult.html": {
    "href": "phobos/std/range/Structs/ChooseResult.html",
    "title": "Struct - ChooseResult | Marmos Demo",
    "keywords": "Struct - ChooseResult Module std.range public struct ChooseResult { // alias opDollar = <todo: marmos support pending>; // <bug: unknown> back( ) auto; // <bug: unknown> front( ) auto; // size_t length( ) ; // <bug: unknown> moveAt( size_t index ) auto; // <bug: unknown> moveBack( ) auto; // <bug: unknown> moveFront( ) auto; // void opAssign( ChooseResult r ) ; // <bug: unknown> opIndex( size_t index ) auto; // <bug: unknown> opSlice( size_t begin, size_t end ) auto; // void popBack( ) ; // void popFront( ) ; // <bug: unknown> save( ) auto; // size_t chosenI; // bool empty; // Ranges rs; } Aliases Name Description opDollar Functions Name Description back front length moveAt moveBack moveFront opAssign opIndex opSlice popBack popFront save Variables Name Description chosenI empty rs"
  },
  "phobos/std/range/Structs/Chunks.html": {
    "href": "phobos/std/range/Structs/Chunks.html",
    "title": "Struct - Chunks | Marmos Demo",
    "keywords": "Struct - Chunks Module std.range public struct Chunks { // Bidirectional range primitives. Provided only if both `hasSlicing!Source` and `hasLength!Source` are `true` . <bug: unknown> back( ) auto; // Ditto bool empty( ) ; // Input range primitives. Always present. <bug: unknown> front( ) auto; // Length. Only if `hasLength!Source` is `true` size_t length( ) ; // DollarToken opDollar( ) ; // Indexing and slicing operations. Provided only if `hasSlicing!Source` is `true` . <bug: unknown> opIndex( size_t index ) auto; // Ditto <bug: unknown> opSlice( size_t lower, size_t upper ) ; // <bug: unknown> opSlice( size_t lower, DollarToken __anonymous ) ; // Ditto void popBack( ) ; // Ditto void popFront( ) ; // Forward range primitives. Only present if `Source` is a forward range. <bug: unknown> save( ) ; // __enumMember hasSliceToEnd; } About This range iterates over fixed-sized chunks of size chunkSize of a source range. Source must be an $(REF_ALTTEXT input range, isInputRange, std,range,primitives). chunkSize must be greater than zero. If !isInfinite!Source and source.walkLength is not evenly divisible by chunkSize , the back element of this range will contain fewer than chunkSize elements. If Source is a forward range, the resulting range will be forward ranges as well. Otherwise, the resulting chunks will be input ranges consuming the same input: iterating over front will shrink the chunk such that subsequent invocations of front will no longer return the full chunk, and calling popFront on the outer range will invalidate any lingering references to previous values of front . Params source Range from which the chunks will be selected chunkSize Chunk size See_Also: $(LREF slide) Returns: Range of chunks. Functions Name Description back Bidirectional range primitives. Provided only if both hasSlicing!Source and hasLength!Source are true . empty Ditto front Input range primitives. Always present. length Length. Only if hasLength!Source is true opDollar opIndex Indexing and slicing operations. Provided only if hasSlicing!Source is true . opSlice Ditto popBack Ditto popFront Ditto save Forward range primitives. Only present if Source is a forward range. Variables Name Description hasSliceToEnd"
  },
  "phobos/std/range/Structs/Cycle.html": {
    "href": "phobos/std/range/Structs/Cycle.html",
    "title": "Struct - Cycle | Marmos Demo",
    "keywords": "Struct - Cycle Module std.range public struct Cycle { // alias ElementType = <todo: marmos support pending>; // ditto ElementType front( ) ; // ditto ElementType opIndex( size_t n ) ; // ditto <bug: unknown> opSlice( size_t i, size_t j ) auto; // ditto <bug: unknown> opSlice( size_t i, DollarToken __anonymous ) ; // ditto void popFront( ) ; // ditto Cycle save( ) ; // ditto bool empty; // ditto __enumMember opDollar; } About ditto Aliases Name Description ElementType Functions Name Description front ditto opIndex ditto opSlice ditto popFront ditto save ditto Variables Name Description empty ditto opDollar ditto"
  },
  "phobos/std/range/Structs/EvenChunks.html": {
    "href": "phobos/std/range/Structs/EvenChunks.html",
    "title": "Struct - EvenChunks | Marmos Demo",
    "keywords": "Struct - EvenChunks Module std.range public struct EvenChunks { // Ditto <bug: unknown> back( ) auto; // Ditto bool empty( ) ; // Forward range primitives. Always present. <bug: unknown> front( ) auto; // Length size_t length( ) ; // Indexing, slicing and bidirectional operations and range primitives. Provided only if `hasSlicing!Source` is `true` . <bug: unknown> opIndex( size_t index ) auto; // Ditto <bug: unknown> opSlice( size_t lower, size_t upper ) ; // Ditto void popBack( ) ; // Ditto void popFront( ) ; // Ditto <bug: unknown> save( ) ; } About This range splits a source range into chunkCount chunks of approximately equal length. Source must be a forward range with known length. Unlike $(LREF chunks), evenChunks takes a chunk count (not size). The returned range will contain zero or more $(D source.length / chunkCount + 1) elements followed by $(D source.length / chunkCount) elements. If $(D source.length < chunkCount), some chunks will be empty. chunkCount must not be zero, unless source is also empty. Functions Name Description back Ditto empty Ditto front Forward range primitives. Always present. length Length opIndex Indexing, slicing and bidirectional operations and range primitives. Provided only if hasSlicing!Source is true . opSlice Ditto popBack Ditto popFront Ditto save Ditto"
  },
  "phobos/std/range/Structs/FrontTransversal.html": {
    "href": "phobos/std/range/Structs/FrontTransversal.html",
    "title": "Struct - FrontTransversal | Marmos Demo",
    "keywords": "Struct - FrontTransversal Module std.range public struct FrontTransversal { // alias ElementType = <todo: marmos support pending>; // alias RangeOfRanges = <todo: marmos support pending>; // alias RangeType = <todo: marmos support pending>; // Bidirectional primitives. They are offered if $(D isBidirectionalRange!RangeOfRanges). <bug: unknown> back( ) auto; // void back( ElementType val ) ; // Ditto <bug: unknown> front( ) auto; // void front( ElementType val ) ; // Ditto ElementType moveAt( size_t n ) ; // Ditto ElementType moveBack( ) ; // Ditto ElementType moveFront( ) ; // Random-access primitive. It is offered if $(D isRandomAccessRange!RangeOfRanges && (opt == TransverseOptions.assumeNotJagged || opt == TransverseOptions.enforceNotJagged)). <bug: unknown> opIndex( size_t n ) auto; // Ditto void opIndexAssign( ElementType val, size_t n ) ; // Slicing if offered if `RangeOfRanges` supports slicing and all the conditions for supporting indexing are met. <bug: unknown> opSlice( size_t lower, size_t upper ) ; // <bug: unknown> opSlice( ) auto; // Ditto void popBack( ) ; // Ditto void popFront( ) ; // void prime( ) ; // Duplicates this `frontTransversal` . Note that only the encapsulating range of range will be duplicated. Underlying ranges will not be duplicated. FrontTransversal save( ) ; // Forward range primitives. bool empty; } About Given a range of ranges, iterate transversally through the first elements of each of the enclosed ranges. Aliases Name Description ElementType RangeOfRanges RangeType Functions Name Description back Bidirectional primitives. They are offered if $(D isBidirectionalRange!RangeOfRanges). front Ditto moveAt Ditto moveBack Ditto moveFront Ditto opIndex Random-access primitive. It is offered if $(D isRandomAccessRange!RangeOfRanges && (opt == TransverseOptions.assumeNotJagged |``| opt == TransverseOptions.enforceNotJagged)). opIndexAssign Ditto opSlice Slicing if offered if RangeOfRanges supports slicing and all the conditions for supporting indexing are met. popBack Ditto popFront Ditto prime save Duplicates this frontTransversal . Note that only the encapsulating range of range will be duplicated. Underlying ranges will not be duplicated. Variables Name Description empty Forward range primitives."
  },
  "phobos/std/range/Structs/Generator.html": {
    "href": "phobos/std/range/Structs/Generator.html",
    "title": "Struct - Generator | Marmos Demo",
    "keywords": "Struct - Generator Module std.range public struct Generator { // alias RetType = <todo: marmos support pending>; // ditto <bug: unknown> front( ) ; // ditto void popFront( ) ; // <bug: unknown> elem_; // Range primitives __enumMember empty; // <bug: unknown> fun; // __enumMember returnByRef_; } Aliases Name Description RetType Functions Name Description front ditto popFront ditto Variables Name Description elem_ empty Range primitives fun returnByRef_"
  },
  "phobos/std/range/Structs/Indexed.html": {
    "href": "phobos/std/range/Structs/Indexed.html",
    "title": "Struct - Indexed | Marmos Demo",
    "keywords": "Struct - Indexed Module std.range public struct Indexed { // Ditto <bug: unknown> back( ) auto; // Ditto <bug: unknown> back( ElementType!(Source) newVal ) auto; // Range primitives <bug: unknown> front( ) auto; // Ditto <bug: unknown> front( ElementType!(Source) newVal ) auto; // Returns the indices range. Indices indices( ) ; // Ditto <bug: unknown> moveAt( size_t index ) auto; // Ditto <bug: unknown> moveBack( ) auto; // Ditto <bug: unknown> moveFront( ) auto; // Ditto <bug: unknown> opIndex( size_t index ) auto; // Ditto <bug: unknown> opIndexAssign( ElementType!(Source) newVal, size_t index ) auto; // Ditto <bug: unknown> opSlice( size_t a, size_t b ) ; // Returns the physical index into the source range corresponding to a given logical index. This is useful, for example, when indexing an `Indexed` without adding another layer of indirection. size_t physicalIndex( size_t logicalIndex ) ; // Ditto void popBack( ) ; // Ditto void popFront( ) ; // Ditto <bug: unknown> save( ) ; // Returns the source range. Source source( ) ; // bool empty; } About This struct takes two ranges, source and indices , and creates a view of source as if its elements were reordered according to indices . indices may include only a subset of the elements of source and may also repeat elements. Source must be a random access range. The returned range will be bidirectional or random-access if Indices is bidirectional or random-access, respectively. Functions Name Description back Ditto front Range primitives indices Returns the indices range. moveAt Ditto moveBack Ditto moveFront Ditto opIndex Ditto opIndexAssign Ditto opSlice Ditto physicalIndex Returns the physical index into the source range corresponding to a given logical index. This is useful, for example, when indexing an Indexed without adding another layer of indirection. popBack Ditto popFront Ditto save Ditto source Returns the source range. Variables Name Description empty"
  },
  "phobos/std/range/Structs/Lockstep.html": {
    "href": "phobos/std/range/Structs/Lockstep.html",
    "title": "Struct - Lockstep | Marmos Demo",
    "keywords": "Struct - Lockstep Module std.range public struct Lockstep { // alias R = <todo: marmos support pending>; } About Iterate multiple ranges in lockstep using a foreach loop. In contrast to $(LREF zip) it allows reference access to its elements. If only a single range is passed in, the Lockstep aliases itself away. If the ranges are of different lengths and s == StoppingPolicy.shortest stop after the shortest range is empty. If the ranges are of different lengths and s == StoppingPolicy.requireSameLength , throw an exception. s may not be StoppingPolicy.longest , and passing this will throw an exception. Iterating over Lockstep in reverse and with an index is only possible when s == StoppingPolicy.requireSameLength , in order to preserve indexes. If an attempt is made at iterating in reverse when s == StoppingPolicy.shortest , an exception will be thrown. By default StoppingPolicy is set to StoppingPolicy.shortest . Limitations: The pure , @safe , @nogc , or nothrow attributes cannot be inferred for lockstep iteration. $(LREF zip) can infer the first two due to a different implementation. See_Also: $(LREF zip) lockstep is similar to $(LREF zip), but zip bundles its elements and returns a range. lockstep also supports reference access. Use zip if you want to pass the result to a range function. Aliases Name Description R"
  },
  "phobos/std/range/Structs/NullSink.html": {
    "href": "phobos/std/range/Structs/NullSink.html",
    "title": "Struct - NullSink | Marmos Demo",
    "keywords": "Struct - NullSink Module std.range public struct NullSink { } About An OutputRange that discards the data it receives."
  },
  "phobos/std/range/Structs/OnlyResult.html": {
    "href": "phobos/std/range/Structs/OnlyResult.html",
    "title": "Struct - OnlyResult | Marmos Demo",
    "keywords": "Struct - OnlyResult Module std.range public struct OnlyResult { // alias opDollar = <todo: marmos support pending>; // void assignFront( T newValue ) ; // T back( ) ; // void back( T value ) ; // bool empty( ) ; // T fetchFront( ) ; // T front( ) ; // void front( T value ) ; // size_t length( ) ; // T opIndex( size_t i ) ; // void opIndexAssign( T value, size_t i ) ; // OnlyResult opSlice( ) ; // OnlyResult opSlice( size_t from, size_t to ) ; // void popBack( ) ; // void popFront( ) ; // <bug: unknown> save( ) auto; } Aliases Name Description opDollar Functions Name Description assignFront back empty fetchFront front length opIndex opIndexAssign opSlice popBack popFront save"
  },
  "phobos/std/range/Structs/Recurrence.html": {
    "href": "phobos/std/range/Structs/Recurrence.html",
    "title": "Struct - Recurrence | Marmos Demo",
    "keywords": "Struct - Recurrence Module std.range public struct Recurrence { // StateType front( ) ; // void popFront( ) ; // <bug: unknown> save( ) ; // bool empty; } About Creates a mathematical sequence given the initial values and a recurrence function that computes the next value from the existing values. The sequence comes in the form of an infinite forward range. The type Recurrence itself is seldom used directly; most often, recurrences are obtained by calling the function $(D recurrence). When calling recurrence , the function that computes the next value is specified as a template argument, and the initial values in the recurrence are passed as regular arguments. For example, in a Fibonacci sequence, there are two initial values (and therefore a state size of 2) because computing the next Fibonacci value needs the past two values. The signature of this function should be ---- auto fun(R)(R state, size_t n) ---- where n will be the index of the current value, and state will be an opaque state vector that can be indexed with array-indexing notation state[i] , where valid values of i range from $(D (n - 1)) to $(D (n - State.length)). If the function is passed in string form, the state has name \"a\" and the zero-based index in the recurrence has name \"n\" . The given string must return the desired value for a[n] given a[n - 1] , a[n - 2] , a[n - 3] ,..., a[n - stateSize] . The state size is dictated by the number of arguments passed to the call to recurrence . The Recurrence struct itself takes care of managing the recurrence's state and shifting it appropriately. Functions Name Description front popFront save Variables Name Description empty"
  },
  "phobos/std/range/Structs/RefRange.html": {
    "href": "phobos/std/range/Structs/RefRange.html",
    "title": "Struct - RefRange | Marmos Demo",
    "keywords": "Struct - RefRange Module std.range public struct RefRange { // Ditto alias opDollar = <todo: marmos support pending>; // Only defined if `isBidirectionalRange!R` is `true` . <bug: unknown> back( ) auto; // Ditto <bug: unknown> back( ) auto; // Ditto <bug: unknown> back( ElementType!(R) value ) auto; // bool empty( ) ; // Ditto bool empty( ) ; // <bug: unknown> front( ) auto; // Ditto <bug: unknown> front( ) auto; // Ditto <bug: unknown> front( ElementType!(R) value ) auto; // Only defined if `hasLength!R` is `true` . size_t length( ) ; // ditto size_t length( ) ; // Only defined if `hasMobileElements!R` and `isRandomAccessRange!R` are `true` . <bug: unknown> moveAt( size_t index ) auto; // Only defined if `hasMobileElements!R` and `isBidirectionalRange!R` are `true` . <bug: unknown> moveBack( ) auto; // Only defined if `hasMobileElements!R` and `isForwardRange!R` are `true` . <bug: unknown> moveFront( ) auto; // This does not assign the pointer of `rhs` to this `RefRange` . Rather it assigns the range pointed to by `rhs` to the range pointed to by this `RefRange` . This is because $(I any) operation on a `RefRange` is the same is if it occurred to the original range. The one exception is when a `RefRange` is assigned `null` either directly or because `rhs` is `null` . In that case, `RefRange` no longer refers to the original range but is `null` . <bug: unknown> opAssign( RefRange rhs ) auto; // void opAssign( <bug: unknown> rhs ) ; // Ditto <bug: unknown> opSlice( ) auto; // Ditto <bug: unknown> opSlice( ) auto; // Ditto void popBack( ) ; // void popFront( ) ; // A pointer to the wrapped range. <bug: unknown> ptr( ) ; // Only defined if `isForwardRange!R` is `true` . <bug: unknown> save( ) auto; // Ditto <bug: unknown> save( ) auto; } About Wrapper which effectively makes it possible to pass a range by reference. Both the original range and the RefRange will always have the exact same elements. Any operation done on one will affect the other. So, for instance, if it's passed to a function which would implicitly copy the original range if it were passed to it, the original range is $(I not) copied but is consumed as if it were a reference type. Note save works as normal and operates on a new range, so if save is ever called on the RefRange , then no operations on the saved range will affect the original. Params range the range to construct the RefRange from Returns A RefRange . If the given range is a class type (and thus is already a reference type), then the original range is returned rather than a RefRange . Aliases Name Description opDollar Ditto Functions Name Description back Only defined if isBidirectionalRange!R is true . empty front length Only defined if hasLength!R is true . moveAt Only defined if hasMobileElements!R and isRandomAccessRange!R are true . moveBack Only defined if hasMobileElements!R and isBidirectionalRange!R are true . moveFront Only defined if hasMobileElements!R and isForwardRange!R are true . opAssign This does not assign the pointer of rhs to this RefRange . Rather it assigns the range pointed to by rhs to the range pointed to by this RefRange . This is because $(I any) operation on a RefRange is the same is if it occurred to the original range. The one exception is when a RefRange is assigned null either directly or because rhs is null . In that case, RefRange no longer refers to the original range but is null . opSlice Ditto popBack Ditto popFront ptr A pointer to the wrapped range. save Only defined if isForwardRange!R is true ."
  },
  "phobos/std/range/Structs/Repeat.html": {
    "href": "phobos/std/range/Structs/Repeat.html",
    "title": "Struct - Repeat | Marmos Demo",
    "keywords": "Struct - Repeat Module std.range public struct Repeat { // ditto T back( ) ; // Range primitives T front( ) ; // ditto T opIndex( size_t __anonymous ) ; // ditto <bug: unknown> opSlice( size_t i, size_t j ) auto; // ditto <bug: unknown> opSlice( size_t __anonymous, DollarToken __anonymous ) auto; // ditto void popBack( ) ; // ditto void popFront( ) ; // ditto <bug: unknown> save( ) auto; // ditto bool empty; // ditto __enumMember opDollar; } About Create a range which repeats one value. Params value the value to repeat n the number of times to repeat value Returns If n is not defined, an infinite random access range with slicing. If n is defined, a random access range with slicing. Functions Name Description back ditto front Range primitives opIndex ditto opSlice ditto popBack ditto popFront ditto save ditto Variables Name Description empty ditto opDollar ditto"
  },
  "phobos/std/range/Structs/Sequence.html": {
    "href": "phobos/std/range/Structs/Sequence.html",
    "title": "Struct - Sequence | Marmos Demo",
    "keywords": "Struct - Sequence Module std.range public struct Sequence { // alias compute = <todo: marmos support pending>; // alias ElementType = <todo: marmos support pending>; // ElementType front( ) ; // ElementType opIndex( size_t n ) ; // <bug: unknown> opSlice( size_t lower, size_t upper ) auto; // <bug: unknown> opSlice( size_t lower, DollarToken __anonymous ) auto; // void popFront( ) ; // Sequence save( ) ; // bool empty; // __enumMember opDollar; } About Sequence is similar to Recurrence except that iteration is presented in the so-called $(HTTP en.wikipedia.org/wiki/Closed_form, closed form). This means that the n th element in the series is computable directly from the initial values and n itself. This implies that the interface offered by Sequence is a random-access range, as opposed to the regular Recurrence , which only offers forward iteration. The state of the sequence is stored as a Tuple so it can be heterogeneous. Aliases Name Description compute ElementType Functions Name Description front opIndex opSlice popFront save Variables Name Description empty opDollar"
  },
  "phobos/std/range/Structs/Slides.html": {
    "href": "phobos/std/range/Structs/Slides.html",
    "title": "Struct - Slides | Marmos Demo",
    "keywords": "Struct - Slides Module std.range public struct Slides { // Bidirectional range primitives. Provided only if both `hasSlicing!Source` and `!isInfinite!Source` are `true` . <bug: unknown> back( ) auto; // Ditto bool empty( ) ; // Forward range primitives. Always present. <bug: unknown> front( ) auto; // size_t gap( ) ; // bool hasPartialElements( ) ; // Length. Only if `hasLength!Source` is `true` size_t length( ) ; // size_t numberOfFullFrames( ) ; // DollarToken opDollar( ) ; // Indexing and slicing operations. Provided only if `hasSlicing!Source` is `true` . <bug: unknown> opIndex( size_t index ) auto; // ditto <bug: unknown> opSlice( size_t lower, size_t upper ) ; // <bug: unknown> opSlice( size_t lower, DollarToken __anonymous ) ; // Ditto void popBack( ) ; // Ditto void popFront( ) ; // Ditto <bug: unknown> save( ) ; // bool hasShownPartialBefore; // __enumMember hasSliceToEnd; // __enumMember needsEndTracker; // Source source; // size_t stepSize; // size_t windowSize; } Functions Name Description back Bidirectional range primitives. Provided only if both hasSlicing!Source and !isInfinite!Source are true . empty Ditto front Forward range primitives. Always present. gap hasPartialElements length Length. Only if hasLength!Source is true numberOfFullFrames opDollar opIndex Indexing and slicing operations. Provided only if hasSlicing!Source is true . opSlice ditto popBack Ditto popFront Ditto save Ditto Variables Name Description hasShownPartialBefore hasSliceToEnd needsEndTracker source stepSize windowSize"
  },
  "phobos/std/range/Structs/SortedRange.html": {
    "href": "phobos/std/range/Structs/SortedRange.html",
    "title": "Struct - SortedRange | Marmos Demo",
    "keywords": "Struct - SortedRange Module std.range public struct SortedRange { // alias predFun = <todo: marmos support pending>; // Ditto <bug: unknown> back( ) auto; // Range primitives. bool empty( ) ; // Ditto <bug: unknown> front( ) auto; // Ditto <bug: unknown> opIndex( size_t i ) auto; // Ditto <bug: unknown> opSlice( size_t a, size_t b ) auto; // Ditto void popBack( ) ; // Ditto void popFront( ) ; // Releases the controlled range and returns it. <bug: unknown> release( ) auto; // void roughlyVerifySorted( Range r ) ; // Ditto <bug: unknown> save( ) auto; // void strictlyVerifySorted( Range r ) ; } About Represents a sorted range. In addition to the regular range primitives, supports additional operations that take advantage of the ordering, such as merge and binary search. To obtain a $(D SortedRange) from an unsorted range r , use $(REF sort, std,algorithm,sorting) which sorts r in place and returns the corresponding SortedRange . To construct a SortedRange from a range r that is known to be already sorted, use $(LREF assumeSorted). Params pred: The predicate used to define the sortedness opt: Controls how strongly the range is checked for sortedness. Will only be used for RandomAccessRanges . Will not be used in CTFE. Aliases Name Description predFun Functions Name Description back Ditto empty Range primitives. front Ditto opIndex Ditto opSlice Ditto popBack Ditto popFront Ditto release Releases the controlled range and returns it. roughlyVerifySorted save Ditto strictlyVerifySorted"
  },
  "phobos/std/range/Structs/Take.html": {
    "href": "phobos/std/range/Structs/Take.html",
    "title": "Struct - Take | Marmos Demo",
    "keywords": "Struct - Take Module std.range public struct Take { // ditto alias opDollar = <todo: marmos support pending>; // alias R = <todo: marmos support pending>; // alias Source = <todo: marmos support pending>; // ditto <bug: unknown> back( ) auto; // ditto void back( ElementType!(R) v ) ; // Range primitives bool empty( ) ; // ditto <bug: unknown> front( ) auto; // ditto void front( ElementType!(R) v ) ; // ditto size_t length( ) ; // Access to maximal length of the range. Note: the actual length of the range depends on the underlying range. If it has fewer elements, it will stop before maxLength is reached. size_t maxLength( ) ; // ditto <bug: unknown> moveAt( size_t index ) auto; // ditto <bug: unknown> moveBack( ) auto; // ditto <bug: unknown> moveFront( ) auto; // ditto <bug: unknown> opIndex( size_t index ) auto; // ditto void opIndexAssign( ElementType!(R) v, size_t index ) ; // ditto void popBack( ) ; // ditto void popFront( ) ; // ditto Take save( ) ; // User accessible in read and write R source; } About ditto Aliases Name Description opDollar ditto R Source Functions Name Description back ditto empty Range primitives front ditto length ditto maxLength Access to maximal length of the range. Note: the actual length of the range depends on the underlying range. If it has fewer elements, it will stop before maxLength is reached. moveAt ditto moveBack ditto moveFront ditto opIndex ditto opIndexAssign ditto popBack ditto popFront ditto save ditto Variables Name Description source User accessible in read and write"
  },
  "phobos/std/range/Structs/Transposed.html": {
    "href": "phobos/std/range/Structs/Transposed.html",
    "title": "Struct - Transposed | Marmos Demo",
    "keywords": "Struct - Transposed Module std.range public struct Transposed { // bool empty( ) ; // <bug: unknown> front( ) auto; // <bug: unknown> opIndex( size_t n ) auto; // <bug: unknown> opSlice( ) auto; // void popFront( ) ; } Functions Name Description empty front opIndex opSlice popFront"
  },
  "phobos/std/range/Structs/Transversal.html": {
    "href": "phobos/std/range/Structs/Transversal.html",
    "title": "Struct - Transversal | Marmos Demo",
    "keywords": "Struct - Transversal Module std.range public struct Transversal { // alias E = <todo: marmos support pending>; // alias InnerRange = <todo: marmos support pending>; // alias RangeOfRanges = <todo: marmos support pending>; // Bidirectional primitives. They are offered if $(D isBidirectionalRange!RangeOfRanges). <bug: unknown> back( ) auto; // Ditto void back( E val ) ; // Ditto <bug: unknown> front( ) auto; // Ditto void front( E val ) ; // Ditto E moveAt( size_t n ) ; // Ditto E moveBack( ) ; // Ditto E moveFront( ) ; // Random-access primitive. It is offered if $(D isRandomAccessRange!RangeOfRanges && (opt == TransverseOptions.assumeNotJagged || opt == TransverseOptions.enforceNotJagged)). <bug: unknown> opIndex( size_t n ) auto; // Ditto void opIndexAssign( E val, size_t n ) ; // Slicing if offered if `RangeOfRanges` supports slicing and all the conditions for supporting indexing are met. <bug: unknown> opSlice( size_t lower, size_t upper ) ; // <bug: unknown> opSlice( ) auto; // Ditto void popBack( ) ; // Ditto void popFront( ) ; // void prime( ) ; // Ditto <bug: unknown> save( ) ; // Forward range primitives. bool empty; } About Given a range of ranges, iterate transversally through the n th element of each of the enclosed ranges. This function is similar to unzip in other languages. Params opt Controls the assumptions the function makes about the lengths of the ranges rr = An input range of random access ranges Returns: At minimum, an input range. Range primitives such as bidirectionality and random access are given if the element type of rr provides them. Aliases Name Description E InnerRange RangeOfRanges Functions Name Description back Bidirectional primitives. They are offered if $(D isBidirectionalRange!RangeOfRanges). front Ditto moveAt Ditto moveBack Ditto moveFront Ditto opIndex Random-access primitive. It is offered if $(D isRandomAccessRange!RangeOfRanges && (opt == TransverseOptions.assumeNotJagged |``| opt == TransverseOptions.enforceNotJagged)). opIndexAssign Ditto opSlice Slicing if offered if RangeOfRanges supports slicing and all the conditions for supporting indexing are met. popBack Ditto popFront Ditto prime save Ditto Variables Name Description empty Forward range primitives."
  },
  "phobos/std/range/Structs/Zip.html": {
    "href": "phobos/std/range/Structs/Zip.html",
    "title": "Struct - Zip | Marmos Demo",
    "keywords": "Struct - Zip Module std.range public struct Zip { // alias ElementType = <todo: marmos support pending>; // Returns the length of this range. Defined only if all ranges define `length` . alias opDollar = <todo: marmos support pending>; // alias R = <todo: marmos support pending>; // Returns the rightmost element. ElementType back( ) ; // Returns the current iterated element. void back( ElementType v ) ; // Returns the current iterated element. ElementType front( ) ; // Sets the front of all iterated ranges. void front( ElementType v ) ; // Returns the length of this range. Defined only if all ranges define `length` . <bug: unknown> length( ) auto; // Destructively reads the `n` th element in the composite range. Defined if all ranges offer random access. ElementType moveAt( size_t n ) ; // Moves out the back. ElementType moveBack( ) ; // Moves out the front. ElementType moveFront( ) ; // Returns the `n` th element in the composite range. Defined if all ranges offer random access. ElementType opIndex( size_t n ) ; // Assigns to the `n` th element in the composite range. Defined if all ranges offer random access. void opIndexAssign( ElementType v, size_t n ) ; // Returns a slice of the range. Defined only if all range define slicing. <bug: unknown> opSlice( size_t from, size_t to ) auto; // Calls `popBack` for all controlled ranges. void popBack( ) ; // Advances to the next element in all controlled ranges. void popFront( ) ; // Zip save( ) ; // Returns `true` if the range is at end. The test depends on the stopping policy. bool empty; // R ranges; // StoppingPolicy stoppingPolicy; } About Iterate several ranges in lockstep. The element type is a proxy tuple that allows accessing the current element in the n th range by using e[n] . zip is similar to $(LREF lockstep), but lockstep doesn't bundle its elements and uses the opApply protocol. lockstep allows reference access to the elements in foreach iterations. Params: sp = controls what zip will do if the ranges are different lengths ranges = the ranges to zip together Returns: At minimum, an input range. Zip offers the lowest range facilities of all components, e.g. it offers random access iff all ranges offer random access, and also offers mutation and swapping if all ranges offer it. Due to this, Zip is extremely powerful because it allows manipulating several ranges in lockstep. Throws: An Exception if all of the ranges are not the same length and sp is set to StoppingPolicy.requireSameLength . Limitations: The @nogc and nothrow attributes cannot be inferred for the Zip struct because $(LREF StoppingPolicy) can vary at runtime. This limitation is not shared by the anonymous range returned by the zip function when not given an explicit StoppingPolicy as an argument. Aliases Name Description ElementType opDollar Returns the length of this range. Defined only if all ranges define length . R Functions Name Description back Returns the rightmost element. front Returns the current iterated element. length Returns the length of this range. Defined only if all ranges define length . moveAt Destructively reads the n th element in the composite range. Defined if all ranges offer random access. moveBack Moves out the back. moveFront Moves out the front. opIndex Returns the n th element in the composite range. Defined if all ranges offer random access. opIndexAssign Assigns to the n th element in the composite range. Defined if all ranges offer random access. opSlice Returns a slice of the range. Defined only if all range define slicing. popBack Calls popBack for all controlled ranges. popFront Advances to the next element in all controlled ranges. save Variables Name Description empty Returns true if the range is at end. The test depends on the stopping policy. ranges stoppingPolicy"
  },
  "phobos/std/range/Structs/ZipShortest.html": {
    "href": "phobos/std/range/Structs/ZipShortest.html",
    "title": "Struct - ZipShortest | Marmos Demo",
    "keywords": "Struct - ZipShortest Module std.range public struct ZipShortest { // alias ElementType = <todo: marmos support pending>; // alias opDollar = <todo: marmos support pending>; // alias R = <todo: marmos support pending>; // ElementType back( ) ; // ElementType front( ) ; // size_t length( ) ; // void popBack( ) ; // void popFront( ) ; // <bug: unknown> save( ) ; // bool empty; // bool isBackWellDefined; // Ranges ranges; } Aliases Name Description ElementType opDollar R Functions Name Description back front length popBack popFront save Variables Name Description empty isBackWellDefined ranges"
  },
  "phobos/std/range/Take/Functions/back.html": {
    "href": "phobos/std/range/Take/Functions/back.html",
    "title": "Overloads for - back | Marmos Demo",
    "keywords": "Overloads for - back Module std.range Parent Take back() <bug: unknown> back( ) auto ditto back(v) void back( ElementType!(R) v ) ditto"
  },
  "phobos/std/range/Take/Functions/empty.html": {
    "href": "phobos/std/range/Take/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.range Parent Take empty() bool empty( ) Range primitives"
  },
  "phobos/std/range/Take/Functions/front.html": {
    "href": "phobos/std/range/Take/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.range Parent Take front() <bug: unknown> front( ) auto ditto front(v) void front( ElementType!(R) v ) ditto"
  },
  "phobos/std/range/Take/Functions/length.html": {
    "href": "phobos/std/range/Take/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.range Parent Take length() size_t length( ) ditto"
  },
  "phobos/std/range/Take/Functions/maxLength.html": {
    "href": "phobos/std/range/Take/Functions/maxLength.html",
    "title": "Overloads for - maxLength | Marmos Demo",
    "keywords": "Overloads for - maxLength Module std.range Parent Take maxLength() size_t maxLength( ) Access to maximal length of the range. Note: the actual length of the range depends on the underlying range. If it has fewer elements, it will stop before maxLength is reached."
  },
  "phobos/std/range/Take/Functions/moveAt.html": {
    "href": "phobos/std/range/Take/Functions/moveAt.html",
    "title": "Overloads for - moveAt | Marmos Demo",
    "keywords": "Overloads for - moveAt Module std.range Parent Take moveAt(index) <bug: unknown> moveAt( size_t index ) auto ditto"
  },
  "phobos/std/range/Take/Functions/moveBack.html": {
    "href": "phobos/std/range/Take/Functions/moveBack.html",
    "title": "Overloads for - moveBack | Marmos Demo",
    "keywords": "Overloads for - moveBack Module std.range Parent Take moveBack() <bug: unknown> moveBack( ) auto ditto"
  },
  "phobos/std/range/Take/Functions/moveFront.html": {
    "href": "phobos/std/range/Take/Functions/moveFront.html",
    "title": "Overloads for - moveFront | Marmos Demo",
    "keywords": "Overloads for - moveFront Module std.range Parent Take moveFront() <bug: unknown> moveFront( ) auto ditto"
  },
  "phobos/std/range/Take/Functions/opIndex.html": {
    "href": "phobos/std/range/Take/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.range Parent Take opIndex(index) <bug: unknown> opIndex( size_t index ) auto ditto"
  },
  "phobos/std/range/Take/Functions/opIndexAssign.html": {
    "href": "phobos/std/range/Take/Functions/opIndexAssign.html",
    "title": "Overloads for - opIndexAssign | Marmos Demo",
    "keywords": "Overloads for - opIndexAssign Module std.range Parent Take opIndexAssign(v, index) void opIndexAssign( ElementType!(R) v, size_t index ) ditto"
  },
  "phobos/std/range/Take/Functions/popBack.html": {
    "href": "phobos/std/range/Take/Functions/popBack.html",
    "title": "Overloads for - popBack | Marmos Demo",
    "keywords": "Overloads for - popBack Module std.range Parent Take popBack() void popBack( ) ditto"
  },
  "phobos/std/range/Take/Functions/popFront.html": {
    "href": "phobos/std/range/Take/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.range Parent Take popFront() void popFront( ) ditto"
  },
  "phobos/std/range/Take/Functions/save.html": {
    "href": "phobos/std/range/Take/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.range Parent Take save() Take save( ) ditto"
  },
  "phobos/std/range/Transposed/Functions/empty.html": {
    "href": "phobos/std/range/Transposed/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.range Parent Transposed empty() bool empty( )"
  },
  "phobos/std/range/Transposed/Functions/front.html": {
    "href": "phobos/std/range/Transposed/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.range Parent Transposed front() <bug: unknown> front( ) auto"
  },
  "phobos/std/range/Transposed/Functions/opIndex.html": {
    "href": "phobos/std/range/Transposed/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.range Parent Transposed opIndex(n) <bug: unknown> opIndex( size_t n ) auto"
  },
  "phobos/std/range/Transposed/Functions/opSlice.html": {
    "href": "phobos/std/range/Transposed/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.range Parent Transposed opSlice() <bug: unknown> opSlice( ) auto"
  },
  "phobos/std/range/Transposed/Functions/popFront.html": {
    "href": "phobos/std/range/Transposed/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.range Parent Transposed popFront() void popFront( )"
  },
  "phobos/std/range/Transversal/Functions/back.html": {
    "href": "phobos/std/range/Transversal/Functions/back.html",
    "title": "Overloads for - back | Marmos Demo",
    "keywords": "Overloads for - back Module std.range Parent Transversal back() <bug: unknown> back( ) auto Bidirectional primitives. They are offered if $(D isBidirectionalRange!RangeOfRanges). back(val) void back( E val ) Ditto"
  },
  "phobos/std/range/Transversal/Functions/front.html": {
    "href": "phobos/std/range/Transversal/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.range Parent Transversal front() <bug: unknown> front( ) auto Ditto front(val) void front( E val ) Ditto"
  },
  "phobos/std/range/Transversal/Functions/moveAt.html": {
    "href": "phobos/std/range/Transversal/Functions/moveAt.html",
    "title": "Overloads for - moveAt | Marmos Demo",
    "keywords": "Overloads for - moveAt Module std.range Parent Transversal moveAt(n) E moveAt( size_t n ) Ditto"
  },
  "phobos/std/range/Transversal/Functions/moveBack.html": {
    "href": "phobos/std/range/Transversal/Functions/moveBack.html",
    "title": "Overloads for - moveBack | Marmos Demo",
    "keywords": "Overloads for - moveBack Module std.range Parent Transversal moveBack() E moveBack( ) Ditto"
  },
  "phobos/std/range/Transversal/Functions/moveFront.html": {
    "href": "phobos/std/range/Transversal/Functions/moveFront.html",
    "title": "Overloads for - moveFront | Marmos Demo",
    "keywords": "Overloads for - moveFront Module std.range Parent Transversal moveFront() E moveFront( ) Ditto"
  },
  "phobos/std/range/Transversal/Functions/opIndex.html": {
    "href": "phobos/std/range/Transversal/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.range Parent Transversal opIndex(n) <bug: unknown> opIndex( size_t n ) auto Random-access primitive. It is offered if $(D isRandomAccessRange!RangeOfRanges && (opt == TransverseOptions.assumeNotJagged || opt == TransverseOptions.enforceNotJagged))."
  },
  "phobos/std/range/Transversal/Functions/opIndexAssign.html": {
    "href": "phobos/std/range/Transversal/Functions/opIndexAssign.html",
    "title": "Overloads for - opIndexAssign | Marmos Demo",
    "keywords": "Overloads for - opIndexAssign Module std.range Parent Transversal opIndexAssign(val, n) void opIndexAssign( E val, size_t n ) Ditto"
  },
  "phobos/std/range/Transversal/Functions/opSlice.html": {
    "href": "phobos/std/range/Transversal/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.range Parent Transversal opSlice(lower, upper) <bug: unknown> opSlice( size_t lower, size_t upper ) Slicing if offered if RangeOfRanges supports slicing and all the conditions for supporting indexing are met. opSlice() <bug: unknown> opSlice( ) auto"
  },
  "phobos/std/range/Transversal/Functions/popBack.html": {
    "href": "phobos/std/range/Transversal/Functions/popBack.html",
    "title": "Overloads for - popBack | Marmos Demo",
    "keywords": "Overloads for - popBack Module std.range Parent Transversal popBack() void popBack( ) Ditto"
  },
  "phobos/std/range/Transversal/Functions/popFront.html": {
    "href": "phobos/std/range/Transversal/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.range Parent Transversal popFront() void popFront( ) Ditto"
  },
  "phobos/std/range/Transversal/Functions/prime.html": {
    "href": "phobos/std/range/Transversal/Functions/prime.html",
    "title": "Overloads for - prime | Marmos Demo",
    "keywords": "Overloads for - prime Module std.range Parent Transversal prime() void prime( )"
  },
  "phobos/std/range/Transversal/Functions/save.html": {
    "href": "phobos/std/range/Transversal/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.range Parent Transversal save() <bug: unknown> save( ) Ditto"
  },
  "phobos/std/range/Zip/Functions/back.html": {
    "href": "phobos/std/range/Zip/Functions/back.html",
    "title": "Overloads for - back | Marmos Demo",
    "keywords": "Overloads for - back Module std.range Parent Zip back() ElementType back( ) Returns the rightmost element. back(v) void back( ElementType v ) Returns the current iterated element. Returns the rightmost element."
  },
  "phobos/std/range/Zip/Functions/front.html": {
    "href": "phobos/std/range/Zip/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.range Parent Zip front() ElementType front( ) Returns the current iterated element. front(v) void front( ElementType v ) Sets the front of all iterated ranges."
  },
  "phobos/std/range/Zip/Functions/length.html": {
    "href": "phobos/std/range/Zip/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.range Parent Zip length() <bug: unknown> length( ) auto Returns the length of this range. Defined only if all ranges define length ."
  },
  "phobos/std/range/Zip/Functions/moveAt.html": {
    "href": "phobos/std/range/Zip/Functions/moveAt.html",
    "title": "Overloads for - moveAt | Marmos Demo",
    "keywords": "Overloads for - moveAt Module std.range Parent Zip moveAt(n) ElementType moveAt( size_t n ) Destructively reads the n th element in the composite range. Defined if all ranges offer random access. Returns the n th element in the composite range. Defined if all ranges offer random access."
  },
  "phobos/std/range/Zip/Functions/moveBack.html": {
    "href": "phobos/std/range/Zip/Functions/moveBack.html",
    "title": "Overloads for - moveBack | Marmos Demo",
    "keywords": "Overloads for - moveBack Module std.range Parent Zip moveBack() ElementType moveBack( ) Moves out the back. Returns the rightmost element."
  },
  "phobos/std/range/Zip/Functions/moveFront.html": {
    "href": "phobos/std/range/Zip/Functions/moveFront.html",
    "title": "Overloads for - moveFront | Marmos Demo",
    "keywords": "Overloads for - moveFront Module std.range Parent Zip moveFront() ElementType moveFront( ) Moves out the front."
  },
  "phobos/std/range/Zip/Functions/opIndex.html": {
    "href": "phobos/std/range/Zip/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.range Parent Zip opIndex(n) ElementType opIndex( size_t n ) Returns the n th element in the composite range. Defined if all ranges offer random access."
  },
  "phobos/std/range/Zip/Functions/opIndexAssign.html": {
    "href": "phobos/std/range/Zip/Functions/opIndexAssign.html",
    "title": "Overloads for - opIndexAssign | Marmos Demo",
    "keywords": "Overloads for - opIndexAssign Module std.range Parent Zip opIndexAssign(v, n) void opIndexAssign( ElementType v, size_t n ) Assigns to the n th element in the composite range. Defined if all ranges offer random access. Returns the n th element in the composite range. Defined if all ranges offer random access."
  },
  "phobos/std/range/Zip/Functions/opSlice.html": {
    "href": "phobos/std/range/Zip/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.range Parent Zip opSlice(from, to) <bug: unknown> opSlice( size_t from, size_t to ) auto Returns a slice of the range. Defined only if all range define slicing."
  },
  "phobos/std/range/Zip/Functions/popBack.html": {
    "href": "phobos/std/range/Zip/Functions/popBack.html",
    "title": "Overloads for - popBack | Marmos Demo",
    "keywords": "Overloads for - popBack Module std.range Parent Zip popBack() void popBack( ) Calls popBack for all controlled ranges."
  },
  "phobos/std/range/Zip/Functions/popFront.html": {
    "href": "phobos/std/range/Zip/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.range Parent Zip popFront() void popFront( ) Advances to the next element in all controlled ranges."
  },
  "phobos/std/range/Zip/Functions/save.html": {
    "href": "phobos/std/range/Zip/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.range Parent Zip save() Zip save( )"
  },
  "phobos/std/range/ZipShortest/Functions/back.html": {
    "href": "phobos/std/range/ZipShortest/Functions/back.html",
    "title": "Overloads for - back | Marmos Demo",
    "keywords": "Overloads for - back Module std.range Parent ZipShortest back() ElementType back( )"
  },
  "phobos/std/range/ZipShortest/Functions/front.html": {
    "href": "phobos/std/range/ZipShortest/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.range Parent ZipShortest front() ElementType front( )"
  },
  "phobos/std/range/ZipShortest/Functions/length.html": {
    "href": "phobos/std/range/ZipShortest/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.range Parent ZipShortest length() size_t length( )"
  },
  "phobos/std/range/ZipShortest/Functions/popBack.html": {
    "href": "phobos/std/range/ZipShortest/Functions/popBack.html",
    "title": "Overloads for - popBack | Marmos Demo",
    "keywords": "Overloads for - popBack Module std.range Parent ZipShortest popBack() void popBack( )"
  },
  "phobos/std/range/ZipShortest/Functions/popFront.html": {
    "href": "phobos/std/range/ZipShortest/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.range Parent ZipShortest popFront() void popFront( )"
  },
  "phobos/std/range/ZipShortest/Functions/save.html": {
    "href": "phobos/std/range/ZipShortest/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.range Parent ZipShortest save() <bug: unknown> save( )"
  },
  "phobos/std/range/interfaces/Classes/OutputRangeObject.html": {
    "href": "phobos/std/range/interfaces/Classes/OutputRangeObject.html",
    "title": "Class - OutputRangeObject | Marmos Demo",
    "keywords": "Class - OutputRangeObject Module std.range.interfaces public class OutputRangeObject { } About Implements the OutputRange interface for all types E and wraps the put method for each type E in a virtual function."
  },
  "phobos/std/range/interfaces/Classes/UnsupportedRangeMethod.html": {
    "href": "phobos/std/range/interfaces/Classes/UnsupportedRangeMethod.html",
    "title": "Class - UnsupportedRangeMethod | Marmos Demo",
    "keywords": "Class - UnsupportedRangeMethod Module std.range.interfaces public class UnsupportedRangeMethod { } About Thrown when an interface method is not supported by the wrapped range"
  },
  "phobos/std/range/interfaces/Functions/inputRangeObject.html": {
    "href": "phobos/std/range/interfaces/Functions/inputRangeObject.html",
    "title": "Overloads for - inputRangeObject | Marmos Demo",
    "keywords": "Overloads for - inputRangeObject Module std.range.interfaces inputRangeObject(range) InputRangeObject!(R) inputRangeObject( R range ) Convenience function for creating an InputRangeObject of the proper type. See $(LREF InputRange) for an example."
  },
  "phobos/std/range/interfaces/Functions/outputRangeObject.html": {
    "href": "phobos/std/range/interfaces/Functions/outputRangeObject.html",
    "title": "Overloads for - outputRangeObject | Marmos Demo",
    "keywords": "Overloads for - outputRangeObject Module std.range.interfaces outputRangeObject(range) OutputRangeObject!(RE) outputRangeObject( R range ) Convenience function for creating an OutputRangeObject with a base range of type R that accepts types E ."
  },
  "phobos/std/range/interfaces/Functions/putMethods.html": {
    "href": "phobos/std/range/interfaces/Functions/putMethods.html",
    "title": "Overloads for - putMethods | Marmos Demo",
    "keywords": "Overloads for - putMethods Module std.range.interfaces putMethods() string putMethods( )"
  },
  "phobos/std/range/interfaces/Overview.html": {
    "href": "phobos/std/range/interfaces/Overview.html",
    "title": "Module - std.range.interfaces | Marmos Demo",
    "keywords": "Module - std.range.interfaces About This module is a submodule of $(MREF std, range). The main $(MREF std, range) module provides template-based tools for working with ranges, but sometimes an object-based interface for ranges is needed, such as when runtime polymorphism is required. For this purpose, this submodule provides a number of object and interface definitions that can be used to wrap around range objects created by the $(MREF std, range) templates. $(SCRIPT inhibitQuickIndex = 1;) $(DIVC quickindex, $(BOOKTABLE , $(TR $(TD $(LREF InputRange)) $(TD Wrapper for input ranges. )) $(TR $(TD $(LREF InputAssignable)) $(TD Wrapper for input ranges with assignable elements. )) $(TR $(TD $(LREF ForwardRange)) $(TD Wrapper for forward ranges. )) $(TR $(TD $(LREF ForwardAssignable)) $(TD Wrapper for forward ranges with assignable elements. )) $(TR $(TD $(LREF BidirectionalRange)) $(TD Wrapper for bidirectional ranges. )) $(TR $(TD $(LREF BidirectionalAssignable)) $(TD Wrapper for bidirectional ranges with assignable elements. )) $(TR $(TD $(LREF RandomAccessFinite)) $(TD Wrapper for finite random-access ranges. )) $(TR $(TD $(LREF RandomAccessAssignable)) $(TD Wrapper for finite random-access ranges with assignable elements. )) $(TR $(TD $(LREF RandomAccessInfinite)) $(TD Wrapper for infinite random-access ranges. )) $(TR $(TD $(LREF OutputRange)) $(TD Wrapper for output ranges. )) $(TR $(TD $(LREF OutputRangeObject)) $(TD Class that implements the OutputRange interface and wraps the put methods in virtual functions. )) $(TR $(TD $(LREF outputRangeObject)) $(TD Convenience function for creating an OutputRangeObject with a base range of type R that accepts types E. )) $(TR $(TD $(LREF InputRangeObject)) $(TD Class that implements the InputRange interface and wraps the input range methods in virtual functions. )) $(TR $(TD $(LREF inputRangeObject)) $(TD Convenience function for creating an InputRangeObject of the proper type. )) $(TR $(TD $(LREF MostDerivedInputRange)) $(TD Returns the interface type that best matches the range. )) )) Source: $(PHOBOSSRC std/range/interfaces.d) License: $(HTTP boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP erdani.com, Andrei Alexandrescu), David Simcha, and $(HTTP jmdavisprog.com, Jonathan M Davis). Credit for some of the ideas in building this module goes to $(HTTP fantascienza.net/leonardo/so/, Leonardo Maffi). Classes Name Description OutputRangeObject Implements the OutputRange interface for all types E and wraps the put method for each type E in a virtual function. UnsupportedRangeMethod Thrown when an interface method is not supported by the wrapped range Functions Name Description inputRangeObject Convenience function for creating an InputRangeObject of the proper type. See $(LREF InputRange) for an example. outputRangeObject Convenience function for creating an OutputRangeObject with a base range of type R that accepts types E . putMethods"
  },
  "phobos/std/range/primitives/Functions/back.html": {
    "href": "phobos/std/range/primitives/Functions/back.html",
    "title": "Overloads for - back | Marmos Demo",
    "keywords": "Overloads for - back Module std.range.primitives back(a) T back( <bug: unknown> a ) Implements the range interface primitive back for built-in arrays. Due to the fact that nonmember functions can be called with the first argument using the dot notation, array.back is equivalent to back(array) . For $(GLOSSARY narrow strings), $(D back) automatically returns the last $(GLOSSARY code point) as a $(D dchar). back(a) dchar back( <bug: unknown> a ) ditto"
  },
  "phobos/std/range/primitives/Functions/doPut.html": {
    "href": "phobos/std/range/primitives/Functions/doPut.html",
    "title": "Overloads for - doPut | Marmos Demo",
    "keywords": "Overloads for - doPut Module std.range.primitives doPut(r, e) void doPut( R r, E e )"
  },
  "phobos/std/range/primitives/Functions/empty.html": {
    "href": "phobos/std/range/primitives/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.range.primitives empty(a) bool empty( T a ) Implements the range interface primitive empty for types that obey $(LREF hasLength) property and for narrow strings. Due to the fact that nonmember functions can be called with the first argument using the dot notation, a.empty is equivalent to empty(a) ."
  },
  "phobos/std/range/primitives/Functions/front.html": {
    "href": "phobos/std/range/primitives/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.range.primitives front(a) T front( <bug: unknown> a ) Implements the range interface primitive front for built-in arrays. Due to the fact that nonmember functions can be called with the first argument using the dot notation, array.front is equivalent to front(array) . For $(GLOSSARY narrow strings), $(D front) automatically returns the first $(GLOSSARY code point) as a $(D dchar). front(a) dchar front( <bug: unknown> a ) ditto"
  },
  "phobos/std/range/primitives/Functions/isLvalue.html": {
    "href": "phobos/std/range/primitives/Functions/isLvalue.html",
    "title": "Overloads for - isLvalue | Marmos Demo",
    "keywords": "Overloads for - isLvalue Module std.range.primitives isLvalue(__anonymous) void isLvalue( T __anonymous ) isLvalue(__anonymous) void isLvalue( T __anonymous )"
  },
  "phobos/std/range/primitives/Functions/moveAt.html": {
    "href": "phobos/std/range/primitives/Functions/moveAt.html",
    "title": "Overloads for - moveAt | Marmos Demo",
    "keywords": "Overloads for - moveAt Module std.range.primitives moveAt(r, i) ElementType!(R) moveAt( R r, size_t i ) Moves element at index i of r out and returns it. Leaves $(D r[i]) in a destroyable state that does not allocate any resources (usually equal to its .init value)."
  },
  "phobos/std/range/primitives/Functions/moveBack.html": {
    "href": "phobos/std/range/primitives/Functions/moveBack.html",
    "title": "Overloads for - moveBack | Marmos Demo",
    "keywords": "Overloads for - moveBack Module std.range.primitives moveBack(r) ElementType!(R) moveBack( R r ) Moves the back of r out and returns it. Leaves r.back in a destroyable state that does not allocate any resources (usually equal to its .init value)."
  },
  "phobos/std/range/primitives/Functions/moveFront.html": {
    "href": "phobos/std/range/primitives/Functions/moveFront.html",
    "title": "Overloads for - moveFront | Marmos Demo",
    "keywords": "Overloads for - moveFront Module std.range.primitives moveFront(r) ElementType!(R) moveFront( R r ) Moves the front of r out and returns it. If r.front is a struct with a destructor or copy constructor defined, it is reset to its .init value after its value is moved. Otherwise, it is left unchanged. In either case, r.front is left in a destroyable state that does not allocate any resources."
  },
  "phobos/std/range/primitives/Functions/popBack.html": {
    "href": "phobos/std/range/primitives/Functions/popBack.html",
    "title": "Overloads for - popBack | Marmos Demo",
    "keywords": "Overloads for - popBack Module std.range.primitives popBack(a) void popBack( <bug: unknown> a ) Implements the range interface primitive popBack for built-in arrays. Due to the fact that nonmember functions can be called with the first argument using the dot notation, array.popBack is equivalent to popBack(array) . For $(GLOSSARY narrow strings), $(D popFront) automatically eliminates the last $(GLOSSARY code point). popBack(a) void popBack( <bug: unknown> a ) ditto"
  },
  "phobos/std/range/primitives/Functions/popBackExactly.html": {
    "href": "phobos/std/range/primitives/Functions/popBackExactly.html",
    "title": "Overloads for - popBackExactly | Marmos Demo",
    "keywords": "Overloads for - popBackExactly Module std.range.primitives popBackExactly(r, n) void popBackExactly( Range r, size_t n ) ditto"
  },
  "phobos/std/range/primitives/Functions/popBackN.html": {
    "href": "phobos/std/range/primitives/Functions/popBackN.html",
    "title": "Overloads for - popBackN | Marmos Demo",
    "keywords": "Overloads for - popBackN Module std.range.primitives popBackN(r, n) size_t popBackN( Range r, size_t n ) ditto"
  },
  "phobos/std/range/primitives/Functions/popFront.html": {
    "href": "phobos/std/range/primitives/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.range.primitives popFront(a) void popFront( <bug: unknown> a ) Implements the range interface primitive popFront for built-in arrays. Due to the fact that nonmember functions can be called with the first argument using the dot notation, array.popFront is equivalent to popFront(array) . For $(GLOSSARY narrow strings), popFront automatically advances to the next $(GLOSSARY code point). popFront(str) void popFront( <bug: unknown> str ) ditto"
  },
  "phobos/std/range/primitives/Functions/popFrontExactly.html": {
    "href": "phobos/std/range/primitives/Functions/popFrontExactly.html",
    "title": "Overloads for - popFrontExactly | Marmos Demo",
    "keywords": "Overloads for - popFrontExactly Module std.range.primitives popFrontExactly(r, n) void popFrontExactly( Range r, size_t n ) Eagerly advances r itself (not a copy) exactly n times (by calling r.popFront ). popFrontExactly takes r by ref , so it mutates the original range. Completes in $(BIGOH 1) steps for ranges that support slicing, and have either length or are infinite. Completes in $(BIGOH n) time for all other ranges. Note: Unlike $(LREF popFrontN), popFrontExactly will assume that the range holds at least n elements. This makes popFrontExactly faster than popFrontN , but it also means that if range does not contain at least n elements, it will attempt to call popFront on an empty range, which is undefined behavior. So, only use popFrontExactly when it is guaranteed that range holds at least n elements. popBackExactly will behave the same but instead removes elements from the back of the (bidirectional) range instead of the front. See_Also: $(REF dropExactly, std, range), $(REF dropBackExactly, std, range)"
  },
  "phobos/std/range/primitives/Functions/popFrontN.html": {
    "href": "phobos/std/range/primitives/Functions/popFrontN.html",
    "title": "Overloads for - popFrontN | Marmos Demo",
    "keywords": "Overloads for - popFrontN Module std.range.primitives popFrontN(r, n) size_t popFrontN( Range r, size_t n ) popFrontN eagerly advances r itself (not a copy) up to n times (by calling r.popFront ). popFrontN takes r by ref , so it mutates the original range. Completes in $(BIGOH 1) steps for ranges that support slicing and have length. Completes in $(BIGOH n) time for all other ranges. popBackN behaves the same as popFrontN but instead removes elements from the back of the (bidirectional) range instead of the front. Returns How much r was actually advanced, which may be less than n if r did not have at least n elements. See_Also: $(REF drop, std, range), $(REF dropBack, std, range)"
  },
  "phobos/std/range/primitives/Functions/put.html": {
    "href": "phobos/std/range/primitives/Functions/put.html",
    "title": "Overloads for - put | Marmos Demo",
    "keywords": "Overloads for - put Module std.range.primitives put(r, e) void put( R r, E e ) Outputs e to r . The exact effect is dependent upon the two types. Several cases are accepted, as described below. The code snippets are attempted in order, and the first to compile \"wins\" and gets evaluated. In this table \"doPut\" is a method that places e into r , using the correct primitive: r.put(e) if R defines put , $(D r.front = e) if r is an input range (followed by r.popFront() ), or r(e) otherwise. $(BOOKTABLE , $(TR $(TH Code Snippet) $(TH Scenario) ) $(TR $(TD r.doPut(e); ) $(TD R specifically accepts an E .) ) $(TR $(TD $(D r.doPut([ e ]);)) $(TD R specifically accepts an E[] .) ) $(TR $(TD r.putChar(e); ) $(TD R accepts some form of string or character. put will transcode the character e accordingly.) ) $(TR $(TD $(D for (; !e.empty; e.popFront()) put(r, e.front);)) $(TD Copying range E into R .) ) ) Tip: put should $(I not) be used \"UFCS-style\", e.g. r.put(e) . Doing this may call R.put directly, by-passing any transformation feature provided by Range.put . $(D put(r, e)) is prefered."
  },
  "phobos/std/range/primitives/Functions/putChar.html": {
    "href": "phobos/std/range/primitives/Functions/putChar.html",
    "title": "Overloads for - putChar | Marmos Demo",
    "keywords": "Overloads for - putChar Module std.range.primitives putChar(r, e) void putChar( R r, E e )"
  },
  "phobos/std/range/primitives/Functions/save.html": {
    "href": "phobos/std/range/primitives/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.range.primitives save(a) <bug: unknown> save( <bug: unknown> a ) Implements the range interface primitive save for built-in arrays. Due to the fact that nonmember functions can be called with the first argument using the dot notation, array.save is equivalent to save(array) . The function does not duplicate the content of the array, it simply returns its argument."
  },
  "phobos/std/range/primitives/Functions/walkLength.html": {
    "href": "phobos/std/range/primitives/Functions/walkLength.html",
    "title": "Overloads for - walkLength | Marmos Demo",
    "keywords": "Overloads for - walkLength Module std.range.primitives walkLength(range) <bug: unknown> walkLength( Range range ) auto This is a best-effort implementation of length for any kind of range. If hasLength!Range , simply returns range.length without checking upTo (when specified). Otherwise, walks the range through its length and returns the number of elements seen. Performes $(BIGOH n) evaluations of range.empty and range.popFront() , where n is the effective length of $(D range). The upTo parameter is useful to \"cut the losses\" in case the interest is in seeing whether the range has at least some number of elements. If the parameter upTo is specified, stops if $(D upTo) steps have been taken and returns upTo . Infinite ranges are compatible, provided the parameter upTo is specified, in which case the implementation simply returns upTo. walkLength(range, upTo) <bug: unknown> walkLength( Range range, size_t upTo ) auto ditto"
  },
  "phobos/std/range/primitives/Overview.html": {
    "href": "phobos/std/range/primitives/Overview.html",
    "title": "Module - std.range.primitives | Marmos Demo",
    "keywords": "Module - std.range.primitives About This module is a submodule of $(MREF std, range). It defines the bidirectional and forward range primitives for arrays $(LREF empty), $(LREF front), $(LREF back), $(LREF popFront), $(LREF popBack) and $(LREF save). It provides basic range functionality by defining several templates for testing whether a given object is a range, and what kind of range it is: $(SCRIPT inhibitQuickIndex = 1;) $(DIVC quickindex, $(BOOKTABLE , $(TR $(TD $(LREF isInputRange)) $(TD Tests if something is an $(I input range), defined to be something from which one can sequentially read data using the primitives front , popFront , and empty . )) $(TR $(TD $(LREF isOutputRange)) $(TD Tests if something is an $(I output range), defined to be something to which one can sequentially write data using the $(LREF put) primitive. )) $(TR $(TD $(LREF isForwardRange)) $(TD Tests if something is a $(I forward range), defined to be an input range with the additional capability that one can save one's current position with the save primitive, thus allowing one to iterate over the same range multiple times. )) $(TR $(TD $(LREF isBidirectionalRange)) $(TD Tests if something is a $(I bidirectional range), that is, a forward range that allows reverse traversal using the primitives $(D back) and popBack . )) $(TR $(TD $(LREF isRandomAccessRange)) $(TD Tests if something is a $(I random access range), which is a bidirectional range that also supports the array subscripting operation via the primitive opIndex . )) )) It also provides number of templates that test for various range capabilities $(BOOKTABLE , $(TR $(TD $(LREF hasMobileElements)) $(TD Tests if a given range's elements can be moved around using the primitives moveFront , moveBack , or moveAt . )) $(TR $(TD $(LREF ElementType)) $(TD Returns the element type of a given range. )) $(TR $(TD $(LREF ElementEncodingType)) $(TD Returns the encoding element type of a given range. )) $(TR $(TD $(LREF hasSwappableElements)) $(TD Tests if a range is a forward range with swappable elements. )) $(TR $(TD $(LREF hasAssignableElements)) $(TD Tests if a range is a forward range with mutable elements. )) $(TR $(TD $(LREF hasLvalueElements)) $(TD Tests if a range is a forward range with elements that can be passed by reference and have their address taken. )) $(TR $(TD $(LREF hasLength)) $(TD Tests if a given range has the length attribute. )) $(TR $(TD $(LREF isInfinite)) $(TD Tests if a given range is an $(I infinite range). )) $(TR $(TD $(LREF hasSlicing)) $(TD Tests if a given range supports the array slicing operation $(D R[x .. y]). )) ) Finally, it includes some convenience functions for manipulating ranges $(BOOKTABLE , $(TR $(TD $(LREF popFrontN)) $(TD Advances a given range by up to $(I n) elements. )) $(TR $(TD $(LREF popBackN)) $(TD Advances a given bidirectional range from the right by up to $(I n) elements. )) $(TR $(TD $(LREF popFrontExactly)) $(TD Advances a given range by up exactly $(I n) elements. )) $(TR $(TD $(LREF popBackExactly)) $(TD Advances a given bidirectional range from the right by exactly $(I n) elements. )) $(TR $(TD $(LREF moveFront)) $(TD Removes the front element of a range. )) $(TR $(TD $(LREF moveBack)) $(TD Removes the back element of a bidirectional range. )) $(TR $(TD $(LREF moveAt)) $(TD Removes the $(I i)'th element of a random-access range. )) $(TR $(TD $(LREF walkLength)) $(TD Computes the length of any range in O(n) time. )) $(TR $(TD $(LREF put)) $(TD Outputs element e to a range. )) ) Source: $(PHOBOSSRC std/range/primitives.d) License: $(HTTP boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP erdani.com, Andrei Alexandrescu), David Simcha, and $(HTTP jmdavisprog.com, Jonathan M Davis). Credit for some of the ideas in building this module goes to $(HTTP fantascienza.net/leonardo/so/, Leonardo Maffi). Functions Name Description back Implements the range interface primitive back for built-in arrays. Due to the fact that nonmember functions can be called with the first argument using the dot notation, array.back is equivalent to back(array) . For $(GLOSSARY narrow strings), $(D back) automatically returns the last $(GLOSSARY code point) as a $(D dchar). doPut empty Implements the range interface primitive empty for types that obey $(LREF hasLength) property and for narrow strings. Due to the fact that nonmember functions can be called with the first argument using the dot notation, a.empty is equivalent to empty(a) . front Implements the range interface primitive front for built-in arrays. Due to the fact that nonmember functions can be called with the first argument using the dot notation, array.front is equivalent to front(array) . For $(GLOSSARY narrow strings), $(D front) automatically returns the first $(GLOSSARY code point) as a $(D dchar). isLvalue moveAt Moves element at index i of r out and returns it. Leaves $(D r[i]) in a destroyable state that does not allocate any resources (usually equal to its .init value). moveBack Moves the back of r out and returns it. Leaves r.back in a destroyable state that does not allocate any resources (usually equal to its .init value). moveFront Moves the front of r out and returns it. popBack Implements the range interface primitive popBack for built-in arrays. Due to the fact that nonmember functions can be called with the first argument using the dot notation, array.popBack is equivalent to popBack(array) . For $(GLOSSARY narrow strings), $(D popFront) automatically eliminates the last $(GLOSSARY code point). popBackExactly ditto popBackN ditto popFront Implements the range interface primitive popFront for built-in arrays. Due to the fact that nonmember functions can be called with the first argument using the dot notation, array.popFront is equivalent to popFront(array) . For $(GLOSSARY narrow strings), popFront automatically advances to the next $(GLOSSARY code point). popFrontExactly Eagerly advances r itself (not a copy) exactly n times (by calling r.popFront ). popFrontExactly takes r by ref , so it mutates the original range. Completes in $(BIGOH 1) steps for ranges that support slicing, and have either length or are infinite. Completes in $(BIGOH n) time for all other ranges. popFrontN popFrontN eagerly advances r itself (not a copy) up to n times (by calling r.popFront ). popFrontN takes r by ref , so it mutates the original range. Completes in $(BIGOH 1) steps for ranges that support slicing and have length. Completes in $(BIGOH n) time for all other ranges. put Outputs e to r . The exact effect is dependent upon the two types. Several cases are accepted, as described below. The code snippets are attempted in order, and the first to compile \"wins\" and gets evaluated. putChar save Implements the range interface primitive save for built-in arrays. Due to the fact that nonmember functions can be called with the first argument using the dot notation, array.save is equivalent to save(array) . The function does not duplicate the content of the array, it simply returns its argument. walkLength This is a best-effort implementation of length for any kind of range. Variables Name Description autodecodeStrings EXPERIMENTAL: to try out removing autodecoding, set the version NoAutodecodeStrings . Most things are expected to fail with this version currently. hasAssignableElements Returns true if R is an input range and has mutable elements. The following code should compile for any range with assignable elements. hasLvalueElements Tests whether the range R has lvalue elements. These are defined as elements that can be passed by reference and have their address taken. The following code should compile for any range with lvalue elements. ---- void passByRef(ref ElementType!R stuff); ... static assert(isInputRange!R); passByRef(r.front); static if (isBidirectionalRange!R) passByRef(r.back); static if (isRandomAccessRange!R) passByRef(r[0]); ---- hasMobileElements Returns true iff R is an input range that supports the moveFront primitive, as well as moveBack and moveAt if it's a bidirectional or random access range. These may be explicitly implemented, or may work via the default behavior of the module level functions moveFront and friends. The following code should compile for any range with mobile elements. hasSlicing Returns true if R offers a slicing operator with integral boundaries that returns a forward range type. hasSwappableElements Returns true if R is an input range and has swappable elements. The following code should compile for any range with swappable elements. isBidirectionalRange Returns true if R is a bidirectional range. A bidirectional range is a forward range that also offers the primitives back and popBack . The following code should compile for any bidirectional range. isBidirectionalRange ditto isForwardRange Returns true if R is a forward range. A forward range is an input range r that can save \"checkpoints\" by saving r.save to another value of type R . Notable examples of input ranges that are $(I not) forward ranges are file/socket ranges; copying such a range will not save the position in the stream, and they most likely reuse an internal buffer as the entire stream does not sit in memory. Subsequently, advancing either the original or the copy will advance the stream, so the copies are not independent. isForwardRange ditto isInputRange Returns true if R is an input range. An input range must define the primitives empty , popFront , and front . The following code should compile for any input range. isInputRange ditto isNativeOutputRange isOutputRange Returns true if R is an output range for elements of type E . An output range is defined functionally as a range that supports the operation $(D put(r, e)) as defined above. isRandomAccessRange Returns true if R is a random-access range. A random-access range is a bidirectional range that also offers the primitive $(D opIndex), OR an infinite forward range that offers opIndex . In either case, the range must either offer length or be infinite. The following code should compile for any random-access range. isRandomAccessRange ditto"
  },
  "phobos/std/regex/CTRegexWrapper/Functions/getRe.html": {
    "href": "phobos/std/regex/CTRegexWrapper/Functions/getRe.html",
    "title": "Overloads for - getRe | Marmos Demo",
    "keywords": "Overloads for - getRe Module std.regex Parent CTRegexWrapper getRe() <bug: unknown> getRe( )"
  },
  "phobos/std/regex/Captures/Functions/back.html": {
    "href": "phobos/std/regex/Captures/Functions/back.html",
    "title": "Overloads for - back | Marmos Demo",
    "keywords": "Overloads for - back Module std.regex Parent Captures back() R back( ) ditto"
  },
  "phobos/std/regex/Captures/Functions/captures.html": {
    "href": "phobos/std/regex/Captures/Functions/captures.html",
    "title": "Overloads for - captures | Marmos Demo",
    "keywords": "Overloads for - captures Module std.regex Parent Captures captures() <bug: unknown> captures( ) A hook for compatibility with original std.regex."
  },
  "phobos/std/regex/Captures/Functions/empty.html": {
    "href": "phobos/std/regex/Captures/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.regex Parent Captures empty() bool empty( ) ditto"
  },
  "phobos/std/regex/Captures/Functions/front.html": {
    "href": "phobos/std/regex/Captures/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.regex Parent Captures front() R front( ) Range interface."
  },
  "phobos/std/regex/Captures/Functions/getMatch.html": {
    "href": "phobos/std/regex/Captures/Functions/getMatch.html",
    "title": "Overloads for - getMatch | Marmos Demo",
    "keywords": "Overloads for - getMatch Module std.regex Parent Captures getMatch(index) R getMatch( size_t index )"
  },
  "phobos/std/regex/Captures/Functions/hit.html": {
    "href": "phobos/std/regex/Captures/Functions/hit.html",
    "title": "Overloads for - hit | Marmos Demo",
    "keywords": "Overloads for - hit Module std.regex Parent Captures hit() R hit( ) Slice of matched portion of input."
  },
  "phobos/std/regex/Captures/Functions/length.html": {
    "href": "phobos/std/regex/Captures/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.regex Parent Captures length() size_t length( ) Number of matches in this object."
  },
  "phobos/std/regex/Captures/Functions/popBack.html": {
    "href": "phobos/std/regex/Captures/Functions/popBack.html",
    "title": "Overloads for - popBack | Marmos Demo",
    "keywords": "Overloads for - popBack Module std.regex Parent Captures popBack() void popBack( ) ditto"
  },
  "phobos/std/regex/Captures/Functions/popFront.html": {
    "href": "phobos/std/regex/Captures/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.regex Parent Captures popFront() void popFront( ) ditto"
  },
  "phobos/std/regex/Captures/Functions/post.html": {
    "href": "phobos/std/regex/Captures/Functions/post.html",
    "title": "Overloads for - post | Marmos Demo",
    "keywords": "Overloads for - post Module std.regex Parent Captures post() R post( ) Slice of input immediately after the match."
  },
  "phobos/std/regex/Captures/Functions/pre.html": {
    "href": "phobos/std/regex/Captures/Functions/pre.html",
    "title": "Overloads for - pre | Marmos Demo",
    "keywords": "Overloads for - pre Module std.regex Parent Captures pre() R pre( ) Slice of input prior to the match."
  },
  "phobos/std/regex/Captures/Functions/whichPattern.html": {
    "href": "phobos/std/regex/Captures/Functions/whichPattern.html",
    "title": "Overloads for - whichPattern | Marmos Demo",
    "keywords": "Overloads for - whichPattern Module std.regex Parent Captures whichPattern() int whichPattern( ) Number of pattern matched counting, where 1 - the first pattern. Returns 0 on no match."
  },
  "phobos/std/regex/Functions/bmatch.html": {
    "href": "phobos/std/regex/Functions/bmatch.html",
    "title": "Overloads for - bmatch | Marmos Demo",
    "keywords": "Overloads for - bmatch Module std.regex bmatch(input, re) <bug: unknown> bmatch( R input, RegEx re ) auto Start matching of input to regex pattern re , using traditional $(LINK2 https://en.wikipedia.org/wiki/Backtracking, backtracking) matching scheme. The use of this function is $(RED discouraged) - use either of $(LREF matchAll) or $(LREF matchFirst). Delegating the kind of operation to \"g\" flag is soon to be phased out along with the ability to choose the exact matching scheme. The choice of matching scheme to use depends highly on the pattern kind and can done automatically on case by case basis. Returns: a RegexMatch object holding engine state after first match. bmatch(input, re) <bug: unknown> bmatch( R input, String re ) auto ditto"
  },
  "phobos/std/regex/Functions/escaper.html": {
    "href": "phobos/std/regex/Functions/escaper.html",
    "title": "Overloads for - escaper | Marmos Demo",
    "keywords": "Overloads for - escaper Module std.regex escaper(r) <bug: unknown> escaper( Range r ) auto A range that lazily produces a string output escaped to be used inside of a regular expression."
  },
  "phobos/std/regex/Functions/match.html": {
    "href": "phobos/std/regex/Functions/match.html",
    "title": "Overloads for - match | Marmos Demo",
    "keywords": "Overloads for - match Module std.regex match(input, re) <bug: unknown> match( R input, RegEx re ) auto Start matching input to regex pattern re , using Thompson NFA matching scheme. The use of this function is $(RED discouraged) - use either of $(LREF matchAll) or $(LREF matchFirst). Delegating the kind of operation to \"g\" flag is soon to be phased out along with the ability to choose the exact matching scheme. The choice of matching scheme to use depends highly on the pattern kind and can done automatically on case by case basis. Returns: a RegexMatch object holding engine state after first match. match(input, re) <bug: unknown> match( R input, String re ) auto ditto"
  },
  "phobos/std/regex/Functions/matchAll.html": {
    "href": "phobos/std/regex/Functions/matchAll.html",
    "title": "Overloads for - matchAll | Marmos Demo",
    "keywords": "Overloads for - matchAll Module std.regex matchAll(input, re) <bug: unknown> matchAll( R input, RegEx re ) auto Initiate a search for all non-overlapping matches to the pattern re in the given input . The result is a lazy range of matches generated as they are encountered in the input going left to right. This function picks the most suitable regular expression engine depending on the pattern properties. `re` parameter can be one of three types $(UL $(LI Plain string(s), in which case it's compiled to bytecode before matching. ) $(LI Regex!char (wchar/dchar) that contains a pattern in the form of compiled bytecode. ) $(LI StaticRegex!char (wchar/dchar) that contains a pattern in the form of compiled native machine code. ) ) Returns $(LREF RegexMatch) object that represents matcher state after the first match was found or an empty one if not present. matchAll(input, re) <bug: unknown> matchAll( R input, String re ) auto ditto matchAll(input, re) <bug: unknown> matchAll( R input, <bug: unknown> re ) auto ditto"
  },
  "phobos/std/regex/Functions/matchFirst.html": {
    "href": "phobos/std/regex/Functions/matchFirst.html",
    "title": "Overloads for - matchFirst | Marmos Demo",
    "keywords": "Overloads for - matchFirst Module std.regex matchFirst(input, re) <bug: unknown> matchFirst( R input, RegEx re ) auto Find the first (leftmost) slice of the input that matches the pattern re . This function picks the most suitable regular expression engine depending on the pattern properties. `re` parameter can be one of three types $(UL $(LI Plain string(s), in which case it's compiled to bytecode before matching. ) $(LI Regex!char (wchar/dchar) that contains a pattern in the form of compiled bytecode. ) $(LI StaticRegex!char (wchar/dchar) that contains a pattern in the form of compiled native machine code. ) ) Returns $(LREF Captures) containing the extent of a match together with all submatches if there was a match, otherwise an empty $(LREF Captures) object. matchFirst(input, re) <bug: unknown> matchFirst( R input, String re ) auto ditto matchFirst(input, re) <bug: unknown> matchFirst( R input, <bug: unknown> re ) auto ditto"
  },
  "phobos/std/regex/Functions/matchMany.html": {
    "href": "phobos/std/regex/Functions/matchMany.html",
    "title": "Overloads for - matchMany | Marmos Demo",
    "keywords": "Overloads for - matchMany Module std.regex matchMany(input, re) <bug: unknown> matchMany( R input, RegEx re ) auto"
  },
  "phobos/std/regex/Functions/matchOnce.html": {
    "href": "phobos/std/regex/Functions/matchOnce.html",
    "title": "Overloads for - matchOnce | Marmos Demo",
    "keywords": "Overloads for - matchOnce Module std.regex matchOnce(input, prog) <bug: unknown> matchOnce( R input, RegEx prog ) auto"
  },
  "phobos/std/regex/Functions/matchOnceImpl.html": {
    "href": "phobos/std/regex/Functions/matchOnceImpl.html",
    "title": "Overloads for - matchOnceImpl | Marmos Demo",
    "keywords": "Overloads for - matchOnceImpl Module std.regex matchOnceImpl(input, prog) <bug: unknown> matchOnceImpl( R input, RegEx prog ) auto"
  },
  "phobos/std/regex/Functions/regex.html": {
    "href": "phobos/std/regex/Functions/regex.html",
    "title": "Overloads for - regex | Marmos Demo",
    "keywords": "Overloads for - regex Module std.regex regex(patterns, flags) <bug: unknown> regex( <bug: unknown> patterns, <bug: unknown> flags ) auto Compile regular expression pattern for the later execution. Returns: Regex object that works on inputs having the same character width as pattern . Params pattern <parameter not found> A single regular expression to match. patterns <bug: unknown> An array of regular expression strings. The resulting Regex object will match any expression; use $(LREF whichPattern) to know which. flags <bug: unknown> The attributes (g, i, m, s and x accepted) Throws: RegexException if there were any errors during compilation. regex(pattern, flags) <bug: unknown> regex( S pattern, <bug: unknown> flags ) auto ditto"
  },
  "phobos/std/regex/Functions/regexImpl.html": {
    "href": "phobos/std/regex/Functions/regexImpl.html",
    "title": "Overloads for - regexImpl | Marmos Demo",
    "keywords": "Overloads for - regexImpl Module std.regex regexImpl(pattern, flags) <bug: unknown> regexImpl( S pattern, <bug: unknown> flags ) auto"
  },
  "phobos/std/regex/Functions/replace.html": {
    "href": "phobos/std/regex/Functions/replace.html",
    "title": "Overloads for - replace | Marmos Demo",
    "keywords": "Overloads for - replace Module std.regex replace(input, re, format) R replace( R input, RegEx re, <bug: unknown> format ) Old API for replacement, operation depends on flags of pattern re . With \"g\" flag it performs the equivalent of $(LREF replaceAll) otherwise it works the same as $(LREF replaceFirst). The use of this function is $(RED discouraged), please use $(LREF replaceAll) or $(LREF replaceFirst) explicitly. replace(input, re) R replace( R input, RegEx re ) ditto"
  },
  "phobos/std/regex/Functions/replaceAll.html": {
    "href": "phobos/std/regex/Functions/replaceAll.html",
    "title": "Overloads for - replaceAll | Marmos Demo",
    "keywords": "Overloads for - replaceAll Module std.regex replaceAll(input, re, format) R replaceAll( R input, RegEx re, <bug: unknown> format ) Construct a new string from input by replacing all of the fragments that match a pattern re with a string generated from the match according to the format specifier. To replace only the first match use $(LREF replaceFirst). Params input R string to search re RegEx compiled regular expression to use format <bug: unknown> format string to generate replacements from, re = compiled regular expression to use format = format string to generate replacements from, see $(S_LINK Replace *format string, the * format string). Returns A string of the same type as input with the all of the matches (if any) replaced. If no match is found returns the input string itself. replaceAll(input, re) R replaceAll( R input, RegEx re ) This is a general replacement tool that construct a new string by replacing matches of pattern re in the input . Unlike the other overload there is no format string instead captures are passed to to a user-defined functor fun that returns a new string to use as replacement. This version replaces all of the matches found in input , see $(LREF replaceFirst) to replace the first match only. Returns A new string of the same type as input with all matches replaced by return values of fun . If no matches found returns the input itself. Params input R string to search re RegEx compiled regular expression fun <parameter not found> delegate to use"
  },
  "phobos/std/regex/Functions/replaceAllInto.html": {
    "href": "phobos/std/regex/Functions/replaceAllInto.html",
    "title": "Overloads for - replaceAllInto | Marmos Demo",
    "keywords": "Overloads for - replaceAllInto Module std.regex replaceAllInto(sink, input, re, format) void replaceAllInto( Sink sink, R input, RegEx re, <bug: unknown> format ) A variation on $(LREF replaceAll) that instead of allocating a new string on each call outputs the result piece-wise to the sink . In particular this enables efficient construction of a final output incrementally. As with $(LREF replaceAll) there are 2 overloads - one with a format string, the other one with a user defined functor. replaceAllInto(sink, input, re) void replaceAllInto( Sink sink, R input, RegEx re ) ditto"
  },
  "phobos/std/regex/Functions/replaceAllWith.html": {
    "href": "phobos/std/regex/Functions/replaceAllWith.html",
    "title": "Overloads for - replaceAllWith | Marmos Demo",
    "keywords": "Overloads for - replaceAllWith Module std.regex replaceAllWith(input, re) R replaceAllWith( R input, RegEx re )"
  },
  "phobos/std/regex/Functions/replaceCapturesInto.html": {
    "href": "phobos/std/regex/Functions/replaceCapturesInto.html",
    "title": "Overloads for - replaceCapturesInto | Marmos Demo",
    "keywords": "Overloads for - replaceCapturesInto Module std.regex replaceCapturesInto(sink, input, captures) void replaceCapturesInto( Sink sink, R input, T captures )"
  },
  "phobos/std/regex/Functions/replaceFirst.html": {
    "href": "phobos/std/regex/Functions/replaceFirst.html",
    "title": "Overloads for - replaceFirst | Marmos Demo",
    "keywords": "Overloads for - replaceFirst Module std.regex replaceFirst(input, re, format) R replaceFirst( R input, RegEx re, <bug: unknown> format ) Construct a new string from input by replacing the first match with a string generated from it according to the format specifier. To replace all matches use $(LREF replaceAll). Params input R string to search re RegEx compiled regular expression to use format <bug: unknown> format string to generate replacements from, re = compiled regular expression to use format = format string to generate replacements from, see $(S_LINK Replace *format string, the * format string). Returns A string of the same type with the first match (if any) replaced. If no match is found returns the input string itself. replaceFirst(input, re) R replaceFirst( R input, RegEx re ) This is a general replacement tool that construct a new string by replacing matches of pattern re in the input . Unlike the other overload there is no format string instead captures are passed to to a user-defined functor fun that returns a new string to use as replacement. This version replaces the first match in input , see $(LREF replaceAll) to replace the all of the matches. Returns A new string of the same type as input with all matches replaced by return values of fun . If no matches found returns the input itself."
  },
  "phobos/std/regex/Functions/replaceFirstInto.html": {
    "href": "phobos/std/regex/Functions/replaceFirstInto.html",
    "title": "Overloads for - replaceFirstInto | Marmos Demo",
    "keywords": "Overloads for - replaceFirstInto Module std.regex replaceFirstInto(sink, input, re, format) void replaceFirstInto( Sink sink, R input, RegEx re, <bug: unknown> format ) A variation on $(LREF replaceFirst) that instead of allocating a new string on each call outputs the result piece-wise to the sink . In particular this enables efficient construction of a final output incrementally. Like in $(LREF replaceFirst) family of functions there is an overload for the substitution guided by the format string and the one with the user defined callback. replaceFirstInto(sink, input, re) void replaceFirstInto( Sink sink, R input, RegEx re ) ditto"
  },
  "phobos/std/regex/Functions/replaceFirstWith.html": {
    "href": "phobos/std/regex/Functions/replaceFirstWith.html",
    "title": "Overloads for - replaceFirstWith | Marmos Demo",
    "keywords": "Overloads for - replaceFirstWith Module std.regex replaceFirstWith(input, re) R replaceFirstWith( R input, RegEx re )"
  },
  "phobos/std/regex/Functions/replaceFmt.html": {
    "href": "phobos/std/regex/Functions/replaceFmt.html",
    "title": "Overloads for - replaceFmt | Marmos Demo",
    "keywords": "Overloads for - replaceFmt Module std.regex replaceFmt(format, captures, sink, ignoreBadSubs) void replaceFmt( R format, Capt captures, OutR sink, bool ignoreBadSubs )"
  },
  "phobos/std/regex/Functions/replaceMatchesInto.html": {
    "href": "phobos/std/regex/Functions/replaceMatchesInto.html",
    "title": "Overloads for - replaceMatchesInto | Marmos Demo",
    "keywords": "Overloads for - replaceMatchesInto Module std.regex replaceMatchesInto(sink, input, matches) void replaceMatchesInto( Sink sink, R input, T matches )"
  },
  "phobos/std/regex/Functions/split.html": {
    "href": "phobos/std/regex/Functions/split.html",
    "title": "Overloads for - split | Marmos Demo",
    "keywords": "Overloads for - split Module std.regex split(input, rx) <bug: unknown> split( String input, RegEx rx ) An eager version of splitter that creates an array with splitted slices of input ."
  },
  "phobos/std/regex/Functions/splitter.html": {
    "href": "phobos/std/regex/Functions/splitter.html",
    "title": "Overloads for - splitter | Marmos Demo",
    "keywords": "Overloads for - splitter Module std.regex splitter(r, pat) Splitter!(keepSeparatorsRangeRegEx) splitter( Range r, RegEx pat ) ditto"
  },
  "phobos/std/regex/Overview.html": {
    "href": "phobos/std/regex/Overview.html",
    "title": "Module - std.regex | Marmos Demo",
    "keywords": "Module - std.regex About $(LINK2 https://en.wikipedia.org/wiki/Regular_expression, Regular expressions) are a commonly used method of pattern matching on strings, with $(I regex) being a catchy word for a pattern in this domain specific language. Typical problems usually solved by regular expressions include validation of user input and the ubiquitous find $(AMP) replace in text processing utilities. $(SCRIPT inhibitQuickIndex = 1;) $(DIVC quickindex, $(BOOKTABLE, $(TR $(TH Category) $(TH Functions)) $(TR $(TD Matching) $(TD $(LREF bmatch) $(LREF match) $(LREF matchAll) $(LREF matchFirst) )) $(TR $(TD Building) $(TD $(LREF ctRegex) $(LREF escaper) $(LREF regex) )) $(TR $(TD Replace) $(TD $(LREF replace) $(LREF replaceAll) $(LREF replaceAllInto) $(LREF replaceFirst) $(LREF replaceFirstInto) )) $(TR $(TD Split) $(TD $(LREF split) $(LREF splitter) )) $(TR $(TD Objects) $(TD $(LREF Captures) $(LREF Regex) $(LREF RegexException) $(LREF RegexMatch) $(LREF Splitter) $(LREF StaticRegex) )) )) $(SECTION Synopsis) Create a regex at runtime $(RUNNABLE_EXAMPLE $(RUNNABLE_EXAMPLE_STDIN They met on 24/01/1970. 7/8/99 wasn't as hot as 7/8/2022. ) --- import std.regex; import std.stdio; // Print out all possible dd/mm/yy(yy) dates found in user input. auto r = regex(r\"\\b[0-9][0-9]?/[0-9][0-9]?/[0-9]0-9?\\b\"); foreach (line; stdin.byLine) { // matchAll() returns a range that can be iterated // to get all subsequent matches. foreach (c; matchAll(line, r)) writeln(c.hit); } --- ) Create a static regex at compile-time, which contains fast native code: \\((RUNNABLE_EXAMPLE --- import std.regex; auto ctr = ctRegex!(`^.*/([^/]+)/?\\)`); // It works just like a normal regex auto c2 = matchFirst(\"foo/bar\", ctr); // First match found here, if any assert(!c2.empty); // Be sure to check if there is a match before examining contents! assert(c2[1] == \"bar\"); // Captures is a range of submatches: 0 = full match. --- ) Multi-pattern regex: $(RUNNABLE_EXAMPLE --- import std.regex; auto multi = regex([\\d+,\\d+, ([a-z]+):(\\d+) ]); auto m = \"abc:43 12,34\".matchAll(multi); assert(m.front.whichPattern == 2); assert(m.front[1] == \"abc\"); assert(m.front[2] == \"43\"); m.popFront(); assert(m.front.whichPattern == 1); assert(m.front[0] == \"12,34\"); --- ) $(LREF Captures) and opCast!bool : \\((RUNNABLE_EXAMPLE --- import std.regex; // The result of `matchAll/matchFirst` is directly testable with `if/assert/while` , // e.g. test if a string consists of letters only: assert(matchFirst(\"LettersOnly\", `^\\p{L}+\\)` )); // And we can take advantage of the ability to define a variable in the IfCondition if (const captures = matchFirst(\"At l34st one digit, but maybe more...\", ((\\d)(\\d*)) )) { assert(captures[2] == \"3\"); assert(captures[3] == \"4\"); assert(captures[1] == \"34\"); } --- ) See_Also: $(LINK2 https://dlang.org/spec/statement.html#IfCondition, IfCondition ). $(SECTION Syntax and general information) The general usage guideline is to keep regex complexity on the side of simplicity, as its capabilities reside in purely character-level manipulation. As such it's ill-suited for tasks involving higher level invariants like matching an integer number $(U bounded) in an [a,b] interval. Checks of this sort of are better addressed by additional post-processing. The basic syntax shouldn't surprise experienced users of regular expressions. For an introduction to std.regex see a $(HTTP dlang.org/regular-expression.html, short tour) of the module API and its abilities. There are other web resources on regular expressions to help newcomers, and a good $(HTTP www.regular-expressions.info, reference with tutorial) can easily be found. This library uses a remarkably common ECMAScript syntax flavor with the following extensions: $(UL $(LI Named subexpressions, with Python syntax. ) $(LI Unicode properties such as Scripts, Blocks and common binary properties e.g Alphabetic, White_Space, Hex_Digit etc.) $(LI Arbitrary length and complexity lookbehind, including lookahead in lookbehind and vise-versa.) ) $(REG_START Pattern syntax ) $(I std.regex operates on codepoint level, 'character' in this table denotes a single Unicode codepoint.) $(REG_TABLE $(REG_TITLE Pattern element, Semantics ) $(REG_TITLE Atoms, Match single characters ) \\((REG_ROW any character except [{|*+?()^\\), Matches the character itself. ) $(REG_ROW ., In single line mode matches any character. Otherwise it matches any character except '\\n' and '\\r'. ) $(REG_ROW [class], Matches a single character that belongs to this character class. ) $(REG_ROW [^class], Matches a single character that does $(U not) belong to this character class.) $(REG_ROW \\cC, Matches the control character corresponding to letter C) $(REG_ROW \\xXX, Matches a character with hexadecimal value of XX. ) $(REG_ROW \\uXXXX, Matches a character with hexadecimal value of XXXX. ) $(REG_ROW \\U00YYYYYY, Matches a character with hexadecimal value of YYYYYY. ) $(REG_ROW \\f, Matches a formfeed character. ) $(REG_ROW \\n, Matches a linefeed character. ) $(REG_ROW \\r, Matches a carriage return character. ) $(REG_ROW \\t, Matches a tab character. ) $(REG_ROW \\v, Matches a vertical tab character. ) $(REG_ROW \\d, Matches any Unicode digit. ) $(REG_ROW \\D, Matches any character except Unicode digits. ) $(REG_ROW \\w, Matches any word character (note: this includes numbers).) $(REG_ROW \\W, Matches any non-word character.) $(REG_ROW \\s, Matches whitespace, same as \\p{White_Space}.) $(REG_ROW \\S, Matches any character except those recognized as $(I \\s ). ) $(REG_ROW \\\\, Matches \\ character. ) $(REG_ROW \\c where c is one of [|*+?(), Matches the character c itself. ) $(REG_ROW \\p{PropertyName}, Matches a character that belongs to the Unicode PropertyName set. Single letter abbreviations can be used without surrounding {,}. ) $(REG_ROW \\P{PropertyName}, Matches a character that does not belong to the Unicode PropertyName set. Single letter abbreviations can be used without surrounding {,}. ) $(REG_ROW \\p{InBasicLatin}, Matches any character that is part of the BasicLatin Unicode $(U block).) $(REG_ROW \\P{InBasicLatin}, Matches any character except ones in the BasicLatin Unicode $(U block).) $(REG_ROW \\p{Cyrillic}, Matches any character that is part of Cyrillic $(U script).) $(REG_ROW \\P{Cyrillic}, Matches any character except ones in Cyrillic $(U script).) $(REG_TITLE Quantifiers, Specify repetition of other elements) $(REG_ROW , Matches previous character/subexpression 0 or more times. Greedy version - tries as many times as possible.) $(REG_ROW ?, Matches previous character/subexpression 0 or more times. Lazy version - stops as early as possible.) $(REG_ROW +, Matches previous character/subexpression 1 or more times. Greedy version - tries as many times as possible.) $(REG_ROW +?, Matches previous character/subexpression 1 or more times. Lazy version - stops as early as possible.) $(REG_ROW ?, Matches previous character/subexpression 0 or 1 time. Greedy version - tries as many times as possible.) $(REG_ROW ??, Matches previous character/subexpression 0 or 1 time. Lazy version - stops as early as possible.) $(REG_ROW {n}, Matches previous character/subexpression exactly n times. ) \\((REG_ROW {n\\)(COMMA)}, Matches previous character/subexpression n times or more. Greedy version - tries as many times as possible. ) \\((REG_ROW {n\\)(COMMA)}?, Matches previous character/subexpression n times or more. Lazy version - stops as early as possible.) \\((REG_ROW {n\\)(COMMA)m}, Matches previous character/subexpression n to m times. Greedy version - tries as many times as possible, but no more than m times. ) \\((REG_ROW {n\\)(COMMA)m}?, Matches previous character/subexpression n to m times. Lazy version - stops as early as possible, but no less then n times.) $(REG_TITLE Other, Subexpressions $(AMP) alternations ) $(REG_ROW (regex), Matches subexpression regex, saving matched portion of text for later retrieval. ) $(REG_ROW (?#comment), An inline comment that is ignored while matching.) $(REG_ROW (?:regex), Matches subexpression regex, $(U not) saving matched portion of text. Useful to speed up matching. ) $(REG_ROW A|B, Matches subexpression A, or failing that, matches B. ) \\((REG_ROW (?P\\)(LT)name$(GT)regex), Matches named subexpression regex labeling it with name 'name'. When referring to a matched portion of text, names work like aliases in addition to direct numbers. ) $(REG_TITLE Assertions, Match position rather than character ) $(REG_ROW ^, Matches at the beginning of input or line (in multiline mode).) $(REG_ROW $, Matches at the end of input or line (in multiline mode). ) $(REG_ROW \\b, Matches at word boundary. ) $(REG_ROW \\B, Matches when $(U not) at word boundary. ) $(REG_ROW (?=regex), Zero-width lookahead assertion. Matches at a point where the subexpression regex could be matched starting from the current position. ) $(REG_ROW (?!regex), Zero-width negative lookahead assertion. Matches at a point where the subexpression regex could $(U not) be matched starting from the current position. ) $(REG_ROW (?<=regex), Zero-width lookbehind assertion. Matches at a point where the subexpression regex could be matched ending at the current position (matching goes backwards). ) $(REG_ROW (?<!regex), Zero-width negative lookbehind assertion. Matches at a point where the subexpression regex could $(U not) be matched ending at the current position (matching goes backwards). ) ) $(REG_START Character classes ) $(REG_TABLE $(REG_TITLE Pattern element, Semantics ) $(REG_ROW Any atom, Has the same meaning as outside of a character class, except for ] which must be written as \\]) $(REG_ROW a-z, Includes characters a, b, c, ..., z. ) \\((REG_ROW [a||b]\\)(COMMA) [a--b]\\((COMMA) [a~~b]\\)(COMMA) [a$(AMP)$(AMP)b], Where a, b are arbitrary classes, means union, set difference, symmetric set difference, and intersection respectively. $(I Any sequence of character class elements implicitly forms a union.) ) ) $(REG_START Regex flags ) $(REG_TABLE $(REG_TITLE Flag, Semantics ) $(REG_ROW g, Global regex, repeat over the whole input. ) $(REG_ROW i, Case insensitive matching. ) $(REG_ROW m, Multi-line mode, match ^, \\(on start and end line separators as well as start and end of input.)\\)(REG_ROW s, Single-line mode, makes . match '\\n' and '\\r' as well. ) $(REG_ROW x, Free-form syntax, ignores whitespace in pattern, useful for formatting complex regular expressions. ) ) $(SECTION Unicode support) This library provides full Level 1 support* according to $(HTTP unicode.org/reports/tr18/, UTS 18). Specifically: $(UL $(LI 1.1 Hex notation via any of \\uxxxx, \\U00YYYYYY, \\xZZ.) $(LI 1.2 Unicode properties.) $(LI 1.3 Character classes with set operations.) $(LI 1.4 Word boundaries use the full set of \"word\" characters.) $(LI 1.5 Using simple casefolding to match case insensitively across the full range of codepoints.) $(LI 1.6 Respecting line breaks as any of \\u000A | \\u000B | \\u000C | \\u000D | \\u0085 | \\u2028 | \\u2029 | \\u000D\\u000A.) $(LI 1.7 Operating on codepoint level.) ) With exception of point 1.1.1, as of yet, normalization of input is expected to be enforced by user. $(SECTION Replace format string) A set of functions in this module that do the substitution rely on a simple format to guide the process. In particular the table below applies to the format argument of $(LREF replaceFirst) and $(LREF replaceAll). The format string can reference parts of match using the following notation. $(REG_TABLE $(REG_TITLE Format specifier, Replaced by ) $(REG_ROW \\((DOLLAR)\\)(AMP), the whole match. ) $(REG_ROW \\((DOLLAR)\\)(BACKTICK), part of input $(I preceding) the match. ) $(REG_ROW $', part of input $(I following) the match. ) $(REG_ROW $$, '$' character. ) $(REG_ROW \\c $(COMMA) where c is any character, the character c itself. ) $(REG_ROW \\\\, '\\' character. ) $(REG_ROW $(DOLLAR)1 .. $(DOLLAR)99, submatch number 1 to 99 respectively. ) ) $(SECTION Slicing and zero memory allocations orientation) All matches returned by pattern matching functionality in this library are slices of the original input. The notable exception is the replace family of functions that generate a new string from the input. In cases where producing the replacement is the ultimate goal $(LREF replaceFirstInto) and $(LREF replaceAllInto) could come in handy as functions that avoid allocations even for replacement. Copyright: Copyright Dmitry Olshansky, 2011- License: $(HTTP boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: Dmitry Olshansky, API and utility constructs are modeled after the original std.regex by Walter Bright and Andrei Alexandrescu. Source: $(PHOBOSSRC std/regex/package.d) Macros: REG_ROW = $(TR $(TD $(I $1 )) $(TD $+) ) REG_TITLE = $(TR $(TD $(B $1)) $(TD $(B $2)) ) REG_TABLE = $0 REG_START = $0 SECTION = $0 S_LINK = $+ Aliases Name Description Regex Regex object holds regular expression pattern in compiled form. RegexException Exception object thrown in case of errors during regex compilation. StaticRegex A StaticRegex is Regex object that contains D code specially generated at compile-time to speed up matching. Structs Name Description Captures Captures object contains submatches captured during a call to match or iteration over RegexMatch range. CTRegexWrapper RegexMatch A regex engine state, as returned by match family of functions. Splitter Splits a string r using a regular expression pat as a separator. Functions Name Description bmatch Start matching of input to regex pattern re , using traditional $(LINK2 https://en.wikipedia.org/wiki/Backtracking, backtracking) matching scheme. escaper A range that lazily produces a string output escaped to be used inside of a regular expression. match Start matching input to regex pattern re , using Thompson NFA matching scheme. matchAll Initiate a search for all non-overlapping matches to the pattern re in the given input . The result is a lazy range of matches generated as they are encountered in the input going left to right. matchFirst Find the first (leftmost) slice of the input that matches the pattern re . This function picks the most suitable regular expression engine depending on the pattern properties. matchMany matchOnce matchOnceImpl regex Compile regular expression pattern for the later execution. Returns: Regex object that works on inputs having the same character width as pattern . regexImpl replace Old API for replacement, operation depends on flags of pattern re . With \"g\" flag it performs the equivalent of $(LREF replaceAll) otherwise it works the same as $(LREF replaceFirst). replaceAll Construct a new string from input by replacing all of the fragments that match a pattern re with a string generated from the match according to the format specifier. replaceAllInto A variation on $(LREF replaceAll) that instead of allocating a new string on each call outputs the result piece-wise to the sink . In particular this enables efficient construction of a final output incrementally. replaceAllWith replaceCapturesInto replaceFirst Construct a new string from input by replacing the first match with a string generated from it according to the format specifier. replaceFirstInto A variation on $(LREF replaceFirst) that instead of allocating a new string on each call outputs the result piece-wise to the sink . In particular this enables efficient construction of a final output incrementally. replaceFirstWith replaceFmt replaceMatchesInto split An eager version of splitter that creates an array with splitted slices of input . splitter ditto Variables Name Description ctRegex Compile regular expression using CTFE and generate optimized native machine code for matching it. isRegexFor isReplaceFunctor"
  },
  "phobos/std/regex/RegexMatch/Functions/captures.html": {
    "href": "phobos/std/regex/RegexMatch/Functions/captures.html",
    "title": "Overloads for - captures | Marmos Demo",
    "keywords": "Overloads for - captures Module std.regex Parent RegexMatch captures() Captures!(R) captures( ) Same as .front, provided for compatibility with original std.regex."
  },
  "phobos/std/regex/RegexMatch/Functions/empty.html": {
    "href": "phobos/std/regex/RegexMatch/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.regex Parent RegexMatch empty() bool empty( ) Test if this match object is empty."
  },
  "phobos/std/regex/RegexMatch/Functions/front.html": {
    "href": "phobos/std/regex/RegexMatch/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.regex Parent RegexMatch front() Captures!(R) front( ) Functionality for processing subsequent matches of global regexes via range interface --- import std.regex; auto m = matchAll(\"Hello, world!\", regex(\\w+)); assert(m.front.hit == \"Hello\"); m.popFront(); assert(m.front.hit == \"world\"); m.popFront(); assert(m.empty); ---"
  },
  "phobos/std/regex/RegexMatch/Functions/hit.html": {
    "href": "phobos/std/regex/RegexMatch/Functions/hit.html",
    "title": "Overloads for - hit | Marmos Demo",
    "keywords": "Overloads for - hit Module std.regex Parent RegexMatch hit() R hit( ) ditto"
  },
  "phobos/std/regex/RegexMatch/Functions/popFront.html": {
    "href": "phobos/std/regex/RegexMatch/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.regex Parent RegexMatch popFront() void popFront( ) ditto"
  },
  "phobos/std/regex/RegexMatch/Functions/post.html": {
    "href": "phobos/std/regex/RegexMatch/Functions/post.html",
    "title": "Overloads for - post | Marmos Demo",
    "keywords": "Overloads for - post Module std.regex Parent RegexMatch post() R post( ) ditto"
  },
  "phobos/std/regex/RegexMatch/Functions/pre.html": {
    "href": "phobos/std/regex/RegexMatch/Functions/pre.html",
    "title": "Overloads for - pre | Marmos Demo",
    "keywords": "Overloads for - pre Module std.regex Parent RegexMatch pre() R pre( ) Shorthands for front.pre, front.post, front.hit."
  },
  "phobos/std/regex/RegexMatch/Functions/save.html": {
    "href": "phobos/std/regex/RegexMatch/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.regex Parent RegexMatch save() <bug: unknown> save( ) auto ditto"
  },
  "phobos/std/regex/Splitter/Functions/empty.html": {
    "href": "phobos/std/regex/Splitter/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.regex Parent Splitter empty() bool empty( ) ditto"
  },
  "phobos/std/regex/Splitter/Functions/front.html": {
    "href": "phobos/std/regex/Splitter/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.regex Parent Splitter front() Range front( ) Forward range primitives."
  },
  "phobos/std/regex/Splitter/Functions/opSlice.html": {
    "href": "phobos/std/regex/Splitter/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.regex Parent Splitter opSlice() <bug: unknown> opSlice( ) auto"
  },
  "phobos/std/regex/Splitter/Functions/popFront.html": {
    "href": "phobos/std/regex/Splitter/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.regex Parent Splitter popFront() void popFront( ) ditto"
  },
  "phobos/std/regex/Splitter/Functions/save.html": {
    "href": "phobos/std/regex/Splitter/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.regex Parent Splitter save() <bug: unknown> save( ) auto ditto"
  },
  "phobos/std/regex/Structs/CTRegexWrapper.html": {
    "href": "phobos/std/regex/Structs/CTRegexWrapper.html",
    "title": "Struct - CTRegexWrapper | Marmos Demo",
    "keywords": "Struct - CTRegexWrapper Module std.regex public struct CTRegexWrapper { // <bug: unknown> getRe( ) ; // <bug: unknown> re; } Functions Name Description getRe Variables Name Description re"
  },
  "phobos/std/regex/Structs/Captures.html": {
    "href": "phobos/std/regex/Structs/Captures.html",
    "title": "Struct - Captures | Marmos Demo",
    "keywords": "Struct - Captures Module std.regex public struct Captures { // alias DataIndex = <todo: marmos support pending>; // alias Store = <todo: marmos support pending>; // alias String = <todo: marmos support pending>; // ditto R back( ) ; // A hook for compatibility with original std.regex. <bug: unknown> captures( ) ; // ditto bool empty( ) ; // Range interface. R front( ) ; // R getMatch( size_t index ) ; // Slice of matched portion of input. R hit( ) ; // Number of matches in this object. size_t length( ) ; // ditto void popBack( ) ; // ditto void popFront( ) ; // Slice of input immediately after the match. R post( ) ; // Slice of input prior to the match. R pre( ) ; // Number of pattern matched counting, where 1 - the first pattern. Returns 0 on no match. int whichPattern( ) ; // Store matches; } About Captures object contains submatches captured during a call to match or iteration over RegexMatch range. First element of range is the whole match. Aliases Name Description DataIndex Store String Functions Name Description back ditto captures A hook for compatibility with original std.regex. empty ditto front Range interface. getMatch hit Slice of matched portion of input. length Number of matches in this object. popBack ditto popFront ditto post Slice of input immediately after the match. pre Slice of input prior to the match. whichPattern Number of pattern matched counting, where 1 - the first pattern. Returns 0 on no match. Variables Name Description matches"
  },
  "phobos/std/regex/Structs/RegexMatch.html": {
    "href": "phobos/std/regex/Structs/RegexMatch.html",
    "title": "Struct - RegexMatch | Marmos Demo",
    "keywords": "Struct - RegexMatch Module std.regex public struct RegexMatch { // alias Char = <todo: marmos support pending>; // Same as .front, provided for compatibility with original std.regex. Captures!(R) captures( ) ; // Test if this match object is empty. bool empty( ) ; // Captures!(R) front( ) ; // ditto R hit( ) ; // ditto void popFront( ) ; // ditto R post( ) ; // Shorthands for front.pre, front.post, front.hit. R pre( ) ; // ditto <bug: unknown> save( ) auto; } About A regex engine state, as returned by match family of functions. Effectively it's a forward range of Captures!R, produced by lazily searching for matches in a given input. Aliases Name Description Char Functions Name Description captures Same as .front, provided for compatibility with original std.regex. empty Test if this match object is empty. front hit ditto popFront ditto post ditto pre Shorthands for front.pre, front.post, front.hit. save ditto"
  },
  "phobos/std/regex/Structs/Splitter.html": {
    "href": "phobos/std/regex/Structs/Splitter.html",
    "title": "Struct - Splitter | Marmos Demo",
    "keywords": "Struct - Splitter Module std.regex public struct Splitter { // alias Rx = <todo: marmos support pending>; // ditto bool empty( ) ; // Forward range primitives. Range front( ) ; // <bug: unknown> opSlice( ) auto; // ditto void popFront( ) ; // ditto <bug: unknown> save( ) auto; // bool onMatch; } About Splits a string r using a regular expression pat as a separator. Params keepSeparators flag to specify if the matches should be in the resulting range r the string to split pat the pattern to split on r = the string to split pat = the pattern to split on Returns: A lazy range of strings Aliases Name Description Rx Functions Name Description empty ditto front Forward range primitives. opSlice popFront ditto save ditto Variables Name Description onMatch"
  },
  "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/atEnd.html": {
    "href": "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/atEnd.html",
    "title": "Overloads for - atEnd | Marmos Demo",
    "keywords": "Overloads for - atEnd Module std.regex.internal.backtracking Parent BacktrackingMatcher atEnd() bool atEnd( )"
  },
  "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/atStart.html": {
    "href": "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/atStart.html",
    "title": "Overloads for - atStart | Marmos Demo",
    "keywords": "Overloads for - atStart Module std.regex.internal.backtracking Parent BacktrackingMatcher atStart() bool atStart( )"
  },
  "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/bwdMatcher.html": {
    "href": "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/bwdMatcher.html",
    "title": "Overloads for - bwdMatcher | Marmos Demo",
    "keywords": "Overloads for - bwdMatcher Module std.regex.internal.backtracking Parent BacktrackingMatcher bwdMatcher(re, memBlock) <bug: unknown> bwdMatcher( RegEx re, <bug: unknown> memBlock ) auto"
  },
  "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/dupTo.html": {
    "href": "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/dupTo.html",
    "title": "Overloads for - dupTo | Marmos Demo",
    "keywords": "Overloads for - dupTo Module std.regex.internal.backtracking Parent BacktrackingMatcher dupTo(m, memBlock) void dupTo( Matcher!(Char) m, <bug: unknown> memBlock ) override"
  },
  "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/fwdMatcher.html": {
    "href": "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/fwdMatcher.html",
    "title": "Overloads for - fwdMatcher | Marmos Demo",
    "keywords": "Overloads for - fwdMatcher Module std.regex.internal.backtracking Parent BacktrackingMatcher fwdMatcher(re, memBlock) <bug: unknown> fwdMatcher( RegEx re, <bug: unknown> memBlock ) auto"
  },
  "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/initExternalMemory.html": {
    "href": "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/initExternalMemory.html",
    "title": "Overloads for - initExternalMemory | Marmos Demo",
    "keywords": "Overloads for - initExternalMemory Module std.regex.internal.backtracking Parent BacktrackingMatcher initExternalMemory(memBlock) void initExternalMemory( <bug: unknown> memBlock )"
  },
  "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/initialMemory.html": {
    "href": "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/initialMemory.html",
    "title": "Overloads for - initialMemory | Marmos Demo",
    "keywords": "Overloads for - initialMemory Module std.regex.internal.backtracking Parent BacktrackingMatcher initialMemory(re) size_t initialMemory( RegEx re ) static"
  },
  "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/initialize.html": {
    "href": "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/initialize.html",
    "title": "Overloads for - initialize | Marmos Demo",
    "keywords": "Overloads for - initialize Module std.regex.internal.backtracking Parent BacktrackingMatcher initialize(program, stream, memBlock) void initialize( RegEx program, Stream stream, <bug: unknown> memBlock )"
  },
  "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/match.html": {
    "href": "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/match.html",
    "title": "Overloads for - match | Marmos Demo",
    "keywords": "Overloads for - match Module std.regex.internal.backtracking Parent BacktrackingMatcher match(matches) int match( <bug: unknown> matches ) override"
  },
  "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/matchFinalize.html": {
    "href": "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/matchFinalize.html",
    "title": "Overloads for - matchFinalize | Marmos Demo",
    "keywords": "Overloads for - matchFinalize Module std.regex.internal.backtracking Parent BacktrackingMatcher matchFinalize() int matchFinalize( )"
  },
  "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/matchImpl.html": {
    "href": "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/matchImpl.html",
    "title": "Overloads for - matchImpl | Marmos Demo",
    "keywords": "Overloads for - matchImpl Module std.regex.internal.backtracking Parent BacktrackingMatcher matchImpl() int matchImpl( )"
  },
  "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/newStack.html": {
    "href": "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/newStack.html",
    "title": "Overloads for - newStack | Marmos Demo",
    "keywords": "Overloads for - newStack Module std.regex.internal.backtracking Parent BacktrackingMatcher newStack() void newStack( )"
  },
  "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/next.html": {
    "href": "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/next.html",
    "title": "Overloads for - next | Marmos Demo",
    "keywords": "Overloads for - next Module std.regex.internal.backtracking Parent BacktrackingMatcher next() void next( )"
  },
  "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/pattern.html": {
    "href": "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/pattern.html",
    "title": "Overloads for - pattern | Marmos Demo",
    "keywords": "Overloads for - pattern Module std.regex.internal.backtracking Parent BacktrackingMatcher pattern() RegEx pattern( ) override"
  },
  "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/popState.html": {
    "href": "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/popState.html",
    "title": "Overloads for - popState | Marmos Demo",
    "keywords": "Overloads for - popState Module std.regex.internal.backtracking Parent BacktrackingMatcher popState() bool popState( )"
  },
  "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/prevStack.html": {
    "href": "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/prevStack.html",
    "title": "Overloads for - prevStack | Marmos Demo",
    "keywords": "Overloads for - prevStack Module std.regex.internal.backtracking Parent BacktrackingMatcher prevStack() bool prevStack( )"
  },
  "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/pushState.html": {
    "href": "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/pushState.html",
    "title": "Overloads for - pushState | Marmos Demo",
    "keywords": "Overloads for - pushState Module std.regex.internal.backtracking Parent BacktrackingMatcher pushState(pc, counter) void pushState( uint pc, uint counter )"
  },
  "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/rearm.html": {
    "href": "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/rearm.html",
    "title": "Overloads for - rearm | Marmos Demo",
    "keywords": "Overloads for - rearm Module std.regex.internal.backtracking Parent BacktrackingMatcher rearm(data) Matcher!(Char) rearm( <bug: unknown> data ) override"
  },
  "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/refCount.html": {
    "href": "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/refCount.html",
    "title": "Overloads for - refCount | Marmos Demo",
    "keywords": "Overloads for - refCount Module std.regex.internal.backtracking Parent BacktrackingMatcher refCount() size_t refCount( ) override"
  },
  "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/search.html": {
    "href": "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/search.html",
    "title": "Overloads for - search | Marmos Demo",
    "keywords": "Overloads for - search Module std.regex.internal.backtracking Parent BacktrackingMatcher search() void search( )"
  },
  "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/stackAvail.html": {
    "href": "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/stackAvail.html",
    "title": "Overloads for - stackAvail | Marmos Demo",
    "keywords": "Overloads for - stackAvail Module std.regex.internal.backtracking Parent BacktrackingMatcher stackAvail() size_t stackAvail( )"
  },
  "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/stackSize.html": {
    "href": "phobos/std/regex/internal/backtracking/BacktrackingMatcher/Functions/stackSize.html",
    "title": "Overloads for - stackSize | Marmos Demo",
    "keywords": "Overloads for - stackSize Module std.regex.internal.backtracking Parent BacktrackingMatcher stackSize(re) size_t stackSize( RegEx re ) static"
  },
  "phobos/std/regex/internal/backtracking/Classes/BacktrackingMatcher.html": {
    "href": "phobos/std/regex/internal/backtracking/Classes/BacktrackingMatcher.html",
    "title": "Class - BacktrackingMatcher | Marmos Demo",
    "keywords": "Class - BacktrackingMatcher Module std.regex.internal.backtracking public class BacktrackingMatcher { // alias DataIndex = <todo: marmos support pending>; // alias MatchFn = <todo: marmos support pending>; // alias RegEx = <todo: marmos support pending>; // alias String = <todo: marmos support pending>; // bool atEnd( ) ; // bool atStart( ) ; // <bug: unknown> bwdMatcher( RegEx re, <bug: unknown> memBlock ) auto; // void dupTo( Matcher!(Char) m, <bug: unknown> memBlock ) override; // <bug: unknown> fwdMatcher( RegEx re, <bug: unknown> memBlock ) auto; // void initExternalMemory( <bug: unknown> memBlock ) ; // void initialize( RegEx program, Stream stream, <bug: unknown> memBlock ) ; // size_t initialMemory( RegEx re ) static; // int match( <bug: unknown> matches ) override; // int matchFinalize( ) ; // int matchImpl( ) ; // void newStack( ) ; // void next( ) ; // RegEx pattern( ) override; // bool popState( ) ; // bool prevStack( ) ; // void pushState( uint pc, uint counter ) ; // Matcher!(Char) rearm( <bug: unknown> data ) override; // size_t refCount( ) override; // void search( ) ; // size_t stackAvail( ) ; // size_t stackSize( RegEx re ) static; // <bug: unknown> backrefed; // uint counter; // bool exhausted; // dchar front; // DataIndex index; // uint infiniteNesting; // __enumMember initialStack; // __enumMember kicked; // DataIndex lastState; // <bug: unknown> matches; // <bug: unknown> memory; // <bug: unknown> merge; // MatchFn nativeFn; // uint pc; // const RegEx re; // Stream s; // __enumMember stateSize; } Aliases Name Description DataIndex MatchFn RegEx String Functions Name Description atEnd atStart bwdMatcher dupTo fwdMatcher initExternalMemory initialize initialMemory match matchFinalize matchImpl newStack next pattern popState prevStack pushState rearm refCount search stackAvail stackSize Variables Name Description backrefed counter exhausted front index infiniteNesting initialStack kicked lastState matches memory merge nativeFn pc re s stateSize"
  },
  "phobos/std/regex/internal/backtracking/CtContext/Functions/ctAtomCode.html": {
    "href": "phobos/std/regex/internal/backtracking/CtContext/Functions/ctAtomCode.html",
    "title": "Overloads for - ctAtomCode | Marmos Demo",
    "keywords": "Overloads for - ctAtomCode Module std.regex.internal.backtracking Parent CtContext ctAtomCode(ir, addr) string ctAtomCode( <bug: unknown> ir, int addr )"
  },
  "phobos/std/regex/internal/backtracking/CtContext/Functions/ctGenAlternation.html": {
    "href": "phobos/std/regex/internal/backtracking/CtContext/Functions/ctGenAlternation.html",
    "title": "Overloads for - ctGenAlternation | Marmos Demo",
    "keywords": "Overloads for - ctGenAlternation Module std.regex.internal.backtracking Parent CtContext ctGenAlternation(ir, addr) CtState ctGenAlternation( <bug: unknown> ir, int addr )"
  },
  "phobos/std/regex/internal/backtracking/CtContext/Functions/ctGenAtom.html": {
    "href": "phobos/std/regex/internal/backtracking/CtContext/Functions/ctGenAtom.html",
    "title": "Overloads for - ctGenAtom | Marmos Demo",
    "keywords": "Overloads for - ctGenAtom Module std.regex.internal.backtracking Parent CtContext ctGenAtom(ir, addr) CtState ctGenAtom( <bug: unknown> ir, int addr )"
  },
  "phobos/std/regex/internal/backtracking/CtContext/Functions/ctGenBlock.html": {
    "href": "phobos/std/regex/internal/backtracking/CtContext/Functions/ctGenBlock.html",
    "title": "Overloads for - ctGenBlock | Marmos Demo",
    "keywords": "Overloads for - ctGenBlock Module std.regex.internal.backtracking Parent CtContext ctGenBlock(ir, addr) CtState ctGenBlock( <bug: unknown> ir, int addr )"
  },
  "phobos/std/regex/internal/backtracking/CtContext/Functions/ctGenFixupCode.html": {
    "href": "phobos/std/regex/internal/backtracking/CtContext/Functions/ctGenFixupCode.html",
    "title": "Overloads for - ctGenFixupCode | Marmos Demo",
    "keywords": "Overloads for - ctGenFixupCode Module std.regex.internal.backtracking Parent CtContext ctGenFixupCode(ir, addr, fixup) string ctGenFixupCode( <bug: unknown> ir, int addr, int fixup ) ctGenFixupCode(ir, addr, fixup) string ctGenFixupCode( <bug: unknown> ir, int addr, int fixup )"
  },
  "phobos/std/regex/internal/backtracking/CtContext/Functions/ctGenGroup.html": {
    "href": "phobos/std/regex/internal/backtracking/CtContext/Functions/ctGenGroup.html",
    "title": "Overloads for - ctGenGroup | Marmos Demo",
    "keywords": "Overloads for - ctGenGroup Module std.regex.internal.backtracking Parent CtContext ctGenGroup(ir, addr) CtState ctGenGroup( <bug: unknown> ir, int addr )"
  },
  "phobos/std/regex/internal/backtracking/CtContext/Functions/ctGenRegEx.html": {
    "href": "phobos/std/regex/internal/backtracking/CtContext/Functions/ctGenRegEx.html",
    "title": "Overloads for - ctGenRegEx | Marmos Demo",
    "keywords": "Overloads for - ctGenRegEx Module std.regex.internal.backtracking Parent CtContext ctGenRegEx(ir) string ctGenRegEx( <bug: unknown> ir )"
  },
  "phobos/std/regex/internal/backtracking/CtContext/Functions/ctQuickTest.html": {
    "href": "phobos/std/regex/internal/backtracking/CtContext/Functions/ctQuickTest.html",
    "title": "Overloads for - ctQuickTest | Marmos Demo",
    "keywords": "Overloads for - ctQuickTest Module std.regex.internal.backtracking Parent CtContext ctQuickTest(ir, id) string ctQuickTest( <bug: unknown> ir, int id )"
  },
  "phobos/std/regex/internal/backtracking/CtContext/Functions/lookaround.html": {
    "href": "phobos/std/regex/internal/backtracking/CtContext/Functions/lookaround.html",
    "title": "Overloads for - lookaround | Marmos Demo",
    "keywords": "Overloads for - lookaround Module std.regex.internal.backtracking Parent CtContext lookaround(s, e) CtContext lookaround( uint s, uint e )"
  },
  "phobos/std/regex/internal/backtracking/CtContext/Functions/restoreCode.html": {
    "href": "phobos/std/regex/internal/backtracking/CtContext/Functions/restoreCode.html",
    "title": "Overloads for - restoreCode | Marmos Demo",
    "keywords": "Overloads for - restoreCode Module std.regex.internal.backtracking Parent CtContext restoreCode() string restoreCode( )"
  },
  "phobos/std/regex/internal/backtracking/CtContext/Functions/saveCode.html": {
    "href": "phobos/std/regex/internal/backtracking/CtContext/Functions/saveCode.html",
    "title": "Overloads for - saveCode | Marmos Demo",
    "keywords": "Overloads for - saveCode Module std.regex.internal.backtracking Parent CtContext saveCode(pc, count_expr) string saveCode( uint pc, string count_expr )"
  },
  "phobos/std/regex/internal/backtracking/Functions/ctGenRegExCode.html": {
    "href": "phobos/std/regex/internal/backtracking/Functions/ctGenRegExCode.html",
    "title": "Overloads for - ctGenRegExCode | Marmos Demo",
    "keywords": "Overloads for - ctGenRegExCode Module std.regex.internal.backtracking ctGenRegExCode(re) string ctGenRegExCode( Regex!(Char) re )"
  },
  "phobos/std/regex/internal/backtracking/Functions/ctSub.html": {
    "href": "phobos/std/regex/internal/backtracking/Functions/ctSub.html",
    "title": "Overloads for - ctSub | Marmos Demo",
    "keywords": "Overloads for - ctSub Module std.regex.internal.backtracking ctSub(format, args) string ctSub( string format, U args )"
  },
  "phobos/std/regex/internal/backtracking/Overview.html": {
    "href": "phobos/std/regex/internal/backtracking/Overview.html",
    "title": "Module - std.regex.internal.backtracking | Marmos Demo",
    "keywords": "Module - std.regex.internal.backtracking Classes Name Description BacktrackingMatcher Structs Name Description CtContext Functions Name Description ctGenRegExCode ctSub"
  },
  "phobos/std/regex/internal/backtracking/Structs/CtContext.html": {
    "href": "phobos/std/regex/internal/backtracking/Structs/CtContext.html",
    "title": "Struct - CtContext | Marmos Demo",
    "keywords": "Struct - CtContext Module std.regex.internal.backtracking public struct CtContext { // string ctAtomCode( <bug: unknown> ir, int addr ) ; // CtState ctGenAlternation( <bug: unknown> ir, int addr ) ; // CtState ctGenAtom( <bug: unknown> ir, int addr ) ; // CtState ctGenBlock( <bug: unknown> ir, int addr ) ; // string ctGenFixupCode( <bug: unknown> ir, int addr, int fixup ) ; // string ctGenFixupCode( <bug: unknown> ir, int addr, int fixup ) ; // CtState ctGenGroup( <bug: unknown> ir, int addr ) ; // string ctGenRegEx( <bug: unknown> ir ) ; // string ctQuickTest( <bug: unknown> ir, int id ) ; // CtContext lookaround( uint s, uint e ) ; // string restoreCode( ) ; // string saveCode( uint pc, string count_expr ) ; // <bug: unknown> charsets; // bool counter; // int match; // int reserved; // int total_matches; } Functions Name Description ctAtomCode ctGenAlternation ctGenAtom ctGenBlock ctGenFixupCode ctGenGroup ctGenRegEx ctQuickTest lookaround restoreCode saveCode Variables Name Description charsets counter match reserved total_matches"
  },
  "phobos/std/regex/internal/generator/Overview.html": {
    "href": "phobos/std/regex/internal/generator/Overview.html",
    "title": "Module - std.regex.internal.generator | Marmos Demo",
    "keywords": "Module - std.regex.internal.generator Structs Name Description SampleGenerator"
  },
  "phobos/std/regex/internal/generator/SampleGenerator/Functions/compose.html": {
    "href": "phobos/std/regex/internal/generator/SampleGenerator/Functions/compose.html",
    "title": "Overloads for - compose | Marmos Demo",
    "keywords": "Overloads for - compose Module std.regex.internal.generator Parent SampleGenerator compose() void compose( )"
  },
  "phobos/std/regex/internal/generator/SampleGenerator/Functions/front.html": {
    "href": "phobos/std/regex/internal/generator/SampleGenerator/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.regex.internal.generator Parent SampleGenerator front() <bug: unknown> front( )"
  },
  "phobos/std/regex/internal/generator/SampleGenerator/Functions/popFront.html": {
    "href": "phobos/std/regex/internal/generator/SampleGenerator/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.regex.internal.generator Parent SampleGenerator popFront() void popFront( )"
  },
  "phobos/std/regex/internal/generator/SampleGenerator/Functions/rand.html": {
    "href": "phobos/std/regex/internal/generator/SampleGenerator/Functions/rand.html",
    "title": "Overloads for - rand | Marmos Demo",
    "keywords": "Overloads for - rand Module std.regex.internal.generator Parent SampleGenerator rand(x) uint rand( uint x )"
  },
  "phobos/std/regex/internal/generator/Structs/SampleGenerator.html": {
    "href": "phobos/std/regex/internal/generator/Structs/SampleGenerator.html",
    "title": "Struct - SampleGenerator | Marmos Demo",
    "keywords": "Struct - SampleGenerator Module std.regex.internal.generator public struct SampleGenerator { // void compose( ) ; // <bug: unknown> front( ) ; // void popFront( ) ; // uint rand( uint x ) ; // Appender!(char[]) app; // __enumMember empty; // Xorshift gen; // uint limit; // Regex!(Char) re; // uint seed; } Functions Name Description compose front popFront rand Variables Name Description app empty gen limit re seed"
  },
  "phobos/std/regex/internal/ir/BackLooperImpl/Functions/atEnd.html": {
    "href": "phobos/std/regex/internal/ir/BackLooperImpl/Functions/atEnd.html",
    "title": "Overloads for - atEnd | Marmos Demo",
    "keywords": "Overloads for - atEnd Module std.regex.internal.ir Parent BackLooperImpl atEnd() <bug: unknown> atEnd( )"
  },
  "phobos/std/regex/internal/ir/BackLooperImpl/Functions/lastIndex.html": {
    "href": "phobos/std/regex/internal/ir/BackLooperImpl/Functions/lastIndex.html",
    "title": "Overloads for - lastIndex | Marmos Demo",
    "keywords": "Overloads for - lastIndex Module std.regex.internal.ir Parent BackLooperImpl lastIndex() size_t lastIndex( )"
  },
  "phobos/std/regex/internal/ir/BackLooperImpl/Functions/loopBack.html": {
    "href": "phobos/std/regex/internal/ir/BackLooperImpl/Functions/loopBack.html",
    "title": "Overloads for - loopBack | Marmos Demo",
    "keywords": "Overloads for - loopBack Module std.regex.internal.ir Parent BackLooperImpl loopBack(index) <bug: unknown> loopBack( size_t index ) auto"
  },
  "phobos/std/regex/internal/ir/BackLooperImpl/Functions/nextChar.html": {
    "href": "phobos/std/regex/internal/ir/BackLooperImpl/Functions/nextChar.html",
    "title": "Overloads for - nextChar | Marmos Demo",
    "keywords": "Overloads for - nextChar Module std.regex.internal.ir Parent BackLooperImpl nextChar(res, pos) bool nextChar( dchar res, size_t pos )"
  },
  "phobos/std/regex/internal/ir/BackLooperImpl/Functions/opSlice.html": {
    "href": "phobos/std/regex/internal/ir/BackLooperImpl/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.regex.internal.ir Parent BackLooperImpl opSlice(start, end) String opSlice( size_t start, size_t end )"
  },
  "phobos/std/regex/internal/ir/BackLooperImpl/Functions/reset.html": {
    "href": "phobos/std/regex/internal/ir/BackLooperImpl/Functions/reset.html",
    "title": "Overloads for - reset | Marmos Demo",
    "keywords": "Overloads for - reset Module std.regex.internal.ir Parent BackLooperImpl reset(index) void reset( size_t index )"
  },
  "phobos/std/regex/internal/ir/Bytecode/Functions/args.html": {
    "href": "phobos/std/regex/internal/ir/Bytecode/Functions/args.html",
    "title": "Overloads for - args | Marmos Demo",
    "keywords": "Overloads for - args Module std.regex.internal.ir Parent Bytecode args() int args( )"
  },
  "phobos/std/regex/internal/ir/Bytecode/Functions/backreference.html": {
    "href": "phobos/std/regex/internal/ir/Bytecode/Functions/backreference.html",
    "title": "Overloads for - backreference | Marmos Demo",
    "keywords": "Overloads for - backreference Module std.regex.internal.ir Parent Bytecode backreference() bool backreference( )"
  },
  "phobos/std/regex/internal/ir/Bytecode/Functions/fromRaw.html": {
    "href": "phobos/std/regex/internal/ir/Bytecode/Functions/fromRaw.html",
    "title": "Overloads for - fromRaw | Marmos Demo",
    "keywords": "Overloads for - fromRaw Module std.regex.internal.ir Parent Bytecode fromRaw(data) Bytecode fromRaw( uint data ) static"
  },
  "phobos/std/regex/internal/ir/Bytecode/Functions/hotspot.html": {
    "href": "phobos/std/regex/internal/ir/Bytecode/Functions/hotspot.html",
    "title": "Overloads for - hotspot | Marmos Demo",
    "keywords": "Overloads for - hotspot Module std.regex.internal.ir Parent Bytecode hotspot() bool hotspot( )"
  },
  "phobos/std/regex/internal/ir/Bytecode/Functions/indexOfPair.html": {
    "href": "phobos/std/regex/internal/ir/Bytecode/Functions/indexOfPair.html",
    "title": "Overloads for - indexOfPair | Marmos Demo",
    "keywords": "Overloads for - indexOfPair Module std.regex.internal.ir Parent Bytecode indexOfPair(pc) uint indexOfPair( uint pc )"
  },
  "phobos/std/regex/internal/ir/Bytecode/Functions/isAtom.html": {
    "href": "phobos/std/regex/internal/ir/Bytecode/Functions/isAtom.html",
    "title": "Overloads for - isAtom | Marmos Demo",
    "keywords": "Overloads for - isAtom Module std.regex.internal.ir Parent Bytecode isAtom() bool isAtom( )"
  },
  "phobos/std/regex/internal/ir/Bytecode/Functions/isEnd.html": {
    "href": "phobos/std/regex/internal/ir/Bytecode/Functions/isEnd.html",
    "title": "Overloads for - isEnd | Marmos Demo",
    "keywords": "Overloads for - isEnd Module std.regex.internal.ir Parent Bytecode isEnd() bool isEnd( )"
  },
  "phobos/std/regex/internal/ir/Bytecode/Functions/isStart.html": {
    "href": "phobos/std/regex/internal/ir/Bytecode/Functions/isStart.html",
    "title": "Overloads for - isStart | Marmos Demo",
    "keywords": "Overloads for - isStart Module std.regex.internal.ir Parent Bytecode isStart() bool isStart( )"
  },
  "phobos/std/regex/internal/ir/Bytecode/Functions/length.html": {
    "href": "phobos/std/regex/internal/ir/Bytecode/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.regex.internal.ir Parent Bytecode length() uint length( )"
  },
  "phobos/std/regex/internal/ir/Bytecode/Functions/localRef.html": {
    "href": "phobos/std/regex/internal/ir/Bytecode/Functions/localRef.html",
    "title": "Overloads for - localRef | Marmos Demo",
    "keywords": "Overloads for - localRef Module std.regex.internal.ir Parent Bytecode localRef() bool localRef( )"
  },
  "phobos/std/regex/internal/ir/Bytecode/Functions/paired.html": {
    "href": "phobos/std/regex/internal/ir/Bytecode/Functions/paired.html",
    "title": "Overloads for - paired | Marmos Demo",
    "keywords": "Overloads for - paired Module std.regex.internal.ir Parent Bytecode paired() Bytecode paired( )"
  },
  "phobos/std/regex/internal/ir/Bytecode/Functions/pairedLength.html": {
    "href": "phobos/std/regex/internal/ir/Bytecode/Functions/pairedLength.html",
    "title": "Overloads for - pairedLength | Marmos Demo",
    "keywords": "Overloads for - pairedLength Module std.regex.internal.ir Parent Bytecode pairedLength() uint pairedLength( )"
  },
  "phobos/std/regex/internal/ir/Bytecode/Functions/setBackrefence.html": {
    "href": "phobos/std/regex/internal/ir/Bytecode/Functions/setBackrefence.html",
    "title": "Overloads for - setBackrefence | Marmos Demo",
    "keywords": "Overloads for - setBackrefence Module std.regex.internal.ir Parent Bytecode setBackrefence() void setBackrefence( )"
  },
  "phobos/std/regex/internal/ir/Bytecode/Functions/setLocalRef.html": {
    "href": "phobos/std/regex/internal/ir/Bytecode/Functions/setLocalRef.html",
    "title": "Overloads for - setLocalRef | Marmos Demo",
    "keywords": "Overloads for - setLocalRef Module std.regex.internal.ir Parent Bytecode setLocalRef() void setLocalRef( )"
  },
  "phobos/std/regex/internal/ir/Classes/CtfeFactory.html": {
    "href": "phobos/std/regex/internal/ir/Classes/CtfeFactory.html",
    "title": "Class - CtfeFactory | Marmos Demo",
    "keywords": "Class - CtfeFactory Module std.regex.internal.ir public class CtfeFactory { // EngineType!(Char) construct( Regex!(Char) re, <bug: unknown> input, <bug: unknown> memory ) override; } Functions Name Description construct"
  },
  "phobos/std/regex/internal/ir/Classes/GenericFactory.html": {
    "href": "phobos/std/regex/internal/ir/Classes/GenericFactory.html",
    "title": "Class - GenericFactory | Marmos Demo",
    "keywords": "Class - GenericFactory Module std.regex.internal.ir public class GenericFactory { // EngineType!(Char) construct( Regex!(Char) re, <bug: unknown> input, <bug: unknown> memory ) ; // EngineType!(Char) create( Regex!(Char) re, <bug: unknown> input ) override; // size_t decRef( Matcher!(Char) m ) override; // EngineType!(Char) dup( Matcher!(Char) engine, <bug: unknown> input ) override; // size_t incRef( Matcher!(Char) m ) override; // __enumMember classSize; } Functions Name Description construct create decRef dup incRef Variables Name Description classSize"
  },
  "phobos/std/regex/internal/ir/Classes/Matcher.html": {
    "href": "phobos/std/regex/internal/ir/Classes/Matcher.html",
    "title": "Class - Matcher | Marmos Demo",
    "keywords": "Class - Matcher Module std.regex.internal.ir public class Matcher { // void dupTo( Matcher!(Char) m, <bug: unknown> memory ) ; // int match( <bug: unknown> matches ) ; // Regex!(Char) pattern( ) ; // Matcher rearm( <bug: unknown> stream ) ; // size_t refCount( ) ; } Functions Name Description dupTo match pattern rearm refCount"
  },
  "phobos/std/regex/internal/ir/Classes/RegexException.html": {
    "href": "phobos/std/regex/internal/ir/Classes/RegexException.html",
    "title": "Class - RegexException | Marmos Demo",
    "keywords": "Class - RegexException Module std.regex.internal.ir public class RegexException { } About Exception object thrown in case of errors during regex compilation."
  },
  "phobos/std/regex/internal/ir/Classes/RuntimeFactory.html": {
    "href": "phobos/std/regex/internal/ir/Classes/RuntimeFactory.html",
    "title": "Class - RuntimeFactory | Marmos Demo",
    "keywords": "Class - RuntimeFactory Module std.regex.internal.ir public class RuntimeFactory { // EngineType!(Char) construct( Regex!(Char) re, <bug: unknown> input, <bug: unknown> memory ) override; } Functions Name Description construct"
  },
  "phobos/std/regex/internal/ir/CtfeFactory/Functions/construct.html": {
    "href": "phobos/std/regex/internal/ir/CtfeFactory/Functions/construct.html",
    "title": "Overloads for - construct | Marmos Demo",
    "keywords": "Overloads for - construct Module std.regex.internal.ir Parent CtfeFactory construct(re, input, memory) EngineType!(Char) construct( Regex!(Char) re, <bug: unknown> input, <bug: unknown> memory ) override"
  },
  "phobos/std/regex/internal/ir/Functions/arrayInChunk.html": {
    "href": "phobos/std/regex/internal/ir/Functions/arrayInChunk.html",
    "title": "Overloads for - arrayInChunk | Marmos Demo",
    "keywords": "Overloads for - arrayInChunk Module std.regex.internal.ir arrayInChunk(len, chunk) <bug: unknown> arrayInChunk( size_t len, <bug: unknown> chunk )"
  },
  "phobos/std/regex/internal/ir/Functions/assumePureFunction.html": {
    "href": "phobos/std/regex/internal/ir/Functions/assumePureFunction.html",
    "title": "Overloads for - assumePureFunction | Marmos Demo",
    "keywords": "Overloads for - assumePureFunction Module std.regex.internal.ir assumePureFunction(t) <bug: unknown> assumePureFunction( T t ) auto"
  },
  "phobos/std/regex/internal/ir/Functions/defaultFactory.html": {
    "href": "phobos/std/regex/internal/ir/Functions/defaultFactory.html",
    "title": "Overloads for - defaultFactory | Marmos Demo",
    "keywords": "Overloads for - defaultFactory Module std.regex.internal.ir defaultFactory(re) MatcherFactory!(Char) defaultFactory( Regex!(Char) re )"
  },
  "phobos/std/regex/internal/ir/Functions/defaultFactoryImpl.html": {
    "href": "phobos/std/regex/internal/ir/Functions/defaultFactoryImpl.html",
    "title": "Overloads for - defaultFactoryImpl | Marmos Demo",
    "keywords": "Overloads for - defaultFactoryImpl Module std.regex.internal.ir defaultFactoryImpl(re) <bug: unknown> defaultFactoryImpl( Regex!(Char) re ) auto"
  },
  "phobos/std/regex/internal/ir/Functions/disassemble.html": {
    "href": "phobos/std/regex/internal/ir/Functions/disassemble.html",
    "title": "Overloads for - disassemble | Marmos Demo",
    "keywords": "Overloads for - disassemble Module std.regex.internal.ir disassemble(irb, pc, dict) string disassemble( <bug: unknown> irb, uint pc, <bug: unknown> dict )"
  },
  "phobos/std/regex/internal/ir/Functions/endOfLine.html": {
    "href": "phobos/std/regex/internal/ir/Functions/endOfLine.html",
    "title": "Overloads for - endOfLine | Marmos Demo",
    "keywords": "Overloads for - endOfLine Module std.regex.internal.ir endOfLine(front, seenCr) bool endOfLine( dchar front, bool seenCr )"
  },
  "phobos/std/regex/internal/ir/Functions/getMatcher.html": {
    "href": "phobos/std/regex/internal/ir/Functions/getMatcher.html",
    "title": "Overloads for - getMatcher | Marmos Demo",
    "keywords": "Overloads for - getMatcher Module std.regex.internal.ir getMatcher(set) CharMatcher getMatcher( CodepointSet set )"
  },
  "phobos/std/regex/internal/ir/Functions/hasMerge.html": {
    "href": "phobos/std/regex/internal/ir/Functions/hasMerge.html",
    "title": "Overloads for - hasMerge | Marmos Demo",
    "keywords": "Overloads for - hasMerge Module std.regex.internal.ir hasMerge(i) bool hasMerge( IR i )"
  },
  "phobos/std/regex/internal/ir/Functions/immediateParamsIR.html": {
    "href": "phobos/std/regex/internal/ir/Functions/immediateParamsIR.html",
    "title": "Overloads for - immediateParamsIR | Marmos Demo",
    "keywords": "Overloads for - immediateParamsIR Module std.regex.internal.ir immediateParamsIR(i) int immediateParamsIR( IR i )"
  },
  "phobos/std/regex/internal/ir/Functions/isAtomIR.html": {
    "href": "phobos/std/regex/internal/ir/Functions/isAtomIR.html",
    "title": "Overloads for - isAtomIR | Marmos Demo",
    "keywords": "Overloads for - isAtomIR Module std.regex.internal.ir isAtomIR(i) bool isAtomIR( IR i )"
  },
  "phobos/std/regex/internal/ir/Functions/isEndIR.html": {
    "href": "phobos/std/regex/internal/ir/Functions/isEndIR.html",
    "title": "Overloads for - isEndIR | Marmos Demo",
    "keywords": "Overloads for - isEndIR Module std.regex.internal.ir isEndIR(i) bool isEndIR( IR i )"
  },
  "phobos/std/regex/internal/ir/Functions/isStartIR.html": {
    "href": "phobos/std/regex/internal/ir/Functions/isStartIR.html",
    "title": "Overloads for - isStartIR | Marmos Demo",
    "keywords": "Overloads for - isStartIR Module std.regex.internal.ir isStartIR(i) bool isStartIR( IR i )"
  },
  "phobos/std/regex/internal/ir/Functions/lengthOfIR.html": {
    "href": "phobos/std/regex/internal/ir/Functions/lengthOfIR.html",
    "title": "Overloads for - lengthOfIR | Marmos Demo",
    "keywords": "Overloads for - lengthOfIR Module std.regex.internal.ir lengthOfIR(i) int lengthOfIR( IR i )"
  },
  "phobos/std/regex/internal/ir/Functions/lengthOfPairedIR.html": {
    "href": "phobos/std/regex/internal/ir/Functions/lengthOfPairedIR.html",
    "title": "Overloads for - lengthOfPairedIR | Marmos Demo",
    "keywords": "Overloads for - lengthOfPairedIR Module std.regex.internal.ir lengthOfPairedIR(i) int lengthOfPairedIR( IR i )"
  },
  "phobos/std/regex/internal/ir/Functions/lookupNamedGroup.html": {
    "href": "phobos/std/regex/internal/ir/Functions/lookupNamedGroup.html",
    "title": "Overloads for - lookupNamedGroup | Marmos Demo",
    "keywords": "Overloads for - lookupNamedGroup Module std.regex.internal.ir lookupNamedGroup(dict, name) uint lookupNamedGroup( <bug: unknown> dict, String name )"
  },
  "phobos/std/regex/internal/ir/Functions/mallocArray.html": {
    "href": "phobos/std/regex/internal/ir/Functions/mallocArray.html",
    "title": "Overloads for - mallocArray | Marmos Demo",
    "keywords": "Overloads for - mallocArray Module std.regex.internal.ir mallocArray(len) <bug: unknown> mallocArray( size_t len )"
  },
  "phobos/std/regex/internal/ir/Functions/pairedIR.html": {
    "href": "phobos/std/regex/internal/ir/Functions/pairedIR.html",
    "title": "Overloads for - pairedIR | Marmos Demo",
    "keywords": "Overloads for - pairedIR Module std.regex.internal.ir pairedIR(i) IR pairedIR( IR i )"
  },
  "phobos/std/regex/internal/ir/Functions/printBytecode.html": {
    "href": "phobos/std/regex/internal/ir/Functions/printBytecode.html",
    "title": "Overloads for - printBytecode | Marmos Demo",
    "keywords": "Overloads for - printBytecode Module std.regex.internal.ir printBytecode(slice, dict) void printBytecode( <bug: unknown> slice, <bug: unknown> dict )"
  },
  "phobos/std/regex/internal/ir/Functions/regexOptionsToString.html": {
    "href": "phobos/std/regex/internal/ir/Functions/regexOptionsToString.html",
    "title": "Overloads for - regexOptionsToString | Marmos Demo",
    "keywords": "Overloads for - regexOptionsToString Module std.regex.internal.ir regexOptionsToString(flags) string regexOptionsToString( uint flags )"
  },
  "phobos/std/regex/internal/ir/Functions/startOfLine.html": {
    "href": "phobos/std/regex/internal/ir/Functions/startOfLine.html",
    "title": "Overloads for - startOfLine | Marmos Demo",
    "keywords": "Overloads for - startOfLine Module std.regex.internal.ir startOfLine(back, seenNl) bool startOfLine( dchar back, bool seenNl )"
  },
  "phobos/std/regex/internal/ir/Functions/wordMatcher.html": {
    "href": "phobos/std/regex/internal/ir/Functions/wordMatcher.html",
    "title": "Overloads for - wordMatcher | Marmos Demo",
    "keywords": "Overloads for - wordMatcher Module std.regex.internal.ir wordMatcher() <bug: unknown> wordMatcher( )"
  },
  "phobos/std/regex/internal/ir/GenericFactory/Functions/construct.html": {
    "href": "phobos/std/regex/internal/ir/GenericFactory/Functions/construct.html",
    "title": "Overloads for - construct | Marmos Demo",
    "keywords": "Overloads for - construct Module std.regex.internal.ir Parent GenericFactory construct(re, input, memory) EngineType!(Char) construct( Regex!(Char) re, <bug: unknown> input, <bug: unknown> memory )"
  },
  "phobos/std/regex/internal/ir/GenericFactory/Functions/create.html": {
    "href": "phobos/std/regex/internal/ir/GenericFactory/Functions/create.html",
    "title": "Overloads for - create | Marmos Demo",
    "keywords": "Overloads for - create Module std.regex.internal.ir Parent GenericFactory create(re, input) EngineType!(Char) create( Regex!(Char) re, <bug: unknown> input ) override"
  },
  "phobos/std/regex/internal/ir/GenericFactory/Functions/decRef.html": {
    "href": "phobos/std/regex/internal/ir/GenericFactory/Functions/decRef.html",
    "title": "Overloads for - decRef | Marmos Demo",
    "keywords": "Overloads for - decRef Module std.regex.internal.ir Parent GenericFactory decRef(m) size_t decRef( Matcher!(Char) m ) override"
  },
  "phobos/std/regex/internal/ir/GenericFactory/Functions/dup.html": {
    "href": "phobos/std/regex/internal/ir/GenericFactory/Functions/dup.html",
    "title": "Overloads for - dup | Marmos Demo",
    "keywords": "Overloads for - dup Module std.regex.internal.ir Parent GenericFactory dup(engine, input) EngineType!(Char) dup( Matcher!(Char) engine, <bug: unknown> input ) override"
  },
  "phobos/std/regex/internal/ir/GenericFactory/Functions/incRef.html": {
    "href": "phobos/std/regex/internal/ir/GenericFactory/Functions/incRef.html",
    "title": "Overloads for - incRef | Marmos Demo",
    "keywords": "Overloads for - incRef Module std.regex.internal.ir Parent GenericFactory incRef(m) size_t incRef( Matcher!(Char) m ) override"
  },
  "phobos/std/regex/internal/ir/Input/Functions/atEnd.html": {
    "href": "phobos/std/regex/internal/ir/Input/Functions/atEnd.html",
    "title": "Overloads for - atEnd | Marmos Demo",
    "keywords": "Overloads for - atEnd Module std.regex.internal.ir Parent Input atEnd() bool atEnd( )"
  },
  "phobos/std/regex/internal/ir/Input/Functions/lastIndex.html": {
    "href": "phobos/std/regex/internal/ir/Input/Functions/lastIndex.html",
    "title": "Overloads for - lastIndex | Marmos Demo",
    "keywords": "Overloads for - lastIndex Module std.regex.internal.ir Parent Input lastIndex() size_t lastIndex( )"
  },
  "phobos/std/regex/internal/ir/Input/Functions/loopBack.html": {
    "href": "phobos/std/regex/internal/ir/Input/Functions/loopBack.html",
    "title": "Overloads for - loopBack | Marmos Demo",
    "keywords": "Overloads for - loopBack Module std.regex.internal.ir Parent Input loopBack(index) <bug: unknown> loopBack( size_t index ) auto"
  },
  "phobos/std/regex/internal/ir/Input/Functions/nextChar.html": {
    "href": "phobos/std/regex/internal/ir/Input/Functions/nextChar.html",
    "title": "Overloads for - nextChar | Marmos Demo",
    "keywords": "Overloads for - nextChar Module std.regex.internal.ir Parent Input nextChar(res, pos) bool nextChar( dchar res, size_t pos )"
  },
  "phobos/std/regex/internal/ir/Input/Functions/opSlice.html": {
    "href": "phobos/std/regex/internal/ir/Input/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.regex.internal.ir Parent Input opSlice(start, end) String opSlice( size_t start, size_t end )"
  },
  "phobos/std/regex/internal/ir/Input/Functions/reset.html": {
    "href": "phobos/std/regex/internal/ir/Input/Functions/reset.html",
    "title": "Overloads for - reset | Marmos Demo",
    "keywords": "Overloads for - reset Module std.regex.internal.ir Parent Input reset(index) void reset( size_t index )"
  },
  "phobos/std/regex/internal/ir/Matcher/Functions/dupTo.html": {
    "href": "phobos/std/regex/internal/ir/Matcher/Functions/dupTo.html",
    "title": "Overloads for - dupTo | Marmos Demo",
    "keywords": "Overloads for - dupTo Module std.regex.internal.ir Parent Matcher dupTo(m, memory) void dupTo( Matcher!(Char) m, <bug: unknown> memory )"
  },
  "phobos/std/regex/internal/ir/Matcher/Functions/match.html": {
    "href": "phobos/std/regex/internal/ir/Matcher/Functions/match.html",
    "title": "Overloads for - match | Marmos Demo",
    "keywords": "Overloads for - match Module std.regex.internal.ir Parent Matcher match(matches) int match( <bug: unknown> matches )"
  },
  "phobos/std/regex/internal/ir/Matcher/Functions/pattern.html": {
    "href": "phobos/std/regex/internal/ir/Matcher/Functions/pattern.html",
    "title": "Overloads for - pattern | Marmos Demo",
    "keywords": "Overloads for - pattern Module std.regex.internal.ir Parent Matcher pattern() Regex!(Char) pattern( )"
  },
  "phobos/std/regex/internal/ir/Matcher/Functions/rearm.html": {
    "href": "phobos/std/regex/internal/ir/Matcher/Functions/rearm.html",
    "title": "Overloads for - rearm | Marmos Demo",
    "keywords": "Overloads for - rearm Module std.regex.internal.ir Parent Matcher rearm(stream) Matcher rearm( <bug: unknown> stream )"
  },
  "phobos/std/regex/internal/ir/Matcher/Functions/refCount.html": {
    "href": "phobos/std/regex/internal/ir/Matcher/Functions/refCount.html",
    "title": "Overloads for - refCount | Marmos Demo",
    "keywords": "Overloads for - refCount Module std.regex.internal.ir Parent Matcher refCount() size_t refCount( )"
  },
  "phobos/std/regex/internal/ir/Overview.html": {
    "href": "phobos/std/regex/internal/ir/Overview.html",
    "title": "Module - std.regex.internal.ir | Marmos Demo",
    "keywords": "Module - std.regex.internal.ir Aliases Name Description BasicElementOf makeTrie RegexOptionNames Trie Classes Name Description CtfeFactory GenericFactory Matcher RegexException Exception object thrown in case of errors during regex compilation. RuntimeFactory Structs Name Description BackLooperImpl BitTable Bytecode CharMatcher Group Input NamedGroup Regex Regex object holds regular expression pattern in compiled form. Instances of this object are constructed via calls to regex . This is an intended form for caching and storage of frequently used regular expressions. SmallFixedArray Functions Name Description arrayInChunk assumePureFunction defaultFactory defaultFactoryImpl disassemble endOfLine getMatcher hasMerge immediateParamsIR isAtomIR isEndIR isStartIR lengthOfIR lengthOfPairedIR lookupNamedGroup mallocArray pairedIR printBytecode regexOptionsToString startOfLine wordMatcher Variables Name Description IRL LS matcherCache maxCachedMatchers maxCharsetUsed NEL privateUseEnd privateUseStart PS"
  },
  "phobos/std/regex/internal/ir/Regex/Functions/checkIfOneShot.html": {
    "href": "phobos/std/regex/internal/ir/Regex/Functions/checkIfOneShot.html",
    "title": "Overloads for - checkIfOneShot | Marmos Demo",
    "keywords": "Overloads for - checkIfOneShot Module std.regex.internal.ir Parent Regex checkIfOneShot() void checkIfOneShot( )"
  },
  "phobos/std/regex/internal/ir/Regex/Functions/empty.html": {
    "href": "phobos/std/regex/internal/ir/Regex/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.regex.internal.ir Parent Regex empty() bool empty( )"
  },
  "phobos/std/regex/internal/ir/Regex/Functions/isBackref.html": {
    "href": "phobos/std/regex/internal/ir/Regex/Functions/isBackref.html",
    "title": "Overloads for - isBackref | Marmos Demo",
    "keywords": "Overloads for - isBackref Module std.regex.internal.ir Parent Regex isBackref(n) uint isBackref( uint n )"
  },
  "phobos/std/regex/internal/ir/Regex/Functions/namedCaptures.html": {
    "href": "phobos/std/regex/internal/ir/Regex/Functions/namedCaptures.html",
    "title": "Overloads for - namedCaptures | Marmos Demo",
    "keywords": "Overloads for - namedCaptures Module std.regex.internal.ir Parent Regex namedCaptures() <bug: unknown> namedCaptures( ) auto namedCaptures returns a range of all named captures in a given regular expression."
  },
  "phobos/std/regex/internal/ir/Regex/Functions/print.html": {
    "href": "phobos/std/regex/internal/ir/Regex/Functions/print.html",
    "title": "Overloads for - print | Marmos Demo",
    "keywords": "Overloads for - print Module std.regex.internal.ir Parent Regex print() void print( )"
  },
  "phobos/std/regex/internal/ir/Regex/Functions/withCode.html": {
    "href": "phobos/std/regex/internal/ir/Regex/Functions/withCode.html",
    "title": "Overloads for - withCode | Marmos Demo",
    "keywords": "Overloads for - withCode Module std.regex.internal.ir Parent Regex withCode(code) Regex withCode( <bug: unknown> code )"
  },
  "phobos/std/regex/internal/ir/Regex/Functions/withFactory.html": {
    "href": "phobos/std/regex/internal/ir/Regex/Functions/withFactory.html",
    "title": "Overloads for - withFactory | Marmos Demo",
    "keywords": "Overloads for - withFactory Module std.regex.internal.ir Parent Regex withFactory(factory) Regex withFactory( MatcherFactory!(Char) factory )"
  },
  "phobos/std/regex/internal/ir/Regex/Functions/withFlags.html": {
    "href": "phobos/std/regex/internal/ir/Regex/Functions/withFlags.html",
    "title": "Overloads for - withFlags | Marmos Demo",
    "keywords": "Overloads for - withFlags Module std.regex.internal.ir Parent Regex withFlags(newFlags) Regex withFlags( uint newFlags )"
  },
  "phobos/std/regex/internal/ir/Regex/Functions/withNGroup.html": {
    "href": "phobos/std/regex/internal/ir/Regex/Functions/withNGroup.html",
    "title": "Overloads for - withNGroup | Marmos Demo",
    "keywords": "Overloads for - withNGroup Module std.regex.internal.ir Parent Regex withNGroup(nGroup) Regex withNGroup( uint nGroup )"
  },
  "phobos/std/regex/internal/ir/RuntimeFactory/Functions/construct.html": {
    "href": "phobos/std/regex/internal/ir/RuntimeFactory/Functions/construct.html",
    "title": "Overloads for - construct | Marmos Demo",
    "keywords": "Overloads for - construct Module std.regex.internal.ir Parent RuntimeFactory construct(re, input, memory) EngineType!(Char) construct( Regex!(Char) re, <bug: unknown> input, <bug: unknown> memory ) override"
  },
  "phobos/std/regex/internal/ir/SmallFixedArray/Functions/abandonRef.html": {
    "href": "phobos/std/regex/internal/ir/SmallFixedArray/Functions/abandonRef.html",
    "title": "Overloads for - abandonRef | Marmos Demo",
    "keywords": "Overloads for - abandonRef Module std.regex.internal.ir Parent SmallFixedArray abandonRef() void abandonRef( )"
  },
  "phobos/std/regex/internal/ir/SmallFixedArray/Functions/internalSlice.html": {
    "href": "phobos/std/regex/internal/ir/SmallFixedArray/Functions/internalSlice.html",
    "title": "Overloads for - internalSlice | Marmos Demo",
    "keywords": "Overloads for - internalSlice Module std.regex.internal.ir Parent SmallFixedArray internalSlice() <bug: unknown> internalSlice( )"
  },
  "phobos/std/regex/internal/ir/SmallFixedArray/Functions/isBig.html": {
    "href": "phobos/std/regex/internal/ir/SmallFixedArray/Functions/isBig.html",
    "title": "Overloads for - isBig | Marmos Demo",
    "keywords": "Overloads for - isBig Module std.regex.internal.ir Parent SmallFixedArray isBig() bool isBig( )"
  },
  "phobos/std/regex/internal/ir/SmallFixedArray/Functions/length.html": {
    "href": "phobos/std/regex/internal/ir/SmallFixedArray/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.regex.internal.ir Parent SmallFixedArray length() size_t length( )"
  },
  "phobos/std/regex/internal/ir/SmallFixedArray/Functions/mutate.html": {
    "href": "phobos/std/regex/internal/ir/SmallFixedArray/Functions/mutate.html",
    "title": "Overloads for - mutate | Marmos Demo",
    "keywords": "Overloads for - mutate Module std.regex.internal.ir Parent SmallFixedArray mutate(filler) void mutate( <bug: unknown> filler )"
  },
  "phobos/std/regex/internal/ir/SmallFixedArray/Functions/opAssign.html": {
    "href": "phobos/std/regex/internal/ir/SmallFixedArray/Functions/opAssign.html",
    "title": "Overloads for - opAssign | Marmos Demo",
    "keywords": "Overloads for - opAssign Module std.regex.internal.ir Parent SmallFixedArray opAssign(arr) <bug: unknown> opAssign( SmallFixedArray arr )"
  },
  "phobos/std/regex/internal/ir/SmallFixedArray/Functions/opEquals.html": {
    "href": "phobos/std/regex/internal/ir/SmallFixedArray/Functions/opEquals.html",
    "title": "Overloads for - opEquals | Marmos Demo",
    "keywords": "Overloads for - opEquals Module std.regex.internal.ir Parent SmallFixedArray opEquals(a) bool opEquals( SmallFixedArray a )"
  },
  "phobos/std/regex/internal/ir/SmallFixedArray/Functions/opIndex.html": {
    "href": "phobos/std/regex/internal/ir/SmallFixedArray/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.regex.internal.ir Parent SmallFixedArray opIndex(idx) T opIndex( size_t idx )"
  },
  "phobos/std/regex/internal/ir/SmallFixedArray/Functions/toHash.html": {
    "href": "phobos/std/regex/internal/ir/SmallFixedArray/Functions/toHash.html",
    "title": "Overloads for - toHash | Marmos Demo",
    "keywords": "Overloads for - toHash Module std.regex.internal.ir Parent SmallFixedArray toHash() size_t toHash( )"
  },
  "phobos/std/regex/internal/ir/Structs/BackLooperImpl.html": {
    "href": "phobos/std/regex/internal/ir/Structs/BackLooperImpl.html",
    "title": "Struct - BackLooperImpl | Marmos Demo",
    "keywords": "Struct - BackLooperImpl Module std.regex.internal.ir public struct BackLooperImpl { // alias DataIndex = <todo: marmos support pending>; // alias String = <todo: marmos support pending>; // <bug: unknown> atEnd( ) ; // size_t lastIndex( ) ; // <bug: unknown> loopBack( size_t index ) auto; // bool nextChar( dchar res, size_t pos ) ; // String opSlice( size_t start, size_t end ) ; // void reset( size_t index ) ; // bool isLoopback; } Aliases Name Description DataIndex String Functions Name Description atEnd lastIndex loopBack nextChar opSlice reset Variables Name Description isLoopback"
  },
  "phobos/std/regex/internal/ir/Structs/BitTable.html": {
    "href": "phobos/std/regex/internal/ir/Structs/BitTable.html",
    "title": "Struct - BitTable | Marmos Demo",
    "keywords": "Struct - BitTable Module std.regex.internal.ir public struct BitTable { // <bug: unknown> filter; } Variables Name Description filter"
  },
  "phobos/std/regex/internal/ir/Structs/Bytecode.html": {
    "href": "phobos/std/regex/internal/ir/Structs/Bytecode.html",
    "title": "Struct - Bytecode | Marmos Demo",
    "keywords": "Struct - Bytecode Module std.regex.internal.ir public struct Bytecode { // int args( ) ; // bool backreference( ) ; // Bytecode fromRaw( uint data ) static; // bool hotspot( ) ; // uint indexOfPair( uint pc ) ; // bool isAtom( ) ; // bool isEnd( ) ; // bool isStart( ) ; // uint length( ) ; // bool localRef( ) ; // Bytecode paired( ) ; // uint pairedLength( ) ; // void setBackrefence( ) ; // void setLocalRef( ) ; // __enumMember maxData; // __enumMember maxRaw; // __enumMember maxSequence; // uint raw; } Functions Name Description args backreference fromRaw hotspot indexOfPair isAtom isEnd isStart length localRef paired pairedLength setBackrefence setLocalRef Variables Name Description maxData maxRaw maxSequence raw"
  },
  "phobos/std/regex/internal/ir/Structs/CharMatcher.html": {
    "href": "phobos/std/regex/internal/ir/Structs/CharMatcher.html",
    "title": "Struct - CharMatcher | Marmos Demo",
    "keywords": "Struct - CharMatcher Module std.regex.internal.ir public struct CharMatcher { // BitTable ascii; // Trie trie; } Variables Name Description ascii trie"
  },
  "phobos/std/regex/internal/ir/Structs/Group.html": {
    "href": "phobos/std/regex/internal/ir/Structs/Group.html",
    "title": "Struct - Group | Marmos Demo",
    "keywords": "Struct - Group Module std.regex.internal.ir public struct Group { // DataIndex begin; // DataIndex end; } Variables Name Description begin end"
  },
  "phobos/std/regex/internal/ir/Structs/Input.html": {
    "href": "phobos/std/regex/internal/ir/Structs/Input.html",
    "title": "Struct - Input | Marmos Demo",
    "keywords": "Struct - Input Module std.regex.internal.ir public struct Input { // alias DataIndex = <todo: marmos support pending>; // alias String = <todo: marmos support pending>; // bool atEnd( ) ; // size_t lastIndex( ) ; // <bug: unknown> loopBack( size_t index ) auto; // bool nextChar( dchar res, size_t pos ) ; // String opSlice( size_t start, size_t end ) ; // void reset( size_t index ) ; // bool isLoopback; } Aliases Name Description DataIndex String Functions Name Description atEnd lastIndex loopBack nextChar opSlice reset Variables Name Description isLoopback"
  },
  "phobos/std/regex/internal/ir/Structs/NamedGroup.html": {
    "href": "phobos/std/regex/internal/ir/Structs/NamedGroup.html",
    "title": "Struct - NamedGroup | Marmos Demo",
    "keywords": "Struct - NamedGroup Module std.regex.internal.ir public struct NamedGroup { // uint group; // string name; } Variables Name Description group name"
  },
  "phobos/std/regex/internal/ir/Structs/Regex.html": {
    "href": "phobos/std/regex/internal/ir/Structs/Regex.html",
    "title": "Struct - Regex | Marmos Demo",
    "keywords": "Struct - Regex Module std.regex.internal.ir public struct Regex { // void checkIfOneShot( ) ; // bool empty( ) ; // uint isBackref( uint n ) ; // `namedCaptures` returns a range of all named captures in a given regular expression. <bug: unknown> namedCaptures( ) auto; // void print( ) ; // Regex withCode( <bug: unknown> code ) ; // Regex withFactory( MatcherFactory!(Char) factory ) ; // Regex withFlags( uint newFlags ) ; // Regex withNGroup( uint nGroup ) ; // <bug: unknown> backrefed; // <bug: unknown> charsets; // <bug: unknown> dict; // MatcherFactory!(Char) factory; // <bug: unknown> filters; // uint flags; // uint hotspotTableSize; // <bug: unknown> ir; // Kickstart!(Char) kickstart; // <bug: unknown> matchers; // uint maxCounterDepth; // uint ngroup; // <bug: unknown> pattern; // uint threadCount; } About Regex object holds regular expression pattern in compiled form. Instances of this object are constructed via calls to regex . This is an intended form for caching and storage of frequently used regular expressions. Functions Name Description checkIfOneShot empty isBackref namedCaptures namedCaptures returns a range of all named captures in a given regular expression. print withCode withFactory withFlags withNGroup Variables Name Description backrefed charsets dict factory filters flags hotspotTableSize ir kickstart matchers maxCounterDepth ngroup pattern threadCount"
  },
  "phobos/std/regex/internal/ir/Structs/SmallFixedArray.html": {
    "href": "phobos/std/regex/internal/ir/Structs/SmallFixedArray.html",
    "title": "Struct - SmallFixedArray | Marmos Demo",
    "keywords": "Struct - SmallFixedArray Module std.regex.internal.ir public struct SmallFixedArray { // void abandonRef( ) ; // <bug: unknown> internalSlice( ) ; // bool isBig( ) ; // size_t length( ) ; // void mutate( <bug: unknown> filler ) ; // <bug: unknown> opAssign( SmallFixedArray arr ) ; // bool opEquals( SmallFixedArray a ) ; // T opIndex( size_t idx ) ; // size_t toHash( ) ; // <bug: unknown> big; // __enumMember BIG_MASK; // __enumMember SIZE_MASK; // <bug: unknown> small; } Functions Name Description abandonRef internalSlice isBig length mutate opAssign opEquals opIndex toHash Variables Name Description big BIG_MASK SIZE_MASK small"
  },
  "phobos/std/regex/internal/kickstart/Functions/effectiveSize.html": {
    "href": "phobos/std/regex/internal/kickstart/Functions/effectiveSize.html",
    "title": "Overloads for - effectiveSize | Marmos Demo",
    "keywords": "Overloads for - effectiveSize Module std.regex.internal.kickstart effectiveSize() uint effectiveSize( )"
  },
  "phobos/std/regex/internal/kickstart/Overview.html": {
    "href": "phobos/std/regex/internal/kickstart/Overview.html",
    "title": "Module - std.regex.internal.kickstart | Marmos Demo",
    "keywords": "Module - std.regex.internal.kickstart Aliases Name Description Kickstart Structs Name Description ShiftOr Functions Name Description effectiveSize"
  },
  "phobos/std/regex/internal/kickstart/ShiftOr/Functions/charLen.html": {
    "href": "phobos/std/regex/internal/kickstart/ShiftOr/Functions/charLen.html",
    "title": "Overloads for - charLen | Marmos Demo",
    "keywords": "Overloads for - charLen Module std.regex.internal.kickstart Parent ShiftOr charLen(ch) uint charLen( uint ch ) static"
  },
  "phobos/std/regex/internal/kickstart/ShiftOr/Functions/dump.html": {
    "href": "phobos/std/regex/internal/kickstart/ShiftOr/Functions/dump.html",
    "title": "Overloads for - dump | Marmos Demo",
    "keywords": "Overloads for - dump Module std.regex.internal.kickstart Parent ShiftOr dump(table) void dump( <bug: unknown> table ) static"
  },
  "phobos/std/regex/internal/kickstart/ShiftOr/Functions/empty.html": {
    "href": "phobos/std/regex/internal/kickstart/ShiftOr/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.regex.internal.kickstart Parent ShiftOr empty() bool empty( )"
  },
  "phobos/std/regex/internal/kickstart/ShiftOr/Functions/fetch.html": {
    "href": "phobos/std/regex/internal/kickstart/ShiftOr/Functions/fetch.html",
    "title": "Overloads for - fetch | Marmos Demo",
    "keywords": "Overloads for - fetch Module std.regex.internal.kickstart Parent ShiftOr fetch(worklist) ShiftThread fetch( <bug: unknown> worklist ) static"
  },
  "phobos/std/regex/internal/kickstart/ShiftOr/Functions/fork.html": {
    "href": "phobos/std/regex/internal/kickstart/ShiftOr/Functions/fork.html",
    "title": "Overloads for - fork | Marmos Demo",
    "keywords": "Overloads for - fork Module std.regex.internal.kickstart Parent ShiftOr fork(t, newPc, newCounter) ShiftThread fork( ShiftThread t, uint newPc, uint newCounter ) static"
  },
  "phobos/std/regex/internal/kickstart/ShiftOr/Functions/length.html": {
    "href": "phobos/std/regex/internal/kickstart/ShiftOr/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.regex.internal.kickstart Parent ShiftOr length() uint length( )"
  },
  "phobos/std/regex/internal/kickstart/ShiftOr/Functions/search.html": {
    "href": "phobos/std/regex/internal/kickstart/ShiftOr/Functions/search.html",
    "title": "Overloads for - search | Marmos Demo",
    "keywords": "Overloads for - search Module std.regex.internal.kickstart Parent ShiftOr search(haystack, idx) size_t search( <bug: unknown> haystack, size_t idx )"
  },
  "phobos/std/regex/internal/kickstart/Structs/ShiftOr.html": {
    "href": "phobos/std/regex/internal/kickstart/Structs/ShiftOr.html",
    "title": "Struct - ShiftOr | Marmos Demo",
    "keywords": "Struct - ShiftOr Module std.regex.internal.kickstart public struct ShiftOr { // uint charLen( uint ch ) static; // void dump( <bug: unknown> table ) static; // bool empty( ) ; // ShiftThread fetch( <bug: unknown> worklist ) static; // ShiftThread fork( ShiftThread t, uint newPc, uint newCounter ) static; // uint length( ) ; // size_t search( <bug: unknown> haystack, size_t idx ) ; // uint charsetThreshold; // __enumMember charSize; // uint fChar; // uint n_length; // <bug: unknown> table; } Functions Name Description charLen dump empty fetch fork length search Variables Name Description charsetThreshold charSize fChar n_length table"
  },
  "phobos/std/regex/internal/parser/CodeGen/Functions/charsetToIr.html": {
    "href": "phobos/std/regex/internal/parser/CodeGen/Functions/charsetToIr.html",
    "title": "Overloads for - charsetToIr | Marmos Demo",
    "keywords": "Overloads for - charsetToIr Module std.regex.internal.parser Parent CodeGen charsetToIr(set) void charsetToIr( CodepointSet set )"
  },
  "phobos/std/regex/internal/parser/CodeGen/Functions/endPattern.html": {
    "href": "phobos/std/regex/internal/parser/CodeGen/Functions/endPattern.html",
    "title": "Overloads for - endPattern | Marmos Demo",
    "keywords": "Overloads for - endPattern Module std.regex.internal.parser Parent CodeGen endPattern(num) void endPattern( uint num )"
  },
  "phobos/std/regex/internal/parser/CodeGen/Functions/finishAlternation.html": {
    "href": "phobos/std/regex/internal/parser/CodeGen/Functions/finishAlternation.html",
    "title": "Overloads for - finishAlternation | Marmos Demo",
    "keywords": "Overloads for - finishAlternation Module std.regex.internal.parser Parent CodeGen finishAlternation(fix) void finishAlternation( uint fix )"
  },
  "phobos/std/regex/internal/parser/CodeGen/Functions/fixAlternation.html": {
    "href": "phobos/std/regex/internal/parser/CodeGen/Functions/fixAlternation.html",
    "title": "Overloads for - fixAlternation | Marmos Demo",
    "keywords": "Overloads for - fixAlternation Module std.regex.internal.parser Parent CodeGen fixAlternation() void fixAlternation( )"
  },
  "phobos/std/regex/internal/parser/CodeGen/Functions/fixLookaround.html": {
    "href": "phobos/std/regex/internal/parser/CodeGen/Functions/fixLookaround.html",
    "title": "Overloads for - fixLookaround | Marmos Demo",
    "keywords": "Overloads for - fixLookaround Module std.regex.internal.parser Parent CodeGen fixLookaround(fix) void fixLookaround( uint fix )"
  },
  "phobos/std/regex/internal/parser/CodeGen/Functions/fixRepetition.html": {
    "href": "phobos/std/regex/internal/parser/CodeGen/Functions/fixRepetition.html",
    "title": "Overloads for - fixRepetition | Marmos Demo",
    "keywords": "Overloads for - fixRepetition Module std.regex.internal.parser Parent CodeGen fixRepetition(offset) void fixRepetition( uint offset ) fixRepetition(offset, min, max, greedy) void fixRepetition( uint offset, uint min, uint max, bool greedy )"
  },
  "phobos/std/regex/internal/parser/CodeGen/Functions/fixupLength.html": {
    "href": "phobos/std/regex/internal/parser/CodeGen/Functions/fixupLength.html",
    "title": "Overloads for - fixupLength | Marmos Demo",
    "keywords": "Overloads for - fixupLength Module std.regex.internal.parser Parent CodeGen fixupLength() size_t fixupLength( )"
  },
  "phobos/std/regex/internal/parser/CodeGen/Functions/genGroup.html": {
    "href": "phobos/std/regex/internal/parser/CodeGen/Functions/genGroup.html",
    "title": "Overloads for - genGroup | Marmos Demo",
    "keywords": "Overloads for - genGroup Module std.regex.internal.parser Parent CodeGen genGroup() void genGroup( )"
  },
  "phobos/std/regex/internal/parser/CodeGen/Functions/genLogicGroup.html": {
    "href": "phobos/std/regex/internal/parser/CodeGen/Functions/genLogicGroup.html",
    "title": "Overloads for - genLogicGroup | Marmos Demo",
    "keywords": "Overloads for - genLogicGroup Module std.regex.internal.parser Parent CodeGen genLogicGroup() void genLogicGroup( )"
  },
  "phobos/std/regex/internal/parser/CodeGen/Functions/genLookaround.html": {
    "href": "phobos/std/regex/internal/parser/CodeGen/Functions/genLookaround.html",
    "title": "Overloads for - genLookaround | Marmos Demo",
    "keywords": "Overloads for - genLookaround Module std.regex.internal.parser Parent CodeGen genLookaround(opcode) void genLookaround( IR opcode )"
  },
  "phobos/std/regex/internal/parser/CodeGen/Functions/genNamedGroup.html": {
    "href": "phobos/std/regex/internal/parser/CodeGen/Functions/genNamedGroup.html",
    "title": "Overloads for - genNamedGroup | Marmos Demo",
    "keywords": "Overloads for - genNamedGroup Module std.regex.internal.parser Parent CodeGen genNamedGroup(name) void genNamedGroup( string name )"
  },
  "phobos/std/regex/internal/parser/CodeGen/Functions/isOpenGroup.html": {
    "href": "phobos/std/regex/internal/parser/CodeGen/Functions/isOpenGroup.html",
    "title": "Overloads for - isOpenGroup | Marmos Demo",
    "keywords": "Overloads for - isOpenGroup Module std.regex.internal.parser Parent CodeGen isOpenGroup(n) bool isOpenGroup( uint n )"
  },
  "phobos/std/regex/internal/parser/CodeGen/Functions/length.html": {
    "href": "phobos/std/regex/internal/parser/CodeGen/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.regex.internal.parser Parent CodeGen length() uint length( )"
  },
  "phobos/std/regex/internal/parser/CodeGen/Functions/markBackref.html": {
    "href": "phobos/std/regex/internal/parser/CodeGen/Functions/markBackref.html",
    "title": "Overloads for - markBackref | Marmos Demo",
    "keywords": "Overloads for - markBackref Module std.regex.internal.parser Parent CodeGen markBackref(n) void markBackref( uint n )"
  },
  "phobos/std/regex/internal/parser/CodeGen/Functions/onClose.html": {
    "href": "phobos/std/regex/internal/parser/CodeGen/Functions/onClose.html",
    "title": "Overloads for - onClose | Marmos Demo",
    "keywords": "Overloads for - onClose Module std.regex.internal.parser Parent CodeGen onClose() Tuple!(booluint) onClose( )"
  },
  "phobos/std/regex/internal/parser/CodeGen/Functions/popFixup.html": {
    "href": "phobos/std/regex/internal/parser/CodeGen/Functions/popFixup.html",
    "title": "Overloads for - popFixup | Marmos Demo",
    "keywords": "Overloads for - popFixup Module std.regex.internal.parser Parent CodeGen popFixup() uint popFixup( )"
  },
  "phobos/std/regex/internal/parser/CodeGen/Functions/pushFixup.html": {
    "href": "phobos/std/regex/internal/parser/CodeGen/Functions/pushFixup.html",
    "title": "Overloads for - pushFixup | Marmos Demo",
    "keywords": "Overloads for - pushFixup Module std.regex.internal.parser Parent CodeGen pushFixup(val) void pushFixup( uint val )"
  },
  "phobos/std/regex/internal/parser/CodeGen/Functions/put.html": {
    "href": "phobos/std/regex/internal/parser/CodeGen/Functions/put.html",
    "title": "Overloads for - put | Marmos Demo",
    "keywords": "Overloads for - put Module std.regex.internal.parser Parent CodeGen put(code) void put( Bytecode code )"
  },
  "phobos/std/regex/internal/parser/CodeGen/Functions/putRaw.html": {
    "href": "phobos/std/regex/internal/parser/CodeGen/Functions/putRaw.html",
    "title": "Overloads for - putRaw | Marmos Demo",
    "keywords": "Overloads for - putRaw Module std.regex.internal.parser Parent CodeGen putRaw(number) void putRaw( uint number )"
  },
  "phobos/std/regex/internal/parser/CodeGen/Functions/start.html": {
    "href": "phobos/std/regex/internal/parser/CodeGen/Functions/start.html",
    "title": "Overloads for - start | Marmos Demo",
    "keywords": "Overloads for - start Module std.regex.internal.parser Parent CodeGen start(length) void start( uint length )"
  },
  "phobos/std/regex/internal/parser/CodeGen/Functions/topFixup.html": {
    "href": "phobos/std/regex/internal/parser/CodeGen/Functions/topFixup.html",
    "title": "Overloads for - topFixup | Marmos Demo",
    "keywords": "Overloads for - topFixup Module std.regex.internal.parser Parent CodeGen topFixup() uint topFixup( )"
  },
  "phobos/std/regex/internal/parser/Functions/fixupBytecode.html": {
    "href": "phobos/std/regex/internal/parser/Functions/fixupBytecode.html",
    "title": "Overloads for - fixupBytecode | Marmos Demo",
    "keywords": "Overloads for - fixupBytecode Module std.regex.internal.parser fixupBytecode(ir) void fixupBytecode( <bug: unknown> ir )"
  },
  "phobos/std/regex/internal/parser/Functions/makeRegex.html": {
    "href": "phobos/std/regex/internal/parser/Functions/makeRegex.html",
    "title": "Overloads for - makeRegex | Marmos Demo",
    "keywords": "Overloads for - makeRegex Module std.regex.internal.parser makeRegex(p) <bug: unknown> makeRegex( Parser!(SCG) p ) auto makeRegex(arg) <bug: unknown> makeRegex( S arg ) auto"
  },
  "phobos/std/regex/internal/parser/Functions/optimize.html": {
    "href": "phobos/std/regex/internal/parser/Functions/optimize.html",
    "title": "Overloads for - optimize | Marmos Demo",
    "keywords": "Overloads for - optimize Module std.regex.internal.parser optimize(zis) void optimize( Regex!(Char) zis )"
  },
  "phobos/std/regex/internal/parser/Functions/postprocess.html": {
    "href": "phobos/std/regex/internal/parser/Functions/postprocess.html",
    "title": "Overloads for - postprocess | Marmos Demo",
    "keywords": "Overloads for - postprocess Module std.regex.internal.parser postprocess(zis) void postprocess( Regex!(Char) zis )"
  },
  "phobos/std/regex/internal/parser/Functions/reverseBytecode.html": {
    "href": "phobos/std/regex/internal/parser/Functions/reverseBytecode.html",
    "title": "Overloads for - reverseBytecode | Marmos Demo",
    "keywords": "Overloads for - reverseBytecode Module std.regex.internal.parser reverseBytecode(code) void reverseBytecode( <bug: unknown> code )"
  },
  "phobos/std/regex/internal/parser/Functions/validateRe.html": {
    "href": "phobos/std/regex/internal/parser/Functions/validateRe.html",
    "title": "Overloads for - validateRe | Marmos Demo",
    "keywords": "Overloads for - validateRe Module std.regex.internal.parser validateRe(zis) void validateRe( Regex!(Char) zis )"
  },
  "phobos/std/regex/internal/parser/Overview.html": {
    "href": "phobos/std/regex/internal/parser/Overview.html",
    "title": "Module - std.regex.internal.parser | Marmos Demo",
    "keywords": "Module - std.regex.internal.parser Structs Name Description CodeGen Parser Functions Name Description fixupBytecode makeRegex optimize postprocess reverseBytecode validateRe Variables Name Description infinite maxCompiledLength maxCumulativeRepetitionLength maxGroupNumber maxLookaroundDepth"
  },
  "phobos/std/regex/internal/parser/Parser/Functions/error.html": {
    "href": "phobos/std/regex/internal/parser/Parser/Functions/error.html",
    "title": "Overloads for - error | Marmos Demo",
    "keywords": "Overloads for - error Module std.regex.internal.parser Parent Parser error(msg) void error( string msg )"
  },
  "phobos/std/regex/internal/parser/Parser/Functions/parseAtom.html": {
    "href": "phobos/std/regex/internal/parser/Parser/Functions/parseAtom.html",
    "title": "Overloads for - parseAtom | Marmos Demo",
    "keywords": "Overloads for - parseAtom Module std.regex.internal.parser Parent Parser parseAtom() void parseAtom( )"
  },
  "phobos/std/regex/internal/parser/Parser/Functions/parseCharset.html": {
    "href": "phobos/std/regex/internal/parser/Parser/Functions/parseCharset.html",
    "title": "Overloads for - parseCharset | Marmos Demo",
    "keywords": "Overloads for - parseCharset Module std.regex.internal.parser Parent Parser parseCharset() void parseCharset( )"
  },
  "phobos/std/regex/internal/parser/Parser/Functions/parseDecimal.html": {
    "href": "phobos/std/regex/internal/parser/Parser/Functions/parseDecimal.html",
    "title": "Overloads for - parseDecimal | Marmos Demo",
    "keywords": "Overloads for - parseDecimal Module std.regex.internal.parser Parent Parser parseDecimal() uint parseDecimal( )"
  },
  "phobos/std/regex/internal/parser/Parser/Functions/parseEscape.html": {
    "href": "phobos/std/regex/internal/parser/Parser/Functions/parseEscape.html",
    "title": "Overloads for - parseEscape | Marmos Demo",
    "keywords": "Overloads for - parseEscape Module std.regex.internal.parser Parent Parser parseEscape() void parseEscape( )"
  },
  "phobos/std/regex/internal/parser/Parser/Functions/parseQuantifier.html": {
    "href": "phobos/std/regex/internal/parser/Parser/Functions/parseQuantifier.html",
    "title": "Overloads for - parseQuantifier | Marmos Demo",
    "keywords": "Overloads for - parseQuantifier Module std.regex.internal.parser Parent Parser parseQuantifier(offset) void parseQuantifier( uint offset )"
  },
  "phobos/std/regex/internal/parser/Parser/Functions/parseRegex.html": {
    "href": "phobos/std/regex/internal/parser/Parser/Functions/parseRegex.html",
    "title": "Overloads for - parseRegex | Marmos Demo",
    "keywords": "Overloads for - parseRegex Module std.regex.internal.parser Parent Parser parseRegex() void parseRegex( )"
  },
  "phobos/std/regex/internal/parser/Parser/Functions/popFront.html": {
    "href": "phobos/std/regex/internal/parser/Parser/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.regex.internal.parser Parent Parser popFront() void popFront( )"
  },
  "phobos/std/regex/internal/parser/Parser/Functions/program.html": {
    "href": "phobos/std/regex/internal/parser/Parser/Functions/program.html",
    "title": "Overloads for - program | Marmos Demo",
    "keywords": "Overloads for - program Module std.regex.internal.parser Parent Parser program() <bug: unknown> program( )"
  },
  "phobos/std/regex/internal/parser/Parser/Functions/save.html": {
    "href": "phobos/std/regex/internal/parser/Parser/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.regex.internal.parser Parent Parser save() <bug: unknown> save( ) auto"
  },
  "phobos/std/regex/internal/parser/Parser/Functions/skipSpace.html": {
    "href": "phobos/std/regex/internal/parser/Parser/Functions/skipSpace.html",
    "title": "Overloads for - skipSpace | Marmos Demo",
    "keywords": "Overloads for - skipSpace Module std.regex.internal.parser Parent Parser skipSpace() void skipSpace( )"
  },
  "phobos/std/regex/internal/parser/Structs/CodeGen.html": {
    "href": "phobos/std/regex/internal/parser/Structs/CodeGen.html",
    "title": "Struct - CodeGen | Marmos Demo",
    "keywords": "Struct - CodeGen Module std.regex.internal.parser public struct CodeGen { // void charsetToIr( CodepointSet set ) ; // void endPattern( uint num ) ; // void finishAlternation( uint fix ) ; // void fixAlternation( ) ; // void fixLookaround( uint fix ) ; // void fixRepetition( uint offset ) ; // void fixRepetition( uint offset, uint min, uint max, bool greedy ) ; // size_t fixupLength( ) ; // void genGroup( ) ; // void genLogicGroup( ) ; // void genLookaround( IR opcode ) ; // void genNamedGroup( string name ) ; // bool isOpenGroup( uint n ) ; // uint length( ) ; // void markBackref( uint n ) ; // Tuple!(booluint) onClose( ) ; // uint popFixup( ) ; // void pushFixup( uint val ) ; // void put( Bytecode code ) ; // void putRaw( uint number ) ; // void start( uint length ) ; // uint topFixup( ) ; // <bug: unknown> backrefed; // <bug: unknown> charsets; // uint counterDepth; // <bug: unknown> dict; // Stack!(uint) fixupStack; // Stack!(uint) groupStack; // <bug: unknown> ir; // uint lookaroundNest; // <bug: unknown> matchers; // uint nesting; // uint ngroup; } Functions Name Description charsetToIr endPattern finishAlternation fixAlternation fixLookaround fixRepetition fixupLength genGroup genLogicGroup genLookaround genNamedGroup isOpenGroup length markBackref onClose popFixup pushFixup put putRaw start topFixup Variables Name Description backrefed charsets counterDepth dict fixupStack groupStack ir lookaroundNest matchers nesting ngroup"
  },
  "phobos/std/regex/internal/parser/Structs/Parser.html": {
    "href": "phobos/std/regex/internal/parser/Structs/Parser.html",
    "title": "Struct - Parser | Marmos Demo",
    "keywords": "Struct - Parser Module std.regex.internal.parser public struct Parser { // alias Char = <todo: marmos support pending>; // void error( string msg ) ; // void parseAtom( ) ; // void parseCharset( ) ; // uint parseDecimal( ) ; // void parseEscape( ) ; // void parseQuantifier( uint offset ) ; // void parseRegex( ) ; // void popFront( ) ; // <bug: unknown> program( ) ; // <bug: unknown> save( ) auto; // void skipSpace( ) ; // bool empty; // dchar front; // Generator g; // R origin; // R pat; // uint re_flags; } Aliases Name Description Char Functions Name Description error parseAtom parseCharset parseDecimal parseEscape parseQuantifier parseRegex popFront program save skipSpace Variables Name Description empty front g origin pat re_flags"
  },
  "phobos/std/regex/internal/tests/Overview.html": {
    "href": "phobos/std/regex/internal/tests/Overview.html",
    "title": "Module - std.regex.internal.tests | Marmos Demo",
    "keywords": "Module - std.regex.internal.tests"
  },
  "phobos/std/regex/internal/tests2/Overview.html": {
    "href": "phobos/std/regex/internal/tests2/Overview.html",
    "title": "Module - std.regex.internal.tests2 | Marmos Demo",
    "keywords": "Module - std.regex.internal.tests2"
  },
  "phobos/std/regex/internal/thompson/Classes/ThompsonMatcher.html": {
    "href": "phobos/std/regex/internal/thompson/Classes/ThompsonMatcher.html",
    "title": "Class - ThompsonMatcher | Marmos Demo",
    "keywords": "Class - ThompsonMatcher Module std.regex.internal.thompson public class ThompsonMatcher { // alias BackMatcher = <todo: marmos support pending>; // alias DataIndex = <todo: marmos support pending>; // alias OpBackFunc = <todo: marmos support pending>; // alias OpFunc = <todo: marmos support pending>; // alias Stream = <todo: marmos support pending>; // <bug: unknown> allocate( ) ; // bool atEnd( ) ; // bool atStart( ) ; // <bug: unknown> createStart( DataIndex index, uint pc ) ; // void dupTo( Matcher!(Char) engine, <bug: unknown> memory ) override; // void finish( <bug: unknown> t, <bug: unknown> matches, int code ) ; // <bug: unknown> fork( <bug: unknown> master, uint pc, uint counter ) ; // size_t getThreadSize( Regex!(Char) re ) static; // void initExternalMemory( <bug: unknown> memory ) ; // size_t initialMemory( Regex!(Char) re ) static; // int match( <bug: unknown> matches ) override; // int matchOneShot( <bug: unknown> matches, uint startPc ) ; // bool next( ) ; // Regex!(Char) pattern( ) override; // void prepareFreeList( size_t size, <bug: unknown> memory ) ; // Matcher!(Char) rearm( <bug: unknown> data ) override; // void recycle( <bug: unknown> t ) ; // void recycle( ThreadList!(DataIndex) list ) ; // size_t refCount( ) override; // bool search( ) ; // <bug: unknown> backrefed; // ThreadList!(DataIndex) clist; // bool exhausted; // <bug: unknown> freelist; // dchar front; // DataIndex genCounter; // DataIndex index; // __enumMember kicked; // int matched; // <bug: unknown> merge; // ThreadList!(DataIndex) nlist; // <bug: unknown> opCacheBackFalse; // <bug: unknown> opCacheBackTrue; // <bug: unknown> opCacheFalse; // <bug: unknown> opCacheTrue; // const Regex!(Char) re; // uint RestartPc; // Stream s; // <bug: unknown> subCounters; // size_t threadSize; } Aliases Name Description BackMatcher DataIndex OpBackFunc OpFunc Stream Functions Name Description allocate atEnd atStart createStart dupTo finish fork getThreadSize initExternalMemory initialMemory match matchOneShot next pattern prepareFreeList rearm recycle refCount search Variables Name Description backrefed clist exhausted freelist front genCounter index kicked matched merge nlist opCacheBackFalse opCacheBackTrue opCacheFalse opCacheTrue re RestartPc s subCounters threadSize"
  },
  "phobos/std/regex/internal/thompson/Overview.html": {
    "href": "phobos/std/regex/internal/thompson/Overview.html",
    "title": "Module - std.regex.internal.thompson | Marmos Demo",
    "keywords": "Module - std.regex.internal.thompson Classes Name Description ThompsonMatcher Structs Name Description Thread ThreadList"
  },
  "phobos/std/regex/internal/thompson/Structs/Thread.html": {
    "href": "phobos/std/regex/internal/thompson/Structs/Thread.html",
    "title": "Struct - Thread | Marmos Demo",
    "keywords": "Struct - Thread Module std.regex.internal.thompson public struct Thread { // uint counter; // <bug: unknown> matches; // <bug: unknown> next; // uint pc; // uint uopCounter; } Variables Name Description counter matches next pc uopCounter"
  },
  "phobos/std/regex/internal/thompson/Structs/ThreadList.html": {
    "href": "phobos/std/regex/internal/thompson/Structs/ThreadList.html",
    "title": "Struct - ThreadList | Marmos Demo",
    "keywords": "Struct - ThreadList Module std.regex.internal.thompson public struct ThreadList { // bool empty( ) ; // <bug: unknown> fetch( ) ; // void insertBack( <bug: unknown> t ) ; // void insertFront( <bug: unknown> t ) ; // ThreadRange opSlice( ) ; // <bug: unknown> tip; // <bug: unknown> toe; } Functions Name Description empty fetch insertBack insertFront opSlice Variables Name Description tip toe"
  },
  "phobos/std/regex/internal/thompson/ThompsonMatcher/Functions/allocate.html": {
    "href": "phobos/std/regex/internal/thompson/ThompsonMatcher/Functions/allocate.html",
    "title": "Overloads for - allocate | Marmos Demo",
    "keywords": "Overloads for - allocate Module std.regex.internal.thompson Parent ThompsonMatcher allocate() <bug: unknown> allocate( )"
  },
  "phobos/std/regex/internal/thompson/ThompsonMatcher/Functions/atEnd.html": {
    "href": "phobos/std/regex/internal/thompson/ThompsonMatcher/Functions/atEnd.html",
    "title": "Overloads for - atEnd | Marmos Demo",
    "keywords": "Overloads for - atEnd Module std.regex.internal.thompson Parent ThompsonMatcher atEnd() bool atEnd( )"
  },
  "phobos/std/regex/internal/thompson/ThompsonMatcher/Functions/atStart.html": {
    "href": "phobos/std/regex/internal/thompson/ThompsonMatcher/Functions/atStart.html",
    "title": "Overloads for - atStart | Marmos Demo",
    "keywords": "Overloads for - atStart Module std.regex.internal.thompson Parent ThompsonMatcher atStart() bool atStart( )"
  },
  "phobos/std/regex/internal/thompson/ThompsonMatcher/Functions/createStart.html": {
    "href": "phobos/std/regex/internal/thompson/ThompsonMatcher/Functions/createStart.html",
    "title": "Overloads for - createStart | Marmos Demo",
    "keywords": "Overloads for - createStart Module std.regex.internal.thompson Parent ThompsonMatcher createStart(index, pc) <bug: unknown> createStart( DataIndex index, uint pc )"
  },
  "phobos/std/regex/internal/thompson/ThompsonMatcher/Functions/dupTo.html": {
    "href": "phobos/std/regex/internal/thompson/ThompsonMatcher/Functions/dupTo.html",
    "title": "Overloads for - dupTo | Marmos Demo",
    "keywords": "Overloads for - dupTo Module std.regex.internal.thompson Parent ThompsonMatcher dupTo(engine, memory) void dupTo( Matcher!(Char) engine, <bug: unknown> memory ) override"
  },
  "phobos/std/regex/internal/thompson/ThompsonMatcher/Functions/finish.html": {
    "href": "phobos/std/regex/internal/thompson/ThompsonMatcher/Functions/finish.html",
    "title": "Overloads for - finish | Marmos Demo",
    "keywords": "Overloads for - finish Module std.regex.internal.thompson Parent ThompsonMatcher finish(t, matches, code) void finish( <bug: unknown> t, <bug: unknown> matches, int code )"
  },
  "phobos/std/regex/internal/thompson/ThompsonMatcher/Functions/fork.html": {
    "href": "phobos/std/regex/internal/thompson/ThompsonMatcher/Functions/fork.html",
    "title": "Overloads for - fork | Marmos Demo",
    "keywords": "Overloads for - fork Module std.regex.internal.thompson Parent ThompsonMatcher fork(master, pc, counter) <bug: unknown> fork( <bug: unknown> master, uint pc, uint counter )"
  },
  "phobos/std/regex/internal/thompson/ThompsonMatcher/Functions/getThreadSize.html": {
    "href": "phobos/std/regex/internal/thompson/ThompsonMatcher/Functions/getThreadSize.html",
    "title": "Overloads for - getThreadSize | Marmos Demo",
    "keywords": "Overloads for - getThreadSize Module std.regex.internal.thompson Parent ThompsonMatcher getThreadSize(re) size_t getThreadSize( Regex!(Char) re ) static"
  },
  "phobos/std/regex/internal/thompson/ThompsonMatcher/Functions/initExternalMemory.html": {
    "href": "phobos/std/regex/internal/thompson/ThompsonMatcher/Functions/initExternalMemory.html",
    "title": "Overloads for - initExternalMemory | Marmos Demo",
    "keywords": "Overloads for - initExternalMemory Module std.regex.internal.thompson Parent ThompsonMatcher initExternalMemory(memory) void initExternalMemory( <bug: unknown> memory )"
  },
  "phobos/std/regex/internal/thompson/ThompsonMatcher/Functions/initialMemory.html": {
    "href": "phobos/std/regex/internal/thompson/ThompsonMatcher/Functions/initialMemory.html",
    "title": "Overloads for - initialMemory | Marmos Demo",
    "keywords": "Overloads for - initialMemory Module std.regex.internal.thompson Parent ThompsonMatcher initialMemory(re) size_t initialMemory( Regex!(Char) re ) static"
  },
  "phobos/std/regex/internal/thompson/ThompsonMatcher/Functions/match.html": {
    "href": "phobos/std/regex/internal/thompson/ThompsonMatcher/Functions/match.html",
    "title": "Overloads for - match | Marmos Demo",
    "keywords": "Overloads for - match Module std.regex.internal.thompson Parent ThompsonMatcher match(matches) int match( <bug: unknown> matches ) override"
  },
  "phobos/std/regex/internal/thompson/ThompsonMatcher/Functions/matchOneShot.html": {
    "href": "phobos/std/regex/internal/thompson/ThompsonMatcher/Functions/matchOneShot.html",
    "title": "Overloads for - matchOneShot | Marmos Demo",
    "keywords": "Overloads for - matchOneShot Module std.regex.internal.thompson Parent ThompsonMatcher matchOneShot(matches, startPc) int matchOneShot( <bug: unknown> matches, uint startPc )"
  },
  "phobos/std/regex/internal/thompson/ThompsonMatcher/Functions/next.html": {
    "href": "phobos/std/regex/internal/thompson/ThompsonMatcher/Functions/next.html",
    "title": "Overloads for - next | Marmos Demo",
    "keywords": "Overloads for - next Module std.regex.internal.thompson Parent ThompsonMatcher next() bool next( )"
  },
  "phobos/std/regex/internal/thompson/ThompsonMatcher/Functions/pattern.html": {
    "href": "phobos/std/regex/internal/thompson/ThompsonMatcher/Functions/pattern.html",
    "title": "Overloads for - pattern | Marmos Demo",
    "keywords": "Overloads for - pattern Module std.regex.internal.thompson Parent ThompsonMatcher pattern() Regex!(Char) pattern( ) override"
  },
  "phobos/std/regex/internal/thompson/ThompsonMatcher/Functions/prepareFreeList.html": {
    "href": "phobos/std/regex/internal/thompson/ThompsonMatcher/Functions/prepareFreeList.html",
    "title": "Overloads for - prepareFreeList | Marmos Demo",
    "keywords": "Overloads for - prepareFreeList Module std.regex.internal.thompson Parent ThompsonMatcher prepareFreeList(size, memory) void prepareFreeList( size_t size, <bug: unknown> memory )"
  },
  "phobos/std/regex/internal/thompson/ThompsonMatcher/Functions/rearm.html": {
    "href": "phobos/std/regex/internal/thompson/ThompsonMatcher/Functions/rearm.html",
    "title": "Overloads for - rearm | Marmos Demo",
    "keywords": "Overloads for - rearm Module std.regex.internal.thompson Parent ThompsonMatcher rearm(data) Matcher!(Char) rearm( <bug: unknown> data ) override"
  },
  "phobos/std/regex/internal/thompson/ThompsonMatcher/Functions/recycle.html": {
    "href": "phobos/std/regex/internal/thompson/ThompsonMatcher/Functions/recycle.html",
    "title": "Overloads for - recycle | Marmos Demo",
    "keywords": "Overloads for - recycle Module std.regex.internal.thompson Parent ThompsonMatcher recycle(t) void recycle( <bug: unknown> t ) recycle(list) void recycle( ThreadList!(DataIndex) list )"
  },
  "phobos/std/regex/internal/thompson/ThompsonMatcher/Functions/refCount.html": {
    "href": "phobos/std/regex/internal/thompson/ThompsonMatcher/Functions/refCount.html",
    "title": "Overloads for - refCount | Marmos Demo",
    "keywords": "Overloads for - refCount Module std.regex.internal.thompson Parent ThompsonMatcher refCount() size_t refCount( ) override"
  },
  "phobos/std/regex/internal/thompson/ThompsonMatcher/Functions/search.html": {
    "href": "phobos/std/regex/internal/thompson/ThompsonMatcher/Functions/search.html",
    "title": "Overloads for - search | Marmos Demo",
    "keywords": "Overloads for - search Module std.regex.internal.thompson Parent ThompsonMatcher search() bool search( )"
  },
  "phobos/std/regex/internal/thompson/ThreadList/Functions/empty.html": {
    "href": "phobos/std/regex/internal/thompson/ThreadList/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.regex.internal.thompson Parent ThreadList empty() bool empty( )"
  },
  "phobos/std/regex/internal/thompson/ThreadList/Functions/fetch.html": {
    "href": "phobos/std/regex/internal/thompson/ThreadList/Functions/fetch.html",
    "title": "Overloads for - fetch | Marmos Demo",
    "keywords": "Overloads for - fetch Module std.regex.internal.thompson Parent ThreadList fetch() <bug: unknown> fetch( )"
  },
  "phobos/std/regex/internal/thompson/ThreadList/Functions/insertBack.html": {
    "href": "phobos/std/regex/internal/thompson/ThreadList/Functions/insertBack.html",
    "title": "Overloads for - insertBack | Marmos Demo",
    "keywords": "Overloads for - insertBack Module std.regex.internal.thompson Parent ThreadList insertBack(t) void insertBack( <bug: unknown> t )"
  },
  "phobos/std/regex/internal/thompson/ThreadList/Functions/insertFront.html": {
    "href": "phobos/std/regex/internal/thompson/ThreadList/Functions/insertFront.html",
    "title": "Overloads for - insertFront | Marmos Demo",
    "keywords": "Overloads for - insertFront Module std.regex.internal.thompson Parent ThreadList insertFront(t) void insertFront( <bug: unknown> t )"
  },
  "phobos/std/regex/internal/thompson/ThreadList/Functions/opSlice.html": {
    "href": "phobos/std/regex/internal/thompson/ThreadList/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.regex.internal.thompson Parent ThreadList opSlice() ThreadRange opSlice( )"
  },
  "phobos/std/signals/Functions/linkin.html": {
    "href": "phobos/std/signals/Functions/linkin.html",
    "title": "Overloads for - linkin | Marmos Demo",
    "keywords": "Overloads for - linkin Module std.signals linkin() void linkin( )"
  },
  "phobos/std/signals/Functions/rt_attachDisposeEvent.html": {
    "href": "phobos/std/signals/Functions/rt_attachDisposeEvent.html",
    "title": "Overloads for - rt_attachDisposeEvent | Marmos Demo",
    "keywords": "Overloads for - rt_attachDisposeEvent Module std.signals rt_attachDisposeEvent(obj, evt) void rt_attachDisposeEvent( Object obj, DisposeEvt evt )"
  },
  "phobos/std/signals/Functions/rt_detachDisposeEvent.html": {
    "href": "phobos/std/signals/Functions/rt_detachDisposeEvent.html",
    "title": "Overloads for - rt_detachDisposeEvent | Marmos Demo",
    "keywords": "Overloads for - rt_detachDisposeEvent Module std.signals rt_detachDisposeEvent(obj, evt) void rt_detachDisposeEvent( Object obj, DisposeEvt evt )"
  },
  "phobos/std/signals/Overview.html": {
    "href": "phobos/std/signals/Overview.html",
    "title": "Module - std.signals | Marmos Demo",
    "keywords": "Module - std.signals About Signals and Slots are an implementation of the Observer Pattern. Essentially, when a Signal is emitted, a list of connected Observers (called slots) are called. There have been several D implementations of Signals and Slots. This version makes use of several new features in D, which make using it simpler and less error prone. In particular, it is no longer necessary to instrument the slots. References \\((LUCKY A Deeper Look at Signals and Slots)\\)(BR) \\((LINK2 http://en.wikipedia.org/wiki/Observer_pattern, Observer pattern)\\)(BR) \\((LINK2 http://en.wikipedia.org/wiki/Signals_and_slots, Wikipedia)\\)(BR) \\((LINK2 http://boost.org/doc/html/\\)(SIGNALS).html, Boost Signals)$(BR) \\((LINK2 http://qt-project.org/doc/qt-5/signalsandslots.html, Qt)\\)(BR) There has been a great deal of discussion in the D newsgroups over this, and several implementations: \\((LINK2 http://www.digitalmars.com/d/archives/digitalmars/D/announce/signal_slots_library_4825.html, signal slots library)\\)(BR) \\((LINK2 http://www.digitalmars.com/d/archives/digitalmars/D/Signals_and_Slots_in_D_42387.html, Signals and Slots in D)\\)(BR) \\((LINK2 http://www.digitalmars.com/d/archives/digitalmars/D/Dynamic_binding_--_Qt_s_Signals_and_Slots_vs_Objective-C_42260.html, Dynamic binding -- Qt's Signals and Slots vs Objective-C)\\)(BR) \\((LINK2 http://www.digitalmars.com/d/archives/digitalmars/D/Dissecting_the_SS_42377.html, Dissecting the SS)\\)(BR) \\((LINK2 http://www.digitalmars.com/d/archives/digitalmars/D/dwt/about_harmonia_454.html, about harmonia)\\)(BR) \\((LINK2 http://www.digitalmars.com/d/archives/digitalmars/D/announce/1502.html, Another event handling module)\\)(BR) \\((LINK2 http://www.digitalmars.com/d/archives/digitalmars/D/41825.html, Suggestion: signal/slot mechanism)\\)(BR) \\((LINK2 http://www.digitalmars.com/d/archives/digitalmars/D/13251.html, Signals and slots?)\\)(BR) \\((LINK2 http://www.digitalmars.com/d/archives/digitalmars/D/10714.html, Signals and slots ready for evaluation)\\)(BR) \\((LINK2 http://www.digitalmars.com/d/archives/digitalmars/D/1393.html, Signals &amp; Slots for Walter)\\)(BR) \\((LINK2 http://www.digitalmars.com/d/archives/28456.html, Signal/Slot mechanism?)\\)(BR) \\((LINK2 http://www.digitalmars.com/d/archives/19470.html, Modern Features?)\\)(BR) \\((LINK2 http://www.digitalmars.com/d/archives/16592.html, Delegates vs interfaces)\\)(BR) \\((LINK2 http://www.digitalmars.com/d/archives/16583.html, The importance of component programming (properties\\)(COMMA) signals and slots$(COMMA) etc))$(BR) \\((LINK2 http://www.digitalmars.com/d/archives/16368.html, signals and slots)\\)(BR) Bugs $(RED Slots can only be delegates referring directly to class or interface member functions. If a delegate to something else is passed to connect(), such as a struct member function, a nested function, a COM interface, a closure, undefined behavior will result.) Not safe for multiple threads operating on the same signals or slots. Macros: SIGNALS=signals Copyright: Copyright The D Language Foundation 2000 - 2009. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP digitalmars.com, Walter Bright) Source: $(PHOBOSSRC std/signals.d) $(SCRIPT inhibitQuickIndex = 1;) Aliases Name Description DisposeEvt Functions Name Description linkin rt_attachDisposeEvent rt_detachDisposeEvent"
  },
  "phobos/std/socket/Address/Functions/addressFamily.html": {
    "href": "phobos/std/socket/Address/Functions/addressFamily.html",
    "title": "Overloads for - addressFamily | Marmos Demo",
    "keywords": "Overloads for - addressFamily Module std.socket Parent Address addressFamily() AddressFamily addressFamily( ) Family of this address."
  },
  "phobos/std/socket/Address/Functions/name.html": {
    "href": "phobos/std/socket/Address/Functions/name.html",
    "title": "Overloads for - name | Marmos Demo",
    "keywords": "Overloads for - name Module std.socket Parent Address name() <bug: unknown> name( ) abstract Returns pointer to underlying sockaddr structure. name() <bug: unknown> name( ) abstract ditto"
  },
  "phobos/std/socket/Address/Functions/nameLen.html": {
    "href": "phobos/std/socket/Address/Functions/nameLen.html",
    "title": "Overloads for - nameLen | Marmos Demo",
    "keywords": "Overloads for - nameLen Module std.socket Parent Address nameLen() socklen_t nameLen( ) abstract Returns actual size of underlying sockaddr structure."
  },
  "phobos/std/socket/Address/Functions/setNameLen.html": {
    "href": "phobos/std/socket/Address/Functions/setNameLen.html",
    "title": "Overloads for - setNameLen | Marmos Demo",
    "keywords": "Overloads for - setNameLen Module std.socket Parent Address setNameLen(len) void setNameLen( socklen_t len )"
  },
  "phobos/std/socket/Address/Functions/toAddrString.html": {
    "href": "phobos/std/socket/Address/Functions/toAddrString.html",
    "title": "Overloads for - toAddrString | Marmos Demo",
    "keywords": "Overloads for - toAddrString Module std.socket Parent Address toAddrString() string toAddrString( ) Attempts to retrieve the host address as a human-readable string. Throws: AddressException on failure, or SocketFeatureException if address retrieval for this address family is not available on the current system."
  },
  "phobos/std/socket/Address/Functions/toHostNameString.html": {
    "href": "phobos/std/socket/Address/Functions/toHostNameString.html",
    "title": "Overloads for - toHostNameString | Marmos Demo",
    "keywords": "Overloads for - toHostNameString Module std.socket Parent Address toHostNameString() string toHostNameString( ) Attempts to retrieve the host name as a fully qualified domain name. Returns: The FQDN corresponding to this Address , or null if the host name did not resolve. Throws: AddressException on error, or SocketFeatureException if host name lookup for this address family is not available on the current system."
  },
  "phobos/std/socket/Address/Functions/toHostString.html": {
    "href": "phobos/std/socket/Address/Functions/toHostString.html",
    "title": "Overloads for - toHostString | Marmos Demo",
    "keywords": "Overloads for - toHostString Module std.socket Parent Address toHostString(numeric) string toHostString( bool numeric )"
  },
  "phobos/std/socket/Address/Functions/toPortString.html": {
    "href": "phobos/std/socket/Address/Functions/toPortString.html",
    "title": "Overloads for - toPortString | Marmos Demo",
    "keywords": "Overloads for - toPortString Module std.socket Parent Address toPortString() string toPortString( ) Attempts to retrieve the numeric port number as a string. Throws: AddressException on failure, or SocketFeatureException if port number retrieval for this address family is not available on the current system."
  },
  "phobos/std/socket/Address/Functions/toServiceNameString.html": {
    "href": "phobos/std/socket/Address/Functions/toServiceNameString.html",
    "title": "Overloads for - toServiceNameString | Marmos Demo",
    "keywords": "Overloads for - toServiceNameString Module std.socket Parent Address toServiceNameString() string toServiceNameString( ) Attempts to retrieve the service name as a string. Throws: AddressException on failure, or SocketFeatureException if service name lookup for this address family is not available on the current system."
  },
  "phobos/std/socket/Address/Functions/toServiceString.html": {
    "href": "phobos/std/socket/Address/Functions/toServiceString.html",
    "title": "Overloads for - toServiceString | Marmos Demo",
    "keywords": "Overloads for - toServiceString Module std.socket Parent Address toServiceString(numeric) string toServiceString( bool numeric )"
  },
  "phobos/std/socket/Address/Functions/toString.html": {
    "href": "phobos/std/socket/Address/Functions/toString.html",
    "title": "Overloads for - toString | Marmos Demo",
    "keywords": "Overloads for - toString Module std.socket Parent Address toString() string toString( ) override Human readable string representing this address."
  },
  "phobos/std/socket/Classes/Address.html": {
    "href": "phobos/std/socket/Classes/Address.html",
    "title": "Class - Address | Marmos Demo",
    "keywords": "Class - Address Module std.socket public class Address { // Family of this address. AddressFamily addressFamily( ) ; // Returns pointer to underlying `sockaddr` structure. <bug: unknown> name( ) abstract; // ditto <bug: unknown> name( ) abstract; // Returns actual size of underlying `sockaddr` structure. socklen_t nameLen( ) abstract; // void setNameLen( socklen_t len ) ; // Attempts to retrieve the host address as a human-readable string. string toAddrString( ) ; // Attempts to retrieve the host name as a fully qualified domain name. string toHostNameString( ) ; // string toHostString( bool numeric ) ; // Attempts to retrieve the numeric port number as a string. string toPortString( ) ; // Attempts to retrieve the service name as a string. string toServiceNameString( ) ; // string toServiceString( bool numeric ) ; // Human readable string representing this address. string toString( ) override; } About Abstract class for representing a socket address. Example --- writeln(\"About www.google.com port 80:\"); try { Address[] addresses = getAddress(\"www.google.com\", 80); writefln(\" %d addresses found.\", addresses.length); foreach (int i, Address a; addresses) { writefln(\" Address %d:\", i+1); writefln(\" IP address: %s\", a.toAddrString()); writefln(\" Hostname: %s\", a.toHostNameString()); writefln(\" Port: %s\", a.toPortString()); writefln(\" Service name: %s\", a.toServiceNameString()); } } catch (SocketException e) writefln(\" Lookup error: %s\", e.msg); --- Functions Name Description addressFamily Family of this address. name Returns pointer to underlying sockaddr structure. nameLen Returns actual size of underlying sockaddr structure. setNameLen toAddrString Attempts to retrieve the host address as a human-readable string. toHostNameString Attempts to retrieve the host name as a fully qualified domain name. toHostString toPortString Attempts to retrieve the numeric port number as a string. toServiceNameString Attempts to retrieve the service name as a string. toServiceString toString Human readable string representing this address."
  },
  "phobos/std/socket/Classes/AddressException.html": {
    "href": "phobos/std/socket/Classes/AddressException.html",
    "title": "Class - AddressException | Marmos Demo",
    "keywords": "Class - AddressException Module std.socket public class AddressException { } About Class for exceptions thrown from an Address ."
  },
  "phobos/std/socket/Classes/HostException.html": {
    "href": "phobos/std/socket/Classes/HostException.html",
    "title": "Class - HostException | Marmos Demo",
    "keywords": "Class - HostException Module std.socket public class HostException { } About Class for exceptions thrown from an InternetHost ."
  },
  "phobos/std/socket/Classes/Internet6Address.html": {
    "href": "phobos/std/socket/Classes/Internet6Address.html",
    "title": "Class - Internet6Address | Marmos Demo",
    "keywords": "Class - Internet6Address Module std.socket public class Internet6Address { // Returns the IPv6 address. <bug: unknown> addr( ) ; // Any IPv6 host address. <bug: unknown> ADDR_ANY( ) static; // <bug: unknown> name( ) override; // <bug: unknown> name( ) override; // socklen_t nameLen( ) override; // Parse an IPv6 host address string as described in RFC 2373, and return the address. Throws: `SocketException` on error. <bug: unknown> parse( <bug: unknown> addr ) static; // Returns the IPv6 port number. ushort port( ) ; // Any IPv6 port number. ushort PORT_ANY; // sockaddr_in6 sin6; } About Encapsulates an IPv6 (Internet Protocol version 6) socket address. Consider using getAddress , parseAddress and Address methods instead of using this class directly. Functions Name Description addr Returns the IPv6 address. ADDR_ANY Any IPv6 host address. name nameLen parse Parse an IPv6 host address string as described in RFC 2373, and return the address. Throws: SocketException on error. port Returns the IPv6 port number. Variables Name Description PORT_ANY Any IPv6 port number. sin6"
  },
  "phobos/std/socket/Classes/InternetAddress.html": {
    "href": "phobos/std/socket/Classes/InternetAddress.html",
    "title": "Class - InternetAddress | Marmos Demo",
    "keywords": "Class - InternetAddress Module std.socket public class InternetAddress { // Returns the IPv4 address number (in host byte order). uint addr( ) ; // Convert an IPv4 address number in host byte order to a human readable string representing the IPv4 address in dotted-decimal form. string addrToString( uint addr ) static; // <bug: unknown> name( ) override; // <bug: unknown> name( ) override; // socklen_t nameLen( ) override; // Provides support for comparing equality with another InternetAddress of the same type. Returns: true if the InternetAddresses share the same address and port number. bool opEquals( Object o ) override; // Parse an IPv4 address string in the dotted-decimal form $(I a.b.c.d) and return the number. Returns: If the string is not a legitimate IPv4 address, `ADDR_NONE` is returned. uint parse( <bug: unknown> addr ) static; // Returns the IPv4 port number (in host byte order). ushort port( ) ; // Human readable string representing the IPv4 address in dotted-decimal form. string toAddrString( ) override; // Attempts to retrieve the host name as a fully qualified domain name. string toHostNameString( ) override; // Human readable string representing the IPv4 port. string toPortString( ) override; // Any IPv4 host address. uint ADDR_ANY; // An invalid IPv4 host address. uint ADDR_NONE; // Any IPv4 port number. ushort PORT_ANY; // sockaddr_in sin; } About Encapsulates an IPv4 (Internet Protocol version 4) socket address. Consider using getAddress , parseAddress and Address methods instead of using this class directly. Functions Name Description addr Returns the IPv4 address number (in host byte order). addrToString Convert an IPv4 address number in host byte order to a human readable string representing the IPv4 address in dotted-decimal form. name nameLen opEquals Provides support for comparing equality with another InternetAddress of the same type. Returns: true if the InternetAddresses share the same address and port number. parse Parse an IPv4 address string in the dotted-decimal form $(I a.b.c.d) and return the number. Returns: If the string is not a legitimate IPv4 address, ADDR_NONE is returned. port Returns the IPv4 port number (in host byte order). toAddrString Human readable string representing the IPv4 address in dotted-decimal form. toHostNameString Attempts to retrieve the host name as a fully qualified domain name. toPortString Human readable string representing the IPv4 port. Variables Name Description ADDR_ANY Any IPv4 host address. ADDR_NONE An invalid IPv4 host address. PORT_ANY Any IPv4 port number. sin"
  },
  "phobos/std/socket/Classes/InternetHost.html": {
    "href": "phobos/std/socket/Classes/InternetHost.html",
    "title": "Class - InternetHost | Marmos Demo",
    "keywords": "Class - InternetHost Module std.socket public class InternetHost { // alias getHost = <todo: marmos support pending>; // Resolve IPv4 address number. bool getHostByAddr( uint addr ) ; // Same as previous, but addr is an IPv4 address string in the dotted-decimal form $(I a.b.c.d). Returns: false if unable to resolve. bool getHostByAddr( <bug: unknown> addr ) ; // Resolve host name. Returns: false if unable to resolve. bool getHostByName( <bug: unknown> name ) ; // void populate( <bug: unknown> he ) ; // void validHostent( <bug: unknown> he ) ; // ditto <bug: unknown> addrList; // ditto <bug: unknown> aliases; // string name; } About Class for resolving IPv4 addresses. Consider using getAddress , parseAddress and Address methods instead of using this class directly. Aliases Name Description getHost Functions Name Description getHostByAddr Resolve IPv4 address number. getHostByName Resolve host name. Returns: false if unable to resolve. populate validHostent Variables Name Description addrList ditto aliases ditto name"
  },
  "phobos/std/socket/Classes/Protocol.html": {
    "href": "phobos/std/socket/Classes/Protocol.html",
    "title": "Class - Protocol | Marmos Demo",
    "keywords": "Class - Protocol Module std.socket public class Protocol { // Returns: false on failure bool getProtocolByName( <bug: unknown> name ) ; // Returns: false on failure bool getProtocolByType( ProtocolType type ) ; // void populate( <bug: unknown> proto ) ; // ditto <bug: unknown> aliases; // ditto string name; // ProtocolType type; } About Class for retrieving protocol information. Example --- auto proto = new Protocol; writeln(\"About protocol TCP:\"); if (proto.getProtocolByType(ProtocolType.TCP)) { writefln(\" Name: %s\", proto.name); foreach (string s; proto.aliases) writefln(\" Alias: %s\", s); } else writeln(\" No information found\"); --- Functions Name Description getProtocolByName Returns: false on failure getProtocolByType Returns: false on failure populate Variables Name Description aliases ditto name ditto type"
  },
  "phobos/std/socket/Classes/Service.html": {
    "href": "phobos/std/socket/Classes/Service.html",
    "title": "Class - Service | Marmos Demo",
    "keywords": "Class - Service Module std.socket public class Service { // If a protocol name is omitted, any protocol will be matched. Returns: false on failure. bool getServiceByName( <bug: unknown> name, <bug: unknown> protocolName ) ; // ditto bool getServiceByPort( ushort port, <bug: unknown> protocolName ) ; // void populate( <bug: unknown> serv ) ; // ditto <bug: unknown> aliases; // string name; // ditto ushort port; // ditto string protocolName; } About Class for retrieving service information. Example --- auto serv = new Service; writeln(\"About service epmap:\"); if (serv.getServiceByName(\"epmap\", \"tcp\")) { writefln(\" Service: %s\", serv.name); writefln(\" Port: %d\", serv.port); writefln(\" Protocol: %s\", serv.protocolName); foreach (string s; serv.aliases) writefln(\" Alias: %s\", s); } else writefln(\" No service for epmap.\"); --- Functions Name Description getServiceByName If a protocol name is omitted, any protocol will be matched. Returns: false on failure. getServiceByPort ditto populate Variables Name Description aliases ditto name port ditto protocolName ditto"
  },
  "phobos/std/socket/Classes/Socket.html": {
    "href": "phobos/std/socket/Classes/Socket.html",
    "title": "Class - Socket | Marmos Demo",
    "keywords": "Class - Socket Module std.socket public class Socket { // Accept an incoming connection. If the socket is blocking, `accept` waits for a connection request. Throws `SocketAcceptException` if unable to accept. See `accepting` for use with derived classes. Socket accept( ) ; // Called by `accept` when a new `Socket` must be created for a new connection. To use a derived class, override this method and return an instance of your class. The returned `Socket` 's handle must not be set; `Socket` has a protected constructor `this()` to use in this situation. Socket accepting( ) ; // Get the socket's address family. AddressFamily addressFamily( ) ; // Associate a local address with this socket. void bind( Address addr ) ; // Get/set socket's blocking flag. bool blocking( ) ; // ditto void blocking( bool byes ) ; // int capToInt( size_t size ) static; // Immediately drop any connections and release socket resources. The `Socket` object is no longer usable after `close` . Calling `shutdown` before `close` is recommended for connection-oriented sockets. void close( ) ; // Establish a connection. If the socket is blocking, connect waits for the connection to be made. If the socket is nonblocking, connect returns immediately and the connection attempt is still in progress. void connect( Address to ) ; // Can be overridden to support other addresses. Returns: A new `Address` object for the current address family. Address createAddress( ) ; // Get a text description of this socket's error status, and clear the socket's error status. string getErrorText( ) ; // Get a socket option. Returns: The number of bytes written to `result` . The length, in bytes, of the actual result - very different from getsockopt() int getOption( SocketOptionLevel level, SocketOption option, <bug: unknown> result ) ; // Common case of getting integer and boolean options. int getOption( SocketOptionLevel level, SocketOption option, int32_t result ) ; // Get the linger option. int getOption( SocketOptionLevel level, SocketOption option, Linger result ) ; // Get a timeout (duration) option. void getOption( SocketOptionLevel level, SocketOption option, Duration result ) ; // Get underlying socket handle. socket_t handle( ) ; // Returns: The local machine's host name string hostName( ) static; // Property that indicates if this is a valid, alive socket. bool isAlive( ) ; // Listen for an incoming connection. `bind` must be called before you can `listen` . The `backlog` is a request of how many pending incoming connections are queued until `accept` ed. void listen( int backlog ) ; // Local endpoint `Address` . Address localAddress( ) ; // Receive data on the connection. If the socket is blocking, `receive` waits until there is data to be received. Returns: The number of bytes actually received, `0` if the remote side has closed the connection, or `Socket.ERROR` on failure. ptrdiff_t receive( <bug: unknown> buf, SocketFlags flags ) ; // ditto ptrdiff_t receive( <bug: unknown> buf ) ; // Receive data and get the remote endpoint `Address` . If the socket is blocking, `receiveFrom` waits until there is data to be received. Returns: The number of bytes actually received, `0` if the remote side has closed the connection, or `Socket.ERROR` on failure. ptrdiff_t receiveFrom( <bug: unknown> buf, SocketFlags flags, Address from ) ; // ditto ptrdiff_t receiveFrom( <bug: unknown> buf, Address from ) ; // ditto ptrdiff_t receiveFrom( <bug: unknown> buf, SocketFlags flags ) ; // ditto ptrdiff_t receiveFrom( <bug: unknown> buf ) ; // Releases the underlying socket handle from the Socket object. Once it is released, you cannot use the Socket object's methods anymore. This also means the Socket destructor will no longer close the socket - it becomes your responsibility. socket_t release( ) ; // Remote endpoint `Address` . Address remoteAddress( ) ; // Wait for a socket to change status. A wait timeout of $(REF Duration, core, time) or `TimeVal` , may be specified; if a timeout is not specified or the `TimeVal` is `null` , the maximum timeout is used. The `TimeVal` timeout has an unspecified value when `select` returns. Returns: The number of sockets with status changes, `0` on timeout, or `-1` on interruption. If the return value is greater than `0` , the `SocketSets` are updated to only contain the sockets having status changes. For a connecting socket, a write status change means the connection is established and it's able to send. For a listening socket, a read status change means there is an incoming connection request and it's able to accept. int select( SocketSet checkRead, SocketSet checkWrite, SocketSet checkError, Duration timeout ) static; // ditto int select( SocketSet checkRead, SocketSet checkWrite, SocketSet checkError ) static; // Ditto int select( SocketSet checkRead, SocketSet checkWrite, SocketSet checkError, <bug: unknown> timeout ) static; // Send data on the connection. If the socket is blocking and there is no buffer space left, `send` waits. Returns: The number of bytes actually sent, or `Socket.ERROR` on failure. ptrdiff_t send( <bug: unknown> buf, SocketFlags flags ) ; // ditto ptrdiff_t send( <bug: unknown> buf ) ; // Send data to a specific destination Address. If the destination address is not specified, a connection must have been made and that address is used. If the socket is blocking and there is no buffer space left, `sendTo` waits. Returns: The number of bytes actually sent, or `Socket.ERROR` on failure. ptrdiff_t sendTo( <bug: unknown> buf, SocketFlags flags, Address to ) ; // ditto ptrdiff_t sendTo( <bug: unknown> buf, Address to ) ; // ditto ptrdiff_t sendTo( <bug: unknown> buf, SocketFlags flags ) ; // ditto ptrdiff_t sendTo( <bug: unknown> buf ) ; // Enables TCP keep-alive with the specified parameters. void setKeepAlive( int time, int interval ) ; // Set a socket option. void setOption( SocketOptionLevel level, SocketOption option, <bug: unknown> value ) ; // Common case for setting integer and boolean options. void setOption( SocketOptionLevel level, SocketOption option, int32_t value ) ; // Set the linger option. void setOption( SocketOptionLevel level, SocketOption option, Linger value ) ; // Sets a timeout (duration) option, i.e. `SocketOption.SNDTIMEO` or `RCVTIMEO` . Zero indicates no timeout. void setOption( SocketOptionLevel level, SocketOption option, Duration value ) ; // void setSock( socket_t handle ) ; // Disables sends and/or receives. void shutdown( SocketShutdown how ) ; // Send or receive error code. See `wouldHaveBlocked` , `lastSocketError` and `Socket.getErrorText` for obtaining more information about the error. int ERROR; // socket_t sock; // __enumMember WINSOCK_TIMEOUT_SKEW; } About Class that creates a network communication endpoint using the Berkeley sockets interface. Functions Name Description accept Accept an incoming connection. If the socket is blocking, accept waits for a connection request. Throws SocketAcceptException if unable to accept. See accepting for use with derived classes. accepting Called by accept when a new Socket must be created for a new connection. To use a derived class, override this method and return an instance of your class. The returned Socket 's handle must not be set; Socket has a protected constructor this() to use in this situation. addressFamily Get the socket's address family. bind Associate a local address with this socket. blocking Get/set socket's blocking flag. capToInt close Immediately drop any connections and release socket resources. The Socket object is no longer usable after close . Calling shutdown before close is recommended for connection-oriented sockets. connect Establish a connection. If the socket is blocking, connect waits for the connection to be made. If the socket is nonblocking, connect returns immediately and the connection attempt is still in progress. createAddress Can be overridden to support other addresses. Returns: A new Address object for the current address family. getErrorText Get a text description of this socket's error status, and clear the socket's error status. getOption Get a socket option. Returns: The number of bytes written to result . The length, in bytes, of the actual result - very different from getsockopt() handle Get underlying socket handle. hostName Returns: The local machine's host name isAlive Property that indicates if this is a valid, alive socket. listen Listen for an incoming connection. bind must be called before you can listen . The backlog is a request of how many pending incoming connections are queued until accept ed. localAddress Local endpoint Address . receive Receive data on the connection. If the socket is blocking, receive waits until there is data to be received. Returns: The number of bytes actually received, 0 if the remote side has closed the connection, or Socket.ERROR on failure. receiveFrom Receive data and get the remote endpoint Address . If the socket is blocking, receiveFrom waits until there is data to be received. Returns: The number of bytes actually received, 0 if the remote side has closed the connection, or Socket.ERROR on failure. release Releases the underlying socket handle from the Socket object. Once it is released, you cannot use the Socket object's methods anymore. This also means the Socket destructor will no longer close the socket - it becomes your responsibility. remoteAddress Remote endpoint Address . select Wait for a socket to change status. A wait timeout of $(REF Duration, core, time) or TimeVal , may be specified; if a timeout is not specified or the TimeVal is null , the maximum timeout is used. The TimeVal timeout has an unspecified value when select returns. Returns: The number of sockets with status changes, 0 on timeout, or -1 on interruption. If the return value is greater than 0 , the SocketSets are updated to only contain the sockets having status changes. For a connecting socket, a write status change means the connection is established and it's able to send. For a listening socket, a read status change means there is an incoming connection request and it's able to accept. send Send data on the connection. If the socket is blocking and there is no buffer space left, send waits. Returns: The number of bytes actually sent, or Socket.ERROR on failure. sendTo Send data to a specific destination Address. If the destination address is not specified, a connection must have been made and that address is used. If the socket is blocking and there is no buffer space left, sendTo waits. Returns: The number of bytes actually sent, or Socket.ERROR on failure. setKeepAlive Enables TCP keep-alive with the specified parameters. setOption Set a socket option. setSock shutdown Disables sends and/or receives. Variables Name Description ERROR Send or receive error code. See wouldHaveBlocked , lastSocketError and Socket.getErrorText for obtaining more information about the error. sock WINSOCK_TIMEOUT_SKEW"
  },
  "phobos/std/socket/Classes/SocketAcceptException.html": {
    "href": "phobos/std/socket/Classes/SocketAcceptException.html",
    "title": "Class - SocketAcceptException | Marmos Demo",
    "keywords": "Class - SocketAcceptException Module std.socket public class SocketAcceptException { } About Exception thrown by Socket.accept ."
  },
  "phobos/std/socket/Classes/SocketException.html": {
    "href": "phobos/std/socket/Classes/SocketException.html",
    "title": "Class - SocketException | Marmos Demo",
    "keywords": "Class - SocketException Module std.socket public class SocketException { } About Base exception thrown by std.socket ."
  },
  "phobos/std/socket/Classes/SocketFeatureException.html": {
    "href": "phobos/std/socket/Classes/SocketFeatureException.html",
    "title": "Class - SocketFeatureException | Marmos Demo",
    "keywords": "Class - SocketFeatureException Module std.socket public class SocketFeatureException { } About Socket exception representing attempts to use network capabilities not available on the current system."
  },
  "phobos/std/socket/Classes/SocketOSException.html": {
    "href": "phobos/std/socket/Classes/SocketOSException.html",
    "title": "Class - SocketOSException | Marmos Demo",
    "keywords": "Class - SocketOSException Module std.socket public class SocketOSException { // Platform-specific error code. int errorCode; } About Socket exception representing network errors reported by the operating system. Variables Name Description errorCode Platform-specific error code."
  },
  "phobos/std/socket/Classes/SocketParameterException.html": {
    "href": "phobos/std/socket/Classes/SocketParameterException.html",
    "title": "Class - SocketParameterException | Marmos Demo",
    "keywords": "Class - SocketParameterException Module std.socket public class SocketParameterException { } About Socket exception representing invalid parameters specified by user code."
  },
  "phobos/std/socket/Classes/SocketSet.html": {
    "href": "phobos/std/socket/Classes/SocketSet.html",
    "title": "Class - SocketSet | Marmos Demo",
    "keywords": "Class - SocketSet Module std.socket public class SocketSet { // alias fd_set_count_type = <todo: marmos support pending>; // alias fd_set_type = <todo: marmos support pending>; // void add( socket_t s ) ; // Add a `Socket` to the collection. The socket must not already be in the collection. void add( Socket s ) ; // size_t capacity( ) ; // fd_set_count_type count( ) ; // <bug: unknown> fds( ) ; // int isSet( socket_t s ) ; // Return nonzero if this `Socket` is in the collection. int isSet( Socket s ) ; // uint max( ) ; // void remove( socket_t s ) ; // Remove this `Socket` from the collection. Does nothing if the socket is not in the collection already. void remove( Socket s ) ; // Reset the `SocketSet` so that there are 0 `Socket` s in the collection. void reset( ) ; // void resize( size_t size ) ; // int selectn( ) ; // <bug: unknown> toFd_set( ) ; // __enumMember FD_SET_OFFSET; // <bug: unknown> set; } About A collection of sockets for use with Socket.select . SocketSet wraps the platform fd_set type. However, unlike fd_set , SocketSet is not statically limited to FD_SETSIZE or any other limit, and grows as needed. Aliases Name Description fd_set_count_type fd_set_type Functions Name Description add capacity count fds isSet max remove reset Reset the SocketSet so that there are 0 Socket s in the collection. resize selectn toFd_set Variables Name Description FD_SET_OFFSET set"
  },
  "phobos/std/socket/Classes/TcpSocket.html": {
    "href": "phobos/std/socket/Classes/TcpSocket.html",
    "title": "Class - TcpSocket | Marmos Demo",
    "keywords": "Class - TcpSocket Module std.socket public class TcpSocket { } About Shortcut class for a TCP Socket."
  },
  "phobos/std/socket/Classes/UdpSocket.html": {
    "href": "phobos/std/socket/Classes/UdpSocket.html",
    "title": "Class - UdpSocket | Marmos Demo",
    "keywords": "Class - UdpSocket Module std.socket public class UdpSocket { } About Shortcut class for a UDP Socket."
  },
  "phobos/std/socket/Classes/UnixAddress.html": {
    "href": "phobos/std/socket/Classes/UnixAddress.html",
    "title": "Class - UnixAddress | Marmos Demo",
    "keywords": "Class - UnixAddress Module std.socket public class UnixAddress { // <bug: unknown> name( ) override; // <bug: unknown> name( ) override; // socklen_t nameLen( ) override; // Get the underlying path. string path( ) ; // ditto string toString( ) override; } About Encapsulates an address for a Unix domain socket (AF_UNIX), i.e. a socket bound to a path name in the file system. Available only on supported systems. Linux also supports an abstract address namespace, in which addresses are independent of the file system. A socket address is abstract iff path starts with a null byte ('\\0'). Null bytes in other positions of an abstract address are allowed and have no special meaning. Example --- auto addr = new UnixAddress(\"/var/run/dbus/system_bus_socket\"); auto abstractAddr = new UnixAddress(\"\\0/tmp/dbus-OtHLWmCLPR\"); --- See_Also: $(HTTP man7.org/linux/man-pages/man7/unix.7.html, UNIX(7)) Functions Name Description name nameLen path Get the underlying path. toString ditto"
  },
  "phobos/std/socket/Classes/UnknownAddress.html": {
    "href": "phobos/std/socket/Classes/UnknownAddress.html",
    "title": "Class - UnknownAddress | Marmos Demo",
    "keywords": "Class - UnknownAddress Module std.socket public class UnknownAddress { // <bug: unknown> name( ) override; // <bug: unknown> name( ) override; // socklen_t nameLen( ) override; // sockaddr sa; } About Encapsulates an unknown socket address. Functions Name Description name nameLen Variables Name Description sa"
  },
  "phobos/std/socket/Classes/UnknownAddressReference.html": {
    "href": "phobos/std/socket/Classes/UnknownAddressReference.html",
    "title": "Class - UnknownAddressReference | Marmos Demo",
    "keywords": "Class - UnknownAddressReference Module std.socket public class UnknownAddressReference { // <bug: unknown> name( ) override; // <bug: unknown> name( ) override; // socklen_t nameLen( ) override; // socklen_t len; // <bug: unknown> sa; } About Encapsulates a reference to an arbitrary socket address. Functions Name Description name nameLen Variables Name Description len sa"
  },
  "phobos/std/socket/Functions/formatGaiError.html": {
    "href": "phobos/std/socket/Functions/formatGaiError.html",
    "title": "Overloads for - formatGaiError | Marmos Demo",
    "keywords": "Overloads for - formatGaiError Module std.socket formatGaiError(err) string formatGaiError( int err ) On POSIX, getaddrinfo uses its own error codes, and thus has its own formatting function."
  },
  "phobos/std/socket/Functions/formatSocketError.html": {
    "href": "phobos/std/socket/Functions/formatSocketError.html",
    "title": "Overloads for - formatSocketError | Marmos Demo",
    "keywords": "Overloads for - formatSocketError Module std.socket formatSocketError(err) string formatSocketError( int err )"
  },
  "phobos/std/socket/Functions/getAddress.html": {
    "href": "phobos/std/socket/Functions/getAddress.html",
    "title": "Overloads for - getAddress | Marmos Demo",
    "keywords": "Overloads for - getAddress Module std.socket getAddress(hostname, service) <bug: unknown> getAddress( <bug: unknown> hostname, <bug: unknown> service ) Provides protocol-independent translation from host names to socket addresses. Uses getAddressInfo if the current system supports it, and InternetHost otherwise. Returns: Array with one Address instance per socket address. Throws: SocketOSException on failure. Example --- writeln(\"Resolving www.digitalmars.com:\"); try { auto addresses = getAddress(\"www.digitalmars.com\"); foreach (address; addresses) writefln(\" IP: %s\", address.toAddrString()); } catch (SocketException e) writefln(\" Lookup failed: %s\", e.msg); --- getAddress(hostname, port) <bug: unknown> getAddress( <bug: unknown> hostname, ushort port ) ditto"
  },
  "phobos/std/socket/Functions/getAddressInfo.html": {
    "href": "phobos/std/socket/Functions/getAddressInfo.html",
    "title": "Overloads for - getAddressInfo | Marmos Demo",
    "keywords": "Overloads for - getAddressInfo Module std.socket getAddressInfo(node, options) <bug: unknown> getAddressInfo( <bug: unknown> node, T options ) Provides protocol-independent translation from host names to socket addresses. If advanced functionality is not required, consider using getAddress for compatibility with older systems. Returns: Array with one AddressInfo per socket address. Throws: SocketOSException on failure, or SocketFeatureException if this functionality is not available on the current system. Params node <bug: unknown> string containing host name or numeric address options T optional additional parameters, identified by type: $(UL $(LI string - service name or port number) $(LI AddressInfoFlags - option flags) $(LI AddressFamily - address family to filter by) $(LI SocketType - socket type to filter by) $(LI ProtocolType - protocol to filter by)) Example --- // Roundtrip DNS resolution auto results = getAddressInfo(\"www.digitalmars.com\"); assert(results[0].address.toHostNameString() == \"digitalmars.com\"); // Canonical name results = getAddressInfo(\"www.digitalmars.com\", AddressInfoFlags.CANONNAME); assert(results[0].canonicalName == \"digitalmars.com\"); // IPv6 resolution results = getAddressInfo(\"ipv6.google.com\"); assert(results[0].family == AddressFamily.INET6); // Multihomed resolution results = getAddressInfo(\"google.com\"); assert(results.length > 1); // Parsing IPv4 results = getAddressInfo(\"127.0.0.1\", AddressInfoFlags.NUMERICHOST); assert(results.length && results[0].family == AddressFamily.INET); // Parsing IPv6 results = getAddressInfo(\"::1\", AddressInfoFlags.NUMERICHOST); assert(results.length && results[0].family == AddressFamily.INET6); ---"
  },
  "phobos/std/socket/Functions/getAddressInfoImpl.html": {
    "href": "phobos/std/socket/Functions/getAddressInfoImpl.html",
    "title": "Overloads for - getAddressInfoImpl | Marmos Demo",
    "keywords": "Overloads for - getAddressInfoImpl Module std.socket getAddressInfoImpl(node, service, hints) <bug: unknown> getAddressInfoImpl( <bug: unknown> node, <bug: unknown> service, <bug: unknown> hints )"
  },
  "phobos/std/socket/Functions/lastSocketError.html": {
    "href": "phobos/std/socket/Functions/lastSocketError.html",
    "title": "Overloads for - lastSocketError | Marmos Demo",
    "keywords": "Overloads for - lastSocketError Module std.socket lastSocketError() string lastSocketError( ) Returns the error message of the most recently encountered network error."
  },
  "phobos/std/socket/Functions/parseAddress.html": {
    "href": "phobos/std/socket/Functions/parseAddress.html",
    "title": "Overloads for - parseAddress | Marmos Demo",
    "keywords": "Overloads for - parseAddress Module std.socket parseAddress(hostaddr, service) Address parseAddress( <bug: unknown> hostaddr, <bug: unknown> service ) Provides protocol-independent parsing of network addresses. Does not attempt name resolution. Uses getAddressInfo with AddressInfoFlags.NUMERICHOST if the current system supports it, and InternetAddress otherwise. Returns: An Address instance representing specified address. Throws: SocketException on failure. Example --- writeln(\"Enter IP address:\"); string ip = readln().chomp(); try { Address address = parseAddress(ip); writefln(\"Looking up reverse of %s:\", address.toAddrString()); try { string reverse = address.toHostNameString(); if (reverse) writefln(\" Reverse name: %s\", reverse); else writeln(\" Reverse hostname not found.\"); } catch (SocketException e) writefln(\" Lookup error: %s\", e.msg); } catch (SocketException e) { writefln(\" %s is not a valid IP address: %s\", ip, e.msg); } --- parseAddress(hostaddr, port) Address parseAddress( <bug: unknown> hostaddr, ushort port ) ditto"
  },
  "phobos/std/socket/Functions/serviceToPort.html": {
    "href": "phobos/std/socket/Functions/serviceToPort.html",
    "title": "Overloads for - serviceToPort | Marmos Demo",
    "keywords": "Overloads for - serviceToPort Module std.socket serviceToPort(service) ushort serviceToPort( <bug: unknown> service )"
  },
  "phobos/std/socket/Functions/socketPair.html": {
    "href": "phobos/std/socket/Functions/socketPair.html",
    "title": "Overloads for - socketPair | Marmos Demo",
    "keywords": "Overloads for - socketPair Module std.socket socketPair() <bug: unknown> socketPair( ) Creates a pair of connected sockets. The two sockets are indistinguishable. Throws: SocketException if creation of the sockets fails."
  },
  "phobos/std/socket/Functions/softUnittest.html": {
    "href": "phobos/std/socket/Functions/softUnittest.html",
    "title": "Overloads for - softUnittest | Marmos Demo",
    "keywords": "Overloads for - softUnittest Module std.socket softUnittest(test, line) void softUnittest( <bug: unknown> test, int line )"
  },
  "phobos/std/socket/Functions/wouldHaveBlocked.html": {
    "href": "phobos/std/socket/Functions/wouldHaveBlocked.html",
    "title": "Overloads for - wouldHaveBlocked | Marmos Demo",
    "keywords": "Overloads for - wouldHaveBlocked Module std.socket wouldHaveBlocked() bool wouldHaveBlocked( ) Returns true if the last socket operation failed because the socket was in non-blocking mode and the operation would have blocked, or if the socket is in blocking mode and set a SNDTIMEO or RCVTIMEO , and the operation timed out."
  },
  "phobos/std/socket/Internet6Address/Functions/ADDR_ANY.html": {
    "href": "phobos/std/socket/Internet6Address/Functions/ADDR_ANY.html",
    "title": "Overloads for - ADDR_ANY | Marmos Demo",
    "keywords": "Overloads for - ADDR_ANY Module std.socket Parent Internet6Address ADDR_ANY() <bug: unknown> ADDR_ANY( ) static Any IPv6 host address."
  },
  "phobos/std/socket/Internet6Address/Functions/addr.html": {
    "href": "phobos/std/socket/Internet6Address/Functions/addr.html",
    "title": "Overloads for - addr | Marmos Demo",
    "keywords": "Overloads for - addr Module std.socket Parent Internet6Address addr() <bug: unknown> addr( ) Returns the IPv6 address."
  },
  "phobos/std/socket/Internet6Address/Functions/name.html": {
    "href": "phobos/std/socket/Internet6Address/Functions/name.html",
    "title": "Overloads for - name | Marmos Demo",
    "keywords": "Overloads for - name Module std.socket Parent Internet6Address name() <bug: unknown> name( ) override name() <bug: unknown> name( ) override"
  },
  "phobos/std/socket/Internet6Address/Functions/nameLen.html": {
    "href": "phobos/std/socket/Internet6Address/Functions/nameLen.html",
    "title": "Overloads for - nameLen | Marmos Demo",
    "keywords": "Overloads for - nameLen Module std.socket Parent Internet6Address nameLen() socklen_t nameLen( ) override"
  },
  "phobos/std/socket/Internet6Address/Functions/parse.html": {
    "href": "phobos/std/socket/Internet6Address/Functions/parse.html",
    "title": "Overloads for - parse | Marmos Demo",
    "keywords": "Overloads for - parse Module std.socket Parent Internet6Address parse(addr) <bug: unknown> parse( <bug: unknown> addr ) static Parse an IPv6 host address string as described in RFC 2373, and return the address. Throws: SocketException on error."
  },
  "phobos/std/socket/Internet6Address/Functions/port.html": {
    "href": "phobos/std/socket/Internet6Address/Functions/port.html",
    "title": "Overloads for - port | Marmos Demo",
    "keywords": "Overloads for - port Module std.socket Parent Internet6Address port() ushort port( ) Returns the IPv6 port number."
  },
  "phobos/std/socket/InternetAddress/Functions/addr.html": {
    "href": "phobos/std/socket/InternetAddress/Functions/addr.html",
    "title": "Overloads for - addr | Marmos Demo",
    "keywords": "Overloads for - addr Module std.socket Parent InternetAddress addr() uint addr( ) Returns the IPv4 address number (in host byte order)."
  },
  "phobos/std/socket/InternetAddress/Functions/addrToString.html": {
    "href": "phobos/std/socket/InternetAddress/Functions/addrToString.html",
    "title": "Overloads for - addrToString | Marmos Demo",
    "keywords": "Overloads for - addrToString Module std.socket Parent InternetAddress addrToString(addr) string addrToString( uint addr ) static Convert an IPv4 address number in host byte order to a human readable string representing the IPv4 address in dotted-decimal form."
  },
  "phobos/std/socket/InternetAddress/Functions/name.html": {
    "href": "phobos/std/socket/InternetAddress/Functions/name.html",
    "title": "Overloads for - name | Marmos Demo",
    "keywords": "Overloads for - name Module std.socket Parent InternetAddress name() <bug: unknown> name( ) override name() <bug: unknown> name( ) override"
  },
  "phobos/std/socket/InternetAddress/Functions/nameLen.html": {
    "href": "phobos/std/socket/InternetAddress/Functions/nameLen.html",
    "title": "Overloads for - nameLen | Marmos Demo",
    "keywords": "Overloads for - nameLen Module std.socket Parent InternetAddress nameLen() socklen_t nameLen( ) override"
  },
  "phobos/std/socket/InternetAddress/Functions/opEquals.html": {
    "href": "phobos/std/socket/InternetAddress/Functions/opEquals.html",
    "title": "Overloads for - opEquals | Marmos Demo",
    "keywords": "Overloads for - opEquals Module std.socket Parent InternetAddress opEquals(o) bool opEquals( Object o ) override Provides support for comparing equality with another InternetAddress of the same type. Returns: true if the InternetAddresses share the same address and port number."
  },
  "phobos/std/socket/InternetAddress/Functions/parse.html": {
    "href": "phobos/std/socket/InternetAddress/Functions/parse.html",
    "title": "Overloads for - parse | Marmos Demo",
    "keywords": "Overloads for - parse Module std.socket Parent InternetAddress parse(addr) uint parse( <bug: unknown> addr ) static Parse an IPv4 address string in the dotted-decimal form $(I a.b.c.d) and return the number. Returns: If the string is not a legitimate IPv4 address, ADDR_NONE is returned."
  },
  "phobos/std/socket/InternetAddress/Functions/port.html": {
    "href": "phobos/std/socket/InternetAddress/Functions/port.html",
    "title": "Overloads for - port | Marmos Demo",
    "keywords": "Overloads for - port Module std.socket Parent InternetAddress port() ushort port( ) Returns the IPv4 port number (in host byte order)."
  },
  "phobos/std/socket/InternetAddress/Functions/toAddrString.html": {
    "href": "phobos/std/socket/InternetAddress/Functions/toAddrString.html",
    "title": "Overloads for - toAddrString | Marmos Demo",
    "keywords": "Overloads for - toAddrString Module std.socket Parent InternetAddress toAddrString() string toAddrString( ) override Human readable string representing the IPv4 address in dotted-decimal form."
  },
  "phobos/std/socket/InternetAddress/Functions/toHostNameString.html": {
    "href": "phobos/std/socket/InternetAddress/Functions/toHostNameString.html",
    "title": "Overloads for - toHostNameString | Marmos Demo",
    "keywords": "Overloads for - toHostNameString Module std.socket Parent InternetAddress toHostNameString() string toHostNameString( ) override Attempts to retrieve the host name as a fully qualified domain name. Returns: The FQDN corresponding to this InternetAddress , or null if the host name did not resolve. Throws: AddressException on error."
  },
  "phobos/std/socket/InternetAddress/Functions/toPortString.html": {
    "href": "phobos/std/socket/InternetAddress/Functions/toPortString.html",
    "title": "Overloads for - toPortString | Marmos Demo",
    "keywords": "Overloads for - toPortString Module std.socket Parent InternetAddress toPortString() string toPortString( ) override Human readable string representing the IPv4 port."
  },
  "phobos/std/socket/InternetHost/Functions/getHostByAddr.html": {
    "href": "phobos/std/socket/InternetHost/Functions/getHostByAddr.html",
    "title": "Overloads for - getHostByAddr | Marmos Demo",
    "keywords": "Overloads for - getHostByAddr Module std.socket Parent InternetHost getHostByAddr(addr) bool getHostByAddr( uint addr ) Resolve IPv4 address number. Params addr uint The IPv4 address to resolve, in host byte order. Returns false if unable to resolve. getHostByAddr(addr) bool getHostByAddr( <bug: unknown> addr ) Same as previous, but addr is an IPv4 address string in the dotted-decimal form $(I a.b.c.d). Returns: false if unable to resolve."
  },
  "phobos/std/socket/InternetHost/Functions/getHostByName.html": {
    "href": "phobos/std/socket/InternetHost/Functions/getHostByName.html",
    "title": "Overloads for - getHostByName | Marmos Demo",
    "keywords": "Overloads for - getHostByName Module std.socket Parent InternetHost getHostByName(name) bool getHostByName( <bug: unknown> name ) Resolve host name. Returns: false if unable to resolve."
  },
  "phobos/std/socket/InternetHost/Functions/populate.html": {
    "href": "phobos/std/socket/InternetHost/Functions/populate.html",
    "title": "Overloads for - populate | Marmos Demo",
    "keywords": "Overloads for - populate Module std.socket Parent InternetHost populate(he) void populate( <bug: unknown> he )"
  },
  "phobos/std/socket/InternetHost/Functions/validHostent.html": {
    "href": "phobos/std/socket/InternetHost/Functions/validHostent.html",
    "title": "Overloads for - validHostent | Marmos Demo",
    "keywords": "Overloads for - validHostent Module std.socket Parent InternetHost validHostent(he) void validHostent( <bug: unknown> he )"
  },
  "phobos/std/socket/Linger/Functions/on.html": {
    "href": "phobos/std/socket/Linger/Functions/on.html",
    "title": "Overloads for - on | Marmos Demo",
    "keywords": "Overloads for - on Module std.socket Parent Linger on() l_onoff_t on( ) Nonzero for on."
  },
  "phobos/std/socket/Linger/Functions/time.html": {
    "href": "phobos/std/socket/Linger/Functions/time.html",
    "title": "Overloads for - time | Marmos Demo",
    "keywords": "Overloads for - time Module std.socket Parent Linger time() l_linger_t time( ) Linger time."
  },
  "phobos/std/socket/Overview.html": {
    "href": "phobos/std/socket/Overview.html",
    "title": "Module - std.socket | Marmos Demo",
    "keywords": "Module - std.socket About Socket primitives. Example: See $(SAMPLESRC listener.d) and $(SAMPLESRC htmlget.d) License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: Christopher E. Miller, $(HTTP klickverbot.at, David Nadlinger), $(HTTP thecybershadow.net, Vladimir Panteleev) Source: $(PHOBOSSRC std/socket.d) Aliases Name Description _clinger _ctimeval Classes Name Description Address Abstract class for representing a socket address. AddressException Class for exceptions thrown from an Address . HostException Class for exceptions thrown from an InternetHost . Internet6Address Encapsulates an IPv6 (Internet Protocol version 6) socket address. InternetAddress Encapsulates an IPv4 (Internet Protocol version 4) socket address. InternetHost Class for resolving IPv4 addresses. Protocol Class for retrieving protocol information. Service Class for retrieving service information. Socket Class that creates a network communication endpoint using the Berkeley sockets interface. SocketAcceptException Exception thrown by Socket.accept . SocketException Base exception thrown by std.socket . SocketFeatureException Socket exception representing attempts to use network capabilities not available on the current system. SocketOSException Socket exception representing network errors reported by the operating system. SocketParameterException Socket exception representing invalid parameters specified by user code. SocketSet A collection of sockets for use with Socket.select . TcpSocket Shortcut class for a TCP Socket. UdpSocket Shortcut class for a UDP Socket. UnixAddress Encapsulates an address for a Unix domain socket (AF_UNIX), i.e. a socket bound to a path name in the file system. Available only on supported systems. UnknownAddress Encapsulates an unknown socket address. UnknownAddressReference Encapsulates a reference to an arbitrary socket address. Structs Name Description AddressInfo Holds information about a socket address retrieved by getAddressInfo. Linger Linger information for use with SocketOption.LINGER. sockaddr_un TimeVal Duration timeout value. Functions Name Description formatGaiError On POSIX, getaddrinfo uses its own error codes, and thus has its own formatting function. formatSocketError getAddress Provides protocol-independent translation from host names to socket addresses. Uses getAddressInfo if the current system supports it, and InternetHost otherwise. getAddressInfo Provides protocol-independent translation from host names to socket addresses. If advanced functionality is not required, consider using getAddress for compatibility with older systems. getAddressInfoImpl lastSocketError Returns the error message of the most recently encountered network error. parseAddress Provides protocol-independent parsing of network addresses. Does not attempt name resolution. Uses getAddressInfo with AddressInfoFlags.NUMERICHOST if the current system supports it, and InternetAddress otherwise. serviceToPort socketPair Creates a pair of connected sockets. softUnittest wouldHaveBlocked Variables Name Description freeaddrinfoPointer getaddrinfoPointer getnameinfoPointer runSlowTests"
  },
  "phobos/std/socket/Protocol/Functions/getProtocolByName.html": {
    "href": "phobos/std/socket/Protocol/Functions/getProtocolByName.html",
    "title": "Overloads for - getProtocolByName | Marmos Demo",
    "keywords": "Overloads for - getProtocolByName Module std.socket Parent Protocol getProtocolByName(name) bool getProtocolByName( <bug: unknown> name ) Returns: false on failure"
  },
  "phobos/std/socket/Protocol/Functions/getProtocolByType.html": {
    "href": "phobos/std/socket/Protocol/Functions/getProtocolByType.html",
    "title": "Overloads for - getProtocolByType | Marmos Demo",
    "keywords": "Overloads for - getProtocolByType Module std.socket Parent Protocol getProtocolByType(type) bool getProtocolByType( ProtocolType type ) Returns: false on failure"
  },
  "phobos/std/socket/Protocol/Functions/populate.html": {
    "href": "phobos/std/socket/Protocol/Functions/populate.html",
    "title": "Overloads for - populate | Marmos Demo",
    "keywords": "Overloads for - populate Module std.socket Parent Protocol populate(proto) void populate( <bug: unknown> proto )"
  },
  "phobos/std/socket/Service/Functions/getServiceByName.html": {
    "href": "phobos/std/socket/Service/Functions/getServiceByName.html",
    "title": "Overloads for - getServiceByName | Marmos Demo",
    "keywords": "Overloads for - getServiceByName Module std.socket Parent Service getServiceByName(name, protocolName) bool getServiceByName( <bug: unknown> name, <bug: unknown> protocolName ) If a protocol name is omitted, any protocol will be matched. Returns: false on failure."
  },
  "phobos/std/socket/Service/Functions/getServiceByPort.html": {
    "href": "phobos/std/socket/Service/Functions/getServiceByPort.html",
    "title": "Overloads for - getServiceByPort | Marmos Demo",
    "keywords": "Overloads for - getServiceByPort Module std.socket Parent Service getServiceByPort(port, protocolName) bool getServiceByPort( ushort port, <bug: unknown> protocolName ) ditto"
  },
  "phobos/std/socket/Service/Functions/populate.html": {
    "href": "phobos/std/socket/Service/Functions/populate.html",
    "title": "Overloads for - populate | Marmos Demo",
    "keywords": "Overloads for - populate Module std.socket Parent Service populate(serv) void populate( <bug: unknown> serv )"
  },
  "phobos/std/socket/Socket/Functions/accept.html": {
    "href": "phobos/std/socket/Socket/Functions/accept.html",
    "title": "Overloads for - accept | Marmos Demo",
    "keywords": "Overloads for - accept Module std.socket Parent Socket accept() Socket accept( ) Accept an incoming connection. If the socket is blocking, accept waits for a connection request. Throws SocketAcceptException if unable to accept. See accepting for use with derived classes."
  },
  "phobos/std/socket/Socket/Functions/accepting.html": {
    "href": "phobos/std/socket/Socket/Functions/accepting.html",
    "title": "Overloads for - accepting | Marmos Demo",
    "keywords": "Overloads for - accepting Module std.socket Parent Socket accepting() Socket accepting( ) Called by accept when a new Socket must be created for a new connection. To use a derived class, override this method and return an instance of your class. The returned Socket 's handle must not be set; Socket has a protected constructor this() to use in this situation. Override to use a derived class. The returned socket's handle must not be set."
  },
  "phobos/std/socket/Socket/Functions/addressFamily.html": {
    "href": "phobos/std/socket/Socket/Functions/addressFamily.html",
    "title": "Overloads for - addressFamily | Marmos Demo",
    "keywords": "Overloads for - addressFamily Module std.socket Parent Socket addressFamily() AddressFamily addressFamily( ) Get the socket's address family."
  },
  "phobos/std/socket/Socket/Functions/bind.html": {
    "href": "phobos/std/socket/Socket/Functions/bind.html",
    "title": "Overloads for - bind | Marmos Demo",
    "keywords": "Overloads for - bind Module std.socket Parent Socket bind(addr) void bind( Address addr ) Associate a local address with this socket. Params addr Address The $(LREF Address) to associate this socket with. Throws: $(LREF SocketOSException) when unable to bind the socket."
  },
  "phobos/std/socket/Socket/Functions/blocking.html": {
    "href": "phobos/std/socket/Socket/Functions/blocking.html",
    "title": "Overloads for - blocking | Marmos Demo",
    "keywords": "Overloads for - blocking Module std.socket Parent Socket blocking() bool blocking( ) Get/set socket's blocking flag. When a socket is blocking, calls to receive(), accept(), and send() will block and wait for data/action. A non-blocking socket will immediately return instead of blocking. blocking(byes) void blocking( bool byes ) ditto"
  },
  "phobos/std/socket/Socket/Functions/capToInt.html": {
    "href": "phobos/std/socket/Socket/Functions/capToInt.html",
    "title": "Overloads for - capToInt | Marmos Demo",
    "keywords": "Overloads for - capToInt Module std.socket Parent Socket capToInt(size) int capToInt( size_t size ) static"
  },
  "phobos/std/socket/Socket/Functions/close.html": {
    "href": "phobos/std/socket/Socket/Functions/close.html",
    "title": "Overloads for - close | Marmos Demo",
    "keywords": "Overloads for - close Module std.socket Parent Socket close() void close( ) Immediately drop any connections and release socket resources. The Socket object is no longer usable after close . Calling shutdown before close is recommended for connection-oriented sockets."
  },
  "phobos/std/socket/Socket/Functions/connect.html": {
    "href": "phobos/std/socket/Socket/Functions/connect.html",
    "title": "Overloads for - connect | Marmos Demo",
    "keywords": "Overloads for - connect Module std.socket Parent Socket connect(to) void connect( Address to ) Establish a connection. If the socket is blocking, connect waits for the connection to be made. If the socket is nonblocking, connect returns immediately and the connection attempt is still in progress."
  },
  "phobos/std/socket/Socket/Functions/createAddress.html": {
    "href": "phobos/std/socket/Socket/Functions/createAddress.html",
    "title": "Overloads for - createAddress | Marmos Demo",
    "keywords": "Overloads for - createAddress Module std.socket Parent Socket createAddress() Address createAddress( ) Can be overridden to support other addresses. Returns: A new Address object for the current address family."
  },
  "phobos/std/socket/Socket/Functions/getErrorText.html": {
    "href": "phobos/std/socket/Socket/Functions/getErrorText.html",
    "title": "Overloads for - getErrorText | Marmos Demo",
    "keywords": "Overloads for - getErrorText Module std.socket Parent Socket getErrorText() string getErrorText( ) Get a text description of this socket's error status, and clear the socket's error status."
  },
  "phobos/std/socket/Socket/Functions/getOption.html": {
    "href": "phobos/std/socket/Socket/Functions/getOption.html",
    "title": "Overloads for - getOption | Marmos Demo",
    "keywords": "Overloads for - getOption Module std.socket Parent Socket getOption(level, option, result) int getOption( SocketOptionLevel level, SocketOption option, <bug: unknown> result ) Get a socket option. Returns: The number of bytes written to result . The length, in bytes, of the actual result - very different from getsockopt() getOption(level, option, result) int getOption( SocketOptionLevel level, SocketOption option, int32_t result ) Common case of getting integer and boolean options. getOption(level, option, result) int getOption( SocketOptionLevel level, SocketOption option, Linger result ) Get the linger option. getOption(level, option, result) void getOption( SocketOptionLevel level, SocketOption option, Duration result ) Get a timeout (duration) option."
  },
  "phobos/std/socket/Socket/Functions/handle.html": {
    "href": "phobos/std/socket/Socket/Functions/handle.html",
    "title": "Overloads for - handle | Marmos Demo",
    "keywords": "Overloads for - handle Module std.socket Parent Socket handle() socket_t handle( ) Get underlying socket handle."
  },
  "phobos/std/socket/Socket/Functions/hostName.html": {
    "href": "phobos/std/socket/Socket/Functions/hostName.html",
    "title": "Overloads for - hostName | Marmos Demo",
    "keywords": "Overloads for - hostName Module std.socket Parent Socket hostName() string hostName( ) static Returns: The local machine's host name"
  },
  "phobos/std/socket/Socket/Functions/isAlive.html": {
    "href": "phobos/std/socket/Socket/Functions/isAlive.html",
    "title": "Overloads for - isAlive | Marmos Demo",
    "keywords": "Overloads for - isAlive Module std.socket Parent Socket isAlive() bool isAlive( ) Property that indicates if this is a valid, alive socket."
  },
  "phobos/std/socket/Socket/Functions/listen.html": {
    "href": "phobos/std/socket/Socket/Functions/listen.html",
    "title": "Overloads for - listen | Marmos Demo",
    "keywords": "Overloads for - listen Module std.socket Parent Socket listen(backlog) void listen( int backlog ) Listen for an incoming connection. bind must be called before you can listen . The backlog is a request of how many pending incoming connections are queued until accept ed."
  },
  "phobos/std/socket/Socket/Functions/localAddress.html": {
    "href": "phobos/std/socket/Socket/Functions/localAddress.html",
    "title": "Overloads for - localAddress | Marmos Demo",
    "keywords": "Overloads for - localAddress Module std.socket Parent Socket localAddress() Address localAddress( ) Local endpoint Address ."
  },
  "phobos/std/socket/Socket/Functions/receive.html": {
    "href": "phobos/std/socket/Socket/Functions/receive.html",
    "title": "Overloads for - receive | Marmos Demo",
    "keywords": "Overloads for - receive Module std.socket Parent Socket receive(buf, flags) ptrdiff_t receive( <bug: unknown> buf, SocketFlags flags ) Receive data on the connection. If the socket is blocking, receive waits until there is data to be received. Returns: The number of bytes actually received, 0 if the remote side has closed the connection, or Socket.ERROR on failure. receive(buf) ptrdiff_t receive( <bug: unknown> buf ) ditto"
  },
  "phobos/std/socket/Socket/Functions/receiveFrom.html": {
    "href": "phobos/std/socket/Socket/Functions/receiveFrom.html",
    "title": "Overloads for - receiveFrom | Marmos Demo",
    "keywords": "Overloads for - receiveFrom Module std.socket Parent Socket receiveFrom(buf, flags, from) ptrdiff_t receiveFrom( <bug: unknown> buf, SocketFlags flags, Address from ) Receive data and get the remote endpoint Address . If the socket is blocking, receiveFrom waits until there is data to be received. Returns: The number of bytes actually received, 0 if the remote side has closed the connection, or Socket.ERROR on failure. receiveFrom(buf, from) ptrdiff_t receiveFrom( <bug: unknown> buf, Address from ) ditto receiveFrom(buf, flags) ptrdiff_t receiveFrom( <bug: unknown> buf, SocketFlags flags ) ditto receiveFrom(buf) ptrdiff_t receiveFrom( <bug: unknown> buf ) ditto"
  },
  "phobos/std/socket/Socket/Functions/release.html": {
    "href": "phobos/std/socket/Socket/Functions/release.html",
    "title": "Overloads for - release | Marmos Demo",
    "keywords": "Overloads for - release Module std.socket Parent Socket release() socket_t release( ) Releases the underlying socket handle from the Socket object. Once it is released, you cannot use the Socket object's methods anymore. This also means the Socket destructor will no longer close the socket - it becomes your responsibility. To get the handle without releasing it, use the handle property."
  },
  "phobos/std/socket/Socket/Functions/remoteAddress.html": {
    "href": "phobos/std/socket/Socket/Functions/remoteAddress.html",
    "title": "Overloads for - remoteAddress | Marmos Demo",
    "keywords": "Overloads for - remoteAddress Module std.socket Parent Socket remoteAddress() Address remoteAddress( ) Remote endpoint Address ."
  },
  "phobos/std/socket/Socket/Functions/select.html": {
    "href": "phobos/std/socket/Socket/Functions/select.html",
    "title": "Overloads for - select | Marmos Demo",
    "keywords": "Overloads for - select Module std.socket Parent Socket select(checkRead, checkWrite, checkError, timeout) int select( SocketSet checkRead, SocketSet checkWrite, SocketSet checkError, Duration timeout ) static Wait for a socket to change status. A wait timeout of $(REF Duration, core, time) or TimeVal , may be specified; if a timeout is not specified or the TimeVal is null , the maximum timeout is used. The TimeVal timeout has an unspecified value when select returns. Returns: The number of sockets with status changes, 0 on timeout, or -1 on interruption. If the return value is greater than 0 , the SocketSets are updated to only contain the sockets having status changes. For a connecting socket, a write status change means the connection is established and it's able to send. For a listening socket, a read status change means there is an incoming connection request and it's able to accept. SocketSet 's updated to include only those sockets which an event occured. For a connect() ing socket, writeability means connected. For a listen() ing socket, readability means listening Winsock ; possibly internally limited to 64 sockets per set. Returns the number of events, 0 on timeout, or -1 on interruption select(checkRead, checkWrite, checkError) int select( SocketSet checkRead, SocketSet checkWrite, SocketSet checkError ) static ditto select(checkRead, checkWrite, checkError, timeout) int select( SocketSet checkRead, SocketSet checkWrite, SocketSet checkError, <bug: unknown> timeout ) static Ditto"
  },
  "phobos/std/socket/Socket/Functions/send.html": {
    "href": "phobos/std/socket/Socket/Functions/send.html",
    "title": "Overloads for - send | Marmos Demo",
    "keywords": "Overloads for - send Module std.socket Parent Socket send(buf, flags) ptrdiff_t send( <bug: unknown> buf, SocketFlags flags ) Send data on the connection. If the socket is blocking and there is no buffer space left, send waits. Returns: The number of bytes actually sent, or Socket.ERROR on failure. send(buf) ptrdiff_t send( <bug: unknown> buf ) ditto"
  },
  "phobos/std/socket/Socket/Functions/sendTo.html": {
    "href": "phobos/std/socket/Socket/Functions/sendTo.html",
    "title": "Overloads for - sendTo | Marmos Demo",
    "keywords": "Overloads for - sendTo Module std.socket Parent Socket sendTo(buf, flags, to) ptrdiff_t sendTo( <bug: unknown> buf, SocketFlags flags, Address to ) Send data to a specific destination Address. If the destination address is not specified, a connection must have been made and that address is used. If the socket is blocking and there is no buffer space left, sendTo waits. Returns: The number of bytes actually sent, or Socket.ERROR on failure. sendTo(buf, to) ptrdiff_t sendTo( <bug: unknown> buf, Address to ) ditto sendTo(buf, flags) ptrdiff_t sendTo( <bug: unknown> buf, SocketFlags flags ) ditto sendTo(buf) ptrdiff_t sendTo( <bug: unknown> buf ) ditto"
  },
  "phobos/std/socket/Socket/Functions/setKeepAlive.html": {
    "href": "phobos/std/socket/Socket/Functions/setKeepAlive.html",
    "title": "Overloads for - setKeepAlive | Marmos Demo",
    "keywords": "Overloads for - setKeepAlive Module std.socket Parent Socket setKeepAlive(time, interval) void setKeepAlive( int time, int interval ) Enables TCP keep-alive with the specified parameters. Params time int Number of seconds with no activity until the first keep-alive packet is sent. interval int Number of seconds between when successive keep-alive packets are sent if no acknowledgement is received. Throws: SocketOSException if setting the options fails, or SocketFeatureException if setting keep-alive parameters is unsupported on the current platform."
  },
  "phobos/std/socket/Socket/Functions/setOption.html": {
    "href": "phobos/std/socket/Socket/Functions/setOption.html",
    "title": "Overloads for - setOption | Marmos Demo",
    "keywords": "Overloads for - setOption Module std.socket Parent Socket setOption(level, option, value) void setOption( SocketOptionLevel level, SocketOption option, <bug: unknown> value ) Set a socket option. setOption(level, option, value) void setOption( SocketOptionLevel level, SocketOption option, int32_t value ) Common case for setting integer and boolean options. setOption(level, option, value) void setOption( SocketOptionLevel level, SocketOption option, Linger value ) Set the linger option. setOption(level, option, value) void setOption( SocketOptionLevel level, SocketOption option, Duration value ) Sets a timeout (duration) option, i.e. SocketOption.SNDTIMEO or RCVTIMEO . Zero indicates no timeout. In a typical application, you might also want to consider using a non-blocking socket instead of setting a timeout on a blocking one. Note: While the receive timeout setting is generally quite accurate on nix systems even for smaller durations, there are two issues to be aware of on Windows: First, although undocumented, the effective timeout duration seems to be the one set on the socket plus half a second. setOption() tries to compensate for that, but still, timeouts under 500ms are not possible on Windows. Second, be aware that the actual amount of time spent until a blocking call returns randomly varies on the order of 10ms. Params level SocketOptionLevel The level at which a socket option is defined. option SocketOption Either SocketOption.SNDTIMEO or SocketOption.RCVTIMEO . value Duration The timeout duration to set. Must not be negative. Throws: SocketException if setting the options fails. Example --- import std.datetime; import std.typecons; auto pair = socketPair(); scope(exit) foreach (s; pair) s.close(); // Set a receive timeout, and then wait at one end of // the socket pair, knowing that no data will arrive. pair[0].setOption(SocketOptionLevel.SOCKET, SocketOption.RCVTIMEO, dur!\"seconds\"(1)); auto sw = StopWatch(Yes.autoStart); ubyte[1] buffer; pair[0].receive(buffer); writefln(\"Waited %s ms until the socket timed out.\", sw.peek.msecs); ---"
  },
  "phobos/std/socket/Socket/Functions/setSock.html": {
    "href": "phobos/std/socket/Socket/Functions/setSock.html",
    "title": "Overloads for - setSock | Marmos Demo",
    "keywords": "Overloads for - setSock Module std.socket Parent Socket setSock(handle) void setSock( socket_t handle )"
  },
  "phobos/std/socket/Socket/Functions/shutdown.html": {
    "href": "phobos/std/socket/Socket/Functions/shutdown.html",
    "title": "Overloads for - shutdown | Marmos Demo",
    "keywords": "Overloads for - shutdown Module std.socket Parent Socket shutdown(how) void shutdown( SocketShutdown how ) Disables sends and/or receives."
  },
  "phobos/std/socket/SocketSet/Functions/add.html": {
    "href": "phobos/std/socket/SocketSet/Functions/add.html",
    "title": "Overloads for - add | Marmos Demo",
    "keywords": "Overloads for - add Module std.socket Parent SocketSet add(s) void add( socket_t s ) add(s) void add( Socket s ) Add a Socket to the collection. The socket must not already be in the collection."
  },
  "phobos/std/socket/SocketSet/Functions/capacity.html": {
    "href": "phobos/std/socket/SocketSet/Functions/capacity.html",
    "title": "Overloads for - capacity | Marmos Demo",
    "keywords": "Overloads for - capacity Module std.socket Parent SocketSet capacity() size_t capacity( )"
  },
  "phobos/std/socket/SocketSet/Functions/count.html": {
    "href": "phobos/std/socket/SocketSet/Functions/count.html",
    "title": "Overloads for - count | Marmos Demo",
    "keywords": "Overloads for - count Module std.socket Parent SocketSet count() fd_set_count_type count( )"
  },
  "phobos/std/socket/SocketSet/Functions/fds.html": {
    "href": "phobos/std/socket/SocketSet/Functions/fds.html",
    "title": "Overloads for - fds | Marmos Demo",
    "keywords": "Overloads for - fds Module std.socket Parent SocketSet fds() <bug: unknown> fds( )"
  },
  "phobos/std/socket/SocketSet/Functions/isSet.html": {
    "href": "phobos/std/socket/SocketSet/Functions/isSet.html",
    "title": "Overloads for - isSet | Marmos Demo",
    "keywords": "Overloads for - isSet Module std.socket Parent SocketSet isSet(s) int isSet( socket_t s ) isSet(s) int isSet( Socket s ) Return nonzero if this Socket is in the collection."
  },
  "phobos/std/socket/SocketSet/Functions/max.html": {
    "href": "phobos/std/socket/SocketSet/Functions/max.html",
    "title": "Overloads for - max | Marmos Demo",
    "keywords": "Overloads for - max Module std.socket Parent SocketSet max() uint max( ) Returns The current capacity of this SocketSet . The exact meaning of the return value varies from platform to platform. Note Since D 2.065, this value does not indicate a restriction, and SocketSet will grow its capacity as needed automatically."
  },
  "phobos/std/socket/SocketSet/Functions/remove.html": {
    "href": "phobos/std/socket/SocketSet/Functions/remove.html",
    "title": "Overloads for - remove | Marmos Demo",
    "keywords": "Overloads for - remove Module std.socket Parent SocketSet remove(s) void remove( socket_t s ) remove(s) void remove( Socket s ) Remove this Socket from the collection. Does nothing if the socket is not in the collection already."
  },
  "phobos/std/socket/SocketSet/Functions/reset.html": {
    "href": "phobos/std/socket/SocketSet/Functions/reset.html",
    "title": "Overloads for - reset | Marmos Demo",
    "keywords": "Overloads for - reset Module std.socket Parent SocketSet reset() void reset( ) Reset the SocketSet so that there are 0 Socket s in the collection."
  },
  "phobos/std/socket/SocketSet/Functions/resize.html": {
    "href": "phobos/std/socket/SocketSet/Functions/resize.html",
    "title": "Overloads for - resize | Marmos Demo",
    "keywords": "Overloads for - resize Module std.socket Parent SocketSet resize(size) void resize( size_t size )"
  },
  "phobos/std/socket/SocketSet/Functions/selectn.html": {
    "href": "phobos/std/socket/SocketSet/Functions/selectn.html",
    "title": "Overloads for - selectn | Marmos Demo",
    "keywords": "Overloads for - selectn Module std.socket Parent SocketSet selectn() int selectn( )"
  },
  "phobos/std/socket/SocketSet/Functions/toFd_set.html": {
    "href": "phobos/std/socket/SocketSet/Functions/toFd_set.html",
    "title": "Overloads for - toFd_set | Marmos Demo",
    "keywords": "Overloads for - toFd_set Module std.socket Parent SocketSet toFd_set() <bug: unknown> toFd_set( )"
  },
  "phobos/std/socket/Structs/AddressInfo.html": {
    "href": "phobos/std/socket/Structs/AddressInfo.html",
    "title": "Struct - AddressInfo | Marmos Demo",
    "keywords": "Struct - AddressInfo Module std.socket public struct AddressInfo { // Socket address Address address; // Canonical name, when `AddressInfoFlags.CANONNAME` is used. string canonicalName; // Address family AddressFamily family; // Protocol ProtocolType protocol; // Socket type SocketType type; } About Holds information about a socket address retrieved by getAddressInfo. Variables Name Description address Socket address canonicalName Canonical name, when AddressInfoFlags.CANONNAME is used. family Address family protocol Protocol type Socket type"
  },
  "phobos/std/socket/Structs/Linger.html": {
    "href": "phobos/std/socket/Structs/Linger.html",
    "title": "Struct - Linger | Marmos Demo",
    "keywords": "Struct - Linger Module std.socket public struct Linger { // alias l_linger_t = <todo: marmos support pending>; // alias l_onoff_t = <todo: marmos support pending>; // Nonzero for on. l_onoff_t on( ) ; // Linger time. l_linger_t time( ) ; // _clinger clinger; } About Linger information for use with SocketOption.LINGER. Aliases Name Description l_linger_t l_onoff_t Functions Name Description on Nonzero for on. time Linger time. Variables Name Description clinger"
  },
  "phobos/std/socket/Structs/TimeVal.html": {
    "href": "phobos/std/socket/Structs/TimeVal.html",
    "title": "Struct - TimeVal | Marmos Demo",
    "keywords": "Struct - TimeVal Module std.socket public struct TimeVal { // alias tv_sec_t = <todo: marmos support pending>; // alias tv_usec_t = <todo: marmos support pending>; // Number of additional microseconds. tv_usec_t microseconds( ) ; // Number of seconds. tv_sec_t seconds( ) ; // _ctimeval ctimeval; } About Duration timeout value. Aliases Name Description tv_sec_t tv_usec_t Functions Name Description microseconds Number of additional microseconds. seconds Number of seconds. Variables Name Description ctimeval"
  },
  "phobos/std/socket/Structs/sockaddr_un.html": {
    "href": "phobos/std/socket/Structs/sockaddr_un.html",
    "title": "Struct - sockaddr_un | Marmos Demo",
    "keywords": "Struct - sockaddr_un Module std.socket public struct sockaddr_un { }"
  },
  "phobos/std/socket/TimeVal/Functions/microseconds.html": {
    "href": "phobos/std/socket/TimeVal/Functions/microseconds.html",
    "title": "Overloads for - microseconds | Marmos Demo",
    "keywords": "Overloads for - microseconds Module std.socket Parent TimeVal microseconds() tv_usec_t microseconds( ) Number of additional microseconds."
  },
  "phobos/std/socket/TimeVal/Functions/seconds.html": {
    "href": "phobos/std/socket/TimeVal/Functions/seconds.html",
    "title": "Overloads for - seconds | Marmos Demo",
    "keywords": "Overloads for - seconds Module std.socket Parent TimeVal seconds() tv_sec_t seconds( ) Number of seconds."
  },
  "phobos/std/socket/UnixAddress/Functions/name.html": {
    "href": "phobos/std/socket/UnixAddress/Functions/name.html",
    "title": "Overloads for - name | Marmos Demo",
    "keywords": "Overloads for - name Module std.socket Parent UnixAddress name() <bug: unknown> name( ) override name() <bug: unknown> name( ) override"
  },
  "phobos/std/socket/UnixAddress/Functions/nameLen.html": {
    "href": "phobos/std/socket/UnixAddress/Functions/nameLen.html",
    "title": "Overloads for - nameLen | Marmos Demo",
    "keywords": "Overloads for - nameLen Module std.socket Parent UnixAddress nameLen() socklen_t nameLen( ) override"
  },
  "phobos/std/socket/UnixAddress/Functions/path.html": {
    "href": "phobos/std/socket/UnixAddress/Functions/path.html",
    "title": "Overloads for - path | Marmos Demo",
    "keywords": "Overloads for - path Module std.socket Parent UnixAddress path() string path( ) Get the underlying path."
  },
  "phobos/std/socket/UnixAddress/Functions/toString.html": {
    "href": "phobos/std/socket/UnixAddress/Functions/toString.html",
    "title": "Overloads for - toString | Marmos Demo",
    "keywords": "Overloads for - toString Module std.socket Parent UnixAddress toString() string toString( ) override ditto"
  },
  "phobos/std/socket/UnknownAddress/Functions/name.html": {
    "href": "phobos/std/socket/UnknownAddress/Functions/name.html",
    "title": "Overloads for - name | Marmos Demo",
    "keywords": "Overloads for - name Module std.socket Parent UnknownAddress name() <bug: unknown> name( ) override name() <bug: unknown> name( ) override"
  },
  "phobos/std/socket/UnknownAddress/Functions/nameLen.html": {
    "href": "phobos/std/socket/UnknownAddress/Functions/nameLen.html",
    "title": "Overloads for - nameLen | Marmos Demo",
    "keywords": "Overloads for - nameLen Module std.socket Parent UnknownAddress nameLen() socklen_t nameLen( ) override"
  },
  "phobos/std/socket/UnknownAddressReference/Functions/name.html": {
    "href": "phobos/std/socket/UnknownAddressReference/Functions/name.html",
    "title": "Overloads for - name | Marmos Demo",
    "keywords": "Overloads for - name Module std.socket Parent UnknownAddressReference name() <bug: unknown> name( ) override name() <bug: unknown> name( ) override"
  },
  "phobos/std/socket/UnknownAddressReference/Functions/nameLen.html": {
    "href": "phobos/std/socket/UnknownAddressReference/Functions/nameLen.html",
    "title": "Overloads for - nameLen | Marmos Demo",
    "keywords": "Overloads for - nameLen Module std.socket Parent UnknownAddressReference nameLen() socklen_t nameLen( ) override"
  },
  "phobos/std/stdint/Overview.html": {
    "href": "phobos/std/stdint/Overview.html",
    "title": "Module - std.stdint | Marmos Demo",
    "keywords": "Module - std.stdint About D constrains integral types to specific sizes. But efficiency of different sizes varies from machine to machine, pointer sizes vary, and the maximum integer size varies. stdint offers a portable way of trading off size vs efficiency, in a manner compatible with the stdint.h definitions in C. In the table below, the $(B exact alias)es are types of exactly the specified number of bits. The $(B at least alias)es are at least the specified number of bits large, and can be larger. The $(B fast alias)es are the fastest integral type supported by the processor that is at least as wide as the specified number of bits. The aliases are $(ATABLE $(TR $(TH Exact Alias) $(TH Description) $(TH At Least Alias) $(TH Description) $(TH Fast Alias) \\((TH Description) )\\)(TR $(TD int8_t) $(TD exactly 8 bits signed) $(TD int_least8_t) $(TD at least 8 bits signed) $(TD int_fast8_t) \\((TD fast 8 bits signed) )\\)(TR $(TD uint8_t) $(TD exactly 8 bits unsigned) $(TD uint_least8_t) $(TD at least 8 bits unsigned) $(TD uint_fast8_t) $(TD fast 8 bits unsigned) )$(TR $(TD int16_t) $(TD exactly 16 bits signed) $(TD int_least16_t) $(TD at least 16 bits signed) $(TD int_fast16_t) \\((TD fast 16 bits signed) )\\)(TR $(TD uint16_t) $(TD exactly 16 bits unsigned) $(TD uint_least16_t) $(TD at least 16 bits unsigned) $(TD uint_fast16_t) $(TD fast 16 bits unsigned) )$(TR $(TD int32_t) $(TD exactly 32 bits signed) $(TD int_least32_t) $(TD at least 32 bits signed) $(TD int_fast32_t) \\((TD fast 32 bits signed) )\\)(TR $(TD uint32_t) $(TD exactly 32 bits unsigned) $(TD uint_least32_t) $(TD at least 32 bits unsigned) $(TD uint_fast32_t) $(TD fast 32 bits unsigned) )$(TR $(TD int64_t) $(TD exactly 64 bits signed) $(TD int_least64_t) $(TD at least 64 bits signed) $(TD int_fast64_t) \\((TD fast 64 bits signed) )\\)(TR $(TD uint64_t) $(TD exactly 64 bits unsigned) $(TD uint_least64_t) $(TD at least 64 bits unsigned) $(TD uint_fast64_t) $(TD fast 64 bits unsigned) )) The ptr aliases are integral types guaranteed to be large enough to hold a pointer without losing bits: $(ATABLE $(TR $(TH Alias) \\((TH Description) )\\)(TR $(TD intptr_t) \\((TD signed integral type large enough to hold a pointer) )\\)(TR $(TD uintptr_t) $(TD unsigned integral type large enough to hold a pointer) )) The max aliases are the largest integral types $(ATABLE $(TR $(TH Alias) \\((TH Description) )\\)(TR $(TD intmax_t) \\((TD the largest signed integral type) )\\)(TR $(TD uintmax_t) $(TD the largest unsigned integral type) )) Macros: ATABLE= $0 Copyright: Copyright The D Language Foundation 2000 - 2009. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP digitalmars.com, Walter Bright) Source: $(PHOBOSSRC std/stdint.d)"
  },
  "phobos/std/stdio/ByRecordImpl/Functions/empty.html": {
    "href": "phobos/std/stdio/ByRecordImpl/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.stdio Parent ByRecordImpl empty() bool empty( ) Range primitive implementations."
  },
  "phobos/std/stdio/ByRecordImpl/Functions/front.html": {
    "href": "phobos/std/stdio/ByRecordImpl/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.stdio Parent ByRecordImpl front() Tuple!(Fields) front( ) Ditto"
  },
  "phobos/std/stdio/ByRecordImpl/Functions/popFront.html": {
    "href": "phobos/std/stdio/ByRecordImpl/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.stdio Parent ByRecordImpl popFront() void popFront( ) Ditto"
  },
  "phobos/std/stdio/Classes/StdioException.html": {
    "href": "phobos/std/stdio/Classes/StdioException.html",
    "title": "Class - StdioException | Marmos Demo",
    "keywords": "Class - StdioException Module std.stdio public class StdioException { // Convenience functions that throw an `StdioException` . void opCall( string msg ) static; // ditto void opCall( ) static; // Operating system error code. uint errno; } About Thrown if I/O errors happen. Functions Name Description opCall Convenience functions that throw an StdioException . Variables Name Description errno Operating system error code."
  },
  "phobos/std/stdio/File/Functions/byChunk.html": {
    "href": "phobos/std/stdio/File/Functions/byChunk.html",
    "title": "Overloads for - byChunk | Marmos Demo",
    "keywords": "Overloads for - byChunk Module std.stdio Parent File byChunk(chunkSize) <bug: unknown> byChunk( size_t chunkSize ) auto Returns an $(REF_ALTTEXT input range, isInputRange, std,range,primitives) set up to read from the file handle a chunk at a time. The element type for the range will be ubyte[] . Range primitives may throw StdioException on I/O error. Example --------- void main() { // Read standard input 4KB at a time foreach (ubyte[] buffer; stdin.byChunk(4096)) { ... use buffer ... } } --------- The parameter may be a number (as shown in the example above) dictating the size of each chunk. Alternatively, byChunk accepts a user-provided buffer that it uses directly. Example --------- void main() { // Read standard input 4KB at a time foreach (ubyte[] buffer; stdin.byChunk(new ubyte[4096])) { ... use buffer ... } } --------- In either case, the content of the buffer is reused across calls. That means front will not persist after popFront is called, so if retention is needed, the caller must copy its contents (e.g. by calling buffer.dup ). In the example above, buffer.length is 4096 for all iterations, except for the last one, in which case buffer.length may be less than 4096 (but always greater than zero). With the mentioned limitations, byChunk works with any algorithm compatible with input ranges. Example --- // Efficient file copy, 1MB at a time. import std.algorithm, std.stdio; void main() { stdin.byChunk(1024 1024).copy(stdout.lockingTextWriter()); } --- $(REF joiner, std,algorithm,iteration) can be used to join chunks together into a single range lazily. Example: --- import std.algorithm, std.stdio; void main() { //Range of ranges static assert(is(typeof(stdin.byChunk(4096).front) == ubyte[])); //Range of elements static assert(is(typeof(stdin.byChunk(4096).joiner.front) == ubyte)); } --- Returns: A call to byChunk returns a range initialized with the File object and the appropriate buffer. Throws: If the user-provided size is zero or the user-provided buffer is empty, throws an Exception . In case of an I/O error throws StdioException . byChunk(buffer) <bug: unknown> byChunk( <bug: unknown> buffer ) auto Ditto"
  },
  "phobos/std/stdio/File/Functions/clearerr.html": {
    "href": "phobos/std/stdio/File/Functions/clearerr.html",
    "title": "Overloads for - clearerr | Marmos Demo",
    "keywords": "Overloads for - clearerr Module std.stdio Parent File clearerr() void clearerr( ) If the file is closed or not yet opened, succeeds vacuously. Otherwise, returns $(CSTDIO clearerr) for the file handle."
  },
  "phobos/std/stdio/File/Functions/close.html": {
    "href": "phobos/std/stdio/File/Functions/close.html",
    "title": "Overloads for - close | Marmos Demo",
    "keywords": "Overloads for - close Module std.stdio Parent File close() void close( ) If the file was closed or not yet opened, succeeds vacuously. Otherwise closes the file (by calling $(CSTDIO fclose)), throwing on error. Even if an exception is thrown, afterwards the $(D File) object is empty. This is different from detach in that it always closes the file; consequently, all other File objects referring to the same handle will see a closed file henceforth. Throws: ErrnoException on error."
  },
  "phobos/std/stdio/File/Functions/closeHandles.html": {
    "href": "phobos/std/stdio/File/Functions/closeHandles.html",
    "title": "Overloads for - closeHandles | Marmos Demo",
    "keywords": "Overloads for - closeHandles Module std.stdio Parent File closeHandles() void closeHandles( )"
  },
  "phobos/std/stdio/File/Functions/detach.html": {
    "href": "phobos/std/stdio/File/Functions/detach.html",
    "title": "Overloads for - detach | Marmos Demo",
    "keywords": "Overloads for - detach Module std.stdio Parent File detach() void detach( ) Detaches from the underlying file. If the sole owner, calls close . Throws: ErrnoException on failure if closing the file."
  },
  "phobos/std/stdio/File/Functions/eof.html": {
    "href": "phobos/std/stdio/File/Functions/eof.html",
    "title": "Overloads for - eof | Marmos Demo",
    "keywords": "Overloads for - eof Module std.stdio Parent File eof() bool eof( ) Returns true if the file is at end (see $(CSTDIO feof)). Throws: Exception if the file is not opened."
  },
  "phobos/std/stdio/File/Functions/error.html": {
    "href": "phobos/std/stdio/File/Functions/error.html",
    "title": "Overloads for - error | Marmos Demo",
    "keywords": "Overloads for - error Module std.stdio Parent File error() bool error( ) If the file is closed or not yet opened, returns true . Otherwise, returns $(CSTDIO ferror) for the file handle."
  },
  "phobos/std/stdio/File/Functions/fdopen.html": {
    "href": "phobos/std/stdio/File/Functions/fdopen.html",
    "title": "Overloads for - fdopen | Marmos Demo",
    "keywords": "Overloads for - fdopen Module std.stdio Parent File fdopen(fd, stdioOpenmode) void fdopen( int fd, <bug: unknown> stdioOpenmode ) First calls detach (throwing on failure), then attempts to associate the given file descriptor with the File , and sets the file's name to null . The mode must be compatible with the mode of the file descriptor. Throws: ErrnoException in case of error. Params: fd = File descriptor to associate with this File . stdioOpenmode = Mode to associate with this File. The mode has the same semantics semantics as in the C standard library $(CSTDIO fdopen) function, and must be compatible with fd . fdopen(fd, stdioOpenmode, name) void fdopen( int fd, <bug: unknown> stdioOpenmode, string name )"
  },
  "phobos/std/stdio/File/Functions/fileno.html": {
    "href": "phobos/std/stdio/File/Functions/fileno.html",
    "title": "Overloads for - fileno | Marmos Demo",
    "keywords": "Overloads for - fileno Module std.stdio Parent File fileno() fileno_t fileno( ) Returns the file number corresponding to this object."
  },
  "phobos/std/stdio/File/Functions/flush.html": {
    "href": "phobos/std/stdio/File/Functions/flush.html",
    "title": "Overloads for - flush | Marmos Demo",
    "keywords": "Overloads for - flush Module std.stdio Parent File flush() void flush( ) Flushes the C FILE buffers. Calls $(CSTDIO fflush) for the file handle. Throws: Exception if the file is not opened or if the call to fflush fails."
  },
  "phobos/std/stdio/File/Functions/getFP.html": {
    "href": "phobos/std/stdio/File/Functions/getFP.html",
    "title": "Overloads for - getFP | Marmos Demo",
    "keywords": "Overloads for - getFP Module std.stdio Parent File getFP() <bug: unknown> getFP( ) Returns the FILE* corresponding to this object."
  },
  "phobos/std/stdio/File/Functions/initImpl.html": {
    "href": "phobos/std/stdio/File/Functions/initImpl.html",
    "title": "Overloads for - initImpl | Marmos Demo",
    "keywords": "Overloads for - initImpl Module std.stdio Parent File initImpl(handle, name, refs, isPopened) void initImpl( <bug: unknown> handle, string name, uint refs, bool isPopened )"
  },
  "phobos/std/stdio/File/Functions/isOpen.html": {
    "href": "phobos/std/stdio/File/Functions/isOpen.html",
    "title": "Overloads for - isOpen | Marmos Demo",
    "keywords": "Overloads for - isOpen Module std.stdio Parent File isOpen() bool isOpen( ) Returns true if the file is opened."
  },
  "phobos/std/stdio/File/Functions/lock.html": {
    "href": "phobos/std/stdio/File/Functions/lock.html",
    "title": "Overloads for - lock | Marmos Demo",
    "keywords": "Overloads for - lock Module std.stdio Parent File lock(lockType, start, length) void lock( LockType lockType, ulong start, ulong length ) Locks the specified file segment. If the file segment is already locked by another process, waits until the existing lock is released. If both start and length are zero, the entire file is locked. Locks created using `lock` and `tryLock` have the following properties $(UL $(LI All locks are automatically released when the process terminates.) $(LI Locks are not inherited by child processes.) $(LI Closing a file will release all locks associated with the file. On POSIX, even locks acquired via a different File will be released as well.) $(LI Not all NFS implementations correctly implement file locking.) )"
  },
  "phobos/std/stdio/File/Functions/lockImpl.html": {
    "href": "phobos/std/stdio/File/Functions/lockImpl.html",
    "title": "Overloads for - lockImpl | Marmos Demo",
    "keywords": "Overloads for - lockImpl Module std.stdio Parent File lockImpl(operation, l_type, start, length) int lockImpl( int operation, short l_type, ulong start, ulong length )"
  },
  "phobos/std/stdio/File/Functions/lockingBinaryWriter.html": {
    "href": "phobos/std/stdio/File/Functions/lockingBinaryWriter.html",
    "title": "Overloads for - lockingBinaryWriter | Marmos Demo",
    "keywords": "Overloads for - lockingBinaryWriter Module std.stdio Parent File lockingBinaryWriter() <bug: unknown> lockingBinaryWriter( ) auto Returns an output range that locks the file and allows fast writing to it. Example: Produce a grayscale image of the $(LINK2 https://en.wikipedia.org/wiki/Mandelbrot_set, Mandelbrot set) in binary $(LINK2 https://en.wikipedia.org/wiki/Netpbm_format, Netpbm format) to standard output. --- import std.algorithm, std.complex, std.range, std.stdio; void main() { enum size = 500; writef(\"P5\\n%d %d %d\\n\", size, size, ubyte.max); iota(-1, 3, 2.0/size).map!(y => iota(-1.5, 0.5, 2.0/size).map!(x => cast(ubyte)(1+ recurrence!((a, n) => x + y complex(0, 1) + a[n-1]^^2)(complex(0)) .take(ubyte.max) .countUntil!(z => z.re^^2 + z.im^^2 > 4)) ) ) .copy(stdout.lockingBinaryWriter); } ---"
  },
  "phobos/std/stdio/File/Functions/lockingTextWriter.html": {
    "href": "phobos/std/stdio/File/Functions/lockingTextWriter.html",
    "title": "Overloads for - lockingTextWriter | Marmos Demo",
    "keywords": "Overloads for - lockingTextWriter Module std.stdio Parent File lockingTextWriter() <bug: unknown> lockingTextWriter( ) auto Output range which locks the file when created, and unlocks the file when it goes out of scope. Returns: An $(REF_ALTTEXT output range, isOutputRange, std, range, primitives) which accepts string types, ubyte[] , individual character types, and individual ubyte s. Note: Writing either arrays of char s or ubyte s is faster than writing each character individually from a range. For large amounts of data, writing the contents in chunks using an intermediary array can result in a speed increase. Throws: $(REF UTFException, std, utf) if the data given is a char range and it contains malformed UTF data. See_Also: $(LREF byChunk) for an example."
  },
  "phobos/std/stdio/File/Functions/name.html": {
    "href": "phobos/std/stdio/File/Functions/name.html",
    "title": "Overloads for - name | Marmos Demo",
    "keywords": "Overloads for - name Module std.stdio Parent File name() string name( ) Returns the name last used to initialize this File , if any. Some functions that create or initialize the File set the name field to null . Examples include $(LREF tmpfile), $(LREF wrapFile), and $(LREF fdopen). See the documentation of those functions for details. Returns: The name last used to initialize this this file, or null otherwise."
  },
  "phobos/std/stdio/File/Functions/opAssign.html": {
    "href": "phobos/std/stdio/File/Functions/opAssign.html",
    "title": "Overloads for - opAssign | Marmos Demo",
    "keywords": "Overloads for - opAssign Module std.stdio Parent File opAssign(rhs) File opAssign( File rhs ) Assigns a file to another. The target of the assignment gets detached from whatever file it was attached to, and attaches itself to the new file."
  },
  "phobos/std/stdio/File/Functions/open.html": {
    "href": "phobos/std/stdio/File/Functions/open.html",
    "title": "Overloads for - open | Marmos Demo",
    "keywords": "Overloads for - open Module std.stdio Parent File open(name, stdioOpenmode) void open( string name, <bug: unknown> stdioOpenmode ) Detaches from the current file (throwing on failure), and then attempts to open file name with mode stdioOpenmode. The mode has the same semantics as in the C standard library $(CSTDIO fopen) function. Throws: ErrnoException in case of error."
  },
  "phobos/std/stdio/File/Functions/popen.html": {
    "href": "phobos/std/stdio/File/Functions/popen.html",
    "title": "Overloads for - popen | Marmos Demo",
    "keywords": "Overloads for - popen Module std.stdio Parent File popen(command, stdioOpenmode) void popen( string command, <bug: unknown> stdioOpenmode ) Detaches from the current file (throwing on failure), and then runs a command by calling the C standard library function $(HTTP opengroup.org/onlinepubs/007908799/xsh/_popen.html, popen). Throws: ErrnoException in case of error."
  },
  "phobos/std/stdio/File/Functions/reopen.html": {
    "href": "phobos/std/stdio/File/Functions/reopen.html",
    "title": "Overloads for - reopen | Marmos Demo",
    "keywords": "Overloads for - reopen Module std.stdio Parent File reopen(name, stdioOpenmode) void reopen( string name, <bug: unknown> stdioOpenmode ) Reuses the File object to either open a different file, or change the file mode. If name is null , the mode of the currently open file is changed; otherwise, a new file is opened, reusing the C FILE* . The function has the same semantics as in the C standard library $(CSTDIO freopen) function. Note: Calling reopen with a null name is not implemented in all C runtimes. Throws: ErrnoException in case of error."
  },
  "phobos/std/stdio/File/Functions/resetFile.html": {
    "href": "phobos/std/stdio/File/Functions/resetFile.html",
    "title": "Overloads for - resetFile | Marmos Demo",
    "keywords": "Overloads for - resetFile Module std.stdio Parent File resetFile(name, stdioOpenmode, isPopened) void resetFile( string name, <bug: unknown> stdioOpenmode, bool isPopened )"
  },
  "phobos/std/stdio/File/Functions/rewind.html": {
    "href": "phobos/std/stdio/File/Functions/rewind.html",
    "title": "Overloads for - rewind | Marmos Demo",
    "keywords": "Overloads for - rewind Module std.stdio Parent File rewind() void rewind( ) Calls $(CSTDIO rewind) for the file handle. Throws: Exception if the file is not opened."
  },
  "phobos/std/stdio/File/Functions/seek.html": {
    "href": "phobos/std/stdio/File/Functions/seek.html",
    "title": "Overloads for - seek | Marmos Demo",
    "keywords": "Overloads for - seek Module std.stdio Parent File seek(offset, origin) void seek( long offset, int origin ) Calls $(CSTDIO fseek) for the file handle to move its position indicator. Params offset long Binary files: Number of bytes to offset from origin.$(BR) Text files: Either zero, or a value returned by $(LREF tell). origin int Binary files: Position used as reference for the offset, must be one of $(REF_ALTTEXT SEEK_SET, SEEK_SET, core,stdc,stdio), $(REF_ALTTEXT SEEK_CUR, SEEK_CUR, core,stdc,stdio) or \\((REF_ALTTEXT SEEK_END, SEEK_END, core,stdc,stdio).\\)(BR) Text files: Shall necessarily be $(REF_ALTTEXT SEEK_SET, SEEK_SET, core,stdc,stdio). Throws: Exception if the file is not opened. ErrnoException if the call to fseek fails."
  },
  "phobos/std/stdio/File/Functions/setAppendWin.html": {
    "href": "phobos/std/stdio/File/Functions/setAppendWin.html",
    "title": "Overloads for - setAppendWin | Marmos Demo",
    "keywords": "Overloads for - setAppendWin Module std.stdio Parent File setAppendWin(stdioOpenmode) void setAppendWin( <bug: unknown> stdioOpenmode )"
  },
  "phobos/std/stdio/File/Functions/setvbuf.html": {
    "href": "phobos/std/stdio/File/Functions/setvbuf.html",
    "title": "Overloads for - setvbuf | Marmos Demo",
    "keywords": "Overloads for - setvbuf Module std.stdio Parent File setvbuf(size, mode) void setvbuf( size_t size, int mode ) Calls $(CSTDIO setvbuf) for the file handle. Throws: Exception if the file is not opened. ErrnoException if the call to setvbuf fails. setvbuf(buf, mode) void setvbuf( <bug: unknown> buf, int mode ) Calls $(CSTDIO setvbuf) for the file handle. Throws: Exception if the file is not opened. ErrnoException if the call to setvbuf fails."
  },
  "phobos/std/stdio/File/Functions/size.html": {
    "href": "phobos/std/stdio/File/Functions/size.html",
    "title": "Overloads for - size | Marmos Demo",
    "keywords": "Overloads for - size Module std.stdio Parent File size() ulong size( ) Returns the size of the file in bytes, ulong.max if file is not searchable or throws if the operation fails. Example: --- import std.stdio, std.file; void main() { string deleteme = \"delete.me\"; auto file_handle = File(deleteme, \"w\"); file_handle.write(\"abc\"); //create temporary file scope(exit) deleteme.remove; //remove temporary file at scope exit assert(file_handle.size() == 3); //check if file size is 3 bytes } ---"
  },
  "phobos/std/stdio/File/Functions/sync.html": {
    "href": "phobos/std/stdio/File/Functions/sync.html",
    "title": "Overloads for - sync | Marmos Demo",
    "keywords": "Overloads for - sync Module std.stdio Parent File sync() void sync( ) Forces any data buffered by the OS to be written to disk. Call $(LREF flush) before calling this function to flush the C FILE buffers first. This function calls $(HTTP msdn.microsoft.com/en-us/library/windows/desktop/aa364439%28v=vs.85%29.aspx, FlushFileBuffers ) on Windows, $(HTTP developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/fcntl.2.html, F_FULLFSYNC fcntl ) on Darwin and $(HTTP pubs.opengroup.org/onlinepubs/7908799/xsh/fsync.html, fsync ) on POSIX for the file handle. Throws: Exception if the file is not opened or if the OS call fails."
  },
  "phobos/std/stdio/File/Functions/tell.html": {
    "href": "phobos/std/stdio/File/Functions/tell.html",
    "title": "Overloads for - tell | Marmos Demo",
    "keywords": "Overloads for - tell Module std.stdio Parent File tell() ulong tell( ) Calls $(CSTDIO ftell) for the managed file handle, which returns the current value of the position indicator of the file handle. Throws: Exception if the file is not opened. ErrnoException if the call to ftell fails."
  },
  "phobos/std/stdio/File/Functions/tmpfile.html": {
    "href": "phobos/std/stdio/File/Functions/tmpfile.html",
    "title": "Overloads for - tmpfile | Marmos Demo",
    "keywords": "Overloads for - tmpfile Module std.stdio Parent File tmpfile() File tmpfile( ) static Returns a temporary file by calling $(CSTDIO tmpfile). Note that the created file has no $(LREF name)."
  },
  "phobos/std/stdio/File/Functions/tryLock.html": {
    "href": "phobos/std/stdio/File/Functions/tryLock.html",
    "title": "Overloads for - tryLock | Marmos Demo",
    "keywords": "Overloads for - tryLock Module std.stdio Parent File tryLock(lockType, start, length) bool tryLock( LockType lockType, ulong start, ulong length ) Attempts to lock the specified file segment. If both start and length are zero, the entire file is locked. Returns: true if the lock was successful, and false if the specified file segment was already locked."
  },
  "phobos/std/stdio/File/Functions/unlock.html": {
    "href": "phobos/std/stdio/File/Functions/unlock.html",
    "title": "Overloads for - unlock | Marmos Demo",
    "keywords": "Overloads for - unlock Module std.stdio Parent File unlock(start, length) void unlock( ulong start, ulong length ) Removes the lock over the specified file segment."
  },
  "phobos/std/stdio/File/Functions/windowsHandle.html": {
    "href": "phobos/std/stdio/File/Functions/windowsHandle.html",
    "title": "Overloads for - windowsHandle | Marmos Demo",
    "keywords": "Overloads for - windowsHandle Module std.stdio Parent File windowsHandle() HANDLE windowsHandle( ) Returns the underlying operating system HANDLE (Windows only). windowsHandle() HANDLE windowsHandle( )"
  },
  "phobos/std/stdio/File/Functions/windowsHandleOpen.html": {
    "href": "phobos/std/stdio/File/Functions/windowsHandleOpen.html",
    "title": "Overloads for - windowsHandleOpen | Marmos Demo",
    "keywords": "Overloads for - windowsHandleOpen Module std.stdio Parent File windowsHandleOpen(handle, stdioOpenmode) void windowsHandleOpen( HANDLE handle, <bug: unknown> stdioOpenmode ) First calls detach (throwing on failure), and then attempts to associate the given Windows HANDLE with the File . The mode must be compatible with the access attributes of the handle. Windows only. Throws: ErrnoException in case of error. windowsHandleOpen(handle, stdioOpenmode) void windowsHandleOpen( HANDLE handle, <bug: unknown> stdioOpenmode )"
  },
  "phobos/std/stdio/File/Functions/wrapFile.html": {
    "href": "phobos/std/stdio/File/Functions/wrapFile.html",
    "title": "Overloads for - wrapFile | Marmos Demo",
    "keywords": "Overloads for - wrapFile Module std.stdio Parent File wrapFile(f) File wrapFile( <bug: unknown> f ) static Unsafe function that wraps an existing FILE* . The resulting $(D File) never takes the initiative in closing the file. Note that the created file has no $(LREF name)"
  },
  "phobos/std/stdio/Functions/byRecord.html": {
    "href": "phobos/std/stdio/Functions/byRecord.html",
    "title": "Overloads for - byRecord | Marmos Demo",
    "keywords": "Overloads for - byRecord Module std.stdio byRecord(f, format) <bug: unknown> byRecord( File f, string format ) auto"
  },
  "phobos/std/stdio/Functions/chunks.html": {
    "href": "phobos/std/stdio/Functions/chunks.html",
    "title": "Overloads for - chunks | Marmos Demo",
    "keywords": "Overloads for - chunks Module std.stdio chunks(f, size) <bug: unknown> chunks( File f, size_t size ) auto Iterates through a file a chunk at a time by using foreach . Example --------- void main() { foreach (ubyte[] buffer; chunks(stdin, 4096)) { ... use buffer ... } } --------- The content of buffer is reused across calls. In the example above, buffer.length is 4096 for all iterations, except for the last one, in which case buffer.length may be less than 4096 (but always greater than zero). In case of an I/O error, an StdioException is thrown."
  },
  "phobos/std/stdio/Functions/makeGlobal.html": {
    "href": "phobos/std/stdio/Functions/makeGlobal.html",
    "title": "Overloads for - makeGlobal | Marmos Demo",
    "keywords": "Overloads for - makeGlobal Module std.stdio makeGlobal() File makeGlobal( )"
  },
  "phobos/std/stdio/Functions/openNetwork.html": {
    "href": "phobos/std/stdio/Functions/openNetwork.html",
    "title": "Overloads for - openNetwork | Marmos Demo",
    "keywords": "Overloads for - openNetwork Module std.stdio openNetwork(host, port) File openNetwork( string host, ushort port ) Experimental network access via the File interface Opens a TCP connection to the given host and port, then returns a File struct with read and write access through the same interface as any other file (meaning writef and the byLine ranges work!). Authors: Adam D. Ruppe Bugs: Only works on Linux"
  },
  "phobos/std/stdio/Functions/readf.html": {
    "href": "phobos/std/stdio/Functions/readf.html",
    "title": "Overloads for - readf | Marmos Demo",
    "keywords": "Overloads for - readf Module std.stdio readf(args) uint readf( A args ) Reads formatted data from stdin using $(REF formattedRead, std,format). Params: format = The $(REF_ALTTEXT format string, formattedWrite, std, format). When passed as a compile-time argument, the string will be statically checked against the argument types passed. args = Items to be read. Returns: Same as formattedRead : The number of variables filled. If the input range r ends early, this number will be less than the number of variables provided. Example: ---- // test.d void main() { import std.stdio; foreach (; 0 .. 3) { int a; readf!\" %d\"(a); writeln(++a); } } ---- $(CONSOLE % echo \"1 2 3\" | rdmd test.d 2 3 4 ) readf(format, args) uint readf( <bug: unknown> format, A args ) ditto"
  },
  "phobos/std/stdio/Functions/readln.html": {
    "href": "phobos/std/stdio/Functions/readln.html",
    "title": "Overloads for - readln | Marmos Demo",
    "keywords": "Overloads for - readln Module std.stdio readln(terminator) S readln( dchar terminator ) Read line from stdin . This version manages its own read buffer, which means one memory allocation per call. If you are not retaining a reference to the read data, consider the readln(buf) version, which may offer better performance as it can reuse its read buffer. Returns The line that was read, including the line terminator character. Params: S = Template parameter; the type of the allocated buffer, and the type returned. Defaults to string . terminator = Line terminator (by default, '\\n' ). Note: String terminators are not supported due to ambiguity with readln(buf) below. Throws: StdioException on I/O error, or UnicodeException on Unicode conversion error. Example: Reads stdin and writes it to stdout . --- import std.stdio; void main() { string line; while ((line = readln()) !is null) write(line); } --- readln(buf, terminator) size_t readln( <bug: unknown> buf, dchar terminator ) Read line from stdin and write it to buf[], including terminating character. This can be faster than $(D line = readln()) because you can reuse the buffer for each call. Note that reusing the buffer means that you must copy the previous contents if you wish to retain them. Returns size_t 0 for end of file, otherwise number of characters read Params: buf = Buffer used to store the resulting line data. buf is resized as necessary. terminator = Line terminator (by default, '\\n' ). Use $(REF newline, std,ascii) for portability (unless the file was opened in text mode). Throws: StdioException on I/O error, or UnicodeException on Unicode conversion error. Example: Reads stdin and writes it to stdout . --- import std.stdio; void main() { char[] buf; while (readln(buf)) write(buf); } --- readln(buf, terminator) size_t readln( <bug: unknown> buf, R terminator ) ditto"
  },
  "phobos/std/stdio/Functions/readlnImpl.html": {
    "href": "phobos/std/stdio/Functions/readlnImpl.html",
    "title": "Overloads for - readlnImpl | Marmos Demo",
    "keywords": "Overloads for - readlnImpl Module std.stdio readlnImpl(fps, buf, terminator, orientation) size_t readlnImpl( <bug: unknown> fps, <bug: unknown> buf, dchar terminator, File orientation )"
  },
  "phobos/std/stdio/Functions/testFilename.html": {
    "href": "phobos/std/stdio/Functions/testFilename.html",
    "title": "Overloads for - testFilename | Marmos Demo",
    "keywords": "Overloads for - testFilename Module std.stdio testFilename(file, line) string testFilename( string file, size_t line )"
  },
  "phobos/std/stdio/Functions/toFile.html": {
    "href": "phobos/std/stdio/Functions/toFile.html",
    "title": "Overloads for - toFile | Marmos Demo",
    "keywords": "Overloads for - toFile Module std.stdio toFile(data, fileName) void toFile( T data, string fileName ) Writes an array or range to a file. Shorthand for $(D data.copy(File(fileName, \"wb\").lockingBinaryWriter)). Similar to $(REF write, std,file), strings are written as-is, rather than encoded according to the File 's $(HTTP en.cppreference.com/w/c/io#Narrow_and_wide_orientation, orientation)."
  },
  "phobos/std/stdio/Functions/trustedFPUTC.html": {
    "href": "phobos/std/stdio/Functions/trustedFPUTC.html",
    "title": "Overloads for - trustedFPUTC | Marmos Demo",
    "keywords": "Overloads for - trustedFPUTC Module std.stdio trustedFPUTC(ch, h) int trustedFPUTC( int ch, <bug: unknown> h )"
  },
  "phobos/std/stdio/Functions/trustedFPUTWC.html": {
    "href": "phobos/std/stdio/Functions/trustedFPUTWC.html",
    "title": "Overloads for - trustedFPUTWC | Marmos Demo",
    "keywords": "Overloads for - trustedFPUTWC Module std.stdio trustedFPUTWC(ch, h) int trustedFPUTWC( wchar_t ch, <bug: unknown> h )"
  },
  "phobos/std/stdio/Functions/trustedFread.html": {
    "href": "phobos/std/stdio/Functions/trustedFread.html",
    "title": "Overloads for - trustedFread | Marmos Demo",
    "keywords": "Overloads for - trustedFread Module std.stdio trustedFread(f, obj) <bug: unknown> trustedFread( <bug: unknown> f, <bug: unknown> obj ) auto"
  },
  "phobos/std/stdio/Functions/trustedFwrite.html": {
    "href": "phobos/std/stdio/Functions/trustedFwrite.html",
    "title": "Overloads for - trustedFwrite | Marmos Demo",
    "keywords": "Overloads for - trustedFwrite Module std.stdio trustedFwrite(f, obj) <bug: unknown> trustedFwrite( <bug: unknown> f, <bug: unknown> obj ) auto"
  },
  "phobos/std/stdio/Functions/trustedStdout.html": {
    "href": "phobos/std/stdio/Functions/trustedStdout.html",
    "title": "Overloads for - trustedStdout | Marmos Demo",
    "keywords": "Overloads for - trustedStdout Module std.stdio trustedStdout() File trustedStdout( ) Property used by writeln/etc. so it can infer @safe since stdout is gshared"
  },
  "phobos/std/stdio/Functions/write.html": {
    "href": "phobos/std/stdio/Functions/write.html",
    "title": "Overloads for - write | Marmos Demo",
    "keywords": "Overloads for - write Module std.stdio write(args) void write( T args ) Writes its arguments in text format to standard output (without a trailing newline). Params args T the items to write to stdout Throws: In case of an I/O error, throws an StdioException . Example Reads stdin and writes it to stdout with an argument counter. --- import std.stdio; void main() { string line; for (size_t count = 0; (line = readln) !is null; count++) { write(\"Input \", count, \": \", line, \"\\n\"); } } ---"
  },
  "phobos/std/stdio/Functions/writef.html": {
    "href": "phobos/std/stdio/Functions/writef.html",
    "title": "Overloads for - writef | Marmos Demo",
    "keywords": "Overloads for - writef Module std.stdio writef(args) void writef( A args ) Writes formatted data to standard output (without a trailing newline). Params fmt <parameter not found> The $(REF_ALTTEXT format string, formattedWrite, std, format). When passed as a compile-time argument, the string will be statically checked against the argument types passed. args = Items to write. Note: In older versions of Phobos, it used to be possible to write ------ writef(stderr, \"%s\", \"message\"); ------ to print a message to stderr . This syntax is no longer supported, and has been superceded by: ------ stderr.writef(\"%s\", \"message\"); ------ writef(fmt, args) void writef( <bug: unknown> fmt, A args ) ditto"
  },
  "phobos/std/stdio/Functions/writefln.html": {
    "href": "phobos/std/stdio/Functions/writefln.html",
    "title": "Overloads for - writefln | Marmos Demo",
    "keywords": "Overloads for - writefln Module std.stdio writefln(args) void writefln( A args ) Equivalent to $(D writef(fmt, args, '\\n')). writefln(fmt, args) void writefln( <bug: unknown> fmt, A args ) ditto"
  },
  "phobos/std/stdio/Functions/writeln.html": {
    "href": "phobos/std/stdio/Functions/writeln.html",
    "title": "Overloads for - writeln | Marmos Demo",
    "keywords": "Overloads for - writeln Module std.stdio writeln(args) void writeln( T args ) Equivalent to write(args, '\\n') . Calling writeln without arguments is valid and just prints a newline to the standard output. Params args T the items to write to stdout Throws In case of an I/O error, throws an $(LREF StdioException). Example: Reads stdin and writes it to stdout with an argument counter. --- import std.stdio; void main() { string line; for (size_t count = 0; (line = readln) !is null; count++) { writeln(\"Input \", count, \": \", line); } } ---"
  },
  "phobos/std/stdio/LockedFile/Functions/fgetc.html": {
    "href": "phobos/std/stdio/LockedFile/Functions/fgetc.html",
    "title": "Overloads for - fgetc | Marmos Demo",
    "keywords": "Overloads for - fgetc Module std.stdio Parent LockedFile fgetc() <bug: unknown> fgetc( )"
  },
  "phobos/std/stdio/LockedFile/Functions/fgetwc.html": {
    "href": "phobos/std/stdio/LockedFile/Functions/fgetwc.html",
    "title": "Overloads for - fgetwc | Marmos Demo",
    "keywords": "Overloads for - fgetwc Module std.stdio Parent LockedFile fgetwc() <bug: unknown> fgetwc( )"
  },
  "phobos/std/stdio/LockedFile/Functions/opAssign.html": {
    "href": "phobos/std/stdio/LockedFile/Functions/opAssign.html",
    "title": "Overloads for - opAssign | Marmos Demo",
    "keywords": "Overloads for - opAssign Module std.stdio Parent LockedFile opAssign(__anonymous) void opAssign( LockedFile __anonymous ) @disable"
  },
  "phobos/std/stdio/LockingTextReader/Functions/empty.html": {
    "href": "phobos/std/stdio/LockingTextReader/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.stdio Parent LockingTextReader empty() bool empty( )"
  },
  "phobos/std/stdio/LockingTextReader/Functions/front.html": {
    "href": "phobos/std/stdio/LockingTextReader/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.stdio Parent LockingTextReader front() char front( )"
  },
  "phobos/std/stdio/LockingTextReader/Functions/opAssign.html": {
    "href": "phobos/std/stdio/LockingTextReader/Functions/opAssign.html",
    "title": "Overloads for - opAssign | Marmos Demo",
    "keywords": "Overloads for - opAssign Module std.stdio Parent LockingTextReader opAssign(r) void opAssign( LockingTextReader r )"
  },
  "phobos/std/stdio/LockingTextReader/Functions/popFront.html": {
    "href": "phobos/std/stdio/LockingTextReader/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.stdio Parent LockingTextReader popFront() void popFront( )"
  },
  "phobos/std/stdio/Overview.html": {
    "href": "phobos/std/stdio/Overview.html",
    "title": "Module - std.stdio | Marmos Demo",
    "keywords": "Module - std.stdio About $(SCRIPT inhibitQuickIndex = 1;) $(DIVC quickindex, $(BOOKTABLE, $(TR $(TH Category) $(TH Symbols)) $(TR $(TD File handles) $(TD $(MYREF popen) $(MYREF File) $(MYREF isFileHandle) $(MYREF openNetwork) $(MYREF stderr) $(MYREF stdin) $(MYREF stdout) )) $(TR $(TD Reading) $(TD $(MYREF chunks) $(MYREF lines) $(MYREF readf) $(MYREF readln) )) $(TR $(TD Writing) $(TD $(MYREF toFile) $(MYREF write) $(MYREF writef) $(MYREF writefln) $(MYREF writeln) )) $(TR $(TD Misc) $(TD $(MYREF KeepTerminator) $(MYREF LockType) $(MYREF StdioException) )) )) Standard I/O functions that extend $(LINK2 https://dlang.org/phobos/core_stdc_stdio.html, core.stdc.stdio). $(B core.stdc.stdio) is $(D_PARAM public)ally imported when importing $(B std.stdio). There are three layers of I/O $(OL $(LI The lowest layer is the operating system layer. The two main schemes are Windows and Posix.) $(LI C's $(TT stdio.h) which unifies the two operating system schemes.) $(LI $(TT std.stdio), this module, unifies the various $(TT stdio.h) implementations into a high level package for D programs.) ) Source: $(PHOBOSSRC std/stdio.d) Copyright: Copyright The D Language Foundation 2007-. License: $(HTTP boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP digitalmars.com, Walter Bright), \\((HTTP erdani.org, Andrei Alexandrescu), Alex Rønne Petersen Macros: CSTDIO=\\)(HTTP cplusplus.com/reference/cstdio/$1/, $1) Aliases Name Description _FGETC _FGETWC _FLOCK _FPUTC _FPUTWC _FUNLOCK FGETC FGETWC fileno_t FLOCK FPUTC FPUTWC FSChar FUNLOCK KeepTerminator If flag KeepTerminator is set to KeepTerminator.yes , then the delimiter is included in the strings returned. stderr The standard error stream. stdin The standard input stream. stdout The standard output stream. Classes Name Description StdioException Thrown if I/O errors happen. Structs Name Description ByRecordImpl ChunksImpl File Encapsulates a FILE* . Generally D does not attempt to provide thin wrappers over equivalent functions in the C standard library, but manipulating FILE* values directly is unsafe and error-prone in many ways. The File type ensures safe manipulation, automatic file closing, and a lot of convenience. lines Iterates through the lines of a file by using foreach . LockedFile LockingTextReader ReadlnAppender Functions Name Description byRecord chunks Iterates through a file a chunk at a time by using foreach . makeGlobal openNetwork Experimental network access via the File interface readf Reads formatted data from stdin using $(REF formattedRead, std,format). Params: format = The $(REF_ALTTEXT format string, formattedWrite, std, format). When passed as a compile-time argument, the string will be statically checked against the argument types passed. args = Items to be read. Returns: Same as formattedRead : The number of variables filled. If the input range r ends early, this number will be less than the number of variables provided. Example: ---- // test.d void main() { import std.stdio; foreach (; 0 .. 3) { int a; readf!\" %d\"(a); writeln(++a); } } ---- $(CONSOLE % echo \"1 2 3\" | rdmd test.d 2 3 4 ) readln Read line from stdin . readlnImpl testFilename toFile Writes an array or range to a file. Shorthand for $(D data.copy(File(fileName, \"wb\").lockingBinaryWriter)). Similar to $(REF write, std,file), strings are written as-is, rather than encoded according to the File 's $(HTTP en.cppreference.com/w/c/io#Narrow_and_wide_orientation, orientation). trustedFPUTC trustedFPUTWC trustedFread trustedFwrite trustedStdout Property used by writeln/etc. so it can infer @safe since stdout is gshared write Writes its arguments in text format to standard output (without a trailing newline). writef Writes formatted data to standard output (without a trailing newline). writefln Equivalent to $(D writef(fmt, args, '\\n')). writeln Equivalent to write(args, '\\n') . Calling writeln without arguments is valid and just prints a newline to the standard output. Variables Name Description isFileHandle Indicates whether T is a file handle, i.e. the type is implicitly convertable to $(LREF File) or a pointer to a $(REF FILE, core,stdc,stdio)."
  },
  "phobos/std/stdio/ReadlnAppender/Functions/data.html": {
    "href": "phobos/std/stdio/ReadlnAppender/Functions/data.html",
    "title": "Overloads for - data | Marmos Demo",
    "keywords": "Overloads for - data Module std.stdio Parent ReadlnAppender data() <bug: unknown> data( )"
  },
  "phobos/std/stdio/ReadlnAppender/Functions/initialize.html": {
    "href": "phobos/std/stdio/ReadlnAppender/Functions/initialize.html",
    "title": "Overloads for - initialize | Marmos Demo",
    "keywords": "Overloads for - initialize Module std.stdio Parent ReadlnAppender initialize(b) void initialize( <bug: unknown> b )"
  },
  "phobos/std/stdio/ReadlnAppender/Functions/putchar.html": {
    "href": "phobos/std/stdio/ReadlnAppender/Functions/putchar.html",
    "title": "Overloads for - putchar | Marmos Demo",
    "keywords": "Overloads for - putchar Module std.stdio Parent ReadlnAppender putchar(c) void putchar( char c )"
  },
  "phobos/std/stdio/ReadlnAppender/Functions/putdchar.html": {
    "href": "phobos/std/stdio/ReadlnAppender/Functions/putdchar.html",
    "title": "Overloads for - putdchar | Marmos Demo",
    "keywords": "Overloads for - putdchar Module std.stdio Parent ReadlnAppender putdchar(dc) void putdchar( dchar dc )"
  },
  "phobos/std/stdio/ReadlnAppender/Functions/putonly.html": {
    "href": "phobos/std/stdio/ReadlnAppender/Functions/putonly.html",
    "title": "Overloads for - putonly | Marmos Demo",
    "keywords": "Overloads for - putonly Module std.stdio Parent ReadlnAppender putonly(b) void putonly( <bug: unknown> b )"
  },
  "phobos/std/stdio/ReadlnAppender/Functions/reserve.html": {
    "href": "phobos/std/stdio/ReadlnAppender/Functions/reserve.html",
    "title": "Overloads for - reserve | Marmos Demo",
    "keywords": "Overloads for - reserve Module std.stdio Parent ReadlnAppender reserve(n) void reserve( size_t n )"
  },
  "phobos/std/stdio/ReadlnAppender/Functions/reserveWithoutAllocating.html": {
    "href": "phobos/std/stdio/ReadlnAppender/Functions/reserveWithoutAllocating.html",
    "title": "Overloads for - reserveWithoutAllocating | Marmos Demo",
    "keywords": "Overloads for - reserveWithoutAllocating Module std.stdio Parent ReadlnAppender reserveWithoutAllocating(n) bool reserveWithoutAllocating( size_t n )"
  },
  "phobos/std/stdio/StdioException/Functions/opCall.html": {
    "href": "phobos/std/stdio/StdioException/Functions/opCall.html",
    "title": "Overloads for - opCall | Marmos Demo",
    "keywords": "Overloads for - opCall Module std.stdio Parent StdioException opCall(msg) void opCall( string msg ) static Convenience functions that throw an StdioException . opCall() void opCall( ) static ditto"
  },
  "phobos/std/stdio/Structs/ByRecordImpl.html": {
    "href": "phobos/std/stdio/Structs/ByRecordImpl.html",
    "title": "Struct - ByRecordImpl | Marmos Demo",
    "keywords": "Struct - ByRecordImpl Module std.stdio public struct ByRecordImpl { // Range primitive implementations. bool empty( ) ; // Ditto Tuple!(Fields) front( ) ; // Ditto void popFront( ) ; // Tuple!(Fields) current; // File file; // string format; // <bug: unknown> line; } Functions Name Description empty Range primitive implementations. front Ditto popFront Ditto Variables Name Description current file format line"
  },
  "phobos/std/stdio/Structs/ChunksImpl.html": {
    "href": "phobos/std/stdio/Structs/ChunksImpl.html",
    "title": "Struct - ChunksImpl | Marmos Demo",
    "keywords": "Struct - ChunksImpl Module std.stdio public struct ChunksImpl { // File f; // size_t size; } Variables Name Description f size"
  },
  "phobos/std/stdio/Structs/File.html": {
    "href": "phobos/std/stdio/Structs/File.html",
    "title": "Struct - File | Marmos Demo",
    "keywords": "Struct - File Module std.stdio public struct File { // Returns an $(REF_ALTTEXT input range, isInputRange, std,range,primitives) set up to read from the file handle a chunk at a time. <bug: unknown> byChunk( size_t chunkSize ) auto; // Ditto <bug: unknown> byChunk( <bug: unknown> buffer ) auto; // If the file is closed or not yet opened, succeeds vacuously. Otherwise, returns $(CSTDIO clearerr) for the file handle. void clearerr( ) ; // If the file was closed or not yet opened, succeeds vacuously. Otherwise closes the file (by calling $(CSTDIO fclose)), throwing on error. Even if an exception is thrown, afterwards the $(D File) object is empty. This is different from `detach` in that it always closes the file; consequently, all other `File` objects referring to the same handle will see a closed file henceforth. void close( ) ; // void closeHandles( ) ; // Detaches from the underlying file. If the sole owner, calls `close` . void detach( ) ; // Returns `true` if the file is at end (see $(CSTDIO feof)). bool eof( ) ; // If the file is closed or not yet opened, returns `true` . Otherwise, returns $(CSTDIO ferror) for the file handle. bool error( ) ; // First calls `detach` (throwing on failure), then attempts to associate the given file descriptor with the `File` , and sets the file's name to `null` . void fdopen( int fd, <bug: unknown> stdioOpenmode ) ; // void fdopen( int fd, <bug: unknown> stdioOpenmode, string name ) ; // Returns the file number corresponding to this object. fileno_t fileno( ) ; // Flushes the C `FILE` buffers. void flush( ) ; // Returns the `FILE*` corresponding to this object. <bug: unknown> getFP( ) ; // void initImpl( <bug: unknown> handle, string name, uint refs, bool isPopened ) ; // Returns `true` if the file is opened. bool isOpen( ) ; // Locks the specified file segment. If the file segment is already locked by another process, waits until the existing lock is released. If both `start` and `length` are zero, the entire file is locked. void lock( LockType lockType, ulong start, ulong length ) ; // int lockImpl( int operation, short l_type, ulong start, ulong length ) ; // Returns an output range that locks the file and allows fast writing to it. <bug: unknown> lockingBinaryWriter( ) auto; // Output range which locks the file when created, and unlocks the file when it goes out of scope. <bug: unknown> lockingTextWriter( ) auto; // Returns the name last used to initialize this `File` , if any. string name( ) ; // Assigns a file to another. The target of the assignment gets detached from whatever file it was attached to, and attaches itself to the new file. File opAssign( File rhs ) ; // Detaches from the current file (throwing on failure), and then attempts to open file `name` with mode `stdioOpenmode`. The mode has the same semantics as in the C standard library $(CSTDIO fopen) function. void open( string name, <bug: unknown> stdioOpenmode ) ; // Detaches from the current file (throwing on failure), and then runs a command by calling the C standard library function $(HTTP opengroup.org/onlinepubs/007908799/xsh/_popen.html, popen). void popen( string command, <bug: unknown> stdioOpenmode ) ; // Reuses the `File` object to either open a different file, or change the file mode. If `name` is `null` , the mode of the currently open file is changed; otherwise, a new file is opened, reusing the C `FILE*` . The function has the same semantics as in the C standard library $(CSTDIO freopen) function. void reopen( string name, <bug: unknown> stdioOpenmode ) ; // void resetFile( string name, <bug: unknown> stdioOpenmode, bool isPopened ) ; // Calls $(CSTDIO rewind) for the file handle. void rewind( ) ; // Calls $(CSTDIO fseek) for the file handle to move its position indicator. void seek( long offset, int origin ) ; // void setAppendWin( <bug: unknown> stdioOpenmode ) ; // Calls $(CSTDIO setvbuf) for the file handle. void setvbuf( size_t size, int mode ) ; // Calls $(CSTDIO setvbuf) for the file handle. void setvbuf( <bug: unknown> buf, int mode ) ; // Returns the size of the file in bytes, ulong.max if file is not searchable or throws if the operation fails. Example: --- import std.stdio, std.file; ulong size( ) ; // Forces any data buffered by the OS to be written to disk. Call $(LREF flush) before calling this function to flush the C `FILE` buffers first. void sync( ) ; // Calls $(CSTDIO ftell) for the managed file handle, which returns the current value of the position indicator of the file handle. ulong tell( ) ; // Returns a temporary file by calling $(CSTDIO tmpfile). Note that the created file has no $(LREF name). File tmpfile( ) static; // Attempts to lock the specified file segment. If both `start` and `length` are zero, the entire file is locked. Returns: `true` if the lock was successful, and `false` if the specified file segment was already locked. bool tryLock( LockType lockType, ulong start, ulong length ) ; // Removes the lock over the specified file segment. void unlock( ulong start, ulong length ) ; // Returns the underlying operating system `HANDLE` (Windows only). HANDLE windowsHandle( ) ; // HANDLE windowsHandle( ) ; // First calls `detach` (throwing on failure), and then attempts to associate the given Windows `HANDLE` with the `File` . The mode must be compatible with the access attributes of the handle. Windows only. void windowsHandleOpen( HANDLE handle, <bug: unknown> stdioOpenmode ) ; // void windowsHandleOpen( HANDLE handle, <bug: unknown> stdioOpenmode ) ; // Unsafe function that wraps an existing `FILE*` . The resulting $(D File) never takes the initiative in closing the file. Note that the created file has no $(LREF name) File wrapFile( <bug: unknown> f ) static; } About Encapsulates a FILE* . Generally D does not attempt to provide thin wrappers over equivalent functions in the C standard library, but manipulating FILE* values directly is unsafe and error-prone in many ways. The File type ensures safe manipulation, automatic file closing, and a lot of convenience. The underlying FILE* handle is maintained in a reference-counted manner, such that as soon as the last File variable bound to a given FILE* goes out of scope, the underlying FILE* is automatically closed. Example ---- // test.d import std.stdio; void main(string[] args) { auto f = File(\"test.txt\", \"w\"); // open for writing f.write(\"Hello\"); if (args.length > 1) { auto g = f; // now g and f write to the same file // internal reference count is 2 g.write(\", \", args[1]); // g exits scope, reference count decreases to 1 } f.writeln(\"!\"); // f exits scope, reference count falls to zero, // underlying FILE* is closed. } ---- $(CONSOLE % rdmd test.d Jimmy % cat test.txt Hello, Jimmy! % ) Functions Name Description byChunk Returns an $(REF_ALTTEXT input range, isInputRange, std,range,primitives) set up to read from the file handle a chunk at a time. clearerr If the file is closed or not yet opened, succeeds vacuously. Otherwise, returns $(CSTDIO clearerr) for the file handle. close If the file was closed or not yet opened, succeeds vacuously. Otherwise closes the file (by calling $(CSTDIO fclose)), throwing on error. Even if an exception is thrown, afterwards the $(D File) object is empty. This is different from detach in that it always closes the file; consequently, all other File objects referring to the same handle will see a closed file henceforth. closeHandles detach Detaches from the underlying file. If the sole owner, calls close . eof Returns true if the file is at end (see $(CSTDIO feof)). error If the file is closed or not yet opened, returns true . Otherwise, returns $(CSTDIO ferror) for the file handle. fdopen First calls detach (throwing on failure), then attempts to associate the given file descriptor with the File , and sets the file's name to null . fileno Returns the file number corresponding to this object. flush Flushes the C FILE buffers. getFP Returns the FILE* corresponding to this object. initImpl isOpen Returns true if the file is opened. lock Locks the specified file segment. If the file segment is already locked by another process, waits until the existing lock is released. If both start and length are zero, the entire file is locked. lockImpl lockingBinaryWriter Returns an output range that locks the file and allows fast writing to it. lockingTextWriter Output range which locks the file when created, and unlocks the file when it goes out of scope. name Returns the name last used to initialize this File , if any. opAssign Assigns a file to another. The target of the assignment gets detached from whatever file it was attached to, and attaches itself to the new file. open Detaches from the current file (throwing on failure), and then attempts to open file name with mode stdioOpenmode. The mode has the same semantics as in the C standard library $(CSTDIO fopen) function. popen Detaches from the current file (throwing on failure), and then runs a command by calling the C standard library function $(HTTP opengroup.org/onlinepubs/007908799/xsh/_popen.html, popen). reopen Reuses the File object to either open a different file, or change the file mode. If name is null , the mode of the currently open file is changed; otherwise, a new file is opened, reusing the C FILE* . The function has the same semantics as in the C standard library $(CSTDIO freopen) function. resetFile rewind Calls $(CSTDIO rewind) for the file handle. seek Calls $(CSTDIO fseek) for the file handle to move its position indicator. setAppendWin setvbuf Calls $(CSTDIO setvbuf) for the file handle. size Returns the size of the file in bytes, ulong.max if file is not searchable or throws if the operation fails. Example: --- import std.stdio, std.file; sync Forces any data buffered by the OS to be written to disk. Call $(LREF flush) before calling this function to flush the C FILE buffers first. tell Calls $(CSTDIO ftell) for the managed file handle, which returns the current value of the position indicator of the file handle. tmpfile Returns a temporary file by calling $(CSTDIO tmpfile). Note that the created file has no $(LREF name). tryLock Attempts to lock the specified file segment. If both start and length are zero, the entire file is locked. Returns: true if the lock was successful, and false if the specified file segment was already locked. unlock Removes the lock over the specified file segment. windowsHandle Returns the underlying operating system HANDLE (Windows only). windowsHandleOpen First calls detach (throwing on failure), and then attempts to associate the given Windows HANDLE with the File . The mode must be compatible with the access attributes of the handle. Windows only. wrapFile Unsafe function that wraps an existing FILE* . The resulting $(D File) never takes the initiative in closing the file. Note that the created file has no $(LREF name)"
  },
  "phobos/std/stdio/Structs/LockedFile.html": {
    "href": "phobos/std/stdio/Structs/LockedFile.html",
    "title": "Struct - LockedFile | Marmos Demo",
    "keywords": "Struct - LockedFile Module std.stdio public struct LockedFile { // <bug: unknown> fgetc( ) ; // <bug: unknown> fgetwc( ) ; // void opAssign( LockedFile __anonymous ) @disable; // @system <bug: unknown> fp; } Functions Name Description fgetc fgetwc opAssign Variables Name Description fp"
  },
  "phobos/std/stdio/Structs/LockingTextReader.html": {
    "href": "phobos/std/stdio/Structs/LockingTextReader.html",
    "title": "Struct - LockingTextReader | Marmos Demo",
    "keywords": "Struct - LockingTextReader Module std.stdio public struct LockingTextReader { // bool empty( ) ; // char front( ) ; // void opAssign( LockingTextReader r ) ; // void popFront( ) ; } Functions Name Description empty front opAssign popFront"
  },
  "phobos/std/stdio/Structs/ReadlnAppender.html": {
    "href": "phobos/std/stdio/Structs/ReadlnAppender.html",
    "title": "Struct - ReadlnAppender | Marmos Demo",
    "keywords": "Struct - ReadlnAppender Module std.stdio public struct ReadlnAppender { // <bug: unknown> data( ) ; // void initialize( <bug: unknown> b ) ; // void putchar( char c ) ; // void putdchar( dchar dc ) ; // void putonly( <bug: unknown> b ) ; // void reserve( size_t n ) ; // bool reserveWithoutAllocating( size_t n ) ; // <bug: unknown> buf; // size_t pos; // bool safeAppend; } Functions Name Description data initialize putchar putdchar putonly reserve reserveWithoutAllocating Variables Name Description buf pos safeAppend"
  },
  "phobos/std/stdio/Structs/lines.html": {
    "href": "phobos/std/stdio/Structs/lines.html",
    "title": "Struct - lines | Marmos Demo",
    "keywords": "Struct - lines Module std.stdio public struct lines { // File f; // dchar terminator; } About Iterates through the lines of a file by using foreach . Example --------- void main() { foreach (string line; lines(stdin)) { ... use line ... } } --------- The line terminator ('\\n' by default) is part of the string read (it could be missing in the last line of the file). Several types are supported for line , and the behavior of lines changes accordingly: $(OL $(LI If line has type string , $(D wstring), or dstring , a new string of the respective type is allocated every read.) $(LI If line has type $(D char[]), wchar[] , dchar[] , the line's content will be reused (overwritten) across reads.) $(LI If line has type immutable(ubyte)[] , the behavior is similar to case (1), except that no UTF checking is attempted upon input.) $(LI If line has type ubyte[] , the behavior is similar to case (2), except that no UTF checking is attempted upon input.)) In all cases, a two-symbols versions is also accepted, in which case the first symbol (of integral type, e.g. ulong or $(D uint)) tracks the zero-based number of the current line. Example: ---- foreach (ulong i, string line; lines(stdin)) { ... use line ... } ---- In case of an I/O error, an StdioException is thrown. See_Also: $(LREF byLine) Variables Name Description f terminator"
  },
  "phobos/std/string/Classes/StringException.html": {
    "href": "phobos/std/string/Classes/StringException.html",
    "title": "Class - StringException | Marmos Demo",
    "keywords": "Class - StringException Module std.string public class StringException { } About Exception thrown on errors in std.string functions."
  },
  "phobos/std/string/Functions/abbrev.html": {
    "href": "phobos/std/string/Functions/abbrev.html",
    "title": "Overloads for - abbrev | Marmos Demo",
    "keywords": "Overloads for - abbrev Module std.string abbrev(values) <bug: unknown> abbrev( <bug: unknown> values ) Construct an associative array consisting of all abbreviations that uniquely map to the strings in values. This is useful in cases where the user is expected to type in one of a known set of strings, and the program will helpfully auto-complete the string once sufficient characters have been entered that uniquely identify it."
  },
  "phobos/std/string/Functions/assumeUTF.html": {
    "href": "phobos/std/string/Functions/assumeUTF.html",
    "title": "Overloads for - assumeUTF | Marmos Demo",
    "keywords": "Overloads for - assumeUTF Module std.string assumeUTF(arr) <bug: unknown> assumeUTF( <bug: unknown> arr ) auto Assume the given array of integers arr is a well-formed UTF string and return it typed as a UTF string. ubyte becomes char , ushort becomes wchar and uint becomes dchar . Type qualifiers are preserved. When compiled with debug mode, this function performs an extra check to make sure the return value is a valid Unicode string. Params: arr = array of bytes, ubytes, shorts, ushorts, ints, or uints Returns: arr retyped as an array of chars, wchars, or dchars Throws: In debug mode AssertError , when the result is not a well-formed UTF string. See_Also: $(LREF representation)"
  },
  "phobos/std/string/Functions/capitalize.html": {
    "href": "phobos/std/string/Functions/capitalize.html",
    "title": "Overloads for - capitalize | Marmos Demo",
    "keywords": "Overloads for - capitalize Module std.string capitalize(input) S capitalize( S input ) Capitalize the first character of s and convert the rest of s to lowercase. Params input S The string to capitalize. Returns The capitalized string. See_Also $(REF asCapitalized, std,uni) for a lazy range version that doesn't allocate memory capitalize(s) <bug: unknown> capitalize( S s ) auto"
  },
  "phobos/std/string/Functions/center.html": {
    "href": "phobos/std/string/Functions/center.html",
    "title": "Overloads for - center | Marmos Demo",
    "keywords": "Overloads for - center Module std.string center(s, width, fillChar) S center( S s, size_t width, dchar fillChar ) Center s in a field width characters wide. fillChar is the character that will be used to fill up the space in the field that s doesn't fill. Params s S The string to center width size_t Width of the field to center s in fillChar dchar The character to use for filling excess space in the field Returns The resulting center-justified string. The returned string is GC-allocated. To avoid GC allocation, use $(LREF centerJustifier) instead."
  },
  "phobos/std/string/Functions/centerJustifier.html": {
    "href": "phobos/std/string/Functions/centerJustifier.html",
    "title": "Overloads for - centerJustifier | Marmos Demo",
    "keywords": "Overloads for - centerJustifier Module std.string centerJustifier(r, width, fillChar) <bug: unknown> centerJustifier( Range r, size_t width, dchar fillChar ) auto Center justify r in a field width characters wide. fillChar is the character that will be used to fill up the space in the field that r doesn't fill. Params r Range string or $(REF_ALTTEXT forward range, isForwardRange, std,range,primitives) of characters width = minimum field width fillChar = used to pad end up to width characters Returns a lazy range of the center justified result See_Also $(LREF leftJustifier) $(LREF rightJustifier) centerJustifier(r, width, fillChar) <bug: unknown> centerJustifier( Range r, size_t width, dchar fillChar ) auto"
  },
  "phobos/std/string/Functions/chomp.html": {
    "href": "phobos/std/string/Functions/chomp.html",
    "title": "Overloads for - chomp | Marmos Demo",
    "keywords": "Overloads for - chomp Module std.string chomp(str) Range chomp( Range str ) If str ends with delimiter , then str is returned without delimiter on its end. If it str does $(I not) end with delimiter , then it is returned unchanged. If no delimiter is given, then one trailing '\\r' , '\\n' , \"\\r\\n\" , '\\f' , '\\v' , $(REF lineSep, std,uni), $(REF paraSep, std,uni), or $(REF nelSep, std,uni) is removed from the end of str . If str does not end with any of those characters, then it is returned unchanged. Params str Range string or indexable range of characters delimiter <parameter not found> string of characters to be sliced off end of str[] Returns slice of str chomp(str, delimiter) Range chomp( Range str, <bug: unknown> delimiter ) Ditto chomp(str) StringTypeOf!(Range) chomp( Range str ) chomp(str, delimiter) StringTypeOf!(Range) chomp( Range str, <bug: unknown> delimiter )"
  },
  "phobos/std/string/Functions/chompPrefix.html": {
    "href": "phobos/std/string/Functions/chompPrefix.html",
    "title": "Overloads for - chompPrefix | Marmos Demo",
    "keywords": "Overloads for - chompPrefix Module std.string chompPrefix(str, delimiter) Range chompPrefix( Range str, <bug: unknown> delimiter ) If str starts with delimiter , then the part of str following delimiter is returned. If str does $(I not) start with delimiter , then it is returned unchanged. Params str Range string or $(REF_ALTTEXT forward range, isForwardRange, std,range,primitives) of characters delimiter = string of characters to be sliced off front of str[] Returns slice of str chompPrefix(str, delimiter) StringTypeOf!(Range) chompPrefix( Range str, <bug: unknown> delimiter )"
  },
  "phobos/std/string/Functions/chop.html": {
    "href": "phobos/std/string/Functions/chop.html",
    "title": "Overloads for - chop | Marmos Demo",
    "keywords": "Overloads for - chop Module std.string chop(str) Range chop( Range str ) Returns str without its last character, if there is one. If str ends with \"\\r\\n\" , then both are removed. If str is empty, then it is returned unchanged. Params str Range string (must be valid UTF) Returns slice of str chop(str) StringTypeOf!(Range) chop( Range str )"
  },
  "phobos/std/string/Functions/column.html": {
    "href": "phobos/std/string/Functions/column.html",
    "title": "Overloads for - column | Marmos Demo",
    "keywords": "Overloads for - column Module std.string column(str, tabsize) size_t column( Range str, size_t tabsize ) Compute column number at the end of the printed form of the string, assuming the string starts in the leftmost column, which is numbered starting from 0. Tab characters are expanded into enough spaces to bring the column number to the next multiple of tabsize. If there are multiple lines in the string, the column number of the last line is returned. Params str Range string or InputRange to be analyzed tabsize size_t number of columns a tab character represents Returns column number column(str, tabsize) size_t column( Range str, size_t tabsize )"
  },
  "phobos/std/string/Functions/detab.html": {
    "href": "phobos/std/string/Functions/detab.html",
    "title": "Overloads for - detab | Marmos Demo",
    "keywords": "Overloads for - detab Module std.string detab(s, tabSize) <bug: unknown> detab( Range s, size_t tabSize ) auto Replace each tab character in s with the number of spaces necessary to align the following character at the next tab stop. Params s Range string tabSize size_t distance between tab stops Returns GC allocated string with tabs replaced with spaces"
  },
  "phobos/std/string/Functions/detabber.html": {
    "href": "phobos/std/string/Functions/detabber.html",
    "title": "Overloads for - detabber | Marmos Demo",
    "keywords": "Overloads for - detabber Module std.string detabber(r, tabSize) <bug: unknown> detabber( Range r, size_t tabSize ) auto Replace each tab character in r with the number of spaces necessary to align the following character at the next tab stop. Params r Range string or $(REF_ALTTEXT forward range, isForwardRange, std,range,primitives) tabSize size_t distance between tab stops Returns lazy forward range with tabs replaced with spaces detabber(r, tabSize) <bug: unknown> detabber( Range r, size_t tabSize ) auto ditto"
  },
  "phobos/std/string/Functions/entab.html": {
    "href": "phobos/std/string/Functions/entab.html",
    "title": "Overloads for - entab | Marmos Demo",
    "keywords": "Overloads for - entab Module std.string entab(s, tabSize) <bug: unknown> entab( Range s, size_t tabSize ) auto Replaces spaces in s with the optimal number of tabs. All spaces and tabs at the end of a line are removed. Params s Range String to convert. tabSize size_t Tab columns are tabSize spaces apart. Returns GC allocated string with spaces replaced with tabs; use $(LREF entabber) to not allocate. See_Also $(LREF entabber) entab(s, tabSize) <bug: unknown> entab( Range s, size_t tabSize ) auto"
  },
  "phobos/std/string/Functions/entabber.html": {
    "href": "phobos/std/string/Functions/entabber.html",
    "title": "Overloads for - entabber | Marmos Demo",
    "keywords": "Overloads for - entabber Module std.string entabber(r, tabSize) <bug: unknown> entabber( Range r, size_t tabSize ) auto Replaces spaces in range r with the optimal number of tabs. All spaces and tabs at the end of a line are removed. Params r Range string or $(REF_ALTTEXT forward range, isForwardRange, std,range,primitives) tabSize size_t distance between tab stops Returns lazy forward range with spaces replaced with tabs See_Also $(LREF entab) entabber(r, tabSize) <bug: unknown> entabber( Range r, size_t tabSize ) auto"
  },
  "phobos/std/string/Functions/fromStringz.html": {
    "href": "phobos/std/string/Functions/fromStringz.html",
    "title": "Overloads for - fromStringz | Marmos Demo",
    "keywords": "Overloads for - fromStringz Module std.string fromStringz(cString) <bug: unknown> fromStringz( <bug: unknown> cString ) Params cString <bug: unknown> A null-terminated c-style string. Returns: A D-style array of char , wchar or dchar referencing the same string. The returned array will retain the same type qualifiers as the input. $(RED Important Note:) The returned array is a slice of the original buffer. The original data is not changed and not copied. fromStringz(cString) <bug: unknown> fromStringz( <bug: unknown> cString ) ditto"
  },
  "phobos/std/string/Functions/indexOf.html": {
    "href": "phobos/std/string/Functions/indexOf.html",
    "title": "Overloads for - indexOf | Marmos Demo",
    "keywords": "Overloads for - indexOf Module std.string indexOf(s, c, cs) ptrdiff_t indexOf( Range s, dchar c, CaseSensitive cs ) Searches for character in range. Params s Range string or InputRange of characters to search in correct UTF format c dchar character to search for startIdx <parameter not found> starting index to a well-formed code point cs CaseSensitive Yes.caseSensitive or No.caseSensitive Returns the index of the first occurrence of c in s with respect to the start index startIdx . If c is not found, then -1 is returned. If c is found the value of the returned index is at least startIdx . If the parameters are not valid UTF, the result will still be in the range [-1 .. s.length], but will not be reliable otherwise. Throws If the sequence starting at startIdx does not represent a well formed codepoint, then a $(REF UTFException, std,utf) may be thrown. See_Also: $(REF countUntil, std,algorithm,searching) indexOf(s, c, cs) ptrdiff_t indexOf( <bug: unknown> s, dchar c, CaseSensitive cs ) Ditto indexOf(s, c, startIdx, cs) ptrdiff_t indexOf( Range s, dchar c, size_t startIdx, CaseSensitive cs ) Ditto indexOf(s, c, startIdx, cs) ptrdiff_t indexOf( <bug: unknown> s, dchar c, size_t startIdx, CaseSensitive cs ) Ditto indexOf(s, sub) ptrdiff_t indexOf( Range s, <bug: unknown> sub ) Searches for substring in s . Params s Range string or ForwardRange of characters to search in correct UTF format sub <bug: unknown> substring to search for startIdx <parameter not found> the index into s to start searching from cs <parameter not found> Yes.caseSensitive (default) or No.caseSensitive Returns the index of the first occurrence of sub in s with respect to the start index startIdx . If sub is not found, then -1 is returned. If the arguments are not valid UTF, the result will still be in the range [-1 .. s.length], but will not be reliable otherwise. If sub is found the value of the returned index is at least startIdx . Throws If the sequence starting at startIdx does not represent a well formed codepoint, then a $(REF UTFException, std,utf) may be thrown. Bugs Does not work with case insensitive strings where the mapping of tolower and toupper is not 1:1. indexOf(s, sub, cs) ptrdiff_t indexOf( Range s, <bug: unknown> sub, CaseSensitive cs ) Ditto indexOf(s, sub, startIdx) ptrdiff_t indexOf( <bug: unknown> s, <bug: unknown> sub, size_t startIdx ) Ditto indexOf(s, sub, startIdx, cs) ptrdiff_t indexOf( <bug: unknown> s, <bug: unknown> sub, size_t startIdx, CaseSensitive cs ) Ditto indexOf(s, sub) ptrdiff_t indexOf( Range s, <bug: unknown> sub ) indexOf(s, sub, cs) ptrdiff_t indexOf( Range s, <bug: unknown> sub, CaseSensitive cs )"
  },
  "phobos/std/string/Functions/indexOfAny.html": {
    "href": "phobos/std/string/Functions/indexOfAny.html",
    "title": "Overloads for - indexOfAny | Marmos Demo",
    "keywords": "Overloads for - indexOfAny Module std.string indexOfAny(haystack, needles, cs) ptrdiff_t indexOfAny( <bug: unknown> haystack, <bug: unknown> needles, CaseSensitive cs ) Returns the index of the first occurrence of any of the elements in $(D needles) in haystack . If no element of needles is found, then -1 is returned. The startIdx slices haystack in the following way $(D haystack[startIdx .. $]). startIdx represents a codeunit index in haystack . If the sequence ending at startIdx does not represent a well formed codepoint, then a $(REF UTFException, std,utf) may be thrown. Params haystack <bug: unknown> String to search for needles in. needles <bug: unknown> Strings to search for in haystack. startIdx <parameter not found> slices haystack like this $(D haystack[startIdx .. $]). If the startIdx is greater than or equal to the length of haystack the functions returns -1 . cs CaseSensitive Indicates whether the comparisons are case sensitive. indexOfAny(haystack, needles, startIdx, cs) ptrdiff_t indexOfAny( <bug: unknown> haystack, <bug: unknown> needles, size_t startIdx, CaseSensitive cs ) Ditto"
  },
  "phobos/std/string/Functions/indexOfAnyNeitherImpl.html": {
    "href": "phobos/std/string/Functions/indexOfAnyNeitherImpl.html",
    "title": "Overloads for - indexOfAnyNeitherImpl | Marmos Demo",
    "keywords": "Overloads for - indexOfAnyNeitherImpl Module std.string indexOfAnyNeitherImpl(haystack, needles, cs) ptrdiff_t indexOfAnyNeitherImpl( <bug: unknown> haystack, <bug: unknown> needles, CaseSensitive cs )"
  },
  "phobos/std/string/Functions/indexOfNeither.html": {
    "href": "phobos/std/string/Functions/indexOfNeither.html",
    "title": "Overloads for - indexOfNeither | Marmos Demo",
    "keywords": "Overloads for - indexOfNeither Module std.string indexOfNeither(haystack, needles, cs) ptrdiff_t indexOfNeither( <bug: unknown> haystack, <bug: unknown> needles, CaseSensitive cs ) Returns the index of the first occurrence of any character not an elements in needles in haystack . If all element of haystack are element of needles -1 is returned. Params haystack <bug: unknown> String to search for needles in. needles <bug: unknown> Strings to search for in haystack. startIdx <parameter not found> slices haystack like this $(D haystack[startIdx .. $]). If the startIdx is greater than or equal to the length of haystack the functions returns -1 . cs CaseSensitive Indicates whether the comparisons are case sensitive. indexOfNeither(haystack, needles, startIdx, cs) ptrdiff_t indexOfNeither( <bug: unknown> haystack, <bug: unknown> needles, size_t startIdx, CaseSensitive cs ) Ditto"
  },
  "phobos/std/string/Functions/isNumeric.html": {
    "href": "phobos/std/string/Functions/isNumeric.html",
    "title": "Overloads for - isNumeric | Marmos Demo",
    "keywords": "Overloads for - isNumeric Module std.string isNumeric(s, bAllowSep) bool isNumeric( S s, bool bAllowSep ) Takes a string s and determines if it represents a number. This function also takes an optional parameter, bAllowSep , which will accept the separator characters ',' and '__' within the string. But these characters should be stripped from the string before using any of the conversion functions like to!int() , to!float() , and etc else an error will occur. Also please note, that no spaces are allowed within the string anywhere whether it's a leading, trailing, or embedded space(s), thus they too must be stripped from the string before using this function, or any of the conversion functions. Params s S the string or random access range to check bAllowSep bool accept separator characters or not Returns bool"
  },
  "phobos/std/string/Functions/lastIndexOf.html": {
    "href": "phobos/std/string/Functions/lastIndexOf.html",
    "title": "Overloads for - lastIndexOf | Marmos Demo",
    "keywords": "Overloads for - lastIndexOf Module std.string lastIndexOf(s, c, cs) ptrdiff_t lastIndexOf( <bug: unknown> s, dchar c, CaseSensitive cs ) Params s <bug: unknown> string to search c dchar character to search for startIdx <parameter not found> the index into s to start searching from cs CaseSensitive Yes.caseSensitive or No.caseSensitive Returns The index of the last occurrence of c in s . If c is not found, then -1 is returned. The startIdx slices s in the following way $(D s[0 .. startIdx]). startIdx represents a codeunit index in s . Throws If the sequence ending at startIdx does not represent a well formed codepoint, then a $(REF UTFException, std,utf) may be thrown. cs indicates whether the comparisons are case sensitive. lastIndexOf(s, c, startIdx, cs) ptrdiff_t lastIndexOf( <bug: unknown> s, dchar c, size_t startIdx, CaseSensitive cs ) Ditto lastIndexOf(s, sub, cs) ptrdiff_t lastIndexOf( <bug: unknown> s, <bug: unknown> sub, CaseSensitive cs ) Params s <bug: unknown> string to search sub <bug: unknown> substring to search for startIdx <parameter not found> the index into s to start searching from cs CaseSensitive Yes.caseSensitive or No.caseSensitive Returns the index of the last occurrence of sub in s . If sub is not found, then -1 is returned. The startIdx slices s in the following way $(D s[0 .. startIdx]). startIdx represents a codeunit index in s . Throws If the sequence ending at startIdx does not represent a well formed codepoint, then a $(REF UTFException, std,utf) may be thrown. cs indicates whether the comparisons are case sensitive. lastIndexOf(s, sub, startIdx, cs) ptrdiff_t lastIndexOf( <bug: unknown> s, <bug: unknown> sub, size_t startIdx, CaseSensitive cs ) Ditto"
  },
  "phobos/std/string/Functions/lastIndexOfAny.html": {
    "href": "phobos/std/string/Functions/lastIndexOfAny.html",
    "title": "Overloads for - lastIndexOfAny | Marmos Demo",
    "keywords": "Overloads for - lastIndexOfAny Module std.string lastIndexOfAny(haystack, needles, cs) ptrdiff_t lastIndexOfAny( <bug: unknown> haystack, <bug: unknown> needles, CaseSensitive cs ) Returns the index of the last occurrence of any of the elements in $(D needles) in haystack . If no element of needles is found, then -1 is returned. The stopIdx slices haystack in the following way $(D s[0 .. stopIdx]). stopIdx represents a codeunit index in haystack . If the sequence ending at startIdx does not represent a well formed codepoint, then a $(REF UTFException, std,utf) may be thrown. Params haystack <bug: unknown> String to search for needles in. needles <bug: unknown> Strings to search for in haystack. stopIdx <parameter not found> slices haystack like this $(D haystack[0 .. stopIdx]). If the stopIdx is greater than or equal to the length of haystack the functions returns -1 . cs CaseSensitive Indicates whether the comparisons are case sensitive. lastIndexOfAny(haystack, needles, stopIdx, cs) ptrdiff_t lastIndexOfAny( <bug: unknown> haystack, <bug: unknown> needles, size_t stopIdx, CaseSensitive cs ) Ditto"
  },
  "phobos/std/string/Functions/lastIndexOfNeither.html": {
    "href": "phobos/std/string/Functions/lastIndexOfNeither.html",
    "title": "Overloads for - lastIndexOfNeither | Marmos Demo",
    "keywords": "Overloads for - lastIndexOfNeither Module std.string lastIndexOfNeither(haystack, needles, cs) ptrdiff_t lastIndexOfNeither( <bug: unknown> haystack, <bug: unknown> needles, CaseSensitive cs ) Returns the last index of the first occurence of any character that is not an elements in needles in haystack . If all element of haystack are element of needles -1 is returned. Params haystack <bug: unknown> String to search for needles in. needles <bug: unknown> Strings to search for in haystack. stopIdx <parameter not found> slices haystack like this $(D haystack[0 .. stopIdx]) If the stopIdx is greater than or equal to the length of haystack the functions returns -1 . cs CaseSensitive Indicates whether the comparisons are case sensitive. lastIndexOfNeither(haystack, needles, stopIdx, cs) ptrdiff_t lastIndexOfNeither( <bug: unknown> haystack, <bug: unknown> needles, size_t stopIdx, CaseSensitive cs ) Ditto"
  },
  "phobos/std/string/Functions/leftJustifier.html": {
    "href": "phobos/std/string/Functions/leftJustifier.html",
    "title": "Overloads for - leftJustifier | Marmos Demo",
    "keywords": "Overloads for - leftJustifier Module std.string leftJustifier(r, width, fillChar) <bug: unknown> leftJustifier( Range r, size_t width, dchar fillChar ) auto Left justify s in a field width characters wide. fillChar is the character that will be used to fill up the space in the field that s doesn't fill. Params r Range string or range of characters width size_t minimum field width fillChar dchar used to pad end up to width characters Returns a lazy range of the left justified result See_Also $(LREF rightJustifier) leftJustifier(r, width, fillChar) <bug: unknown> leftJustifier( Range r, size_t width, dchar fillChar ) auto"
  },
  "phobos/std/string/Functions/leftJustify.html": {
    "href": "phobos/std/string/Functions/leftJustify.html",
    "title": "Overloads for - leftJustify | Marmos Demo",
    "keywords": "Overloads for - leftJustify Module std.string leftJustify(s, width, fillChar) S leftJustify( S s, size_t width, dchar fillChar ) Left justify s in a field width characters wide. fillChar is the character that will be used to fill up the space in the field that s doesn't fill. Params s S string width size_t minimum field width fillChar dchar used to pad end up to width characters Returns GC allocated string See_Also $(LREF leftJustifier), which does not allocate"
  },
  "phobos/std/string/Functions/lineSplitter.html": {
    "href": "phobos/std/string/Functions/lineSplitter.html",
    "title": "Overloads for - lineSplitter | Marmos Demo",
    "keywords": "Overloads for - lineSplitter Module std.string lineSplitter(r) <bug: unknown> lineSplitter( Range r ) auto Split an array or slicable range of characters into a range of lines using '\\r' , '\\n' , '\\v' , '\\f' , \"\\r\\n\" , $(REF lineSep, std,uni), $(REF paraSep, std,uni) and '\\u0085' (NEL) as delimiters. If keepTerm is set to Yes.keepTerminator , then the delimiter is included in the slices returned. Does not throw on invalid UTF; such is simply passed unchanged to the output. Adheres to $(HTTP www.unicode.org/versions/Unicode7.0.0/ch05.pdf, Unicode 7.0). Does not allocate memory. Params r Range array of chars , wchars , or dchars or a slicable range keepTerm <parameter not found> whether delimiter is included or not in the results keepTerm = whether delimiter is included or not in the results Returns: range of slices of the input range r See_Also $(LREF splitLines) $(REF splitter, std,algorithm) $(REF splitter, std,regex) lineSplitter(r) <bug: unknown> lineSplitter( <bug: unknown> r ) auto Ditto"
  },
  "phobos/std/string/Functions/makeTrans.html": {
    "href": "phobos/std/string/Functions/makeTrans.html",
    "title": "Overloads for - makeTrans | Marmos Demo",
    "keywords": "Overloads for - makeTrans Module std.string makeTrans(from, to) string makeTrans( <bug: unknown> from, <bug: unknown> to ) Do same thing as $(LREF makeTransTable) but allocate the translation table on the GC heap. Use $(LREF makeTransTable) instead."
  },
  "phobos/std/string/Functions/makeTransTable.html": {
    "href": "phobos/std/string/Functions/makeTransTable.html",
    "title": "Overloads for - makeTransTable | Marmos Demo",
    "keywords": "Overloads for - makeTransTable Module std.string makeTransTable(from, to) <bug: unknown> makeTransTable( <bug: unknown> from, <bug: unknown> to ) Construct 256 character translation table, where characters in from[] are replaced by corresponding characters in to[]. Params from <bug: unknown> array of chars, less than or equal to 256 in length to <bug: unknown> corresponding array of chars to translate to to = corresponding array of chars to translate to Returns: translation array"
  },
  "phobos/std/string/Functions/outdent.html": {
    "href": "phobos/std/string/Functions/outdent.html",
    "title": "Overloads for - outdent | Marmos Demo",
    "keywords": "Overloads for - outdent Module std.string outdent(str) S outdent( S str ) Removes one level of indentation from a multi-line string. This uniformly outdents the text as much as possible. Whitespace-only lines are always converted to blank lines. Does not allocate memory if it does not throw. Params str S multi-line string Returns outdented string Throws StringException if indentation is done with different sequences of whitespace characters. outdent(lines) <bug: unknown> outdent( <bug: unknown> lines ) Removes one level of indentation from an array of single-line strings. This uniformly outdents the text as much as possible. Whitespace-only lines are always converted to blank lines. Params lines <bug: unknown> array of single-line strings Returns lines[] is rewritten in place with outdented lines Throws StringException if indentation is done with different sequences of whitespace characters."
  },
  "phobos/std/string/Functions/representation.html": {
    "href": "phobos/std/string/Functions/representation.html",
    "title": "Overloads for - representation | Marmos Demo",
    "keywords": "Overloads for - representation Module std.string representation(s) <bug: unknown> representation( <bug: unknown> s ) auto Returns the representation of a string, which has the same type as the string except the character type is replaced by ubyte , ushort , or uint depending on the character width. Params s <bug: unknown> The string to return the representation of. Returns The representation of the passed string."
  },
  "phobos/std/string/Functions/rightJustifier.html": {
    "href": "phobos/std/string/Functions/rightJustifier.html",
    "title": "Overloads for - rightJustifier | Marmos Demo",
    "keywords": "Overloads for - rightJustifier Module std.string rightJustifier(r, width, fillChar) <bug: unknown> rightJustifier( Range r, size_t width, dchar fillChar ) auto Right justify s in a field width characters wide. fillChar is the character that will be used to fill up the space in the field that s doesn't fill. Params r Range string or $(REF_ALTTEXT forward range, isForwardRange, std,range,primitives) of characters width = minimum field width fillChar = used to pad end up to width characters Returns a lazy range of the right justified result See_Also $(LREF leftJustifier) rightJustifier(r, width, fillChar) <bug: unknown> rightJustifier( Range r, size_t width, dchar fillChar ) auto"
  },
  "phobos/std/string/Functions/rightJustify.html": {
    "href": "phobos/std/string/Functions/rightJustify.html",
    "title": "Overloads for - rightJustify | Marmos Demo",
    "keywords": "Overloads for - rightJustify Module std.string rightJustify(s, width, fillChar) S rightJustify( S s, size_t width, dchar fillChar ) Right justify s in a field width characters wide. fillChar is the character that will be used to fill up the space in the field that s doesn't fill. Params s S string width size_t minimum field width fillChar dchar used to pad end up to width characters Returns GC allocated string See_Also $(LREF rightJustifier), which does not allocate"
  },
  "phobos/std/string/Functions/soundex.html": {
    "href": "phobos/std/string/Functions/soundex.html",
    "title": "Overloads for - soundex | Marmos Demo",
    "keywords": "Overloads for - soundex Module std.string soundex(str, buffer) <bug: unknown> soundex( <bug: unknown> str, <bug: unknown> buffer ) Like $(LREF soundexer), but with different parameters and return value. Params str <bug: unknown> String to convert to Soundex representation. buffer <bug: unknown> Optional 4 char array to put the resulting Soundex characters into. If null, the return value buffer will be allocated on the heap. buffer = Optional 4 char array to put the resulting Soundex characters into. If null, the return value buffer will be allocated on the heap. Returns: The four character array with the Soundex result in it. Returns null if there is no Soundex representation for the string. See_Also: $(LREF soundexer)"
  },
  "phobos/std/string/Functions/soundexer.html": {
    "href": "phobos/std/string/Functions/soundexer.html",
    "title": "Overloads for - soundexer | Marmos Demo",
    "keywords": "Overloads for - soundexer Module std.string soundexer(str) <bug: unknown> soundexer( Range str ) Soundex algorithm. The Soundex algorithm converts a word into 4 characters based on how the word sounds phonetically. The idea is that two spellings that sound alike will have the same Soundex value, which means that Soundex can be used for fuzzy matching of names. Params str Range String or InputRange to convert to Soundex representation. Returns The four character array with the Soundex result in it. The array has zero's in it if there is no Soundex representation for the string. See_Also $(LINK2 http://en.wikipedia.org/wiki/Soundex, Wikipedia), $(LUCKY The Soundex Indexing System) $(LREF soundex) Note Only works well with English names. soundexer(str) <bug: unknown> soundexer( Range str ) ditto"
  },
  "phobos/std/string/Functions/splitLines.html": {
    "href": "phobos/std/string/Functions/splitLines.html",
    "title": "Overloads for - splitLines | Marmos Demo",
    "keywords": "Overloads for - splitLines Module std.string splitLines(s, keepTerm) <bug: unknown> splitLines( <bug: unknown> s, KeepTerminator keepTerm ) ditto"
  },
  "phobos/std/string/Functions/strip.html": {
    "href": "phobos/std/string/Functions/strip.html",
    "title": "Overloads for - strip | Marmos Demo",
    "keywords": "Overloads for - strip Module std.string strip(str) <bug: unknown> strip( Range str ) auto Strips both leading and trailing whitespace (as defined by $(REF isWhite, std,uni)) or as specified in the second argument. Params str Range string or random access range of characters chars <parameter not found> string of characters to be stripped leftChars <parameter not found> string of leading characters to be stripped rightChars <parameter not found> string of trailing characters to be stripped Returns slice of str stripped of leading and trailing whitespace or characters as specified in the second argument. See_Also Generic stripping on ranges: $(REF strip, std, algorithm, mutation) strip(str) <bug: unknown> strip( Range str ) auto strip(str, chars) <bug: unknown> strip( Range str, <bug: unknown> chars ) auto Ditto strip(str, leftChars, rightChars) <bug: unknown> strip( Range str, <bug: unknown> leftChars, <bug: unknown> rightChars ) auto Ditto"
  },
  "phobos/std/string/Functions/stripLeft.html": {
    "href": "phobos/std/string/Functions/stripLeft.html",
    "title": "Overloads for - stripLeft | Marmos Demo",
    "keywords": "Overloads for - stripLeft Module std.string stripLeft(input) <bug: unknown> stripLeft( Range input ) auto Strips leading whitespace (as defined by $(REF isWhite, std,uni)) or as specified in the second argument. Params input Range string or $(REF_ALTTEXT forward range, isForwardRange, std,range,primitives) of characters chars = string of characters to be stripped Returns: input stripped of leading whitespace or characters specified in the second argument. Postconditions: input and the returned value will share the same tail (see $(REF sameTail, std,array)). See_Also Generic stripping on ranges: $(REF stripLeft, std, algorithm, mutation) stripLeft(str) <bug: unknown> stripLeft( Range str ) auto stripLeft(input, chars) <bug: unknown> stripLeft( Range input, <bug: unknown> chars ) auto Ditto"
  },
  "phobos/std/string/Functions/stripRight.html": {
    "href": "phobos/std/string/Functions/stripRight.html",
    "title": "Overloads for - stripRight | Marmos Demo",
    "keywords": "Overloads for - stripRight Module std.string stripRight(str) <bug: unknown> stripRight( Range str ) auto Strips trailing whitespace (as defined by $(REF isWhite, std,uni)) or as specified in the second argument. Params str Range string or random access range of characters chars <parameter not found> string of characters to be stripped Returns slice of str stripped of trailing whitespace or characters specified in the second argument. See_Also Generic stripping on ranges: $(REF stripRight, std, algorithm, mutation) stripRight(str) <bug: unknown> stripRight( Range str ) auto stripRight(str, chars) <bug: unknown> stripRight( Range str, <bug: unknown> chars ) auto Ditto"
  },
  "phobos/std/string/Functions/succ.html": {
    "href": "phobos/std/string/Functions/succ.html",
    "title": "Overloads for - succ | Marmos Demo",
    "keywords": "Overloads for - succ Module std.string succ(s) S succ( S s ) Return string that is the 'successor' to s[]. If the rightmost character is a-zA-Z0-9, it is incremented within its case or digits. If it generates a carry, the process is repeated with the one to its immediate left."
  },
  "phobos/std/string/Functions/testAliasedString.html": {
    "href": "phobos/std/string/Functions/testAliasedString.html",
    "title": "Overloads for - testAliasedString | Marmos Demo",
    "keywords": "Overloads for - testAliasedString Module std.string testAliasedString(s, args) bool testAliasedString( string s, Args args )"
  },
  "phobos/std/string/Functions/toStringz.html": {
    "href": "phobos/std/string/Functions/toStringz.html",
    "title": "Overloads for - toStringz | Marmos Demo",
    "keywords": "Overloads for - toStringz Module std.string toStringz(s) <bug: unknown> toStringz( <bug: unknown> s ) Params s <bug: unknown> A D-style string. Returns: A C-style null-terminated string equivalent to s . s must not contain embedded '\\0' 's as any C function will treat the first '\\0' that it sees as the end of the string. If s.empty is true , then a string containing only '\\0' is returned. $(RED Important Note:) When passing a char* to a C function, and the C function keeps it around for any reason, make sure that you keep a reference to it in your D code. Otherwise, it may become invalid during a garbage collection cycle and cause a nasty bug when the C code tries to use it."
  },
  "phobos/std/string/Functions/tr.html": {
    "href": "phobos/std/string/Functions/tr.html",
    "title": "Overloads for - tr | Marmos Demo",
    "keywords": "Overloads for - tr Module std.string tr(str, from, to, modifiers) <bug: unknown> tr( <bug: unknown> str, <bug: unknown> from, <bug: unknown> to, <bug: unknown> modifiers ) Replaces the characters in str which are in from with the the corresponding characters in to and returns the resulting string. tr is based on $(HTTP pubs.opengroup.org/onlinepubs/9699919799/utilities/_tr.html, Posix's tr), though it doesn't do everything that the Posix utility does. Params str <bug: unknown> The original string. from <bug: unknown> The characters to replace. to <bug: unknown> The characters to replace with. modifiers <bug: unknown> String containing modifiers. Modifiers $(BOOKTABLE, $(TR $(TD Modifier) $(TD Description)) $(TR $(TD 'c' ) $(TD Complement the list of characters in from )) $(TR $(TD 'd' ) $(TD Removes matching characters with no corresponding replacement in to )) $(TR $(TD 's' ) $(TD Removes adjacent duplicates in the replaced characters)) ) If the modifier 'd' is present, then the number of characters in to may be only 0 or 1 . If the modifier 'd' is $(I not) present, and to is empty, then to is taken to be the same as from . If the modifier 'd' is $(I not) present, and to is shorter than from , then to is extended by replicating the last character in to . Both from and to may contain ranges using the '-' character (e.g. \"a-d\" is synonymous with \"abcd\" .) Neither accept a leading '^' as meaning the complement of the string (use the 'c' modifier for that). See_Also $(LREF translate), $(REF replace, std,array), $(REF substitute, std,algorithm,iteration)"
  },
  "phobos/std/string/Functions/translate.html": {
    "href": "phobos/std/string/Functions/translate.html",
    "title": "Overloads for - translate | Marmos Demo",
    "keywords": "Overloads for - translate Module std.string translate(str, transTable, toRemove) <bug: unknown> translate( <bug: unknown> str, <bug: unknown> transTable, <bug: unknown> toRemove ) Replaces the characters in str which are keys in transTable with their corresponding values in transTable . transTable is an AA where its keys are dchar and its values are either dchar or some type of string. Also, if toRemove is given, the characters in it are removed from str prior to translation. str itself is unaltered. A copy with the changes is returned. See_Also $(LREF tr), $(REF replace, std,array), $(REF substitute, std,algorithm,iteration) Params str <bug: unknown> The original string. transTable <bug: unknown> The AA indicating which characters to replace and what to replace them with. toRemove <bug: unknown> The characters to remove from the string. translate(str, transTable, toRemove) <bug: unknown> translate( <bug: unknown> str, <bug: unknown> transTable, <bug: unknown> toRemove ) Ditto translate(str, transTable, toRemove, buffer) void translate( <bug: unknown> str, <bug: unknown> transTable, <bug: unknown> toRemove, Buffer buffer ) This is an overload of translate which takes an existing buffer to write the contents to. Params str <bug: unknown> The original string. transTable <bug: unknown> The AA indicating which characters to replace and what to replace them with. toRemove <bug: unknown> The characters to remove from the string. buffer Buffer An output range to write the contents to. translate(str, transTable, toRemove, buffer) void translate( <bug: unknown> str, <bug: unknown> transTable, <bug: unknown> toRemove, Buffer buffer ) Ditto translate(str, transTable, toRemove) <bug: unknown> translate( <bug: unknown> str, <bug: unknown> transTable, <bug: unknown> toRemove ) This is an $(I $(RED ASCII-only)) overload of $(LREF translate). It will $(I not) work with Unicode. It exists as an optimization for the cases where Unicode processing is not necessary. Unlike the other overloads of $(LREF translate), this one does not take an AA. Rather, it takes a string generated by $(LREF makeTransTable). The array generated by makeTransTable is 256 elements long such that the index is equal to the ASCII character being replaced and the value is equal to the character that it's being replaced with. Note that translate does not decode any of the characters, so you can actually pass it Extended ASCII characters if you want to (ASCII only actually uses 128 characters), but be warned that Extended ASCII characters are not valid Unicode and therefore will result in a UTFException being thrown from most other Phobos functions. Also, because no decoding occurs, it is possible to use this overload to translate ASCII characters within a proper UTF-8 string without altering the other, non-ASCII characters. It's replacing any code unit greater than 127 with another code unit or replacing any code unit with another code unit greater than 127 which will cause UTF validation issues. See_Also $(LREF tr), $(REF replace, std,array), $(REF substitute, std,algorithm,iteration) Params str <bug: unknown> The original string. transTable <bug: unknown> The string indicating which characters to replace and what to replace them with. It is generated by $(LREF makeTransTable). toRemove <bug: unknown> The characters to remove from the string. translate(str, transTable, toRemove, buffer) void translate( <bug: unknown> str, <bug: unknown> transTable, <bug: unknown> toRemove, Buffer buffer ) This is an $(I $(RED ASCII-only)) overload of translate which takes an existing buffer to write the contents to. Params str <bug: unknown> The original string. transTable <bug: unknown> The string indicating which characters to replace and what to replace them with. It is generated by $(LREF makeTransTable). toRemove <bug: unknown> The characters to remove from the string. buffer Buffer An output range to write the contents to."
  },
  "phobos/std/string/Functions/translateImpl.html": {
    "href": "phobos/std/string/Functions/translateImpl.html",
    "title": "Overloads for - translateImpl | Marmos Demo",
    "keywords": "Overloads for - translateImpl Module std.string translateImpl(str, transTable, toRemove, buffer) void translateImpl( <bug: unknown> str, T transTable, <bug: unknown> toRemove, Buffer buffer )"
  },
  "phobos/std/string/Functions/wrap.html": {
    "href": "phobos/std/string/Functions/wrap.html",
    "title": "Overloads for - wrap | Marmos Demo",
    "keywords": "Overloads for - wrap Module std.string wrap(s, columns, firstindent, indent, tabsize) S wrap( S s, size_t columns, S firstindent, S indent, size_t tabsize ) Wrap text into a paragraph. The input text string s is formed into a paragraph by breaking it up into a sequence of lines, delineated by \\n, such that the number of columns is not exceeded on each line. The last line is terminated with a \\n. Params: s = text string to be wrapped columns = maximum number of columns in the paragraph firstindent = string used to indent first line of the paragraph indent = string to use to indent following lines of the paragraph tabsize = column spacing of tabs in firstindent[] and indent[] Returns: resulting paragraph as an allocated string"
  },
  "phobos/std/string/LineSplitter/Functions/front.html": {
    "href": "phobos/std/string/LineSplitter/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.string Parent LineSplitter front() <bug: unknown> front( )"
  },
  "phobos/std/string/LineSplitter/Functions/popFront.html": {
    "href": "phobos/std/string/LineSplitter/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.string Parent LineSplitter popFront() void popFront( )"
  },
  "phobos/std/string/LineSplitter/Functions/save.html": {
    "href": "phobos/std/string/LineSplitter/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.string Parent LineSplitter save() <bug: unknown> save( )"
  },
  "phobos/std/string/Overview.html": {
    "href": "phobos/std/string/Overview.html",
    "title": "Module - std.string | Marmos Demo",
    "keywords": "Module - std.string About String handling functions. $(SCRIPT inhibitQuickIndex = 1;) $(DIVC quickindex, $(BOOKTABLE , $(TR $(TH Category) $(TH Functions) ) $(TR $(TDNW Searching) $(TD $(MYREF column) $(MYREF indexOf) $(MYREF indexOfAny) $(MYREF indexOfNeither) $(MYREF lastIndexOf) $(MYREF lastIndexOfAny) $(MYREF lastIndexOfNeither) ) ) $(TR $(TDNW Comparison) $(TD $(MYREF isNumeric) ) ) $(TR $(TDNW Mutation) $(TD $(MYREF capitalize) ) ) $(TR $(TDNW Pruning and Filling) $(TD $(MYREF center) $(MYREF chomp) $(MYREF chompPrefix) $(MYREF chop) $(MYREF detabber) $(MYREF detab) $(MYREF entab) $(MYREF entabber) $(MYREF leftJustify) $(MYREF outdent) $(MYREF rightJustify) $(MYREF strip) $(MYREF stripLeft) $(MYREF stripRight) $(MYREF wrap) ) ) $(TR $(TDNW Substitution) $(TD $(MYREF abbrev) $(MYREF soundex) $(MYREF soundexer) $(MYREF succ) $(MYREF tr) $(MYREF translate) ) ) $(TR $(TDNW Miscellaneous) $(TD $(MYREF assumeUTF) $(MYREF fromStringz) $(MYREF lineSplitter) $(MYREF representation) $(MYREF splitLines) $(MYREF toStringz) ) ))) Objects of types string , wstring , and dstring are value types and cannot be mutated element-by-element. For using mutation during building strings, use char[] , wchar[] , or dchar[] . The xxxstring types are preferable because they don't exhibit undesired aliasing, thus making code more robust. The following functions are publicly imported $(BOOKTABLE , $(TR $(TH Module) $(TH Functions) ) $(LEADINGROW Publicly imported functions) $(TR $(TD std.algorithm) $(TD $(REF_SHORT cmp, std,algorithm,comparison) $(REF_SHORT count, std,algorithm,searching) $(REF_SHORT endsWith, std,algorithm,searching) $(REF_SHORT startsWith, std,algorithm,searching) )) $(TR $(TD std.array) $(TD $(REF_SHORT join, std,array) $(REF_SHORT replace, std,array) $(REF_SHORT replaceInPlace, std,array) $(REF_SHORT split, std,array) $(REF_SHORT empty, std,array) )) $(TR $(TD std.format) $(TD $(REF_SHORT format, std,format) $(REF_SHORT sformat, std,format) )) $(TR $(TD std.uni) $(TD $(REF_SHORT icmp, std,uni) $(REF_SHORT toLower, std,uni) $(REF_SHORT toLowerInPlace, std,uni) $(REF_SHORT toUpper, std,uni) $(REF_SHORT toUpperInPlace, std,uni) )) ) There is a rich set of functions for string handling defined in other modules. Functions related to Unicode and ASCII are found in $(MREF std, uni) and $(MREF std, ascii), respectively. Other functions that have a wider generality than just strings can be found in $(MREF std, algorithm) and $(MREF std, range). See_Also $(LIST $(MREF std, algorithm) and $(MREF std, range) for generic range algorithms , $(MREF std, ascii) for functions that work with ASCII strings , $(MREF std, uni) for functions that work with unicode strings ) Copyright: Copyright The D Language Foundation 2007-. License: $(HTTP boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP digitalmars.com, Walter Bright), $(HTTP erdani.org, Andrei Alexandrescu), $(HTTP jmdavisprog.com, Jonathan M Davis), and David L. 'SpottedTiger' Davis Source: $(PHOBOSSRC std/string.d) Aliases Name Description CaseSensitive Flag indicating whether a search is case-sensitive. KeepTerminator Split s into an array of lines according to the unicode standard using '\\r' , '\\n' , \"\\r\\n\" , $(REF lineSep, std,uni), $(REF paraSep, std,uni), U+0085 (NEL), '\\v' and '\\f' as delimiters. If keepTerm is set to KeepTerminator.yes , then the delimiter is included in the strings returned. Classes Name Description StringException Exception thrown on errors in std.string functions. Structs Name Description LineSplitter TestAliasedString Functions Name Description abbrev Construct an associative array consisting of all abbreviations that uniquely map to the strings in values. assumeUTF Assume the given array of integers arr is a well-formed UTF string and return it typed as a UTF string. capitalize Capitalize the first character of s and convert the rest of s to lowercase. center Center s in a field width characters wide. fillChar is the character that will be used to fill up the space in the field that s doesn't fill. centerJustifier Center justify r in a field width characters wide. fillChar is the character that will be used to fill up the space in the field that r doesn't fill. chomp If str ends with delimiter , then str is returned without delimiter on its end. If it str does $(I not) end with delimiter , then it is returned unchanged. chompPrefix If str starts with delimiter , then the part of str following delimiter is returned. If str does $(I not) start with chop Returns str without its last character, if there is one. If str ends with \"\\r\\n\" , then both are removed. If str is empty, then it is returned unchanged. column Compute column number at the end of the printed form of the string, assuming the string starts in the leftmost column, which is numbered starting from 0. detab Replace each tab character in s with the number of spaces necessary to align the following character at the next tab stop. detabber Replace each tab character in r with the number of spaces necessary to align the following character at the next tab stop. entab Replaces spaces in s with the optimal number of tabs. All spaces and tabs at the end of a line are removed. entabber Replaces spaces in range r with the optimal number of tabs. All spaces and tabs at the end of a line are removed. fromStringz indexOf Searches for character in range. indexOfAny Returns the index of the first occurrence of any of the elements in $(D needles) in haystack . If no element of needles is found, then -1 is returned. The startIdx slices haystack in the following way $(D haystack[startIdx .. $]). startIdx represents a codeunit index in haystack . If the sequence ending at startIdx does not represent a well formed codepoint, then a $(REF UTFException, std,utf) may be thrown. indexOfAnyNeitherImpl indexOfNeither Returns the index of the first occurrence of any character not an elements in needles in haystack . If all element of haystack are element of needles -1 is returned. isNumeric Takes a string s and determines if it represents a number. This function also takes an optional parameter, bAllowSep , which will accept the separator characters ',' and '__' within the string. But these characters should be stripped from the string before using any of the conversion functions like to!int() , to!float() , and etc else an error will occur. lastIndexOf lastIndexOfAny Returns the index of the last occurrence of any of the elements in $(D needles) in haystack . If no element of needles is found, then -1 is returned. The stopIdx slices haystack in the following way $(D s[0 .. stopIdx]). stopIdx represents a codeunit index in haystack . If the sequence ending at startIdx does not represent a well formed codepoint, then a $(REF UTFException, std,utf) may be thrown. lastIndexOfNeither Returns the last index of the first occurence of any character that is not an elements in needles in haystack . If all element of haystack are element of needles -1 is returned. leftJustifier Left justify s in a field width characters wide. fillChar is the character that will be used to fill up the space in the field that s doesn't fill. leftJustify Left justify s in a field width characters wide. fillChar is the character that will be used to fill up the space in the field that s doesn't fill. lineSplitter Split an array or slicable range of characters into a range of lines using '\\r' , '\\n' , '\\v' , '\\f' , \"\\r\\n\" , $(REF lineSep, std,uni), $(REF paraSep, std,uni) and '\\u0085' (NEL) as delimiters. If keepTerm is set to Yes.keepTerminator , then the delimiter is included in the slices returned. makeTrans Do same thing as $(LREF makeTransTable) but allocate the translation table on the GC heap. makeTransTable Construct 256 character translation table, where characters in from[] are replaced by corresponding characters in to[]. outdent Removes one level of indentation from a multi-line string. representation Returns the representation of a string, which has the same type as the string except the character type is replaced by ubyte , ushort , or uint depending on the character width. rightJustifier Right justify s in a field width characters wide. fillChar is the character that will be used to fill up the space in the field that s doesn't fill. rightJustify Right justify s in a field width characters wide. fillChar is the character that will be used to fill up the space in the field that s doesn't fill. soundex Like $(LREF soundexer), but with different parameters and return value. soundexer Soundex algorithm. splitLines ditto strip Strips both leading and trailing whitespace (as defined by $(REF isWhite, std,uni)) or as specified in the second argument. stripLeft Strips leading whitespace (as defined by $(REF isWhite, std,uni)) or as specified in the second argument. stripRight Strips trailing whitespace (as defined by $(REF isWhite, std,uni)) or as specified in the second argument. succ Return string that is the 'successor' to s[]. If the rightmost character is a-zA-Z0-9, it is incremented within its case or digits. If it generates a carry, the process is repeated with the one to its immediate left. testAliasedString toStringz tr Replaces the characters in str which are in from with the the corresponding characters in to and returns the resulting string. translate Replaces the characters in str which are keys in transTable with their corresponding values in transTable . transTable is an AA where its keys are dchar and its values are either dchar or some type of string. Also, if toRemove is given, the characters in it are removed from str prior to translation. str itself is unaltered. A copy with the changes is returned. translateImpl wrap Wrap text into a paragraph."
  },
  "phobos/std/string/Structs/LineSplitter.html": {
    "href": "phobos/std/string/Structs/LineSplitter.html",
    "title": "Struct - LineSplitter | Marmos Demo",
    "keywords": "Struct - LineSplitter Module std.string public struct LineSplitter { // alias IndexType = <todo: marmos support pending>; // <bug: unknown> front( ) ; // void popFront( ) ; // <bug: unknown> save( ) ; // bool empty; // IndexType iEnd; // IndexType iNext; // IndexType iStart; } Aliases Name Description IndexType Functions Name Description front popFront save Variables Name Description empty iEnd iNext iStart"
  },
  "phobos/std/string/Structs/TestAliasedString.html": {
    "href": "phobos/std/string/Structs/TestAliasedString.html",
    "title": "Struct - TestAliasedString | Marmos Demo",
    "keywords": "Struct - TestAliasedString Module std.string public struct TestAliasedString { // string get( ) ; } Functions Name Description get"
  },
  "phobos/std/string/TestAliasedString/Functions/get.html": {
    "href": "phobos/std/string/TestAliasedString/Functions/get.html",
    "title": "Overloads for - get | Marmos Demo",
    "keywords": "Overloads for - get Module std.string Parent TestAliasedString get() string get( )"
  },
  "phobos/std/sumtype/Classes/MatchException.html": {
    "href": "phobos/std/sumtype/Classes/MatchException.html",
    "title": "Class - MatchException | Marmos Demo",
    "keywords": "Class - MatchException Module std.sumtype public class MatchException { } About Thrown by [tryMatch] when an unhandled type is encountered. Not available when compiled with -betterC ."
  },
  "phobos/std/sumtype/Functions/destroyIfOwner.html": {
    "href": "phobos/std/sumtype/Functions/destroyIfOwner.html",
    "title": "Overloads for - destroyIfOwner | Marmos Demo",
    "keywords": "Overloads for - destroyIfOwner Module std.sumtype destroyIfOwner(value) void destroyIfOwner( T value )"
  },
  "phobos/std/sumtype/Functions/isClose.html": {
    "href": "phobos/std/sumtype/Functions/isClose.html",
    "title": "Overloads for - isClose | Marmos Demo",
    "keywords": "Overloads for - isClose Module std.sumtype isClose(lhs, rhs) bool isClose( double lhs, double rhs )"
  },
  "phobos/std/sumtype/Functions/match.html": {
    "href": "phobos/std/sumtype/Functions/match.html",
    "title": "Overloads for - match | Marmos Demo",
    "keywords": "Overloads for - match Module std.sumtype match(args) <bug: unknown> match( SumTypes args ) auto Calls a type-appropriate function with the value held in a [SumType]. For each possible type the [SumType] can hold, the given handlers are checked, in order, to see whether they accept a single argument of that type. The first one that does is chosen as the match for that type. (Note that the first match may not always be the most exact match. See \"Avoiding unintentional matches\" for one common pitfall.) Every type must have a matching handler, and every handler must match at least one type. This is enforced at compile time. Handlers may be functions, delegates, or objects with opCall overloads. If a function with more than one overload is given as a handler, all of the overloads are considered as potential matches. Templated handlers are also accepted, and will match any type for which they can be implicitly instantiated. (Remember that a $(DDSUBLINK spec/expression,function_literals, function literal) without an explicit argument type is considered a template.) If multiple [SumType]s are passed to match, their values are passed to the handlers as separate arguments, and matching is done for each possible combination of value types. See \"Multiple dispatch\" for an example. Returns The value returned from the handler that matches the currently-held type. See_Also: $(REF visit, std,variant)"
  },
  "phobos/std/sumtype/Functions/matchImpl.html": {
    "href": "phobos/std/sumtype/Functions/matchImpl.html",
    "title": "Overloads for - matchImpl | Marmos Demo",
    "keywords": "Overloads for - matchImpl Module std.sumtype matchImpl(args) <bug: unknown> matchImpl( SumTypes args ) auto"
  },
  "phobos/std/sumtype/Functions/stride.html": {
    "href": "phobos/std/sumtype/Functions/stride.html",
    "title": "Overloads for - stride | Marmos Demo",
    "keywords": "Overloads for - stride Module std.sumtype stride() size_t stride( )"
  },
  "phobos/std/sumtype/Functions/tryMatch.html": {
    "href": "phobos/std/sumtype/Functions/tryMatch.html",
    "title": "Overloads for - tryMatch | Marmos Demo",
    "keywords": "Overloads for - tryMatch Module std.sumtype tryMatch(args) <bug: unknown> tryMatch( SumTypes args ) auto Attempts to call a type-appropriate function with the value held in a [SumType], and throws on failure. Matches are chosen using the same rules as [match], but are not required to be exhaustive—in other words, a type (or combination of types) is allowed to have no matching handler. If a type without a handler is encountered at runtime, a [MatchException] is thrown. Not available when compiled with -betterC . Returns The value returned from the handler that matches the currently-held type, if a handler was given for that type. Throws [MatchException], if the currently-held type has no matching handler. See_Also: $(REF tryVisit, std,variant)"
  },
  "phobos/std/sumtype/Overview.html": {
    "href": "phobos/std/sumtype/Overview.html",
    "title": "Module - std.sumtype | Marmos Demo",
    "keywords": "Module - std.sumtype About [SumType] is a generic discriminated union implementation that uses design-by-introspection to generate safe and efficient code. Its features include: !!Unsupported comment block type: marmos.generic.model.DocCommentUnorderedListBlock!! $(H3 List of examples) !!Unsupported comment block type: marmos.generic.model.DocCommentUnorderedListBlock!! License: Boost License 1.0 Authors: Paul Backus Source: $(PHOBOSSRC std/sumtype.d) Classes Name Description MatchException Thrown by [tryMatch] when an unhandled type is encountered. Structs Name Description SumType A tagged union that can hold a single value from any of a specified set of types. TagTuple This Placeholder used to refer to the enclosing [SumType]. Functions Name Description destroyIfOwner isClose match Calls a type-appropriate function with the value held in a [SumType]. matchImpl stride tryMatch Attempts to call a type-appropriate function with the value held in a [SumType], and throws on failure. Variables Name Description canMatch True if handler is a potential match for Ts , otherwise false. hasPostblit isAssignableTo isHashable isInout isSumType True if T is a [SumType] or implicitly converts to one, otherwise false. isSumTypeInstance True if T is an instance of the SumType template, otherwise false. typeCount"
  },
  "phobos/std/sumtype/Structs/SumType.html": {
    "href": "phobos/std/sumtype/Structs/SumType.html",
    "title": "Struct - SumType | Marmos Demo",
    "keywords": "Struct - SumType Module std.sumtype public struct SumType { // alias Tag = <todo: marmos support pending>; // The types a `SumType` can hold. alias Types = <todo: marmos support pending>; // alias unsignedInts = <todo: marmos support pending>; // Assigns a value to a `SumType` . SumType opAssign( T rhs ) ; // Assigns a value to a `SumType` . SumType opAssign( T rhs ) ; // Copies the value from another `SumType` into this one. SumType opAssign( SumType rhs ) ; // Moves the value from another `SumType` into this one. SumType opAssign( SumType rhs ) ; // Returns the hash of the `SumType` 's current value. size_t toHash( ) ; // __enumMember includeDtor; // Storage storage; // Tag tag; } About A tagged union that can hold a single value from any of a specified set of types. The value in a SumType can be operated on using [pattern matching][match]. To avoid ambiguity, duplicate types are not allowed (but see the \"basic usage\" example for a workaround). The special type This can be used as a placeholder to create self-referential types, just like with Algebraic . See the \"Recursive SumTypes\" example for usage. A SumType is initialized by default to hold the .init value of its first member type, just like a regular union. The version identifier SumTypeNoDefaultCtor can be used to disable this behavior. See_Also: $(REF Algebraic, std,variant) Aliases Name Description Tag Types The types a SumType can hold. unsignedInts Functions Name Description opAssign Assigns a value to a SumType . toHash Returns the hash of the SumType 's current value. Variables Name Description includeDtor storage tag"
  },
  "phobos/std/sumtype/Structs/TagTuple.html": {
    "href": "phobos/std/sumtype/Structs/TagTuple.html",
    "title": "Struct - TagTuple | Marmos Demo",
    "keywords": "Struct - TagTuple Module std.sumtype public struct TagTuple { // TagTuple fromCaseId( size_t caseId ) static; // size_t toCaseId( ) ; // <bug: unknown> tags; } Functions Name Description fromCaseId toCaseId Variables Name Description tags"
  },
  "phobos/std/sumtype/Structs/This.html": {
    "href": "phobos/std/sumtype/Structs/This.html",
    "title": "Struct - This | Marmos Demo",
    "keywords": "Struct - This Module std.sumtype public struct This { } About Placeholder used to refer to the enclosing [SumType]."
  },
  "phobos/std/sumtype/SumType/Functions/opAssign.html": {
    "href": "phobos/std/sumtype/SumType/Functions/opAssign.html",
    "title": "Overloads for - opAssign | Marmos Demo",
    "keywords": "Overloads for - opAssign Module std.sumtype Parent SumType opAssign(rhs) SumType opAssign( T rhs ) Assigns a value to a SumType . If any of the SumType 's members other than the one being assigned to contain pointers or references, it is possible for the assignment to cause memory corruption (see the \"Memory corruption\" example below for an illustration of how). Therefore, such assignments are considered @system . An individual assignment can be @trusted if the caller can guarantee that there are no outstanding references to any SumType members that contain pointers or references at the time the assignment occurs. Examples $(DIVID memory-corruption, $(H3 Memory corruption)) This example shows how assignment to a SumType can be used to cause memory corruption in @system code. In @safe code, the assignment s = 123 would not be allowed. --- SumType!(int*, int) s = new int; s.tryMatch!( (ref int* p) { s = 123; // overwrites p return p; // undefined behavior } ); --- opAssign(rhs) SumType opAssign( T rhs ) Assigns a value to a SumType . If any of the SumType 's members other than the one being assigned to contain pointers or references, it is possible for the assignment to cause memory corruption (see the \"Memory corruption\" example below for an illustration of how). Therefore, such assignments are considered @system . An individual assignment can be @trusted if the caller can guarantee that there are no outstanding references to any SumType members that contain pointers or references at the time the assignment occurs. Examples $(DIVID memory-corruption, $(H3 Memory corruption)) This example shows how assignment to a SumType can be used to cause memory corruption in @system code. In @safe code, the assignment s = 123 would not be allowed. --- SumType!(int*, int) s = new int; s.tryMatch!( (ref int* p) { s = 123; // overwrites p return p; // undefined behavior } ); --- opAssign(rhs) SumType opAssign( SumType rhs ) Copies the value from another SumType into this one. See the value-assignment overload for details on @safe ty. Copy assignment is @disable d if any of Types is non-copyable. opAssign(rhs) SumType opAssign( SumType rhs ) Moves the value from another SumType into this one. See the value-assignment overload for details on @safe ty."
  },
  "phobos/std/sumtype/SumType/Functions/toHash.html": {
    "href": "phobos/std/sumtype/SumType/Functions/toHash.html",
    "title": "Overloads for - toHash | Marmos Demo",
    "keywords": "Overloads for - toHash Module std.sumtype Parent SumType toHash() size_t toHash( ) Returns the hash of the SumType 's current value. Not available when compiled with -betterC ."
  },
  "phobos/std/sumtype/TagTuple/Functions/fromCaseId.html": {
    "href": "phobos/std/sumtype/TagTuple/Functions/fromCaseId.html",
    "title": "Overloads for - fromCaseId | Marmos Demo",
    "keywords": "Overloads for - fromCaseId Module std.sumtype Parent TagTuple fromCaseId(caseId) TagTuple fromCaseId( size_t caseId ) static"
  },
  "phobos/std/sumtype/TagTuple/Functions/toCaseId.html": {
    "href": "phobos/std/sumtype/TagTuple/Functions/toCaseId.html",
    "title": "Overloads for - toCaseId | Marmos Demo",
    "keywords": "Overloads for - toCaseId Module std.sumtype Parent TagTuple toCaseId() size_t toCaseId( )"
  },
  "phobos/std/system/Overview.html": {
    "href": "phobos/std/system/Overview.html",
    "title": "Module - std.system | Marmos Demo",
    "keywords": "Module - std.system About Information about the target operating system, environment, and CPU. Copyright: Copyright The D Language Foundation 2000 - 2011 License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP digitalmars.com, Walter Bright) and $(HTTP jmdavisprog.com, Jonathan M Davis) Source: $(PHOBOSSRC std/system.d) Variables Name Description endian The endianness that the program was compiled for. instructionSetArchitecture The instruction set architecture that the program was compiled for. os The OS that the program was compiled for."
  },
  "phobos/std/traits/Functions/adjustIdent.html": {
    "href": "phobos/std/traits/Functions/adjustIdent.html",
    "title": "Overloads for - adjustIdent | Marmos Demo",
    "keywords": "Overloads for - adjustIdent Module std.traits adjustIdent(s) string adjustIdent( string s ) static"
  },
  "phobos/std/traits/Functions/cstyle.html": {
    "href": "phobos/std/traits/Functions/cstyle.html",
    "title": "Overloads for - cstyle | Marmos Demo",
    "keywords": "Overloads for - cstyle Module std.traits cstyle(__anonymous) int cstyle( int __anonymous )"
  },
  "phobos/std/traits/Functions/dip1000Test.html": {
    "href": "phobos/std/traits/Functions/dip1000Test.html",
    "title": "Overloads for - dip1000Test | Marmos Demo",
    "keywords": "Overloads for - dip1000Test Module std.traits dip1000Test(x) <bug: unknown> dip1000Test( int x ) auto"
  },
  "phobos/std/traits/Functions/dstyle.html": {
    "href": "phobos/std/traits/Functions/dstyle.html",
    "title": "Overloads for - dstyle | Marmos Demo",
    "keywords": "Overloads for - dstyle Module std.traits dstyle() int dstyle( )"
  },
  "phobos/std/traits/Functions/extractAttribFlags.html": {
    "href": "phobos/std/traits/Functions/extractAttribFlags.html",
    "title": "Overloads for - extractAttribFlags | Marmos Demo",
    "keywords": "Overloads for - extractAttribFlags Module std.traits extractAttribFlags() FunctionAttribute extractAttribFlags( )"
  },
  "phobos/std/traits/Functions/freeFunc.html": {
    "href": "phobos/std/traits/Functions/freeFunc.html",
    "title": "Overloads for - freeFunc | Marmos Demo",
    "keywords": "Overloads for - freeFunc Module std.traits freeFunc(__anonymous) void freeFunc( string __anonymous )"
  },
  "phobos/std/traits/Functions/issue20054.html": {
    "href": "phobos/std/traits/Functions/issue20054.html",
    "title": "Overloads for - issue20054 | Marmos Demo",
    "keywords": "Overloads for - issue20054 Module std.traits issue20054() void issue20054( )"
  },
  "phobos/std/traits/Functions/lvalueOf.html": {
    "href": "phobos/std/traits/Functions/lvalueOf.html",
    "title": "Overloads for - lvalueOf | Marmos Demo",
    "keywords": "Overloads for - lvalueOf Module std.traits lvalueOf(__anonymous) T lvalueOf( __InoutWorkaroundStruct __anonymous ) ditto"
  },
  "phobos/std/traits/Functions/novar.html": {
    "href": "phobos/std/traits/Functions/novar.html",
    "title": "Overloads for - novar | Marmos Demo",
    "keywords": "Overloads for - novar Module std.traits novar() int novar( )"
  },
  "phobos/std/traits/Functions/rvalueOf.html": {
    "href": "phobos/std/traits/Functions/rvalueOf.html",
    "title": "Overloads for - rvalueOf | Marmos Demo",
    "keywords": "Overloads for - rvalueOf Module std.traits rvalueOf(__anonymous) T rvalueOf( __InoutWorkaroundStruct __anonymous ) Creates an lvalue or rvalue of type T for typeof(...) and $(DDSUBLINK spec/traits, compiles, __traits(compiles, ...) ) purposes. No actual value is returned. Params T <parameter not found> The type to transform Note: Trying to use returned value will result in a \"Symbol Undefined\" error at link time."
  },
  "phobos/std/traits/Functions/sc.html": {
    "href": "phobos/std/traits/Functions/sc.html",
    "title": "Overloads for - sc | Marmos Demo",
    "keywords": "Overloads for - sc Module std.traits sc(__anonymous, __anonymous, __anonymous, __anonymous, __anonymous) int sc( int __anonymous, int __anonymous, int __anonymous, int __anonymous, int __anonymous )"
  },
  "phobos/std/traits/Functions/select.html": {
    "href": "phobos/std/traits/Functions/select.html",
    "title": "Overloads for - select | Marmos Demo",
    "keywords": "Overloads for - select Module std.traits select(a, b) A select( A a, B b ) Select one of two functions to run via template parameter. Params cond <parameter not found> A bool which determines which function is run a A The first function b B The second function Returns a without evaluating b if cond is true . Otherwise, returns b without evaluating a . select(a, b) B select( A a, B b ) Ditto"
  },
  "phobos/std/traits/Functions/typesafe.html": {
    "href": "phobos/std/traits/Functions/typesafe.html",
    "title": "Overloads for - typesafe | Marmos Demo",
    "keywords": "Overloads for - typesafe Module std.traits typesafe(__anonymous) int typesafe( <bug: unknown> __anonymous )"
  },
  "phobos/std/traits/Overview.html": {
    "href": "phobos/std/traits/Overview.html",
    "title": "Module - std.traits | Marmos Demo",
    "keywords": "Module - std.traits About Templates which extract information about types and symbols at compile time. $(SCRIPT inhibitQuickIndex = 1;) $(DIVC quickindex, $(BOOKTABLE , $(TR $(TH Category) $(TH Templates)) $(TR $(TD Symbol Name traits) $(TD $(LREF fullyQualifiedName) $(LREF mangledName) $(LREF moduleName) $(LREF packageName) )) $(TR $(TD Function traits) $(TD $(LREF isFunction) $(LREF arity) $(LREF functionAttributes) $(LREF hasFunctionAttributes) $(LREF functionLinkage) $(LREF FunctionTypeOf) $(LREF isSafe) $(LREF isUnsafe) $(LREF isFinal) $(LREF ParameterDefaults) $(LREF ParameterIdentifierTuple) $(LREF ParameterStorageClassTuple) $(LREF Parameters) $(LREF ReturnType) $(LREF SetFunctionAttributes) $(LREF variadicFunctionStyle) )) $(TR $(TD Aggregate Type traits) $(TD $(LREF BaseClassesTuple) $(LREF BaseTypeTuple) $(LREF classInstanceAlignment) $(LREF EnumMembers) $(LREF FieldNameTuple) $(LREF Fields) $(LREF hasAliasing) $(LREF hasElaborateAssign) $(LREF hasElaborateCopyConstructor) $(LREF hasElaborateDestructor) $(LREF hasElaborateMove) $(LREF hasIndirections) $(LREF hasMember) $(LREF hasStaticMember) $(LREF hasNested) $(LREF hasUnsharedAliasing) $(LREF InterfacesTuple) $(LREF isInnerClass) $(LREF isNested) $(LREF MemberFunctionsTuple) $(LREF RepresentationTypeTuple) $(LREF TemplateArgsOf) $(LREF TemplateOf) $(LREF TransitiveBaseTypeTuple) )) $(TR $(TD Type Conversion) $(TD $(LREF CommonType) $(LREF AllImplicitConversionTargets) $(LREF ImplicitConversionTargets) $(LREF CopyTypeQualifiers) $(LREF CopyConstness) $(LREF isAssignable) $(LREF isCovariantWith) $(LREF isImplicitlyConvertible) $(LREF isQualifierConvertible) )) $(TR $(TD Type Constructors) $(TD $(LREF InoutOf) $(LREF ConstOf) $(LREF SharedOf) $(LREF SharedInoutOf) $(LREF SharedConstOf) $(LREF SharedConstInoutOf) $(LREF ImmutableOf) $(LREF QualifierOf) )) $(TR $(TD Categories of types) $(TD $(LREF allSameType) $(LREF ifTestable) $(LREF isType) $(LREF isAggregateType) $(LREF isArray) $(LREF isAssociativeArray) $(LREF isAutodecodableString) $(LREF isBasicType) $(LREF isBoolean) $(LREF isBuiltinType) $(LREF isCopyable) $(LREF isDynamicArray) $(LREF isEqualityComparable) $(LREF isFloatingPoint) $(LREF isIntegral) $(LREF isNarrowString) $(LREF isConvertibleToString) $(LREF isNumeric) $(LREF isOrderingComparable) $(LREF isPointer) $(LREF isScalarType) $(LREF isSigned) $(LREF isSIMDVector) $(LREF isSomeChar) $(LREF isSomeString) $(LREF isStaticArray) $(LREF isUnsigned) )) $(TR $(TD Type behaviours) $(TD $(LREF isAbstractClass) $(LREF isAbstractFunction) $(LREF isCallable) $(LREF isDelegate) $(LREF isExpressions) $(LREF isFinalClass) $(LREF isFinalFunction) $(LREF isFunctionPointer) $(LREF isInstanceOf) $(LREF isIterable) $(LREF isMutable) $(LREF isSomeFunction) $(LREF isTypeTuple) )) $(TR $(TD General Types) $(TD $(LREF ForeachType) $(LREF KeyType) $(LREF Largest) $(LREF mostNegative) $(LREF OriginalType) $(LREF PointerTarget) $(LREF Signed) $(LREF Unconst) $(LREF Unshared) $(LREF Unqual) $(LREF Unsigned) $(LREF ValueType) $(LREF Promoted) )) $(TR $(TD Misc) $(TD $(LREF lvalueOf) $(LREF rvalueOf) $(LREF Select) $(LREF select) )) $(TR $(TD User-Defined Attributes) $(TD $(LREF hasUDA) $(LREF getUDAs) $(LREF getSymbolsByUDA) )) ) ) Copyright: Copyright The D Language Foundation 2005 - 2009. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP digitalmars.com, Walter Bright), Tomasz Stachowiak (isExpressions), $(HTTP erdani.org, Andrei Alexandrescu), Shin Fujishiro, $(HTTP octarineparrot.com, Robert Clipsham), $(HTTP klickverbot.at, David Nadlinger), Kenji Hara, Shoichi Kato Source: $(PHOBOSSRC std/traits.d) Aliases Name Description CentTypeList CharTypeList ComplexTypeList ConstOf CopyConstness Returns the type of ToType with the \"constness\" of FromType . A type's $(B constness) refers to whether it is const , immutable , or inout . If FromType has no constness, the returned type will be the same as ToType . CopyTypeQualifiers Copies type qualifiers from FromType to ToType . DynamicArrayTypeOf Fields Get as a tuple the types of the fields of a struct, class, or union. This consists of the fields that take up memory space, excluding the hidden fields like the virtual function table pointer or a context pointer for nested types. If T isn't a struct, class, interface or union returns a tuple with one element T . FieldTypeTuple Alternate name for $(LREF Fields), kept for legacy compatibility. FloatingPointTypeList ForeachType Returns the inferred type of the loop variable when a variable of type T is iterated over using a foreach loop with a single loop variable and automatically inferred return type. Note that this may not be the same as std.range.ElementType!Range in the case of narrow strings, or if T has both opApply and a range interface. FuncSym ditto getUDAs Gets the matching $(DDSUBLINK spec/attribute, uda, user-defined attributes) from the given symbol. hasElaborateCopyConstructor True if S or any type embedded directly in the representation of S defines an elaborate copy constructor. Elaborate copy constructors are introduced by defining this(this) for a struct . hasElaborateDestructor True if S or any type directly embedded in the representation of S defines an elaborate destructor. Elaborate destructors are introduced by defining ~this() for a $(D struct). hasElaborateMove True if S or any type embedded directly in the representation of S defines elaborate move semantics. Elaborate move semantics are introduced by defining opPostMove(ref typeof(this)) for a struct . hasIndirections Returns true if and only if T 's representation includes at least one of the following: $(OL $(LI a raw pointer U* ;) $(LI an array U[] ;) $(LI a reference to a class type C ;) $(LI an associative array;) $(LI a delegate;) $(LI a [context pointer][isNested].)) Identity ImaginaryTypeList ImmutableOf InoutOf IntegralTypeList isExpressionTuple Alternate name for $(LREF isExpressions), kept for legacy compatibility. KeyType Get the Key type of an Associative Array. ModifyTypePreservingTQ NumericTypeList OriginalType Strips off all enum s from type T . ParameterDefaultValueTuple Alternate name for $(LREF ParameterDefaults), kept for legacy compatibility. ParameterTypeTuple Alternate name for $(LREF Parameters), kept for legacy compatibility. parentOf parentOf PointerTarget Returns the target type of a pointer. Pointify Promoted Get the type that a scalar type T will $(LINK2 $(ROOT_DIR)spec/type.html#integer-promotions, promote) to in multi-term arithmetic expressions. Select Aliases itself to T[0] if the boolean condition is true and to T[1] otherwise. SetFunctionAttributes Ditto SharedConstInoutOf SharedConstOf SharedInoutOf SharedOf Signed Returns the corresponding signed type for T. T must be a numeric integral type, otherwise a compile-time error occurs. SignedCentTypeList SignedIntTypeList staticMap T Copies type qualifiers from FromType to ToType . TemplateArgsOf Returns a AliasSeq of the template arguments used to instantiate T . TemplateArgsOf ditto TemplateOf Returns an alias to the template that T is an instance of. It will return void if a symbol without a template is given. TemplateOf ditto TemplateOf ditto TransitiveBaseTypeTuple Get a $(D_PARAM AliasSeq) of $(I all) base classes of $(D_PARAM T), in decreasing order, followed by $(D_PARAM T)'s interfaces. $(D_PARAM TransitiveBaseTypeTuple!Object) yields the empty type tuple. TypeQualifierList Unconst Removes const , inout and immutable qualifiers, if any, from type T . Unqual Removes all qualifiers, if any, from type T . Unshared Returns the type of ToType with the \"constness\" of FromType . A type's $(B constness) refers to whether it is const , immutable , or inout . If FromType has no constness, the returned type will be the same as ToType . Unshared Returns the type of ToType with the \"constness\" of FromType . A type's $(B constness) refers to whether it is const , immutable , or inout . If FromType has no constness, the returned type will be the same as ToType . Unsigned UnsignedCentTypeList UnsignedIntTypeList ValueType Get the Value type of an Associative Array. Structs Name Description QualifiedNameTests SubTypeOf Functions Name Description adjustIdent cstyle dip1000Test dstyle extractAttribFlags freeFunc issue20054 lvalueOf ditto novar rvalueOf Creates an lvalue or rvalue of type T for typeof(...) and $(DDSUBLINK spec/traits, compiles, __traits(compiles, ...) ) purposes. No actual value is returned. sc select Select one of two functions to run via template parameter. typesafe Variables Name Description allSameType Returns: true iff all types Ts are the same. arity Returns the number of arguments of function func . arity is undefined for variadic functions. classInstanceAlignment Returns class instance alignment. dip1000Enabled extractParameterStorageClassFlags Convert the result of $(DDSUBLINK spec/traits, getParameterStorageClasses, __traits(getParameterStorageClasses) ) to $(LREF ParameterStorageClass) enum s. fqnSym fqnSym fullyQualifiedName Get the fully qualified name of a type or a symbol. Can act as an intelligent type/symbol to string converter. fullyQualifiedName ditto functionAttributes ditto functionLinkage Determine the linkage attribute of the function. Params: func = the function symbol, or the type of a function, delegate, or pointer to function Returns: one of the strings \"D\", \"C\", \"C++\", \"Windows\", \"Objective-C\", or \"System\". hasAliasing Returns true if and only if T 's representation includes at least one of the following: $(OL $(LI a raw pointer U* and U is not immutable;) $(LI an array U[] and U is not immutable;) $(LI a reference to a class or interface type C and C is not immutable.) $(LI an associative array that is not immutable.) $(LI a delegate.)) hasFunctionAttributes Checks whether a function has the given attributes attached. hasMember Yields true if and only if T is an aggregate that defines a symbol called name . hasRawAliasing hasRawUnsharedAliasing hasUDA Determine if a symbol has a given $(DDSUBLINK spec/attribute, uda, user-defined attribute). hasUnsharedAliasing Returns true if and only if T 's representation includes at least one of the following: $(OL $(LI a raw pointer U* and U is not immutable or shared;) $(LI an array U[] and U is not immutable or shared;) $(LI a reference to a class type C and C is not immutable or shared.) $(LI an associative array that is not immutable or shared.) $(LI a delegate that is not shared.)) ifTestable Returns: true iff the type T can be tested in an $(D if)-expression, that is if $(D if (pred(T.init)) {}) is compilable. impl ditto impl ditto isAbstractClass Detect whether S is an abstract class. isAbstractFunction Detect whether S is an abstract function. isAggregateType Detect whether type T is an aggregate type. isArray Detect whether type T is an array (static or dynamic; for associative arrays see $(LREF isAssociativeArray)). isAssignable Returns true iff a value of type Rhs can be assigned to a variable of type Lhs . isAssociativeArray Detect whether T is an associative array type isAutodecodableString Detect whether type T is a string that will be autodecoded. isBasicType Detect whether T is a basic type (scalar type or void). isBoolean Detect whether T is a built-in boolean type or enum of boolean base type. isBuiltinType Detect whether type T is a builtin type. isConvertibleToString $(RED Warning: This trait will be deprecated as soon as it is no longer used in Phobos. For a function parameter to safely accept a type that implicitly converts to string as a string, the conversion needs to happen at the callsite; otherwise, the conversion is done inside the function, and in many cases, that means that local memory is sliced (e.g. if a static array is passed to the function, then it's copied, and the resulting dynamic array will be a slice of a local variable). So, if the resulting string escapes the function, the string refers to invalid memory, and accessing it would mean accessing invalid memory. As such, the only safe way for a function to accept types that implicitly convert to string is for the implicit conversion to be done at the callsite, and that can only occur if the parameter is explicitly typed as an array, whereas using isConvertibleToString in a template constraint would result in the conversion being done inside the function. As such, isConvertibleToString is inherently unsafe and is going to be deprecated.) isCopyable Determines whether the type S can be copied. If a type cannot be copied, then code such as MyStruct x; auto y = x; will fail to compile. Copying for structs can be disabled by using @disable this(this) . isDelegate Detect whether symbol or type T is a delegate. isEqualityComparable ditto isFinalClass Detect whether S is a final class. isFinalFunction Detect whether S is a final function. isFloatingPoint Detect whether T is a built-in floating point type. isFunctionPointer Detect whether symbol or type T is a function pointer. isImplicitlyConvertible Is From implicitly convertible to To ? isInstanceOf Returns true if T is an instance of the template S. isInstanceOf ditto isIterable Returns true if T can be iterated over using a foreach loop with a single loop variable of automatically inferred type, regardless of how the foreach loop is implemented. This includes ranges, structs/classes that define opApply with a single loop variable, and builtin dynamic, static and associative arrays. isLvalueAssignable Returns true iff an lvalue of type Rhs can be assigned to a variable of type Lhs . isMutable Returns true if T is not const or immutable. Note that isMutable is true for string, or immutable(char)[], because the 'head' is mutable. isNarrowString Detect whether type T is a narrow string. isNested Determines whether T has its own context pointer. T must be either class , struct , or union . isNestedFunction Determines if f is a function that requires a context pointer. isOrderingComparable Detects whether T is a comparable type. Basic types and structs and classes that implement opCmp are ordering comparable. isPointer Detect whether type T is a pointer. isQualifierConvertible Is From $(DDSUBLINK spec/const3, implicit_qualifier_conversions, qualifier-convertible) to To ? isRvalueAssignable Returns true iff an rvalue of type Rhs can be assigned to a variable of type Lhs . isSafe true if func is @safe or @trusted . isScalarType Detect whether T is a scalar type (a built-in numeric, character or boolean type). isSigned Detect whether T is a built-in signed numeric type. isSIMDVector Detect whether type T is a SIMD vector type. isSomeFunction Detect whether symbol or type T is a function, a function pointer or a delegate. isSomeString Detect whether T is one of the built-in string types. isStaticArray Detect whether type T is a static array. isStorageClassImplicitlyConvertible isType Detect whether X is a type. Analogous to is(X) . This is useful when used in conjunction with other templates, e.g. allSatisfy!(isType, X) . isTypeTuple Check whether the tuple T is a type tuple. A type tuple only contains types. isUnsafe true if func is @system . mangledName Returns the mangled name of symbol or type sth . maxAlignment NameOf parentPrefix varargs ditto variadicFunctionStyle ditto"
  },
  "phobos/std/traits/QualifiedNameTests/Functions/cVarArg.html": {
    "href": "phobos/std/traits/QualifiedNameTests/Functions/cVarArg.html",
    "title": "Overloads for - cVarArg | Marmos Demo",
    "keywords": "Overloads for - cVarArg Module std.traits Parent QualifiedNameTests cVarArg(__anonymous) void cVarArg( int __anonymous )"
  },
  "phobos/std/traits/QualifiedNameTests/Functions/dVarArg.html": {
    "href": "phobos/std/traits/QualifiedNameTests/Functions/dVarArg.html",
    "title": "Overloads for - dVarArg | Marmos Demo",
    "keywords": "Overloads for - dVarArg Module std.traits Parent QualifiedNameTests dVarArg() void dVarArg( )"
  },
  "phobos/std/traits/QualifiedNameTests/Functions/dVarArg2.html": {
    "href": "phobos/std/traits/QualifiedNameTests/Functions/dVarArg2.html",
    "title": "Overloads for - dVarArg2 | Marmos Demo",
    "keywords": "Overloads for - dVarArg2 Module std.traits Parent QualifiedNameTests dVarArg2(__anonymous) void dVarArg2( int __anonymous )"
  },
  "phobos/std/traits/QualifiedNameTests/Functions/func.html": {
    "href": "phobos/std/traits/QualifiedNameTests/Functions/func.html",
    "title": "Overloads for - func | Marmos Demo",
    "keywords": "Overloads for - func Module std.traits Parent QualifiedNameTests func(var1, var2) <bug: unknown> func( Inner var1, string var2 )"
  },
  "phobos/std/traits/QualifiedNameTests/Functions/inoutFunc.html": {
    "href": "phobos/std/traits/QualifiedNameTests/Functions/inoutFunc.html",
    "title": "Overloads for - inoutFunc | Marmos Demo",
    "keywords": "Overloads for - inoutFunc Module std.traits Parent QualifiedNameTests inoutFunc(__anonymous) Inner inoutFunc( Inner __anonymous )"
  },
  "phobos/std/traits/QualifiedNameTests/Functions/retfunc.html": {
    "href": "phobos/std/traits/QualifiedNameTests/Functions/retfunc.html",
    "title": "Overloads for - retfunc | Marmos Demo",
    "keywords": "Overloads for - retfunc Module std.traits Parent QualifiedNameTests retfunc(var1) <bug: unknown> retfunc( Inner var1 )"
  },
  "phobos/std/traits/QualifiedNameTests/Functions/typesafeVarArg.html": {
    "href": "phobos/std/traits/QualifiedNameTests/Functions/typesafeVarArg.html",
    "title": "Overloads for - typesafeVarArg | Marmos Demo",
    "keywords": "Overloads for - typesafeVarArg Module std.traits Parent QualifiedNameTests typesafeVarArg(__anonymous) void typesafeVarArg( <bug: unknown> __anonymous )"
  },
  "phobos/std/traits/Structs/QualifiedNameTests.html": {
    "href": "phobos/std/traits/Structs/QualifiedNameTests.html",
    "title": "Struct - QualifiedNameTests | Marmos Demo",
    "keywords": "Struct - QualifiedNameTests Module std.traits public struct QualifiedNameTests { // void cVarArg( int __anonymous ) ; // void dVarArg( ) ; // void dVarArg2( int __anonymous ) ; // <bug: unknown> func( Inner var1, string var2 ) ; // Inner inoutFunc( Inner __anonymous ) ; // <bug: unknown> retfunc( Inner var1 ) ; // void typesafeVarArg( <bug: unknown> __anonymous ) ; // <bug: unknown> aarray; // <bug: unknown> array; // <bug: unknown> attrDeleg; // <bug: unknown> cFuncPtr; // <bug: unknown> data; // const <bug: unknown> deleg; // <bug: unknown> funcPtr; // <bug: unknown> inoutDeleg; // <bug: unknown> qualAarray; // <bug: unknown> sarray; } Functions Name Description cVarArg dVarArg dVarArg2 func inoutFunc retfunc typesafeVarArg Variables Name Description aarray array attrDeleg cFuncPtr data deleg funcPtr inoutDeleg qualAarray sarray"
  },
  "phobos/std/traits/Structs/SubTypeOf.html": {
    "href": "phobos/std/traits/Structs/SubTypeOf.html",
    "title": "Struct - SubTypeOf | Marmos Demo",
    "keywords": "Struct - SubTypeOf Module std.traits public struct SubTypeOf { // T val; } Variables Name Description val"
  },
  "phobos/std/typecons/BitFlags/Functions/opAssign.html": {
    "href": "phobos/std/typecons/BitFlags/Functions/opAssign.html",
    "title": "Overloads for - opAssign | Marmos Demo",
    "keywords": "Overloads for - opAssign Module std.typecons Parent BitFlags opAssign(flag) <bug: unknown> opAssign( E flag ) auto"
  },
  "phobos/std/typecons/Classes/AutoImplement.html": {
    "href": "phobos/std/typecons/Classes/AutoImplement.html",
    "title": "Class - AutoImplement | Marmos Demo",
    "keywords": "Class - AutoImplement Module std.typecons public class AutoImplement { // alias autoImplement_helper_ = <todo: marmos support pending>; } About ditto Aliases Name Description autoImplement_helper_"
  },
  "phobos/std/typecons/Classes/Impl.html": {
    "href": "phobos/std/typecons/Classes/Impl.html",
    "title": "Class - Impl | Marmos Demo",
    "keywords": "Class - Impl Module std.typecons public class Impl { } About Supports structural based typesafe conversion. If Source has structural conformance with the interface Targets , wrap creates an internal wrapper class which inherits Targets and wraps the src object, then returns it. unwrap can be used to extract objects which have been wrapped by wrap ."
  },
  "phobos/std/typecons/Classes/NotImplementedError.html": {
    "href": "phobos/std/typecons/Classes/NotImplementedError.html",
    "title": "Class - NotImplementedError | Marmos Demo",
    "keywords": "Class - NotImplementedError Module std.typecons public class NotImplementedError { }"
  },
  "phobos/std/typecons/Classes/issue10647_Foo.html": {
    "href": "phobos/std/typecons/Classes/issue10647_Foo.html",
    "title": "Class - issue10647_Foo | Marmos Demo",
    "keywords": "Class - issue10647_Foo Module std.typecons public class issue10647_Foo { // void bar( int a ) ; } Functions Name Description bar"
  },
  "phobos/std/typecons/Functions/alignForSize.html": {
    "href": "phobos/std/typecons/Functions/alignForSize.html",
    "title": "Overloads for - alignForSize | Marmos Demo",
    "keywords": "Overloads for - alignForSize Module std.typecons alignForSize(names) string alignForSize( <bug: unknown> names ) Order the provided members to minimize size while preserving alignment. Alignment is not always optimal for 80-bit reals, nor for structs declared as align(1). Params E <parameter not found> A list of the types to be aligned, representing fields of an aggregate such as a struct or class . names = The names of the fields that are to be aligned. Returns A string to be mixed in to an aggregate, such as a struct or class ."
  },
  "phobos/std/typecons/Functions/apply.html": {
    "href": "phobos/std/typecons/Functions/apply.html",
    "title": "Overloads for - apply | Marmos Demo",
    "keywords": "Overloads for - apply Module std.typecons apply(t) <bug: unknown> apply( T t ) auto Unpacks the content of a Nullable , performs an operation and packs it again. Does nothing if isNull. When called on a Nullable , apply will unpack the value contained in the Nullable , pass it to the function you provide and wrap the result in another Nullable (if necessary). If the Nullable is null, apply will return null itself. Params t T a Nullable fun <parameter not found> a function operating on the content of the nullable Returns fun(t.get).nullable if !t.isNull , else Nullable.init . See also $(HTTPS en.wikipedia.org/wiki/Monad_(functional_programming)#The_Maybe_monad, The Maybe monad)"
  },
  "phobos/std/typecons/Functions/borrow.html": {
    "href": "phobos/std/typecons/Functions/borrow.html",
    "title": "Overloads for - borrow | Marmos Demo",
    "keywords": "Overloads for - borrow Module std.typecons borrow(refCount) <bug: unknown> borrow( RC refCount ) auto Borrows the payload of $(LREF SafeRefCounted) for use in fun . Inferred as @safe if fun is @safe and does not escape a reference to the payload. The reference count will be incremented for the duration of the operation, so destroying the last reference will not leave dangling references in fun . Params fun <parameter not found> A callable accepting the payload either by value or by reference. refCount RC The counted reference to the payload. refCount = The counted reference to the payload. Returns: The return value of fun , if any. ref in the return value will be forwarded. Issues: For yet unknown reason, code that uses this function with UFCS syntax will not be inferred as @safe . It will still compile if the code is explicitly marked @safe and nothing in fun prevents that."
  },
  "phobos/std/typecons/Functions/dynamicCast.html": {
    "href": "phobos/std/typecons/Functions/dynamicCast.html",
    "title": "Overloads for - dynamicCast | Marmos Demo",
    "keywords": "Overloads for - dynamicCast Module std.typecons dynamicCast(source) T dynamicCast( S source )"
  },
  "phobos/std/typecons/Functions/issue10647_generateDoNothing.html": {
    "href": "phobos/std/typecons/Functions/issue10647_generateDoNothing.html",
    "title": "Overloads for - issue10647_generateDoNothing | Marmos Demo",
    "keywords": "Overloads for - issue10647_generateDoNothing Module std.typecons issue10647_generateDoNothing() string issue10647_generateDoNothing( )"
  },
  "phobos/std/typecons/Functions/nullable.html": {
    "href": "phobos/std/typecons/Functions/nullable.html",
    "title": "Overloads for - nullable | Marmos Demo",
    "keywords": "Overloads for - nullable Module std.typecons nullable(t) <bug: unknown> nullable( T t ) auto ditto nullable(t) <bug: unknown> nullable( T t ) auto ditto"
  },
  "phobos/std/typecons/Functions/nullableRef.html": {
    "href": "phobos/std/typecons/Functions/nullableRef.html",
    "title": "Overloads for - nullableRef | Marmos Demo",
    "keywords": "Overloads for - nullableRef Module std.typecons nullableRef(t) <bug: unknown> nullableRef( <bug: unknown> t ) auto ditto"
  },
  "phobos/std/typecons/Functions/rebindable.html": {
    "href": "phobos/std/typecons/Functions/rebindable.html",
    "title": "Overloads for - rebindable | Marmos Demo",
    "keywords": "Overloads for - rebindable Module std.typecons rebindable(obj) Rebindable!(T) rebindable( T obj ) Convenience function for creating a Rebindable using automatic type inference. Params obj T A reference to a value to initialize the Rebindable with. Returns A newly constructed Rebindable initialized with the given reference. rebindable(value) Rebindable!(T) rebindable( T value ) ditto rebindable(obj) Rebindable!(T) rebindable( Rebindable!(T) obj ) This function simply returns the Rebindable object passed in. It's useful in generic programming cases when a given object may be either a regular class or a Rebindable . Params obj Rebindable!(T) An instance of Rebindable!T. Returns obj without any modification."
  },
  "phobos/std/typecons/Functions/rebindable2.html": {
    "href": "phobos/std/typecons/Functions/rebindable2.html",
    "title": "Overloads for - rebindable2 | Marmos Demo",
    "keywords": "Overloads for - rebindable2 Module std.typecons rebindable2(value) Rebindable2!(T) rebindable2( T value )"
  },
  "phobos/std/typecons/Functions/refCounted.html": {
    "href": "phobos/std/typecons/Functions/refCounted.html",
    "title": "Overloads for - refCounted | Marmos Demo",
    "keywords": "Overloads for - refCounted Module std.typecons refCounted(val) RefCounted!(TRefCountedAutoInitialize.no) refCounted( T val ) Like $(LREF safeRefCounted) but used to initialize $(LREF RefCounted) instead. Intended for backwards compatibility, otherwise it is preferable to use safeRefCounted ."
  },
  "phobos/std/typecons/Functions/reverse.html": {
    "href": "phobos/std/typecons/Functions/reverse.html",
    "title": "Overloads for - reverse | Marmos Demo",
    "keywords": "Overloads for - reverse Module std.typecons reverse(t) <bug: unknown> reverse( T t ) auto Creates a copy of a $(LREF Tuple) with its fields in reverse order. Params t T The Tuple to copy. Returns A new Tuple ."
  },
  "phobos/std/typecons/Functions/safeRefCounted.html": {
    "href": "phobos/std/typecons/Functions/safeRefCounted.html",
    "title": "Overloads for - safeRefCounted | Marmos Demo",
    "keywords": "Overloads for - safeRefCounted Module std.typecons safeRefCounted(val) SafeRefCounted!(TRefCountedAutoInitialize.no) safeRefCounted( T val ) Initializes a SafeRefCounted with val . The template parameter T of SafeRefCounted is inferred from val . This function can be used to move non-copyable values to the heap. It also disables the autoInit option of SafeRefCounted . Params val T The value to be reference counted Returns An initialized SafeRefCounted containing val . See_Also: $(LREF refCounted) $(HTTP en.cppreference.com/w/cpp/memory/shared_ptr/make_shared, C++'s make_shared)"
  },
  "phobos/std/typecons/Functions/scoped.html": {
    "href": "phobos/std/typecons/Functions/scoped.html",
    "title": "Overloads for - scoped | Marmos Demo",
    "keywords": "Overloads for - scoped Module std.typecons scoped(args) <bug: unknown> scoped( Args args ) auto Allocates a class object right inside the current scope, therefore avoiding the overhead of new . This facility is unsafe; it is the responsibility of the user to not escape a reference to the object outside the scope. The class destructor will be called when the result of scoped() is itself destroyed. Scoped class instances can be embedded in a parent class or struct , just like a child struct instance. Scoped member variables must have type typeof(scoped!Class(args)) , and be initialized with a call to scoped. See below for an example. Note It's illegal to move a class instance even if you are sure there are no pointers to it. As such, it is illegal to move a scoped object."
  },
  "phobos/std/typecons/Functions/tuple.html": {
    "href": "phobos/std/typecons/Functions/tuple.html",
    "title": "Overloads for - tuple | Marmos Demo",
    "keywords": "Overloads for - tuple Module std.typecons tuple(args) <bug: unknown> tuple( Args args ) auto Constructs a $(LREF Tuple) object instantiated and initialized according to the given arguments. Params Names <parameter not found> An optional list of strings naming each successive field of the Tuple or a list of types that the elements are being casted to. For a list of names, each name matches up with the corresponding field given by Args . A name does not have to be provided for every field, but as the names must proceed in order, it is not possible to skip one field and name the next after it. For a list of types, there must be exactly as many types as parameters."
  },
  "phobos/std/typecons/Functions/typecons_d_toObject.html": {
    "href": "phobos/std/typecons/Functions/typecons_d_toObject.html",
    "title": "Overloads for - typecons_d_toObject | Marmos Demo",
    "keywords": "Overloads for - typecons_d_toObject Module std.typecons typecons_d_toObject(p) Object typecons_d_toObject( <bug: unknown> p )"
  },
  "phobos/std/typecons/Functions/unwrap.html": {
    "href": "phobos/std/typecons/Functions/unwrap.html",
    "title": "Overloads for - unwrap | Marmos Demo",
    "keywords": "Overloads for - unwrap Module std.typecons unwrap(src) <bug: unknown> unwrap( Source src ) auto ditto unwrap(src) <bug: unknown> unwrap( Source src ) auto ditto"
  },
  "phobos/std/typecons/Functions/wrap.html": {
    "href": "phobos/std/typecons/Functions/wrap.html",
    "title": "Overloads for - wrap | Marmos Demo",
    "keywords": "Overloads for - wrap Module std.typecons wrap(src) <bug: unknown> wrap( Source src ) auto Supports structural based typesafe conversion. If Source has structural conformance with the interface Targets , wrap creates an internal wrapper class which inherits Targets and wraps the src object, then returns it. unwrap can be used to extract objects which have been wrapped by wrap . wrap(src) <bug: unknown> wrap( Source src ) auto Supports structural based typesafe conversion. If Source has structural conformance with the interface Targets , wrap creates an internal wrapper class which inherits Targets and wraps the src object, then returns it. unwrap can be used to extract objects which have been wrapped by wrap ."
  },
  "phobos/std/typecons/Nullable/Functions/front.html": {
    "href": "phobos/std/typecons/Nullable/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.typecons Parent Nullable front() T front( ) ditto"
  },
  "phobos/std/typecons/Nullable/Functions/get.html": {
    "href": "phobos/std/typecons/Nullable/Functions/get.html",
    "title": "Overloads for - get | Marmos Demo",
    "keywords": "Overloads for - get Module std.typecons Parent Nullable get() T get( ) Gets the value. this must not be in the null state. This function is also called for the implicit conversion to T . Preconditions: isNull must be false . Returns: The value held internally by this Nullable ."
  },
  "phobos/std/typecons/Nullable/Functions/isNull.html": {
    "href": "phobos/std/typecons/Nullable/Functions/isNull.html",
    "title": "Overloads for - isNull | Marmos Demo",
    "keywords": "Overloads for - isNull Module std.typecons Parent Nullable isNull() bool isNull( ) Check if this is in the null state. Returns true $(B iff) this is in the null state, otherwise false."
  },
  "phobos/std/typecons/Nullable/Functions/length.html": {
    "href": "phobos/std/typecons/Nullable/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.typecons Parent Nullable length() size_t length( ) ditto"
  },
  "phobos/std/typecons/Nullable/Functions/opIndex.html": {
    "href": "phobos/std/typecons/Nullable/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.typecons Parent Nullable opIndex(dim) <bug: unknown> opIndex( <bug: unknown> dim ) ditto opIndex(index) T opIndex( size_t index ) ditto"
  },
  "phobos/std/typecons/Nullable/Functions/save.html": {
    "href": "phobos/std/typecons/Nullable/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.typecons Parent Nullable save() <bug: unknown> save( ) ditto"
  },
  "phobos/std/typecons/Nullable/Functions/toHash.html": {
    "href": "phobos/std/typecons/Nullable/Functions/toHash.html",
    "title": "Overloads for - toHash | Marmos Demo",
    "keywords": "Overloads for - toHash Module std.typecons Parent Nullable toHash() size_t toHash( )"
  },
  "phobos/std/typecons/Nullable/Functions/toString.html": {
    "href": "phobos/std/typecons/Nullable/Functions/toString.html",
    "title": "Overloads for - toString | Marmos Demo",
    "keywords": "Overloads for - toString Module std.typecons Parent Nullable toString() string toString( ) Gives the string \"Nullable.null\" if isNull is true . Otherwise, the result is equivalent to calling $(REF formattedWrite, std,format) on the underlying value. Params writer <parameter not found> A char accepting $(REF_ALTTEXT output range, isOutputRange, std, range, primitives) fmt = A $(REF FormatSpec, std,format) which is used to represent the value if this Nullable is not null Returns: A string if writer and fmt are not set; void otherwise. toString() string toString( ) ditto"
  },
  "phobos/std/typecons/NullableRef/Functions/bind.html": {
    "href": "phobos/std/typecons/NullableRef/Functions/bind.html",
    "title": "Overloads for - bind | Marmos Demo",
    "keywords": "Overloads for - bind Module std.typecons Parent NullableRef bind(value) void bind( <bug: unknown> value ) Binds the internal state to value . Params value <bug: unknown> A pointer to a value of type T to bind this NullableRef to."
  },
  "phobos/std/typecons/NullableRef/Functions/get.html": {
    "href": "phobos/std/typecons/NullableRef/Functions/get.html",
    "title": "Overloads for - get | Marmos Demo",
    "keywords": "Overloads for - get Module std.typecons Parent NullableRef get() T get( ) Gets the value. this must not be in the null state. This function is also called for the implicit conversion to T ."
  },
  "phobos/std/typecons/NullableRef/Functions/isNull.html": {
    "href": "phobos/std/typecons/NullableRef/Functions/isNull.html",
    "title": "Overloads for - isNull | Marmos Demo",
    "keywords": "Overloads for - isNull Module std.typecons Parent NullableRef isNull() bool isNull( ) Returns true if and only if this is in the null state. Returns true if this is in the null state, otherwise false."
  },
  "phobos/std/typecons/NullableRef/Functions/nullify.html": {
    "href": "phobos/std/typecons/NullableRef/Functions/nullify.html",
    "title": "Overloads for - nullify | Marmos Demo",
    "keywords": "Overloads for - nullify Module std.typecons Parent NullableRef nullify() void nullify( ) Forces this to the null state."
  },
  "phobos/std/typecons/Overview.html": {
    "href": "phobos/std/typecons/Overview.html",
    "title": "Module - std.typecons | Marmos Demo",
    "keywords": "Module - std.typecons About This module implements a variety of type constructors, i.e., templates that allow construction of new, useful general-purpose types. $(SCRIPT inhibitQuickIndex = 1;) $(DIVC quickindex, $(BOOKTABLE, $(TR $(TH Category) $(TH Symbols)) $(TR $(TD Tuple) $(TD $(LREF isTuple) $(LREF Tuple) $(LREF tuple) $(LREF reverse) )) $(TR $(TD Flags) $(TD $(LREF BitFlags) $(LREF isBitFlagEnum) $(LREF Flag) $(LREF No) $(LREF Yes) )) $(TR $(TD Memory allocation) $(TD $(LREF SafeRefCounted) $(LREF safeRefCounted) $(LREF RefCountedAutoInitialize) $(LREF scoped) $(LREF Unique) )) $(TR $(TD Code generation) $(TD $(LREF AutoImplement) $(LREF BlackHole) $(LREF generateAssertTrap) $(LREF generateEmptyFunction) $(LREF WhiteHole) )) $(TR $(TD Nullable) $(TD $(LREF Nullable) $(LREF nullable) $(LREF NullableRef) $(LREF nullableRef) )) $(TR $(TD Proxies) $(TD $(LREF Proxy) $(LREF rebindable) $(LREF Rebindable) $(LREF ReplaceType) $(LREF unwrap) $(LREF wrap) )) $(TR $(TD Types) $(TD $(LREF alignForSize) $(LREF Ternary) $(LREF Typedef) $(LREF TypedefType) $(LREF UnqualRef) )) )) Copyright: Copyright the respective authors, 2008- License: $(HTTP boost.org/LICENSE_1_0.txt, Boost License 1.0). Source: $(PHOBOSSRC std/typecons.d) Authors: $(HTTP erdani.org, Andrei Alexandrescu), $(HTTP bartoszmilewski.wordpress.com, Bartosz Milewski), Don Clugston, Shin Fujishiro, Kenji Hara Aliases Name Description aligned Allocates a class object right inside the current scope, therefore avoiding the overhead of new . This facility is unsafe; it is the responsibility of the user to not escape a reference to the object outside the scope. allMembers Bind BlackHole BlackHole!Base is a subclass of Base which automatically implements all abstract member functions in Base as do-nothing functions. Each auto-implemented function just returns the default value of the return type without doing anything. extractName extractType fieldSpecs Tuple of values, for example $(D Tuple!(int, string)) is a record that stores an int and a string . Tuple can be used to bundle values together, notably when returning multiple values from a function. If obj is a Tuple , the individual members are accessible with the syntax obj[0] for the first field, obj[1] for the second, and so on. GetOverloadedMethods issue10647_DoNothing OnlyVirtual Supports structural based typesafe conversion. ReplaceType Replaces all occurrences of From into To , in one or more types T . For example, ReplaceType!(int, uint, Tuple!(int, float)[string]) yields Tuple!(uint, float)[string] . The types in which replacement is performed may be arbitrarily complex, including qualifiers, built-in type constructors (pointers, arrays, associative arrays, functions, and delegates), and template instantiations; replacement proceeds transitively through the type definition. However, member types in struct s or class es are not replaced because there are no ways to express the types resulting after replacement. sharedToString sliceSpecs Tuple of values, for example $(D Tuple!(int, string)) is a record that stores an int and a string . Tuple can be used to bundle values together, notably when returning multiple values from a function. If obj is a Tuple , the individual members are accessible with the syntax obj[0] for the first field, obj[1] for the second, and so on. SourceMembers Supports structural based typesafe conversion. TargetMembers Supports structural based typesafe conversion. unwrap ditto WhiteHole WhiteHole!Base is a subclass of Base which automatically implements all abstract member functions as functions that always fail. These functions simply throw an Error and never return. Whitehole is useful for trapping the use of class member functions that haven't been implemented. wrap ditto Classes Name Description AutoImplement AutoImplement automatically implements (by default) all abstract member functions in the class or interface Base in specified way. AutoImplement ditto Impl Supports structural based typesafe conversion. issue10647_Foo NotImplementedError Structs Name Description BitFlags A typesafe structure for storing combinations of enum values. No Ditto Nullable Defines a value paired with a distinctive \"null\" state that denotes the absence of a value. If default constructed, a $(D Nullable!T) object starts in the null state. Assigning it renders it non-null. Calling nullify can nullify it again. Nullable Just like Nullable!T , except that the null state is defined as a particular value. For example, $(D Nullable!(uint, uint.max)) is an uint that sets aside the value uint.max to denote a null state. $(D Nullable!(T, nullValue)) is more storage-efficient than $(D Nullable!T) because it does not need to store an extra bool . NullableRef Just like Nullable!T , except that the object refers to a value sitting elsewhere in memory. This makes assignments overwrite the initially assigned value. Internally NullableRef!T only stores a pointer to T (i.e., $(D Nullable!T.sizeof == (T*).sizeof)). Rebindable ditto Rebindable2 RefCounted The old version of $(LREF SafeRefCounted), before $(LREF borrow) existed. Old code may be relying on @safe ty of some of the member functions which cannot be safe in the new scheme, and can avoid breakage by continuing to use this. SafeRefCounted should be preferred, as this type is outdated and unrecommended for new code. SafeRefCounted Defines a reference-counted object containing a T value as payload. Scoped Allocates a class object right inside the current scope, therefore avoiding the overhead of new . This facility is unsafe; it is the responsibility of the user to not escape a reference to the object outside the scope. Ternary Tuple Tuple of values, for example $(D Tuple!(int, string)) is a record that stores an int and a string . Tuple can be used to bundle values together, notably when returning multiple values from a function. If obj is a Tuple , the individual members are accessible with the syntax obj[0] for the first field, obj[1] for the second, and so on. Typedef $(B Typedef) allows the creation of a unique type which is based on an existing type. Unlike the alias feature, $(B Typedef) ensures the two types are not considered as equals. Unique Encapsulates unique ownership of a resource. Yes Convenience names that allow using e.g. Yes.encryption instead of Flag!\"encryption\".yes and No.encryption instead of $(D Flag!\"encryption\".no). Functions Name Description alignForSize Order the provided members to minimize size while preserving alignment. Alignment is not always optimal for 80-bit reals, nor for structs declared as align(1). apply Unpacks the content of a Nullable , performs an operation and packs it again. Does nothing if isNull. borrow Borrows the payload of $(LREF SafeRefCounted) for use in fun . Inferred as @safe if fun is @safe and does not escape a reference to the payload. The reference count will be incremented for the duration of the operation, so destroying the last reference will not leave dangling references in fun . dynamicCast issue10647_generateDoNothing nullable ditto nullableRef ditto rebindable Convenience function for creating a Rebindable using automatic type inference. rebindable2 refCounted Like $(LREF safeRefCounted) but used to initialize $(LREF RefCounted) instead. Intended for backwards compatibility, otherwise it is preferable to use safeRefCounted . reverse Creates a copy of a $(LREF Tuple) with its fields in reverse order. safeRefCounted Initializes a SafeRefCounted with val . The template parameter T of SafeRefCounted is inferred from val . This function can be used to move non-copyable values to the heap. It also disables the autoInit option of SafeRefCounted . scoped Allocates a class object right inside the current scope, therefore avoiding the overhead of new . This facility is unsafe; it is the responsibility of the user to not escape a reference to the object outside the scope. tuple Constructs a $(LREF Tuple) object instantiated and initialized according to the given arguments. typecons_d_toObject unwrap ditto wrap Supports structural based typesafe conversion. Variables Name Description alignment Allocates a class object right inside the current scope, therefore avoiding the overhead of new . This facility is unsafe; it is the responsibility of the user to not escape a reference to the object outside the scope. areBuildCompatibleTuples areCompatibleTuples distinctFieldNames false_ generateAssertTrap ditto hasCopyCtor injectNamedFields Tuple of values, for example $(D Tuple!(int, string)) is a record that stores an int and a string . Tuple can be used to bundle values together, notably when returning multiple values from a function. If obj is a Tuple , the individual members are accessible with the syntax obj[0] for the first field, obj[1] for the second, and so on. isBuildable isBuildableFrom isDIP1000 issue10647_isAlwaysTrue isTuple Returns true if and only if T is an instance of std.typecons.Tuple . mod1 mod2 noMemberHasCopyCtor notFinal Supports structural based typesafe conversion. sharedToString TypeMod"
  },
  "phobos/std/typecons/Rebindable2/Functions/get.html": {
    "href": "phobos/std/typecons/Rebindable2/Functions/get.html",
    "title": "Overloads for - get | Marmos Demo",
    "keywords": "Overloads for - get Module std.typecons Parent Rebindable2 get() T get( ) Ditto"
  },
  "phobos/std/typecons/RefCounted/Functions/opAssign.html": {
    "href": "phobos/std/typecons/RefCounted/Functions/opAssign.html",
    "title": "Overloads for - opAssign | Marmos Demo",
    "keywords": "Overloads for - opAssign Module std.typecons Parent RefCounted opAssign(rhs) void opAssign( <bug: unknown> rhs ) opAssign(rhs) void opAssign( T rhs )"
  },
  "phobos/std/typecons/RefCounted/Functions/pureFree.html": {
    "href": "phobos/std/typecons/RefCounted/Functions/pureFree.html",
    "title": "Overloads for - pureFree | Marmos Demo",
    "keywords": "Overloads for - pureFree Module std.typecons Parent RefCounted pureFree(ptr) void pureFree( <bug: unknown> ptr )"
  },
  "phobos/std/typecons/RefCounted/Functions/refCountedPayload.html": {
    "href": "phobos/std/typecons/RefCounted/Functions/refCountedPayload.html",
    "title": "Overloads for - refCountedPayload | Marmos Demo",
    "keywords": "Overloads for - refCountedPayload Module std.typecons Parent RefCounted refCountedPayload() T refCountedPayload( ) refCountedPayload() T refCountedPayload( )"
  },
  "phobos/std/typecons/RefCounted/Functions/refCountedStore.html": {
    "href": "phobos/std/typecons/RefCounted/Functions/refCountedStore.html",
    "title": "Overloads for - refCountedStore | Marmos Demo",
    "keywords": "Overloads for - refCountedStore Module std.typecons Parent RefCounted refCountedStore() RefCountedStore refCountedStore( )"
  },
  "phobos/std/typecons/SafeRefCounted/Functions/opAssign.html": {
    "href": "phobos/std/typecons/SafeRefCounted/Functions/opAssign.html",
    "title": "Overloads for - opAssign | Marmos Demo",
    "keywords": "Overloads for - opAssign Module std.typecons Parent SafeRefCounted opAssign(rhs) void opAssign( <bug: unknown> rhs ) Assignment operators. Note: You may not assign a new payload to an uninitialized SafeRefCounted, if auto initialization is off. Assigning another counted reference is still okay. opAssign(rhs) void opAssign( T rhs ) Ditto"
  },
  "phobos/std/typecons/SafeRefCounted/Functions/pureFree.html": {
    "href": "phobos/std/typecons/SafeRefCounted/Functions/pureFree.html",
    "title": "Overloads for - pureFree | Marmos Demo",
    "keywords": "Overloads for - pureFree Module std.typecons Parent SafeRefCounted pureFree(ptr) void pureFree( <bug: unknown> ptr )"
  },
  "phobos/std/typecons/SafeRefCounted/Functions/refCountedPayload.html": {
    "href": "phobos/std/typecons/SafeRefCounted/Functions/refCountedPayload.html",
    "title": "Overloads for - refCountedPayload | Marmos Demo",
    "keywords": "Overloads for - refCountedPayload Module std.typecons Parent SafeRefCounted refCountedPayload() T refCountedPayload( ) Returns a reference to the payload. If (autoInit == RefCountedAutoInitialize.yes), calls $(D refCountedStore.ensureInitialized). Otherwise, just issues $(D assert(refCountedStore.isInitialized)). Used with $(D alias refCountedPayload this;), so callers can just use the SafeRefCounted object as a T . $(BLUE The first overload exists only if $(D autoInit == RefCountedAutoInitialize.yes).) So if $(D autoInit == RefCountedAutoInitialize.no) or called for a constant or immutable object, then refCountedPayload will also be qualified as nothrow (but will still assert if not initialized). refCountedPayload() T refCountedPayload( ) ditto"
  },
  "phobos/std/typecons/SafeRefCounted/Functions/refCountedStore.html": {
    "href": "phobos/std/typecons/SafeRefCounted/Functions/refCountedStore.html",
    "title": "Overloads for - refCountedStore | Marmos Demo",
    "keywords": "Overloads for - refCountedStore Module std.typecons Parent SafeRefCounted refCountedStore() RefCountedStore refCountedStore( ) Returns storage implementation struct."
  },
  "phobos/std/typecons/Scoped/Functions/Scoped_payload.html": {
    "href": "phobos/std/typecons/Scoped/Functions/Scoped_payload.html",
    "title": "Overloads for - Scoped_payload | Marmos Demo",
    "keywords": "Overloads for - Scoped_payload Module std.typecons Parent Scoped Scoped_payload() T Scoped_payload( )"
  },
  "phobos/std/typecons/Structs/BitFlags.html": {
    "href": "phobos/std/typecons/Structs/BitFlags.html",
    "title": "Struct - BitFlags | Marmos Demo",
    "keywords": "Struct - BitFlags Module std.typecons public struct BitFlags { // alias Base = <todo: marmos support pending>; // <bug: unknown> opAssign( E flag ) auto; // Base mValue; } About A typesafe structure for storing combinations of enum values. This template defines a simple struct to represent bitwise OR combinations of enum values. It can be used if all the enum values are integral constants with a bit count of at most 1, or if the unsafe parameter is explicitly set to Yes. This is much safer than using the enum itself to store the OR combination, which can produce surprising effects like this: ---- enum E { A = 1 << 0, B = 1 << 1 } E e = E.A | E.B; // will throw SwitchError final switch (e) { case E.A: return; case E.B: return; } ---- Aliases Name Description Base Functions Name Description opAssign Variables Name Description mValue"
  },
  "phobos/std/typecons/Structs/No.html": {
    "href": "phobos/std/typecons/Structs/No.html",
    "title": "Struct - No | Marmos Demo",
    "keywords": "Struct - No Module std.typecons public struct No { } About Ditto"
  },
  "phobos/std/typecons/Structs/Nullable.html": {
    "href": "phobos/std/typecons/Structs/Nullable.html",
    "title": "Struct - Nullable | Marmos Demo",
    "keywords": "Struct - Nullable Module std.typecons public struct Nullable { // Gets the value. `this` must not be in the null state. This function is also called for the implicit conversion to `T` . T get( ) ; // Check if `this` is in the null state. bool isNull( ) ; } About Just like Nullable!T , except that the null state is defined as a particular value. For example, $(D Nullable!(uint, uint.max)) is an uint that sets aside the value uint.max to denote a null state. $(D Nullable!(T, nullValue)) is more storage-efficient than $(D Nullable!T) because it does not need to store an extra bool . Params T The wrapped type for which Nullable provides a null value. nullValue = The null value which denotes the null state of this Nullable . Must be of type T . Functions Name Description get Gets the value. this must not be in the null state. This function is also called for the implicit conversion to T . isNull Check if this is in the null state."
  },
  "phobos/std/typecons/Structs/NullableRef.html": {
    "href": "phobos/std/typecons/Structs/NullableRef.html",
    "title": "Struct - NullableRef | Marmos Demo",
    "keywords": "Struct - NullableRef Module std.typecons public struct NullableRef { // Binds the internal state to `value` . void bind( <bug: unknown> value ) ; // Gets the value. `this` must not be in the null state. This function is also called for the implicit conversion to `T` . T get( ) ; // Returns `true` if and only if `this` is in the null state. bool isNull( ) ; // Forces `this` to the null state. void nullify( ) ; } About Just like Nullable!T , except that the object refers to a value sitting elsewhere in memory. This makes assignments overwrite the initially assigned value. Internally NullableRef!T only stores a pointer to T (i.e., $(D Nullable!T.sizeof == (T*).sizeof)). Functions Name Description bind Binds the internal state to value . get Gets the value. this must not be in the null state. This function is also called for the implicit conversion to T . isNull Returns true if and only if this is in the null state. nullify Forces this to the null state."
  },
  "phobos/std/typecons/Structs/Rebindable.html": {
    "href": "phobos/std/typecons/Structs/Rebindable.html",
    "title": "Struct - Rebindable | Marmos Demo",
    "keywords": "Struct - Rebindable Module std.typecons public struct Rebindable { // <bug: unknown> data; // __enumMember useQualifierCast; } About ditto Variables Name Description data useQualifierCast"
  },
  "phobos/std/typecons/Structs/Rebindable2.html": {
    "href": "phobos/std/typecons/Structs/Rebindable2.html",
    "title": "Struct - Rebindable2 | Marmos Demo",
    "keywords": "Struct - Rebindable2 Module std.typecons public struct Rebindable2 { // Ditto T get( ) ; // <bug: unknown> data; // __enumMember useQualifierCast; } Functions Name Description get Ditto Variables Name Description data useQualifierCast"
  },
  "phobos/std/typecons/Structs/RefCounted.html": {
    "href": "phobos/std/typecons/Structs/RefCounted.html",
    "title": "Struct - RefCounted | Marmos Demo",
    "keywords": "Struct - RefCounted Module std.typecons public struct RefCounted { // void opAssign( <bug: unknown> rhs ) ; // void opAssign( T rhs ) ; // void pureFree( <bug: unknown> ptr ) ; // T refCountedPayload( ) ; // T refCountedPayload( ) ; // RefCountedStore refCountedStore( ) ; // __enumMember enableGCScan; } About The old version of $(LREF SafeRefCounted), before $(LREF borrow) existed. Old code may be relying on @safe ty of some of the member functions which cannot be safe in the new scheme, and can avoid breakage by continuing to use this. SafeRefCounted should be preferred, as this type is outdated and unrecommended for new code. Functions Name Description opAssign pureFree refCountedPayload refCountedStore Variables Name Description enableGCScan"
  },
  "phobos/std/typecons/Structs/SafeRefCounted.html": {
    "href": "phobos/std/typecons/Structs/SafeRefCounted.html",
    "title": "Struct - SafeRefCounted | Marmos Demo",
    "keywords": "Struct - SafeRefCounted Module std.typecons public struct SafeRefCounted { // Assignment operators. void opAssign( <bug: unknown> rhs ) ; // Ditto void opAssign( T rhs ) ; // void pureFree( <bug: unknown> ptr ) ; // Returns a reference to the payload. If (autoInit == RefCountedAutoInitialize.yes), calls $(D refCountedStore.ensureInitialized). Otherwise, just issues $(D assert(refCountedStore.isInitialized)). Used with $(D alias refCountedPayload this;), so callers can just use the `SafeRefCounted` object as a `T` . T refCountedPayload( ) ; // ditto T refCountedPayload( ) ; // Returns storage implementation struct. RefCountedStore refCountedStore( ) ; // __enumMember enableGCScan; } About Defines a reference-counted object containing a T value as payload. An instance of SafeRefCounted is a reference to a structure, which is referred to as the $(I store), or $(I storage implementation struct) in this documentation. The store contains a reference count and the T payload. SafeRefCounted uses malloc to allocate the store. As instances of SafeRefCounted are copied or go out of scope, they will automatically increment or decrement the reference count. When the reference count goes down to zero, SafeRefCounted will call destroy against the payload and call free to deallocate the store. If the T payload contains any references to GC-allocated memory, then SafeRefCounted will add it to the GC memory that is scanned for pointers, and remove it from GC scanning before free is called on the store. One important consequence of destroy is that it will call the destructor of the T payload. GC-managed references are not guaranteed to be valid during a destructor call, but other members of T , such as file handles or pointers to malloc memory, will still be valid during the destructor call. This allows the T to deallocate or clean up any non-GC resources immediately after the reference count has reached zero. Without -preview=dip1000, SafeRefCounted is unsafe and should be used with care. No references to the payload should be escaped outside the SafeRefCounted object. With -preview=dip1000, SafeRefCounted is safe if it's payload is accessed only with the $(LREF borrow) function. Scope semantics can also prevent accidental escaping of refCountedPayload , but it's still up to the user to not destroy the last counted reference while the payload is in use. Due to that, refCountedPayload remains accessible only in @system code. The autoInit option makes the object ensure the store is automatically initialized. Leaving $(D autoInit == RefCountedAutoInitialize.yes) (the default option) is convenient but has the cost of a test whenever the payload is accessed. If $(D autoInit == RefCountedAutoInitialize.no), user code must call either refCountedStore.isInitialized or refCountedStore.ensureInitialized before attempting to access the payload. Not doing so results in null pointer dereference. If T.this() is annotated with @disable then autoInit must be RefCountedAutoInitialize.no in order to compile. See_Also $(LREF RefCounted) Functions Name Description opAssign Assignment operators. pureFree refCountedPayload Returns a reference to the payload. If (autoInit == RefCountedAutoInitialize.yes), calls $(D refCountedStore.ensureInitialized). Otherwise, just issues $(D assert(refCountedStore.isInitialized)). Used with $(D alias refCountedPayload this;), so callers can just use the SafeRefCounted object as a T . refCountedStore Returns storage implementation struct. Variables Name Description enableGCScan"
  },
  "phobos/std/typecons/Structs/Scoped.html": {
    "href": "phobos/std/typecons/Structs/Scoped.html",
    "title": "Struct - Scoped | Marmos Demo",
    "keywords": "Struct - Scoped Module std.typecons public struct Scoped { // T Scoped_payload( ) ; // <bug: unknown> Scoped_store; } About Allocates a class object right inside the current scope, therefore avoiding the overhead of new . This facility is unsafe; it is the responsibility of the user to not escape a reference to the object outside the scope. The class destructor will be called when the result of scoped() is itself destroyed. Scoped class instances can be embedded in a parent class or struct , just like a child struct instance. Scoped member variables must have type typeof(scoped!Class(args)) , and be initialized with a call to scoped. See below for an example. Note It's illegal to move a class instance even if you are sure there are no pointers to it. As such, it is illegal to move a scoped object. Functions Name Description Scoped_payload Variables Name Description Scoped_store"
  },
  "phobos/std/typecons/Structs/Ternary.html": {
    "href": "phobos/std/typecons/Structs/Ternary.html",
    "title": "Struct - Ternary | Marmos Demo",
    "keywords": "Struct - Ternary Module std.typecons public struct Ternary { // Ternary make( ubyte b ) static; // ditto void opAssign( bool b ) ; // The possible states of the `Ternary` __enumMember no; // ditto __enumMember unknown; // ubyte value; // ditto __enumMember yes; } About Ternary type with three truth values $(UL $(LI Ternary.yes for true ) $(LI Ternary.no for false ) $(LI Ternary.unknown as an unknown state) ) Also known as trinary, trivalent, or trilean. See_Also $(HTTP en.wikipedia.org/wiki/Three-valued_logic, Three Valued Logic on Wikipedia) Functions Name Description make opAssign ditto Variables Name Description no The possible states of the Ternary unknown ditto value yes ditto"
  },
  "phobos/std/typecons/Structs/Tuple.html": {
    "href": "phobos/std/typecons/Structs/Tuple.html",
    "title": "Struct - Tuple | Marmos Demo",
    "keywords": "Struct - Tuple Module std.typecons public struct Tuple { // alias field = <todo: marmos support pending>; // The names of the `Tuple` 's components. Unnamed fields have empty names. alias fieldNames = <todo: marmos support pending>; // The types of the `Tuple` 's components. alias Types = <todo: marmos support pending>; // Creates a hash of this `Tuple` . size_t toHash( ) ; // Use `t.expand` for a `Tuple` `t` to expand it into its components. The result of `expand` acts as if the `Tuple` 's components were listed as a list of values. (Ordinarily, a `Tuple` acts as a single value.) Types expand; } About Tuple of values, for example $(D Tuple!(int, string)) is a record that stores an int and a string . Tuple can be used to bundle values together, notably when returning multiple values from a function. If obj is a Tuple , the individual members are accessible with the syntax obj[0] for the first field, obj[1] for the second, and so on. See_Also: $(LREF tuple). Params Specs A list of types (and optionally, member names) that the Tuple contains. Aliases Name Description _Fields field fieldNames The names of the Tuple 's components. Unnamed fields have empty names. Types The types of the Tuple 's components. Functions Name Description toHash Creates a hash of this Tuple . Variables Name Description expand Use t.expand for a Tuple t to expand it into its components. The result of expand acts as if the Tuple 's components were listed as a list of values. (Ordinarily, a Tuple acts as a single value.)"
  },
  "phobos/std/typecons/Structs/Typedef.html": {
    "href": "phobos/std/typecons/Structs/Typedef.html",
    "title": "Struct - Typedef | Marmos Demo",
    "keywords": "Struct - Typedef Module std.typecons public struct Typedef { // alias TD = <todo: marmos support pending>; // TD max( ) static; // TD min( ) static; // T Typedef_payload; } About $(B Typedef) allows the creation of a unique type which is based on an existing type. Unlike the alias feature, $(B Typedef) ensures the two types are not considered as equals. Params init Optional initial value for the new type. cookie Optional, used to create multiple unique types which are based on the same origin type T Note: If a library routine cannot handle the Typedef type, you can use the TypedefType template to extract the type which the Typedef wraps. Aliases Name Description TD Functions Name Description max min Variables Name Description Typedef_payload"
  },
  "phobos/std/typecons/Structs/Unique.html": {
    "href": "phobos/std/typecons/Structs/Unique.html",
    "title": "Struct - Unique | Marmos Demo",
    "keywords": "Struct - Unique Module std.typecons public struct Unique { // Represents a reference to `T` . Resolves to `T*` if `T` is a value type. alias RefT = <todo: marmos support pending>; // Returns whether the resource exists. bool isEmpty( ) ; // Transfer ownership to a `Unique` rvalue. Nullifies the current contents. Same as calling std.algorithm.move on it. Unique release( ) ; } About Encapsulates unique ownership of a resource. When a Unique!T goes out of scope it will call destroy on the resource T that it manages, unless it is transferred. One important consequence of destroy is that it will call the destructor of the resource T . GC-managed references are not guaranteed to be valid during a destructor call, but other members of T , such as file handles or pointers to malloc memory, will still be valid during the destructor call. This allows the resource T to deallocate or clean up any non-GC resources. If it is desirable to persist a Unique!T outside of its original scope, then it can be transferred. The transfer can be explicit, by calling release , or implicit, when returning Unique from a function. The resource T can be a polymorphic class object or instance of an interface, in which case Unique behaves polymorphically too. If T is a value type, then Unique!T will be implemented as a reference to a T . Aliases Name Description RefT Represents a reference to T . Resolves to T* if T is a value type. Functions Name Description isEmpty Returns whether the resource exists. release Transfer ownership to a Unique rvalue. Nullifies the current contents. Same as calling std.algorithm.move on it."
  },
  "phobos/std/typecons/Structs/Yes.html": {
    "href": "phobos/std/typecons/Structs/Yes.html",
    "title": "Struct - Yes | Marmos Demo",
    "keywords": "Struct - Yes Module std.typecons public struct Yes { } About Convenience names that allow using e.g. Yes.encryption instead of Flag!\"encryption\".yes and No.encryption instead of $(D Flag!\"encryption\".no)."
  },
  "phobos/std/typecons/Ternary/Functions/make.html": {
    "href": "phobos/std/typecons/Ternary/Functions/make.html",
    "title": "Overloads for - make | Marmos Demo",
    "keywords": "Overloads for - make Module std.typecons Parent Ternary make(b) Ternary make( ubyte b ) static"
  },
  "phobos/std/typecons/Ternary/Functions/opAssign.html": {
    "href": "phobos/std/typecons/Ternary/Functions/opAssign.html",
    "title": "Overloads for - opAssign | Marmos Demo",
    "keywords": "Overloads for - opAssign Module std.typecons Parent Ternary opAssign(b) void opAssign( bool b ) ditto"
  },
  "phobos/std/typecons/Tuple/Functions/toHash.html": {
    "href": "phobos/std/typecons/Tuple/Functions/toHash.html",
    "title": "Overloads for - toHash | Marmos Demo",
    "keywords": "Overloads for - toHash Module std.typecons Parent Tuple toHash() size_t toHash( ) Creates a hash of this Tuple . Returns A size_t representing the hash of this Tuple ."
  },
  "phobos/std/typecons/Typedef/Functions/max.html": {
    "href": "phobos/std/typecons/Typedef/Functions/max.html",
    "title": "Overloads for - max | Marmos Demo",
    "keywords": "Overloads for - max Module std.typecons Parent Typedef max() TD max( ) static"
  },
  "phobos/std/typecons/Typedef/Functions/min.html": {
    "href": "phobos/std/typecons/Typedef/Functions/min.html",
    "title": "Overloads for - min | Marmos Demo",
    "keywords": "Overloads for - min Module std.typecons Parent Typedef min() TD min( ) static"
  },
  "phobos/std/typecons/Unique/Functions/isEmpty.html": {
    "href": "phobos/std/typecons/Unique/Functions/isEmpty.html",
    "title": "Overloads for - isEmpty | Marmos Demo",
    "keywords": "Overloads for - isEmpty Module std.typecons Parent Unique isEmpty() bool isEmpty( ) Returns whether the resource exists."
  },
  "phobos/std/typecons/Unique/Functions/release.html": {
    "href": "phobos/std/typecons/Unique/Functions/release.html",
    "title": "Overloads for - release | Marmos Demo",
    "keywords": "Overloads for - release Module std.typecons Parent Unique release() Unique release( ) Transfer ownership to a Unique rvalue. Nullifies the current contents. Same as calling std.algorithm.move on it."
  },
  "phobos/std/typecons/issue10647_Foo/Functions/bar.html": {
    "href": "phobos/std/typecons/issue10647_Foo/Functions/bar.html",
    "title": "Overloads for - bar | Marmos Demo",
    "keywords": "Overloads for - bar Module std.typecons Parent issue10647_Foo bar(a) void bar( int a )"
  },
  "phobos/std/typetuple/Overview.html": {
    "href": "phobos/std/typetuple/Overview.html",
    "title": "Module - std.typetuple | Marmos Demo",
    "keywords": "Module - std.typetuple About This module was renamed to disambiguate the term tuple, use $(MREF std, meta) instead. Copyright: Copyright The D Language Foundation 2005 - 2015. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: Source: $(PHOBOSSRC std/typetuple.d) $(SCRIPT inhibitQuickIndex = 1;) Aliases Name Description TypeTuple Alternate name for $(REF AliasSeq, std,meta) for legacy compatibility."
  },
  "phobos/std/uni/CodepointInterval/Functions/a.html": {
    "href": "phobos/std/uni/CodepointInterval/Functions/a.html",
    "title": "Overloads for - a | Marmos Demo",
    "keywords": "Overloads for - a Module std.uni Parent CodepointInterval a() uint a( )"
  },
  "phobos/std/uni/CodepointInterval/Functions/b.html": {
    "href": "phobos/std/uni/CodepointInterval/Functions/b.html",
    "title": "Overloads for - b | Marmos Demo",
    "keywords": "Overloads for - b Module std.uni Parent CodepointInterval b() uint b( )"
  },
  "phobos/std/uni/CowArray/Functions/dupThisReference.html": {
    "href": "phobos/std/uni/CowArray/Functions/dupThisReference.html",
    "title": "Overloads for - dupThisReference | Marmos Demo",
    "keywords": "Overloads for - dupThisReference Module std.uni Parent CowArray dupThisReference(count) void dupThisReference( uint count )"
  },
  "phobos/std/uni/CowArray/Functions/empty.html": {
    "href": "phobos/std/uni/CowArray/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.uni Parent CowArray empty() bool empty( )"
  },
  "phobos/std/uni/CowArray/Functions/freeThisReference.html": {
    "href": "phobos/std/uni/CowArray/Functions/freeThisReference.html",
    "title": "Overloads for - freeThisReference | Marmos Demo",
    "keywords": "Overloads for - freeThisReference Module std.uni Parent CowArray freeThisReference() void freeThisReference( )"
  },
  "phobos/std/uni/CowArray/Functions/length.html": {
    "href": "phobos/std/uni/CowArray/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.uni Parent CowArray length() size_t length( ) length(len) void length( size_t len )"
  },
  "phobos/std/uni/CowArray/Functions/opIndexAssign.html": {
    "href": "phobos/std/uni/CowArray/Functions/opIndexAssign.html",
    "title": "Overloads for - opIndexAssign | Marmos Demo",
    "keywords": "Overloads for - opIndexAssign Module std.uni Parent CowArray opIndexAssign(val, idx) void opIndexAssign( uint val, size_t idx )"
  },
  "phobos/std/uni/CowArray/Functions/opSlice.html": {
    "href": "phobos/std/uni/CowArray/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.uni Parent CowArray opSlice(from, to) <bug: unknown> opSlice( size_t from, size_t to ) auto opSlice(from, to) <bug: unknown> opSlice( size_t from, size_t to ) auto opSlice() <bug: unknown> opSlice( ) auto opSlice() <bug: unknown> opSlice( ) auto"
  },
  "phobos/std/uni/CowArray/Functions/refCount.html": {
    "href": "phobos/std/uni/CowArray/Functions/refCount.html",
    "title": "Overloads for - refCount | Marmos Demo",
    "keywords": "Overloads for - refCount Module std.uni Parent CowArray refCount() uint refCount( ) refCount(cnt) void refCount( uint cnt )"
  },
  "phobos/std/uni/CowArray/Functions/reuse.html": {
    "href": "phobos/std/uni/CowArray/Functions/reuse.html",
    "title": "Overloads for - reuse | Marmos Demo",
    "keywords": "Overloads for - reuse Module std.uni Parent CowArray reuse(arr) <bug: unknown> reuse( <bug: unknown> arr ) static auto"
  },
  "phobos/std/uni/DecompressedIntervals/Functions/empty.html": {
    "href": "phobos/std/uni/DecompressedIntervals/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.uni Parent DecompressedIntervals empty() bool empty( )"
  },
  "phobos/std/uni/DecompressedIntervals/Functions/front.html": {
    "href": "phobos/std/uni/DecompressedIntervals/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.uni Parent DecompressedIntervals front() CodepointInterval front( )"
  },
  "phobos/std/uni/DecompressedIntervals/Functions/popFront.html": {
    "href": "phobos/std/uni/DecompressedIntervals/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.uni Parent DecompressedIntervals popFront() void popFront( )"
  },
  "phobos/std/uni/DecompressedIntervals/Functions/save.html": {
    "href": "phobos/std/uni/DecompressedIntervals/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.uni Parent DecompressedIntervals save() DecompressedIntervals save( )"
  },
  "phobos/std/uni/Functions/arrayRepr.html": {
    "href": "phobos/std/uni/Functions/arrayRepr.html",
    "title": "Overloads for - arrayRepr | Marmos Demo",
    "keywords": "Overloads for - arrayRepr Module std.uni arrayRepr(x) <bug: unknown> arrayRepr( T x ) auto"
  },
  "phobos/std/uni/Functions/buildTrie.html": {
    "href": "phobos/std/uni/Functions/buildTrie.html",
    "title": "Overloads for - buildTrie | Marmos Demo",
    "keywords": "Overloads for - buildTrie Module std.uni buildTrie(range, filler) <bug: unknown> buildTrie( Range range, Value filler ) auto The most general utility for construction of Trie s short of using TrieBuilder directly. Provides a number of convenience overloads. Args is tuple of maximum key value followed by predicates to construct index from key. Alternatively if the first argument is not a value convertible to Key then the whole tuple of Args is treated as predicates and the maximum Key is deduced from predicates. buildTrie(range, filler) <bug: unknown> buildTrie( Range range, Value filler ) auto The most general utility for construction of Trie s short of using TrieBuilder directly. Provides a number of convenience overloads. Args is tuple of maximum key value followed by predicates to construct index from key. Alternatively if the first argument is not a value convertible to Key then the whole tuple of Args is treated as predicates and the maximum Key is deduced from predicates. buildTrie(range, filler, unsorted) <bug: unknown> buildTrie( Range range, Value filler, bool unsorted ) auto The most general utility for construction of Trie s short of using TrieBuilder directly. Provides a number of convenience overloads. Args is tuple of maximum key value followed by predicates to construct index from key. Alternatively if the first argument is not a value convertible to Key then the whole tuple of Args is treated as predicates and the maximum Key is deduced from predicates. buildTrie(range, filler) <bug: unknown> buildTrie( Range range, Value filler ) auto The most general utility for construction of Trie s short of using TrieBuilder directly. Provides a number of convenience overloads. Args is tuple of maximum key value followed by predicates to construct index from key. Alternatively if the first argument is not a value convertible to Key then the whole tuple of Args is treated as predicates and the maximum Key is deduced from predicates. buildTrie(array, filler) <bug: unknown> buildTrie( <bug: unknown> array, Value filler ) auto The most general utility for construction of Trie s short of using TrieBuilder directly. Provides a number of convenience overloads. Args is tuple of maximum key value followed by predicates to construct index from key. Alternatively if the first argument is not a value convertible to Key then the whole tuple of Args is treated as predicates and the maximum Key is deduced from predicates. buildTrie(map, filler) <bug: unknown> buildTrie( <bug: unknown> map, Value filler ) auto The most general utility for construction of Trie s short of using TrieBuilder directly. Provides a number of convenience overloads. Args is tuple of maximum key value followed by predicates to construct index from key. Alternatively if the first argument is not a value convertible to Key then the whole tuple of Args is treated as predicates and the maximum Key is deduced from predicates."
  },
  "phobos/std/uni/Functions/cmpK0.html": {
    "href": "phobos/std/uni/Functions/cmpK0.html",
    "title": "Overloads for - cmpK0 | Marmos Demo",
    "keywords": "Overloads for - cmpK0 Module std.uni cmpK0(a, b) bool cmpK0( Tuple!(ValueKey) a, Tuple!(ValueKey) b )"
  },
  "phobos/std/uni/Functions/codepointSetTrie.html": {
    "href": "phobos/std/uni/Functions/codepointSetTrie.html",
    "title": "Overloads for - codepointSetTrie | Marmos Demo",
    "keywords": "Overloads for - codepointSetTrie Module std.uni codepointSetTrie(set) <bug: unknown> codepointSetTrie( Set set ) auto A shorthand for creating a custom multi-level fixed Trie from a CodepointSet . sizes are numbers of bits per level, with the most significant bits used first. Note: The sum of sizes must be equal 21. See_Also: $(LREF toTrie), which is even simpler. Example --- { import std.stdio; auto set = unicode(\"Number\"); auto trie = codepointSetTrie!(8, 5, 8)(set); writeln(\"Input code points to test:\"); foreach (line; stdin.byLine) { int count=0; foreach (dchar ch; line) if (trie[ch])// is number count++; writefln(\"Contains %d number code points.\", count); } } ---"
  },
  "phobos/std/uni/Functions/comparePropertyName.html": {
    "href": "phobos/std/uni/Functions/comparePropertyName.html",
    "title": "Overloads for - comparePropertyName | Marmos Demo",
    "keywords": "Overloads for - comparePropertyName Module std.uni comparePropertyName(a, b) int comparePropertyName( <bug: unknown> a, <bug: unknown> b )"
  },
  "phobos/std/uni/Functions/compressIntervals.html": {
    "href": "phobos/std/uni/Functions/compressIntervals.html",
    "title": "Overloads for - compressIntervals | Marmos Demo",
    "keywords": "Overloads for - compressIntervals Module std.uni compressIntervals(intervals) <bug: unknown> compressIntervals( Range intervals )"
  },
  "phobos/std/uni/Functions/compressTo.html": {
    "href": "phobos/std/uni/Functions/compressTo.html",
    "title": "Overloads for - compressTo | Marmos Demo",
    "keywords": "Overloads for - compressTo Module std.uni compressTo(val, arr) void compressTo( uint val, <bug: unknown> arr )"
  },
  "phobos/std/uni/Functions/copyBackwards.html": {
    "href": "phobos/std/uni/Functions/copyBackwards.html",
    "title": "Overloads for - copyBackwards | Marmos Demo",
    "keywords": "Overloads for - copyBackwards Module std.uni copyBackwards(src, dest) void copyBackwards( <bug: unknown> src, <bug: unknown> dest )"
  },
  "phobos/std/uni/Functions/copyForward.html": {
    "href": "phobos/std/uni/Functions/copyForward.html",
    "title": "Overloads for - copyForward | Marmos Demo",
    "keywords": "Overloads for - copyForward Module std.uni copyForward(src, dest) void copyForward( <bug: unknown> src, <bug: unknown> dest )"
  },
  "phobos/std/uni/Functions/decoder.html": {
    "href": "phobos/std/uni/Functions/decoder.html",
    "title": "Overloads for - decoder | Marmos Demo",
    "keywords": "Overloads for - decoder Module std.uni decoder(s, offset) <bug: unknown> decoder( <bug: unknown> s, size_t offset ) auto"
  },
  "phobos/std/uni/Functions/decompressFrom.html": {
    "href": "phobos/std/uni/Functions/decompressFrom.html",
    "title": "Overloads for - decompressFrom | Marmos Demo",
    "keywords": "Overloads for - decompressFrom Module std.uni decompressFrom(arr, idx) uint decompressFrom( <bug: unknown> arr, size_t idx )"
  },
  "phobos/std/uni/Functions/decompressIntervals.html": {
    "href": "phobos/std/uni/Functions/decompressIntervals.html",
    "title": "Overloads for - decompressIntervals | Marmos Demo",
    "keywords": "Overloads for - decompressIntervals Module std.uni decompressIntervals(data) <bug: unknown> decompressIntervals( <bug: unknown> data ) auto"
  },
  "phobos/std/uni/Functions/force.html": {
    "href": "phobos/std/uni/Functions/force.html",
    "title": "Overloads for - force | Marmos Demo",
    "keywords": "Overloads for - force Module std.uni force(from) <bug: unknown> force( F from ) auto force(from) <bug: unknown> force( F from ) auto force(from) <bug: unknown> force( F from ) auto"
  },
  "phobos/std/uni/Functions/genUnrolledSwitchSearch.html": {
    "href": "phobos/std/uni/Functions/genUnrolledSwitchSearch.html",
    "title": "Overloads for - genUnrolledSwitchSearch | Marmos Demo",
    "keywords": "Overloads for - genUnrolledSwitchSearch Module std.uni genUnrolledSwitchSearch(size) string genUnrolledSwitchSearch( size_t size )"
  },
  "phobos/std/uni/Functions/genericReplace.html": {
    "href": "phobos/std/uni/Functions/genericReplace.html",
    "title": "Overloads for - genericReplace | Marmos Demo",
    "keywords": "Overloads for - genericReplace Module std.uni genericReplace(dest, from, to, stuff) size_t genericReplace( T dest, size_t from, size_t to, Range stuff )"
  },
  "phobos/std/uni/Functions/impl.html": {
    "href": "phobos/std/uni/Functions/impl.html",
    "title": "Overloads for - impl | Marmos Demo",
    "keywords": "Overloads for - impl Module std.uni impl(arr) size_t impl( <bug: unknown> arr ) impl(arr) size_t impl( <bug: unknown> arr )"
  },
  "phobos/std/uni/Functions/isPow2OrZero.html": {
    "href": "phobos/std/uni/Functions/isPow2OrZero.html",
    "title": "Overloads for - isPow2OrZero | Marmos Demo",
    "keywords": "Overloads for - isPow2OrZero Module std.uni isPow2OrZero(sz) bool isPow2OrZero( size_t sz )"
  },
  "phobos/std/uni/Functions/isWhite.html": {
    "href": "phobos/std/uni/Functions/isWhite.html",
    "title": "Overloads for - isWhite | Marmos Demo",
    "keywords": "Overloads for - isWhite Module std.uni isWhite(c) bool isWhite( dchar c )"
  },
  "phobos/std/uni/Functions/low_8.html": {
    "href": "phobos/std/uni/Functions/low_8.html",
    "title": "Overloads for - low_8 | Marmos Demo",
    "keywords": "Overloads for - low_8 Module std.uni low_8(x) uint low_8( uint x )"
  },
  "phobos/std/uni/Functions/mapTrieIndex.html": {
    "href": "phobos/std/uni/Functions/mapTrieIndex.html",
    "title": "Overloads for - mapTrieIndex | Marmos Demo",
    "keywords": "Overloads for - mapTrieIndex Module std.uni mapTrieIndex(key) size_t mapTrieIndex( Key key ) Maps Key to a suitable integer index within the range of size_t . The mapping is constructed by applying predicates from Prefix left to right and concatenating the resulting bits. The first (leftmost) predicate defines the most significant bits of the resulting index."
  },
  "phobos/std/uni/Functions/midlow_8.html": {
    "href": "phobos/std/uni/Functions/midlow_8.html",
    "title": "Overloads for - midlow_8 | Marmos Demo",
    "keywords": "Overloads for - midlow_8 Module std.uni midlow_8(x) uint midlow_8( uint x )"
  },
  "phobos/std/uni/Functions/packedArrayView.html": {
    "href": "phobos/std/uni/Functions/packedArrayView.html",
    "title": "Overloads for - packedArrayView | Marmos Demo",
    "keywords": "Overloads for - packedArrayView Module std.uni packedArrayView(ptr, items) PackedArrayView!(T) packedArrayView( <bug: unknown> ptr, size_t items )"
  },
  "phobos/std/uni/Functions/propertyNameLess.html": {
    "href": "phobos/std/uni/Functions/propertyNameLess.html",
    "title": "Overloads for - propertyNameLess | Marmos Demo",
    "keywords": "Overloads for - propertyNameLess Module std.uni propertyNameLess(a, b) bool propertyNameLess( <bug: unknown> a, <bug: unknown> b )"
  },
  "phobos/std/uni/Functions/read24.html": {
    "href": "phobos/std/uni/Functions/read24.html",
    "title": "Overloads for - read24 | Marmos Demo",
    "keywords": "Overloads for - read24 Module std.uni read24(ptr, idx) uint read24( <bug: unknown> ptr, size_t idx )"
  },
  "phobos/std/uni/Functions/replicateBits.html": {
    "href": "phobos/std/uni/Functions/replicateBits.html",
    "title": "Overloads for - replicateBits | Marmos Demo",
    "keywords": "Overloads for - replicateBits Module std.uni replicateBits(val) size_t replicateBits( size_t val )"
  },
  "phobos/std/uni/Functions/safeRead24.html": {
    "href": "phobos/std/uni/Functions/safeRead24.html",
    "title": "Overloads for - safeRead24 | Marmos Demo",
    "keywords": "Overloads for - safeRead24 Module std.uni safeRead24(ptr, idx) uint safeRead24( <bug: unknown> ptr, size_t idx )"
  },
  "phobos/std/uni/Functions/safeWrite24.html": {
    "href": "phobos/std/uni/Functions/safeWrite24.html",
    "title": "Overloads for - safeWrite24 | Marmos Demo",
    "keywords": "Overloads for - safeWrite24 Module std.uni safeWrite24(ptr, val, idx) void safeWrite24( <bug: unknown> ptr, uint val, size_t idx )"
  },
  "phobos/std/uni/Functions/sharMethod.html": {
    "href": "phobos/std/uni/Functions/sharMethod.html",
    "title": "Overloads for - sharMethod | Marmos Demo",
    "keywords": "Overloads for - sharMethod Module std.uni sharMethod(range, needle) size_t sharMethod( Range range, T needle )"
  },
  "phobos/std/uni/Functions/sliceOverIndexed.html": {
    "href": "phobos/std/uni/Functions/sliceOverIndexed.html",
    "title": "Overloads for - sliceOverIndexed | Marmos Demo",
    "keywords": "Overloads for - sliceOverIndexed Module std.uni sliceOverIndexed(a, b, x) SliceOverIndexed!(const(T)) sliceOverIndexed( size_t a, size_t b, <bug: unknown> x ) sliceOverIndexed(a, b, x) SliceOverIndexed!(T) sliceOverIndexed( size_t a, size_t b, <bug: unknown> x )"
  },
  "phobos/std/uni/Functions/spaceFor.html": {
    "href": "phobos/std/uni/Functions/spaceFor.html",
    "title": "Overloads for - spaceFor | Marmos Demo",
    "keywords": "Overloads for - spaceFor Module std.uni spaceFor(new_len) size_t spaceFor( size_t new_len )"
  },
  "phobos/std/uni/Functions/sumOfIntegerTuple.html": {
    "href": "phobos/std/uni/Functions/sumOfIntegerTuple.html",
    "title": "Overloads for - sumOfIntegerTuple | Marmos Demo",
    "keywords": "Overloads for - sumOfIntegerTuple Module std.uni sumOfIntegerTuple() size_t sumOfIntegerTuple( )"
  },
  "phobos/std/uni/Functions/switchUniformLowerBound.html": {
    "href": "phobos/std/uni/Functions/switchUniformLowerBound.html",
    "title": "Overloads for - switchUniformLowerBound | Marmos Demo",
    "keywords": "Overloads for - switchUniformLowerBound Module std.uni switchUniformLowerBound(range, needle) size_t switchUniformLowerBound( Range range, T needle )"
  },
  "phobos/std/uni/Functions/toDelegate.html": {
    "href": "phobos/std/uni/Functions/toDelegate.html",
    "title": "Overloads for - toDelegate | Marmos Demo",
    "keywords": "Overloads for - toDelegate Module std.uni toDelegate(set) <bug: unknown> toDelegate( Set set ) auto $(P Builds a Trie with typically optimal speed-size trade-off and wraps it into a delegate of the following type: $(D bool delegate(dchar ch)). ) $(P Effectively this creates a 'tester' lambda suitable for algorithms like std.algorithm.find that take unary predicates. ) See the $(S_LINK Synopsis, Synopsis) section for example."
  },
  "phobos/std/uni/Functions/toTrie.html": {
    "href": "phobos/std/uni/Functions/toTrie.html",
    "title": "Overloads for - toTrie | Marmos Demo",
    "keywords": "Overloads for - toTrie Module std.uni toTrie(set) <bug: unknown> toTrie( Set set ) auto Convenience function to construct optimal configurations for packed Trie from any set of $(CODEPOINTS). The parameter level indicates the number of trie levels to use, allowed values are: 1, 2, 3 or 4. Levels represent different trade-offs speed-size wise. $(P Level 1 is fastest and the most memory hungry (a bit array). ) $(P Level 4 is the slowest and has the smallest footprint. ) See the $(S_LINK Synopsis, Synopsis) section for example. Note Level 4 stays very practical (being faster and more predictable) compared to using direct lookup on the set itself."
  },
  "phobos/std/uni/Functions/unalignedRead24.html": {
    "href": "phobos/std/uni/Functions/unalignedRead24.html",
    "title": "Overloads for - unalignedRead24 | Marmos Demo",
    "keywords": "Overloads for - unalignedRead24 Module std.uni unalignedRead24(ptr, idx) uint unalignedRead24( <bug: unknown> ptr, size_t idx )"
  },
  "phobos/std/uni/Functions/unalignedWrite24.html": {
    "href": "phobos/std/uni/Functions/unalignedWrite24.html",
    "title": "Overloads for - unalignedWrite24 | Marmos Demo",
    "keywords": "Overloads for - unalignedWrite24 Module std.uni unalignedWrite24(ptr, val, idx) void unalignedWrite24( <bug: unknown> ptr, uint val, size_t idx )"
  },
  "phobos/std/uni/Functions/uniformLowerBound.html": {
    "href": "phobos/std/uni/Functions/uniformLowerBound.html",
    "title": "Overloads for - uniformLowerBound | Marmos Demo",
    "keywords": "Overloads for - uniformLowerBound Module std.uni uniformLowerBound(range, needle) size_t uniformLowerBound( Range range, T needle )"
  },
  "phobos/std/uni/Functions/utf16Matcher.html": {
    "href": "phobos/std/uni/Functions/utf16Matcher.html",
    "title": "Overloads for - utf16Matcher | Marmos Demo",
    "keywords": "Overloads for - utf16Matcher Module std.uni utf16Matcher(set) <bug: unknown> utf16Matcher( Set set ) auto"
  },
  "phobos/std/uni/Functions/utf8Matcher.html": {
    "href": "phobos/std/uni/Functions/utf8Matcher.html",
    "title": "Overloads for - utf8Matcher | Marmos Demo",
    "keywords": "Overloads for - utf8Matcher Module std.uni utf8Matcher(set) <bug: unknown> utf8Matcher( Set set ) auto"
  },
  "phobos/std/uni/Functions/utfMatcher.html": {
    "href": "phobos/std/uni/Functions/utfMatcher.html",
    "title": "Overloads for - utfMatcher | Marmos Demo",
    "keywords": "Overloads for - utfMatcher Module std.uni utfMatcher(set) <bug: unknown> utfMatcher( Set set ) auto Constructs a matcher object to classify $(CODEPOINTS) from the set for encoding that has Char as code unit. See $(LREF MatcherConcept) for API outline."
  },
  "phobos/std/uni/Functions/write24.html": {
    "href": "phobos/std/uni/Functions/write24.html",
    "title": "Overloads for - write24 | Marmos Demo",
    "keywords": "Overloads for - write24 Module std.uni write24(ptr, val, idx) void write24( <bug: unknown> ptr, uint val, size_t idx )"
  },
  "phobos/std/uni/InversionList/Functions/addInterval.html": {
    "href": "phobos/std/uni/InversionList/Functions/addInterval.html",
    "title": "Overloads for - addInterval | Marmos Demo",
    "keywords": "Overloads for - addInterval Module std.uni Parent InversionList addInterval(a, b, hint) Marker addInterval( int a, int b, Marker hint )"
  },
  "phobos/std/uni/InversionList/Functions/byCodepoint.html": {
    "href": "phobos/std/uni/InversionList/Functions/byCodepoint.html",
    "title": "Overloads for - byCodepoint | Marmos Demo",
    "keywords": "Overloads for - byCodepoint Module std.uni Parent InversionList byCodepoint() <bug: unknown> byCodepoint( ) auto A range that spans each $(CODEPOINT) in this set."
  },
  "phobos/std/uni/InversionList/Functions/byInterval.html": {
    "href": "phobos/std/uni/InversionList/Functions/byInterval.html",
    "title": "Overloads for - byInterval | Marmos Demo",
    "keywords": "Overloads for - byInterval Module std.uni Parent InversionList byInterval() <bug: unknown> byInterval( ) auto Get range that spans all of the $(CODEPOINT) intervals in this $(LREF InversionList)."
  },
  "phobos/std/uni/InversionList/Functions/dropUpTo.html": {
    "href": "phobos/std/uni/InversionList/Functions/dropUpTo.html",
    "title": "Overloads for - dropUpTo | Marmos Demo",
    "keywords": "Overloads for - dropUpTo Module std.uni Parent InversionList dropUpTo(a, pos) Marker dropUpTo( uint a, Marker pos )"
  },
  "phobos/std/uni/InversionList/Functions/empty.html": {
    "href": "phobos/std/uni/InversionList/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.uni Parent InversionList empty() bool empty( ) True if this set doesn't contain any $(CODEPOINTS)."
  },
  "phobos/std/uni/InversionList/Functions/intervals.html": {
    "href": "phobos/std/uni/InversionList/Functions/intervals.html",
    "title": "Overloads for - intervals | Marmos Demo",
    "keywords": "Overloads for - intervals Module std.uni Parent InversionList intervals() <bug: unknown> intervals( )"
  },
  "phobos/std/uni/InversionList/Functions/inverted.html": {
    "href": "phobos/std/uni/InversionList/Functions/inverted.html",
    "title": "Overloads for - inverted | Marmos Demo",
    "keywords": "Overloads for - inverted Module std.uni Parent InversionList inverted() <bug: unknown> inverted( ) auto Obtains a set that is the inversion of this set. See the '!' $(LREF opUnary) for the same but using operators."
  },
  "phobos/std/uni/InversionList/Functions/length.html": {
    "href": "phobos/std/uni/InversionList/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.uni Parent InversionList length() size_t length( ) Number of $(CODEPOINTS) in this set"
  },
  "phobos/std/uni/InversionList/Functions/opIndex.html": {
    "href": "phobos/std/uni/InversionList/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.uni Parent InversionList opIndex(val) bool opIndex( uint val ) Tests the presence of code point val in this set."
  },
  "phobos/std/uni/InversionList/Functions/sanitize.html": {
    "href": "phobos/std/uni/InversionList/Functions/sanitize.html",
    "title": "Overloads for - sanitize | Marmos Demo",
    "keywords": "Overloads for - sanitize Module std.uni Parent InversionList sanitize() void sanitize( )"
  },
  "phobos/std/uni/InversionList/Functions/skipUpTo.html": {
    "href": "phobos/std/uni/InversionList/Functions/skipUpTo.html",
    "title": "Overloads for - skipUpTo | Marmos Demo",
    "keywords": "Overloads for - skipUpTo Module std.uni Parent InversionList skipUpTo(a, pos) Marker skipUpTo( uint a, Marker pos )"
  },
  "phobos/std/uni/InversionList/Functions/subChar.html": {
    "href": "phobos/std/uni/InversionList/Functions/subChar.html",
    "title": "Overloads for - subChar | Marmos Demo",
    "keywords": "Overloads for - subChar Module std.uni Parent InversionList subChar(ch) <bug: unknown> subChar( dchar ch )"
  },
  "phobos/std/uni/InversionList/Functions/toSourceCode.html": {
    "href": "phobos/std/uni/InversionList/Functions/toSourceCode.html",
    "title": "Overloads for - toSourceCode | Marmos Demo",
    "keywords": "Overloads for - toSourceCode Module std.uni Parent InversionList toSourceCode(range, funcName) string toSourceCode( <bug: unknown> range, string funcName ) static toSourceCode(funcName) string toSourceCode( string funcName ) Generates string with D source code of unary function with name of funcName taking a single dchar argument. If funcName is empty the code is adjusted to be a lambda function. The function generated tests if the $(CODEPOINT) passed belongs to this set or not. The result is to be used with string mixin. The intended usage area is aggressive optimization via meta programming in parser generators and the like. Note: Use with care for relatively small or regular sets. It could end up being slower then just using multi-staged tables. Example --- import std.stdio; // construct set directly from [a, b$RPAREN intervals auto set = CodepointSet(10, 12, 45, 65, 100, 200); writeln(set); writeln(set.toSourceCode(\"func\")); --- The above outputs something along the lines of --- bool func(dchar ch) @safe pure nothrow @nogc { if (ch < 45) { if (ch == 10 || ch == 11) return true; return false; } else if (ch < 65) return true; else { if (ch < 100) return false; if (ch < 200) return true; return false; } } ---"
  },
  "phobos/std/uni/Overview.html": {
    "href": "phobos/std/uni/Overview.html",
    "title": "Module - std.uni | Marmos Demo",
    "keywords": "Module - std.uni About $(P The std.uni module provides an implementation of fundamental Unicode algorithms and data structures. This doesn't include UTF encoding and decoding primitives, see $(REF decode, std,_utf) and $(REF encode, std,_utf) in $(MREF std, utf) for this functionality. ) $(SCRIPT inhibitQuickIndex = 1;) $(DIVC quickindex, $(BOOKTABLE, $(TR $(TH Category) $(TH Functions)) $(TR $(TD Decode) $(TD $(LREF byCodePoint) $(LREF byGrapheme) $(LREF decodeGrapheme) $(LREF graphemeStride) )) $(TR $(TD Comparison) $(TD $(LREF icmp) $(LREF sicmp) )) $(TR $(TD Classification) $(TD $(LREF isAlpha) $(LREF isAlphaNum) $(LREF isCodepointSet) $(LREF isControl) $(LREF isFormat) $(LREF isGraphical) $(LREF isIntegralPair) $(LREF isMark) $(LREF isNonCharacter) $(LREF isNumber) $(LREF isPrivateUse) $(LREF isPunctuation) $(LREF isSpace) $(LREF isSurrogate) $(LREF isSurrogateHi) $(LREF isSurrogateLo) $(LREF isSymbol) $(LREF isWhite) )) $(TR $(TD Normalization) $(TD $(LREF NFC) $(LREF NFD) $(LREF NFKD) $(LREF NormalizationForm) $(LREF normalize) )) $(TR $(TD Decompose) $(TD $(LREF decompose) $(LREF decomposeHangul) $(LREF UnicodeDecomposition) )) $(TR $(TD Compose) $(TD $(LREF compose) $(LREF composeJamo) )) $(TR $(TD Sets) $(TD $(LREF CodepointInterval) $(LREF CodepointSet) $(LREF InversionList) $(LREF unicode) )) $(TR $(TD Trie) $(TD $(LREF codepointSetTrie) $(LREF CodepointSetTrie) $(LREF codepointTrie) $(LREF CodepointTrie) $(LREF toTrie) $(LREF toDelegate) )) $(TR $(TD Casing) $(TD $(LREF asCapitalized) $(LREF asLowerCase) $(LREF asUpperCase) $(LREF isLower) $(LREF isUpper) $(LREF toLower) $(LREF toLowerInPlace) $(LREF toUpper) $(LREF toUpperInPlace) )) $(TR $(TD Utf8Matcher) $(TD $(LREF isUtfMatcher) $(LREF MatcherConcept) $(LREF utfMatcher) )) $(TR $(TD Separators) $(TD $(LREF lineSep) $(LREF nelSep) $(LREF paraSep) )) $(TR $(TD Building blocks) $(TD $(LREF allowedIn) $(LREF combiningClass) $(LREF Grapheme) )) )) $(P All primitives listed operate on Unicode characters and sets of characters. For functions which operate on ASCII characters and ignore Unicode $(CHARACTERS), see $(MREF std, ascii). For definitions of Unicode $(CHARACTER), $(CODEPOINT) and other terms used throughout this module see the $(S_LINK Terminology, terminology) section below. ) $(P The focus of this module is the core needs of developing Unicode-aware applications. To that effect it provides the following optimized primitives: ) $(UL $(LI Character classification by category and common properties: $(LREF isAlpha), $(LREF isWhite) and others. ) \\((LI Case-insensitive string comparison (\\)(LREF sicmp), $(LREF icmp)). ) $(LI Converting text to any of the four normalization forms via $(LREF normalize). ) \\((LI Decoding (\\)(LREF decodeGrapheme)) and iteration ($(LREF byGrapheme), $(LREF graphemeStride)) by user-perceived characters, that is by $(LREF Grapheme) clusters. ) $(LI Decomposing and composing of individual character(s) according to canonical or compatibility rules, see $(LREF compose) and $(LREF decompose), including the specific version for Hangul syllables $(LREF composeJamo) and $(LREF decomposeHangul). ) ) $(P It's recognized that an application may need further enhancements and extensions, such as less commonly known algorithms, or tailoring existing ones for region specific needs. To help users with building any extra functionality beyond the core primitives, the module provides: ) $(UL $(LI $(LREF CodepointSet), a type for easy manipulation of sets of characters. Besides the typical set algebra it provides an unusual feature: a D source code generator for detection of $(CODEPOINTS) in this set. This is a boon for meta-programming parser frameworks, and is used internally to power classification in small sets like $(LREF isWhite). ) $(LI A way to construct optimal packed multi-stage tables also known as a special case of $(LINK2 https://en.wikipedia.org/wiki/Trie, Trie). The functions $(LREF codepointTrie), $(LREF codepointSetTrie) construct custom tries that map dchar to value. The end result is a fast and predictable $(BIGOH 1) lookup that powers functions like $(LREF isAlpha) and $(LREF combiningClass), but for user-defined data sets. ) $(LI A useful technique for Unicode-aware parsers that perform character classification of encoded $(CODEPOINTS) is to avoid unnecassary decoding at all costs. $(LREF utfMatcher) provides an improvement over the usual workflow of decode-classify-process, combining the decoding and classification steps. By extracting necessary bits directly from encoded $(S_LINK Code unit, code units) matchers achieve significant performance improvements. See $(LREF MatcherConcept) for the common interface of UTF matchers. ) $(LI Generally useful building blocks for customized normalization: $(LREF combiningClass) for querying combining class and $(LREF allowedIn) for testing the Quick_Check property of a given normalization form. ) $(LI Access to a large selection of commonly used sets of $(CODEPOINTS). $(S_LINK Unicode properties, Supported sets) include Script, Block and General Category. The exact contents of a set can be observed in the CLDR utility, on the $(HTTP www.unicode.org/cldr/utility/properties.jsp, property index) page of the Unicode website. See $(LREF unicode) for easy and (optionally) compile-time checked set queries. ) ) $(SECTION Synopsis) --- import std.uni; void main() { // initialize code point sets using script/block or property name // now 'set' contains code points from both scripts. auto set = unicode(\"Cyrillic\") | unicode(\"Armenian\"); // same thing but simpler and checked at compile-time auto ascii = unicode.ASCII; auto currency = unicode.Currency_Symbol; // easy set ops auto a = set & ascii; assert(a.empty); // as it has no intersection with ascii a = set | ascii; auto b = currency - a; // subtract all ASCII, Cyrillic and Armenian // some properties of code point sets assert(b.length > 45); // 46 items in Unicode 6.1, even more in 6.2 // testing presence of a code point in a set // is just fine, it is O(logN) assert(!b['$']); assert(!b['\\u058F']); // Armenian dram sign assert(b['¥']); // building fast lookup tables, these guarantee O(1) complexity // 1-level Trie lookup table essentially a huge bit-set ~262Kb auto oneTrie = toTrie!1(b); // 2-level far more compact but typically slightly slower auto twoTrie = toTrie!2(b); // 3-level even smaller, and a bit slower yet auto threeTrie = toTrie!3(b); assert(oneTrie['£']); assert(twoTrie['£']); assert(threeTrie['£']); // build the trie with the most sensible trie level // and bind it as a functor auto cyrillicOrArmenian = toDelegate(set); auto balance = find!(cyrillicOrArmenian)(\"Hello ընկեր!\"); assert(balance == \"ընկեր!\"); // compatible with bool delegate(dchar) bool delegate(dchar) bindIt = cyrillicOrArmenian; // Normalization string s = \"Plain ascii (and not only), is always normalized!\"; assert(s is normalize(s));// is the same string string nonS = \"A\\u0308ffin\"; // A ligature auto nS = normalize(nonS); // to NFC, the W3C endorsed standard assert(nS == \"Äffin\"); assert(nS != nonS); string composed = \"Äffin\"; assert(normalize!NFD(composed) == \"A\\u0308ffin\"); // to NFKD, compatibility decomposition useful for fuzzy matching/searching assert(normalize!NFKD(\"2¹⁰\") == \"210\"); } --- $(SECTION Terminology) $(P The following is a list of important Unicode notions and definitions. Any conventions used specifically in this module alone are marked as such. The descriptions are based on the formal definition as found in $(HTTP www.unicode.org/versions/Unicode6.2.0/ch03.pdf, chapter three of The Unicode Standard Core Specification.) ) $(P $(DEF Abstract character) A unit of information used for the organization, control, or representation of textual data. Note that: $(UL $(LI When representing data, the nature of that data is generally symbolic as opposed to some other kind of data (for example, visual). ) $(LI An abstract character has no concrete form and should not be confused with a $(S_LINK Glyph, glyph). ) $(LI An abstract character does not necessarily correspond to what a user thinks of as a “character” and should not be confused with a $(LREF Grapheme). ) $(LI The abstract characters encoded (see Encoded character) are known as Unicode abstract characters. ) $(LI Abstract characters not directly encoded by the Unicode Standard can often be represented by the use of combining character sequences. ) ) ) $(P $(DEF Canonical decomposition) The decomposition of a character or character sequence that results from recursively applying the canonical mappings found in the Unicode Character Database and these described in Conjoining Jamo Behavior (section 12 of $(HTTP www.unicode.org/uni2book/ch03.pdf, Unicode Conformance)). ) $(P $(DEF Canonical composition) The precise definition of the Canonical composition is the algorithm as specified in $(HTTP www.unicode.org/uni2book/ch03.pdf, Unicode Conformance) section 11. Informally it's the process that does the reverse of the canonical decomposition with the addition of certain rules that e.g. prevent legacy characters from appearing in the composed result. ) $(P $(DEF Canonical equivalent) Two character sequences are said to be canonical equivalents if their full canonical decompositions are identical. ) $(P $(DEF Character) Typically differs by context. For the purpose of this documentation the term $(I character) implies $(I encoded character), that is, a code point having an assigned abstract character (a symbolic meaning). ) $(P $(DEF Code point) Any value in the Unicode codespace; that is, the range of integers from 0 to 10FFFF (hex). Not all code points are assigned to encoded characters. ) $(P $(DEF Code unit) The minimal bit combination that can represent a unit of encoded text for processing or interchange. Depending on the encoding this could be: 8-bit code units in the UTF-8 (char), 16-bit code units in the UTF-16 (wchar), and 32-bit code units in the UTF-32 (dchar). $(I Note that in UTF-32, a code unit is a code point and is represented by the D dchar type.) ) $(P $(DEF Combining character) A character with the General Category of Combining Mark(M). $(UL $(LI All characters with non-zero canonical combining class are combining characters, but the reverse is not the case: there are combining characters with a zero combining class. ) $(LI These characters are not normally used in isolation unless they are being described. They include such characters as accents, diacritics, Hebrew points, Arabic vowel signs, and Indic matras. ) ) ) $(P $(DEF Combining class) A numerical value used by the Unicode Canonical Ordering Algorithm to determine which sequences of combining marks are to be considered canonically equivalent and which are not. ) $(P $(DEF Compatibility decomposition) The decomposition of a character or character sequence that results from recursively applying both the compatibility mappings and the canonical mappings found in the Unicode Character Database, and those described in Conjoining Jamo Behavior no characters can be further decomposed. ) $(P $(DEF Compatibility equivalent) Two character sequences are said to be compatibility equivalents if their full compatibility decompositions are identical. ) $(P $(DEF Encoded character) An association (or mapping) between an abstract character and a code point. ) $(P $(DEF Glyph) The actual, concrete image of a glyph representation having been rasterized or otherwise imaged onto some display surface. ) $(P $(DEF Grapheme base) A character with the property Grapheme_Base, or any standard Korean syllable block. ) $(P $(DEF Grapheme cluster) Defined as the text between grapheme boundaries as specified by Unicode Standard Annex #29, $(HTTP www.unicode.org/reports/tr29/, Unicode text segmentation). Important general properties of a grapheme: $(UL $(LI The grapheme cluster represents a horizontally segmentable unit of text, consisting of some grapheme base (which may consist of a Korean syllable) together with any number of nonspacing marks applied to it. ) $(LI A grapheme cluster typically starts with a grapheme base and then extends across any subsequent sequence of nonspacing marks. A grapheme cluster is most directly relevant to text rendering and processes such as cursor placement and text selection in editing, but may also be relevant to comparison and searching. ) $(LI For many processes, a grapheme cluster behaves as if it was a single character with the same properties as its grapheme base. Effectively, nonspacing marks apply $(I graphically) to the base, but do not change its properties. ) ) $(P This module defines a number of primitives that work with graphemes: $(LREF Grapheme), $(LREF decodeGrapheme) and $(LREF graphemeStride). All of them are using $(I extended grapheme) boundaries as defined in the aforementioned standard annex. ) ) $(P $(DEF Nonspacing mark) A combining character with the General Category of Nonspacing Mark (Mn) or Enclosing Mark (Me). ) $(P $(DEF Spacing mark) A combining character that is not a nonspacing mark. ) $(SECTION Normalization) $(P The concepts of $(S_LINK Canonical equivalent, canonical equivalent) or $(S_LINK Compatibility equivalent, compatibility equivalent) characters in the Unicode Standard make it necessary to have a full, formal definition of equivalence for Unicode strings. String equivalence is determined by a process called normalization, whereby strings are converted into forms which are compared directly for identity. This is the primary goal of the normalization process, see the function $(LREF normalize) to convert into any of the four defined forms. ) $(P A very important attribute of the Unicode Normalization Forms is that they must remain stable between versions of the Unicode Standard. A Unicode string normalized to a particular Unicode Normalization Form in one version of the standard is guaranteed to remain in that Normalization Form for implementations of future versions of the standard. ) $(P The Unicode Standard specifies four normalization forms. Informally, two of these forms are defined by maximal decomposition of equivalent sequences, and two of these forms are defined by maximal $(I composition) of equivalent sequences. $(UL $(LI Normalization Form D (NFD): The $(S_LINK Canonical decomposition, canonical decomposition) of a character sequence.) $(LI Normalization Form KD (NFKD): The $(S_LINK Compatibility decomposition, compatibility decomposition) of a character sequence.) $(LI Normalization Form C (NFC): The canonical composition of the $(S_LINK Canonical decomposition, canonical decomposition) of a coded character sequence.) $(LI Normalization Form KC (NFKC): The canonical composition of the $(S_LINK Compatibility decomposition, compatibility decomposition) of a character sequence) ) ) $(P The choice of the normalization form depends on the particular use case. NFC is the best form for general text, since it's more compatible with strings converted from legacy encodings. NFKC is the preferred form for identifiers, especially where there are security concerns. NFD and NFKD are the most useful for internal processing. ) $(SECTION Construction of lookup tables) $(P The Unicode standard describes a set of algorithms that depend on having the ability to quickly look up various properties of a code point. Given the codespace of about 1 million $(CODEPOINTS), it is not a trivial task to provide a space-efficient solution for the multitude of properties. ) $(P Common approaches such as hash-tables or binary search over sorted code point intervals (as in $(LREF InversionList)) are insufficient. Hash-tables have enormous memory footprint and binary search over intervals is not fast enough for some heavy-duty algorithms. ) $(P The recommended solution (see Unicode Implementation Guidelines) is using multi-stage tables that are an implementation of the $(HTTP en.wikipedia.org/wiki/Trie, Trie) data structure with integer keys and a fixed number of stages. For the remainder of the section this will be called a fixed trie. The following describes a particular implementation that is aimed for the speed of access at the expense of ideal size savings. ) $(P Taking a 2-level Trie as an example the principle of operation is as follows. Split the number of bits in a key (code point, 21 bits) into 2 components (e.g. 15 and 8). The first is the number of bits in the index of the trie and the other is number of bits in each page of the trie. The layout of the trie is then an array of size 2^^bits-of-index followed an array of memory chunks of size 2^^bits-of-page/bits-per-element. ) $(P The number of pages is variable (but not less then 1) unlike the number of entries in the index. The slots of the index all have to contain a number of a page that is present. The lookup is then just a couple of operations - slice the upper bits, lookup an index for these, take a page at this index and use the lower bits as an offset within this page. Assuming that pages are laid out consequently in one array at pages , the pseudo-code is: ) --- auto elemsPerPage = (2 ^^ bits_per_page) / Value.sizeOfInBits; pages[index[n >> bits_per_page]][n & (elemsPerPage - 1)]; --- $(P Where if elemsPerPage is a power of 2 the whole process is a handful of simple instructions and 2 array reads. Subsequent levels of the trie are introduced by recursing on this notion - the index array is treated as values. The number of bits in index is then again split into 2 parts, with pages over 'current-index' and the new 'upper-index'. ) $(P For completeness a level 1 trie is simply an array. The current implementation takes advantage of bit-packing values when the range is known to be limited in advance (such as bool ). See also $(LREF BitPacked) for enforcing it manually. The major size advantage however comes from the fact that multiple $(B identical pages on every level are merged) by construction. ) $(P The process of constructing a trie is more involved and is hidden from the user in a form of the convenience functions $(LREF codepointTrie), $(LREF codepointSetTrie) and the even more convenient $(LREF toTrie). In general a set or built-in AA with dchar type can be turned into a trie. The trie object in this module is read-only (immutable); it's effectively frozen after construction. ) $(SECTION Unicode properties) $(P This is a full list of Unicode properties accessible through $(LREF unicode) with specific helpers per category nested within. Consult the $(HTTP www.unicode.org/cldr/utility/properties.jsp, CLDR utility) when in doubt about the contents of a particular set. ) $(P General category sets listed below are only accessible with the $(LREF unicode) shorthand accessor.) $(BOOKTABLE $(B General category ), $(TR $(TH Abb.) $(TH Long form) $(TH Abb.) \\((TH Long form)\\)(TH Abb.) $(TH Long form)) $(TR $(TD L) $(TD Letter) $(TD Cn) $(TD Unassigned) $(TD Po) $(TD Other_Punctuation)) $(TR $(TD Ll) $(TD Lowercase_Letter) $(TD Co) $(TD Private_Use) $(TD Ps) $(TD Open_Punctuation)) $(TR $(TD Lm) $(TD Modifier_Letter) $(TD Cs) $(TD Surrogate) $(TD S) $(TD Symbol)) $(TR $(TD Lo) $(TD Other_Letter) $(TD N) $(TD Number) $(TD Sc) $(TD Currency_Symbol)) $(TR $(TD Lt) $(TD Titlecase_Letter) $(TD Nd) $(TD Decimal_Number) $(TD Sk) $(TD Modifier_Symbol)) $(TR $(TD Lu) $(TD Uppercase_Letter) $(TD Nl) $(TD Letter_Number) $(TD Sm) $(TD Math_Symbol)) $(TR $(TD M) $(TD Mark) $(TD No) $(TD Other_Number) $(TD So) $(TD Other_Symbol)) $(TR $(TD Mc) $(TD Spacing_Mark) $(TD P) $(TD Punctuation) $(TD Z) $(TD Separator)) $(TR $(TD Me) $(TD Enclosing_Mark) $(TD Pc) $(TD Connector_Punctuation) $(TD Zl) $(TD Line_Separator)) $(TR $(TD Mn) $(TD Nonspacing_Mark) $(TD Pd) $(TD Dash_Punctuation) $(TD Zp) $(TD Paragraph_Separator)) $(TR $(TD C) $(TD Other) $(TD Pe) $(TD Close_Punctuation) $(TD Zs) $(TD Space_Separator)) $(TR $(TD Cc) $(TD Control) $(TD Pf) $(TD Final_Punctuation) $(TD -) $(TD Any)) $(TR $(TD Cf) $(TD Format) $(TD Pi) $(TD Initial_Punctuation) $(TD -) $(TD ASCII)) ) $(P Sets for other commonly useful properties that are accessible with $(LREF unicode):) $(BOOKTABLE $(B Common binary properties), $(TR $(TH Name) $(TH Name) $(TH Name)) $(TR $(TD Alphabetic) $(TD Ideographic) $(TD Other_Uppercase)) $(TR $(TD ASCII_Hex_Digit) $(TD IDS_Binary_Operator) $(TD Pattern_Syntax)) $(TR $(TD Bidi_Control) $(TD ID_Start) $(TD Pattern_White_Space)) $(TR $(TD Cased) $(TD IDS_Trinary_Operator) $(TD Quotation_Mark)) $(TR $(TD Case_Ignorable) $(TD Join_Control) $(TD Radical)) $(TR $(TD Dash) $(TD Logical_Order_Exception) $(TD Soft_Dotted)) $(TR $(TD Default_Ignorable_Code_Point) $(TD Lowercase) $(TD STerm)) $(TR $(TD Deprecated) $(TD Math) $(TD Terminal_Punctuation)) $(TR $(TD Diacritic) $(TD Noncharacter_Code_Point) $(TD Unified_Ideograph)) $(TR $(TD Extender) $(TD Other_Alphabetic) $(TD Uppercase)) $(TR $(TD Grapheme_Base) $(TD Other_Default_Ignorable_Code_Point) $(TD Variation_Selector)) $(TR $(TD Grapheme_Extend) $(TD Other_Grapheme_Extend) $(TD White_Space)) $(TR $(TD Grapheme_Link) $(TD Other_ID_Continue) $(TD XID_Continue)) $(TR $(TD Hex_Digit) $(TD Other_ID_Start) $(TD XID_Start)) $(TR $(TD Hyphen) $(TD Other_Lowercase) ) $(TR $(TD ID_Continue) $(TD Other_Math) ) ) $(P Below is the table with block names accepted by $(LREF unicode.block). Note that the shorthand version $(LREF unicode) requires \"In\" to be prepended to the names of blocks so as to disambiguate scripts and blocks. ) $(BOOKTABLE $(B Blocks), $(TR $(TD Aegean Numbers) $(TD Ethiopic Extended) $(TD Mongolian)) $(TR $(TD Alchemical Symbols) $(TD Ethiopic Extended-A) $(TD Musical Symbols)) $(TR $(TD Alphabetic Presentation Forms) $(TD Ethiopic Supplement) $(TD Myanmar)) $(TR $(TD Ancient Greek Musical Notation) $(TD General Punctuation) $(TD Myanmar Extended-A)) $(TR $(TD Ancient Greek Numbers) $(TD Geometric Shapes) $(TD New Tai Lue)) $(TR $(TD Ancient Symbols) $(TD Georgian) $(TD NKo)) $(TR $(TD Arabic) $(TD Georgian Supplement) $(TD Number Forms)) $(TR $(TD Arabic Extended-A) $(TD Glagolitic) $(TD Ogham)) $(TR $(TD Arabic Mathematical Alphabetic Symbols) $(TD Gothic) $(TD Ol Chiki)) $(TR $(TD Arabic Presentation Forms-A) $(TD Greek and Coptic) $(TD Old Italic)) $(TR $(TD Arabic Presentation Forms-B) $(TD Greek Extended) $(TD Old Persian)) $(TR $(TD Arabic Supplement) $(TD Gujarati) $(TD Old South Arabian)) $(TR $(TD Armenian) $(TD Gurmukhi) $(TD Old Turkic)) $(TR $(TD Arrows) $(TD Halfwidth and Fullwidth Forms) $(TD Optical Character Recognition)) $(TR $(TD Avestan) $(TD Hangul Compatibility Jamo) $(TD Oriya)) $(TR $(TD Balinese) $(TD Hangul Jamo) $(TD Osmanya)) $(TR $(TD Bamum) $(TD Hangul Jamo Extended-A) $(TD Phags-pa)) $(TR $(TD Bamum Supplement) $(TD Hangul Jamo Extended-B) $(TD Phaistos Disc)) $(TR $(TD Basic Latin) $(TD Hangul Syllables) $(TD Phoenician)) $(TR $(TD Batak) $(TD Hanunoo) $(TD Phonetic Extensions)) $(TR $(TD Bengali) $(TD Hebrew) $(TD Phonetic Extensions Supplement)) $(TR $(TD Block Elements) $(TD High Private Use Surrogates) $(TD Playing Cards)) $(TR $(TD Bopomofo) $(TD High Surrogates) $(TD Private Use Area)) $(TR $(TD Bopomofo Extended) $(TD Hiragana) $(TD Rejang)) $(TR $(TD Box Drawing) $(TD Ideographic Description Characters) $(TD Rumi Numeral Symbols)) $(TR $(TD Brahmi) $(TD Imperial Aramaic) $(TD Runic)) $(TR $(TD Braille Patterns) $(TD Inscriptional Pahlavi) $(TD Samaritan)) $(TR $(TD Buginese) $(TD Inscriptional Parthian) $(TD Saurashtra)) $(TR $(TD Buhid) $(TD IPA Extensions) $(TD Sharada)) $(TR $(TD Byzantine Musical Symbols) $(TD Javanese) $(TD Shavian)) $(TR $(TD Carian) $(TD Kaithi) $(TD Sinhala)) $(TR $(TD Chakma) $(TD Kana Supplement) $(TD Small Form Variants)) $(TR $(TD Cham) $(TD Kanbun) $(TD Sora Sompeng)) $(TR $(TD Cherokee) $(TD Kangxi Radicals) $(TD Spacing Modifier Letters)) $(TR $(TD CJK Compatibility) $(TD Kannada) $(TD Specials)) $(TR $(TD CJK Compatibility Forms) $(TD Katakana) $(TD Sundanese)) $(TR $(TD CJK Compatibility Ideographs) $(TD Katakana Phonetic Extensions) $(TD Sundanese Supplement)) $(TR $(TD CJK Compatibility Ideographs Supplement) $(TD Kayah Li) $(TD Superscripts and Subscripts)) $(TR $(TD CJK Radicals Supplement) $(TD Kharoshthi) $(TD Supplemental Arrows-A)) $(TR $(TD CJK Strokes) $(TD Khmer) $(TD Supplemental Arrows-B)) $(TR $(TD CJK Symbols and Punctuation) $(TD Khmer Symbols) $(TD Supplemental Mathematical Operators)) $(TR $(TD CJK Unified Ideographs) $(TD Lao) $(TD Supplemental Punctuation)) $(TR $(TD CJK Unified Ideographs Extension A) $(TD Latin-1 Supplement) $(TD Supplementary Private Use Area-A)) $(TR $(TD CJK Unified Ideographs Extension B) $(TD Latin Extended-A) $(TD Supplementary Private Use Area-B)) $(TR $(TD CJK Unified Ideographs Extension C) $(TD Latin Extended Additional) $(TD Syloti Nagri)) $(TR $(TD CJK Unified Ideographs Extension D) $(TD Latin Extended-B) $(TD Syriac)) $(TR $(TD Combining Diacritical Marks) $(TD Latin Extended-C) $(TD Tagalog)) $(TR $(TD Combining Diacritical Marks for Symbols) $(TD Latin Extended-D) $(TD Tagbanwa)) $(TR $(TD Combining Diacritical Marks Supplement) $(TD Lepcha) $(TD Tags)) $(TR $(TD Combining Half Marks) $(TD Letterlike Symbols) $(TD Tai Le)) $(TR $(TD Common Indic Number Forms) $(TD Limbu) $(TD Tai Tham)) $(TR $(TD Control Pictures) $(TD Linear B Ideograms) $(TD Tai Viet)) $(TR $(TD Coptic) $(TD Linear B Syllabary) $(TD Tai Xuan Jing Symbols)) $(TR $(TD Counting Rod Numerals) $(TD Lisu) $(TD Takri)) $(TR $(TD Cuneiform) $(TD Low Surrogates) $(TD Tamil)) $(TR $(TD Cuneiform Numbers and Punctuation) $(TD Lycian) $(TD Telugu)) $(TR $(TD Currency Symbols) $(TD Lydian) $(TD Thaana)) $(TR $(TD Cypriot Syllabary) $(TD Mahjong Tiles) $(TD Thai)) $(TR $(TD Cyrillic) $(TD Malayalam) $(TD Tibetan)) $(TR $(TD Cyrillic Extended-A) $(TD Mandaic) $(TD Tifinagh)) $(TR $(TD Cyrillic Extended-B) $(TD Mathematical Alphanumeric Symbols) $(TD Transport And Map Symbols)) $(TR $(TD Cyrillic Supplement) $(TD Mathematical Operators) $(TD Ugaritic)) $(TR $(TD Deseret) $(TD Meetei Mayek) $(TD Unified Canadian Aboriginal Syllabics)) $(TR $(TD Devanagari) $(TD Meetei Mayek Extensions) $(TD Unified Canadian Aboriginal Syllabics Extended)) $(TR $(TD Devanagari Extended) $(TD Meroitic Cursive) $(TD Vai)) $(TR $(TD Dingbats) $(TD Meroitic Hieroglyphs) $(TD Variation Selectors)) $(TR $(TD Domino Tiles) $(TD Miao) $(TD Variation Selectors Supplement)) $(TR $(TD Egyptian Hieroglyphs) $(TD Miscellaneous Mathematical Symbols-A) $(TD Vedic Extensions)) $(TR $(TD Emoticons) $(TD Miscellaneous Mathematical Symbols-B) $(TD Vertical Forms)) $(TR $(TD Enclosed Alphanumerics) $(TD Miscellaneous Symbols) $(TD Yijing Hexagram Symbols)) $(TR $(TD Enclosed Alphanumeric Supplement) $(TD Miscellaneous Symbols and Arrows) $(TD Yi Radicals)) $(TR $(TD Enclosed CJK Letters and Months) $(TD Miscellaneous Symbols And Pictographs) $(TD Yi Syllables)) $(TR $(TD Enclosed Ideographic Supplement) $(TD Miscellaneous Technical) ) $(TR $(TD Ethiopic) $(TD Modifier Tone Letters) ) ) $(P Below is the table with script names accepted by $(LREF unicode.script) and by the shorthand version $(LREF unicode):) $(BOOKTABLE $(B Scripts), $(TR $(TD Arabic) $(TD Hanunoo) $(TD Old_Italic)) $(TR $(TD Armenian) $(TD Hebrew) $(TD Old_Persian)) $(TR $(TD Avestan) $(TD Hiragana) $(TD Old_South_Arabian)) $(TR $(TD Balinese) $(TD Imperial_Aramaic) $(TD Old_Turkic)) $(TR $(TD Bamum) $(TD Inherited) $(TD Oriya)) $(TR $(TD Batak) $(TD Inscriptional_Pahlavi) $(TD Osmanya)) $(TR $(TD Bengali) $(TD Inscriptional_Parthian) $(TD Phags_Pa)) $(TR $(TD Bopomofo) $(TD Javanese) $(TD Phoenician)) $(TR $(TD Brahmi) $(TD Kaithi) $(TD Rejang)) $(TR $(TD Braille) $(TD Kannada) $(TD Runic)) $(TR $(TD Buginese) $(TD Katakana) $(TD Samaritan)) $(TR $(TD Buhid) $(TD Kayah_Li) $(TD Saurashtra)) $(TR $(TD Canadian_Aboriginal) $(TD Kharoshthi) $(TD Sharada)) $(TR $(TD Carian) $(TD Khmer) $(TD Shavian)) $(TR $(TD Chakma) $(TD Lao) $(TD Sinhala)) $(TR $(TD Cham) $(TD Latin) $(TD Sora_Sompeng)) $(TR $(TD Cherokee) $(TD Lepcha) $(TD Sundanese)) $(TR $(TD Common) $(TD Limbu) $(TD Syloti_Nagri)) $(TR $(TD Coptic) $(TD Linear_B) $(TD Syriac)) $(TR $(TD Cuneiform) $(TD Lisu) $(TD Tagalog)) $(TR $(TD Cypriot) $(TD Lycian) $(TD Tagbanwa)) $(TR $(TD Cyrillic) $(TD Lydian) $(TD Tai_Le)) $(TR $(TD Deseret) $(TD Malayalam) $(TD Tai_Tham)) $(TR $(TD Devanagari) $(TD Mandaic) $(TD Tai_Viet)) $(TR $(TD Egyptian_Hieroglyphs) $(TD Meetei_Mayek) $(TD Takri)) $(TR $(TD Ethiopic) $(TD Meroitic_Cursive) $(TD Tamil)) $(TR $(TD Georgian) $(TD Meroitic_Hieroglyphs) $(TD Telugu)) $(TR $(TD Glagolitic) $(TD Miao) $(TD Thaana)) $(TR $(TD Gothic) $(TD Mongolian) $(TD Thai)) $(TR $(TD Greek) $(TD Myanmar) $(TD Tibetan)) $(TR $(TD Gujarati) $(TD New_Tai_Lue) $(TD Tifinagh)) $(TR $(TD Gurmukhi) $(TD Nko) $(TD Ugaritic)) $(TR $(TD Han) $(TD Ogham) $(TD Vai)) $(TR $(TD Hangul) $(TD Ol_Chiki) $(TD Yi)) ) $(P Below is the table of names accepted by $(LREF unicode.hangulSyllableType).) $(BOOKTABLE $(B Hangul syllable type), $(TR $(TH Abb.) $(TH Long form)) $(TR $(TD L) $(TD Leading_Jamo)) $(TR $(TD LV) $(TD LV_Syllable)) $(TR $(TD LVT) $(TD LVT_Syllable) ) $(TR $(TD T) $(TD Trailing_Jamo)) $(TR $(TD V) $(TD Vowel_Jamo)) ) References: $(HTTP www.digitalmars.com/d/ascii-table.html, ASCII Table), $(HTTP en.wikipedia.org/wiki/Unicode, Wikipedia), $(HTTP www.unicode.org, The Unicode Consortium), $(HTTP www.unicode.org/reports/tr15/, Unicode normalization forms), $(HTTP www.unicode.org/reports/tr29/, Unicode text segmentation) $(HTTP www.unicode.org/uni2book/ch05.pdf, Unicode Implementation Guidelines) $(HTTP www.unicode.org/uni2book/ch03.pdf, Unicode Conformance) Trademarks: Unicode(tm) is a trademark of Unicode, Inc. Copyright: Copyright 2013 - License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: Dmitry Olshansky Source: $(PHOBOSSRC std/uni/package.d) Standards: $(HTTP www.unicode.org/versions/Unicode6.2.0/, Unicode v6.2) Macros: SECTION = $0 DEF = $0 S_LINK = $+ CODEPOINT = $(S_LINK Code point, code point) CODEPOINTS = $(S_LINK Code point, code points) CHARACTER = $(S_LINK Character, character) CHARACTERS = $(S_LINK Character, characters) CLUSTER = $(S_LINK Grapheme cluster, grapheme cluster) Aliases Name Description _RealArray CodepointSet The recommended default type for set of $(CODEPOINTS). For details, see the current implementation: $(LREF InversionList). CodepointSetTrie Type of Trie generated by codepointSetTrie function. CodepointTrie ditto getIndex The most general utility for construction of Trie s short of using TrieBuilder directly. lo8 mlo8 PackedArrayView PackedPtr Prefix Type of Trie generated by codepointSetTrie function. Prefix ditto Prefix The most general utility for construction of Trie s short of using TrieBuilder directly. sharLowerBound sharSwitchLowerBound useItemAt useLastItem Structs Name Description assumeSize BitPacked \\((P Opaque wrapper around unsigned built-in integers and code unit (char/wchar/dchar) types. Parameter `sz` indicates that the value is confined to the range of [0, 2^^sz\\)(RPAREN). With this knowledge it can be packed more tightly when stored in certain data-structures like trie. ) clamp clampIdx CodepointInterval The recommended type of \\((REF Tuple, std,_typecons) to represent [a, b\\)(RPAREN) intervals of $(CODEPOINTS). As used in $(LREF InversionList). Any interval type should pass $(LREF isIntegralPair) trait. CowArray DecompressedIntervals GcPolicy InversionList $(P InversionList is a set of \\((CODEPOINTS) represented as an array of open-right [a, b\\)(RPAREN) intervals (see \\((LREF CodepointInterval) above). The name comes from the way the representation reads left to right. For instance a set of all values [10, 50\\)(RPAREN), [80, 90$(RPAREN), plus a singular value 60 looks like this: ) --- 10, 50, 60, 61, 80, 90 --- $(P The way to read this is: start with negative meaning that all numbers smaller then the next one are not present in this set (and positive - the contrary). Then switch positive/negative after each number passed from left to right. ) $(P This way negative spans until 10, then positive until 50, then negative until 60, then positive until 61, and so on. As seen this provides a space-efficient storage of highly redundant data that comes in long runs. A description which Unicode $(CHARACTER) properties fit nicely. The technique itself could be seen as a variation on $(LINK2 https://en.wikipedia.org/wiki/Run-length_encoding, RLE encoding). ) MatcherConcept Conceptual type that outlines the common properties of all UTF Matchers. MultiArray PackedArrayViewImpl PackedPtrImpl ReallocPolicy sliceBits SliceOverIndexed Trie $(P A generic Trie data-structure for a fixed number of stages. The design goal is optimal speed with smallest footprint size. ) $(P It's intentionally read-only and doesn't provide constructors. To construct one use a special builder, see $(LREF TrieBuilder) and $(LREF buildTrie). ) TrieBuilder Functions Name Description arrayRepr buildTrie The most general utility for construction of Trie s short of using TrieBuilder directly. cmpK0 codepointSetTrie A shorthand for creating a custom multi-level fixed Trie from a CodepointSet . sizes are numbers of bits per level, with the most significant bits used first. comparePropertyName compressIntervals compressTo copyBackwards copyForward decoder decompressFrom decompressIntervals force genericReplace genUnrolledSwitchSearch impl isPow2OrZero isWhite low_8 mapTrieIndex Maps Key to a suitable integer index within the range of size_t . The mapping is constructed by applying predicates from Prefix left to right and concatenating the resulting bits. midlow_8 packedArrayView propertyNameLess read24 replicateBits safeRead24 safeWrite24 sharMethod sliceOverIndexed spaceFor sumOfIntegerTuple switchUniformLowerBound toDelegate $(P Builds a Trie with typically optimal speed-size trade-off and wraps it into a delegate of the following type: $(D bool delegate(dchar ch)). ) toTrie Convenience function to construct optimal configurations for packed Trie from any set of $(CODEPOINTS). unalignedRead24 unalignedWrite24 uniformLowerBound utf16Matcher utf8Matcher utfMatcher Constructs a matcher object to classify $(CODEPOINTS) from the set for encoding that has Char as code unit. write24 Variables Name Description bits bits hasUnalignedReads isBitPackableType isIntegralPair Tests if T is a pair of integers that implicitly convert to V . The following code must compile for any pair T : --- (T x){ V a = x[0]; V b = x[1];} --- The following must not compile: --- (T x){ V c = x[2];} --- isUtfMatcher Test if M is an UTF Matcher for ranges of Char . isValidPrefixForTrie lastDchar lineSep Constant $(CODEPOINT) (0x2028) - line separator. nelSep Constant $(CODEPOINT) (0x0085) - next line. paraSep Constant $(CODEPOINT) (0x2029) - paragraph separator."
  },
  "phobos/std/uni/PackedArrayViewImpl/Functions/length.html": {
    "href": "phobos/std/uni/PackedArrayViewImpl/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.uni Parent PackedArrayViewImpl length() size_t length( )"
  },
  "phobos/std/uni/PackedArrayViewImpl/Functions/opIndex.html": {
    "href": "phobos/std/uni/PackedArrayViewImpl/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.uni Parent PackedArrayViewImpl opIndex(idx) T opIndex( size_t idx )"
  },
  "phobos/std/uni/PackedArrayViewImpl/Functions/opIndexAssign.html": {
    "href": "phobos/std/uni/PackedArrayViewImpl/Functions/opIndexAssign.html",
    "title": "Overloads for - opIndexAssign | Marmos Demo",
    "keywords": "Overloads for - opIndexAssign Module std.uni Parent PackedArrayViewImpl opIndexAssign(val, idx) void opIndexAssign( T val, size_t idx ) opIndexAssign(val, idx) void opIndexAssign( TypeOfBitPacked!(T) val, size_t idx )"
  },
  "phobos/std/uni/PackedArrayViewImpl/Functions/opSlice.html": {
    "href": "phobos/std/uni/PackedArrayViewImpl/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.uni Parent PackedArrayViewImpl opSlice(from, to) <bug: unknown> opSlice( size_t from, size_t to ) auto opSlice() <bug: unknown> opSlice( ) auto"
  },
  "phobos/std/uni/PackedArrayViewImpl/Functions/opSliceAssign.html": {
    "href": "phobos/std/uni/PackedArrayViewImpl/Functions/opSliceAssign.html",
    "title": "Overloads for - opSliceAssign | Marmos Demo",
    "keywords": "Overloads for - opSliceAssign Module std.uni Parent PackedArrayViewImpl opSliceAssign(val, start, end) void opSliceAssign( T val, size_t start, size_t end ) opSliceAssign(val, start, end) void opSliceAssign( TypeOfBitPacked!(T) val, size_t start, size_t end )"
  },
  "phobos/std/uni/PackedArrayViewImpl/Functions/zeros.html": {
    "href": "phobos/std/uni/PackedArrayViewImpl/Functions/zeros.html",
    "title": "Overloads for - zeros | Marmos Demo",
    "keywords": "Overloads for - zeros Module std.uni Parent PackedArrayViewImpl zeros(s, e) bool zeros( size_t s, size_t e )"
  },
  "phobos/std/uni/PackedPtrImpl/Functions/opIndex.html": {
    "href": "phobos/std/uni/PackedPtrImpl/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.uni Parent PackedPtrImpl opIndex(idx) T opIndex( size_t idx )"
  },
  "phobos/std/uni/PackedPtrImpl/Functions/opIndexAssign.html": {
    "href": "phobos/std/uni/PackedPtrImpl/Functions/opIndexAssign.html",
    "title": "Overloads for - opIndexAssign | Marmos Demo",
    "keywords": "Overloads for - opIndexAssign Module std.uni Parent PackedPtrImpl opIndexAssign(val, idx) void opIndexAssign( T val, size_t idx ) opIndexAssign(val, idx) void opIndexAssign( TypeOfBitPacked!(T) val, size_t idx )"
  },
  "phobos/std/uni/PackedPtrImpl/Functions/simpleIndex.html": {
    "href": "phobos/std/uni/PackedPtrImpl/Functions/simpleIndex.html",
    "title": "Overloads for - simpleIndex | Marmos Demo",
    "keywords": "Overloads for - simpleIndex Module std.uni Parent PackedPtrImpl simpleIndex(n) T simpleIndex( size_t n )"
  },
  "phobos/std/uni/PackedPtrImpl/Functions/simpleWrite.html": {
    "href": "phobos/std/uni/PackedPtrImpl/Functions/simpleWrite.html",
    "title": "Overloads for - simpleWrite | Marmos Demo",
    "keywords": "Overloads for - simpleWrite Module std.uni Parent PackedPtrImpl simpleWrite(val, n) void simpleWrite( TypeOfBitPacked!(T) val, size_t n )"
  },
  "phobos/std/uni/SliceOverIndexed/Functions/back.html": {
    "href": "phobos/std/uni/SliceOverIndexed/Functions/back.html",
    "title": "Overloads for - back | Marmos Demo",
    "keywords": "Overloads for - back Module std.uni Parent SliceOverIndexed back() <bug: unknown> back( ) auto back(val) void back( Item val )"
  },
  "phobos/std/uni/SliceOverIndexed/Functions/empty.html": {
    "href": "phobos/std/uni/SliceOverIndexed/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.uni Parent SliceOverIndexed empty() bool empty( )"
  },
  "phobos/std/uni/SliceOverIndexed/Functions/front.html": {
    "href": "phobos/std/uni/SliceOverIndexed/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.uni Parent SliceOverIndexed front() <bug: unknown> front( ) auto front(val) void front( Item val )"
  },
  "phobos/std/uni/SliceOverIndexed/Functions/length.html": {
    "href": "phobos/std/uni/SliceOverIndexed/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.uni Parent SliceOverIndexed length() size_t length( )"
  },
  "phobos/std/uni/SliceOverIndexed/Functions/opIndex.html": {
    "href": "phobos/std/uni/SliceOverIndexed/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.uni Parent SliceOverIndexed opIndex(idx) <bug: unknown> opIndex( size_t idx ) auto"
  },
  "phobos/std/uni/SliceOverIndexed/Functions/opIndexAssign.html": {
    "href": "phobos/std/uni/SliceOverIndexed/Functions/opIndexAssign.html",
    "title": "Overloads for - opIndexAssign | Marmos Demo",
    "keywords": "Overloads for - opIndexAssign Module std.uni Parent SliceOverIndexed opIndexAssign(val, idx) void opIndexAssign( Item val, size_t idx )"
  },
  "phobos/std/uni/SliceOverIndexed/Functions/opSlice.html": {
    "href": "phobos/std/uni/SliceOverIndexed/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.uni Parent SliceOverIndexed opSlice(a, b) <bug: unknown> opSlice( size_t a, size_t b ) auto opSlice() <bug: unknown> opSlice( ) auto"
  },
  "phobos/std/uni/SliceOverIndexed/Functions/popBack.html": {
    "href": "phobos/std/uni/SliceOverIndexed/Functions/popBack.html",
    "title": "Overloads for - popBack | Marmos Demo",
    "keywords": "Overloads for - popBack Module std.uni Parent SliceOverIndexed popBack() void popBack( )"
  },
  "phobos/std/uni/SliceOverIndexed/Functions/popFront.html": {
    "href": "phobos/std/uni/SliceOverIndexed/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.uni Parent SliceOverIndexed popFront() void popFront( )"
  },
  "phobos/std/uni/SliceOverIndexed/Functions/save.html": {
    "href": "phobos/std/uni/SliceOverIndexed/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.uni Parent SliceOverIndexed save() <bug: unknown> save( ) auto"
  },
  "phobos/std/uni/Structs/BitPacked.html": {
    "href": "phobos/std/uni/Structs/BitPacked.html",
    "title": "Struct - BitPacked | Marmos Demo",
    "keywords": "Struct - BitPacked Module std.uni public struct BitPacked { // __enumMember bitSize; } About \\((P Opaque wrapper around unsigned built-in integers and code unit (char/wchar/dchar) types. Parameter `sz` indicates that the value is confined to the range of [0, 2^^sz\\)(RPAREN). With this knowledge it can be packed more tightly when stored in certain data-structures like trie. ) Note $(P The $(D BitPacked!(T, sz)) is implicitly convertible to T but not vise-versa. Users have to ensure the value fits in the range required and use the cast operator to perform the conversion.) Variables Name Description bitSize"
  },
  "phobos/std/uni/Structs/CodepointInterval.html": {
    "href": "phobos/std/uni/Structs/CodepointInterval.html",
    "title": "Struct - CodepointInterval | Marmos Demo",
    "keywords": "Struct - CodepointInterval Module std.uni public struct CodepointInterval { // uint a( ) ; // uint b( ) ; } About The recommended type of \\((REF Tuple, std,_typecons) to represent [a, b\\)(RPAREN) intervals of $(CODEPOINTS). As used in $(LREF InversionList). Any interval type should pass $(LREF isIntegralPair) trait. Functions Name Description a b"
  },
  "phobos/std/uni/Structs/CowArray.html": {
    "href": "phobos/std/uni/Structs/CowArray.html",
    "title": "Struct - CowArray | Marmos Demo",
    "keywords": "Struct - CowArray Module std.uni public struct CowArray { // alias opDollar = <todo: marmos support pending>; // void dupThisReference( uint count ) ; // bool empty( ) ; // void freeThisReference( ) ; // size_t length( ) ; // void length( size_t len ) ; // void opIndexAssign( uint val, size_t idx ) ; // <bug: unknown> opSlice( size_t from, size_t to ) auto; // <bug: unknown> opSlice( size_t from, size_t to ) auto; // <bug: unknown> opSlice( ) auto; // <bug: unknown> opSlice( ) auto; // uint refCount( ) ; // void refCount( uint cnt ) ; // <bug: unknown> reuse( <bug: unknown> arr ) static auto; // <bug: unknown> data; } Aliases Name Description opDollar Functions Name Description dupThisReference empty freeThisReference length opIndexAssign opSlice refCount reuse Variables Name Description data"
  },
  "phobos/std/uni/Structs/DecompressedIntervals.html": {
    "href": "phobos/std/uni/Structs/DecompressedIntervals.html",
    "title": "Struct - DecompressedIntervals | Marmos Demo",
    "keywords": "Struct - DecompressedIntervals Module std.uni public struct DecompressedIntervals { // bool empty( ) ; // CodepointInterval front( ) ; // void popFront( ) ; // DecompressedIntervals save( ) ; } Functions Name Description empty front popFront save"
  },
  "phobos/std/uni/Structs/GcPolicy.html": {
    "href": "phobos/std/uni/Structs/GcPolicy.html",
    "title": "Struct - GcPolicy | Marmos Demo",
    "keywords": "Struct - GcPolicy Module std.uni public struct GcPolicy { }"
  },
  "phobos/std/uni/Structs/InversionList.html": {
    "href": "phobos/std/uni/Structs/InversionList.html",
    "title": "Struct - InversionList | Marmos Demo",
    "keywords": "Struct - InversionList Module std.uni public struct InversionList { // alias Marker = <todo: marmos support pending>; // alias This = <todo: marmos support pending>; // Marker addInterval( int a, int b, Marker hint ) ; // A range that spans each $(CODEPOINT) in this set. <bug: unknown> byCodepoint( ) auto; // Get range that spans all of the $(CODEPOINT) intervals in this $(LREF InversionList). <bug: unknown> byInterval( ) auto; // Marker dropUpTo( uint a, Marker pos ) ; // True if this set doesn't contain any $(CODEPOINTS). bool empty( ) ; // <bug: unknown> intervals( ) ; // Obtains a set that is the inversion of this set. <bug: unknown> inverted( ) auto; // Number of $(CODEPOINTS) in this set size_t length( ) ; // Tests the presence of code point `val` in this set. bool opIndex( uint val ) ; // void sanitize( ) ; // Marker skipUpTo( uint a, Marker pos ) ; // <bug: unknown> subChar( dchar ch ) ; // string toSourceCode( <bug: unknown> range, string funcName ) static; // Generates string with D source code of unary function with name of `funcName` taking a single `dchar` argument. If `funcName` is empty the code is adjusted to be a lambda function. string toSourceCode( string funcName ) ; // CowArray!(SP) data; } About $(P InversionList is a set of \\((CODEPOINTS) represented as an array of open-right [a, b\\)(RPAREN) intervals (see \\((LREF CodepointInterval) above). The name comes from the way the representation reads left to right. For instance a set of all values [10, 50\\)(RPAREN), [80, 90$(RPAREN), plus a singular value 60 looks like this: ) --- 10, 50, 60, 61, 80, 90 --- $(P The way to read this is: start with negative meaning that all numbers smaller then the next one are not present in this set (and positive - the contrary). Then switch positive/negative after each number passed from left to right. ) $(P This way negative spans until 10, then positive until 50, then negative until 60, then positive until 61, and so on. As seen this provides a space-efficient storage of highly redundant data that comes in long runs. A description which Unicode $(CHARACTER) properties fit nicely. The technique itself could be seen as a variation on $(LINK2 https://en.wikipedia.org/wiki/Run-length_encoding, RLE encoding). ) $(P Sets are value types (just like int is) thus they are never aliased. ) Example: --- auto a = CodepointSet('a', 'z'+1); auto b = CodepointSet('A', 'Z'+1); auto c = a; a = a | b; assert(a == CodepointSet('A', 'Z'+1, 'a', 'z'+1)); assert(a != c); --- $(P See also $(LREF unicode) for simpler construction of sets from predefined ones. ) $(P Memory usage is 8 bytes per each contiguous interval in a set. The value semantics are achieved by using the $(HTTP en.wikipedia.org/wiki/Copy-on-write, COW) technique and thus it's $(RED not) safe to cast this type to $(D_KEYWORD shared). ) Note $(P It's not recommended to rely on the template parameters or the exact type of a current $(CODEPOINT) set in std.uni . The type and parameters may change when the standard allocators design is finalized. Use $(LREF isCodepointSet) with templates or just stick with the default alias $(LREF CodepointSet) throughout the whole code base. ) Aliases Name Description Marker This Functions Name Description addInterval byCodepoint A range that spans each $(CODEPOINT) in this set. byInterval Get range that spans all of the $(CODEPOINT) intervals in this $(LREF InversionList). dropUpTo empty True if this set doesn't contain any $(CODEPOINTS). intervals inverted Obtains a set that is the inversion of this set. length Number of $(CODEPOINTS) in this set opIndex Tests the presence of code point val in this set. sanitize skipUpTo subChar toSourceCode Variables Name Description data"
  },
  "phobos/std/uni/Structs/MatcherConcept.html": {
    "href": "phobos/std/uni/Structs/MatcherConcept.html",
    "title": "Struct - MatcherConcept | Marmos Demo",
    "keywords": "Struct - MatcherConcept Module std.uni public struct MatcherConcept { } About Conceptual type that outlines the common properties of all UTF Matchers. Note: For illustration purposes only, every method call results in assertion failure. Use $(LREF utfMatcher) to obtain a concrete matcher for UTF-8 or UTF-16 encodings."
  },
  "phobos/std/uni/Structs/MultiArray.html": {
    "href": "phobos/std/uni/Structs/MultiArray.html",
    "title": "Struct - MultiArray | Marmos Demo",
    "keywords": "Struct - MultiArray Module std.uni public struct MultiArray { // alias bitWidth = <todo: marmos support pending>; // __enumMember dim; // <bug: unknown> offsets; // <bug: unknown> storage; // <bug: unknown> sz; } Aliases Name Description bitWidth Variables Name Description dim offsets storage sz"
  },
  "phobos/std/uni/Structs/PackedArrayViewImpl.html": {
    "href": "phobos/std/uni/Structs/PackedArrayViewImpl.html",
    "title": "Struct - PackedArrayViewImpl | Marmos Demo",
    "keywords": "Struct - PackedArrayViewImpl Module std.uni public struct PackedArrayViewImpl { // size_t length( ) ; // T opIndex( size_t idx ) ; // void opIndexAssign( T val, size_t idx ) ; // void opIndexAssign( TypeOfBitPacked!(T) val, size_t idx ) ; // <bug: unknown> opSlice( size_t from, size_t to ) auto; // <bug: unknown> opSlice( ) auto; // void opSliceAssign( T val, size_t start, size_t end ) ; // void opSliceAssign( TypeOfBitPacked!(T) val, size_t start, size_t end ) ; // bool zeros( size_t s, size_t e ) ; // __enumMember factor; // size_t limit; // size_t ofs; // PackedPtr!(T) ptr; } Functions Name Description length opIndex opIndexAssign opSlice opSliceAssign zeros Variables Name Description factor limit ofs ptr"
  },
  "phobos/std/uni/Structs/PackedPtrImpl.html": {
    "href": "phobos/std/uni/Structs/PackedPtrImpl.html",
    "title": "Struct - PackedPtrImpl | Marmos Demo",
    "keywords": "Struct - PackedPtrImpl Module std.uni public struct PackedPtrImpl { // alias U = <todo: marmos support pending>; // T opIndex( size_t idx ) ; // void opIndexAssign( T val, size_t idx ) ; // void opIndexAssign( TypeOfBitPacked!(T) val, size_t idx ) ; // T simpleIndex( size_t n ) ; // void simpleWrite( TypeOfBitPacked!(T) val, size_t n ) ; // __enumMember bytesPerWord; // __enumMember factor; // __enumMember mask; // <bug: unknown> origin; } Aliases Name Description U Functions Name Description opIndex opIndexAssign simpleIndex simpleWrite Variables Name Description bytesPerWord factor mask origin"
  },
  "phobos/std/uni/Structs/ReallocPolicy.html": {
    "href": "phobos/std/uni/Structs/ReallocPolicy.html",
    "title": "Struct - ReallocPolicy | Marmos Demo",
    "keywords": "Struct - ReallocPolicy Module std.uni public struct ReallocPolicy { }"
  },
  "phobos/std/uni/Structs/SliceOverIndexed.html": {
    "href": "phobos/std/uni/Structs/SliceOverIndexed.html",
    "title": "Struct - SliceOverIndexed | Marmos Demo",
    "keywords": "Struct - SliceOverIndexed Module std.uni public struct SliceOverIndexed { // alias Item = <todo: marmos support pending>; // alias opDollar = <todo: marmos support pending>; // <bug: unknown> back( ) auto; // void back( Item val ) ; // bool empty( ) ; // <bug: unknown> front( ) auto; // void front( Item val ) ; // size_t length( ) ; // <bug: unknown> opIndex( size_t idx ) auto; // void opIndexAssign( Item val, size_t idx ) ; // <bug: unknown> opSlice( size_t a, size_t b ) auto; // <bug: unknown> opSlice( ) auto; // void popBack( ) ; // void popFront( ) ; // <bug: unknown> save( ) auto; // <bug: unknown> arr; // __enumMember assignableIndex; // __enumMember assignableSlice; // size_t from; // size_t to; } Aliases Name Description Item opDollar Functions Name Description back empty front length opIndex opIndexAssign opSlice popBack popFront save Variables Name Description arr assignableIndex assignableSlice from to"
  },
  "phobos/std/uni/Structs/Trie.html": {
    "href": "phobos/std/uni/Structs/Trie.html",
    "title": "Struct - Trie | Marmos Demo",
    "keywords": "Struct - Trie Module std.uni public struct Trie { // alias Prefix = <todo: marmos support pending>; // __enumMember hasBoundsCheck; // __enumMember maxIndex; } About $(P A generic Trie data-structure for a fixed number of stages. The design goal is optimal speed with smallest footprint size. ) $(P It's intentionally read-only and doesn't provide constructors. To construct one use a special builder, see $(LREF TrieBuilder) and $(LREF buildTrie). ) Aliases Name Description Prefix Variables Name Description hasBoundsCheck maxIndex"
  },
  "phobos/std/uni/Structs/TrieBuilder.html": {
    "href": "phobos/std/uni/Structs/TrieBuilder.html",
    "title": "Struct - TrieBuilder | Marmos Demo",
    "keywords": "Struct - TrieBuilder Module std.uni public struct TrieBuilder { // alias getIndex = <todo: marmos support pending>; // alias Prefix = <todo: marmos support pending>; // alias V = <todo: marmos support pending>; // Finishes construction of Trie, yielding an immutable Trie instance. <bug: unknown> build( ) auto; // void putAt( size_t idx, Value v ) ; // Put a value `v` into interval as mapped by keys from `a` to `b` . All slots prior to `a` are filled with the default filler. void putRange( Key a, Key b, Value v ) ; // void putRangeAt( size_t idxA, size_t idxB, Value v ) ; // Put a value `v` into slot mapped by `key` . All slots prior to `key` are filled with the default filler. void putValue( Key key, Value v ) ; // size_t curIndex; // Value defValue; // __enumMember errMsg; // <bug: unknown> indices; // __enumMember lastLevel; // __enumMember lastPageSize; // __enumMember maxIndex; // __enumMember roughedMaxIndex; // <bug: unknown> state; // MultiArray!(idxTypes!(Key, fullBitSize!Prefix, Prefix[0 .. __dollar])V) table; // __enumMember translatedMaxIndex; } Aliases Name Description getIndex Prefix V Functions Name Description build Finishes construction of Trie, yielding an immutable Trie instance. putAt putRange Put a value v into interval as mapped by keys from a to b . All slots prior to a are filled with the default filler. putRangeAt putValue Put a value v into slot mapped by key . All slots prior to key are filled with the default filler. Variables Name Description curIndex defValue errMsg indices lastLevel lastPageSize maxIndex roughedMaxIndex state table translatedMaxIndex"
  },
  "phobos/std/uni/Structs/assumeSize.html": {
    "href": "phobos/std/uni/Structs/assumeSize.html",
    "title": "Struct - assumeSize | Marmos Demo",
    "keywords": "Struct - assumeSize Module std.uni public struct assumeSize { // __enumMember bitSize; } Variables Name Description bitSize"
  },
  "phobos/std/uni/Structs/clamp.html": {
    "href": "phobos/std/uni/Structs/clamp.html",
    "title": "Struct - clamp | Marmos Demo",
    "keywords": "Struct - clamp Module std.uni public struct clamp { // __enumMember bitSize; } Variables Name Description bitSize"
  },
  "phobos/std/uni/Structs/clampIdx.html": {
    "href": "phobos/std/uni/Structs/clampIdx.html",
    "title": "Struct - clampIdx | Marmos Demo",
    "keywords": "Struct - clampIdx Module std.uni public struct clampIdx { // __enumMember bitSize; } Variables Name Description bitSize"
  },
  "phobos/std/uni/Structs/sliceBits.html": {
    "href": "phobos/std/uni/Structs/sliceBits.html",
    "title": "Struct - sliceBits | Marmos Demo",
    "keywords": "Struct - sliceBits Module std.uni public struct sliceBits { // __enumMember bitSize; } Variables Name Description bitSize"
  },
  "phobos/std/uni/TrieBuilder/Functions/build.html": {
    "href": "phobos/std/uni/TrieBuilder/Functions/build.html",
    "title": "Overloads for - build | Marmos Demo",
    "keywords": "Overloads for - build Module std.uni Parent TrieBuilder build() <bug: unknown> build( ) auto Finishes construction of Trie, yielding an immutable Trie instance."
  },
  "phobos/std/uni/TrieBuilder/Functions/putAt.html": {
    "href": "phobos/std/uni/TrieBuilder/Functions/putAt.html",
    "title": "Overloads for - putAt | Marmos Demo",
    "keywords": "Overloads for - putAt Module std.uni Parent TrieBuilder putAt(idx, v) void putAt( size_t idx, Value v )"
  },
  "phobos/std/uni/TrieBuilder/Functions/putRange.html": {
    "href": "phobos/std/uni/TrieBuilder/Functions/putRange.html",
    "title": "Overloads for - putRange | Marmos Demo",
    "keywords": "Overloads for - putRange Module std.uni Parent TrieBuilder putRange(a, b, v) void putRange( Key a, Key b, Value v ) Put a value v into interval as mapped by keys from a to b . All slots prior to a are filled with the default filler."
  },
  "phobos/std/uni/TrieBuilder/Functions/putRangeAt.html": {
    "href": "phobos/std/uni/TrieBuilder/Functions/putRangeAt.html",
    "title": "Overloads for - putRangeAt | Marmos Demo",
    "keywords": "Overloads for - putRangeAt Module std.uni Parent TrieBuilder putRangeAt(idxA, idxB, v) void putRangeAt( size_t idxA, size_t idxB, Value v )"
  },
  "phobos/std/uni/TrieBuilder/Functions/putValue.html": {
    "href": "phobos/std/uni/TrieBuilder/Functions/putValue.html",
    "title": "Overloads for - putValue | Marmos Demo",
    "keywords": "Overloads for - putValue Module std.uni Parent TrieBuilder putValue(key, v) void putValue( Key key, Value v ) Put a value v into slot mapped by key . All slots prior to key are filled with the default filler."
  },
  "phobos/std/unicode_table_generator/FullCaseEntry/Functions/value.html": {
    "href": "phobos/std/unicode_table_generator/FullCaseEntry/Functions/value.html",
    "title": "Overloads for - value | Marmos Demo",
    "keywords": "Overloads for - value Module std.unicode_table_generator Parent FullCaseEntry value() <bug: unknown> value( ) auto"
  },
  "phobos/std/unicode_table_generator/Functions/charsetString.html": {
    "href": "phobos/std/unicode_table_generator/Functions/charsetString.html",
    "title": "Overloads for - charsetString | Marmos Demo",
    "keywords": "Overloads for - charsetString Module std.unicode_table_generator charsetString(set, sep) string charsetString( CodepointSet set, string sep )"
  },
  "phobos/std/unicode_table_generator/Functions/comparePropertyName.html": {
    "href": "phobos/std/unicode_table_generator/Functions/comparePropertyName.html",
    "title": "Overloads for - comparePropertyName | Marmos Demo",
    "keywords": "Overloads for - comparePropertyName Module std.unicode_table_generator comparePropertyName(a, b) int comparePropertyName( <bug: unknown> a, <bug: unknown> b )"
  },
  "phobos/std/unicode_table_generator/Functions/createPrinter.html": {
    "href": "phobos/std/unicode_table_generator/Functions/createPrinter.html",
    "title": "Overloads for - createPrinter | Marmos Demo",
    "keywords": "Overloads for - createPrinter Module std.unicode_table_generator createPrinter(name, trie) <bug: unknown> createPrinter( string name, T trie )"
  },
  "phobos/std/unicode_table_generator/Functions/ensureFilesAreDownloaded.html": {
    "href": "phobos/std/unicode_table_generator/Functions/ensureFilesAreDownloaded.html",
    "title": "Overloads for - ensureFilesAreDownloaded | Marmos Demo",
    "keywords": "Overloads for - ensureFilesAreDownloaded Module std.unicode_table_generator ensureFilesAreDownloaded() void ensureFilesAreDownloaded( )"
  },
  "phobos/std/unicode_table_generator/Functions/fullCaseEntry.html": {
    "href": "phobos/std/unicode_table_generator/Functions/fullCaseEntry.html",
    "title": "Overloads for - fullCaseEntry | Marmos Demo",
    "keywords": "Overloads for - fullCaseEntry Module std.unicode_table_generator fullCaseEntry(value, num, batch_size) <bug: unknown> fullCaseEntry( dstring value, ubyte num, ubyte batch_size ) auto"
  },
  "phobos/std/unicode_table_generator/Functions/identName.html": {
    "href": "phobos/std/unicode_table_generator/Functions/identName.html",
    "title": "Overloads for - identName | Marmos Demo",
    "keywords": "Overloads for - identName Module std.unicode_table_generator identName(s) string identName( string s )"
  },
  "phobos/std/unicode_table_generator/Functions/loadBlocks.html": {
    "href": "phobos/std/unicode_table_generator/Functions/loadBlocks.html",
    "title": "Overloads for - loadBlocks | Marmos Demo",
    "keywords": "Overloads for - loadBlocks Module std.unicode_table_generator loadBlocks(f, target) void loadBlocks( string f, PropertyTable target )"
  },
  "phobos/std/unicode_table_generator/Functions/loadCaseFolding.html": {
    "href": "phobos/std/unicode_table_generator/Functions/loadCaseFolding.html",
    "title": "Overloads for - loadCaseFolding | Marmos Demo",
    "keywords": "Overloads for - loadCaseFolding Module std.unicode_table_generator loadCaseFolding(f) void loadCaseFolding( string f )"
  },
  "phobos/std/unicode_table_generator/Functions/loadExclusions.html": {
    "href": "phobos/std/unicode_table_generator/Functions/loadExclusions.html",
    "title": "Overloads for - loadExclusions | Marmos Demo",
    "keywords": "Overloads for - loadExclusions Module std.unicode_table_generator loadExclusions(inp) void loadExclusions( string inp )"
  },
  "phobos/std/unicode_table_generator/Functions/loadNormalization.html": {
    "href": "phobos/std/unicode_table_generator/Functions/loadNormalization.html",
    "title": "Overloads for - loadNormalization | Marmos Demo",
    "keywords": "Overloads for - loadNormalization Module std.unicode_table_generator loadNormalization(inp) void loadNormalization( string inp )"
  },
  "phobos/std/unicode_table_generator/Functions/loadProperties.html": {
    "href": "phobos/std/unicode_table_generator/Functions/loadProperties.html",
    "title": "Overloads for - loadProperties | Marmos Demo",
    "keywords": "Overloads for - loadProperties Module std.unicode_table_generator loadProperties(inp, target) void loadProperties( string inp, PropertyTable target )"
  },
  "phobos/std/unicode_table_generator/Functions/loadPropertyAliases.html": {
    "href": "phobos/std/unicode_table_generator/Functions/loadPropertyAliases.html",
    "title": "Overloads for - loadPropertyAliases | Marmos Demo",
    "keywords": "Overloads for - loadPropertyAliases Module std.unicode_table_generator loadPropertyAliases(inp) void loadPropertyAliases( string inp )"
  },
  "phobos/std/unicode_table_generator/Functions/loadSpecialCasing.html": {
    "href": "phobos/std/unicode_table_generator/Functions/loadSpecialCasing.html",
    "title": "Overloads for - loadSpecialCasing | Marmos Demo",
    "keywords": "Overloads for - loadSpecialCasing Module std.unicode_table_generator loadSpecialCasing(f) void loadSpecialCasing( string f )"
  },
  "phobos/std/unicode_table_generator/Functions/loadUnicodeData.html": {
    "href": "phobos/std/unicode_table_generator/Functions/loadUnicodeData.html",
    "title": "Overloads for - loadUnicodeData | Marmos Demo",
    "keywords": "Overloads for - loadUnicodeData Module std.unicode_table_generator loadUnicodeData(inp) void loadUnicodeData( string inp )"
  },
  "phobos/std/unicode_table_generator/Functions/main.html": {
    "href": "phobos/std/unicode_table_generator/Functions/main.html",
    "title": "Overloads for - main | Marmos Demo",
    "keywords": "Overloads for - main Module std.unicode_table_generator main(argv) void main( <bug: unknown> argv )"
  },
  "phobos/std/unicode_table_generator/Functions/propertyNameLess.html": {
    "href": "phobos/std/unicode_table_generator/Functions/propertyNameLess.html",
    "title": "Overloads for - propertyNameLess | Marmos Demo",
    "keywords": "Overloads for - propertyNameLess Module std.unicode_table_generator propertyNameLess(a, b) bool propertyNameLess( <bug: unknown> a, <bug: unknown> b )"
  },
  "phobos/std/unicode_table_generator/Functions/recursivelyDecompose.html": {
    "href": "phobos/std/unicode_table_generator/Functions/recursivelyDecompose.html",
    "title": "Overloads for - recursivelyDecompose | Marmos Demo",
    "keywords": "Overloads for - recursivelyDecompose Module std.unicode_table_generator recursivelyDecompose(decompTable) <bug: unknown> recursivelyDecompose( <bug: unknown> decompTable ) auto"
  },
  "phobos/std/unicode_table_generator/Functions/scanUniData.html": {
    "href": "phobos/std/unicode_table_generator/Functions/scanUniData.html",
    "title": "Overloads for - scanUniData | Marmos Demo",
    "keywords": "Overloads for - scanUniData Module std.unicode_table_generator scanUniData(name, r) void scanUniData( string name, Regex!(char) r )"
  },
  "phobos/std/unicode_table_generator/Functions/storeTrie.html": {
    "href": "phobos/std/unicode_table_generator/Functions/storeTrie.html",
    "title": "Overloads for - storeTrie | Marmos Demo",
    "keywords": "Overloads for - storeTrie Module std.unicode_table_generator storeTrie(trie, sink) void storeTrie( T trie, O sink )"
  },
  "phobos/std/unicode_table_generator/Functions/toPairs.html": {
    "href": "phobos/std/unicode_table_generator/Functions/toPairs.html",
    "title": "Overloads for - toPairs | Marmos Demo",
    "keywords": "Overloads for - toPairs Module std.unicode_table_generator toPairs(aa) <bug: unknown> toPairs( <bug: unknown> aa ) auto"
  },
  "phobos/std/unicode_table_generator/Functions/uniformName.html": {
    "href": "phobos/std/unicode_table_generator/Functions/uniformName.html",
    "title": "Overloads for - uniformName | Marmos Demo",
    "keywords": "Overloads for - uniformName Module std.unicode_table_generator uniformName(s) string uniformName( string s )"
  },
  "phobos/std/unicode_table_generator/Functions/writeAliasTable.html": {
    "href": "phobos/std/unicode_table_generator/Functions/writeAliasTable.html",
    "title": "Overloads for - writeAliasTable | Marmos Demo",
    "keywords": "Overloads for - writeAliasTable Module std.unicode_table_generator writeAliasTable(sink, prefix, src) void writeAliasTable( File sink, string prefix, PropertyTable src )"
  },
  "phobos/std/unicode_table_generator/Functions/writeBest2Level.html": {
    "href": "phobos/std/unicode_table_generator/Functions/writeBest2Level.html",
    "title": "Overloads for - writeBest2Level | Marmos Demo",
    "keywords": "Overloads for - writeBest2Level Module std.unicode_table_generator writeBest2Level(sink, name, set) void writeBest2Level( File sink, string name, Set set ) writeBest2Level(sink, name, map, defValue) void writeBest2Level( File sink, string name, <bug: unknown> map, V defValue )"
  },
  "phobos/std/unicode_table_generator/Functions/writeBest3Level.html": {
    "href": "phobos/std/unicode_table_generator/Functions/writeBest3Level.html",
    "title": "Overloads for - writeBest3Level | Marmos Demo",
    "keywords": "Overloads for - writeBest3Level Module std.unicode_table_generator writeBest3Level(sink, name, set) <bug: unknown> writeBest3Level( File sink, string name, Set set ) auto writeBest3Level(sink, name, map, defValue) void writeBest3Level( File sink, string name, <bug: unknown> map, V defValue )"
  },
  "phobos/std/unicode_table_generator/Functions/writeBest4Level.html": {
    "href": "phobos/std/unicode_table_generator/Functions/writeBest4Level.html",
    "title": "Overloads for - writeBest4Level | Marmos Demo",
    "keywords": "Overloads for - writeBest4Level Module std.unicode_table_generator writeBest4Level(sink, name, set) void writeBest4Level( File sink, string name, Set set )"
  },
  "phobos/std/unicode_table_generator/Functions/writeCaseCoversion.html": {
    "href": "phobos/std/unicode_table_generator/Functions/writeCaseCoversion.html",
    "title": "Overloads for - writeCaseCoversion | Marmos Demo",
    "keywords": "Overloads for - writeCaseCoversion Module std.unicode_table_generator writeCaseCoversion(sink) void writeCaseCoversion( File sink )"
  },
  "phobos/std/unicode_table_generator/Functions/writeCaseFolding.html": {
    "href": "phobos/std/unicode_table_generator/Functions/writeCaseFolding.html",
    "title": "Overloads for - writeCaseFolding | Marmos Demo",
    "keywords": "Overloads for - writeCaseFolding Module std.unicode_table_generator writeCaseFolding(sink) void writeCaseFolding( File sink )"
  },
  "phobos/std/unicode_table_generator/Functions/writeCombining.html": {
    "href": "phobos/std/unicode_table_generator/Functions/writeCombining.html",
    "title": "Overloads for - writeCombining | Marmos Demo",
    "keywords": "Overloads for - writeCombining Module std.unicode_table_generator writeCombining(sink) void writeCombining( File sink )"
  },
  "phobos/std/unicode_table_generator/Functions/writeCompositionTable.html": {
    "href": "phobos/std/unicode_table_generator/Functions/writeCompositionTable.html",
    "title": "Overloads for - writeCompositionTable | Marmos Demo",
    "keywords": "Overloads for - writeCompositionTable Module std.unicode_table_generator writeCompositionTable(sink) void writeCompositionTable( File sink )"
  },
  "phobos/std/unicode_table_generator/Functions/writeDecomposition.html": {
    "href": "phobos/std/unicode_table_generator/Functions/writeDecomposition.html",
    "title": "Overloads for - writeDecomposition | Marmos Demo",
    "keywords": "Overloads for - writeDecomposition Module std.unicode_table_generator writeDecomposition(sink) void writeDecomposition( File sink )"
  },
  "phobos/std/unicode_table_generator/Functions/writeDstring.html": {
    "href": "phobos/std/unicode_table_generator/Functions/writeDstring.html",
    "title": "Overloads for - writeDstring | Marmos Demo",
    "keywords": "Overloads for - writeDstring Module std.unicode_table_generator writeDstring(sink, tab) void writeDstring( File sink, <bug: unknown> tab ) Write a dchar[] as a dstring \"\"d"
  },
  "phobos/std/unicode_table_generator/Functions/writeDstringTable.html": {
    "href": "phobos/std/unicode_table_generator/Functions/writeDstringTable.html",
    "title": "Overloads for - writeDstringTable | Marmos Demo",
    "keywords": "Overloads for - writeDstringTable Module std.unicode_table_generator writeDstringTable(sink, name, table) void writeDstringTable( File sink, string name, <bug: unknown> table ) Write a function that returns a dchar[] with data stored in table"
  },
  "phobos/std/unicode_table_generator/Functions/writeFunctions.html": {
    "href": "phobos/std/unicode_table_generator/Functions/writeFunctions.html",
    "title": "Overloads for - writeFunctions | Marmos Demo",
    "keywords": "Overloads for - writeFunctions Module std.unicode_table_generator writeFunctions(sink) void writeFunctions( File sink )"
  },
  "phobos/std/unicode_table_generator/Functions/writeGraphemeTries.html": {
    "href": "phobos/std/unicode_table_generator/Functions/writeGraphemeTries.html",
    "title": "Overloads for - writeGraphemeTries | Marmos Demo",
    "keywords": "Overloads for - writeGraphemeTries Module std.unicode_table_generator writeGraphemeTries(sink) void writeGraphemeTries( File sink )"
  },
  "phobos/std/unicode_table_generator/Functions/writeNormalizationTries.html": {
    "href": "phobos/std/unicode_table_generator/Functions/writeNormalizationTries.html",
    "title": "Overloads for - writeNormalizationTries | Marmos Demo",
    "keywords": "Overloads for - writeNormalizationTries Module std.unicode_table_generator writeNormalizationTries(sink) void writeNormalizationTries( File sink )"
  },
  "phobos/std/unicode_table_generator/Functions/writeSets.html": {
    "href": "phobos/std/unicode_table_generator/Functions/writeSets.html",
    "title": "Overloads for - writeSets | Marmos Demo",
    "keywords": "Overloads for - writeSets Module std.unicode_table_generator writeSets(sink, src) void writeSets( File sink, PropertyTable src )"
  },
  "phobos/std/unicode_table_generator/Functions/writeTries.html": {
    "href": "phobos/std/unicode_table_generator/Functions/writeTries.html",
    "title": "Overloads for - writeTries | Marmos Demo",
    "keywords": "Overloads for - writeTries Module std.unicode_table_generator writeTries(sink) void writeTries( File sink )"
  },
  "phobos/std/unicode_table_generator/Functions/writeUintArray.html": {
    "href": "phobos/std/unicode_table_generator/Functions/writeUintArray.html",
    "title": "Overloads for - writeUintArray | Marmos Demo",
    "keywords": "Overloads for - writeUintArray Module std.unicode_table_generator writeUintArray(sink, tab) void writeUintArray( File sink, <bug: unknown> tab ) Write a dchar[] as hex string"
  },
  "phobos/std/unicode_table_generator/Functions/writeUintTable.html": {
    "href": "phobos/std/unicode_table_generator/Functions/writeUintTable.html",
    "title": "Overloads for - writeUintTable | Marmos Demo",
    "keywords": "Overloads for - writeUintTable Module std.unicode_table_generator writeUintTable(sink, name, table) void writeUintTable( File sink, string name, <bug: unknown> table ) Write a function that returns a uint[] with data stored in table"
  },
  "phobos/std/unicode_table_generator/Overview.html": {
    "href": "phobos/std/unicode_table_generator/Overview.html",
    "title": "Module - std.unicode_table_generator | Marmos Demo",
    "keywords": "Module - std.unicode_table_generator About This is a tool to automatically generate source code for unicode data structures. If not present, the script will automatically try to download the files from: https://www.unicode.org/Public Make sure the current working directory is the /tools folder. To update `std.internal.unicode*.d` files, run rdmd -m32 unicode_table_generator.d rdmd -m64 unicode_table_generator.d --min The -m32 run will replace the files, while the -m64 run with --min will append 64-bit specific parts. The 32-bit compilation of the generator is needed because it depends on 32-bit data structures defined in std.uni . To make -m32 work on linux, you may need to grab a 32-bit libphobos2.a from dmd2/linux/lib32 and pass it as argument: rdmd -m32 -Llibphobos2.a -defaultlib= unicode_table_generator.d Pull Requests to untangle this complex bootstrap process are welcome! :) TODO: Support emitting of Turkic casefolding mappings Authors: Dmitry Olshansky License: Boost Aliases Name Description List_1 Structs Name Description FullCaseEntry PropertyTable SimpleCaseEntry 8 byte easy SimpleCaseEntry, will be compressed to SCE which bit packs values to 4 bytes Functions Name Description charsetString comparePropertyName createPrinter ensureFilesAreDownloaded fullCaseEntry identName loadBlocks loadCaseFolding loadExclusions loadNormalization loadProperties loadPropertyAliases loadSpecialCasing loadUnicodeData main propertyNameLess recursivelyDecompose scanUniData storeTrie toPairs uniformName writeAliasTable writeBest2Level writeBest3Level writeBest4Level writeCaseCoversion writeCaseFolding writeCombining writeCompositionTable writeDecomposition writeDstring Write a dchar[] as a dstring \"\"d writeDstringTable Write a function that returns a dchar[] with data stored in table writeFunctions writeGraphemeTries writeNormalizationTries writeSets writeTries writeUintArray Write a dchar[] as hex string writeUintTable Write a function that returns a uint[] with data stored in table Variables Name Description blacklist blocks canonDecomp canonicalyComposableLeft canonicalyComposableRight combiningClass canonical combining class combiningMapping compatDecomp compExclusions emojiData fullTable general graphemeBreaks hangul HeaderComment lowerCaseSet mixedCCEntry normalization outputDir Where to put generated files scripts simpleTable toLowerIndex toLowerSimpleIndex toLowerTab toLowerTabSimpleLen toTitleIndex toTitleSimpleIndex toTitleTab toTitleTabSimpleLen toUpperIndex toUpperSimpleIndex toUpperTab toUpperTabSimpleLen unicodeBaseUrl Url from which unicode files are downloaded unicodeDir Directory in which unicode files are downloaded upperCaseSet"
  },
  "phobos/std/unicode_table_generator/Structs/FullCaseEntry.html": {
    "href": "phobos/std/unicode_table_generator/Structs/FullCaseEntry.html",
    "title": "Struct - FullCaseEntry | Marmos Demo",
    "keywords": "Struct - FullCaseEntry Module std.unicode_table_generator public struct FullCaseEntry { // <bug: unknown> value( ) auto; // ubyte entry_len; // number in batch ubyte n; // <bug: unknown> seq; // size - size of batch ubyte size; } Functions Name Description value Variables Name Description entry_len n number in batch seq size size - size of batch"
  },
  "phobos/std/unicode_table_generator/Structs/PropertyTable.html": {
    "href": "phobos/std/unicode_table_generator/Structs/PropertyTable.html",
    "title": "Struct - PropertyTable | Marmos Demo",
    "keywords": "Struct - PropertyTable Module std.unicode_table_generator public struct PropertyTable { // <bug: unknown> aliases; // <bug: unknown> table; } Variables Name Description aliases table"
  },
  "phobos/std/unicode_table_generator/Structs/SimpleCaseEntry.html": {
    "href": "phobos/std/unicode_table_generator/Structs/SimpleCaseEntry.html",
    "title": "Struct - SimpleCaseEntry | Marmos Demo",
    "keywords": "Struct - SimpleCaseEntry Module std.unicode_table_generator public struct SimpleCaseEntry { // uint ch; // bool isLower; // bool isUpper; // ubyte n; // ubyte size; } About 8 byte easy SimpleCaseEntry, will be compressed to SCE which bit packs values to 4 bytes Variables Name Description ch isLower isUpper n size"
  },
  "phobos/std/uri/Classes/URIException.html": {
    "href": "phobos/std/uri/Classes/URIException.html",
    "title": "Class - URIException | Marmos Demo",
    "keywords": "Class - URIException Module std.uri public class URIException { } About This Exception is thrown if something goes wrong when encoding or decoding a URI."
  },
  "phobos/std/uri/Functions/URI_Decode.html": {
    "href": "phobos/std/uri/Functions/URI_Decode.html",
    "title": "Overloads for - URI_Decode | Marmos Demo",
    "keywords": "Overloads for - URI_Decode Module std.uri URI_Decode(uri, reservedSet) dstring URI_Decode( <bug: unknown> uri, uint reservedSet )"
  },
  "phobos/std/uri/Functions/URI_Encode.html": {
    "href": "phobos/std/uri/Functions/URI_Encode.html",
    "title": "Overloads for - URI_Encode | Marmos Demo",
    "keywords": "Overloads for - URI_Encode Module std.uri URI_Encode(str, unescapedSet) string URI_Encode( dstring str, uint unescapedSet )"
  },
  "phobos/std/uri/Functions/ascii2hex.html": {
    "href": "phobos/std/uri/Functions/ascii2hex.html",
    "title": "Overloads for - ascii2hex | Marmos Demo",
    "keywords": "Overloads for - ascii2hex Module std.uri ascii2hex(c) uint ascii2hex( dchar c )"
  },
  "phobos/std/uri/Functions/decode.html": {
    "href": "phobos/std/uri/Functions/decode.html",
    "title": "Overloads for - decode | Marmos Demo",
    "keywords": "Overloads for - decode Module std.uri decode(encodedURI) string decode( <bug: unknown> encodedURI ) Decodes the URI string encodedURI into a UTF-8 string and returns it. Escape sequences that resolve to reserved URI characters are not replaced. Escape sequences that resolve to the '#' character are not replaced."
  },
  "phobos/std/uri/Functions/decodeComponent.html": {
    "href": "phobos/std/uri/Functions/decodeComponent.html",
    "title": "Overloads for - decodeComponent | Marmos Demo",
    "keywords": "Overloads for - decodeComponent Module std.uri decodeComponent(encodedURIComponent) string decodeComponent( <bug: unknown> encodedURIComponent ) Decodes the URI string encodedURI into a UTF-8 string and returns it. All escape sequences are decoded."
  },
  "phobos/std/uri/Functions/emailLength.html": {
    "href": "phobos/std/uri/Functions/emailLength.html",
    "title": "Overloads for - emailLength | Marmos Demo",
    "keywords": "Overloads for - emailLength Module std.uri emailLength(s) ptrdiff_t emailLength( <bug: unknown> s ) Does string s[] start with an email address? Returns: -1 it does not len it does, and s[0 .. i] is the slice of s[] that is that email address References: RFC2822"
  },
  "phobos/std/uri/Functions/encode.html": {
    "href": "phobos/std/uri/Functions/encode.html",
    "title": "Overloads for - encode | Marmos Demo",
    "keywords": "Overloads for - encode Module std.uri encode(uri) string encode( <bug: unknown> uri ) Encodes the UTF-8 string uri into a URI and returns that URI. Any character not a valid URI character is escaped. The '#' character is not escaped."
  },
  "phobos/std/uri/Functions/encodeComponent.html": {
    "href": "phobos/std/uri/Functions/encodeComponent.html",
    "title": "Overloads for - encodeComponent | Marmos Demo",
    "keywords": "Overloads for - encodeComponent Module std.uri encodeComponent(uriComponent) string encodeComponent( <bug: unknown> uriComponent ) Encodes the UTF-8 string uriComponent into a URI and returns that URI. Any character not a letter, digit, or one of -_.!~*'() is escaped."
  },
  "phobos/std/uri/Functions/uriLength.html": {
    "href": "phobos/std/uri/Functions/uriLength.html",
    "title": "Overloads for - uriLength | Marmos Demo",
    "keywords": "Overloads for - uriLength Module std.uri uriLength(s) ptrdiff_t uriLength( <bug: unknown> s ) Does string s[] start with a URL? Returns: -1 it does not len it does, and s[0 .. len] is the slice of s[] that is that URL"
  },
  "phobos/std/uri/Functions/urlEncode.html": {
    "href": "phobos/std/uri/Functions/urlEncode.html",
    "title": "Overloads for - urlEncode | Marmos Demo",
    "keywords": "Overloads for - urlEncode Module std.uri urlEncode(values) string urlEncode( <bug: unknown> values )"
  },
  "phobos/std/uri/Overview.html": {
    "href": "phobos/std/uri/Overview.html",
    "title": "Module - std.uri | Marmos Demo",
    "keywords": "Module - std.uri About Encode and decode Uniform Resource Identifiers (URIs). URIs are used in internet transfer protocols. Valid URI characters consist of letters, digits, and the characters \\((B ;/?:@&amp;=+\\),-_.!~*'()) Reserved URI characters are \\((B ;/?:@&amp;=+\\),) Escape sequences consist of $(B %) followed by two hex digits. See_Also $(LINK2 https://www.ietf.org/rfc/rfc3986.txt, RFC 3986) $(LINK2 http://en.wikipedia.org/wiki/Uniform_resource_identifier, Wikipedia) Copyright: Copyright The D Language Foundation 2000 - 2009. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP digitalmars.com, Walter Bright) Source: $(PHOBOSSRC std/uri.d) Classes Name Description URIException This Exception is thrown if something goes wrong when encoding or decoding a URI. Functions Name Description ascii2hex decode Decodes the URI string encodedURI into a UTF-8 string and returns it. Escape sequences that resolve to reserved URI characters are not replaced. Escape sequences that resolve to the '#' character are not replaced. decodeComponent Decodes the URI string encodedURI into a UTF-8 string and returns it. All escape sequences are decoded. emailLength Does string s[] start with an email address? Returns: -1 it does not len it does, and s[0 .. i] is the slice of s[] that is that email address References: RFC2822 encode Encodes the UTF-8 string uri into a URI and returns that URI. Any character not a valid URI character is escaped. The '#' character is not escaped. encodeComponent Encodes the UTF-8 string uriComponent into a URI and returns that URI. Any character not a letter, digit, or one of -_.!~*'() is escaped. URI_Decode URI_Encode uriLength Does string s[] start with a URL? Returns: -1 it does not len it does, and s[0 .. len] is the slice of s[] that is that URL urlEncode Variables Name Description hex2ascii uri_flags"
  },
  "phobos/std/utf/BidirCU/Functions/back.html": {
    "href": "phobos/std/utf/BidirCU/Functions/back.html",
    "title": "Overloads for - back | Marmos Demo",
    "keywords": "Overloads for - back Module std.utf Parent BidirCU back() C back( )"
  },
  "phobos/std/utf/BidirCU/Functions/empty.html": {
    "href": "phobos/std/utf/BidirCU/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.utf Parent BidirCU empty() bool empty( )"
  },
  "phobos/std/utf/BidirCU/Functions/front.html": {
    "href": "phobos/std/utf/BidirCU/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.utf Parent BidirCU front() C front( )"
  },
  "phobos/std/utf/BidirCU/Functions/length.html": {
    "href": "phobos/std/utf/BidirCU/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.utf Parent BidirCU length() size_t length( )"
  },
  "phobos/std/utf/BidirCU/Functions/popBack.html": {
    "href": "phobos/std/utf/BidirCU/Functions/popBack.html",
    "title": "Overloads for - popBack | Marmos Demo",
    "keywords": "Overloads for - popBack Module std.utf Parent BidirCU popBack() void popBack( )"
  },
  "phobos/std/utf/BidirCU/Functions/popFront.html": {
    "href": "phobos/std/utf/BidirCU/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.utf Parent BidirCU popFront() void popFront( )"
  },
  "phobos/std/utf/BidirCU/Functions/save.html": {
    "href": "phobos/std/utf/BidirCU/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.utf Parent BidirCU save() <bug: unknown> save( ) auto"
  },
  "phobos/std/utf/Classes/RefBidirCU.html": {
    "href": "phobos/std/utf/Classes/RefBidirCU.html",
    "title": "Class - RefBidirCU | Marmos Demo",
    "keywords": "Class - RefBidirCU Module std.utf public class RefBidirCU { // C back( ) ; // bool empty( ) ; // C front( ) ; // size_t length( ) ; // void popBack( ) ; // void popFront( ) ; // <bug: unknown> save( ) auto; } Functions Name Description back empty front length popBack popFront save"
  },
  "phobos/std/utf/Classes/RefRandomCU.html": {
    "href": "phobos/std/utf/Classes/RefRandomCU.html",
    "title": "Class - RefRandomCU | Marmos Demo",
    "keywords": "Class - RefRandomCU Module std.utf public class RefRandomCU { // C back( ) ; // bool empty( ) ; // C front( ) ; // size_t length( ) ; // C opIndex( size_t i ) ; // <bug: unknown> opSlice( size_t i, size_t j ) auto; // void popBack( ) ; // void popFront( ) ; // <bug: unknown> save( ) auto; } Functions Name Description back empty front length opIndex opSlice popBack popFront save"
  },
  "phobos/std/utf/Classes/UTFException.html": {
    "href": "phobos/std/utf/Classes/UTFException.html",
    "title": "Class - UTFException | Marmos Demo",
    "keywords": "Class - UTFException Module std.utf public class UTFException { // UTFException setSequence( <bug: unknown> data ) ; // string toString( ) override; // size_t len; // <bug: unknown> sequence; } About Exception thrown on errors in std.utf functions. Functions Name Description setSequence toString Variables Name Description len sequence"
  },
  "phobos/std/utf/Functions/byCodeUnit.html": {
    "href": "phobos/std/utf/Functions/byCodeUnit.html",
    "title": "Overloads for - byCodeUnit | Marmos Demo",
    "keywords": "Overloads for - byCodeUnit Module std.utf byCodeUnit(r) <bug: unknown> byCodeUnit( R r ) auto Iterate a range of char, wchar, or dchars by code unit. The purpose is to bypass the special case decoding that $(REF front, std,range,primitives) does to character arrays. As a result, using ranges with byCodeUnit can be nothrow while $(REF front, std,range,primitives) throws when it encounters invalid Unicode sequences. A code unit is a building block of the UTF encodings. Generally, an individual code unit does not represent what's perceived as a full character (a.k.a. a grapheme cluster in Unicode terminology). Many characters are encoded with multiple code units. For example, the UTF-8 code units for ø are 0xC3 0xB8 . That means, an individual element of byCodeUnit often does not form a character on its own. Attempting to treat it as one while iterating over the resulting range will give nonsensical results. Params r R an $(REF_ALTTEXT input range, isInputRange, std,range,primitives) of characters (including strings) or a type that implicitly converts to a string type. Returns: If r is not an auto-decodable string (i.e. a narrow string or a user-defined type that implicitly converts to a string type), then r is returned. Otherwise, r is converted to its corresponding string type (if it's not already a string) and wrapped in a random-access range where the element encoding type of the string (its code unit) is the element type of the range, and that range returned. The range has slicing. If r is quirky enough to be a struct or class which is an input range of characters on its own (i.e. it has the input range API as member functions), $(I and) it's implicitly convertible to a string type, then r is returned, and no implicit conversion takes place. If r is wrapped in a new range, then that range has a source property for returning the string that's currently contained within that range. See_Also Refer to the $(MREF std, uni) docs for a reference on Unicode terminology. For a range that iterates by grapheme cluster (written character) see $(REF byGrapheme, std,uni)."
  },
  "phobos/std/utf/Functions/canSearchInCodeUnits.html": {
    "href": "phobos/std/utf/Functions/canSearchInCodeUnits.html",
    "title": "Overloads for - canSearchInCodeUnits | Marmos Demo",
    "keywords": "Overloads for - canSearchInCodeUnits Module std.utf canSearchInCodeUnits(c) bool canSearchInCodeUnits( dchar c )"
  },
  "phobos/std/utf/Functions/codeLength.html": {
    "href": "phobos/std/utf/Functions/codeLength.html",
    "title": "Overloads for - codeLength | Marmos Demo",
    "keywords": "Overloads for - codeLength Module std.utf codeLength(c) ubyte codeLength( dchar c ) Returns the number of code units that are required to encode the code point c when C is the character type used to encode it. codeLength(input) size_t codeLength( InputRange input ) Returns the number of code units that are required to encode str in a string whose character type is C . This is particularly useful when slicing one string with the length of another and the two string types use different character types. Params C <parameter not found> the character type to get the encoding length for input InputRange the $(REF_ALTTEXT input range, isInputRange, std,range,primitives) input = the $(REF_ALTTEXT input range, isInputRange, std,range,primitives) to calculate the encoding length from Returns: The number of code units in input when encoded to C"
  },
  "phobos/std/utf/Functions/count.html": {
    "href": "phobos/std/utf/Functions/count.html",
    "title": "Overloads for - count | Marmos Demo",
    "keywords": "Overloads for - count Module std.utf count(str) size_t count( <bug: unknown> str ) Returns the total number of code points encoded in str . Supercedes: This function supercedes $(LREF toUCSindex). Standards: Unicode 5.0, ASCII, ISO-8859-1, WINDOWS-1252 Throws UTFException if str is not well-formed."
  },
  "phobos/std/utf/Functions/decode.html": {
    "href": "phobos/std/utf/Functions/decode.html",
    "title": "Overloads for - decode | Marmos Demo",
    "keywords": "Overloads for - decode Module std.utf decode(str, index) dchar decode( S str, size_t index ) Decodes and returns the code point starting at str[index] . index is advanced to one past the decoded code point. If the code point is not well-formed, then a UTFException is thrown and index remains unchanged. decode will only work with strings and random access ranges of code units with length and slicing, whereas $(LREF decodeFront) will work with any input range of code units. Params useReplacementDchar <parameter not found> if invalid UTF, return replacementDchar rather than throwing str S input string or indexable Range index size_t starting index into s[]; incremented by number of code units processed Returns decoded character Throws $(LREF UTFException) if str[index] is not the start of a valid UTF sequence and useReplacementDchar is No.useReplacementDchar decode(str, index) dchar decode( S str, size_t index ) ditto"
  },
  "phobos/std/utf/Functions/decodeBack.html": {
    "href": "phobos/std/utf/Functions/decodeBack.html",
    "title": "Overloads for - decodeBack | Marmos Demo",
    "keywords": "Overloads for - decodeBack Module std.utf decodeBack(str, numCodeUnits) dchar decodeBack( S str, size_t numCodeUnits ) decodeBack is a variant of $(LREF decode) which specifically decodes the last code point. Unlike $(LREF decode), decodeBack accepts any bidirectional range of code units (rather than just a string or random access range). It also takes the range by ref and pops off the elements as it decodes them. If numCodeUnits is passed in, it gets set to the number of code units which were in the code point which was decoded. Params useReplacementDchar <parameter not found> if invalid UTF, return replacementDchar rather than throwing str S input string or bidirectional Range numCodeUnits size_t gives the number of code units processed Returns A decoded UTF character. Throws $(LREF UTFException) if str.back is not the end of a valid UTF sequence. If an exception is thrown, the str itself remains unchanged, but there is no guarantee as to the value of numCodeUnits (when passed). decodeBack(str, numCodeUnits) dchar decodeBack( S str, size_t numCodeUnits ) Ditto decodeBack(str) dchar decodeBack( S str ) Ditto"
  },
  "phobos/std/utf/Functions/decodeFront.html": {
    "href": "phobos/std/utf/Functions/decodeFront.html",
    "title": "Overloads for - decodeFront | Marmos Demo",
    "keywords": "Overloads for - decodeFront Module std.utf decodeFront(str, numCodeUnits) dchar decodeFront( S str, size_t numCodeUnits ) decodeFront is a variant of $(LREF decode) which specifically decodes the first code point. Unlike $(LREF decode), decodeFront accepts any $(REF_ALTTEXT input range, isInputRange, std,range,primitives) of code units (rather than just a string or random access range). It also takes the range by ref and pops off the elements as it decodes them. If numCodeUnits is passed in, it gets set to the number of code units which were in the code point which was decoded. Params useReplacementDchar <parameter not found> if invalid UTF, return replacementDchar rather than throwing str S input string or indexable Range numCodeUnits size_t set to number of code units processed Returns decoded character Throws $(LREF UTFException) if str.front is not the start of a valid UTF sequence. If an exception is thrown, then there is no guarantee as to the number of code units which were popped off, as it depends on the type of range being used and how many code units had to be popped off before the code point was determined to be invalid. decodeFront(str, numCodeUnits) dchar decodeFront( S str, size_t numCodeUnits ) ditto decodeFront(str) dchar decodeFront( S str ) Ditto"
  },
  "phobos/std/utf/Functions/decodeImpl.html": {
    "href": "phobos/std/utf/Functions/decodeImpl.html",
    "title": "Overloads for - decodeImpl | Marmos Demo",
    "keywords": "Overloads for - decodeImpl Module std.utf decodeImpl(str, index) dchar decodeImpl( S str, size_t index ) decodeImpl(str, index) dchar decodeImpl( S str, size_t index ) decodeImpl(str, index) dchar decodeImpl( S str, size_t index )"
  },
  "phobos/std/utf/Functions/encode.html": {
    "href": "phobos/std/utf/Functions/encode.html",
    "title": "Overloads for - encode | Marmos Demo",
    "keywords": "Overloads for - encode Module std.utf encode(buf, c) size_t encode( <bug: unknown> buf, dchar c ) Encodes c into the static array, buf , and returns the actual length of the encoded character (a number between 1 and 4 for char[4] buffers and a number between 1 and 2 for wchar[2] buffers). Throws UTFException if c is not a valid UTF code point. encode(buf, c) size_t encode( <bug: unknown> buf, dchar c ) Ditto encode(buf, c) size_t encode( <bug: unknown> buf, dchar c ) Ditto encode(str, c) void encode( <bug: unknown> str, dchar c ) Encodes c in str 's encoding and appends it to str . Throws UTFException if c is not a valid UTF code point. encode(str, c) void encode( <bug: unknown> str, dchar c ) ditto encode(str, c) void encode( <bug: unknown> str, dchar c ) ditto"
  },
  "phobos/std/utf/Functions/invalidUTFstrings.html": {
    "href": "phobos/std/utf/Functions/invalidUTFstrings.html",
    "title": "Overloads for - invalidUTFstrings | Marmos Demo",
    "keywords": "Overloads for - invalidUTFstrings Module std.utf invalidUTFstrings() <bug: unknown> invalidUTFstrings( ) auto"
  },
  "phobos/std/utf/Functions/isValidCodepoint.html": {
    "href": "phobos/std/utf/Functions/isValidCodepoint.html",
    "title": "Overloads for - isValidCodepoint | Marmos Demo",
    "keywords": "Overloads for - isValidCodepoint Module std.utf isValidCodepoint(c) bool isValidCodepoint( Char c ) Checks if a single character forms a valid code point. When standing alone, some characters are invalid code points. For example the wchar 0xD800 is a so called high surrogate, which can only be interpreted together with a low surrogate following it. As a standalone character it is considered invalid. See $(LINK2 http://www.unicode.org/versions/Unicode13.0.0/, Unicode Standard, D90, D91 and D92) for more details. Params c Char character to test Char <parameter not found> character type of c Returns true , if c forms a valid code point."
  },
  "phobos/std/utf/Functions/isValidDchar.html": {
    "href": "phobos/std/utf/Functions/isValidDchar.html",
    "title": "Overloads for - isValidDchar | Marmos Demo",
    "keywords": "Overloads for - isValidDchar Module std.utf isValidDchar(c) bool isValidDchar( dchar c ) Check whether the given Unicode code point is valid. Params c dchar code point to check Returns true if and only if c is a valid Unicode code point Note '\\uFFFE' and '\\uFFFF' are considered valid by isValidDchar , as they are permitted for internal use by an application, but they are not allowed for interchange by the Unicode standard."
  },
  "phobos/std/utf/Functions/stride.html": {
    "href": "phobos/std/utf/Functions/stride.html",
    "title": "Overloads for - stride | Marmos Demo",
    "keywords": "Overloads for - stride Module std.utf stride(str, index) uint stride( S str, size_t index ) Calculate the length of the UTF sequence starting at index in str . Params str S $(REF_ALTTEXT input range, isInputRange, std,range,primitives) of UTF code units. Must be random access if index is passed index = starting index of UTF sequence (default: 0 ) Returns The number of code units in the UTF sequence. For UTF-8, this is a value between 1 and 4 (as per \\((HTTP tools.ietf.org/html/rfc3629#section-3, RFC 3629\\)(COMMA) section 3)). For UTF-16, it is either 1 or 2. For UTF-32, it is always 1. Throws May throw a UTFException if str[index] is not the start of a valid UTF sequence. Note stride will only analyze the first str[index] element. It will not fully verify the validity of the UTF sequence, nor even verify the presence of the sequence: it will not actually guarantee that $(D index + stride(str, index) <= str.length). stride(str) uint stride( S str ) Ditto stride(str, index) uint stride( S str, size_t index ) Ditto stride(str) uint stride( S str ) Ditto stride(str) uint stride( S str ) Ditto stride(str, index) uint stride( S str, size_t index ) Ditto"
  },
  "phobos/std/utf/Functions/strideBack.html": {
    "href": "phobos/std/utf/Functions/strideBack.html",
    "title": "Overloads for - strideBack | Marmos Demo",
    "keywords": "Overloads for - strideBack Module std.utf strideBack(str, index) uint strideBack( S str, size_t index ) Calculate the length of the UTF sequence ending one code unit before index in str . Params str S bidirectional range of UTF code units. Must be random access if index is passed index = index one past end of UTF sequence (default: str.length ) Returns The number of code units in the UTF sequence. For UTF-8, this is a value between 1 and 4 (as per \\((HTTP tools.ietf.org/html/rfc3629#section-3, RFC 3629\\)(COMMA) section 3)). For UTF-16, it is either 1 or 2. For UTF-32, it is always 1. Throws May throw a UTFException if str[index] is not one past the end of a valid UTF sequence. Note strideBack will only analyze the element at $(D str[index - 1]) element. It will not fully verify the validity of the UTF sequence, nor even verify the presence of the sequence: it will not actually guarantee that $(D strideBack(str, index) <= index). strideBack(str) uint strideBack( S str ) Ditto strideBack(str) uint strideBack( S str ) Ditto strideBack(str, index) uint strideBack( S str, size_t index ) Ditto strideBack(str) uint strideBack( S str ) Ditto strideBack(str, index) uint strideBack( S str, size_t index ) Ditto strideBack(str) uint strideBack( S str ) Ditto"
  },
  "phobos/std/utf/Functions/strideImpl.html": {
    "href": "phobos/std/utf/Functions/strideImpl.html",
    "title": "Overloads for - strideImpl | Marmos Demo",
    "keywords": "Overloads for - strideImpl Module std.utf strideImpl(c, index) uint strideImpl( char c, size_t index )"
  },
  "phobos/std/utf/Functions/testAllDecode.html": {
    "href": "phobos/std/utf/Functions/testAllDecode.html",
    "title": "Overloads for - testAllDecode | Marmos Demo",
    "keywords": "Overloads for - testAllDecode Module std.utf testAllDecode(range, expectedChar, expectedIndex, line) void testAllDecode( R range, dchar expectedChar, size_t expectedIndex, size_t line )"
  },
  "phobos/std/utf/Functions/testBadDecode.html": {
    "href": "phobos/std/utf/Functions/testBadDecode.html",
    "title": "Overloads for - testBadDecode | Marmos Demo",
    "keywords": "Overloads for - testBadDecode Module std.utf testBadDecode(range, index, line) void testBadDecode( R range, size_t index, size_t line )"
  },
  "phobos/std/utf/Functions/testBadDecodeBack.html": {
    "href": "phobos/std/utf/Functions/testBadDecodeBack.html",
    "title": "Overloads for - testBadDecodeBack | Marmos Demo",
    "keywords": "Overloads for - testBadDecodeBack Module std.utf testBadDecodeBack(range, line) void testBadDecodeBack( R range, size_t line )"
  },
  "phobos/std/utf/Functions/testDecode.html": {
    "href": "phobos/std/utf/Functions/testDecode.html",
    "title": "Overloads for - testDecode | Marmos Demo",
    "keywords": "Overloads for - testDecode Module std.utf testDecode(range, index, expectedChar, expectedIndex, line) void testDecode( R range, size_t index, dchar expectedChar, size_t expectedIndex, size_t line )"
  },
  "phobos/std/utf/Functions/testDecodeBack.html": {
    "href": "phobos/std/utf/Functions/testDecodeBack.html",
    "title": "Overloads for - testDecodeBack | Marmos Demo",
    "keywords": "Overloads for - testDecodeBack Module std.utf testDecodeBack(range, expectedChar, expectedNumCodeUnits, line) void testDecodeBack( R range, dchar expectedChar, size_t expectedNumCodeUnits, size_t line )"
  },
  "phobos/std/utf/Functions/testDecodeFront.html": {
    "href": "phobos/std/utf/Functions/testDecodeFront.html",
    "title": "Overloads for - testDecodeFront | Marmos Demo",
    "keywords": "Overloads for - testDecodeFront Module std.utf testDecodeFront(range, expectedChar, expectedNumCodeUnits, line) void testDecodeFront( R range, dchar expectedChar, size_t expectedNumCodeUnits, size_t line )"
  },
  "phobos/std/utf/Functions/toUCSindex.html": {
    "href": "phobos/std/utf/Functions/toUCSindex.html",
    "title": "Overloads for - toUCSindex | Marmos Demo",
    "keywords": "Overloads for - toUCSindex Module std.utf toUCSindex(str, index) size_t toUCSindex( <bug: unknown> str, size_t index ) Given index into str and assuming that index is at the start of a UTF sequence, toUCSindex determines the number of UCS characters up to index . So, index is the index of a code unit at the beginning of a code point, and the return value is how many code points into the string that that code point is."
  },
  "phobos/std/utf/Functions/toUTF16.html": {
    "href": "phobos/std/utf/Functions/toUTF16.html",
    "title": "Overloads for - toUTF16 | Marmos Demo",
    "keywords": "Overloads for - toUTF16 Module std.utf toUTF16(s) wstring toUTF16( S s ) Encodes the elements of s to UTF-16 and returns a newly GC allocated wstring of the elements. Params s S the range to encode Returns A UTF-16 string See_Also: For a lazy, non-allocating version of these functions, see $(LREF byUTF)."
  },
  "phobos/std/utf/Functions/toUTF16z.html": {
    "href": "phobos/std/utf/Functions/toUTF16z.html",
    "title": "Overloads for - toUTF16z | Marmos Demo",
    "keywords": "Overloads for - toUTF16z Module std.utf toUTF16z(str) <bug: unknown> toUTF16z( <bug: unknown> str ) toUTF16z is a convenience function for toUTFz!(const(wchar)*) . Encodes string s into UTF-16 and returns the encoded string. toUTF16z is suitable for calling the 'W' functions in the Win32 API that take an LPCWSTR argument."
  },
  "phobos/std/utf/Functions/toUTF32.html": {
    "href": "phobos/std/utf/Functions/toUTF32.html",
    "title": "Overloads for - toUTF32 | Marmos Demo",
    "keywords": "Overloads for - toUTF32 Module std.utf toUTF32(s) dstring toUTF32( S s ) Encodes the elements of s to UTF-32 and returns a newly GC allocated dstring of the elements. Params s S the range to encode Returns A UTF-32 string See_Also: For a lazy, non-allocating version of these functions, see $(LREF byUTF)."
  },
  "phobos/std/utf/Functions/toUTF8.html": {
    "href": "phobos/std/utf/Functions/toUTF8.html",
    "title": "Overloads for - toUTF8 | Marmos Demo",
    "keywords": "Overloads for - toUTF8 Module std.utf toUTF8(s) string toUTF8( S s ) Encodes the elements of s to UTF-8 and returns a newly allocated string of the elements. Params s S the string to encode Returns A UTF-8 string See_Also: For a lazy, non-allocating version of these functions, see $(LREF byUTF)."
  },
  "phobos/std/utf/Functions/toUTFImpl.html": {
    "href": "phobos/std/utf/Functions/toUTFImpl.html",
    "title": "Overloads for - toUTFImpl | Marmos Demo",
    "keywords": "Overloads for - toUTFImpl Module std.utf toUTFImpl(s) T toUTFImpl( S s )"
  },
  "phobos/std/utf/Functions/toUTFindex.html": {
    "href": "phobos/std/utf/Functions/toUTFindex.html",
    "title": "Overloads for - toUTFindex | Marmos Demo",
    "keywords": "Overloads for - toUTFindex Module std.utf toUTFindex(str, n) size_t toUTFindex( <bug: unknown> str, size_t n ) Given a UCS index n into str , returns the UTF index. So, n is how many code points into the string the code point is, and the array index of the code unit is returned."
  },
  "phobos/std/utf/Functions/toUTFz.html": {
    "href": "phobos/std/utf/Functions/toUTFz.html",
    "title": "Overloads for - toUTFz | Marmos Demo",
    "keywords": "Overloads for - toUTFz Module std.utf toUTFz(str) P toUTFz( S str ) Returns a C-style zero-terminated string equivalent to str . str must not contain embedded '\\0' 's as any C function will treat the first '\\0' that it sees as the end of the string. If str.empty is true , then a string containing only '\\0' is returned. toUTFz accepts any type of string and is templated on the type of character pointer that you wish to convert to. It will avoid allocating a new string if it can, but there's a decent chance that it will end up having to allocate a new string - particularly when dealing with character types other than char . $(RED Warning 1:) If the result of toUTFz equals str.ptr , then if anything alters the character one past the end of str (which is the '\\0' character terminating the string), then the string won't be zero-terminated anymore. The most likely scenarios for that are if you append to str and no reallocation takes place or when str is a slice of a larger array, and you alter the character in the larger array which is one character past the end of str . Another case where it could occur would be if you had a mutable character array immediately after str in memory (for example, if they're member variables in a user-defined type with one declared right after the other) and that character array happened to start with '\\0' . Such scenarios will never occur if you immediately use the zero-terminated string after calling toUTFz and the C function using it doesn't keep a reference to it. Also, they are unlikely to occur even if you save the zero-terminated string (the cases above would be among the few examples of where it could happen). However, if you save the zero-terminate string and want to be absolutely certain that the string stays zero-terminated, then simply append a '\\0' to the string and use its ptr property rather than calling toUTFz . $(RED Warning 2:) When passing a character pointer to a C function, and the C function keeps it around for any reason, make sure that you keep a reference to it in your D code. Otherwise, it may go away during a garbage collection cycle and cause a nasty bug when the C code tries to use it."
  },
  "phobos/std/utf/Functions/toUTFzImpl.html": {
    "href": "phobos/std/utf/Functions/toUTFzImpl.html",
    "title": "Overloads for - toUTFzImpl | Marmos Demo",
    "keywords": "Overloads for - toUTFzImpl Module std.utf toUTFzImpl(str) P toUTFzImpl( S str ) toUTFzImpl(str) P toUTFzImpl( S str ) toUTFzImpl(str) P toUTFzImpl( S str )"
  },
  "phobos/std/utf/Functions/validate.html": {
    "href": "phobos/std/utf/Functions/validate.html",
    "title": "Overloads for - validate | Marmos Demo",
    "keywords": "Overloads for - validate Module std.utf validate(str) void validate( S str ) Checks to see if str is well-formed unicode or not. Throws UTFException if str is not well-formed."
  },
  "phobos/std/utf/InputCU/Functions/empty.html": {
    "href": "phobos/std/utf/InputCU/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.utf Parent InputCU empty() bool empty( )"
  },
  "phobos/std/utf/InputCU/Functions/front.html": {
    "href": "phobos/std/utf/InputCU/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.utf Parent InputCU front() C front( )"
  },
  "phobos/std/utf/InputCU/Functions/popFront.html": {
    "href": "phobos/std/utf/InputCU/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.utf Parent InputCU popFront() void popFront( )"
  },
  "phobos/std/utf/Overview.html": {
    "href": "phobos/std/utf/Overview.html",
    "title": "Module - std.utf | Marmos Demo",
    "keywords": "Module - std.utf About Encode and decode UTF-8, UTF-16 and UTF-32 strings. UTF character support is restricted to $(D '\\u0000' <= character <= '\\U0010FFFF'). $(SCRIPT inhibitQuickIndex = 1;) $(DIVC quickindex, $(BOOKTABLE, $(TR $(TH Category) $(TH Functions)) $(TR $(TD Decode) $(TD $(LREF decode) $(LREF decodeFront) )) $(TR $(TD Lazy decode) $(TD $(LREF byCodeUnit) $(LREF byChar) $(LREF byWchar) $(LREF byDchar) $(LREF byUTF) )) $(TR $(TD Encode) $(TD $(LREF encode) $(LREF toUTF8) $(LREF toUTF16) $(LREF toUTF32) $(LREF toUTFz) $(LREF toUTF16z) )) $(TR $(TD Length) $(TD $(LREF codeLength) $(LREF count) $(LREF stride) $(LREF strideBack) )) $(TR $(TD Index) $(TD $(LREF toUCSindex) $(LREF toUTFindex) )) $(TR $(TD Validation) $(TD $(LREF isValidDchar) $(LREF isValidCodepoint) $(LREF validate) )) $(TR $(TD Miscellaneous) $(TD $(LREF replacementDchar) $(LREF UseReplacementDchar) $(LREF UTFException) )) )) See_Also: $(LINK2 http://en.wikipedia.org/wiki/Unicode, Wikipedia) $(LINK http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8) $(LINK http://anubis.dkuug.dk/JTC1/SC2/WG2/docs/n1335) Copyright: Copyright The D Language Foundation 2000 - 2012. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP digitalmars.com, Walter Bright) and $(HTTP jmdavisprog.com, Jonathan M Davis) Source: $(PHOBOSSRC std/utf.d) Aliases Name Description byChar Iterate an $(REF_ALTTEXT input range, isInputRange, std,range,primitives) of characters by char, wchar, or dchar. These aliases simply forward to $(LREF byUTF) with the corresponding C argument. byDchar Ditto byWchar Ditto UseReplacementDchar Whether or not to replace invalid UTF with $(LREF replacementDchar) Classes Name Description RefBidirCU RefRandomCU UTFException Exception thrown on errors in std.utf functions. Structs Name Description BidirCU InputCU RandomCU Functions Name Description byCodeUnit Iterate a range of char, wchar, or dchars by code unit. canSearchInCodeUnits codeLength Returns the number of code units that are required to encode the code point c when C is the character type used to encode it. count Returns the total number of code points encoded in str . decode Decodes and returns the code point starting at str[index] . index is advanced to one past the decoded code point. If the code point is not well-formed, then a UTFException is thrown and index remains unchanged. decodeBack decodeBack is a variant of $(LREF decode) which specifically decodes the last code point. Unlike $(LREF decode), decodeBack accepts any bidirectional range of code units (rather than just a string or random access range). It also takes the range by ref and pops off the elements as it decodes them. If numCodeUnits is passed in, it gets set to the number of code units which were in the code point which was decoded. decodeFront decodeFront is a variant of $(LREF decode) which specifically decodes the first code point. Unlike $(LREF decode), decodeFront accepts any $(REF_ALTTEXT input range, isInputRange, std,range,primitives) of code units (rather than just a string or random access range). It also takes the range by ref and pops off the elements as it decodes them. If numCodeUnits is passed in, it gets set to the number of code units which were in the code point which was decoded. decodeImpl encode Encodes c into the static array, buf , and returns the actual length of the encoded character (a number between 1 and 4 for char[4] buffers and a number between 1 and 2 for wchar[2] buffers). invalidUTFstrings isValidCodepoint Checks if a single character forms a valid code point. isValidDchar Check whether the given Unicode code point is valid. stride Calculate the length of the UTF sequence starting at index in str . strideBack Calculate the length of the UTF sequence ending one code unit before index in str . strideImpl testAllDecode testBadDecode testBadDecodeBack testDecode testDecodeBack testDecodeFront toUCSindex Given index into str and assuming that index is at the start of a UTF sequence, toUCSindex determines the number of UCS characters up to index . So, index is the index of a code unit at the beginning of a code point, and the return value is how many code points into the string that that code point is. toUTF16 Encodes the elements of s to UTF-16 and returns a newly GC allocated wstring of the elements. toUTF16z toUTF16z is a convenience function for toUTFz!(const(wchar)*) . toUTF32 Encodes the elements of s to UTF-32 and returns a newly GC allocated dstring of the elements. toUTF8 Encodes the elements of s to UTF-8 and returns a newly allocated string of the elements. toUTFImpl toUTFindex Given a UCS index n into str , returns the UTF index. So, n is how many code points into the string the code point is, and the array index of the code unit is returned. toUTFz Returns a C-style zero-terminated string equivalent to str . str must not contain embedded '\\0' 's as any C function will treat the first '\\0' that it sees as the end of the string. If str.empty is true , then a string containing only '\\0' is returned. toUTFzImpl validate Checks to see if str is well-formed unicode or not. Variables Name Description impureVariable replacementDchar Inserted in place of invalid UTF sequences."
  },
  "phobos/std/utf/RandomCU/Functions/back.html": {
    "href": "phobos/std/utf/RandomCU/Functions/back.html",
    "title": "Overloads for - back | Marmos Demo",
    "keywords": "Overloads for - back Module std.utf Parent RandomCU back() C back( )"
  },
  "phobos/std/utf/RandomCU/Functions/empty.html": {
    "href": "phobos/std/utf/RandomCU/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.utf Parent RandomCU empty() bool empty( )"
  },
  "phobos/std/utf/RandomCU/Functions/front.html": {
    "href": "phobos/std/utf/RandomCU/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.utf Parent RandomCU front() C front( )"
  },
  "phobos/std/utf/RandomCU/Functions/length.html": {
    "href": "phobos/std/utf/RandomCU/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.utf Parent RandomCU length() size_t length( )"
  },
  "phobos/std/utf/RandomCU/Functions/opIndex.html": {
    "href": "phobos/std/utf/RandomCU/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.utf Parent RandomCU opIndex(i) C opIndex( size_t i )"
  },
  "phobos/std/utf/RandomCU/Functions/opSlice.html": {
    "href": "phobos/std/utf/RandomCU/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.utf Parent RandomCU opSlice(i, j) <bug: unknown> opSlice( size_t i, size_t j ) auto"
  },
  "phobos/std/utf/RandomCU/Functions/popBack.html": {
    "href": "phobos/std/utf/RandomCU/Functions/popBack.html",
    "title": "Overloads for - popBack | Marmos Demo",
    "keywords": "Overloads for - popBack Module std.utf Parent RandomCU popBack() void popBack( )"
  },
  "phobos/std/utf/RandomCU/Functions/popFront.html": {
    "href": "phobos/std/utf/RandomCU/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.utf Parent RandomCU popFront() void popFront( )"
  },
  "phobos/std/utf/RandomCU/Functions/save.html": {
    "href": "phobos/std/utf/RandomCU/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.utf Parent RandomCU save() <bug: unknown> save( ) auto"
  },
  "phobos/std/utf/RefBidirCU/Functions/back.html": {
    "href": "phobos/std/utf/RefBidirCU/Functions/back.html",
    "title": "Overloads for - back | Marmos Demo",
    "keywords": "Overloads for - back Module std.utf Parent RefBidirCU back() C back( )"
  },
  "phobos/std/utf/RefBidirCU/Functions/empty.html": {
    "href": "phobos/std/utf/RefBidirCU/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.utf Parent RefBidirCU empty() bool empty( )"
  },
  "phobos/std/utf/RefBidirCU/Functions/front.html": {
    "href": "phobos/std/utf/RefBidirCU/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.utf Parent RefBidirCU front() C front( )"
  },
  "phobos/std/utf/RefBidirCU/Functions/length.html": {
    "href": "phobos/std/utf/RefBidirCU/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.utf Parent RefBidirCU length() size_t length( )"
  },
  "phobos/std/utf/RefBidirCU/Functions/popBack.html": {
    "href": "phobos/std/utf/RefBidirCU/Functions/popBack.html",
    "title": "Overloads for - popBack | Marmos Demo",
    "keywords": "Overloads for - popBack Module std.utf Parent RefBidirCU popBack() void popBack( )"
  },
  "phobos/std/utf/RefBidirCU/Functions/popFront.html": {
    "href": "phobos/std/utf/RefBidirCU/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.utf Parent RefBidirCU popFront() void popFront( )"
  },
  "phobos/std/utf/RefBidirCU/Functions/save.html": {
    "href": "phobos/std/utf/RefBidirCU/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.utf Parent RefBidirCU save() <bug: unknown> save( ) auto"
  },
  "phobos/std/utf/RefRandomCU/Functions/back.html": {
    "href": "phobos/std/utf/RefRandomCU/Functions/back.html",
    "title": "Overloads for - back | Marmos Demo",
    "keywords": "Overloads for - back Module std.utf Parent RefRandomCU back() C back( )"
  },
  "phobos/std/utf/RefRandomCU/Functions/empty.html": {
    "href": "phobos/std/utf/RefRandomCU/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.utf Parent RefRandomCU empty() bool empty( )"
  },
  "phobos/std/utf/RefRandomCU/Functions/front.html": {
    "href": "phobos/std/utf/RefRandomCU/Functions/front.html",
    "title": "Overloads for - front | Marmos Demo",
    "keywords": "Overloads for - front Module std.utf Parent RefRandomCU front() C front( )"
  },
  "phobos/std/utf/RefRandomCU/Functions/length.html": {
    "href": "phobos/std/utf/RefRandomCU/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.utf Parent RefRandomCU length() size_t length( )"
  },
  "phobos/std/utf/RefRandomCU/Functions/opIndex.html": {
    "href": "phobos/std/utf/RefRandomCU/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.utf Parent RefRandomCU opIndex(i) C opIndex( size_t i )"
  },
  "phobos/std/utf/RefRandomCU/Functions/opSlice.html": {
    "href": "phobos/std/utf/RefRandomCU/Functions/opSlice.html",
    "title": "Overloads for - opSlice | Marmos Demo",
    "keywords": "Overloads for - opSlice Module std.utf Parent RefRandomCU opSlice(i, j) <bug: unknown> opSlice( size_t i, size_t j ) auto"
  },
  "phobos/std/utf/RefRandomCU/Functions/popBack.html": {
    "href": "phobos/std/utf/RefRandomCU/Functions/popBack.html",
    "title": "Overloads for - popBack | Marmos Demo",
    "keywords": "Overloads for - popBack Module std.utf Parent RefRandomCU popBack() void popBack( )"
  },
  "phobos/std/utf/RefRandomCU/Functions/popFront.html": {
    "href": "phobos/std/utf/RefRandomCU/Functions/popFront.html",
    "title": "Overloads for - popFront | Marmos Demo",
    "keywords": "Overloads for - popFront Module std.utf Parent RefRandomCU popFront() void popFront( )"
  },
  "phobos/std/utf/RefRandomCU/Functions/save.html": {
    "href": "phobos/std/utf/RefRandomCU/Functions/save.html",
    "title": "Overloads for - save | Marmos Demo",
    "keywords": "Overloads for - save Module std.utf Parent RefRandomCU save() <bug: unknown> save( ) auto"
  },
  "phobos/std/utf/Structs/BidirCU.html": {
    "href": "phobos/std/utf/Structs/BidirCU.html",
    "title": "Struct - BidirCU | Marmos Demo",
    "keywords": "Struct - BidirCU Module std.utf public struct BidirCU { // C back( ) ; // bool empty( ) ; // C front( ) ; // size_t length( ) ; // void popBack( ) ; // void popFront( ) ; // <bug: unknown> save( ) auto; } Functions Name Description back empty front length popBack popFront save"
  },
  "phobos/std/utf/Structs/InputCU.html": {
    "href": "phobos/std/utf/Structs/InputCU.html",
    "title": "Struct - InputCU | Marmos Demo",
    "keywords": "Struct - InputCU Module std.utf public struct InputCU { // bool empty( ) ; // C front( ) ; // void popFront( ) ; } Functions Name Description empty front popFront"
  },
  "phobos/std/utf/Structs/RandomCU.html": {
    "href": "phobos/std/utf/Structs/RandomCU.html",
    "title": "Struct - RandomCU | Marmos Demo",
    "keywords": "Struct - RandomCU Module std.utf public struct RandomCU { // C back( ) ; // bool empty( ) ; // C front( ) ; // size_t length( ) ; // C opIndex( size_t i ) ; // <bug: unknown> opSlice( size_t i, size_t j ) auto; // void popBack( ) ; // void popFront( ) ; // <bug: unknown> save( ) auto; } Functions Name Description back empty front length opIndex opSlice popBack popFront save"
  },
  "phobos/std/utf/UTFException/Functions/setSequence.html": {
    "href": "phobos/std/utf/UTFException/Functions/setSequence.html",
    "title": "Overloads for - setSequence | Marmos Demo",
    "keywords": "Overloads for - setSequence Module std.utf Parent UTFException setSequence(data) UTFException setSequence( <bug: unknown> data )"
  },
  "phobos/std/utf/UTFException/Functions/toString.html": {
    "href": "phobos/std/utf/UTFException/Functions/toString.html",
    "title": "Overloads for - toString | Marmos Demo",
    "keywords": "Overloads for - toString Module std.utf Parent UTFException toString() string toString( ) override Returns A string detailing the invalid UTF sequence."
  },
  "phobos/std/uuid/Classes/UUIDParsingException.html": {
    "href": "phobos/std/uuid/Classes/UUIDParsingException.html",
    "title": "Class - UUIDParsingException | Marmos Demo",
    "keywords": "Class - UUIDParsingException Module std.uuid public class UUIDParsingException { // The original input string which should have been parsed. string input; // The position in the input string where the error occurred. size_t position; // ditto Reason reason; } About This exception is thrown if an error occurs when parsing a UUID from a string. Variables Name Description input The original input string which should have been parsed. position The position in the input string where the error occurred. reason ditto"
  },
  "phobos/std/uuid/Functions/md5UUID.html": {
    "href": "phobos/std/uuid/Functions/md5UUID.html",
    "title": "Overloads for - md5UUID | Marmos Demo",
    "keywords": "Overloads for - md5UUID Module std.uuid md5UUID(name, namespace) UUID md5UUID( <bug: unknown> name, UUID namespace ) This function generates a name based (Version 3) UUID from a namespace UUID and a name. If no namespace UUID was passed, the empty UUID UUID.init is used. Note The default namespaces ($(LREF dnsNamespace), ...) defined by this module should be used when appropriate. RFC 4122 recommends to use Version 5 UUIDs (SHA-1) instead of Version 3 UUIDs (MD5) for new applications. CTFE CTFE is not supported. Note RFC 4122 isn't very clear on how UUIDs should be generated from names. It is possible that different implementations return different UUIDs for the same input, so be warned. The implementation for UTF-8 strings and byte arrays used by std.uuid is compatible with Boost's implementation. std.uuid guarantees that the same input to this function will generate the same output at any time, on any system (this especially means endianness doesn't matter). Note This function does not provide overloads for wstring and dstring, as there's no clear answer on how that should be implemented. It could be argued, that string, wstring and dstring input should have the same output, but that wouldn't be compatible with Boost, which generates different output for strings and wstrings. It's always possible to pass wstrings and dstrings by using the ubyte[] function overload (but be aware of endianness issues!). md5UUID(data, namespace) UUID md5UUID( <bug: unknown> data, UUID namespace ) ditto"
  },
  "phobos/std/uuid/Functions/parseUUID.html": {
    "href": "phobos/std/uuid/Functions/parseUUID.html",
    "title": "Overloads for - parseUUID | Marmos Demo",
    "keywords": "Overloads for - parseUUID Module std.uuid parseUUID(uuidString) UUID parseUUID( T uuidString ) This is a less strict parser compared to the parser used in the UUID constructor. It enforces the following rules: $(UL $(LI hex numbers are always two hexdigits([0-9a-fA-F])) $(LI there must be exactly 16 such pairs in the input, not less, not more) $(LI there can be exactly one dash between two hex-pairs, but not more) $(LI there can be multiple characters enclosing the 16 hex pairs, as long as these characters do not contain [0-9a-fA-F]) ) Note Like most parsers, it consumes its argument. This means ------------------------- string s = \"8AB3060E-2CBA-4F23-b74c-B52Db3BDFB46\"; parseUUID(s); assert(s == \"\"); ------------------------- Throws $(LREF UUIDParsingException) if the input is invalid CTFE This function is supported in CTFE code. Note that error messages caused by a malformed UUID parsed at compile time can be cryptic, but errors are detected and reported at compile time. parseUUID(uuidRange) UUID parseUUID( Range uuidRange ) ditto"
  },
  "phobos/std/uuid/Functions/randomUUID.html": {
    "href": "phobos/std/uuid/Functions/randomUUID.html",
    "title": "Overloads for - randomUUID | Marmos Demo",
    "keywords": "Overloads for - randomUUID Module std.uuid randomUUID() UUID randomUUID( ) This function generates a random number based UUID from a random number generator. This function is not supported at compile time. Params randomGen <parameter not found> uniform RNG See_Also: $(REF isUniformRNG, std,random) randomUUID(randomGen) UUID randomUUID( RNG randomGen ) ditto"
  },
  "phobos/std/uuid/Functions/sha1UUID.html": {
    "href": "phobos/std/uuid/Functions/sha1UUID.html",
    "title": "Overloads for - sha1UUID | Marmos Demo",
    "keywords": "Overloads for - sha1UUID Module std.uuid sha1UUID(name, namespace) UUID sha1UUID( <bug: unknown> name, UUID namespace ) This function generates a name based (Version 5) UUID from a namespace UUID and a name. If no namespace UUID was passed, the empty UUID UUID.init is used. Note The default namespaces ($(LREF dnsNamespace), ...) defined by this module should be used when appropriate. CTFE CTFE is not supported. Note RFC 4122 isn't very clear on how UUIDs should be generated from names. It is possible that different implementations return different UUIDs for the same input, so be warned. The implementation for UTF-8 strings and byte arrays used by std.uuid is compatible with Boost's implementation. std.uuid guarantees that the same input to this function will generate the same output at any time, on any system (this especially means endianness doesn't matter). Note This function does not provide overloads for wstring and dstring, as there's no clear answer on how that should be implemented. It could be argued, that string, wstring and dstring input should have the same output, but that wouldn't be compatible with Boost, which generates different output for strings and wstrings. It's always possible to pass wstrings and dstrings by using the ubyte[] function overload (but be aware of endianness issues!). sha1UUID(data, namespace) UUID sha1UUID( <bug: unknown> data, UUID namespace ) ditto"
  },
  "phobos/std/uuid/Overview.html": {
    "href": "phobos/std/uuid/Overview.html",
    "title": "Module - std.uuid | Marmos Demo",
    "keywords": "Module - std.uuid About A $(LINK2 http://en.wikipedia.org/wiki/Universally_unique_identifier, UUID), or $(LINK2 http://en.wikipedia.org/wiki/Universally_unique_identifier, Universally unique identifier), is intended to uniquely identify information in a distributed environment without significant central coordination. It can be used to tag objects with very short lifetimes, or to reliably identify very persistent objects across a network. $(SCRIPT inhibitQuickIndex = 1;) $(DIVC quickindex, $(BOOKTABLE , $(TR $(TH Category) $(TH Functions) ) $(TR $(TDNW Parsing UUIDs) $(TD $(MYREF parseUUID) $(MYREF UUID) $(MYREF UUIDParsingException) $(MYREF uuidRegex) ) ) $(TR $(TDNW Generating UUIDs) $(TD $(MYREF sha1UUID) $(MYREF randomUUID) $(MYREF md5UUID) ) ) $(TR $(TDNW Using UUIDs) $(TD $(MYREF2 UUID.uuidVersion, uuidVersion) $(MYREF2 UUID.variant, variant) $(MYREF2 UUID.toString, toString) $(MYREF2 UUID.data, data) $(MYREF2 UUID.swap, swap) $(MYREF2 UUID.opEquals, opEquals) $(MYREF2 UUID.opCmp, opCmp) $(MYREF2 UUID.toHash, toHash) ) ) $(TR $(TDNW UUID namespaces) $(TD $(MYREF dnsNamespace) $(MYREF urlNamespace) $(MYREF oidNamespace) $(MYREF x500Namespace) ) ) ) ) UUIDs have many applications. Some examples follow: Databases may use UUIDs to identify rows or records in order to ensure that they are unique across different databases, or for publication/subscription services. Network messages may be identified with a UUID to ensure that different parts of a message are put back together again. Distributed computing may use UUIDs to identify a remote procedure call. Transactions and classes involved in serialization may be identified by UUIDs. Microsoft's component object model (COM) uses UUIDs to distinguish different software component interfaces. UUIDs are inserted into documents from Microsoft Office programs. UUIDs identify audio or video streams in the Advanced Systems Format (ASF). UUIDs are also a basis for OIDs (object identifiers), and URNs (uniform resource name). An attractive feature of UUIDs when compared to alternatives is their relative small size, of 128 bits, or 16 bytes. Another is that the creation of UUIDs does not require a centralized authority. When UUIDs are generated by one of the defined mechanisms, they are either guaranteed to be unique, different from all other generated UUIDs (that is, it has never been generated before and it will never be generated again), or it is extremely likely to be unique (depending on the mechanism). For efficiency, UUID is implemented as a struct. UUIDs are therefore empty if not explicitly initialized. An UUID is empty if $(MYREF3 UUID.empty, empty) is true. Empty UUIDs are equal to UUID.init , which is a UUID with all 16 bytes set to 0. Use UUID's constructors or the UUID generator functions to get an initialized UUID. This is a port of $(LINK2 http://www.boost.org/doc/libs/1_42_0/libs/uuid/uuid.html, boost.uuid) from the Boost project with some minor additions and API changes for a more D-like API. Standards $(LINK2 http://www.ietf.org/rfc/rfc4122.txt, RFC 4122) See_Also $(LINK http://en.wikipedia.org/wiki/Universally_unique_identifier) Copyright: Copyright Johannes Pfau 2011 - . License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: Johannes Pfau Source: $(PHOBOSSRC std/uuid.d) Macros MYREF2 $(TT $1) MYREF3 $1 Classes Name Description UUIDParsingException This exception is thrown if an error occurs when parsing a UUID from a string. Structs Name Description UUID Functions Name Description md5UUID This function generates a name based (Version 3) UUID from a namespace UUID and a name. If no namespace UUID was passed, the empty UUID UUID.init is used. parseUUID This is a less strict parser compared to the parser used in the UUID constructor. It enforces the following rules: randomUUID This function generates a random number based UUID from a random number generator. sha1UUID This function generates a name based (Version 5) UUID from a namespace UUID and a name. If no namespace UUID was passed, the empty UUID UUID.init is used. Variables Name Description dnsNamespace Default namespace from RFC 4122 oidNamespace Default namespace from RFC 4122 urlNamespace Default namespace from RFC 4122 uuidRegex Regex string to extract UUIDs from text. x500Namespace Default namespace from RFC 4122"
  },
  "phobos/std/uuid/Structs/UUID.html": {
    "href": "phobos/std/uuid/Structs/UUID.html",
    "title": "Struct - UUID | Marmos Demo",
    "keywords": "Struct - UUID Module std.uuid public struct UUID { // alias byteSeq = <todo: marmos support pending>; // alias skipSeq = <todo: marmos support pending>; // Returns true if and only if the UUID is equal to {00000000-0000-0000-0000-000000000000} bool empty( ) ; // ditto UUID opAssign( UUID s ) ; // ditto UUID opAssign( UUID s ) ; // ditto int opCmp( UUID s ) ; // ditto int opCmp( UUID s ) ; // All of the standard numeric operators are defined for the UUID struct. bool opEquals( UUID s ) ; // ditto bool opEquals( UUID s ) ; // Swap the data of this UUID with the data of rhs. void swap( UUID rhs ) ; // ditto size_t toHash( ) ; // Return the UUID as a string in the canonical form. string toString( ) ; // RFC 4122 defines different UUID versions. The version shows how a UUID was generated, e.g. a version 4 UUID was generated from a random number, a version 3 UUID from an MD5 hash of a name. Returns the version used by this UUID. Version uuidVersion( ) ; // RFC 4122 defines different internal data layouts for UUIDs. Returns the format used by this UUID. Variant variant( ) ; // It is sometimes useful to get or set the 16 bytes of a UUID directly. <bug: unknown> data; // <bug: unknown> uints; // <bug: unknown> ulongs; } Aliases Name Description byteSeq skipSeq Functions Name Description empty Returns true if and only if the UUID is equal to {00000000-0000-0000-0000-000000000000} opAssign ditto opCmp ditto opEquals All of the standard numeric operators are defined for the UUID struct. swap Swap the data of this UUID with the data of rhs. toHash ditto toString Return the UUID as a string in the canonical form. uuidVersion RFC 4122 defines different UUID versions. The version shows how a UUID was generated, e.g. a version 4 UUID was generated from a random number, a version 3 UUID from an MD5 hash of a name. Returns the version used by this UUID. variant RFC 4122 defines different internal data layouts for UUIDs. Returns the format used by this UUID. Variables Name Description data It is sometimes useful to get or set the 16 bytes of a UUID directly. uints ulongs"
  },
  "phobos/std/uuid/UUID/Functions/empty.html": {
    "href": "phobos/std/uuid/UUID/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.uuid Parent UUID empty() bool empty( ) Returns true if and only if the UUID is equal to {00000000-0000-0000-0000-000000000000}"
  },
  "phobos/std/uuid/UUID/Functions/opAssign.html": {
    "href": "phobos/std/uuid/UUID/Functions/opAssign.html",
    "title": "Overloads for - opAssign | Marmos Demo",
    "keywords": "Overloads for - opAssign Module std.uuid Parent UUID opAssign(s) UUID opAssign( UUID s ) ditto opAssign(s) UUID opAssign( UUID s ) ditto"
  },
  "phobos/std/uuid/UUID/Functions/opCmp.html": {
    "href": "phobos/std/uuid/UUID/Functions/opCmp.html",
    "title": "Overloads for - opCmp | Marmos Demo",
    "keywords": "Overloads for - opCmp Module std.uuid Parent UUID opCmp(s) int opCmp( UUID s ) ditto opCmp(s) int opCmp( UUID s ) ditto"
  },
  "phobos/std/uuid/UUID/Functions/opEquals.html": {
    "href": "phobos/std/uuid/UUID/Functions/opEquals.html",
    "title": "Overloads for - opEquals | Marmos Demo",
    "keywords": "Overloads for - opEquals Module std.uuid Parent UUID opEquals(s) bool opEquals( UUID s ) All of the standard numeric operators are defined for the UUID struct. opEquals(s) bool opEquals( UUID s ) ditto"
  },
  "phobos/std/uuid/UUID/Functions/swap.html": {
    "href": "phobos/std/uuid/UUID/Functions/swap.html",
    "title": "Overloads for - swap | Marmos Demo",
    "keywords": "Overloads for - swap Module std.uuid Parent UUID swap(rhs) void swap( UUID rhs ) Swap the data of this UUID with the data of rhs."
  },
  "phobos/std/uuid/UUID/Functions/toHash.html": {
    "href": "phobos/std/uuid/UUID/Functions/toHash.html",
    "title": "Overloads for - toHash | Marmos Demo",
    "keywords": "Overloads for - toHash Module std.uuid Parent UUID toHash() size_t toHash( ) ditto"
  },
  "phobos/std/uuid/UUID/Functions/toString.html": {
    "href": "phobos/std/uuid/UUID/Functions/toString.html",
    "title": "Overloads for - toString | Marmos Demo",
    "keywords": "Overloads for - toString Module std.uuid Parent UUID toString() string toString( ) Return the UUID as a string in the canonical form."
  },
  "phobos/std/uuid/UUID/Functions/uuidVersion.html": {
    "href": "phobos/std/uuid/UUID/Functions/uuidVersion.html",
    "title": "Overloads for - uuidVersion | Marmos Demo",
    "keywords": "Overloads for - uuidVersion Module std.uuid Parent UUID uuidVersion() Version uuidVersion( ) RFC 4122 defines different UUID versions. The version shows how a UUID was generated, e.g. a version 4 UUID was generated from a random number, a version 3 UUID from an MD5 hash of a name. Returns the version used by this UUID. See_Also $(MYREF3 UUID.Version, Version)"
  },
  "phobos/std/uuid/UUID/Functions/variant.html": {
    "href": "phobos/std/uuid/UUID/Functions/variant.html",
    "title": "Overloads for - variant | Marmos Demo",
    "keywords": "Overloads for - variant Module std.uuid Parent UUID variant() Variant variant( ) RFC 4122 defines different internal data layouts for UUIDs. Returns the format used by this UUID. Note: Do not confuse this with $(REF Variant, std, variant). The type of this property is $(MYREF3 std.uuid.UUID.Variant, Variant). See_Also $(MYREF3 UUID.Variant, Variant)"
  },
  "phobos/std/variant/Classes/VariantException.html": {
    "href": "phobos/std/variant/Classes/VariantException.html",
    "title": "Class - VariantException | Marmos Demo",
    "keywords": "Class - VariantException Module std.variant public class VariantException { // The source type in the conversion or comparison TypeInfo source; // The target type in the conversion or comparison TypeInfo target; } About Thrown in three cases $(OL $(LI An uninitialized Variant is used in any way except assignment and hasValue ;) $(LI A get or coerce is attempted with an incompatible target type;) $(LI A comparison between Variant objects of incompatible types is attempted.)) Variables Name Description source The source type in the conversion or comparison target The target type in the conversion or comparison"
  },
  "phobos/std/variant/Functions/tryVisit.html": {
    "href": "phobos/std/variant/Functions/tryVisit.html",
    "title": "Overloads for - tryVisit | Marmos Demo",
    "keywords": "Overloads for - tryVisit Module std.variant tryVisit(variant) <bug: unknown> tryVisit( VariantType variant ) auto Behaves as $(LREF visit) but doesn't enforce that all types are handled by the visiting functions. If a parameter-less function is specified it is called when either variant doesn't hold a value or holds a type which isn't handled by the visiting functions. Returns: The return type of tryVisit is deduced from the visiting functions and must be the same across all overloads. Throws: $(LREF VariantException) if variant doesn't hold a value or variant holds a value which isn't handled by the visiting functions, when no parameter-less fallback function is specified."
  },
  "phobos/std/variant/Functions/variantArray.html": {
    "href": "phobos/std/variant/Functions/variantArray.html",
    "title": "Overloads for - variantArray | Marmos Demo",
    "keywords": "Overloads for - variantArray Module std.variant variantArray(args) <bug: unknown> variantArray( T args ) Returns an array of variants constructed from args . This is by design. During construction the Variant needs static type information about the type being held, so as to store a pointer to function for fast retrieval."
  },
  "phobos/std/variant/Functions/visit.html": {
    "href": "phobos/std/variant/Functions/visit.html",
    "title": "Overloads for - visit | Marmos Demo",
    "keywords": "Overloads for - visit Module std.variant visit(variant) <bug: unknown> visit( VariantType variant ) auto Applies a delegate or function to the given $(LREF Algebraic) depending on the held type, ensuring that all types are handled by the visiting functions. The delegate or function having the currently held value as parameter is called with variant 's current value. Visiting handlers are passed in the template parameter list. It is statically ensured that all held types of variant are handled across all handlers. visit allows delegates and static functions to be passed as parameters. If a function with an untyped parameter is specified, this function is called when the variant contains a type that does not match any other function. This can be used to apply the same function across multiple possible types. Exactly one generic function is allowed. If a function without parameters is specified, this function is called when variant doesn't hold a value. Exactly one parameter-less function is allowed. Duplicate overloads matching the same type in one of the visitors are disallowed. Returns: The return type of visit is deduced from the visiting functions and must be the same across all overloads. Throws: $(LREF VariantException) if variant doesn't hold a value and no parameter-less fallback function is specified."
  },
  "phobos/std/variant/Functions/visitImpl.html": {
    "href": "phobos/std/variant/Functions/visitImpl.html",
    "title": "Overloads for - visitImpl | Marmos Demo",
    "keywords": "Overloads for - visitImpl Module std.variant visitImpl(variant) <bug: unknown> visitImpl( VariantType variant ) auto"
  },
  "phobos/std/variant/Overview.html": {
    "href": "phobos/std/variant/Overview.html",
    "title": "Module - std.variant | Marmos Demo",
    "keywords": "Module - std.variant About This module implements a $(HTTP erdani.org/publications/cuj-04-2002.php.html,discriminated union) type (a.k.a. $(HTTP en.wikipedia.org/wiki/Tagged_union,tagged union), $(HTTP en.wikipedia.org/wiki/Algebraic_data_type,algebraic type)). Such types are useful for type-uniform binary interfaces, interfacing with scripting languages, and comfortable exploratory programming. A $(LREF Variant) object can hold a value of any type, with very few restrictions (such as shared types and noncopyable types). Setting the value is as immediate as assigning to the Variant object. To read back the value of the appropriate type T , use the $(LREF get) method. To query whether a Variant currently holds a value of type T , use $(LREF peek). To fetch the exact type currently held, call $(LREF type), which returns the TypeInfo of the current value. In addition to $(LREF Variant), this module also defines the $(LREF Algebraic) type constructor. Unlike Variant , Algebraic only allows a finite set of types, which are specified in the instantiation (e.g. $(D Algebraic!(int, string)) may only hold an int or a string ). $(RED Warning: $(LREF Algebraic) is outdated and not recommended for use in new code. Instead, use $(REF SumType, std,sumtype).) Credits: Reviewed by Brad Roberts. Daniel Keep provided a detailed code review prompting the following improvements: (1) better support for arrays; (2) support for associative arrays; (3) friendlier behavior towards the garbage collector. Copyright: Copyright Andrei Alexandrescu 2007 - 2015. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP erdani.org, Andrei Alexandrescu) Source: $(PHOBOSSRC std/variant.d) Aliases Name Description Algebraic Algebraic data type restricted to a closed set of possible types. It's an alias for $(LREF VariantN) with an appropriately-constructed maximum size. Algebraic is useful when it is desirable to restrict what a discriminated type could hold to the end of defining simpler and more efficient manipulation. This2Variant Variant Alias for $(LREF VariantN) instantiated with the largest size of creal , char[] , and void delegate() . This ensures that Variant is large enough to hold all of D's predefined types unboxed, including all numeric types, pointers, delegates, and class references. You may want to use VariantN directly with a different maximum size either for storing larger types unboxed, or for saving memory. Classes Name Description VariantException Structs Name Description FakeComplexReal This VariantN Back-end type seldom used directly by user code. Two commonly-used types using VariantN are: Functions Name Description tryVisit Behaves as $(LREF visit) but doesn't enforce that all types are handled by the visiting functions. variantArray Returns an array of variants constructed from args . visit Applies a delegate or function to the given $(LREF Algebraic) depending on the held type, ensuring that all types are handled by the visiting functions. visitImpl Variables Name Description maxSize Gives the sizeof the largest type given."
  },
  "phobos/std/variant/Structs/FakeComplexReal.html": {
    "href": "phobos/std/variant/Structs/FakeComplexReal.html",
    "title": "Struct - FakeComplexReal | Marmos Demo",
    "keywords": "Struct - FakeComplexReal Module std.variant public struct FakeComplexReal { // real im; // real re; } Variables Name Description im re"
  },
  "phobos/std/variant/Structs/This.html": {
    "href": "phobos/std/variant/Structs/This.html",
    "title": "Struct - This | Marmos Demo",
    "keywords": "Struct - This Module std.variant public struct This { }"
  },
  "phobos/std/variant/Structs/VariantN.html": {
    "href": "phobos/std/variant/Structs/VariantN.html",
    "title": "Struct - VariantN | Marmos Demo",
    "keywords": "Struct - VariantN Module std.variant public struct VariantN { // The list of allowed types. If empty, any type is allowed. alias AllowedTypes = <todo: marmos support pending>; // Returns true if and only if the `VariantN` object holds a valid value (has been initialized with, or assigned from, a valid value). bool hasValue( ) ; // If the `VariantN` contains an (associative) array, returns the length of that array. Otherwise, throws an exception. size_t length( ) ; // int opCmp( VariantN rhs ) ; // Computes the hash of the held value. size_t toHash( ) ; // Formats the stored value as a string. string toString( ) ; // Returns the `typeid` of the currently held value. TypeInfo type( ) ; // <bug: unknown> fptr; // <bug: unknown> p; // __enumMember size; // <bug: unknown> store; } About Back-end type seldom used directly by user code. Two commonly-used types using VariantN are: $(OL $(LI $(LREF Algebraic): A closed discriminated union with a limited type universe (e.g., $(D Algebraic!(int, double, string)) only accepts these three types and rejects anything else).) $(LI $(LREF Variant): An open discriminated union allowing an unbounded set of types. If any of the types in the Variant are larger than the largest built-in type, they will automatically be boxed. This means that even large types will only be the size of a pointer within the Variant , but this also implies some overhead. Variant can accommodate all primitive types and all user-defined types.)) Both Algebraic and Variant share $(D VariantN)'s interface. (See their respective documentations below.) VariantN is a discriminated union type parameterized with the largest size of the types stored (maxDataSize) and with the list of allowed types (AllowedTypes). If the list is empty, then any type up of size up to $(D maxDataSize) (rounded up for alignment) can be stored in a VariantN object without being boxed (types larger than this will be boxed). Aliases Name Description AllowedTypes The list of allowed types. If empty, any type is allowed. Functions Name Description hasValue Returns true if and only if the VariantN object holds a valid value (has been initialized with, or assigned from, a valid value). length If the VariantN contains an (associative) array, returns the length of that array. Otherwise, throws an exception. opCmp toHash Computes the hash of the held value. toString Formats the stored value as a string. type Returns the typeid of the currently held value. Variables Name Description fptr p size store"
  },
  "phobos/std/variant/VariantN/Functions/hasValue.html": {
    "href": "phobos/std/variant/VariantN/Functions/hasValue.html",
    "title": "Overloads for - hasValue | Marmos Demo",
    "keywords": "Overloads for - hasValue Module std.variant Parent VariantN hasValue() bool hasValue( ) Returns true if and only if the VariantN object holds a valid value (has been initialized with, or assigned from, a valid value)."
  },
  "phobos/std/variant/VariantN/Functions/length.html": {
    "href": "phobos/std/variant/VariantN/Functions/length.html",
    "title": "Overloads for - length | Marmos Demo",
    "keywords": "Overloads for - length Module std.variant Parent VariantN length() size_t length( ) If the VariantN contains an (associative) array, returns the length of that array. Otherwise, throws an exception."
  },
  "phobos/std/variant/VariantN/Functions/opCmp.html": {
    "href": "phobos/std/variant/VariantN/Functions/opCmp.html",
    "title": "Overloads for - opCmp | Marmos Demo",
    "keywords": "Overloads for - opCmp Module std.variant Parent VariantN opCmp(rhs) int opCmp( VariantN rhs )"
  },
  "phobos/std/variant/VariantN/Functions/toHash.html": {
    "href": "phobos/std/variant/VariantN/Functions/toHash.html",
    "title": "Overloads for - toHash | Marmos Demo",
    "keywords": "Overloads for - toHash Module std.variant Parent VariantN toHash() size_t toHash( ) Computes the hash of the held value."
  },
  "phobos/std/variant/VariantN/Functions/toString.html": {
    "href": "phobos/std/variant/VariantN/Functions/toString.html",
    "title": "Overloads for - toString | Marmos Demo",
    "keywords": "Overloads for - toString Module std.variant Parent VariantN toString() string toString( ) Formats the stored value as a string."
  },
  "phobos/std/variant/VariantN/Functions/type.html": {
    "href": "phobos/std/variant/VariantN/Functions/type.html",
    "title": "Overloads for - type | Marmos Demo",
    "keywords": "Overloads for - type Module std.variant Parent VariantN type() TypeInfo type( ) Returns the typeid of the currently held value."
  },
  "phobos/std/windows/charset/Functions/fromMBSz.html": {
    "href": "phobos/std/windows/charset/Functions/fromMBSz.html",
    "title": "Overloads for - fromMBSz | Marmos Demo",
    "keywords": "Overloads for - fromMBSz Module std.windows.charset fromMBSz(s, codePage) string fromMBSz( <bug: unknown> s, int codePage ) Converts the null-terminated string s from a Windows 8-bit character set into a UTF-8 char array. Params s <bug: unknown> UTF-8 string to convert. codePage int is the number of the source codepage, or 0 - ANSI, 1 - OEM, 2 - Mac codePage = is the number of the source codepage, or 0 - ANSI, 1 - OEM, 2 - Mac Authors: Stewart Gordon, Walter Bright"
  },
  "phobos/std/windows/charset/Functions/toMBSz.html": {
    "href": "phobos/std/windows/charset/Functions/toMBSz.html",
    "title": "Overloads for - toMBSz | Marmos Demo",
    "keywords": "Overloads for - toMBSz Module std.windows.charset toMBSz(s, codePage) <bug: unknown> toMBSz( <bug: unknown> s, uint codePage ) Converts the UTF-8 string s into a null-terminated string in a Windows 8-bit character set. Params s <bug: unknown> UTF-8 string to convert. codePage uint is the number of the target codepage, or 0 - ANSI, 1 - OEM, 2 - Mac Authors yaneurao, Walter Bright, Stewart Gordon"
  },
  "phobos/std/windows/charset/Overview.html": {
    "href": "phobos/std/windows/charset/Overview.html",
    "title": "Module - std.windows.charset | Marmos Demo",
    "keywords": "Module - std.windows.charset About Support UTF-8 on Windows 95, 98 and ME systems. Copyright: Copyright The D Language Foundation\" 2005 - 2009. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP digitalmars.com, Walter Bright) Functions Name Description fromMBSz Converts the null-terminated string s from a Windows 8-bit character set into a UTF-8 char array. toMBSz Converts the UTF-8 string s into a null-terminated string in a Windows 8-bit character set."
  },
  "phobos/std/windows/registry/Classes/Key.html": {
    "href": "phobos/std/windows/registry/Classes/Key.html",
    "title": "Class - Key | Marmos Demo",
    "keywords": "Class - Key Module std.windows.registry public class Key { // Returns the named sub-key of this key. Key createKey( string name, REGSAM access ) ; // Deletes the named key. void deleteKey( string name, REGSAM access ) ; // Deletes the named value. void deleteValue( string name ) ; // Flushes any changes to the key to disk. void flush( ) ; // Returns the named sub-key of this key. Key getKey( string name, REGSAM access ) ; // Returns the named value. If `name` is the empty string, then the default value is returned. Value getValue( string name ) ; // The number of sub keys. size_t keyCount( ) ; // An enumerable sequence of the names of all the sub-keys of this key. KeyNameSequence keyNames( ) ; // An enumerable sequence of all the sub-keys of this key. KeySequence keys( ) ; // The name of the key string name( ) ; // Sets the named value with the given 32-bit unsigned integer value. void setValue( string name, uint value ) ; // Sets the named value with the given 32-bit unsigned integer value, according to the desired byte-ordering. void setValue( string name, uint value, Endian endian ) ; // Sets the named value with the given 64-bit unsigned integer value. void setValue( string name, ulong value ) ; // Sets the named value with the given string value. void setValue( string name, string value ) ; // Sets the named value with the given string value. void setValue( string name, string value, bool asEXPAND_SZ ) ; // Sets the named value with the given multiple-strings value. void setValue( string name, <bug: unknown> value ) ; // Sets the named value with the given binary value. void setValue( string name, <bug: unknown> value ) ; // The number of values. size_t valueCount( ) ; // An enumerable sequence of the names of all the values of this key. ValueNameSequence valueNames( ) ; // An enumerable sequence of all the values of this key. ValueSequence values( ) ; // HKEY m_hkey; // string m_name; } About This class represents a registry key. Functions Name Description createKey Returns the named sub-key of this key. deleteKey Deletes the named key. deleteValue Deletes the named value. flush Flushes any changes to the key to disk. getKey Returns the named sub-key of this key. getValue Returns the named value. If name is the empty string, then the default value is returned. keyCount The number of sub keys. keyNames An enumerable sequence of the names of all the sub-keys of this key. keys An enumerable sequence of all the sub-keys of this key. name The name of the key setValue Sets the named value with the given 32-bit unsigned integer value. valueCount The number of values. valueNames An enumerable sequence of the names of all the values of this key. values An enumerable sequence of all the values of this key. Variables Name Description m_hkey m_name"
  },
  "phobos/std/windows/registry/Classes/KeyNameSequence.html": {
    "href": "phobos/std/windows/registry/Classes/KeyNameSequence.html",
    "title": "Class - KeyNameSequence | Marmos Demo",
    "keywords": "Class - KeyNameSequence Module std.windows.registry public class KeyNameSequence { // The number of keys. size_t count( ) ; // The name of the key at the given index. string getKeyName( size_t index ) ; // int opApply( <bug: unknown> dg ) ; // The name of the key at the given index. string opIndex( size_t index ) ; // Key m_key; } About An enumerable sequence representing the names of the sub-keys of a registry Key. Example: ---- Key key = ... foreach (string subkeyName; key.keyNames) { // using subkeyName } ---- Functions Name Description count The number of keys. getKeyName The name of the key at the given index. opApply opIndex The name of the key at the given index. Variables Name Description m_key"
  },
  "phobos/std/windows/registry/Classes/KeySequence.html": {
    "href": "phobos/std/windows/registry/Classes/KeySequence.html",
    "title": "Class - KeySequence | Marmos Demo",
    "keywords": "Class - KeySequence Module std.windows.registry public class KeySequence { // The number of keys. size_t count( ) ; // The key at the given index. Key getKey( size_t index ) ; // int opApply( <bug: unknown> dg ) ; // The key at the given index. Key opIndex( size_t index ) ; // Key m_key; } About An enumerable sequence representing the sub-keys of a registry Key. Example: ---- Key key = ... foreach (Key subkey; key.keys) { // using subkey } ---- Functions Name Description count The number of keys. getKey The key at the given index. opApply opIndex The key at the given index. Variables Name Description m_key"
  },
  "phobos/std/windows/registry/Classes/Registry.html": {
    "href": "phobos/std/windows/registry/Classes/Registry.html",
    "title": "Class - Registry | Marmos Demo",
    "keywords": "Class - Registry Module std.windows.registry public class Registry { // Returns the root key for the HKEY_CLASSES_ROOT hive Key classesRoot( ) static; // Returns the root key for the HKEY_CURRENT_CONFIG hive Key currentConfig( ) static; // Returns the root key for the HKEY_CURRENT_USER hive Key currentUser( ) static; // Returns the root key for the HKEY_DYN_DATA hive Key dynData( ) static; // Returns the root key for the HKEY_LOCAL_MACHINE hive Key localMachine( ) static; // Returns the root key for the HKEY_PERFORMANCE_DATA hive Key performanceData( ) static; // Returns the root key for the HKEY_USERS hive Key users( ) static; } About Represents the local system registry. Functions Name Description classesRoot Returns the root key for the HKEY_CLASSES_ROOT hive currentConfig Returns the root key for the HKEY_CURRENT_CONFIG hive currentUser Returns the root key for the HKEY_CURRENT_USER hive dynData Returns the root key for the HKEY_DYN_DATA hive localMachine Returns the root key for the HKEY_LOCAL_MACHINE hive performanceData Returns the root key for the HKEY_PERFORMANCE_DATA hive users Returns the root key for the HKEY_USERS hive"
  },
  "phobos/std/windows/registry/Classes/RegistryException.html": {
    "href": "phobos/std/windows/registry/Classes/RegistryException.html",
    "title": "Class - RegistryException | Marmos Demo",
    "keywords": "Class - RegistryException Module std.windows.registry public class RegistryException { } About Exception class thrown by the std.windows.registry classes."
  },
  "phobos/std/windows/registry/Classes/Value.html": {
    "href": "phobos/std/windows/registry/Classes/Value.html",
    "title": "Class - Value | Marmos Demo",
    "keywords": "Class - Value Module std.windows.registry public class Value { // The name of the value. If the value represents a default value of a key, which has no name, the returned string will be of zero length. string name( ) ; // The type of value. REG_VALUE_TYPE type( ) ; // Obtains the value as a binary blob. <bug: unknown> value_BINARY( ) ; // Obtains the current value as a 32-bit unsigned integer, ordered correctly according to the current architecture. uint value_DWORD( ) ; // Obtains the current value as a string, within which any environment variables have undergone expansion. This function works with the same value-types as `value_SZ` . string value_EXPAND_SZ( ) ; // Obtains the current value as an array of strings. <bug: unknown> value_MULTI_SZ( ) ; // Obtains the value as a 64-bit unsigned integer, ordered correctly according to the current architecture. ulong value_QWORD( ) ; // Obtains the current value of the value as a string. If the value's type is REG_EXPAND_SZ the returned value is <b>not</b> expanded; `value_EXPAND_SZ` should be called string value_SZ( ) ; // Key m_key; // string m_name; // REG_VALUE_TYPE m_type; } About This class represents a value of a registry key. Functions Name Description name The name of the value. If the value represents a default value of a key, which has no name, the returned string will be of zero length. type The type of value. value_BINARY Obtains the value as a binary blob. value_DWORD Obtains the current value as a 32-bit unsigned integer, ordered correctly according to the current architecture. value_EXPAND_SZ Obtains the current value as a string, within which any environment variables have undergone expansion. This function works with the same value-types as value_SZ . value_MULTI_SZ Obtains the current value as an array of strings. value_QWORD Obtains the value as a 64-bit unsigned integer, ordered correctly according to the current architecture. value_SZ Obtains the current value of the value as a string. If the value's type is REG_EXPAND_SZ the returned value is not expanded; value_EXPAND_SZ should be called Variables Name Description m_key m_name m_type"
  },
  "phobos/std/windows/registry/Classes/ValueNameSequence.html": {
    "href": "phobos/std/windows/registry/Classes/ValueNameSequence.html",
    "title": "Class - ValueNameSequence | Marmos Demo",
    "keywords": "Class - ValueNameSequence Module std.windows.registry public class ValueNameSequence { // The number of values. size_t count( ) ; // The name of the value at the given index. string getValueName( size_t index ) ; // int opApply( <bug: unknown> dg ) ; // The name of the value at the given index. string opIndex( size_t index ) ; // Key m_key; } About An enumerable sequence representing the names of the values of a registry Key. Example: ---- Key key = ... foreach (string valueName; key.valueNames) { // using valueName } ---- Functions Name Description count The number of values. getValueName The name of the value at the given index. opApply opIndex The name of the value at the given index. Variables Name Description m_key"
  },
  "phobos/std/windows/registry/Classes/ValueSequence.html": {
    "href": "phobos/std/windows/registry/Classes/ValueSequence.html",
    "title": "Class - ValueSequence | Marmos Demo",
    "keywords": "Class - ValueSequence Module std.windows.registry public class ValueSequence { // The number of values size_t count( ) ; // The value at the given `index` . Value getValue( size_t index ) ; // int opApply( <bug: unknown> dg ) ; // The value at the given `index` . Value opIndex( size_t index ) ; // Key m_key; } About An enumerable sequence representing the values of a registry Key. Example: ---- Key key = ... foreach (Value value; key.values) { // using value } ---- Functions Name Description count The number of values getValue The value at the given index . opApply opIndex The value at the given index . Variables Name Description m_key"
  },
  "phobos/std/windows/registry/Classes/Win32Exception.html": {
    "href": "phobos/std/windows/registry/Classes/Win32Exception.html",
    "title": "Class - Win32Exception | Marmos Demo",
    "keywords": "Class - Win32Exception Module std.windows.registry public class Win32Exception { // int error( ) ; } Functions Name Description error"
  },
  "phobos/std/windows/registry/Functions/compatibleRegsam.html": {
    "href": "phobos/std/windows/registry/Functions/compatibleRegsam.html",
    "title": "Overloads for - compatibleRegsam | Marmos Demo",
    "keywords": "Overloads for - compatibleRegsam Module std.windows.registry compatibleRegsam(samDesired) REGSAM compatibleRegsam( REGSAM samDesired )"
  },
  "phobos/std/windows/registry/Functions/enforceSucc.html": {
    "href": "phobos/std/windows/registry/Functions/enforceSucc.html",
    "title": "Overloads for - enforceSucc | Marmos Demo",
    "keywords": "Overloads for - enforceSucc Module std.windows.registry enforceSucc(res, message, fn, ln) void enforceSucc( LONG res, string message, string fn, size_t ln )"
  },
  "phobos/std/windows/registry/Functions/haveWoW64Job.html": {
    "href": "phobos/std/windows/registry/Functions/haveWoW64Job.html",
    "title": "Overloads for - haveWoW64Job | Marmos Demo",
    "keywords": "Overloads for - haveWoW64Job Module std.windows.registry haveWoW64Job(samDesired) bool haveWoW64Job( REGSAM samDesired ) Returns true, if we are in WoW64 mode and have WoW64 flags"
  },
  "phobos/std/windows/registry/Functions/regCloseKey.html": {
    "href": "phobos/std/windows/registry/Functions/regCloseKey.html",
    "title": "Overloads for - regCloseKey | Marmos Demo",
    "keywords": "Overloads for - regCloseKey Module std.windows.registry regCloseKey(hkey) LONG regCloseKey( HKEY hkey )"
  },
  "phobos/std/windows/registry/Functions/regCreateKey.html": {
    "href": "phobos/std/windows/registry/Functions/regCreateKey.html",
    "title": "Overloads for - regCreateKey | Marmos Demo",
    "keywords": "Overloads for - regCreateKey Module std.windows.registry regCreateKey(hkey, subKey, dwOptions, samDesired, lpsa, disposition) HKEY regCreateKey( HKEY hkey, string subKey, DWORD dwOptions, REGSAM samDesired, LPSECURITY_ATTRIBUTES lpsa, DWORD disposition )"
  },
  "phobos/std/windows/registry/Functions/regDeleteKey.html": {
    "href": "phobos/std/windows/registry/Functions/regDeleteKey.html",
    "title": "Overloads for - regDeleteKey | Marmos Demo",
    "keywords": "Overloads for - regDeleteKey Module std.windows.registry regDeleteKey(hkey, subKey, samDesired) void regDeleteKey( HKEY hkey, string subKey, REGSAM samDesired )"
  },
  "phobos/std/windows/registry/Functions/regDeleteValue.html": {
    "href": "phobos/std/windows/registry/Functions/regDeleteValue.html",
    "title": "Overloads for - regDeleteValue | Marmos Demo",
    "keywords": "Overloads for - regDeleteValue Module std.windows.registry regDeleteValue(hkey, valueName) void regDeleteValue( HKEY hkey, string valueName )"
  },
  "phobos/std/windows/registry/Functions/regDup.html": {
    "href": "phobos/std/windows/registry/Functions/regDup.html",
    "title": "Overloads for - regDup | Marmos Demo",
    "keywords": "Overloads for - regDup Module std.windows.registry regDup(hkey) HKEY regDup( HKEY hkey )"
  },
  "phobos/std/windows/registry/Functions/regEnumKeyName.html": {
    "href": "phobos/std/windows/registry/Functions/regEnumKeyName.html",
    "title": "Overloads for - regEnumKeyName | Marmos Demo",
    "keywords": "Overloads for - regEnumKeyName Module std.windows.registry regEnumKeyName(hkey, index, name, cchName) LONG regEnumKeyName( HKEY hkey, DWORD index, <bug: unknown> name, DWORD cchName )"
  },
  "phobos/std/windows/registry/Functions/regEnumValueName.html": {
    "href": "phobos/std/windows/registry/Functions/regEnumValueName.html",
    "title": "Overloads for - regEnumValueName | Marmos Demo",
    "keywords": "Overloads for - regEnumValueName Module std.windows.registry regEnumValueName(hkey, dwIndex, name, cchName) LONG regEnumValueName( HKEY hkey, DWORD dwIndex, <bug: unknown> name, DWORD cchName )"
  },
  "phobos/std/windows/registry/Functions/regFlushKey.html": {
    "href": "phobos/std/windows/registry/Functions/regFlushKey.html",
    "title": "Overloads for - regFlushKey | Marmos Demo",
    "keywords": "Overloads for - regFlushKey Module std.windows.registry regFlushKey(hkey) void regFlushKey( HKEY hkey )"
  },
  "phobos/std/windows/registry/Functions/regGetNumSubKeys.html": {
    "href": "phobos/std/windows/registry/Functions/regGetNumSubKeys.html",
    "title": "Overloads for - regGetNumSubKeys | Marmos Demo",
    "keywords": "Overloads for - regGetNumSubKeys Module std.windows.registry regGetNumSubKeys(hkey, cSubKeys, cchSubKeyMaxLen) LONG regGetNumSubKeys( HKEY hkey, DWORD cSubKeys, DWORD cchSubKeyMaxLen )"
  },
  "phobos/std/windows/registry/Functions/regGetNumValues.html": {
    "href": "phobos/std/windows/registry/Functions/regGetNumValues.html",
    "title": "Overloads for - regGetNumValues | Marmos Demo",
    "keywords": "Overloads for - regGetNumValues Module std.windows.registry regGetNumValues(hkey, cValues, cchValueMaxLen) LONG regGetNumValues( HKEY hkey, DWORD cValues, DWORD cchValueMaxLen )"
  },
  "phobos/std/windows/registry/Functions/regGetValueType.html": {
    "href": "phobos/std/windows/registry/Functions/regGetValueType.html",
    "title": "Overloads for - regGetValueType | Marmos Demo",
    "keywords": "Overloads for - regGetValueType Module std.windows.registry regGetValueType(hkey, name) REG_VALUE_TYPE regGetValueType( HKEY hkey, string name )"
  },
  "phobos/std/windows/registry/Functions/regOpenKey.html": {
    "href": "phobos/std/windows/registry/Functions/regOpenKey.html",
    "title": "Overloads for - regOpenKey | Marmos Demo",
    "keywords": "Overloads for - regOpenKey Module std.windows.registry regOpenKey(hkey, subKey, samDesired) HKEY regOpenKey( HKEY hkey, string subKey, REGSAM samDesired )"
  },
  "phobos/std/windows/registry/Functions/regProcessNthKey.html": {
    "href": "phobos/std/windows/registry/Functions/regProcessNthKey.html",
    "title": "Overloads for - regProcessNthKey | Marmos Demo",
    "keywords": "Overloads for - regProcessNthKey Module std.windows.registry regProcessNthKey(key, dg) void regProcessNthKey( Key key, <bug: unknown> dg )"
  },
  "phobos/std/windows/registry/Functions/regProcessNthValue.html": {
    "href": "phobos/std/windows/registry/Functions/regProcessNthValue.html",
    "title": "Overloads for - regProcessNthValue | Marmos Demo",
    "keywords": "Overloads for - regProcessNthValue Module std.windows.registry regProcessNthValue(key, dg) void regProcessNthValue( Key key, <bug: unknown> dg )"
  },
  "phobos/std/windows/registry/Functions/regQueryValue.html": {
    "href": "phobos/std/windows/registry/Functions/regQueryValue.html",
    "title": "Overloads for - regQueryValue | Marmos Demo",
    "keywords": "Overloads for - regQueryValue Module std.windows.registry regQueryValue(hkey, name, value, reqType) void regQueryValue( HKEY hkey, string name, string value, REG_VALUE_TYPE reqType ) regQueryValue(hkey, name, value, reqType) void regQueryValue( HKEY hkey, string name, <bug: unknown> value, REG_VALUE_TYPE reqType ) regQueryValue(hkey, name, value, reqType) void regQueryValue( HKEY hkey, string name, uint value, REG_VALUE_TYPE reqType ) regQueryValue(hkey, name, value, reqType) void regQueryValue( HKEY hkey, string name, ulong value, REG_VALUE_TYPE reqType ) regQueryValue(hkey, name, value, reqType) void regQueryValue( HKEY hkey, string name, <bug: unknown> value, REG_VALUE_TYPE reqType )"
  },
  "phobos/std/windows/registry/Functions/regSetValue.html": {
    "href": "phobos/std/windows/registry/Functions/regSetValue.html",
    "title": "Overloads for - regSetValue | Marmos Demo",
    "keywords": "Overloads for - regSetValue Module std.windows.registry regSetValue(hkey, subKey, type, lpData, cbData) void regSetValue( HKEY hkey, string subKey, REG_VALUE_TYPE type, LPCVOID lpData, DWORD cbData )"
  },
  "phobos/std/windows/registry/Key/Functions/createKey.html": {
    "href": "phobos/std/windows/registry/Key/Functions/createKey.html",
    "title": "Overloads for - createKey | Marmos Demo",
    "keywords": "Overloads for - createKey Module std.windows.registry Parent Key createKey(name, access) Key createKey( string name, REGSAM access ) Returns the named sub-key of this key. Params name string The name of the subkey to create. May not be null . Returns The created key. Throws: RegistryException is thrown if the key cannot be created."
  },
  "phobos/std/windows/registry/Key/Functions/deleteKey.html": {
    "href": "phobos/std/windows/registry/Key/Functions/deleteKey.html",
    "title": "Overloads for - deleteKey | Marmos Demo",
    "keywords": "Overloads for - deleteKey Module std.windows.registry Parent Key deleteKey(name, access) void deleteKey( string name, REGSAM access ) Deletes the named key. Params name string The name of the key to delete. May not be null ."
  },
  "phobos/std/windows/registry/Key/Functions/deleteValue.html": {
    "href": "phobos/std/windows/registry/Key/Functions/deleteValue.html",
    "title": "Overloads for - deleteValue | Marmos Demo",
    "keywords": "Overloads for - deleteValue Module std.windows.registry Parent Key deleteValue(name) void deleteValue( string name ) Deletes the named value. Params name string The name of the value to delete. May not be null . Throws If a value of the requested name is not found, RegistryException is thrown."
  },
  "phobos/std/windows/registry/Key/Functions/flush.html": {
    "href": "phobos/std/windows/registry/Key/Functions/flush.html",
    "title": "Overloads for - flush | Marmos Demo",
    "keywords": "Overloads for - flush Module std.windows.registry Parent Key flush() void flush( ) Flushes any changes to the key to disk."
  },
  "phobos/std/windows/registry/Key/Functions/getKey.html": {
    "href": "phobos/std/windows/registry/Key/Functions/getKey.html",
    "title": "Overloads for - getKey | Marmos Demo",
    "keywords": "Overloads for - getKey Module std.windows.registry Parent Key getKey(name, access) Key getKey( string name, REGSAM access ) Returns the named sub-key of this key. Params name string The name of the subkey to aquire. If name is the empty string, then the called key is duplicated. access REGSAM The desired access; one of the REGSAM enumeration. string, then the called key is duplicated. access = The desired access; one of the REGSAM enumeration. Returns: The aquired key. Throws: This function never returns null . If a key corresponding to the requested name is not found, RegistryException is thrown."
  },
  "phobos/std/windows/registry/Key/Functions/getValue.html": {
    "href": "phobos/std/windows/registry/Key/Functions/getValue.html",
    "title": "Overloads for - getValue | Marmos Demo",
    "keywords": "Overloads for - getValue Module std.windows.registry Parent Key getValue(name) Value getValue( string name ) Returns the named value. If name is the empty string, then the default value is returned. Returns This function never returns null . If a value corresponding to the requested name is not found, RegistryException is thrown."
  },
  "phobos/std/windows/registry/Key/Functions/keyCount.html": {
    "href": "phobos/std/windows/registry/Key/Functions/keyCount.html",
    "title": "Overloads for - keyCount | Marmos Demo",
    "keywords": "Overloads for - keyCount Module std.windows.registry Parent Key keyCount() size_t keyCount( ) The number of sub keys."
  },
  "phobos/std/windows/registry/Key/Functions/keyNames.html": {
    "href": "phobos/std/windows/registry/Key/Functions/keyNames.html",
    "title": "Overloads for - keyNames | Marmos Demo",
    "keywords": "Overloads for - keyNames Module std.windows.registry Parent Key keyNames() KeyNameSequence keyNames( ) An enumerable sequence of the names of all the sub-keys of this key."
  },
  "phobos/std/windows/registry/Key/Functions/keys.html": {
    "href": "phobos/std/windows/registry/Key/Functions/keys.html",
    "title": "Overloads for - keys | Marmos Demo",
    "keywords": "Overloads for - keys Module std.windows.registry Parent Key keys() KeySequence keys( ) An enumerable sequence of all the sub-keys of this key."
  },
  "phobos/std/windows/registry/Key/Functions/name.html": {
    "href": "phobos/std/windows/registry/Key/Functions/name.html",
    "title": "Overloads for - name | Marmos Demo",
    "keywords": "Overloads for - name Module std.windows.registry Parent Key name() string name( ) The name of the key"
  },
  "phobos/std/windows/registry/Key/Functions/setValue.html": {
    "href": "phobos/std/windows/registry/Key/Functions/setValue.html",
    "title": "Overloads for - setValue | Marmos Demo",
    "keywords": "Overloads for - setValue Module std.windows.registry Parent Key setValue(name, value) void setValue( string name, uint value ) Sets the named value with the given 32-bit unsigned integer value. Params name string The name of the value to set. If it is the empty string, sets the default value. value uint The 32-bit unsigned value to set. sets the default value. value = The 32-bit unsigned value to set. Throws: If a value corresponding to the requested name is not found, RegistryException is thrown. setValue(name, value, endian) void setValue( string name, uint value, Endian endian ) Sets the named value with the given 32-bit unsigned integer value, according to the desired byte-ordering. Params name string The name of the value to set. If it is the empty string, sets the default value. value uint The 32-bit unsigned value to set. endian Endian Can be Endian.BigEndian or Endian.LittleEndian . sets the default value. value = The 32-bit unsigned value to set. endian = Can be Endian.BigEndian or Endian.LittleEndian . Throws: If a value corresponding to the requested name is not found, RegistryException is thrown. setValue(name, value) void setValue( string name, ulong value ) Sets the named value with the given 64-bit unsigned integer value. Params name string The name of the value to set. If it is the empty string, sets the default value. value ulong The 64-bit unsigned value to set. sets the default value. value = The 64-bit unsigned value to set. Throws: If a value corresponding to the requested name is not found, RegistryException is thrown. setValue(name, value) void setValue( string name, string value ) Sets the named value with the given string value. Params name string The name of the value to set. If it is the empty string, sets the default value. value string The string value to set. sets the default value. value = The string value to set. Throws: If a value corresponding to the requested name is not found, RegistryException is thrown. setValue(name, value, asEXPAND_SZ) void setValue( string name, string value, bool asEXPAND_SZ ) Sets the named value with the given string value. Params name string The name of the value to set. If it is the empty string, sets the default value. value string The string value to set. asEXPAND_SZ bool If true , the value will be stored as an expandable environment string, otherwise as a normal string. sets the default value. value = The string value to set. asEXPAND_SZ = If true , the value will be stored as an expandable environment string, otherwise as a normal string. Throws: If a value corresponding to the requested name is not found, RegistryException is thrown. setValue(name, value) void setValue( string name, <bug: unknown> value ) Sets the named value with the given multiple-strings value. Params name string The name of the value to set. If it is the empty string, sets the default value. value <bug: unknown> The multiple-strings value to set. sets the default value. value = The multiple-strings value to set. Throws: If a value corresponding to the requested name is not found, RegistryException is thrown. setValue(name, value) void setValue( string name, <bug: unknown> value ) Sets the named value with the given binary value. Params name string The name of the value to set. If it is the empty string, sets the default value. value <bug: unknown> The binary value to set. sets the default value. value = The binary value to set. Throws: If a value corresponding to the requested name is not found, RegistryException is thrown."
  },
  "phobos/std/windows/registry/Key/Functions/valueCount.html": {
    "href": "phobos/std/windows/registry/Key/Functions/valueCount.html",
    "title": "Overloads for - valueCount | Marmos Demo",
    "keywords": "Overloads for - valueCount Module std.windows.registry Parent Key valueCount() size_t valueCount( ) The number of values."
  },
  "phobos/std/windows/registry/Key/Functions/valueNames.html": {
    "href": "phobos/std/windows/registry/Key/Functions/valueNames.html",
    "title": "Overloads for - valueNames | Marmos Demo",
    "keywords": "Overloads for - valueNames Module std.windows.registry Parent Key valueNames() ValueNameSequence valueNames( ) An enumerable sequence of the names of all the values of this key."
  },
  "phobos/std/windows/registry/Key/Functions/values.html": {
    "href": "phobos/std/windows/registry/Key/Functions/values.html",
    "title": "Overloads for - values | Marmos Demo",
    "keywords": "Overloads for - values Module std.windows.registry Parent Key values() ValueSequence values( ) An enumerable sequence of all the values of this key."
  },
  "phobos/std/windows/registry/KeyNameSequence/Functions/count.html": {
    "href": "phobos/std/windows/registry/KeyNameSequence/Functions/count.html",
    "title": "Overloads for - count | Marmos Demo",
    "keywords": "Overloads for - count Module std.windows.registry Parent KeyNameSequence count() size_t count( ) The number of keys."
  },
  "phobos/std/windows/registry/KeyNameSequence/Functions/getKeyName.html": {
    "href": "phobos/std/windows/registry/KeyNameSequence/Functions/getKeyName.html",
    "title": "Overloads for - getKeyName | Marmos Demo",
    "keywords": "Overloads for - getKeyName Module std.windows.registry Parent KeyNameSequence getKeyName(index) string getKeyName( size_t index ) The name of the key at the given index. Params index size_t The 0-based index of the key to retrieve. Returns The name of the key corresponding to the given index. Throws: RegistryException if no corresponding key is retrieved."
  },
  "phobos/std/windows/registry/KeyNameSequence/Functions/opApply.html": {
    "href": "phobos/std/windows/registry/KeyNameSequence/Functions/opApply.html",
    "title": "Overloads for - opApply | Marmos Demo",
    "keywords": "Overloads for - opApply Module std.windows.registry Parent KeyNameSequence opApply(dg) int opApply( <bug: unknown> dg )"
  },
  "phobos/std/windows/registry/KeyNameSequence/Functions/opIndex.html": {
    "href": "phobos/std/windows/registry/KeyNameSequence/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.windows.registry Parent KeyNameSequence opIndex(index) string opIndex( size_t index ) The name of the key at the given index. Params index size_t The 0-based index of the key to retrieve. Returns The name of the key corresponding to the given index. Throws: RegistryException if no corresponding key is retrieved."
  },
  "phobos/std/windows/registry/KeySequence/Functions/count.html": {
    "href": "phobos/std/windows/registry/KeySequence/Functions/count.html",
    "title": "Overloads for - count | Marmos Demo",
    "keywords": "Overloads for - count Module std.windows.registry Parent KeySequence count() size_t count( ) The number of keys."
  },
  "phobos/std/windows/registry/KeySequence/Functions/getKey.html": {
    "href": "phobos/std/windows/registry/KeySequence/Functions/getKey.html",
    "title": "Overloads for - getKey | Marmos Demo",
    "keywords": "Overloads for - getKey Module std.windows.registry Parent KeySequence getKey(index) Key getKey( size_t index ) The key at the given index. Params index size_t The 0-based index of the key to retrieve. Returns The key corresponding to the given index. Throws: RegistryException if no corresponding key is retrieved."
  },
  "phobos/std/windows/registry/KeySequence/Functions/opApply.html": {
    "href": "phobos/std/windows/registry/KeySequence/Functions/opApply.html",
    "title": "Overloads for - opApply | Marmos Demo",
    "keywords": "Overloads for - opApply Module std.windows.registry Parent KeySequence opApply(dg) int opApply( <bug: unknown> dg )"
  },
  "phobos/std/windows/registry/KeySequence/Functions/opIndex.html": {
    "href": "phobos/std/windows/registry/KeySequence/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.windows.registry Parent KeySequence opIndex(index) Key opIndex( size_t index ) The key at the given index. Params index size_t The 0-based index of the key to retrieve. Returns The key corresponding to the given index. Throws: RegistryException if no corresponding key is retrieved."
  },
  "phobos/std/windows/registry/Overview.html": {
    "href": "phobos/std/windows/registry/Overview.html",
    "title": "Module - std.windows.registry | Marmos Demo",
    "keywords": "Module - std.windows.registry About This library provides Win32 Registry facilities. Copyright: Copyright 2003-2004 by Matthew Wilson and Synesis Software Written by Matthew Wilson License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Author: Matthew Wilson, Kenji Hara History Created 15th March 2003, Updated 25th April 2004, Source: $(PHOBOSSRC std/windows/registry.d) Classes Name Description Key This class represents a registry key. KeyNameSequence An enumerable sequence representing the names of the sub-keys of a registry Key. KeySequence An enumerable sequence representing the sub-keys of a registry Key. Registry Represents the local system registry. RegistryException Exception class thrown by the std.windows.registry classes. Value This class represents a value of a registry key. ValueNameSequence An enumerable sequence representing the names of the values of a registry Key. ValueSequence An enumerable sequence representing the values of a registry Key. Win32Exception Functions Name Description compatibleRegsam enforceSucc haveWoW64Job Returns true, if we are in WoW64 mode and have WoW64 flags regCloseKey regCreateKey regDeleteKey regDeleteValue regDup regEnumKeyName regEnumValueName regFlushKey regGetNumSubKeys regGetNumValues regGetValueType regOpenKey regProcessNthKey regProcessNthValue regQueryValue regSetValue"
  },
  "phobos/std/windows/registry/Registry/Functions/classesRoot.html": {
    "href": "phobos/std/windows/registry/Registry/Functions/classesRoot.html",
    "title": "Overloads for - classesRoot | Marmos Demo",
    "keywords": "Overloads for - classesRoot Module std.windows.registry Parent Registry classesRoot() Key classesRoot( ) static Returns the root key for the HKEY_CLASSES_ROOT hive"
  },
  "phobos/std/windows/registry/Registry/Functions/currentConfig.html": {
    "href": "phobos/std/windows/registry/Registry/Functions/currentConfig.html",
    "title": "Overloads for - currentConfig | Marmos Demo",
    "keywords": "Overloads for - currentConfig Module std.windows.registry Parent Registry currentConfig() Key currentConfig( ) static Returns the root key for the HKEY_CURRENT_CONFIG hive"
  },
  "phobos/std/windows/registry/Registry/Functions/currentUser.html": {
    "href": "phobos/std/windows/registry/Registry/Functions/currentUser.html",
    "title": "Overloads for - currentUser | Marmos Demo",
    "keywords": "Overloads for - currentUser Module std.windows.registry Parent Registry currentUser() Key currentUser( ) static Returns the root key for the HKEY_CURRENT_USER hive"
  },
  "phobos/std/windows/registry/Registry/Functions/dynData.html": {
    "href": "phobos/std/windows/registry/Registry/Functions/dynData.html",
    "title": "Overloads for - dynData | Marmos Demo",
    "keywords": "Overloads for - dynData Module std.windows.registry Parent Registry dynData() Key dynData( ) static Returns the root key for the HKEY_DYN_DATA hive"
  },
  "phobos/std/windows/registry/Registry/Functions/localMachine.html": {
    "href": "phobos/std/windows/registry/Registry/Functions/localMachine.html",
    "title": "Overloads for - localMachine | Marmos Demo",
    "keywords": "Overloads for - localMachine Module std.windows.registry Parent Registry localMachine() Key localMachine( ) static Returns the root key for the HKEY_LOCAL_MACHINE hive"
  },
  "phobos/std/windows/registry/Registry/Functions/performanceData.html": {
    "href": "phobos/std/windows/registry/Registry/Functions/performanceData.html",
    "title": "Overloads for - performanceData | Marmos Demo",
    "keywords": "Overloads for - performanceData Module std.windows.registry Parent Registry performanceData() Key performanceData( ) static Returns the root key for the HKEY_PERFORMANCE_DATA hive"
  },
  "phobos/std/windows/registry/Registry/Functions/users.html": {
    "href": "phobos/std/windows/registry/Registry/Functions/users.html",
    "title": "Overloads for - users | Marmos Demo",
    "keywords": "Overloads for - users Module std.windows.registry Parent Registry users() Key users( ) static Returns the root key for the HKEY_USERS hive"
  },
  "phobos/std/windows/registry/Value/Functions/name.html": {
    "href": "phobos/std/windows/registry/Value/Functions/name.html",
    "title": "Overloads for - name | Marmos Demo",
    "keywords": "Overloads for - name Module std.windows.registry Parent Value name() string name( ) The name of the value. If the value represents a default value of a key, which has no name, the returned string will be of zero length."
  },
  "phobos/std/windows/registry/Value/Functions/type.html": {
    "href": "phobos/std/windows/registry/Value/Functions/type.html",
    "title": "Overloads for - type | Marmos Demo",
    "keywords": "Overloads for - type Module std.windows.registry Parent Value type() REG_VALUE_TYPE type( ) The type of value."
  },
  "phobos/std/windows/registry/Value/Functions/value_BINARY.html": {
    "href": "phobos/std/windows/registry/Value/Functions/value_BINARY.html",
    "title": "Overloads for - value_BINARY | Marmos Demo",
    "keywords": "Overloads for - value_BINARY Module std.windows.registry Parent Value value_BINARY() <bug: unknown> value_BINARY( ) Obtains the value as a binary blob. Returns The contents of the value. Throws: RegistryException if the type of the value is not REG_BINARY."
  },
  "phobos/std/windows/registry/Value/Functions/value_DWORD.html": {
    "href": "phobos/std/windows/registry/Value/Functions/value_DWORD.html",
    "title": "Overloads for - value_DWORD | Marmos Demo",
    "keywords": "Overloads for - value_DWORD Module std.windows.registry Parent Value value_DWORD() uint value_DWORD( ) Obtains the current value as a 32-bit unsigned integer, ordered correctly according to the current architecture. Returns The contents of the value. Throws: RegistryException is thrown for all types other than REG_DWORD, REG_DWORD_LITTLE_ENDIAN and REG_DWORD_BIG_ENDIAN."
  },
  "phobos/std/windows/registry/Value/Functions/value_EXPAND_SZ.html": {
    "href": "phobos/std/windows/registry/Value/Functions/value_EXPAND_SZ.html",
    "title": "Overloads for - value_EXPAND_SZ | Marmos Demo",
    "keywords": "Overloads for - value_EXPAND_SZ Module std.windows.registry Parent Value value_EXPAND_SZ() string value_EXPAND_SZ( ) Obtains the current value as a string, within which any environment variables have undergone expansion. This function works with the same value-types as value_SZ . Returns The contents of the value."
  },
  "phobos/std/windows/registry/Value/Functions/value_MULTI_SZ.html": {
    "href": "phobos/std/windows/registry/Value/Functions/value_MULTI_SZ.html",
    "title": "Overloads for - value_MULTI_SZ | Marmos Demo",
    "keywords": "Overloads for - value_MULTI_SZ Module std.windows.registry Parent Value value_MULTI_SZ() <bug: unknown> value_MULTI_SZ( ) Obtains the current value as an array of strings. Returns The contents of the value. Throws: RegistryException if the type of the value is not REG_MULTI_SZ."
  },
  "phobos/std/windows/registry/Value/Functions/value_QWORD.html": {
    "href": "phobos/std/windows/registry/Value/Functions/value_QWORD.html",
    "title": "Overloads for - value_QWORD | Marmos Demo",
    "keywords": "Overloads for - value_QWORD Module std.windows.registry Parent Value value_QWORD() ulong value_QWORD( ) Obtains the value as a 64-bit unsigned integer, ordered correctly according to the current architecture. Returns The contents of the value. Throws: RegistryException if the type of the value is not REG_QWORD."
  },
  "phobos/std/windows/registry/Value/Functions/value_SZ.html": {
    "href": "phobos/std/windows/registry/Value/Functions/value_SZ.html",
    "title": "Overloads for - value_SZ | Marmos Demo",
    "keywords": "Overloads for - value_SZ Module std.windows.registry Parent Value value_SZ() string value_SZ( ) Obtains the current value of the value as a string. If the value's type is REG_EXPAND_SZ the returned value is not expanded; value_EXPAND_SZ should be called Returns The contents of the value. Throws: RegistryException if the type of the value is not REG_SZ, REG_EXPAND_SZ, REG_DWORD, or REG_QWORD."
  },
  "phobos/std/windows/registry/ValueNameSequence/Functions/count.html": {
    "href": "phobos/std/windows/registry/ValueNameSequence/Functions/count.html",
    "title": "Overloads for - count | Marmos Demo",
    "keywords": "Overloads for - count Module std.windows.registry Parent ValueNameSequence count() size_t count( ) The number of values."
  },
  "phobos/std/windows/registry/ValueNameSequence/Functions/getValueName.html": {
    "href": "phobos/std/windows/registry/ValueNameSequence/Functions/getValueName.html",
    "title": "Overloads for - getValueName | Marmos Demo",
    "keywords": "Overloads for - getValueName Module std.windows.registry Parent ValueNameSequence getValueName(index) string getValueName( size_t index ) The name of the value at the given index. Params index size_t The 0-based index of the value to retrieve. Returns The name of the value corresponding to the given index. Throws: RegistryException if no corresponding value is retrieved."
  },
  "phobos/std/windows/registry/ValueNameSequence/Functions/opApply.html": {
    "href": "phobos/std/windows/registry/ValueNameSequence/Functions/opApply.html",
    "title": "Overloads for - opApply | Marmos Demo",
    "keywords": "Overloads for - opApply Module std.windows.registry Parent ValueNameSequence opApply(dg) int opApply( <bug: unknown> dg )"
  },
  "phobos/std/windows/registry/ValueNameSequence/Functions/opIndex.html": {
    "href": "phobos/std/windows/registry/ValueNameSequence/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.windows.registry Parent ValueNameSequence opIndex(index) string opIndex( size_t index ) The name of the value at the given index. Params index size_t The 0-based index of the value to retrieve. Returns The name of the value corresponding to the given index. Throws: RegistryException if no corresponding value is retrieved."
  },
  "phobos/std/windows/registry/ValueSequence/Functions/count.html": {
    "href": "phobos/std/windows/registry/ValueSequence/Functions/count.html",
    "title": "Overloads for - count | Marmos Demo",
    "keywords": "Overloads for - count Module std.windows.registry Parent ValueSequence count() size_t count( ) The number of values"
  },
  "phobos/std/windows/registry/ValueSequence/Functions/getValue.html": {
    "href": "phobos/std/windows/registry/ValueSequence/Functions/getValue.html",
    "title": "Overloads for - getValue | Marmos Demo",
    "keywords": "Overloads for - getValue Module std.windows.registry Parent ValueSequence getValue(index) Value getValue( size_t index ) The value at the given index . Params index size_t The 0-based index of the value to retrieve Returns The value corresponding to the given index. Throws: RegistryException if no corresponding value is retrieved"
  },
  "phobos/std/windows/registry/ValueSequence/Functions/opApply.html": {
    "href": "phobos/std/windows/registry/ValueSequence/Functions/opApply.html",
    "title": "Overloads for - opApply | Marmos Demo",
    "keywords": "Overloads for - opApply Module std.windows.registry Parent ValueSequence opApply(dg) int opApply( <bug: unknown> dg )"
  },
  "phobos/std/windows/registry/ValueSequence/Functions/opIndex.html": {
    "href": "phobos/std/windows/registry/ValueSequence/Functions/opIndex.html",
    "title": "Overloads for - opIndex | Marmos Demo",
    "keywords": "Overloads for - opIndex Module std.windows.registry Parent ValueSequence opIndex(index) Value opIndex( size_t index ) The value at the given index . Params index size_t The 0-based index of the value to retrieve. Returns The value corresponding to the given index. Throws: RegistryException if no corresponding value is retrieved."
  },
  "phobos/std/windows/registry/Win32Exception/Functions/error.html": {
    "href": "phobos/std/windows/registry/Win32Exception/Functions/error.html",
    "title": "Overloads for - error | Marmos Demo",
    "keywords": "Overloads for - error Module std.windows.registry Parent Win32Exception error() int error( )"
  },
  "phobos/std/windows/syserror/Classes/WindowsException.html": {
    "href": "phobos/std/windows/syserror/Classes/WindowsException.html",
    "title": "Class - WindowsException | Marmos Demo",
    "keywords": "Class - WindowsException Module std.windows.syserror public class WindowsException { // alias DWORD = <todo: marmos support pending>; // `GetLastError` 's return value. DWORD code( ) final; } About Thrown if errors that set $(LINK2 http://msdn.microsoft.com/en-us/library/windows/desktop/ms679360.aspx, GetLastError ) occur. Aliases Name Description DWORD Functions Name Description code GetLastError 's return value."
  },
  "phobos/std/windows/syserror/Functions/sysErrorString.html": {
    "href": "phobos/std/windows/syserror/Functions/sysErrorString.html",
    "title": "Overloads for - sysErrorString | Marmos Demo",
    "keywords": "Overloads for - sysErrorString Module std.windows.syserror sysErrorString(errCode, langId, subLangId) string sysErrorString( DWORD errCode, int langId, int subLangId ) Query the text for a Windows error code, as returned by $(LINK2 http://msdn.microsoft.com/en-us/library/windows/desktop/ms679360.aspx, GetLastError ), as a D string."
  },
  "phobos/std/windows/syserror/Functions/wenforce.html": {
    "href": "phobos/std/windows/syserror/Functions/wenforce.html",
    "title": "Overloads for - wenforce | Marmos Demo",
    "keywords": "Overloads for - wenforce Module std.windows.syserror wenforce(value, msg, file, line) T wenforce( T value, S msg, string file, size_t line ) If !!value is true, value is returned. Otherwise, $(D new WindowsException(GetLastError(), msg)) is thrown. WindowsException assumes that the last operation set GetLastError() appropriately. Example -------------------- wenforce(DeleteFileA(\"junk.tmp\"), \"DeleteFile failed\"); --------------------"
  },
  "phobos/std/windows/syserror/Overview.html": {
    "href": "phobos/std/windows/syserror/Overview.html",
    "title": "Module - std.windows.syserror | Marmos Demo",
    "keywords": "Module - std.windows.syserror About Convert Win32 error code to string. Copyright: Copyright The D Language Foundation\" 2006 - 2013. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP digitalmars.com, Walter Bright) Credits: Based on code written by Regan Heath Aliases Name Description DWORD Classes Name Description WindowsException Thrown if errors that set $(LINK2 http://msdn.microsoft.com/en-us/library/windows/desktop/ms679360.aspx, GetLastError ) occur. Functions Name Description sysErrorString Query the text for a Windows error code, as returned by $(LINK2 http://msdn.microsoft.com/en-us/library/windows/desktop/ms679360.aspx, GetLastError ), as a D string. wenforce If !!value is true, value is returned. Otherwise, $(D new WindowsException(GetLastError(), msg)) is thrown. WindowsException assumes that the last operation set GetLastError() appropriately. Variables Name Description LANG_NEUTRAL SUBLANG_DEFAULT"
  },
  "phobos/std/windows/syserror/WindowsException/Functions/code.html": {
    "href": "phobos/std/windows/syserror/WindowsException/Functions/code.html",
    "title": "Overloads for - code | Marmos Demo",
    "keywords": "Overloads for - code Module std.windows.syserror Parent WindowsException code() DWORD code( ) final GetLastError 's return value."
  },
  "phobos/std/zip/ArchiveMember/Functions/compressedData.html": {
    "href": "phobos/std/zip/ArchiveMember/Functions/compressedData.html",
    "title": "Overloads for - compressedData | Marmos Demo",
    "keywords": "Overloads for - compressedData Module std.zip Parent ArchiveMember compressedData() <bug: unknown> compressedData( ) Data of member in compressed form. Returns: The file data in compressed form."
  },
  "phobos/std/zip/ArchiveMember/Functions/compressedSize.html": {
    "href": "phobos/std/zip/ArchiveMember/Functions/compressedSize.html",
    "title": "Overloads for - compressedSize | Marmos Demo",
    "keywords": "Overloads for - compressedSize Module std.zip Parent ArchiveMember compressedSize() uint compressedSize( ) Size of data of member in compressed form. Returns: Size of the compressed archive."
  },
  "phobos/std/zip/ArchiveMember/Functions/compressionMethod.html": {
    "href": "phobos/std/zip/ArchiveMember/Functions/compressionMethod.html",
    "title": "Overloads for - compressionMethod | Marmos Demo",
    "keywords": "Overloads for - compressionMethod Module std.zip Parent ArchiveMember compressionMethod() CompressionMethod compressionMethod( ) Get or set compression method used for this member. Params cm <parameter not found> Compression method. Returns: Compression method. See_Also $(LREF CompressionMethod) compressionMethod(cm) void compressionMethod( CompressionMethod cm ) ditto"
  },
  "phobos/std/zip/ArchiveMember/Functions/crc32.html": {
    "href": "phobos/std/zip/ArchiveMember/Functions/crc32.html",
    "title": "Overloads for - crc32 | Marmos Demo",
    "keywords": "Overloads for - crc32 Module std.zip Parent ArchiveMember crc32() uint crc32( ) Cyclic redundancy check (CRC) value. Returns: CRC32 value."
  },
  "phobos/std/zip/ArchiveMember/Functions/expandedData.html": {
    "href": "phobos/std/zip/ArchiveMember/Functions/expandedData.html",
    "title": "Overloads for - expandedData | Marmos Demo",
    "keywords": "Overloads for - expandedData Module std.zip Parent ArchiveMember expandedData() <bug: unknown> expandedData( ) Get or set data of member in uncompressed form. When an existing archive is read ZipArchive.expand needs to be called before this can be accessed. Params ed <parameter not found> Expanded Data. Returns: The file data. expandedData(ed) void expandedData( <bug: unknown> ed ) ditto"
  },
  "phobos/std/zip/ArchiveMember/Functions/expandedSize.html": {
    "href": "phobos/std/zip/ArchiveMember/Functions/expandedSize.html",
    "title": "Overloads for - expandedSize | Marmos Demo",
    "keywords": "Overloads for - expandedSize Module std.zip Parent ArchiveMember expandedSize() uint expandedSize( ) Size of data of member in uncompressed form. Returns: Size of uncompressed archive."
  },
  "phobos/std/zip/ArchiveMember/Functions/extractVersion.html": {
    "href": "phobos/std/zip/ArchiveMember/Functions/extractVersion.html",
    "title": "Overloads for - extractVersion | Marmos Demo",
    "keywords": "Overloads for - extractVersion Module std.zip Parent ArchiveMember extractVersion() ushort extractVersion( ) The zip file format version needed to extract this member. Returns: Format version needed to extract this member."
  },
  "phobos/std/zip/ArchiveMember/Functions/fileAttributes.html": {
    "href": "phobos/std/zip/ArchiveMember/Functions/fileAttributes.html",
    "title": "Overloads for - fileAttributes | Marmos Demo",
    "keywords": "Overloads for - fileAttributes Module std.zip Parent ArchiveMember fileAttributes(attr) void fileAttributes( uint attr ) Get or set the OS specific file attributes for this archive member. Params attr uint Attributes as obtained by $(REF getAttributes, std,file) or $(REF DirEntry.attributes, std,file). Returns: The file attributes or 0 if the file attributes were encoded for an incompatible OS (Windows vs. POSIX). fileAttributes() uint fileAttributes( ) ditto"
  },
  "phobos/std/zip/ArchiveMember/Functions/index.html": {
    "href": "phobos/std/zip/ArchiveMember/Functions/index.html",
    "title": "Overloads for - index | Marmos Demo",
    "keywords": "Overloads for - index Module std.zip Parent ArchiveMember index(value) uint index( uint value ) The index of this archive member within the archive. Set this to a different value for reordering the members of an archive. Params value uint Index value to set. Returns: The index. index() uint index( ) ditto"
  },
  "phobos/std/zip/ArchiveMember/Functions/print.html": {
    "href": "phobos/std/zip/ArchiveMember/Functions/print.html",
    "title": "Overloads for - print | Marmos Demo",
    "keywords": "Overloads for - print Module std.zip Parent ArchiveMember print() void print( )"
  },
  "phobos/std/zip/ArchiveMember/Functions/time.html": {
    "href": "phobos/std/zip/ArchiveMember/Functions/time.html",
    "title": "Overloads for - time | Marmos Demo",
    "keywords": "Overloads for - time Module std.zip Parent ArchiveMember time() DosFileTime time( ) Get or set the last modification time for this member. Params time <parameter not found> Time to set (will be saved as DosFileTime, which is less accurate). Returns The last modification time in DosFileFormat. time(time) void time( SysTime time ) ditto time(time) void time( DosFileTime time ) ditto"
  },
  "phobos/std/zip/Classes/ArchiveMember.html": {
    "href": "phobos/std/zip/Classes/ArchiveMember.html",
    "title": "Class - ArchiveMember | Marmos Demo",
    "keywords": "Class - ArchiveMember Module std.zip public class ArchiveMember { // Data of member in compressed form. <bug: unknown> compressedData( ) ; // Size of data of member in compressed form. uint compressedSize( ) ; // Get or set compression method used for this member. CompressionMethod compressionMethod( ) ; // ditto void compressionMethod( CompressionMethod cm ) ; // Cyclic redundancy check (CRC) value. uint crc32( ) ; // Get or set data of member in uncompressed form. When an existing archive is read `ZipArchive.expand` needs to be called before this can be accessed. <bug: unknown> expandedData( ) ; // ditto void expandedData( <bug: unknown> ed ) ; // Size of data of member in uncompressed form. uint expandedSize( ) ; // The zip file format version needed to extract this member. ushort extractVersion( ) ; // Get or set the OS specific file attributes for this archive member. void fileAttributes( uint attr ) ; // ditto uint fileAttributes( ) ; // The index of this archive member within the archive. Set this to a different value for reordering the members of an archive. uint index( uint value ) ; // ditto uint index( ) ; // void print( ) ; // Get or set the last modification time for this member. DosFileTime time( ) ; // ditto void time( SysTime time ) ; // ditto void time( DosFileTime time ) ; // Comment associated with this member. string comment; // The content of the extra data field for this member. See $(LINK2 https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT, original documentation) for a description of the general format of this data. May contain undocumented 3rd-party data. <bug: unknown> extra; // Contains some information on how to extract this archive. See $(LINK2 https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT, original documentation) for details. ushort flags; // Internal attributes. Bit 1 is set, if the member is apparently in binary format and bit 2 is set, if each record is preceded by the length of the record. ushort internalAttributes; // The name of the archive member; it is used to index the archive directory for the member. Each member must have a unique name. Do not change without removing member from the directory first. string name; // uint offset; } About A single file or directory inside the archive. Functions Name Description compressedData Data of member in compressed form. compressedSize Size of data of member in compressed form. compressionMethod Get or set compression method used for this member. crc32 Cyclic redundancy check (CRC) value. expandedData Get or set data of member in uncompressed form. When an existing archive is read ZipArchive.expand needs to be called before this can be accessed. expandedSize Size of data of member in uncompressed form. extractVersion The zip file format version needed to extract this member. fileAttributes Get or set the OS specific file attributes for this archive member. index The index of this archive member within the archive. Set this to a different value for reordering the members of an archive. print time Get or set the last modification time for this member. Variables Name Description comment Comment associated with this member. extra The content of the extra data field for this member. See $(LINK2 https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT, original documentation) for a description of the general format of this data. May contain undocumented 3rd-party data. flags Contains some information on how to extract this archive. See $(LINK2 https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT, original documentation) for details. internalAttributes Internal attributes. Bit 1 is set, if the member is apparently in binary format and bit 2 is set, if each record is preceded by the length of the record. name The name of the archive member; it is used to index the archive directory for the member. Each member must have a unique name. Do not change without removing member from the directory first. offset"
  },
  "phobos/std/zip/Classes/ZipArchive.html": {
    "href": "phobos/std/zip/Classes/ZipArchive.html",
    "title": "Class - ZipArchive | Marmos Demo",
    "keywords": "Class - ZipArchive Module std.zip public class ZipArchive { // Add a member to the archive. The file is compressed on the fly. void addMember( ArchiveMember de ) ; // Construct the entire contents of the current members of the archive. <bug: unknown> build( ) ; // Array representing the entire contents of the archive. <bug: unknown> data( ) ; // Delete member `de` from the archive. Uses the name of the member to detect which element to delete. void deleteMember( ArchiveMember de ) ; // Associative array indexed by the name of each member of the archive. <bug: unknown> directory( ) ; // Decompress the contents of a member. <bug: unknown> expand( ArchiveMember de ) ; // uint findEndOfCentralDirRecord( ) ; // uint getUint( uint i ) ; // ulong getUlong( uint i ) ; // ushort getUshort( uint i ) ; // True when the archive is in Zip64 format. Set this to true to force building a Zip64 archive. bool isZip64( ) ; // ditto void isZip64( bool value ) ; // void print( ) ; // void putUint( uint i, uint ui ) ; // void putUlong( uint i, ulong ul ) ; // void putUshort( uint i, ushort us ) ; // void removeSegment( uint start, uint end ) ; // Number of ArchiveMembers in the directory. uint totalEntries( ) ; // __enumMember archiveExtraDataLength; // static immutable <bug: unknown> archiveExtraDataSignature; // __enumMember centralFileHeaderLength; // static immutable <bug: unknown> centralFileHeaderSignature; // The archive comment. Must be less than 65536 bytes in length. string comment; // __enumMember dataDescriptorLength; // __enumMember digitalSignatureLength; // static immutable <bug: unknown> digitalSignatureSignature; // __enumMember endOfCentralDirLength; // static immutable <bug: unknown> endOfCentralDirSignature; // __enumMember localFileHeaderLength; // static immutable <bug: unknown> localFileHeaderSignature; // __enumMember zip64EndOfCentralDirLength; // __enumMember zip64EndOfCentralDirLocatorLength; // static immutable <bug: unknown> zip64EndOfCentralDirLocatorSignature; // static immutable <bug: unknown> zip64EndOfCentralDirSignature; // static const ushort zip64ExtractVersion; } About Object representing the entire archive. ZipArchives are collections of ArchiveMembers. Functions Name Description addMember Add a member to the archive. The file is compressed on the fly. build Construct the entire contents of the current members of the archive. data Array representing the entire contents of the archive. deleteMember Delete member de from the archive. Uses the name of the member to detect which element to delete. directory Associative array indexed by the name of each member of the archive. expand Decompress the contents of a member. findEndOfCentralDirRecord getUint getUlong getUshort isZip64 True when the archive is in Zip64 format. Set this to true to force building a Zip64 archive. print putUint putUlong putUshort removeSegment totalEntries Number of ArchiveMembers in the directory. Variables Name Description archiveExtraDataLength archiveExtraDataSignature centralFileHeaderLength centralFileHeaderSignature comment The archive comment. Must be less than 65536 bytes in length. dataDescriptorLength digitalSignatureLength digitalSignatureSignature endOfCentralDirLength endOfCentralDirSignature localFileHeaderLength localFileHeaderSignature zip64EndOfCentralDirLength zip64EndOfCentralDirLocatorLength zip64EndOfCentralDirLocatorSignature zip64EndOfCentralDirSignature zip64ExtractVersion"
  },
  "phobos/std/zip/Classes/ZipException.html": {
    "href": "phobos/std/zip/Classes/ZipException.html",
    "title": "Class - ZipException | Marmos Demo",
    "keywords": "Class - ZipException Module std.zip public class ZipException { } About Thrown on error."
  },
  "phobos/std/zip/Functions/arrayPrint.html": {
    "href": "phobos/std/zip/Functions/arrayPrint.html",
    "title": "Overloads for - arrayPrint | Marmos Demo",
    "keywords": "Overloads for - arrayPrint Module std.zip arrayPrint(array) void arrayPrint( <bug: unknown> array )"
  },
  "phobos/std/zip/Overview.html": {
    "href": "phobos/std/zip/Overview.html",
    "title": "Module - std.zip | Marmos Demo",
    "keywords": "Module - std.zip About Read and write data in the $(LINK2 https://en.wikipedia.org/wiki/Zip_%28file_format%29, zip archive) format. Standards The current implementation mostly conforms to $(LINK2 https://www.iso.org/standard/60101.html, ISO/IEC 21320-1:2015), which means, $(UL $(LI that files can only be stored uncompressed or using the deflate mechanism,) $(LI that encryption features are not used,) $(LI that digital signature features are not used,) $(LI that patched data features are not used, and) $(LI that archives may not span multiple volumes.) ) Additionally, archives are checked for malware attacks and rejected if detected. This includes $(UL $(LI $(LINK2 https://news.ycombinator.com/item?id=20352439, zip bombs) which generate gigantic amounts of unpacked data) $(LI zip archives that contain overlapping records) $(LI chameleon zip archives which generate different unpacked data, depending on the implementation of the unpack algorithm) ) The current implementation makes use of the zlib compression library. Usage There are two main ways of usage: Extracting files from a zip archive and storing files into a zip archive. These can be mixed though (e.g. read an archive, remove some files, add others and write the new archive). Examples Example for reading an existing zip archive --- import std.stdio : writeln, writefln; import std.file : read; import std.zip; void main(string[] args) { // read a zip file into memory auto zip = new ZipArchive(read(args[1])); // iterate over all zip members writefln(\"%-10s %-8s Name\", \"Length\", \"CRC-32\"); foreach (name, am; zip.directory) { // print some data about each member writefln(\"%10s %08x %s\", am.expandedSize, am.crc32, name); assert(am.expandedData.length == 0); // decompress the archive member zip.expand(am); assert(am.expandedData.length == am.expandedSize); } } --- Example for writing files into a zip archive --- import std.file : write; import std.string : representation; import std.zip; void main() { // Create an ArchiveMembers for each file. ArchiveMember file1 = new ArchiveMember(); file1.name = \"test1.txt\"; file1.expandedData(\"Test data.\\n\".dup.representation); file1.compressionMethod = CompressionMethod.none; // don't compress ArchiveMember file2 = new ArchiveMember(); file2.name = \"test2.txt\"; file2.expandedData(\"More test data.\\n\".dup.representation); file2.compressionMethod = CompressionMethod.deflate; // compress // Create an archive and add the member. ZipArchive zip = new ZipArchive(); // add ArchiveMembers zip.addMember(file1); zip.addMember(file2); // Build the archive void[] compressed_data = zip.build(); // Write to a file write(\"test.zip\", compressed_data); } --- Copyright: Copyright The D Language Foundation 2000 - 2009. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP digitalmars.com, Walter Bright) Source: $(PHOBOSSRC std/zip.d) Classes Name Description ArchiveMember A single file or directory inside the archive. ZipArchive Object representing the entire archive. ZipArchives are collections of ArchiveMembers. ZipException Thrown on error. Functions Name Description arrayPrint"
  },
  "phobos/std/zip/ZipArchive/Functions/addMember.html": {
    "href": "phobos/std/zip/ZipArchive/Functions/addMember.html",
    "title": "Overloads for - addMember | Marmos Demo",
    "keywords": "Overloads for - addMember Module std.zip Parent ZipArchive addMember(de) void addMember( ArchiveMember de ) Add a member to the archive. The file is compressed on the fly. Params de ArchiveMember Member to be added. Throws: ZipException when an unsupported compression method is used or when compression failed."
  },
  "phobos/std/zip/ZipArchive/Functions/build.html": {
    "href": "phobos/std/zip/ZipArchive/Functions/build.html",
    "title": "Overloads for - build | Marmos Demo",
    "keywords": "Overloads for - build Module std.zip Parent ZipArchive build() <bug: unknown> build( ) Construct the entire contents of the current members of the archive. Fills in the properties data[], totalEntries, and directory[]. For each ArchiveMember, fills in properties crc32, compressedSize, compressedData[]. Returns: Array representing the entire archive. Throws: ZipException when the archive could not be build."
  },
  "phobos/std/zip/ZipArchive/Functions/data.html": {
    "href": "phobos/std/zip/ZipArchive/Functions/data.html",
    "title": "Overloads for - data | Marmos Demo",
    "keywords": "Overloads for - data Module std.zip Parent ZipArchive data() <bug: unknown> data( ) Array representing the entire contents of the archive. Returns: Data of the entire contents of the archive."
  },
  "phobos/std/zip/ZipArchive/Functions/deleteMember.html": {
    "href": "phobos/std/zip/ZipArchive/Functions/deleteMember.html",
    "title": "Overloads for - deleteMember | Marmos Demo",
    "keywords": "Overloads for - deleteMember Module std.zip Parent ZipArchive deleteMember(de) void deleteMember( ArchiveMember de ) Delete member de from the archive. Uses the name of the member to detect which element to delete. Params de ArchiveMember Member to be deleted."
  },
  "phobos/std/zip/ZipArchive/Functions/directory.html": {
    "href": "phobos/std/zip/ZipArchive/Functions/directory.html",
    "title": "Overloads for - directory | Marmos Demo",
    "keywords": "Overloads for - directory Module std.zip Parent ZipArchive directory() <bug: unknown> directory( ) Associative array indexed by the name of each member of the archive. All the members of the archive can be accessed with a foreach loop Example -------------------- ZipArchive archive = new ZipArchive(data); foreach (ArchiveMember am; archive.directory) { writefln(\"member name is '%s'\", am.name); } -------------------- Returns: Associative array with all archive members."
  },
  "phobos/std/zip/ZipArchive/Functions/expand.html": {
    "href": "phobos/std/zip/ZipArchive/Functions/expand.html",
    "title": "Overloads for - expand | Marmos Demo",
    "keywords": "Overloads for - expand Module std.zip Parent ZipArchive expand(de) <bug: unknown> expand( ArchiveMember de ) Decompress the contents of a member. Fills in properties extractVersion, flags, compressionMethod, time, crc32, compressedSize, expandedSize, expandedData[], name[], extra[]. Params de ArchiveMember Member to be decompressed. Returns: The expanded data. Throws: ZipException when the entry is invalid or the compression method is not supported."
  },
  "phobos/std/zip/ZipArchive/Functions/findEndOfCentralDirRecord.html": {
    "href": "phobos/std/zip/ZipArchive/Functions/findEndOfCentralDirRecord.html",
    "title": "Overloads for - findEndOfCentralDirRecord | Marmos Demo",
    "keywords": "Overloads for - findEndOfCentralDirRecord Module std.zip Parent ZipArchive findEndOfCentralDirRecord() uint findEndOfCentralDirRecord( )"
  },
  "phobos/std/zip/ZipArchive/Functions/getUint.html": {
    "href": "phobos/std/zip/ZipArchive/Functions/getUint.html",
    "title": "Overloads for - getUint | Marmos Demo",
    "keywords": "Overloads for - getUint Module std.zip Parent ZipArchive getUint(i) uint getUint( uint i )"
  },
  "phobos/std/zip/ZipArchive/Functions/getUlong.html": {
    "href": "phobos/std/zip/ZipArchive/Functions/getUlong.html",
    "title": "Overloads for - getUlong | Marmos Demo",
    "keywords": "Overloads for - getUlong Module std.zip Parent ZipArchive getUlong(i) ulong getUlong( uint i )"
  },
  "phobos/std/zip/ZipArchive/Functions/getUshort.html": {
    "href": "phobos/std/zip/ZipArchive/Functions/getUshort.html",
    "title": "Overloads for - getUshort | Marmos Demo",
    "keywords": "Overloads for - getUshort Module std.zip Parent ZipArchive getUshort(i) ushort getUshort( uint i )"
  },
  "phobos/std/zip/ZipArchive/Functions/isZip64.html": {
    "href": "phobos/std/zip/ZipArchive/Functions/isZip64.html",
    "title": "Overloads for - isZip64 | Marmos Demo",
    "keywords": "Overloads for - isZip64 Module std.zip Parent ZipArchive isZip64() bool isZip64( ) True when the archive is in Zip64 format. Set this to true to force building a Zip64 archive. Params value <parameter not found> True, when the archive is forced to be build in Zip64 format. Returns: True, when the archive is in Zip64 format. isZip64(value) void isZip64( bool value ) ditto"
  },
  "phobos/std/zip/ZipArchive/Functions/print.html": {
    "href": "phobos/std/zip/ZipArchive/Functions/print.html",
    "title": "Overloads for - print | Marmos Demo",
    "keywords": "Overloads for - print Module std.zip Parent ZipArchive print() void print( )"
  },
  "phobos/std/zip/ZipArchive/Functions/putUint.html": {
    "href": "phobos/std/zip/ZipArchive/Functions/putUint.html",
    "title": "Overloads for - putUint | Marmos Demo",
    "keywords": "Overloads for - putUint Module std.zip Parent ZipArchive putUint(i, ui) void putUint( uint i, uint ui )"
  },
  "phobos/std/zip/ZipArchive/Functions/putUlong.html": {
    "href": "phobos/std/zip/ZipArchive/Functions/putUlong.html",
    "title": "Overloads for - putUlong | Marmos Demo",
    "keywords": "Overloads for - putUlong Module std.zip Parent ZipArchive putUlong(i, ul) void putUlong( uint i, ulong ul )"
  },
  "phobos/std/zip/ZipArchive/Functions/putUshort.html": {
    "href": "phobos/std/zip/ZipArchive/Functions/putUshort.html",
    "title": "Overloads for - putUshort | Marmos Demo",
    "keywords": "Overloads for - putUshort Module std.zip Parent ZipArchive putUshort(i, us) void putUshort( uint i, ushort us )"
  },
  "phobos/std/zip/ZipArchive/Functions/removeSegment.html": {
    "href": "phobos/std/zip/ZipArchive/Functions/removeSegment.html",
    "title": "Overloads for - removeSegment | Marmos Demo",
    "keywords": "Overloads for - removeSegment Module std.zip Parent ZipArchive removeSegment(start, end) void removeSegment( uint start, uint end )"
  },
  "phobos/std/zip/ZipArchive/Functions/totalEntries.html": {
    "href": "phobos/std/zip/ZipArchive/Functions/totalEntries.html",
    "title": "Overloads for - totalEntries | Marmos Demo",
    "keywords": "Overloads for - totalEntries Module std.zip Parent ZipArchive totalEntries() uint totalEntries( ) Number of ArchiveMembers in the directory. Returns: The number of files in this archive."
  },
  "phobos/std/zlib/Classes/Compress.html": {
    "href": "phobos/std/zlib/Classes/Compress.html",
    "title": "Class - Compress | Marmos Demo",
    "keywords": "Class - Compress Module std.zlib public class Compress { // Compress the data in buf and return the compressed data. Params: buf = data to compress <bug: unknown> compress( <bug: unknown> buf ) ; // void error( int err ) ; // Compress and return any remaining data. The returned data should be appended to that returned by compress(). Params: mode = one of the following: $(DL $(DT Z_SYNC_FLUSH ) $(DD Syncs up flushing to the next byte boundary. Used when more data is to be compressed later on.) $(DT Z_FULL_FLUSH ) $(DD Syncs up flushing to the next byte boundary. Used when more data is to be compressed later on, and the decompressor needs to be restartable at this point.) $(DT Z_FINISH) $(DD (default) Used when finished compressing the data. ) ) <bug: unknown> flush( int mode ) ; // immutable bool gzip; // int inited; // int level; // z_stream zs; } About Used when the data to be compressed is not all in one buffer. Functions Name Description compress Compress the data in buf and return the compressed data. Params: buf = data to compress error flush Compress and return any remaining data. The returned data should be appended to that returned by compress(). Params: mode = one of the following: $(DL $(DT Z_SYNC_FLUSH ) $(DD Syncs up flushing to the next byte boundary. Used when more data is to be compressed later on.) $(DT Z_FULL_FLUSH ) $(DD Syncs up flushing to the next byte boundary. Used when more data is to be compressed later on, and the decompressor needs to be restartable at this point.) $(DT Z_FINISH) $(DD (default) Used when finished compressing the data. ) ) Variables Name Description gzip inited level zs"
  },
  "phobos/std/zlib/Classes/UnCompress.html": {
    "href": "phobos/std/zlib/Classes/UnCompress.html",
    "title": "Class - UnCompress | Marmos Demo",
    "keywords": "Class - UnCompress Module std.zlib public class UnCompress { // Returns true if all input data has been decompressed and no further data can be decompressed (inflate() returned Z_STREAM_END) bool empty( ) ; // void error( int err ) ; // Decompress and return any remaining data. The returned data should be appended to that returned by uncompress(). The UnCompress object cannot be used further. <bug: unknown> flush( ) ; // Decompress the data in buf and return the decompressed data. The buffers returned from successive calls to this should be concatenated together. <bug: unknown> uncompress( <bug: unknown> buf ) ; // size_t destbufsize; // int done; // HeaderFormat format; // int inited; // bool inputEnded; // z_stream zs; } About Used when the data to be decompressed is not all in one buffer. Functions Name Description empty Returns true if all input data has been decompressed and no further data can be decompressed (inflate() returned Z_STREAM_END) error flush Decompress and return any remaining data. The returned data should be appended to that returned by uncompress(). The UnCompress object cannot be used further. uncompress Decompress the data in buf and return the decompressed data. The buffers returned from successive calls to this should be concatenated together. Variables Name Description destbufsize done format inited inputEnded zs"
  },
  "phobos/std/zlib/Classes/ZlibException.html": {
    "href": "phobos/std/zlib/Classes/ZlibException.html",
    "title": "Class - ZlibException | Marmos Demo",
    "keywords": "Class - ZlibException Module std.zlib public class ZlibException { // string getmsg( int errnum ) static; } About Errors throw a ZlibException. Functions Name Description getmsg"
  },
  "phobos/std/zlib/Compress/Functions/compress.html": {
    "href": "phobos/std/zlib/Compress/Functions/compress.html",
    "title": "Overloads for - compress | Marmos Demo",
    "keywords": "Overloads for - compress Module std.zlib Parent Compress compress(buf) <bug: unknown> compress( <bug: unknown> buf ) Compress the data in buf and return the compressed data. Params: buf = data to compress Returns the compressed data. The buffers returned from successive calls to this should be concatenated together."
  },
  "phobos/std/zlib/Compress/Functions/error.html": {
    "href": "phobos/std/zlib/Compress/Functions/error.html",
    "title": "Overloads for - error | Marmos Demo",
    "keywords": "Overloads for - error Module std.zlib Parent Compress error(err) void error( int err )"
  },
  "phobos/std/zlib/Compress/Functions/flush.html": {
    "href": "phobos/std/zlib/Compress/Functions/flush.html",
    "title": "Overloads for - flush | Marmos Demo",
    "keywords": "Overloads for - flush Module std.zlib Parent Compress flush(mode) <bug: unknown> flush( int mode ) Compress and return any remaining data. The returned data should be appended to that returned by compress(). Params: mode = one of the following: $(DL $(DT Z_SYNC_FLUSH ) $(DD Syncs up flushing to the next byte boundary. Used when more data is to be compressed later on.) $(DT Z_FULL_FLUSH ) $(DD Syncs up flushing to the next byte boundary. Used when more data is to be compressed later on, and the decompressor needs to be restartable at this point.) $(DT Z_FINISH) $(DD (default) Used when finished compressing the data. ) )"
  },
  "phobos/std/zlib/Functions/adler32.html": {
    "href": "phobos/std/zlib/Functions/adler32.html",
    "title": "Overloads for - adler32 | Marmos Demo",
    "keywords": "Overloads for - adler32 Module std.zlib adler32(adler, buf) uint adler32( uint adler, <bug: unknown> buf ) $(P Compute the Adler-32 checksum of a buffer's worth of data.) Params adler uint the starting checksum for the computation. Use 1 for a new checksum. Use the output of this function for a cumulative checksum. buf <bug: unknown> buffer containing input data Returns A uint checksum for the provided input data and starting checksum See_Also $(LINK http://en.wikipedia.org/wiki/Adler-32)"
  },
  "phobos/std/zlib/Functions/compress.html": {
    "href": "phobos/std/zlib/Functions/compress.html",
    "title": "Overloads for - compress | Marmos Demo",
    "keywords": "Overloads for - compress Module std.zlib compress(srcbuf, level) <bug: unknown> compress( <bug: unknown> srcbuf, int level ) $(P Compress data) Params srcbuf <bug: unknown> buffer containing the data to compress level int compression level. Legal values are -1 .. 9, with -1 indicating the default level (6), 0 indicating no compression, 1 being the least compression and 9 being the most. Returns the compressed data compress(srcbuf) <bug: unknown> compress( <bug: unknown> srcbuf ) ditto"
  },
  "phobos/std/zlib/Functions/crc32.html": {
    "href": "phobos/std/zlib/Functions/crc32.html",
    "title": "Overloads for - crc32 | Marmos Demo",
    "keywords": "Overloads for - crc32 Module std.zlib crc32(crc, buf) uint crc32( uint crc, <bug: unknown> buf ) $(P Compute the CRC32 checksum of a buffer's worth of data.) Params crc uint the starting checksum for the computation. Use 0 for a new checksum. Use the output of this function for a cumulative checksum. buf <bug: unknown> buffer containing input data Returns A uint checksum for the provided input data and starting checksum See_Also $(LINK http://en.wikipedia.org/wiki/Cyclic_redundancy_check)"
  },
  "phobos/std/zlib/Functions/uncompress.html": {
    "href": "phobos/std/zlib/Functions/uncompress.html",
    "title": "Overloads for - uncompress | Marmos Demo",
    "keywords": "Overloads for - uncompress Module std.zlib uncompress(srcbuf, destlen, winbits) <bug: unknown> uncompress( <bug: unknown> srcbuf, size_t destlen, int winbits ) Decompresses the data in srcbuf[]. Params: srcbuf = buffer containing the compressed data. destlen = size of the uncompressed data. It need not be accurate, but the decompression will be faster if the exact size is supplied. winbits = the base two logarithm of the maximum window size. Returns: the decompressed data."
  },
  "phobos/std/zlib/Overview.html": {
    "href": "phobos/std/zlib/Overview.html",
    "title": "Module - std.zlib | Marmos Demo",
    "keywords": "Module - std.zlib About Compress/decompress data using the $(HTTP www.zlib.net, zlib library). Examples If you have a small buffer you can use $(LREF compress) and $(LREF uncompress) directly. ------- import std.zlib; auto src = \"the quick brown fox jumps over the lazy dog\\r the quick brown fox jumps over the lazy dog\\r\"; ubyte[] dst; ubyte[] result; dst = compress(src); result = cast(ubyte[]) uncompress(dst); assert(result == src); ------- When the data to be compressed doesn't fit in one buffer, use $(LREF Compress) and $(LREF UnCompress). ------- import std.zlib; import std.stdio; import std.conv : to; import std.algorithm.iteration : map; UnCompress decmp = new UnCompress; foreach (chunk; stdin.byChunk(4096).map!(x => decmp.uncompress(x))) { chunk.to!string.write; } References $(HTTP en.wikipedia.org/wiki/Zlib, Wikipedia) Copyright: Copyright The D Language Foundation 2000 - 2011. License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0). Authors: $(HTTP digitalmars.com, Walter Bright) Source: $(PHOBOSSRC std/zlib.d) Classes Name Description Compress Used when the data to be compressed is not all in one buffer. UnCompress Used when the data to be decompressed is not all in one buffer. ZlibException Errors throw a ZlibException. Functions Name Description adler32 $(P Compute the Adler-32 checksum of a buffer's worth of data.) compress $(P Compress data) crc32 $(P Compute the CRC32 checksum of a buffer's worth of data.) uncompress Decompresses the data in srcbuf[]. Params: srcbuf = buffer containing the compressed data. destlen = size of the uncompressed data. It need not be accurate, but the decompression will be faster if the exact size is supplied. winbits = the base two logarithm of the maximum window size. Returns: the decompressed data."
  },
  "phobos/std/zlib/UnCompress/Functions/empty.html": {
    "href": "phobos/std/zlib/UnCompress/Functions/empty.html",
    "title": "Overloads for - empty | Marmos Demo",
    "keywords": "Overloads for - empty Module std.zlib Parent UnCompress empty() bool empty( ) Returns true if all input data has been decompressed and no further data can be decompressed (inflate() returned Z_STREAM_END)"
  },
  "phobos/std/zlib/UnCompress/Functions/error.html": {
    "href": "phobos/std/zlib/UnCompress/Functions/error.html",
    "title": "Overloads for - error | Marmos Demo",
    "keywords": "Overloads for - error Module std.zlib Parent UnCompress error(err) void error( int err )"
  },
  "phobos/std/zlib/UnCompress/Functions/flush.html": {
    "href": "phobos/std/zlib/UnCompress/Functions/flush.html",
    "title": "Overloads for - flush | Marmos Demo",
    "keywords": "Overloads for - flush Module std.zlib Parent UnCompress flush() <bug: unknown> flush( ) Decompress and return any remaining data. The returned data should be appended to that returned by uncompress(). The UnCompress object cannot be used further."
  },
  "phobos/std/zlib/UnCompress/Functions/uncompress.html": {
    "href": "phobos/std/zlib/UnCompress/Functions/uncompress.html",
    "title": "Overloads for - uncompress | Marmos Demo",
    "keywords": "Overloads for - uncompress Module std.zlib Parent UnCompress uncompress(buf) <bug: unknown> uncompress( <bug: unknown> buf ) Decompress the data in buf and return the decompressed data. The buffers returned from successive calls to this should be concatenated together."
  },
  "phobos/std/zlib/ZlibException/Functions/getmsg.html": {
    "href": "phobos/std/zlib/ZlibException/Functions/getmsg.html",
    "title": "Overloads for - getmsg | Marmos Demo",
    "keywords": "Overloads for - getmsg Module std.zlib Parent ZlibException getmsg(errnum) string getmsg( int errnum ) static"
  }
}